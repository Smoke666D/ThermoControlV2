
ThermoControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000767c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  0800778c  0800778c  0001778c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c30  08007c30  00020100  2**0
                  CONTENTS
  4 .ARM          00000000  08007c30  08007c30  00020100  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007c30  08007c30  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c30  08007c30  00017c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c34  08007c34  00017c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08007c38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031e0  20000100  08007d38  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200032e0  08007d38  000232e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b05d  00000000  00000000  00020129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005ee3  00000000  00000000  0004b186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001f022  00000000  00000000  00051069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001860  00000000  00000000  00070090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001f60  00000000  00000000  000718f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d42c  00000000  00000000  00073850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a953  00000000  00000000  00090c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009cdc5  00000000  00000000  000bb5cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00158394  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000495c  00000000  00000000  001583e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000100 	.word	0x20000100
 800012c:	00000000 	.word	0x00000000
 8000130:	08007774 	.word	0x08007774

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000104 	.word	0x20000104
 800014c:	08007774 	.word	0x08007774

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <__aeabi_d2f>:
 800092c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000930:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000934:	bf24      	itt	cs
 8000936:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800093a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800093e:	d90d      	bls.n	800095c <__aeabi_d2f+0x30>
 8000940:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000944:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000948:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800094c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000950:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000954:	bf08      	it	eq
 8000956:	f020 0001 	biceq.w	r0, r0, #1
 800095a:	4770      	bx	lr
 800095c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000960:	d121      	bne.n	80009a6 <__aeabi_d2f+0x7a>
 8000962:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000966:	bfbc      	itt	lt
 8000968:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800096c:	4770      	bxlt	lr
 800096e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000972:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000976:	f1c2 0218 	rsb	r2, r2, #24
 800097a:	f1c2 0c20 	rsb	ip, r2, #32
 800097e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000982:	fa20 f002 	lsr.w	r0, r0, r2
 8000986:	bf18      	it	ne
 8000988:	f040 0001 	orrne.w	r0, r0, #1
 800098c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000990:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000994:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000998:	ea40 000c 	orr.w	r0, r0, ip
 800099c:	fa23 f302 	lsr.w	r3, r3, r2
 80009a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009a4:	e7cc      	b.n	8000940 <__aeabi_d2f+0x14>
 80009a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009aa:	d107      	bne.n	80009bc <__aeabi_d2f+0x90>
 80009ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009b0:	bf1e      	ittt	ne
 80009b2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009b6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ba:	4770      	bxne	lr
 80009bc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_frsub>:
 80009cc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	e002      	b.n	80009d8 <__addsf3>
 80009d2:	bf00      	nop

080009d4 <__aeabi_fsub>:
 80009d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009d8 <__addsf3>:
 80009d8:	0042      	lsls	r2, r0, #1
 80009da:	bf1f      	itttt	ne
 80009dc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009e0:	ea92 0f03 	teqne	r2, r3
 80009e4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009e8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ec:	d06a      	beq.n	8000ac4 <__addsf3+0xec>
 80009ee:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009f2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009f6:	bfc1      	itttt	gt
 80009f8:	18d2      	addgt	r2, r2, r3
 80009fa:	4041      	eorgt	r1, r0
 80009fc:	4048      	eorgt	r0, r1
 80009fe:	4041      	eorgt	r1, r0
 8000a00:	bfb8      	it	lt
 8000a02:	425b      	neglt	r3, r3
 8000a04:	2b19      	cmp	r3, #25
 8000a06:	bf88      	it	hi
 8000a08:	4770      	bxhi	lr
 8000a0a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a16:	bf18      	it	ne
 8000a18:	4240      	negne	r0, r0
 8000a1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a1e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a22:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4249      	negne	r1, r1
 8000a2a:	ea92 0f03 	teq	r2, r3
 8000a2e:	d03f      	beq.n	8000ab0 <__addsf3+0xd8>
 8000a30:	f1a2 0201 	sub.w	r2, r2, #1
 8000a34:	fa41 fc03 	asr.w	ip, r1, r3
 8000a38:	eb10 000c 	adds.w	r0, r0, ip
 8000a3c:	f1c3 0320 	rsb	r3, r3, #32
 8000a40:	fa01 f103 	lsl.w	r1, r1, r3
 8000a44:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a48:	d502      	bpl.n	8000a50 <__addsf3+0x78>
 8000a4a:	4249      	negs	r1, r1
 8000a4c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a50:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a54:	d313      	bcc.n	8000a7e <__addsf3+0xa6>
 8000a56:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a5a:	d306      	bcc.n	8000a6a <__addsf3+0x92>
 8000a5c:	0840      	lsrs	r0, r0, #1
 8000a5e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a62:	f102 0201 	add.w	r2, r2, #1
 8000a66:	2afe      	cmp	r2, #254	; 0xfe
 8000a68:	d251      	bcs.n	8000b0e <__addsf3+0x136>
 8000a6a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a72:	bf08      	it	eq
 8000a74:	f020 0001 	biceq.w	r0, r0, #1
 8000a78:	ea40 0003 	orr.w	r0, r0, r3
 8000a7c:	4770      	bx	lr
 8000a7e:	0049      	lsls	r1, r1, #1
 8000a80:	eb40 0000 	adc.w	r0, r0, r0
 8000a84:	3a01      	subs	r2, #1
 8000a86:	bf28      	it	cs
 8000a88:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a8c:	d2ed      	bcs.n	8000a6a <__addsf3+0x92>
 8000a8e:	fab0 fc80 	clz	ip, r0
 8000a92:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a96:	ebb2 020c 	subs.w	r2, r2, ip
 8000a9a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a9e:	bfaa      	itet	ge
 8000aa0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000aa4:	4252      	neglt	r2, r2
 8000aa6:	4318      	orrge	r0, r3
 8000aa8:	bfbc      	itt	lt
 8000aaa:	40d0      	lsrlt	r0, r2
 8000aac:	4318      	orrlt	r0, r3
 8000aae:	4770      	bx	lr
 8000ab0:	f092 0f00 	teq	r2, #0
 8000ab4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ab8:	bf06      	itte	eq
 8000aba:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000abe:	3201      	addeq	r2, #1
 8000ac0:	3b01      	subne	r3, #1
 8000ac2:	e7b5      	b.n	8000a30 <__addsf3+0x58>
 8000ac4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ac8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000acc:	bf18      	it	ne
 8000ace:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad2:	d021      	beq.n	8000b18 <__addsf3+0x140>
 8000ad4:	ea92 0f03 	teq	r2, r3
 8000ad8:	d004      	beq.n	8000ae4 <__addsf3+0x10c>
 8000ada:	f092 0f00 	teq	r2, #0
 8000ade:	bf08      	it	eq
 8000ae0:	4608      	moveq	r0, r1
 8000ae2:	4770      	bx	lr
 8000ae4:	ea90 0f01 	teq	r0, r1
 8000ae8:	bf1c      	itt	ne
 8000aea:	2000      	movne	r0, #0
 8000aec:	4770      	bxne	lr
 8000aee:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000af2:	d104      	bne.n	8000afe <__addsf3+0x126>
 8000af4:	0040      	lsls	r0, r0, #1
 8000af6:	bf28      	it	cs
 8000af8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000afc:	4770      	bx	lr
 8000afe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b02:	bf3c      	itt	cc
 8000b04:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bxcc	lr
 8000b0a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b0e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b16:	4770      	bx	lr
 8000b18:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b1c:	bf16      	itet	ne
 8000b1e:	4608      	movne	r0, r1
 8000b20:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b24:	4601      	movne	r1, r0
 8000b26:	0242      	lsls	r2, r0, #9
 8000b28:	bf06      	itte	eq
 8000b2a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b2e:	ea90 0f01 	teqeq	r0, r1
 8000b32:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b36:	4770      	bx	lr

08000b38 <__aeabi_ui2f>:
 8000b38:	f04f 0300 	mov.w	r3, #0
 8000b3c:	e004      	b.n	8000b48 <__aeabi_i2f+0x8>
 8000b3e:	bf00      	nop

08000b40 <__aeabi_i2f>:
 8000b40:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	bf48      	it	mi
 8000b46:	4240      	negmi	r0, r0
 8000b48:	ea5f 0c00 	movs.w	ip, r0
 8000b4c:	bf08      	it	eq
 8000b4e:	4770      	bxeq	lr
 8000b50:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b54:	4601      	mov	r1, r0
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	e01c      	b.n	8000b96 <__aeabi_l2f+0x2a>

08000b5c <__aeabi_ul2f>:
 8000b5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b60:	bf08      	it	eq
 8000b62:	4770      	bxeq	lr
 8000b64:	f04f 0300 	mov.w	r3, #0
 8000b68:	e00a      	b.n	8000b80 <__aeabi_l2f+0x14>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_l2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b78:	d502      	bpl.n	8000b80 <__aeabi_l2f+0x14>
 8000b7a:	4240      	negs	r0, r0
 8000b7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b80:	ea5f 0c01 	movs.w	ip, r1
 8000b84:	bf02      	ittt	eq
 8000b86:	4684      	moveq	ip, r0
 8000b88:	4601      	moveq	r1, r0
 8000b8a:	2000      	moveq	r0, #0
 8000b8c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b90:	bf08      	it	eq
 8000b92:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b96:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b9a:	fabc f28c 	clz	r2, ip
 8000b9e:	3a08      	subs	r2, #8
 8000ba0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ba4:	db10      	blt.n	8000bc8 <__aeabi_l2f+0x5c>
 8000ba6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000baa:	4463      	add	r3, ip
 8000bac:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bb0:	f1c2 0220 	rsb	r2, r2, #32
 8000bb4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bbc:	eb43 0002 	adc.w	r0, r3, r2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f102 0220 	add.w	r2, r2, #32
 8000bcc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bd0:	f1c2 0220 	rsb	r2, r2, #32
 8000bd4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bd8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bdc:	eb43 0002 	adc.w	r0, r3, r2
 8000be0:	bf08      	it	eq
 8000be2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_fmul>:
 8000be8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bf6:	ea92 0f0c 	teqne	r2, ip
 8000bfa:	ea93 0f0c 	teqne	r3, ip
 8000bfe:	d06f      	beq.n	8000ce0 <__aeabi_fmul+0xf8>
 8000c00:	441a      	add	r2, r3
 8000c02:	ea80 0c01 	eor.w	ip, r0, r1
 8000c06:	0240      	lsls	r0, r0, #9
 8000c08:	bf18      	it	ne
 8000c0a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c0e:	d01e      	beq.n	8000c4e <__aeabi_fmul+0x66>
 8000c10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c14:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c18:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c1c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c24:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c28:	bf3e      	ittt	cc
 8000c2a:	0049      	lslcc	r1, r1, #1
 8000c2c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c30:	005b      	lslcc	r3, r3, #1
 8000c32:	ea40 0001 	orr.w	r0, r0, r1
 8000c36:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c3a:	2afd      	cmp	r2, #253	; 0xfd
 8000c3c:	d81d      	bhi.n	8000c7a <__aeabi_fmul+0x92>
 8000c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	4770      	bx	lr
 8000c4e:	f090 0f00 	teq	r0, #0
 8000c52:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c56:	bf08      	it	eq
 8000c58:	0249      	lsleq	r1, r1, #9
 8000c5a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c5e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c62:	3a7f      	subs	r2, #127	; 0x7f
 8000c64:	bfc2      	ittt	gt
 8000c66:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c6a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c6e:	4770      	bxgt	lr
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	3a01      	subs	r2, #1
 8000c7a:	dc5d      	bgt.n	8000d38 <__aeabi_fmul+0x150>
 8000c7c:	f112 0f19 	cmn.w	r2, #25
 8000c80:	bfdc      	itt	le
 8000c82:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c86:	4770      	bxle	lr
 8000c88:	f1c2 0200 	rsb	r2, r2, #0
 8000c8c:	0041      	lsls	r1, r0, #1
 8000c8e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c92:	f1c2 0220 	rsb	r2, r2, #32
 8000c96:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c9a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c9e:	f140 0000 	adc.w	r0, r0, #0
 8000ca2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ca6:	bf08      	it	eq
 8000ca8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cac:	4770      	bx	lr
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cb6:	bf02      	ittt	eq
 8000cb8:	0040      	lsleq	r0, r0, #1
 8000cba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cbe:	3a01      	subeq	r2, #1
 8000cc0:	d0f9      	beq.n	8000cb6 <__aeabi_fmul+0xce>
 8000cc2:	ea40 000c 	orr.w	r0, r0, ip
 8000cc6:	f093 0f00 	teq	r3, #0
 8000cca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cce:	bf02      	ittt	eq
 8000cd0:	0049      	lsleq	r1, r1, #1
 8000cd2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000cd6:	3b01      	subeq	r3, #1
 8000cd8:	d0f9      	beq.n	8000cce <__aeabi_fmul+0xe6>
 8000cda:	ea41 010c 	orr.w	r1, r1, ip
 8000cde:	e78f      	b.n	8000c00 <__aeabi_fmul+0x18>
 8000ce0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ce4:	ea92 0f0c 	teq	r2, ip
 8000ce8:	bf18      	it	ne
 8000cea:	ea93 0f0c 	teqne	r3, ip
 8000cee:	d00a      	beq.n	8000d06 <__aeabi_fmul+0x11e>
 8000cf0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cf4:	bf18      	it	ne
 8000cf6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cfa:	d1d8      	bne.n	8000cae <__aeabi_fmul+0xc6>
 8000cfc:	ea80 0001 	eor.w	r0, r0, r1
 8000d00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d04:	4770      	bx	lr
 8000d06:	f090 0f00 	teq	r0, #0
 8000d0a:	bf17      	itett	ne
 8000d0c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d10:	4608      	moveq	r0, r1
 8000d12:	f091 0f00 	teqne	r1, #0
 8000d16:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d1a:	d014      	beq.n	8000d46 <__aeabi_fmul+0x15e>
 8000d1c:	ea92 0f0c 	teq	r2, ip
 8000d20:	d101      	bne.n	8000d26 <__aeabi_fmul+0x13e>
 8000d22:	0242      	lsls	r2, r0, #9
 8000d24:	d10f      	bne.n	8000d46 <__aeabi_fmul+0x15e>
 8000d26:	ea93 0f0c 	teq	r3, ip
 8000d2a:	d103      	bne.n	8000d34 <__aeabi_fmul+0x14c>
 8000d2c:	024b      	lsls	r3, r1, #9
 8000d2e:	bf18      	it	ne
 8000d30:	4608      	movne	r0, r1
 8000d32:	d108      	bne.n	8000d46 <__aeabi_fmul+0x15e>
 8000d34:	ea80 0001 	eor.w	r0, r0, r1
 8000d38:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	4770      	bx	lr
 8000d46:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d4a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d4e:	4770      	bx	lr

08000d50 <__aeabi_fdiv>:
 8000d50:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d58:	bf1e      	ittt	ne
 8000d5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d5e:	ea92 0f0c 	teqne	r2, ip
 8000d62:	ea93 0f0c 	teqne	r3, ip
 8000d66:	d069      	beq.n	8000e3c <__aeabi_fdiv+0xec>
 8000d68:	eba2 0203 	sub.w	r2, r2, r3
 8000d6c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d70:	0249      	lsls	r1, r1, #9
 8000d72:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d76:	d037      	beq.n	8000de8 <__aeabi_fdiv+0x98>
 8000d78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d7c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d80:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d84:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	bf38      	it	cc
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d92:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d96:	428b      	cmp	r3, r1
 8000d98:	bf24      	itt	cs
 8000d9a:	1a5b      	subcs	r3, r3, r1
 8000d9c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000da0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000da4:	bf24      	itt	cs
 8000da6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000daa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dae:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000db2:	bf24      	itt	cs
 8000db4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000db8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dbc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dc0:	bf24      	itt	cs
 8000dc2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dc6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dca:	011b      	lsls	r3, r3, #4
 8000dcc:	bf18      	it	ne
 8000dce:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000dd2:	d1e0      	bne.n	8000d96 <__aeabi_fdiv+0x46>
 8000dd4:	2afd      	cmp	r2, #253	; 0xfd
 8000dd6:	f63f af50 	bhi.w	8000c7a <__aeabi_fmul+0x92>
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de0:	bf08      	it	eq
 8000de2:	f020 0001 	biceq.w	r0, r0, #1
 8000de6:	4770      	bx	lr
 8000de8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dec:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df0:	327f      	adds	r2, #127	; 0x7f
 8000df2:	bfc2      	ittt	gt
 8000df4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000df8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfc:	4770      	bxgt	lr
 8000dfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e02:	f04f 0300 	mov.w	r3, #0
 8000e06:	3a01      	subs	r2, #1
 8000e08:	e737      	b.n	8000c7a <__aeabi_fmul+0x92>
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fdiv+0xc2>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fdiv+0xda>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e795      	b.n	8000d68 <__aeabi_fdiv+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	d108      	bne.n	8000e58 <__aeabi_fdiv+0x108>
 8000e46:	0242      	lsls	r2, r0, #9
 8000e48:	f47f af7d 	bne.w	8000d46 <__aeabi_fmul+0x15e>
 8000e4c:	ea93 0f0c 	teq	r3, ip
 8000e50:	f47f af70 	bne.w	8000d34 <__aeabi_fmul+0x14c>
 8000e54:	4608      	mov	r0, r1
 8000e56:	e776      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e58:	ea93 0f0c 	teq	r3, ip
 8000e5c:	d104      	bne.n	8000e68 <__aeabi_fdiv+0x118>
 8000e5e:	024b      	lsls	r3, r1, #9
 8000e60:	f43f af4c 	beq.w	8000cfc <__aeabi_fmul+0x114>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e76e      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e68:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e6c:	bf18      	it	ne
 8000e6e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e72:	d1ca      	bne.n	8000e0a <__aeabi_fdiv+0xba>
 8000e74:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e78:	f47f af5c 	bne.w	8000d34 <__aeabi_fmul+0x14c>
 8000e7c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e80:	f47f af3c 	bne.w	8000cfc <__aeabi_fmul+0x114>
 8000e84:	e75f      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e86:	bf00      	nop

08000e88 <__gesf2>:
 8000e88:	f04f 3cff 	mov.w	ip, #4294967295
 8000e8c:	e006      	b.n	8000e9c <__cmpsf2+0x4>
 8000e8e:	bf00      	nop

08000e90 <__lesf2>:
 8000e90:	f04f 0c01 	mov.w	ip, #1
 8000e94:	e002      	b.n	8000e9c <__cmpsf2+0x4>
 8000e96:	bf00      	nop

08000e98 <__cmpsf2>:
 8000e98:	f04f 0c01 	mov.w	ip, #1
 8000e9c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ea0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ea4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ea8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eac:	bf18      	it	ne
 8000eae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000eb2:	d011      	beq.n	8000ed8 <__cmpsf2+0x40>
 8000eb4:	b001      	add	sp, #4
 8000eb6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eba:	bf18      	it	ne
 8000ebc:	ea90 0f01 	teqne	r0, r1
 8000ec0:	bf58      	it	pl
 8000ec2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ec6:	bf88      	it	hi
 8000ec8:	17c8      	asrhi	r0, r1, #31
 8000eca:	bf38      	it	cc
 8000ecc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ed0:	bf18      	it	ne
 8000ed2:	f040 0001 	orrne.w	r0, r0, #1
 8000ed6:	4770      	bx	lr
 8000ed8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000edc:	d102      	bne.n	8000ee4 <__cmpsf2+0x4c>
 8000ede:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ee2:	d105      	bne.n	8000ef0 <__cmpsf2+0x58>
 8000ee4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ee8:	d1e4      	bne.n	8000eb4 <__cmpsf2+0x1c>
 8000eea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eee:	d0e1      	beq.n	8000eb4 <__cmpsf2+0x1c>
 8000ef0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_cfrcmple>:
 8000ef8:	4684      	mov	ip, r0
 8000efa:	4608      	mov	r0, r1
 8000efc:	4661      	mov	r1, ip
 8000efe:	e7ff      	b.n	8000f00 <__aeabi_cfcmpeq>

08000f00 <__aeabi_cfcmpeq>:
 8000f00:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f02:	f7ff ffc9 	bl	8000e98 <__cmpsf2>
 8000f06:	2800      	cmp	r0, #0
 8000f08:	bf48      	it	mi
 8000f0a:	f110 0f00 	cmnmi.w	r0, #0
 8000f0e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f10 <__aeabi_fcmpeq>:
 8000f10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f14:	f7ff fff4 	bl	8000f00 <__aeabi_cfcmpeq>
 8000f18:	bf0c      	ite	eq
 8000f1a:	2001      	moveq	r0, #1
 8000f1c:	2000      	movne	r0, #0
 8000f1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f22:	bf00      	nop

08000f24 <__aeabi_fcmplt>:
 8000f24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f28:	f7ff ffea 	bl	8000f00 <__aeabi_cfcmpeq>
 8000f2c:	bf34      	ite	cc
 8000f2e:	2001      	movcc	r0, #1
 8000f30:	2000      	movcs	r0, #0
 8000f32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f36:	bf00      	nop

08000f38 <__aeabi_fcmple>:
 8000f38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f3c:	f7ff ffe0 	bl	8000f00 <__aeabi_cfcmpeq>
 8000f40:	bf94      	ite	ls
 8000f42:	2001      	movls	r0, #1
 8000f44:	2000      	movhi	r0, #0
 8000f46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f4a:	bf00      	nop

08000f4c <__aeabi_fcmpge>:
 8000f4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f50:	f7ff ffd2 	bl	8000ef8 <__aeabi_cfrcmple>
 8000f54:	bf94      	ite	ls
 8000f56:	2001      	movls	r0, #1
 8000f58:	2000      	movhi	r0, #0
 8000f5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5e:	bf00      	nop

08000f60 <__aeabi_fcmpgt>:
 8000f60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f64:	f7ff ffc8 	bl	8000ef8 <__aeabi_cfrcmple>
 8000f68:	bf34      	ite	cc
 8000f6a:	2001      	movcc	r0, #1
 8000f6c:	2000      	movcs	r0, #0
 8000f6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f72:	bf00      	nop

08000f74 <__aeabi_f2uiz>:
 8000f74:	0042      	lsls	r2, r0, #1
 8000f76:	d20e      	bcs.n	8000f96 <__aeabi_f2uiz+0x22>
 8000f78:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f7c:	d30b      	bcc.n	8000f96 <__aeabi_f2uiz+0x22>
 8000f7e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f82:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f86:	d409      	bmi.n	8000f9c <__aeabi_f2uiz+0x28>
 8000f88:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f90:	fa23 f002 	lsr.w	r0, r3, r2
 8000f94:	4770      	bx	lr
 8000f96:	f04f 0000 	mov.w	r0, #0
 8000f9a:	4770      	bx	lr
 8000f9c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fa0:	d101      	bne.n	8000fa6 <__aeabi_f2uiz+0x32>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	d102      	bne.n	8000fac <__aeabi_f2uiz+0x38>
 8000fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8000faa:	4770      	bx	lr
 8000fac:	f04f 0000 	mov.w	r0, #0
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <fGetAinCalData>:
}
/*
 *
 */
float fGetAinCalData( AIN_NAME_t name, float raw_data)
{
 8000fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     float out_data = 0U;
      if ( name < AIN_NUMBER )
 8000fb8:	2802      	cmp	r0, #2
 8000fba:	d833      	bhi.n	8001024 <fGetAinCalData+0x70>
 8000fbc:	460e      	mov	r6, r1
     {
          if ( xAinData[ name ].coof_count == 0 )
 8000fbe:	4b1c      	ldr	r3, [pc, #112]	; (8001030 <fGetAinCalData+0x7c>)
 8000fc0:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 8000fc4:	b90b      	cbnz	r3, 8000fca <fGetAinCalData+0x16>
           {
               out_data = raw_data;
 8000fc6:	460f      	mov	r7, r1
 8000fc8:	e02d      	b.n	8001026 <fGetAinCalData+0x72>
    for (uint16_t i =  xAinData[ name ].index; i < (xAinData[ name ].index + xAinData[ name ].coof_count ); i++ )
 8000fca:	4a19      	ldr	r2, [pc, #100]	; (8001030 <fGetAinCalData+0x7c>)
 8000fcc:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8000fd0:	7842      	ldrb	r2, [r0, #1]
 8000fd2:	b294      	uxth	r4, r2
 8000fd4:	4615      	mov	r5, r2
 8000fd6:	eb03 0802 	add.w	r8, r3, r2
 8000fda:	4542      	cmp	r2, r8
 8000fdc:	da26      	bge.n	800102c <fGetAinCalData+0x78>
    float out_data = 0;
 8000fde:	2700      	movs	r7, #0
        if ( (i ==  (xAinData[ name ].index + xAinData[ name ].coof_count)) || (in_data <= xKoofData[i].data ) )
 8000fe0:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8001034 <fGetAinCalData+0x80>
 8000fe4:	e004      	b.n	8000ff0 <fGetAinCalData+0x3c>
    for (uint16_t i =  xAinData[ name ].index; i < (xAinData[ name ].index + xAinData[ name ].coof_count ); i++ )
 8000fe6:	3401      	adds	r4, #1
 8000fe8:	b2a4      	uxth	r4, r4
 8000fea:	4625      	mov	r5, r4
 8000fec:	4544      	cmp	r4, r8
 8000fee:	da1a      	bge.n	8001026 <fGetAinCalData+0x72>
        if ( (i ==  (xAinData[ name ].index + xAinData[ name ].coof_count)) || (in_data <= xKoofData[i].data ) )
 8000ff0:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000ff4:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 8000ff8:	4630      	mov	r0, r6
 8000ffa:	f7ff ff9d 	bl	8000f38 <__aeabi_fcmple>
 8000ffe:	2800      	cmp	r0, #0
 8001000:	d0f1      	beq.n	8000fe6 <fGetAinCalData+0x32>
            out_data = xKoofData[i].k * in_data + xKoofData[i].b;
 8001002:	006f      	lsls	r7, r5, #1
 8001004:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001008:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800100c:	6859      	ldr	r1, [r3, #4]
 800100e:	4630      	mov	r0, r6
 8001010:	f7ff fdea 	bl	8000be8 <__aeabi_fmul>
 8001014:	442f      	add	r7, r5
 8001016:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800101a:	68b9      	ldr	r1, [r7, #8]
 800101c:	f7ff fcdc 	bl	80009d8 <__addsf3>
 8001020:	4607      	mov	r7, r0
 8001022:	e7e0      	b.n	8000fe6 <fGetAinCalData+0x32>
     float out_data = 0U;
 8001024:	2700      	movs	r7, #0
           {
               out_data = fConvertCalData( name, raw_data);
           }
      }
      return ( out_data );
}
 8001026:	4638      	mov	r0, r7
 8001028:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    float out_data = 0;
 800102c:	2700      	movs	r7, #0
      return ( out_data );
 800102e:	e7fa      	b.n	8001026 <fGetAinCalData+0x72>
 8001030:	20000120 	.word	0x20000120
 8001034:	20000128 	.word	0x20000128

08001038 <eAinCalDataConfig>:

CAL_ERROR_CODE  eAinCalDataConfig(AIN_NAME_t name, uint8_t cal_point_count )
{
    CAL_ERROR_CODE res = CAL_SUCCESS;
    if (cal_point_count == 1)
 8001038:	2901      	cmp	r1, #1
 800103a:	d01e      	beq.n	800107a <eAinCalDataConfig+0x42>
 800103c:	4603      	mov	r3, r0
    {
        res = CAL_POINT_COUNT_ERROR;
    }
    else
    {
        if (  xAinData[ name ].coof_count == 0 )
 800103e:	4a11      	ldr	r2, [pc, #68]	; (8001084 <eAinCalDataConfig+0x4c>)
 8001040:	f812 0010 	ldrb.w	r0, [r2, r0, lsl #1]
 8001044:	b998      	cbnz	r0, 800106e <eAinCalDataConfig+0x36>
{
 8001046:	b410      	push	{r4}
        {
            if  ( (cal_point_count +  usCurMaxIndex) > MAX_TOTAL_CAL_POINT )
 8001048:	4a0f      	ldr	r2, [pc, #60]	; (8001088 <eAinCalDataConfig+0x50>)
 800104a:	8812      	ldrh	r2, [r2, #0]
 800104c:	188c      	adds	r4, r1, r2
 800104e:	2c3c      	cmp	r4, #60	; 0x3c
 8001050:	d815      	bhi.n	800107e <eAinCalDataConfig+0x46>
            {
                res = CAL_MEMORY_FULL;
            }
            else
            {
                xAinData[ name ].coof_count = cal_point_count - 1;
 8001052:	4c0c      	ldr	r4, [pc, #48]	; (8001084 <eAinCalDataConfig+0x4c>)
 8001054:	f101 3cff 	add.w	ip, r1, #4294967295
 8001058:	f804 c013 	strb.w	ip, [r4, r3, lsl #1]
                xAinData[ name ].index = usCurMaxIndex;
 800105c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8001060:	705a      	strb	r2, [r3, #1]
                usCurMaxIndex += cal_point_count - 1;
 8001062:	3a01      	subs	r2, #1
 8001064:	4411      	add	r1, r2
 8001066:	4b08      	ldr	r3, [pc, #32]	; (8001088 <eAinCalDataConfig+0x50>)
 8001068:	8019      	strh	r1, [r3, #0]
                    res = CAL_OVERWRITE_ERROR;
                }
        }
    }
    return ( res );
}
 800106a:	bc10      	pop	{r4}
 800106c:	4770      	bx	lr
                if ( xAinData[ name ].coof_count != ( cal_point_count- 1))
 800106e:	3901      	subs	r1, #1
                    res = CAL_OVERWRITE_ERROR;
 8001070:	4288      	cmp	r0, r1
 8001072:	bf14      	ite	ne
 8001074:	2002      	movne	r0, #2
 8001076:	2000      	moveq	r0, #0
 8001078:	4770      	bx	lr
        res = CAL_POINT_COUNT_ERROR;
 800107a:	2003      	movs	r0, #3
}
 800107c:	4770      	bx	lr
                res = CAL_MEMORY_FULL;
 800107e:	2001      	movs	r0, #1
 8001080:	e7f3      	b.n	800106a <eAinCalDataConfig+0x32>
 8001082:	bf00      	nop
 8001084:	20000120 	.word	0x20000120
 8001088:	2000011c 	.word	0x2000011c

0800108c <vABLineKoofFinde>:

/*
 *
 */
void vABLineKoofFinde(float * k, float * b,  float x1, float x2, float y1, float y2)
{
 800108c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001090:	4607      	mov	r7, r0
 8001092:	460e      	mov	r6, r1
 8001094:	4615      	mov	r5, r2
 8001096:	461c      	mov	r4, r3
 8001098:	f8dd a020 	ldr.w	sl, [sp, #32]
 800109c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
		 *k = (float)( y1 - y2 ) /(float) (x1 - x2);
 80010a0:	4649      	mov	r1, r9
 80010a2:	4650      	mov	r0, sl
 80010a4:	f7ff fc96 	bl	80009d4 <__aeabi_fsub>
 80010a8:	4680      	mov	r8, r0
 80010aa:	4621      	mov	r1, r4
 80010ac:	4628      	mov	r0, r5
 80010ae:	f7ff fc91 	bl	80009d4 <__aeabi_fsub>
 80010b2:	4601      	mov	r1, r0
 80010b4:	4640      	mov	r0, r8
 80010b6:	f7ff fe4b 	bl	8000d50 <__aeabi_fdiv>
 80010ba:	6038      	str	r0, [r7, #0]
		 *b = (float)(y1*x2 - y2*x1) / (float) (x2-x1);
 80010bc:	4621      	mov	r1, r4
 80010be:	4650      	mov	r0, sl
 80010c0:	f7ff fd92 	bl	8000be8 <__aeabi_fmul>
 80010c4:	4607      	mov	r7, r0
 80010c6:	4629      	mov	r1, r5
 80010c8:	4648      	mov	r0, r9
 80010ca:	f7ff fd8d 	bl	8000be8 <__aeabi_fmul>
 80010ce:	4601      	mov	r1, r0
 80010d0:	4638      	mov	r0, r7
 80010d2:	f7ff fc7f 	bl	80009d4 <__aeabi_fsub>
 80010d6:	4607      	mov	r7, r0
 80010d8:	4629      	mov	r1, r5
 80010da:	4620      	mov	r0, r4
 80010dc:	f7ff fc7a 	bl	80009d4 <__aeabi_fsub>
 80010e0:	4601      	mov	r1, r0
 80010e2:	4638      	mov	r0, r7
 80010e4:	f7ff fe34 	bl	8000d50 <__aeabi_fdiv>
 80010e8:	6030      	str	r0, [r6, #0]
		 return;
}
 80010ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080010f0 <eSetAinCalPoint>:
	if ( PointNumber < xAinData[ name ].coof_count)
 80010f0:	4b14      	ldr	r3, [pc, #80]	; (8001144 <eSetAinCalPoint+0x54>)
 80010f2:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d801      	bhi.n	80010fe <eSetAinCalPoint+0xe>
		res = CAL_OVERWRITE_ERROR;
 80010fa:	2002      	movs	r0, #2
}
 80010fc:	4770      	bx	lr
{
 80010fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001100:	b083      	sub	sp, #12
 8001102:	460d      	mov	r5, r1
		uint16_t index = PointNumber + xAinData[ name ].index;
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <eSetAinCalPoint+0x54>)
 8001106:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800110a:	7844      	ldrb	r4, [r0, #1]
 800110c:	4422      	add	r2, r4
 800110e:	b294      	uxth	r4, r2
		vABLineKoofFinde ( &xKoofData[index].k, &xKoofData[index].b,
 8001110:	0067      	lsls	r7, r4, #1
 8001112:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8001116:	0080      	lsls	r0, r0, #2
 8001118:	4e0b      	ldr	r6, [pc, #44]	; (8001148 <eSetAinCalPoint+0x58>)
 800111a:	f100 0108 	add.w	r1, r0, #8
 800111e:	3004      	adds	r0, #4
 8001120:	68ab      	ldr	r3, [r5, #8]
 8001122:	9301      	str	r3, [sp, #4]
 8001124:	682b      	ldr	r3, [r5, #0]
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	68eb      	ldr	r3, [r5, #12]
 800112a:	686a      	ldr	r2, [r5, #4]
 800112c:	4431      	add	r1, r6
 800112e:	4430      	add	r0, r6
 8001130:	f7ff ffac 	bl	800108c <vABLineKoofFinde>
		xKoofData[index].data = cal_point[ 1 ].X;
 8001134:	68eb      	ldr	r3, [r5, #12]
 8001136:	443c      	add	r4, r7
 8001138:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
	CAL_ERROR_CODE res = CAL_SUCCESS;
 800113c:	2000      	movs	r0, #0
}
 800113e:	b003      	add	sp, #12
 8001140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001142:	bf00      	nop
 8001144:	20000120 	.word	0x20000120
 8001148:	20000128 	.word	0x20000128

0800114c <eDinConfig>:
#endif
/*
 *
 */
DIN_FUNCTION_ERROR_t eDinConfig( uint8_t ucCh, DIN_INPUT_TYPE inType, uint32_t ulHFront, uint32_t ulLFront)
{
 800114c:	b570      	push	{r4, r5, r6, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	461d      	mov	r5, r3
	DIN_FUNCTION_ERROR_t eRes = DIN_WRONG_CHANNEL_NUMBER ;
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001152:	2300      	movs	r3, #0
 8001154:	9301      	str	r3, [sp, #4]
 8001156:	9303      	str	r3, [sp, #12]
	if ( ucCh < DIN_CHANNEL)
 8001158:	2808      	cmp	r0, #8
 800115a:	d827      	bhi.n	80011ac <eDinConfig+0x60>
 800115c:	4604      	mov	r4, r0
 800115e:	4616      	mov	r6, r2
	{
		xDinConfig[ucCh].eInputType = inType;
 8001160:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <eDinConfig+0x64>)
 8001162:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8001166:	7399      	strb	r1, [r3, #14]
		xDinConfig[ucCh].ucValue 	= (xDinConfig[ucCh].eInputType == DIN_CONFIG_POSITIVE ) ? 0U : 1U;
 8001168:	1e4a      	subs	r2, r1, #1
 800116a:	bf18      	it	ne
 800116c:	2201      	movne	r2, #1
 800116e:	731a      	strb	r2, [r3, #12]
		GPIO_InitStruct.Pin 		= xDinPortConfig[ucCh].Pin;
 8001170:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <eDinConfig+0x68>)
 8001172:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 8001176:	9300      	str	r3, [sp, #0]

		if ( xDinConfig[ucCh].eInputType == RPM_CONFIG )
 8001178:	2902      	cmp	r1, #2
 800117a:	d011      	beq.n	80011a0 <eDinConfig+0x54>
		{
			xDinConfig[ucCh].eInputType = DIN_CONFIG_POSITIVE;
		}
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800117c:	2301      	movs	r3, #1
 800117e:	9302      	str	r3, [sp, #8]
		HAL_GPIO_Init(xDinPortConfig[ucCh].GPIOx,&GPIO_InitStruct);
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <eDinConfig+0x68>)
 8001182:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8001186:	4669      	mov	r1, sp
 8001188:	6858      	ldr	r0, [r3, #4]
 800118a:	f001 fe4f 	bl	8002e2c <HAL_GPIO_Init>
		xDinConfig[ucCh].ulHighCounter = ulHFront;
 800118e:	4808      	ldr	r0, [pc, #32]	; (80011b0 <eDinConfig+0x64>)
 8001190:	eb00 1404 	add.w	r4, r0, r4, lsl #4
 8001194:	60a6      	str	r6, [r4, #8]
		xDinConfig[ucCh].ulLowCounter = ulLFront;
 8001196:	6065      	str	r5, [r4, #4]
		xDinConfig[ucCh].ucTempValue = 0U;
 8001198:	2000      	movs	r0, #0
 800119a:	7360      	strb	r0, [r4, #13]
		eRes = DIN_CONFIG_OK;
	}
	return ( eRes );
}
 800119c:	b004      	add	sp, #16
 800119e:	bd70      	pop	{r4, r5, r6, pc}
			xDinConfig[ucCh].eInputType = DIN_CONFIG_POSITIVE;
 80011a0:	4b03      	ldr	r3, [pc, #12]	; (80011b0 <eDinConfig+0x64>)
 80011a2:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80011a6:	2201      	movs	r2, #1
 80011a8:	739a      	strb	r2, [r3, #14]
 80011aa:	e7e7      	b.n	800117c <eDinConfig+0x30>
	DIN_FUNCTION_ERROR_t eRes = DIN_WRONG_CHANNEL_NUMBER ;
 80011ac:	2001      	movs	r0, #1
 80011ae:	e7f5      	b.n	800119c <eDinConfig+0x50>
 80011b0:	200003f8 	.word	0x200003f8
 80011b4:	080077dc 	.word	0x080077dc

080011b8 <vADCReady>:
	{
		 ADC_OLD_RAW[i] = 0x00;
	}
}
void vADCReady()
{
 80011b8:	b510      	push	{r4, lr}
	 static portBASE_TYPE xHigherPriorityTaskWoken;
	 xHigherPriorityTaskWoken = pdFALSE;
 80011ba:	4c0b      	ldr	r4, [pc, #44]	; (80011e8 <vADCReady+0x30>)
 80011bc:	2300      	movs	r3, #0
 80011be:	6023      	str	r3, [r4, #0]
	 xEventGroupSetBitsFromISR(xSystemEventGroupHandle, AIN_READY, &xHigherPriorityTaskWoken );
 80011c0:	4622      	mov	r2, r4
 80011c2:	2102      	movs	r1, #2
 80011c4:	4b09      	ldr	r3, [pc, #36]	; (80011ec <vADCReady+0x34>)
 80011c6:	6818      	ldr	r0, [r3, #0]
 80011c8:	f004 fc36 	bl	8005a38 <xEventGroupSetBitsFromISR>
	 portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 80011cc:	6823      	ldr	r3, [r4, #0]
 80011ce:	b14b      	cbz	r3, 80011e4 <vADCReady+0x2c>
 80011d0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80011d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011d8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80011dc:	f3bf 8f4f 	dsb	sy
 80011e0:	f3bf 8f6f 	isb	sy
	 return;
}
 80011e4:	bd10      	pop	{r4, pc}
 80011e6:	bf00      	nop
 80011e8:	20000490 	.word	0x20000490
 80011ec:	20000494 	.word	0x20000494

080011f0 <vGetAverDataFromRAW>:
 /*
  * Функция вытаскивает из входного буфера Indata  (размером FrameSize*BufferSize) со смещением InIndex FrameSize отсчетов,
  * счетает среднее арефмитическое и записывает в буффер OutData со смещением OutIndex
  */
  void vGetAverDataFromRAW(uint16_t * InData, uint16_t *OutData, uint8_t InIndex, uint8_t OutIndex, uint8_t Size, uint16_t BufferSize)
 {
 80011f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	f89d 5020 	ldrb.w	r5, [sp, #32]
 	volatile uint32_t temp;
 	for (uint8_t i=0; i<Size; i++ )
 80011fa:	b345      	cbz	r5, 800124e <vGetAverDataFromRAW+0x5e>
 80011fc:	eb01 0e43 	add.w	lr, r1, r3, lsl #1
 8001200:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8001204:	3d01      	subs	r5, #1
 8001206:	b2ec      	uxtb	r4, r5
 8001208:	4423      	add	r3, r4
 800120a:	3102      	adds	r1, #2
 800120c:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 8001210:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
 8001214:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 	{
 		temp = 0;
 8001218:	2700      	movs	r7, #0
 800121a:	f04f 0803 	mov.w	r8, #3
 		for (uint8_t j=0;j < ADC_FRAME_SIZE; j++ )
 		{
 		  temp += (InData[ InIndex + i + j * BufferSize ]);
 		}
 		OutData[ OutIndex + i ] = temp / ADC_FRAME_SIZE;
 800121e:	4d0d      	ldr	r5, [pc, #52]	; (8001254 <vGetAverDataFromRAW+0x64>)
 8001220:	e008      	b.n	8001234 <vGetAverDataFromRAW+0x44>
 8001222:	9b01      	ldr	r3, [sp, #4]
 8001224:	fba5 2303 	umull	r2, r3, r5, r3
 8001228:	085b      	lsrs	r3, r3, #1
 800122a:	f82e 3b02 	strh.w	r3, [lr], #2
 	for (uint8_t i=0; i<Size; i++ )
 800122e:	3002      	adds	r0, #2
 8001230:	45a6      	cmp	lr, r4
 8001232:	d00c      	beq.n	800124e <vGetAverDataFromRAW+0x5e>
 		temp = 0;
 8001234:	9701      	str	r7, [sp, #4]
 8001236:	4601      	mov	r1, r0
 8001238:	4643      	mov	r3, r8
 		  temp += (InData[ InIndex + i + j * BufferSize ]);
 800123a:	9e01      	ldr	r6, [sp, #4]
 800123c:	880a      	ldrh	r2, [r1, #0]
 800123e:	4432      	add	r2, r6
 8001240:	9201      	str	r2, [sp, #4]
 		for (uint8_t j=0;j < ADC_FRAME_SIZE; j++ )
 8001242:	3b01      	subs	r3, #1
 8001244:	4461      	add	r1, ip
 8001246:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800124a:	d1f6      	bne.n	800123a <vGetAverDataFromRAW+0x4a>
 800124c:	e7e9      	b.n	8001222 <vGetAverDataFromRAW+0x32>
 	}
 	return;
 }
 800124e:	b002      	add	sp, #8
 8001250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001254:	aaaaaaab 	.word	0xaaaaaaab

08001258 <vAinGetData>:
	*old_output = output;
	return output;
}

uint16_t vAinGetData(AIN_INPUT_NAME channel)
 {
 8001258:	b530      	push	{r4, r5, lr}
 800125a:	b085      	sub	sp, #20
	 float temp;
	 ADC_RAW[channel] = vRCFilter(ADC_RAW[channel], &ADC_OLD_RAW[channel]);
 800125c:	4a22      	ldr	r2, [pc, #136]	; (80012e8 <vAinGetData+0x90>)
	volatile uint32_t new = input;
 800125e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
 8001262:	9302      	str	r3, [sp, #8]
	volatile uint32_t old = *old_output;
 8001264:	4921      	ldr	r1, [pc, #132]	; (80012ec <vAinGetData+0x94>)
 8001266:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
 800126a:	9303      	str	r3, [sp, #12]
	volatile uint16_t  output =  ( A * old + (256-A)*new )>>8;
 800126c:	9c03      	ldr	r4, [sp, #12]
 800126e:	9b02      	ldr	r3, [sp, #8]
 8001270:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	25dc      	movs	r5, #220	; 0xdc
 8001278:	fb05 3304 	mla	r3, r5, r4, r3
 800127c:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8001280:	f8ad 3006 	strh.w	r3, [sp, #6]
	*old_output = output;
 8001284:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001288:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
	return output;
 800128c:	f8bd 4006 	ldrh.w	r4, [sp, #6]
 8001290:	b2a4      	uxth	r4, r4
	 ADC_RAW[channel] = vRCFilter(ADC_RAW[channel], &ADC_OLD_RAW[channel]);
 8001292:	f822 4010 	strh.w	r4, [r2, r0, lsl #1]
	 temp =  (float)(ADC_RAW[channel]*RA)/(4095- ADC_RAW[channel]);
 8001296:	4620      	mov	r0, r4
 8001298:	f7ff f8ac 	bl	80003f4 <__aeabi_i2d>
 800129c:	a310      	add	r3, pc, #64	; (adr r3, 80012e0 <vAinGetData+0x88>)
 800129e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a2:	f7ff f911 	bl	80004c8 <__aeabi_dmul>
 80012a6:	f7ff fb41 	bl	800092c <__aeabi_d2f>
 80012aa:	4605      	mov	r5, r0
 80012ac:	f5c4 607f 	rsb	r0, r4, #4080	; 0xff0
 80012b0:	300f      	adds	r0, #15
 80012b2:	f7ff fc45 	bl	8000b40 <__aeabi_i2f>
 80012b6:	4601      	mov	r1, r0
 80012b8:	4628      	mov	r0, r5
 80012ba:	f7ff fd49 	bl	8000d50 <__aeabi_fdiv>
 80012be:	4604      	mov	r4, r0
	 if (temp > 35000)
 80012c0:	490b      	ldr	r1, [pc, #44]	; (80012f0 <vAinGetData+0x98>)
 80012c2:	f7ff fe4d 	bl	8000f60 <__aeabi_fcmpgt>
 80012c6:	b928      	cbnz	r0, 80012d4 <vAinGetData+0x7c>
		 return 35000;
	 else
	 return (uint16_t)temp;
 80012c8:	4620      	mov	r0, r4
 80012ca:	f7ff fe53 	bl	8000f74 <__aeabi_f2uiz>
 80012ce:	b280      	uxth	r0, r0
 }
 80012d0:	b005      	add	sp, #20
 80012d2:	bd30      	pop	{r4, r5, pc}
		 return 35000;
 80012d4:	f648 00b8 	movw	r0, #35000	; 0x88b8
 80012d8:	e7fa      	b.n	80012d0 <vAinGetData+0x78>
 80012da:	bf00      	nop
 80012dc:	f3af 8000 	nop.w
 80012e0:	00000000 	.word	0x00000000
 80012e4:	40c38800 	.word	0x40c38800
 80012e8:	200003f0 	.word	0x200003f0
 80012ec:	200003e8 	.word	0x200003e8
 80012f0:	4708b800 	.word	0x4708b800

080012f4 <uiGetDinMask>:
 }
 /*
  *
  */
 uint32_t uiGetDinMask()
 {
 80012f4:	b082      	sub	sp, #8
 	volatile uint32_t uiMask = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	9301      	str	r3, [sp, #4]
 	for (int8_t i = (DIN_CHANNEL -1);  i > -1 ; i--)
 80012fa:	4a09      	ldr	r2, [pc, #36]	; (8001320 <uiGetDinMask+0x2c>)
 80012fc:	f1a2 0090 	sub.w	r0, r2, #144	; 0x90
 	{
 		uiMask <<=1;
 8001300:	9b01      	ldr	r3, [sp, #4]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	9301      	str	r3, [sp, #4]
 		uiMask |= ( xDinConfig[ i ].ucValue & 0x01 );
 8001306:	9901      	ldr	r1, [sp, #4]
 8001308:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	430b      	orrs	r3, r1
 8001312:	9301      	str	r3, [sp, #4]
 	for (int8_t i = (DIN_CHANNEL -1);  i > -1 ; i--)
 8001314:	3a10      	subs	r2, #16
 8001316:	4282      	cmp	r2, r0
 8001318:	d1f2      	bne.n	8001300 <uiGetDinMask+0xc>
 	}
 	return ( uiMask );
 800131a:	9801      	ldr	r0, [sp, #4]
 }
 800131c:	b002      	add	sp, #8
 800131e:	4770      	bx	lr
 8001320:	200003f8 	.word	0x200003f8

08001324 <vDTask>:
 {
 8001324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001328:	b089      	sub	sp, #36	; 0x24
	  xSystemEventGroupHandle =  xGetSystemControlEvent();
 800132a:	f000 f99d 	bl	8001668 <xGetSystemControlEvent>
 800132e:	4bb3      	ldr	r3, [pc, #716]	; (80015fc <vDTask+0x2d8>)
 8001330:	6018      	str	r0, [r3, #0]
	eDinConfig( INPUT_1, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 8001332:	230a      	movs	r3, #10
 8001334:	461a      	mov	r2, r3
 8001336:	2100      	movs	r1, #0
 8001338:	4608      	mov	r0, r1
 800133a:	f7ff ff07 	bl	800114c <eDinConfig>
	eDinConfig( INPUT_2, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 800133e:	230a      	movs	r3, #10
 8001340:	461a      	mov	r2, r3
 8001342:	2100      	movs	r1, #0
 8001344:	2001      	movs	r0, #1
 8001346:	f7ff ff01 	bl	800114c <eDinConfig>
	eDinConfig( INPUT_3, DIN_CONFIG_NEGATIVE, DEF_H_FRONT, DEF_L_FRONT );
 800134a:	230a      	movs	r3, #10
 800134c:	461a      	mov	r2, r3
 800134e:	2100      	movs	r1, #0
 8001350:	2002      	movs	r0, #2
 8001352:	f7ff fefb 	bl	800114c <eDinConfig>
	eDinConfig( INPUT_4, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 8001356:	230a      	movs	r3, #10
 8001358:	461a      	mov	r2, r3
 800135a:	2100      	movs	r1, #0
 800135c:	2003      	movs	r0, #3
 800135e:	f7ff fef5 	bl	800114c <eDinConfig>
	eDinConfig( INPUT_5, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 8001362:	230a      	movs	r3, #10
 8001364:	461a      	mov	r2, r3
 8001366:	2100      	movs	r1, #0
 8001368:	2004      	movs	r0, #4
 800136a:	f7ff feef 	bl	800114c <eDinConfig>
	eDinConfig( INPUT_6, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 800136e:	230a      	movs	r3, #10
 8001370:	461a      	mov	r2, r3
 8001372:	2100      	movs	r1, #0
 8001374:	2005      	movs	r0, #5
 8001376:	f7ff fee9 	bl	800114c <eDinConfig>
	eDinConfig( INPUT_7, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 800137a:	230a      	movs	r3, #10
 800137c:	461a      	mov	r2, r3
 800137e:	2100      	movs	r1, #0
 8001380:	2006      	movs	r0, #6
 8001382:	f7ff fee3 	bl	800114c <eDinConfig>
	eDinConfig( INPUT_8, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 8001386:	230a      	movs	r3, #10
 8001388:	461a      	mov	r2, r3
 800138a:	2100      	movs	r1, #0
 800138c:	2007      	movs	r0, #7
 800138e:	f7ff fedd 	bl	800114c <eDinConfig>
	eDinConfig( INPUT_9, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 8001392:	230a      	movs	r3, #10
 8001394:	461a      	mov	r2, r3
 8001396:	2100      	movs	r1, #0
 8001398:	2008      	movs	r0, #8
 800139a:	f7ff fed7 	bl	800114c <eDinConfig>
	eAinCalDataConfig(AIN_2,20);
 800139e:	2114      	movs	r1, #20
 80013a0:	2001      	movs	r0, #1
 80013a2:	f7ff fe49 	bl	8001038 <eAinCalDataConfig>
	for (int i = 0;i<19;i++)
 80013a6:	4c96      	ldr	r4, [pc, #600]	; (8001600 <vDTask+0x2dc>)
	eAinCalDataConfig(AIN_2,20);
 80013a8:	4625      	mov	r5, r4
 80013aa:	2600      	movs	r6, #0
		eSetAinCalPoint(AIN_2,&d[0],i);
 80013ac:	2701      	movs	r7, #1
		d[0].X = CalPoint[i][1];
 80013ae:	8868      	ldrh	r0, [r5, #2]
 80013b0:	f7ff fbc2 	bl	8000b38 <__aeabi_ui2f>
 80013b4:	9005      	str	r0, [sp, #20]
		d[0].Y = CalPoint[i][0];
 80013b6:	8828      	ldrh	r0, [r5, #0]
 80013b8:	f7ff fbbe 	bl	8000b38 <__aeabi_ui2f>
 80013bc:	9004      	str	r0, [sp, #16]
		d[1].X = CalPoint[i+1][1];
 80013be:	88e8      	ldrh	r0, [r5, #6]
 80013c0:	f7ff fbba 	bl	8000b38 <__aeabi_ui2f>
 80013c4:	9007      	str	r0, [sp, #28]
		d[1].Y = CalPoint[i+1][0];
 80013c6:	f835 0f04 	ldrh.w	r0, [r5, #4]!
 80013ca:	f7ff fbb5 	bl	8000b38 <__aeabi_ui2f>
 80013ce:	9006      	str	r0, [sp, #24]
		eSetAinCalPoint(AIN_2,&d[0],i);
 80013d0:	b2b2      	uxth	r2, r6
 80013d2:	a904      	add	r1, sp, #16
 80013d4:	4638      	mov	r0, r7
 80013d6:	f7ff fe8b 	bl	80010f0 <eSetAinCalPoint>
	for (int i = 0;i<19;i++)
 80013da:	3601      	adds	r6, #1
 80013dc:	2e13      	cmp	r6, #19
 80013de:	d1e6      	bne.n	80013ae <vDTask+0x8a>
	eAinCalDataConfig(AIN_3,20);
 80013e0:	2114      	movs	r1, #20
 80013e2:	2002      	movs	r0, #2
 80013e4:	f7ff fe28 	bl	8001038 <eAinCalDataConfig>
 80013e8:	2500      	movs	r5, #0
		eSetAinCalPoint(AIN_3,&d[0],i);
 80013ea:	2602      	movs	r6, #2
		d[0].X = CalPoint[i][1];
 80013ec:	8860      	ldrh	r0, [r4, #2]
 80013ee:	f7ff fba3 	bl	8000b38 <__aeabi_ui2f>
 80013f2:	9005      	str	r0, [sp, #20]
		d[0].Y = CalPoint[i][0];
 80013f4:	8820      	ldrh	r0, [r4, #0]
 80013f6:	f7ff fb9f 	bl	8000b38 <__aeabi_ui2f>
 80013fa:	9004      	str	r0, [sp, #16]
		d[1].X = CalPoint[i+1][1];
 80013fc:	88e0      	ldrh	r0, [r4, #6]
 80013fe:	f7ff fb9b 	bl	8000b38 <__aeabi_ui2f>
 8001402:	9007      	str	r0, [sp, #28]
		d[1].Y = CalPoint[i+1][0];
 8001404:	f834 0f04 	ldrh.w	r0, [r4, #4]!
 8001408:	f7ff fb96 	bl	8000b38 <__aeabi_ui2f>
 800140c:	9006      	str	r0, [sp, #24]
		eSetAinCalPoint(AIN_3,&d[0],i);
 800140e:	b2aa      	uxth	r2, r5
 8001410:	a904      	add	r1, sp, #16
 8001412:	4630      	mov	r0, r6
 8001414:	f7ff fe6c 	bl	80010f0 <eSetAinCalPoint>
	for (int i = 0;i<19;i++)
 8001418:	3501      	adds	r5, #1
 800141a:	2d13      	cmp	r5, #19
 800141c:	d1e6      	bne.n	80013ec <vDTask+0xc8>
		xDoutConfig[channel].eOutConfig = type;
 800141e:	4b79      	ldr	r3, [pc, #484]	; (8001604 <vDTask+0x2e0>)
 8001420:	2201      	movs	r2, #1
 8001422:	705a      	strb	r2, [r3, #1]
 8001424:	70da      	strb	r2, [r3, #3]
 8001426:	715a      	strb	r2, [r3, #5]
 8001428:	71da      	strb	r2, [r3, #7]
		 ADC_OLD_RAW[i] = 0x00;
 800142a:	4a77      	ldr	r2, [pc, #476]	; (8001608 <vDTask+0x2e4>)
 800142c:	2300      	movs	r3, #0
 800142e:	8013      	strh	r3, [r2, #0]
 8001430:	8053      	strh	r3, [r2, #2]
 8001432:	8093      	strh	r3, [r2, #4]
	  uint8_t init_timer = 0;
 8001434:	9303      	str	r3, [sp, #12]
		    HAL_ADC_Start_DMA(&hadc1,&ADC1_DMABuffer[0], 9);
 8001436:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 800160c <vDTask+0x2e8>
 800143a:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 8001610 <vDTask+0x2ec>
		  	vTaskDelay(1);
 800143e:	f04f 0801 	mov.w	r8, #1
									xDinConfig[i].ulCounter = 0U;
 8001442:	4699      	mov	r9, r3
}
 8001444:	e07f      	b.n	8001546 <vDTask+0x222>
				   DataReadyFlag = 1;
 8001446:	4b73      	ldr	r3, [pc, #460]	; (8001614 <vDTask+0x2f0>)
 8001448:	f883 8000 	strb.w	r8, [r3]
				   xEventGroupSetBits(xSystemEventGroupHandle, DIN_READY );
 800144c:	4641      	mov	r1, r8
 800144e:	4b6b      	ldr	r3, [pc, #428]	; (80015fc <vDTask+0x2d8>)
 8001450:	6818      	ldr	r0, [r3, #0]
 8001452:	f004 faa3 	bl	800599c <xEventGroupSetBits>
 8001456:	e08d      	b.n	8001574 <vDTask+0x250>
									if (xDinConfig[i].ulCounter > ( (xDinConfig[i].ucTempValue == GPIO_PIN_RESET) ? xDinConfig[i].ulHighCounter : xDinConfig[i].ulLowCounter ) )
 8001458:	6862      	ldr	r2, [r4, #4]
 800145a:	e016      	b.n	800148a <vDTask+0x166>
									xDinConfig[i].ulCounter = 0U;
 800145c:	f8c4 9000 	str.w	r9, [r4]
			for (uint8_t i = 0U; i < DIN_CHANNEL; i++)
 8001460:	3410      	adds	r4, #16
 8001462:	3508      	adds	r5, #8
 8001464:	42bc      	cmp	r4, r7
 8001466:	d01b      	beq.n	80014a0 <vDTask+0x17c>
						if ( xDinConfig[i].eInputType != RPM_CONFIG )
 8001468:	4626      	mov	r6, r4
 800146a:	7ba3      	ldrb	r3, [r4, #14]
 800146c:	2b02      	cmp	r3, #2
 800146e:	d0f7      	beq.n	8001460 <vDTask+0x13c>
							uint8_t uсDinState = HAL_GPIO_ReadPin( xDinPortConfig[i].GPIOx, xDinPortConfig[i].Pin);
 8001470:	8829      	ldrh	r1, [r5, #0]
 8001472:	6868      	ldr	r0, [r5, #4]
 8001474:	f001 fe14 	bl	80030a0 <HAL_GPIO_ReadPin>
							if (uсDinState != xDinConfig[i].ucTempValue )
 8001478:	7b62      	ldrb	r2, [r4, #13]
 800147a:	4282      	cmp	r2, r0
 800147c:	d0ee      	beq.n	800145c <vDTask+0x138>
									xDinConfig[i].ulCounter ++ ;
 800147e:	6823      	ldr	r3, [r4, #0]
 8001480:	3301      	adds	r3, #1
 8001482:	6023      	str	r3, [r4, #0]
									if (xDinConfig[i].ulCounter > ( (xDinConfig[i].ucTempValue == GPIO_PIN_RESET) ? xDinConfig[i].ulHighCounter : xDinConfig[i].ulLowCounter ) )
 8001484:	2a00      	cmp	r2, #0
 8001486:	d1e7      	bne.n	8001458 <vDTask+0x134>
 8001488:	68a2      	ldr	r2, [r4, #8]
 800148a:	4293      	cmp	r3, r2
 800148c:	d9e8      	bls.n	8001460 <vDTask+0x13c>
												xDinConfig[i].ucValue = uсDinState  ^ ( (~xDinConfig[i].eInputType) & 0x1);
 800148e:	7bb3      	ldrb	r3, [r6, #14]
 8001490:	f083 0301 	eor.w	r3, r3, #1
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	4043      	eors	r3, r0
 800149a:	7333      	strb	r3, [r6, #12]
												xDinConfig[i].ucTempValue = uсDinState ;
 800149c:	7370      	strb	r0, [r6, #13]
 800149e:	e7df      	b.n	8001460 <vDTask+0x13c>
			xEventGroupWaitBits(xSystemEventGroupHandle,  AIN_READY,  pdFALSE, pdTRUE, portMAX_DELAY );
 80014a0:	f04f 33ff 	mov.w	r3, #4294967295
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	4643      	mov	r3, r8
 80014a8:	464a      	mov	r2, r9
 80014aa:	2102      	movs	r1, #2
 80014ac:	4853      	ldr	r0, [pc, #332]	; (80015fc <vDTask+0x2d8>)
 80014ae:	6800      	ldr	r0, [r0, #0]
 80014b0:	f004 f9e9 	bl	8005886 <xEventGroupWaitBits>
			HAL_ADC_Stop_DMA(&hadc1);
 80014b4:	4650      	mov	r0, sl
 80014b6:	f001 fa9f 	bl	80029f8 <HAL_ADC_Stop_DMA>
			vGetAverDataFromRAW(&ADC1_DMABuffer[0],&ADC_RAW[0],0,0,3,3);
 80014ba:	2303      	movs	r3, #3
 80014bc:	9301      	str	r3, [sp, #4]
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	464b      	mov	r3, r9
 80014c2:	464a      	mov	r2, r9
 80014c4:	4954      	ldr	r1, [pc, #336]	; (8001618 <vDTask+0x2f4>)
 80014c6:	4658      	mov	r0, fp
 80014c8:	f7ff fe92 	bl	80011f0 <vGetAverDataFromRAW>
			temp = vAinGetData(AIN_2);
 80014cc:	4640      	mov	r0, r8
 80014ce:	f7ff fec3 	bl	8001258 <vAinGetData>
			if ((temp>=35000) || (temp <3500))
 80014d2:	f6a0 53ac 	subw	r3, r0, #3500	; 0xdac
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	f647 320b 	movw	r2, #31499	; 0x7b0b
 80014dc:	4293      	cmp	r3, r2
 80014de:	d960      	bls.n	80015a2 <vDTask+0x27e>
				vSetRegInput(WATER_TEMP,-1);
 80014e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80014e4:	4640      	mov	r0, r8
 80014e6:	f000 fb9d 	bl	8001c24 <vSetRegInput>
				vSetRegInput(ERROR_STATUS,usGetRegInput(ERROR_STATUS) | WATER_TEMP_ERROR);
 80014ea:	2007      	movs	r0, #7
 80014ec:	f000 fb94 	bl	8001c18 <usGetRegInput>
 80014f0:	f040 0101 	orr.w	r1, r0, #1
 80014f4:	b289      	uxth	r1, r1
 80014f6:	2007      	movs	r0, #7
 80014f8:	f000 fb94 	bl	8001c24 <vSetRegInput>
			temp = vAinGetData(AIN_3);
 80014fc:	2002      	movs	r0, #2
 80014fe:	f7ff feab 	bl	8001258 <vAinGetData>
			if ((temp>=35000) || (temp <3500))
 8001502:	f6a0 53ac 	subw	r3, r0, #3500	; 0xdac
 8001506:	b29b      	uxth	r3, r3
 8001508:	f647 320b 	movw	r2, #31499	; 0x7b0b
 800150c:	4293      	cmp	r3, r2
 800150e:	d95e      	bls.n	80015ce <vDTask+0x2aa>
				vSetRegInput(IN_AIR_TEMP, -1);
 8001510:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001514:	2002      	movs	r0, #2
 8001516:	f000 fb85 	bl	8001c24 <vSetRegInput>
				vSetRegInput(ERROR_STATUS,usGetRegInput(ERROR_STATUS) | AIR_TEMP_ERROR);
 800151a:	2007      	movs	r0, #7
 800151c:	f000 fb7c 	bl	8001c18 <usGetRegInput>
 8001520:	f040 0102 	orr.w	r1, r0, #2
 8001524:	b289      	uxth	r1, r1
 8001526:	2007      	movs	r0, #7
 8001528:	f000 fb7c 	bl	8001c24 <vSetRegInput>
			vUPDATEDin((uiGetDinMask() & DEVICE_DOOR_MASK)>>DEVICE_DOOR_OFFSET  );
 800152c:	f7ff fee2 	bl	80012f4 <uiGetDinMask>
 8001530:	f3c0 2000 	ubfx	r0, r0, #8, #1
 8001534:	f003 ff0c 	bl	8005350 <vUPDATEDin>
			vSetRegInput(TYPE, (uiGetDinMask() & DEVICE_MODE_MASK)>>DEVICE_MODE_OFFSET );
 8001538:	f7ff fedc 	bl	80012f4 <uiGetDinMask>
 800153c:	f3c0 1101 	ubfx	r1, r0, #4, #2
 8001540:	4648      	mov	r0, r9
 8001542:	f000 fb6f 	bl	8001c24 <vSetRegInput>
		    HAL_ADC_Start_DMA(&hadc1,&ADC1_DMABuffer[0], 9);
 8001546:	2209      	movs	r2, #9
 8001548:	4659      	mov	r1, fp
 800154a:	4650      	mov	r0, sl
 800154c:	f001 f90a 	bl	8002764 <HAL_ADC_Start_DMA>
		  	vTaskDelay(1);
 8001550:	4640      	mov	r0, r8
 8001552:	f005 f973 	bl	800683c <vTaskDelay>
			HAL_GPIO_WritePin( LED_G_GPIO_Port, LED_G_Pin,GPIO_PIN_SET);
 8001556:	4642      	mov	r2, r8
 8001558:	2110      	movs	r1, #16
 800155a:	4830      	ldr	r0, [pc, #192]	; (800161c <vDTask+0x2f8>)
 800155c:	f001 fda6 	bl	80030ac <HAL_GPIO_WritePin>
			if (DataReadyFlag == 0)
 8001560:	4b2c      	ldr	r3, [pc, #176]	; (8001614 <vDTask+0x2f0>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	b933      	cbnz	r3, 8001574 <vDTask+0x250>
			   init_timer++;
 8001566:	9b03      	ldr	r3, [sp, #12]
 8001568:	3301      	adds	r3, #1
 800156a:	b2db      	uxtb	r3, r3
 800156c:	9303      	str	r3, [sp, #12]
			   if (init_timer == 50)
 800156e:	2b32      	cmp	r3, #50	; 0x32
 8001570:	f43f af69 	beq.w	8001446 <vDTask+0x122>
	  uint8_t init_timer = 0;
 8001574:	2400      	movs	r4, #0
				HAL_GPIO_WritePin(xDoutPortConfig[i].GPIOx, xDoutPortConfig[i].Pin, xDoutConfig[i].state == 0 ? GPIO_PIN_RESET: GPIO_PIN_SET );
 8001576:	4e23      	ldr	r6, [pc, #140]	; (8001604 <vDTask+0x2e0>)
 8001578:	4d29      	ldr	r5, [pc, #164]	; (8001620 <vDTask+0x2fc>)
 800157a:	f816 2014 	ldrb.w	r2, [r6, r4, lsl #1]
 800157e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8001582:	3a00      	subs	r2, #0
 8001584:	bf18      	it	ne
 8001586:	2201      	movne	r2, #1
 8001588:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
 800158c:	6858      	ldr	r0, [r3, #4]
 800158e:	f001 fd8d 	bl	80030ac <HAL_GPIO_WritePin>
			for (uint8_t i= 0U; i < DOUT_CHANNEL; i++)
 8001592:	3401      	adds	r4, #1
 8001594:	2c04      	cmp	r4, #4
 8001596:	d1f0      	bne.n	800157a <vDTask+0x256>
 8001598:	4c22      	ldr	r4, [pc, #136]	; (8001624 <vDTask+0x300>)
 800159a:	4d23      	ldr	r5, [pc, #140]	; (8001628 <vDTask+0x304>)
 800159c:	f104 0790 	add.w	r7, r4, #144	; 0x90
 80015a0:	e762      	b.n	8001468 <vDTask+0x144>
				vSetRegInput(WATER_TEMP, (uint16_t)fGetAinCalData(AIN_2,temp));
 80015a2:	f7ff fac9 	bl	8000b38 <__aeabi_ui2f>
 80015a6:	4601      	mov	r1, r0
 80015a8:	4640      	mov	r0, r8
 80015aa:	f7ff fd03 	bl	8000fb4 <fGetAinCalData>
 80015ae:	f7ff fce1 	bl	8000f74 <__aeabi_f2uiz>
 80015b2:	b281      	uxth	r1, r0
 80015b4:	4640      	mov	r0, r8
 80015b6:	f000 fb35 	bl	8001c24 <vSetRegInput>
				vSetRegInput(ERROR_STATUS,usGetRegInput(ERROR_STATUS) & ~WATER_TEMP_ERROR);
 80015ba:	2007      	movs	r0, #7
 80015bc:	f000 fb2c 	bl	8001c18 <usGetRegInput>
 80015c0:	f020 0101 	bic.w	r1, r0, #1
 80015c4:	b289      	uxth	r1, r1
 80015c6:	2007      	movs	r0, #7
 80015c8:	f000 fb2c 	bl	8001c24 <vSetRegInput>
 80015cc:	e796      	b.n	80014fc <vDTask+0x1d8>
				vSetRegInput(IN_AIR_TEMP,(uint16_t)fGetAinCalData(AIN_3,temp));
 80015ce:	f7ff fab3 	bl	8000b38 <__aeabi_ui2f>
 80015d2:	4601      	mov	r1, r0
 80015d4:	2002      	movs	r0, #2
 80015d6:	f7ff fced 	bl	8000fb4 <fGetAinCalData>
 80015da:	f7ff fccb 	bl	8000f74 <__aeabi_f2uiz>
 80015de:	b281      	uxth	r1, r0
 80015e0:	2002      	movs	r0, #2
 80015e2:	f000 fb1f 	bl	8001c24 <vSetRegInput>
				vSetRegInput(ERROR_STATUS,usGetRegInput(ERROR_STATUS) & ~AIR_TEMP_ERROR);
 80015e6:	2007      	movs	r0, #7
 80015e8:	f000 fb16 	bl	8001c18 <usGetRegInput>
 80015ec:	f020 0102 	bic.w	r1, r0, #2
 80015f0:	b289      	uxth	r1, r1
 80015f2:	2007      	movs	r0, #7
 80015f4:	f000 fb16 	bl	8001c24 <vSetRegInput>
 80015f8:	e798      	b.n	800152c <vDTask+0x208>
 80015fa:	bf00      	nop
 80015fc:	20000494 	.word	0x20000494
 8001600:	0800778c 	.word	0x0800778c
 8001604:	20000488 	.word	0x20000488
 8001608:	200003e8 	.word	0x200003e8
 800160c:	200003d4 	.word	0x200003d4
 8001610:	200014e0 	.word	0x200014e0
 8001614:	200003f6 	.word	0x200003f6
 8001618:	200003f0 	.word	0x200003f0
 800161c:	40010800 	.word	0x40010800
 8001620:	08007824 	.word	0x08007824
 8001624:	200003f8 	.word	0x200003f8
 8001628:	080077dc 	.word	0x080077dc

0800162c <vSetOutState>:
 /*
  *
  */
 void vSetOutState( uint8_t channel, uint8_t state)
 {
	 xDoutConfig[channel].state = state;
 800162c:	4b01      	ldr	r3, [pc, #4]	; (8001634 <vSetOutState+0x8>)
 800162e:	f803 1010 	strb.w	r1, [r3, r0, lsl #1]
 }
 8001632:	4770      	bx	lr
 8001634:	20000488 	.word	0x20000488

08001638 <vGetOutState>:
 uint8_t vGetOutState(uint8_t channel)
 {
	 return xDoutConfig[channel].state;
 }
 8001638:	4b01      	ldr	r3, [pc, #4]	; (8001640 <vGetOutState+0x8>)
 800163a:	f813 0010 	ldrb.w	r0, [r3, r0, lsl #1]
 800163e:	4770      	bx	lr
 8001640:	20000488 	.word	0x20000488

08001644 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001644:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  for(;;)
  {
    osDelay(10);
 8001646:	240a      	movs	r4, #10
 8001648:	4620      	mov	r0, r4
 800164a:	f004 f887 	bl	800575c <osDelay>
  for(;;)
 800164e:	e7fb      	b.n	8001648 <StartDefaultTask+0x4>

08001650 <xGetOSEvent>:
}
 8001650:	4b01      	ldr	r3, [pc, #4]	; (8001658 <xGetOSEvent+0x8>)
 8001652:	6818      	ldr	r0, [r3, #0]
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	20001694 	.word	0x20001694

0800165c <xGetUARTEvent>:
 }
 800165c:	4b01      	ldr	r3, [pc, #4]	; (8001664 <xGetUARTEvent+0x8>)
 800165e:	6818      	ldr	r0, [r3, #0]
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	200016dc 	.word	0x200016dc

08001668 <xGetSystemControlEvent>:
 }
 8001668:	4b01      	ldr	r3, [pc, #4]	; (8001670 <xGetSystemControlEvent+0x8>)
 800166a:	6818      	ldr	r0, [r3, #0]
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	200016b8 	.word	0x200016b8

08001674 <vTimerInit>:
{
 8001674:	b508      	push	{r3, lr}
	htim2.Init.Period = timeout;
 8001676:	4b04      	ldr	r3, [pc, #16]	; (8001688 <vTimerInit+0x14>)
 8001678:	60d8      	str	r0, [r3, #12]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800167a:	4618      	mov	r0, r3
 800167c:	f002 fac2 	bl	8003c04 <HAL_TIM_Base_Init>
 8001680:	b900      	cbnz	r0, 8001684 <vTimerInit+0x10>
}
 8001682:	bd08      	pop	{r3, pc}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001684:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001686:	e7fe      	b.n	8001686 <vTimerInit+0x12>
 8001688:	20001554 	.word	0x20001554

0800168c <vStartTimer>:
{
 800168c:	b510      	push	{r4, lr}
	HAL_TIM_Base_Stop_IT(&htim2);
 800168e:	4c05      	ldr	r4, [pc, #20]	; (80016a4 <vStartTimer+0x18>)
 8001690:	4620      	mov	r0, r4
 8001692:	f002 f98d 	bl	80039b0 <HAL_TIM_Base_Stop_IT>
	htim2.Instance->CNT=0;
 8001696:	6823      	ldr	r3, [r4, #0]
 8001698:	2200      	movs	r2, #0
 800169a:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim2);
 800169c:	4620      	mov	r0, r4
 800169e:	f002 f953 	bl	8003948 <HAL_TIM_Base_Start_IT>
}
 80016a2:	bd10      	pop	{r4, pc}
 80016a4:	20001554 	.word	0x20001554

080016a8 <vStopTimer>:
{
 80016a8:	b508      	push	{r3, lr}
	HAL_TIM_Base_Stop_IT(&htim2);
 80016aa:	4802      	ldr	r0, [pc, #8]	; (80016b4 <vStopTimer+0xc>)
 80016ac:	f002 f980 	bl	80039b0 <HAL_TIM_Base_Stop_IT>
}
 80016b0:	bd08      	pop	{r3, pc}
 80016b2:	bf00      	nop
 80016b4:	20001554 	.word	0x20001554

080016b8 <SystemClock_Config>:
{
 80016b8:	b500      	push	{lr}
 80016ba:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016bc:	2300      	movs	r3, #0
 80016be:	930c      	str	r3, [sp, #48]	; 0x30
 80016c0:	930d      	str	r3, [sp, #52]	; 0x34
 80016c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80016c4:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c6:	9305      	str	r3, [sp, #20]
 80016c8:	9306      	str	r3, [sp, #24]
 80016ca:	9307      	str	r3, [sp, #28]
 80016cc:	9308      	str	r3, [sp, #32]
 80016ce:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016d0:	9301      	str	r3, [sp, #4]
 80016d2:	9302      	str	r3, [sp, #8]
 80016d4:	9303      	str	r3, [sp, #12]
 80016d6:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016d8:	2201      	movs	r2, #1
 80016da:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016e0:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016e2:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016e4:	2202      	movs	r2, #2
 80016e6:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016e8:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80016ea:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80016ee:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016f0:	a80a      	add	r0, sp, #40	; 0x28
 80016f2:	f001 fceb 	bl	80030cc <HAL_RCC_OscConfig>
 80016f6:	b9c8      	cbnz	r0, 800172c <SystemClock_Config+0x74>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016f8:	230f      	movs	r3, #15
 80016fa:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016fc:	2102      	movs	r1, #2
 80016fe:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001700:	2300      	movs	r3, #0
 8001702:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001704:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001708:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800170a:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800170c:	a805      	add	r0, sp, #20
 800170e:	f001 ff1d 	bl	800354c <HAL_RCC_ClockConfig>
 8001712:	b968      	cbnz	r0, 8001730 <SystemClock_Config+0x78>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001714:	2302      	movs	r3, #2
 8001716:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001718:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800171c:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800171e:	a801      	add	r0, sp, #4
 8001720:	f002 f80a 	bl	8003738 <HAL_RCCEx_PeriphCLKConfig>
 8001724:	b930      	cbnz	r0, 8001734 <SystemClock_Config+0x7c>
}
 8001726:	b015      	add	sp, #84	; 0x54
 8001728:	f85d fb04 	ldr.w	pc, [sp], #4
 800172c:	b672      	cpsid	i
  while (1)
 800172e:	e7fe      	b.n	800172e <SystemClock_Config+0x76>
 8001730:	b672      	cpsid	i
 8001732:	e7fe      	b.n	8001732 <SystemClock_Config+0x7a>
 8001734:	b672      	cpsid	i
 8001736:	e7fe      	b.n	8001736 <SystemClock_Config+0x7e>

08001738 <main>:
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b092      	sub	sp, #72	; 0x48
  HAL_Init();
 800173c:	f000 febe 	bl	80024bc <HAL_Init>
  SystemClock_Config();
 8001740:	f7ff ffba 	bl	80016b8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001744:	2400      	movs	r4, #0
 8001746:	940b      	str	r4, [sp, #44]	; 0x2c
 8001748:	940c      	str	r4, [sp, #48]	; 0x30
 800174a:	940d      	str	r4, [sp, #52]	; 0x34
 800174c:	940e      	str	r4, [sp, #56]	; 0x38
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800174e:	4dad      	ldr	r5, [pc, #692]	; (8001a04 <main+0x2cc>)
 8001750:	69ab      	ldr	r3, [r5, #24]
 8001752:	f043 0310 	orr.w	r3, r3, #16
 8001756:	61ab      	str	r3, [r5, #24]
 8001758:	69ab      	ldr	r3, [r5, #24]
 800175a:	f003 0310 	and.w	r3, r3, #16
 800175e:	9301      	str	r3, [sp, #4]
 8001760:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001762:	69ab      	ldr	r3, [r5, #24]
 8001764:	f043 0320 	orr.w	r3, r3, #32
 8001768:	61ab      	str	r3, [r5, #24]
 800176a:	69ab      	ldr	r3, [r5, #24]
 800176c:	f003 0320 	and.w	r3, r3, #32
 8001770:	9302      	str	r3, [sp, #8]
 8001772:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001774:	69ab      	ldr	r3, [r5, #24]
 8001776:	f043 0304 	orr.w	r3, r3, #4
 800177a:	61ab      	str	r3, [r5, #24]
 800177c:	69ab      	ldr	r3, [r5, #24]
 800177e:	f003 0304 	and.w	r3, r3, #4
 8001782:	9303      	str	r3, [sp, #12]
 8001784:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001786:	69ab      	ldr	r3, [r5, #24]
 8001788:	f043 0308 	orr.w	r3, r3, #8
 800178c:	61ab      	str	r3, [r5, #24]
 800178e:	69ab      	ldr	r3, [r5, #24]
 8001790:	f003 0308 	and.w	r3, r3, #8
 8001794:	9304      	str	r3, [sp, #16]
 8001796:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, LED_G_Pin|LED_R_Pin|EN_Pin, GPIO_PIN_RESET);
 8001798:	4e9b      	ldr	r6, [pc, #620]	; (8001a08 <main+0x2d0>)
 800179a:	4622      	mov	r2, r4
 800179c:	f44f 7198 	mov.w	r1, #304	; 0x130
 80017a0:	4630      	mov	r0, r6
 80017a2:	f001 fc83 	bl	80030ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, K2_Pin|K4_Pin|K6_Pin|K8_Pin, GPIO_PIN_RESET);
 80017a6:	4f99      	ldr	r7, [pc, #612]	; (8001a0c <main+0x2d4>)
 80017a8:	4622      	mov	r2, r4
 80017aa:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80017ae:	4638      	mov	r0, r7
 80017b0:	f001 fc7c 	bl	80030ac <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin|EN_Pin;
 80017b4:	f44f 7398 	mov.w	r3, #304	; 0x130
 80017b8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ba:	f04f 0901 	mov.w	r9, #1
 80017be:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c4:	f04f 0802 	mov.w	r8, #2
 80017c8:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017cc:	a90b      	add	r1, sp, #44	; 0x2c
 80017ce:	4630      	mov	r0, r6
 80017d0:	f001 fb2c 	bl	8002e2c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = S1_Pin|S2_Pin|S3_Pin|S4_Pin
 80017d4:	f640 73ff 	movw	r3, #4095	; 0xfff
 80017d8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017da:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017de:	a90b      	add	r1, sp, #44	; 0x2c
 80017e0:	4638      	mov	r0, r7
 80017e2:	f001 fb23 	bl	8002e2c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = K2_Pin|K4_Pin|K6_Pin|K8_Pin;
 80017e6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80017ea:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ec:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f6:	a90b      	add	r1, sp, #44	; 0x2c
 80017f8:	4638      	mov	r0, r7
 80017fa:	f001 fb17 	bl	8002e2c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SW8_Pin;
 80017fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001802:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001804:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(SW8_GPIO_Port, &GPIO_InitStruct);
 8001808:	a90b      	add	r1, sp, #44	; 0x2c
 800180a:	4630      	mov	r0, r6
 800180c:	f001 fb0e 	bl	8002e2c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001810:	696b      	ldr	r3, [r5, #20]
 8001812:	ea43 0309 	orr.w	r3, r3, r9
 8001816:	616b      	str	r3, [r5, #20]
 8001818:	696b      	ldr	r3, [r5, #20]
 800181a:	ea03 0309 	and.w	r3, r3, r9
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001822:	4622      	mov	r2, r4
 8001824:	2105      	movs	r1, #5
 8001826:	200b      	movs	r0, #11
 8001828:	f001 f928 	bl	8002a7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800182c:	200b      	movs	r0, #11
 800182e:	f001 f95b 	bl	8002ae8 <HAL_NVIC_EnableIRQ>
  huart1.Instance = USART1;
 8001832:	4877      	ldr	r0, [pc, #476]	; (8001a10 <main+0x2d8>)
 8001834:	4b77      	ldr	r3, [pc, #476]	; (8001a14 <main+0x2dc>)
 8001836:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 38400;
 8001838:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 800183c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 800183e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001842:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001844:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 8001846:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800184a:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800184c:	230c      	movs	r3, #12
 800184e:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001850:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001852:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001854:	f002 fcea 	bl	800422c <HAL_UART_Init>
 8001858:	2800      	cmp	r0, #0
 800185a:	f040 813a 	bne.w	8001ad2 <main+0x39a>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800185e:	2300      	movs	r3, #0
 8001860:	930b      	str	r3, [sp, #44]	; 0x2c
 8001862:	930c      	str	r3, [sp, #48]	; 0x30
 8001864:	930d      	str	r3, [sp, #52]	; 0x34
 8001866:	930e      	str	r3, [sp, #56]	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001868:	9307      	str	r3, [sp, #28]
 800186a:	9308      	str	r3, [sp, #32]
  htim2.Instance = TIM2;
 800186c:	486a      	ldr	r0, [pc, #424]	; (8001a18 <main+0x2e0>)
 800186e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001872:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 3264;
 8001874:	f44f 624c 	mov.w	r2, #3264	; 0xcc0
 8001878:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187a:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 1000;
 800187c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001880:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001882:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001884:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001886:	f002 f9bd 	bl	8003c04 <HAL_TIM_Base_Init>
 800188a:	2800      	cmp	r0, #0
 800188c:	f040 8123 	bne.w	8001ad6 <main+0x39e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001894:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001896:	a90b      	add	r1, sp, #44	; 0x2c
 8001898:	485f      	ldr	r0, [pc, #380]	; (8001a18 <main+0x2e0>)
 800189a:	f002 fab3 	bl	8003e04 <HAL_TIM_ConfigClockSource>
 800189e:	2800      	cmp	r0, #0
 80018a0:	f040 811b 	bne.w	8001ada <main+0x3a2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80018a4:	2320      	movs	r3, #32
 80018a6:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a8:	2300      	movs	r3, #0
 80018aa:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018ac:	a907      	add	r1, sp, #28
 80018ae:	485a      	ldr	r0, [pc, #360]	; (8001a18 <main+0x2e0>)
 80018b0:	f002 fc12 	bl	80040d8 <HAL_TIMEx_MasterConfigSynchronization>
 80018b4:	2800      	cmp	r0, #0
 80018b6:	f040 8112 	bne.w	8001ade <main+0x3a6>
  ADC_ChannelConfTypeDef sConfig = {0};
 80018ba:	2300      	movs	r3, #0
 80018bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80018be:	930c      	str	r3, [sp, #48]	; 0x30
 80018c0:	930d      	str	r3, [sp, #52]	; 0x34
  hadc1.Instance = ADC1;
 80018c2:	4856      	ldr	r0, [pc, #344]	; (8001a1c <main+0x2e4>)
 80018c4:	4a56      	ldr	r2, [pc, #344]	; (8001a20 <main+0x2e8>)
 80018c6:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80018c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018cc:	6082      	str	r2, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80018ce:	2201      	movs	r2, #1
 80018d0:	7302      	strb	r2, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018d2:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018d4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80018d8:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018da:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 3;
 80018dc:	2303      	movs	r3, #3
 80018de:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018e0:	f001 f806 	bl	80028f0 <HAL_ADC_Init>
 80018e4:	2800      	cmp	r0, #0
 80018e6:	f040 80fc 	bne.w	8001ae2 <main+0x3aa>
  sConfig.Channel = ADC_CHANNEL_0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018ee:	2301      	movs	r3, #1
 80018f0:	930c      	str	r3, [sp, #48]	; 0x30
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 80018f2:	2304      	movs	r3, #4
 80018f4:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018f6:	a90b      	add	r1, sp, #44	; 0x2c
 80018f8:	4848      	ldr	r0, [pc, #288]	; (8001a1c <main+0x2e4>)
 80018fa:	f000 fe41 	bl	8002580 <HAL_ADC_ConfigChannel>
 80018fe:	2800      	cmp	r0, #0
 8001900:	f040 80f1 	bne.w	8001ae6 <main+0x3ae>
  sConfig.Channel = ADC_CHANNEL_1;
 8001904:	2301      	movs	r3, #1
 8001906:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001908:	2302      	movs	r3, #2
 800190a:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800190c:	a90b      	add	r1, sp, #44	; 0x2c
 800190e:	4843      	ldr	r0, [pc, #268]	; (8001a1c <main+0x2e4>)
 8001910:	f000 fe36 	bl	8002580 <HAL_ADC_ConfigChannel>
 8001914:	2800      	cmp	r0, #0
 8001916:	f040 80e8 	bne.w	8001aea <main+0x3b2>
  sConfig.Channel = ADC_CHANNEL_2;
 800191a:	2302      	movs	r3, #2
 800191c:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800191e:	2303      	movs	r3, #3
 8001920:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001922:	a90b      	add	r1, sp, #44	; 0x2c
 8001924:	483d      	ldr	r0, [pc, #244]	; (8001a1c <main+0x2e4>)
 8001926:	f000 fe2b 	bl	8002580 <HAL_ADC_ConfigChannel>
 800192a:	2800      	cmp	r0, #0
 800192c:	f040 80df 	bne.w	8001aee <main+0x3b6>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001930:	2300      	movs	r3, #0
 8001932:	9307      	str	r3, [sp, #28]
 8001934:	9308      	str	r3, [sp, #32]
 8001936:	9309      	str	r3, [sp, #36]	; 0x24
 8001938:	930a      	str	r3, [sp, #40]	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800193a:	9305      	str	r3, [sp, #20]
 800193c:	9306      	str	r3, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800193e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001940:	930c      	str	r3, [sp, #48]	; 0x30
 8001942:	930d      	str	r3, [sp, #52]	; 0x34
 8001944:	930e      	str	r3, [sp, #56]	; 0x38
 8001946:	930f      	str	r3, [sp, #60]	; 0x3c
 8001948:	9310      	str	r3, [sp, #64]	; 0x40
 800194a:	9311      	str	r3, [sp, #68]	; 0x44
  htim3.Instance = TIM3;
 800194c:	4835      	ldr	r0, [pc, #212]	; (8001a24 <main+0x2ec>)
 800194e:	4a36      	ldr	r2, [pc, #216]	; (8001a28 <main+0x2f0>)
 8001950:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 2;
 8001952:	2202      	movs	r2, #2
 8001954:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001956:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 1000;
 8001958:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800195c:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800195e:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001960:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001962:	f002 f94f 	bl	8003c04 <HAL_TIM_Base_Init>
 8001966:	2800      	cmp	r0, #0
 8001968:	f040 80c3 	bne.w	8001af2 <main+0x3ba>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800196c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001970:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001972:	a907      	add	r1, sp, #28
 8001974:	482b      	ldr	r0, [pc, #172]	; (8001a24 <main+0x2ec>)
 8001976:	f002 fa45 	bl	8003e04 <HAL_TIM_ConfigClockSource>
 800197a:	2800      	cmp	r0, #0
 800197c:	f040 80bb 	bne.w	8001af6 <main+0x3be>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001980:	4828      	ldr	r0, [pc, #160]	; (8001a24 <main+0x2ec>)
 8001982:	f002 f96b 	bl	8003c5c <HAL_TIM_PWM_Init>
 8001986:	2800      	cmp	r0, #0
 8001988:	f040 80b7 	bne.w	8001afa <main+0x3c2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800198c:	2300      	movs	r3, #0
 800198e:	9305      	str	r3, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001990:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001992:	a905      	add	r1, sp, #20
 8001994:	4823      	ldr	r0, [pc, #140]	; (8001a24 <main+0x2ec>)
 8001996:	f002 fb9f 	bl	80040d8 <HAL_TIMEx_MasterConfigSynchronization>
 800199a:	2800      	cmp	r0, #0
 800199c:	f040 80af 	bne.w	8001afe <main+0x3c6>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019a0:	2360      	movs	r3, #96	; 0x60
 80019a2:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80019a4:	2200      	movs	r2, #0
 80019a6:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019a8:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80019aa:	2304      	movs	r3, #4
 80019ac:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019ae:	a90b      	add	r1, sp, #44	; 0x2c
 80019b0:	481c      	ldr	r0, [pc, #112]	; (8001a24 <main+0x2ec>)
 80019b2:	f002 f9ad 	bl	8003d10 <HAL_TIM_PWM_ConfigChannel>
 80019b6:	2800      	cmp	r0, #0
 80019b8:	f040 80a3 	bne.w	8001b02 <main+0x3ca>
  sConfigOC.Pulse = 500;
 80019bc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80019c0:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019c2:	2204      	movs	r2, #4
 80019c4:	a90b      	add	r1, sp, #44	; 0x2c
 80019c6:	4817      	ldr	r0, [pc, #92]	; (8001a24 <main+0x2ec>)
 80019c8:	f002 f9a2 	bl	8003d10 <HAL_TIM_PWM_ConfigChannel>
 80019cc:	2800      	cmp	r0, #0
 80019ce:	f040 809a 	bne.w	8001b06 <main+0x3ce>
  HAL_TIM_MspPostInit(&htim3);
 80019d2:	4814      	ldr	r0, [pc, #80]	; (8001a24 <main+0x2ec>)
 80019d4:	f000 fc62 	bl	800229c <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019d8:	2300      	movs	r3, #0
 80019da:	930b      	str	r3, [sp, #44]	; 0x2c
 80019dc:	930c      	str	r3, [sp, #48]	; 0x30
 80019de:	930d      	str	r3, [sp, #52]	; 0x34
 80019e0:	930e      	str	r3, [sp, #56]	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e2:	9307      	str	r3, [sp, #28]
 80019e4:	9308      	str	r3, [sp, #32]
  htim4.Instance = TIM4;
 80019e6:	4811      	ldr	r0, [pc, #68]	; (8001a2c <main+0x2f4>)
 80019e8:	4a11      	ldr	r2, [pc, #68]	; (8001a30 <main+0x2f8>)
 80019ea:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 32000;
 80019ec:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80019f0:	6042      	str	r2, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f2:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 2000;
 80019f4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80019f8:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019fa:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019fc:	2380      	movs	r3, #128	; 0x80
 80019fe:	6183      	str	r3, [r0, #24]
 8001a00:	e018      	b.n	8001a34 <main+0x2fc>
 8001a02:	bf00      	nop
 8001a04:	40021000 	.word	0x40021000
 8001a08:	40010800 	.word	0x40010800
 8001a0c:	40010c00 	.word	0x40010c00
 8001a10:	2000162c 	.word	0x2000162c
 8001a14:	40013800 	.word	0x40013800
 8001a18:	20001554 	.word	0x20001554
 8001a1c:	200014e0 	.word	0x200014e0
 8001a20:	40012400 	.word	0x40012400
 8001a24:	2000159c 	.word	0x2000159c
 8001a28:	40000400 	.word	0x40000400
 8001a2c:	200015e4 	.word	0x200015e4
 8001a30:	40000800 	.word	0x40000800
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a34:	f002 f8e6 	bl	8003c04 <HAL_TIM_Base_Init>
 8001a38:	2800      	cmp	r0, #0
 8001a3a:	d166      	bne.n	8001b0a <main+0x3d2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a40:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a42:	a90b      	add	r1, sp, #44	; 0x2c
 8001a44:	4834      	ldr	r0, [pc, #208]	; (8001b18 <main+0x3e0>)
 8001a46:	f002 f9dd 	bl	8003e04 <HAL_TIM_ConfigClockSource>
 8001a4a:	2800      	cmp	r0, #0
 8001a4c:	d15f      	bne.n	8001b0e <main+0x3d6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a52:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a54:	a907      	add	r1, sp, #28
 8001a56:	4830      	ldr	r0, [pc, #192]	; (8001b18 <main+0x3e0>)
 8001a58:	f002 fb3e 	bl	80040d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a5c:	2800      	cmp	r0, #0
 8001a5e:	d158      	bne.n	8001b12 <main+0x3da>
  osKernelInitialize();
 8001a60:	f003 fdca 	bl	80055f8 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001a64:	4a2d      	ldr	r2, [pc, #180]	; (8001b1c <main+0x3e4>)
 8001a66:	2100      	movs	r1, #0
 8001a68:	482d      	ldr	r0, [pc, #180]	; (8001b20 <main+0x3e8>)
 8001a6a:	f003 fe11 	bl	8005690 <osThreadNew>
 8001a6e:	4b2d      	ldr	r3, [pc, #180]	; (8001b24 <main+0x3ec>)
 8001a70:	6018      	str	r0, [r3, #0]
  DIN_DOUTHandle = osThreadNew(vDTask, NULL, &DIN_DOUT_attributes);
 8001a72:	4a2d      	ldr	r2, [pc, #180]	; (8001b28 <main+0x3f0>)
 8001a74:	2100      	movs	r1, #0
 8001a76:	482d      	ldr	r0, [pc, #180]	; (8001b2c <main+0x3f4>)
 8001a78:	f003 fe0a 	bl	8005690 <osThreadNew>
 8001a7c:	4b2c      	ldr	r3, [pc, #176]	; (8001b30 <main+0x3f8>)
 8001a7e:	6018      	str	r0, [r3, #0]
  UARTTaskHandle = osThreadNew(StartUARTTask, NULL, &UARTTask_attributes);
 8001a80:	4a2c      	ldr	r2, [pc, #176]	; (8001b34 <main+0x3fc>)
 8001a82:	2100      	movs	r1, #0
 8001a84:	482c      	ldr	r0, [pc, #176]	; (8001b38 <main+0x400>)
 8001a86:	f003 fe03 	bl	8005690 <osThreadNew>
 8001a8a:	4b2c      	ldr	r3, [pc, #176]	; (8001b3c <main+0x404>)
 8001a8c:	6018      	str	r0, [r3, #0]
  DataTaskHandle = osThreadNew(vDATATask, NULL, &DataTask_attributes);
 8001a8e:	4a2c      	ldr	r2, [pc, #176]	; (8001b40 <main+0x408>)
 8001a90:	2100      	movs	r1, #0
 8001a92:	482c      	ldr	r0, [pc, #176]	; (8001b44 <main+0x40c>)
 8001a94:	f003 fdfc 	bl	8005690 <osThreadNew>
 8001a98:	4b2b      	ldr	r3, [pc, #172]	; (8001b48 <main+0x410>)
 8001a9a:	6018      	str	r0, [r3, #0]
  MBTaskHandle = osThreadNew(vMBTask, NULL, &MBTask_attributes);
 8001a9c:	4a2b      	ldr	r2, [pc, #172]	; (8001b4c <main+0x414>)
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	482b      	ldr	r0, [pc, #172]	; (8001b50 <main+0x418>)
 8001aa2:	f003 fdf5 	bl	8005690 <osThreadNew>
 8001aa6:	4b2b      	ldr	r3, [pc, #172]	; (8001b54 <main+0x41c>)
 8001aa8:	6018      	str	r0, [r3, #0]
  xOSEventHandle = osEventFlagsNew(&xOSEvent_attributes);
 8001aaa:	482b      	ldr	r0, [pc, #172]	; (8001b58 <main+0x420>)
 8001aac:	f003 fe78 	bl	80057a0 <osEventFlagsNew>
 8001ab0:	4b2a      	ldr	r3, [pc, #168]	; (8001b5c <main+0x424>)
 8001ab2:	6018      	str	r0, [r3, #0]
  xUARTEvnetHandle = osEventFlagsNew(&xUARTEvnet_attributes);
 8001ab4:	482a      	ldr	r0, [pc, #168]	; (8001b60 <main+0x428>)
 8001ab6:	f003 fe73 	bl	80057a0 <osEventFlagsNew>
 8001aba:	4b2a      	ldr	r3, [pc, #168]	; (8001b64 <main+0x42c>)
 8001abc:	6018      	str	r0, [r3, #0]
  xSystemControlEventHandle = osEventFlagsNew(&xSystemControlEvent_attributes);
 8001abe:	482a      	ldr	r0, [pc, #168]	; (8001b68 <main+0x430>)
 8001ac0:	f003 fe6e 	bl	80057a0 <osEventFlagsNew>
 8001ac4:	4b29      	ldr	r3, [pc, #164]	; (8001b6c <main+0x434>)
 8001ac6:	6018      	str	r0, [r3, #0]
  InitSystemEnvet(xSystemControlEventHandle);
 8001ac8:	f000 f880 	bl	8001bcc <InitSystemEnvet>
  osKernelStart();
 8001acc:	f003 fdb8 	bl	8005640 <osKernelStart>
  while (1)
 8001ad0:	e7fe      	b.n	8001ad0 <main+0x398>
 8001ad2:	b672      	cpsid	i
  while (1)
 8001ad4:	e7fe      	b.n	8001ad4 <main+0x39c>
 8001ad6:	b672      	cpsid	i
 8001ad8:	e7fe      	b.n	8001ad8 <main+0x3a0>
 8001ada:	b672      	cpsid	i
 8001adc:	e7fe      	b.n	8001adc <main+0x3a4>
 8001ade:	b672      	cpsid	i
 8001ae0:	e7fe      	b.n	8001ae0 <main+0x3a8>
 8001ae2:	b672      	cpsid	i
 8001ae4:	e7fe      	b.n	8001ae4 <main+0x3ac>
 8001ae6:	b672      	cpsid	i
 8001ae8:	e7fe      	b.n	8001ae8 <main+0x3b0>
 8001aea:	b672      	cpsid	i
 8001aec:	e7fe      	b.n	8001aec <main+0x3b4>
 8001aee:	b672      	cpsid	i
 8001af0:	e7fe      	b.n	8001af0 <main+0x3b8>
 8001af2:	b672      	cpsid	i
 8001af4:	e7fe      	b.n	8001af4 <main+0x3bc>
 8001af6:	b672      	cpsid	i
 8001af8:	e7fe      	b.n	8001af8 <main+0x3c0>
 8001afa:	b672      	cpsid	i
 8001afc:	e7fe      	b.n	8001afc <main+0x3c4>
 8001afe:	b672      	cpsid	i
 8001b00:	e7fe      	b.n	8001b00 <main+0x3c8>
 8001b02:	b672      	cpsid	i
 8001b04:	e7fe      	b.n	8001b04 <main+0x3cc>
 8001b06:	b672      	cpsid	i
 8001b08:	e7fe      	b.n	8001b08 <main+0x3d0>
 8001b0a:	b672      	cpsid	i
 8001b0c:	e7fe      	b.n	8001b0c <main+0x3d4>
 8001b0e:	b672      	cpsid	i
 8001b10:	e7fe      	b.n	8001b10 <main+0x3d8>
 8001b12:	b672      	cpsid	i
 8001b14:	e7fe      	b.n	8001b14 <main+0x3dc>
 8001b16:	bf00      	nop
 8001b18:	200015e4 	.word	0x200015e4
 8001b1c:	08007938 	.word	0x08007938
 8001b20:	08001645 	.word	0x08001645
 8001b24:	200014dc 	.word	0x200014dc
 8001b28:	080078a8 	.word	0x080078a8
 8001b2c:	08001325 	.word	0x08001325
 8001b30:	200007d4 	.word	0x200007d4
 8001b34:	08007914 	.word	0x08007914
 8001b38:	080052c1 	.word	0x080052c1
 8001b3c:	2000121c 	.word	0x2000121c
 8001b40:	080078cc 	.word	0x080078cc
 8001b44:	08001d11 	.word	0x08001d11
 8001b48:	20000a94 	.word	0x20000a94
 8001b4c:	080078f0 	.word	0x080078f0
 8001b50:	08001c6d 	.word	0x08001c6d
 8001b54:	20000f5c 	.word	0x20000f5c
 8001b58:	0800795c 	.word	0x0800795c
 8001b5c:	20001694 	.word	0x20001694
 8001b60:	0800797c 	.word	0x0800797c
 8001b64:	200016dc 	.word	0x200016dc
 8001b68:	0800796c 	.word	0x0800796c
 8001b6c:	200016b8 	.word	0x200016b8

08001b70 <HAL_TIM_PeriodElapsedCallback>:
{
 8001b70:	b510      	push	{r4, lr}
 8001b72:	4604      	mov	r4, r0
	 if (htim->Instance == TIM2) {
 8001b74:	6803      	ldr	r3, [r0, #0]
 8001b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b7a:	d004      	beq.n	8001b86 <HAL_TIM_PeriodElapsedCallback+0x16>
  if (htim->Instance == TIM1) {
 8001b7c:	6822      	ldr	r2, [r4, #0]
 8001b7e:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d003      	beq.n	8001b8c <HAL_TIM_PeriodElapsedCallback+0x1c>
}
 8001b84:	bd10      	pop	{r4, pc}
		 rvvTIMERExpiredISR();
 8001b86:	f003 fbdb 	bl	8005340 <rvvTIMERExpiredISR>
 8001b8a:	e7f7      	b.n	8001b7c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001b8c:	f000 fca8 	bl	80024e0 <HAL_IncTick>
}
 8001b90:	e7f8      	b.n	8001b84 <HAL_TIM_PeriodElapsedCallback+0x14>
 8001b92:	bf00      	nop
 8001b94:	40012c00 	.word	0x40012c00

08001b98 <Error_Handler>:
 8001b98:	b672      	cpsid	i
  while (1)
 8001b9a:	e7fe      	b.n	8001b9a <Error_Handler+0x2>

08001b9c <vSetState>:
/*
 *
 */
static void vSetState( FAN_SPEED_t speed ,VALVE_STATE_t state )
{
	if (state != VALVE_AUTO)
 8001b9c:	2902      	cmp	r1, #2
	{
		valve_state = state;
 8001b9e:	bf1c      	itt	ne
 8001ba0:	4b07      	ldrne	r3, [pc, #28]	; (8001bc0 <vSetState+0x24>)
 8001ba2:	7019      	strbne	r1, [r3, #0]
	}
	vSetRegInput(WATER_VALVE, valve_state  );
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <vSetState+0x24>)
 8001ba6:	781a      	ldrb	r2, [r3, #0]
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <vSetState+0x28>)
 8001baa:	811a      	strh	r2, [r3, #8]

	if ( speed != FAN_SPEED_AUTO)
 8001bac:	2804      	cmp	r0, #4
	{
		current_fan_speed = speed;
 8001bae:	bf1c      	itt	ne
 8001bb0:	4b05      	ldrne	r3, [pc, #20]	; (8001bc8 <vSetState+0x2c>)
 8001bb2:	7018      	strbne	r0, [r3, #0]
	}
	vSetRegInput(FAN_SPEED, current_fan_speed );
 8001bb4:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <vSetState+0x2c>)
 8001bb6:	781a      	ldrb	r2, [r3, #0]
 8001bb8:	4b02      	ldr	r3, [pc, #8]	; (8001bc4 <vSetState+0x28>)
 8001bba:	815a      	strh	r2, [r3, #10]
}
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	20001712 	.word	0x20001712
 8001bc4:	200016e8 	.word	0x200016e8
 8001bc8:	200016e6 	.word	0x200016e6

08001bcc <InitSystemEnvet>:
	 xSystemEventGroupHandle = event;
 8001bcc:	4b01      	ldr	r3, [pc, #4]	; (8001bd4 <InitSystemEnvet+0x8>)
 8001bce:	6018      	str	r0, [r3, #0]
}
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	20001714 	.word	0x20001714

08001bd8 <waitFlag>:
{
 8001bd8:	b500      	push	{lr}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	4601      	mov	r1, r0
	xEventGroupWaitBits(xSystemEventGroupHandle,   flag ,  pdFALSE, pdTRUE, portMAX_DELAY );
 8001bde:	f04f 33ff 	mov.w	r3, #4294967295
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	2301      	movs	r3, #1
 8001be6:	2200      	movs	r2, #0
 8001be8:	4803      	ldr	r0, [pc, #12]	; (8001bf8 <waitFlag+0x20>)
 8001bea:	6800      	ldr	r0, [r0, #0]
 8001bec:	f003 fe4b 	bl	8005886 <xEventGroupWaitBits>
}
 8001bf0:	b003      	add	sp, #12
 8001bf2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bf6:	bf00      	nop
 8001bf8:	20001714 	.word	0x20001714

08001bfc <usGetReg>:
     if (reg_addr == MODE)
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	b910      	cbnz	r0, 8001c06 <usGetReg+0xa>
			connection = 1;
 8001c00:	4b03      	ldr	r3, [pc, #12]	; (8001c10 <usGetReg+0x14>)
 8001c02:	2101      	movs	r1, #1
 8001c04:	7019      	strb	r1, [r3, #0]
}
 8001c06:	4b03      	ldr	r3, [pc, #12]	; (8001c14 <usGetReg+0x18>)
 8001c08:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	200016e4 	.word	0x200016e4
 8001c14:	20001704 	.word	0x20001704

08001c18 <usGetRegInput>:
}
 8001c18:	4b01      	ldr	r3, [pc, #4]	; (8001c20 <usGetRegInput+0x8>)
 8001c1a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8001c1e:	4770      	bx	lr
 8001c20:	200016e8 	.word	0x200016e8

08001c24 <vSetRegInput>:
	  if (reg_addr == TYPE)
 8001c24:	4602      	mov	r2, r0
 8001c26:	b930      	cbnz	r0, 8001c36 <vSetRegInput+0x12>
		  if (input_regs[reg_addr] != data)
 8001c28:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <vSetRegInput+0x1c>)
 8001c2a:	881b      	ldrh	r3, [r3, #0]
 8001c2c:	428b      	cmp	r3, r1
 8001c2e:	d002      	beq.n	8001c36 <vSetRegInput+0x12>
			  mode_restart = 1;
 8001c30:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <vSetRegInput+0x20>)
 8001c32:	2001      	movs	r0, #1
 8001c34:	7018      	strb	r0, [r3, #0]
      input_regs[reg_addr] = data;
 8001c36:	4b02      	ldr	r3, [pc, #8]	; (8001c40 <vSetRegInput+0x1c>)
 8001c38:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
}
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	200016e8 	.word	0x200016e8
 8001c44:	200016fc 	.word	0x200016fc

08001c48 <vSetReg>:
			  if (reg_addr == MODE)
 8001c48:	4602      	mov	r2, r0
 8001c4a:	b930      	cbnz	r0, 8001c5a <vSetReg+0x12>
				  if (system_regs[reg_addr] != data)
 8001c4c:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <vSetReg+0x1c>)
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	428b      	cmp	r3, r1
 8001c52:	d002      	beq.n	8001c5a <vSetReg+0x12>
					  mode_restart = 1;
 8001c54:	4b04      	ldr	r3, [pc, #16]	; (8001c68 <vSetReg+0x20>)
 8001c56:	2001      	movs	r0, #1
 8001c58:	7018      	strb	r0, [r3, #0]
			  system_regs[reg_addr] = data;
 8001c5a:	4b02      	ldr	r3, [pc, #8]	; (8001c64 <vSetReg+0x1c>)
 8001c5c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
}
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	20001704 	.word	0x20001704
 8001c68:	200016fc 	.word	0x200016fc

08001c6c <vMBTask>:
 {
 8001c6c:	b510      	push	{r4, lr}
 8001c6e:	b082      	sub	sp, #8
	 waitFlag( DIN_READY );
 8001c70:	2001      	movs	r0, #1
 8001c72:	f7ff ffb1 	bl	8001bd8 <waitFlag>
	 addres = (uiGetDinMask() & DEVICE_ADDR_MASK)>>DEVICE_ADDR_OFFSET;
 8001c76:	f7ff fb3d 	bl	80012f4 <uiGetDinMask>
	 eMBInit(MB_RTU,addres,0,38400,MB_PAR_ODD );
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001c82:	2200      	movs	r2, #0
 8001c84:	f000 010f 	and.w	r1, r0, #15
 8001c88:	4610      	mov	r0, r2
 8001c8a:	f002 fdab 	bl	80047e4 <eMBInit>
	 eMBEnable(  );
 8001c8e:	f002 fe07 	bl	80048a0 <eMBEnable>
	 xEventGroupSetBits(xSystemEventGroupHandle,  MB_READY );
 8001c92:	2104      	movs	r1, #4
 8001c94:	4b05      	ldr	r3, [pc, #20]	; (8001cac <vMBTask+0x40>)
 8001c96:	6818      	ldr	r0, [r3, #0]
 8001c98:	f003 fe80 	bl	800599c <xEventGroupSetBits>
		 vTaskDelay(1);
 8001c9c:	2401      	movs	r4, #1
 8001c9e:	4620      	mov	r0, r4
 8001ca0:	f004 fdcc 	bl	800683c <vTaskDelay>
		 eMBPoll();
 8001ca4:	f002 fe0e 	bl	80048c4 <eMBPoll>
	 while (1)
 8001ca8:	e7f9      	b.n	8001c9e <vMBTask+0x32>
 8001caa:	bf00      	nop
 8001cac:	20001714 	.word	0x20001714

08001cb0 <vTimer1sInc>:
	sTimer++;
 8001cb0:	4a02      	ldr	r2, [pc, #8]	; (8001cbc <vTimer1sInc+0xc>)
 8001cb2:	6813      	ldr	r3, [r2, #0]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	6013      	str	r3, [r2, #0]
}
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	20001700 	.word	0x20001700

08001cc0 <GetTimer>:
	if ( TimerTriger == 0 )
 8001cc0:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <GetTimer+0x2c>)
 8001cc2:	881b      	ldrh	r3, [r3, #0]
 8001cc4:	b133      	cbz	r3, 8001cd4 <GetTimer+0x14>
		if (sTimer < time)
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <GetTimer+0x30>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
	uint8_t res = 0;
 8001cca:	4298      	cmp	r0, r3
 8001ccc:	bf8c      	ite	hi
 8001cce:	2000      	movhi	r0, #0
 8001cd0:	2001      	movls	r0, #1
 }
 8001cd2:	4770      	bx	lr
 {
 8001cd4:	b510      	push	{r4, lr}
		TimerTriger = 1;
 8001cd6:	4b05      	ldr	r3, [pc, #20]	; (8001cec <GetTimer+0x2c>)
 8001cd8:	2201      	movs	r2, #1
 8001cda:	801a      	strh	r2, [r3, #0]
		sTimer = 0;
 8001cdc:	2400      	movs	r4, #0
 8001cde:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <GetTimer+0x30>)
 8001ce0:	601c      	str	r4, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim4);
 8001ce2:	4804      	ldr	r0, [pc, #16]	; (8001cf4 <GetTimer+0x34>)
 8001ce4:	f001 fe30 	bl	8003948 <HAL_TIM_Base_Start_IT>
	uint8_t res = 0;
 8001ce8:	4620      	mov	r0, r4
 }
 8001cea:	bd10      	pop	{r4, pc}
 8001cec:	200016e2 	.word	0x200016e2
 8001cf0:	20001700 	.word	0x20001700
 8001cf4:	200015e4 	.word	0x200015e4

08001cf8 <ResetTimer>:
{
 8001cf8:	b508      	push	{r3, lr}
	HAL_TIM_Base_Stop_IT(&htim4);
 8001cfa:	4803      	ldr	r0, [pc, #12]	; (8001d08 <ResetTimer+0x10>)
 8001cfc:	f001 fe58 	bl	80039b0 <HAL_TIM_Base_Stop_IT>
	TimerTriger = 0;
 8001d00:	4b02      	ldr	r3, [pc, #8]	; (8001d0c <ResetTimer+0x14>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	801a      	strh	r2, [r3, #0]
}
 8001d06:	bd08      	pop	{r3, pc}
 8001d08:	200015e4 	.word	0x200015e4
 8001d0c:	200016e2 	.word	0x200016e2

08001d10 <vDATATask>:
 {
 8001d10:	e92d 46f0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, lr}
 8001d14:	b089      	sub	sp, #36	; 0x24
	MAIN_FSM_STATE_t InitFSM = STANDBAY_STATE;
 8001d16:	2400      	movs	r4, #0
    	 HAL_GPIO_TogglePin( LED_R_GPIO_Port, LED_R_Pin);
 8001d18:	f8df 9278 	ldr.w	r9, [pc, #632]	; 8001f94 <vDATATask+0x284>
			  sConfigOC.Pulse = (pwm/100.0)*860;
 8001d1c:	2600      	movs	r6, #0
 8001d1e:	4f9e      	ldr	r7, [pc, #632]	; (8001f98 <vDATATask+0x288>)
 8001d20:	e006      	b.n	8001d30 <vDATATask+0x20>
		 		 waitFlag( DIN_READY | AIN_READY | MB_READY);
 8001d22:	2007      	movs	r0, #7
 8001d24:	f7ff ff58 	bl	8001bd8 <waitFlag>
		 		 mode_restart = 1;
 8001d28:	4b9c      	ldr	r3, [pc, #624]	; (8001f9c <vDATATask+0x28c>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	701a      	strb	r2, [r3, #0]
 {
 8001d2e:	2401      	movs	r4, #1
		 vSetRegInput(FSM_STATUS, control_state);
 8001d30:	4b9b      	ldr	r3, [pc, #620]	; (8001fa0 <vDATATask+0x290>)
 8001d32:	781a      	ldrb	r2, [r3, #0]
 8001d34:	4b9b      	ldr	r3, [pc, #620]	; (8001fa4 <vDATATask+0x294>)
 8001d36:	80da      	strh	r2, [r3, #6]
		 vTaskDelay(10);
 8001d38:	200a      	movs	r0, #10
 8001d3a:	f004 fd7f 	bl	800683c <vTaskDelay>
		 switch (InitFSM)
 8001d3e:	2c00      	cmp	r4, #0
 8001d40:	d0ef      	beq.n	8001d22 <vDATATask+0x12>
	 if ((uiGetDinMask() & DEVICE_DOOR_MASK)>>DEVICE_DOOR_OFFSET)
 8001d42:	f7ff fad7 	bl	80012f4 <uiGetDinMask>
 8001d46:	f410 7f80 	tst.w	r0, #256	; 0x100
 8001d4a:	d007      	beq.n	8001d5c <vDATATask+0x4c>
    usRes = input_regs[reg_addr];
 8001d4c:	4b95      	ldr	r3, [pc, #596]	; (8001fa4 <vDATATask+0x294>)
		if (usGetRegInput(DOOR_STATE_TRIGGER)  == OPEN )
 8001d4e:	899b      	ldrh	r3, [r3, #12]
 8001d50:	2b02      	cmp	r3, #2
      input_regs[reg_addr] = data;
 8001d52:	4b94      	ldr	r3, [pc, #592]	; (8001fa4 <vDATATask+0x294>)
 8001d54:	bf0c      	ite	eq
 8001d56:	2203      	moveq	r2, #3
 8001d58:	2202      	movne	r2, #2
 8001d5a:	819a      	strh	r2, [r3, #12]
		 		if (mode_restart == 1)
 8001d5c:	4b8f      	ldr	r3, [pc, #572]	; (8001f9c <vDATATask+0x28c>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d038      	beq.n	8001dd6 <vDATATask+0xc6>
    usRes = input_regs[reg_addr];
 8001d64:	4b8f      	ldr	r3, [pc, #572]	; (8001fa4 <vDATATask+0x294>)
 8001d66:	881b      	ldrh	r3, [r3, #0]
		 		if (((usGetRegInput(TYPE) != NONE) && (error & WATER_TEMP_ERROR ))
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d056      	beq.n	8001e1a <vDATATask+0x10a>
    usRes = input_regs[reg_addr];
 8001d6c:	4a8d      	ldr	r2, [pc, #564]	; (8001fa4 <vDATATask+0x294>)
 8001d6e:	89d2      	ldrh	r2, [r2, #14]
		 		if (((usGetRegInput(TYPE) != NONE) && (error & WATER_TEMP_ERROR ))
 8001d70:	f012 0f01 	tst.w	r2, #1
 8001d74:	d104      	bne.n	8001d80 <vDATATask+0x70>
		 			|| ((usGetRegInput(TYPE) == HW) && (error & AIR_TEMP_ERROR )))
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d14f      	bne.n	8001e1a <vDATATask+0x10a>
 8001d7a:	f012 0f02 	tst.w	r2, #2
 8001d7e:	d04c      	beq.n	8001e1a <vDATATask+0x10a>
		 			vSetState(FAN_SPEED_OFF, VALVE_ON);
 8001d80:	2101      	movs	r1, #1
 8001d82:	2000      	movs	r0, #0
 8001d84:	f7ff ff0a 	bl	8001b9c <vSetState>
		usRes = system_regs[reg_addr];
 8001d88:	4b87      	ldr	r3, [pc, #540]	; (8001fa8 <vDATATask+0x298>)
 8001d8a:	8918      	ldrh	r0, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	9301      	str	r3, [sp, #4]
 8001d90:	9302      	str	r3, [sp, #8]
 8001d92:	9303      	str	r3, [sp, #12]
 8001d94:	9304      	str	r3, [sp, #16]
 8001d96:	9305      	str	r3, [sp, #20]
 8001d98:	9306      	str	r3, [sp, #24]
 8001d9a:	9307      	str	r3, [sp, #28]
	if (pwm <=100)
 8001d9c:	2864      	cmp	r0, #100	; 0x64
 8001d9e:	d804      	bhi.n	8001daa <vDATATask+0x9a>
		if (pwm != PWM_STATE)
 8001da0:	4b82      	ldr	r3, [pc, #520]	; (8001fac <vDATATask+0x29c>)
 8001da2:	881b      	ldrh	r3, [r3, #0]
 8001da4:	4283      	cmp	r3, r0
 8001da6:	f040 8146 	bne.w	8002036 <vDATATask+0x326>
    usRes = input_regs[reg_addr];
 8001daa:	4b7e      	ldr	r3, [pc, #504]	; (8001fa4 <vDATATask+0x294>)
 8001dac:	89db      	ldrh	r3, [r3, #14]
     if ((usGetRegInput(ERROR_STATUS) &  WATER_TEMP_ERROR ) || ( (usGetRegInput(ERROR_STATUS) & AIR_TEMP_ERROR) && (usGetRegInput(TYPE)==HW)))
 8001dae:	f013 0f01 	tst.w	r3, #1
 8001db2:	f040 8176 	bne.w	80020a2 <vDATATask+0x392>
 8001db6:	f013 0f02 	tst.w	r3, #2
 8001dba:	d004      	beq.n	8001dc6 <vDATATask+0xb6>
    usRes = input_regs[reg_addr];
 8001dbc:	4b79      	ldr	r3, [pc, #484]	; (8001fa4 <vDATATask+0x294>)
     if ((usGetRegInput(ERROR_STATUS) &  WATER_TEMP_ERROR ) || ( (usGetRegInput(ERROR_STATUS) & AIR_TEMP_ERROR) && (usGetRegInput(TYPE)==HW)))
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	f000 819c 	beq.w	80020fe <vDATATask+0x3ee>
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	4b79      	ldr	r3, [pc, #484]	; (8001fb0 <vDATATask+0x2a0>)
 8001dca:	801a      	strh	r2, [r3, #0]
    	 HAL_GPIO_WritePin( LED_R_GPIO_Port, LED_R_Pin,GPIO_PIN_RESET);
 8001dcc:	2120      	movs	r1, #32
 8001dce:	4648      	mov	r0, r9
 8001dd0:	f001 f96c 	bl	80030ac <HAL_GPIO_WritePin>
 8001dd4:	e170      	b.n	80020b8 <vDATATask+0x3a8>
      input_regs[reg_addr] = data;
 8001dd6:	4b73      	ldr	r3, [pc, #460]	; (8001fa4 <vDATATask+0x294>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	819a      	strh	r2, [r3, #12]
		 			if (usGetRegInput(TYPE)==NONE)
 8001ddc:	881b      	ldrh	r3, [r3, #0]
 8001dde:	b933      	cbnz	r3, 8001dee <vDATATask+0xde>
		 				control_state = TELEMETRY;
 8001de0:	4b6f      	ldr	r3, [pc, #444]	; (8001fa0 <vDATATask+0x290>)
 8001de2:	2204      	movs	r2, #4
 8001de4:	701a      	strb	r2, [r3, #0]
		 			mode_restart = 0;
 8001de6:	4b6d      	ldr	r3, [pc, #436]	; (8001f9c <vDATATask+0x28c>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	701a      	strb	r2, [r3, #0]
 8001dec:	e7ba      	b.n	8001d64 <vDATATask+0x54>
			connection = 1;
 8001dee:	4b71      	ldr	r3, [pc, #452]	; (8001fb4 <vDATATask+0x2a4>)
 8001df0:	2201      	movs	r2, #1
 8001df2:	701a      	strb	r2, [r3, #0]
		usRes = system_regs[reg_addr];
 8001df4:	4b6c      	ldr	r3, [pc, #432]	; (8001fa8 <vDATATask+0x298>)
 8001df6:	881b      	ldrh	r3, [r3, #0]
	return  (usRes);
 8001df8:	b13b      	cbz	r3, 8001e0a <vDATATask+0xfa>
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d8f1      	bhi.n	8001de6 <vDATATask+0xd6>
		 				 control_state = PREHEAT;
 8001e02:	4b67      	ldr	r3, [pc, #412]	; (8001fa0 <vDATATask+0x290>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	701a      	strb	r2, [r3, #0]
		 			     break;
 8001e08:	e7ed      	b.n	8001de6 <vDATATask+0xd6>
		 				  vSetState(FAN_SPEED_OFF, VALVE_ON);
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	f7ff fec5 	bl	8001b9c <vSetState>
		 				  control_state = STANDBY;
 8001e12:	4b63      	ldr	r3, [pc, #396]	; (8001fa0 <vDATATask+0x290>)
 8001e14:	2202      	movs	r2, #2
 8001e16:	701a      	strb	r2, [r3, #0]
		 				  break;
 8001e18:	e7e5      	b.n	8001de6 <vDATATask+0xd6>
#ifdef SLAVE_MODE
static void vSlaveControlFSM()
 {
		switch(control_state )
 8001e1a:	4a61      	ldr	r2, [pc, #388]	; (8001fa0 <vDATATask+0x290>)
 8001e1c:	7812      	ldrb	r2, [r2, #0]
 8001e1e:	2a02      	cmp	r2, #2
 8001e20:	d016      	beq.n	8001e50 <vDATATask+0x140>
 8001e22:	2a03      	cmp	r2, #3
 8001e24:	d026      	beq.n	8001e74 <vDATATask+0x164>
 8001e26:	2a01      	cmp	r2, #1
 8001e28:	d1ae      	bne.n	8001d88 <vDATATask+0x78>
			    	break;
				}
			    vSetState(FAN_SPEED_OFF, VALVE_AUTO);
				break;
			case PREHEAT:
					 vSetState(FAN_SPEED_OFF, VALVE_ON);
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	f7ff feb5 	bl	8001b9c <vSetState>
					 if (GetTimer(PREHEAT_OFF_TIME) &&  (usGetRegInput(WATER_TEMP) >= PREHEAT_OFF_TEMP ) )
 8001e32:	203c      	movs	r0, #60	; 0x3c
 8001e34:	f7ff ff44 	bl	8001cc0 <GetTimer>
 8001e38:	2800      	cmp	r0, #0
 8001e3a:	d0a5      	beq.n	8001d88 <vDATATask+0x78>
    usRes = input_regs[reg_addr];
 8001e3c:	4b59      	ldr	r3, [pc, #356]	; (8001fa4 <vDATATask+0x294>)
					 if (GetTimer(PREHEAT_OFF_TIME) &&  (usGetRegInput(WATER_TEMP) >= PREHEAT_OFF_TEMP ) )
 8001e3e:	885b      	ldrh	r3, [r3, #2]
 8001e40:	2b13      	cmp	r3, #19
 8001e42:	d9a1      	bls.n	8001d88 <vDATATask+0x78>
					 {
						 ResetTimer();
 8001e44:	f7ff ff58 	bl	8001cf8 <ResetTimer>
						 control_state =  WORK;
 8001e48:	4b55      	ldr	r3, [pc, #340]	; (8001fa0 <vDATATask+0x290>)
 8001e4a:	2203      	movs	r2, #3
 8001e4c:	701a      	strb	r2, [r3, #0]
 8001e4e:	e79b      	b.n	8001d88 <vDATATask+0x78>
    usRes = input_regs[reg_addr];
 8001e50:	4b54      	ldr	r3, [pc, #336]	; (8001fa4 <vDATATask+0x294>)
 8001e52:	885b      	ldrh	r3, [r3, #2]
				if ( usGetRegInput(WATER_TEMP) <=  STANDBY_WATER_ON_TEMP )
 8001e54:	2b14      	cmp	r3, #20
 8001e56:	d908      	bls.n	8001e6a <vDATATask+0x15a>
			    if (usGetRegInput(WATER_TEMP) >=   STANDBY_WATER_OFF_TEMP )
 8001e58:	2b1d      	cmp	r3, #29
			    	vSetState(FAN_SPEED_OFF, VALVE_OFF);
 8001e5a:	bf87      	ittee	hi
 8001e5c:	2100      	movhi	r1, #0
 8001e5e:	4608      	movhi	r0, r1
			    vSetState(FAN_SPEED_OFF, VALVE_AUTO);
 8001e60:	2102      	movls	r1, #2
 8001e62:	2000      	movls	r0, #0
 8001e64:	f7ff fe9a 	bl	8001b9c <vSetState>
				break;
 8001e68:	e78e      	b.n	8001d88 <vDATATask+0x78>
					vSetState(FAN_SPEED_OFF, VALVE_ON);
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	f7ff fe95 	bl	8001b9c <vSetState>
					break;
 8001e72:	e789      	b.n	8001d88 <vDATATask+0x78>
    usRes = input_regs[reg_addr];
 8001e74:	4a4b      	ldr	r2, [pc, #300]	; (8001fa4 <vDATATask+0x294>)
					 }
					 break;
				 case WORK:
					    //Режим разморозки
					    if (usGetRegInput(WATER_TEMP) < WATER_FREEZE_TEMP)
 8001e76:	8852      	ldrh	r2, [r2, #2]
 8001e78:	2a0c      	cmp	r2, #12
 8001e7a:	d91e      	bls.n	8001eba <vDATATask+0x1aa>
    usRes = input_regs[reg_addr];
 8001e7c:	4a49      	ldr	r2, [pc, #292]	; (8001fa4 <vDATATask+0x294>)
 8001e7e:	8992      	ldrh	r2, [r2, #12]
					    	vSetRegInput(DOOR_STATE_TRIGGER,CLOSED);
					 		control_state = PREHEAT;
					 		break;
					 	}
					    //Режим срабатывания дверных концевиков
					    if ((usGetRegInput(DOOR_STATE_TRIGGER) !=CLOSED) && (usGetReg(MODE) == DEV_AUTO ))
 8001e80:	2a01      	cmp	r2, #1
 8001e82:	d120      	bne.n	8001ec6 <vDATATask+0x1b6>
							{
								vSetState(FAN_SPEED_MAX, VALVE_ON);
							}
							break;
						}
					    if ((usGetRegInput(TYPE) == HW) && ( usGetReg(MODE) == DEV_AUTO))
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d043      	beq.n	8001f10 <vDATATask+0x200>
			connection = 1;
 8001e88:	4a4a      	ldr	r2, [pc, #296]	; (8001fb4 <vDATATask+0x2a4>)
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	7011      	strb	r1, [r2, #0]
		usRes = system_regs[reg_addr];
 8001e8e:	4a46      	ldr	r2, [pc, #280]	; (8001fa8 <vDATATask+0x298>)
 8001e90:	8812      	ldrh	r2, [r2, #0]
					    	{
					    		vSetState(FAN_SPEED_OFF,VALVE_OFF);
					    		break;
					    	}
					    }
					    if  ( usGetReg(MODE) == DEV_MANUAL)
 8001e92:	428a      	cmp	r2, r1
 8001e94:	d046      	beq.n	8001f24 <vDATATask+0x214>
					    		break;
					    	}
					    	vSetState(usGetReg(FAN_SPEED_CONFIG), VALVE_AUTO);
					    	break;
					    }
					    if ((usGetRegInput(TYPE) == AW) && ( usGetReg(MODE) == DEV_AUTO))
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	f47f af76 	bne.w	8001d88 <vDATATask+0x78>
 8001e9c:	2a02      	cmp	r2, #2
 8001e9e:	f47f af73 	bne.w	8001d88 <vDATATask+0x78>
		usRes = system_regs[reg_addr];
 8001ea2:	4b41      	ldr	r3, [pc, #260]	; (8001fa8 <vDATATask+0x298>)
 8001ea4:	88da      	ldrh	r2, [r3, #6]
 8001ea6:	889b      	ldrh	r3, [r3, #4]
					    {
					    	if (usGetReg(AIR_TEMP) < (usGetReg(WORK_TEMP) - VALVE_ON_TEMP_DELTA ))
 8001ea8:	1e99      	subs	r1, r3, #2
 8001eaa:	428a      	cmp	r2, r1
 8001eac:	f280 80a4 	bge.w	8001ff8 <vDATATask+0x2e8>
					    	{
					    		vSetState(FAN_SPEED_MID, VALVE_ON);
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	2002      	movs	r0, #2
 8001eb4:	f7ff fe72 	bl	8001b9c <vSetState>
					    		break;
 8001eb8:	e766      	b.n	8001d88 <vDATATask+0x78>
      input_regs[reg_addr] = data;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	4a39      	ldr	r2, [pc, #228]	; (8001fa4 <vDATATask+0x294>)
 8001ebe:	8193      	strh	r3, [r2, #12]
					 		control_state = PREHEAT;
 8001ec0:	4a37      	ldr	r2, [pc, #220]	; (8001fa0 <vDATATask+0x290>)
 8001ec2:	7013      	strb	r3, [r2, #0]
					 		break;
 8001ec4:	e760      	b.n	8001d88 <vDATATask+0x78>
			connection = 1;
 8001ec6:	493b      	ldr	r1, [pc, #236]	; (8001fb4 <vDATATask+0x2a4>)
 8001ec8:	2001      	movs	r0, #1
 8001eca:	7008      	strb	r0, [r1, #0]
		usRes = system_regs[reg_addr];
 8001ecc:	4936      	ldr	r1, [pc, #216]	; (8001fa8 <vDATATask+0x298>)
					    if ((usGetRegInput(DOOR_STATE_TRIGGER) !=CLOSED) && (usGetReg(MODE) == DEV_AUTO ))
 8001ece:	8809      	ldrh	r1, [r1, #0]
 8001ed0:	2902      	cmp	r1, #2
 8001ed2:	d1d7      	bne.n	8001e84 <vDATATask+0x174>
					    	if (usGetRegInput(DOOR_STATE_TRIGGER) == REOPEN)
 8001ed4:	2a03      	cmp	r2, #3
 8001ed6:	d010      	beq.n	8001efa <vDATATask+0x1ea>
					    	if (((uiGetDinMask() & DEVICE_DOOR_MASK)>>DEVICE_DOOR_OFFSET ) == 0)
 8001ed8:	f7ff fa0c 	bl	80012f4 <uiGetDinMask>
 8001edc:	f410 7f80 	tst.w	r0, #256	; 0x100
 8001ee0:	d111      	bne.n	8001f06 <vDATATask+0x1f6>
								if (GetTimer(DOOR_CLOSE_TIME))
 8001ee2:	20b4      	movs	r0, #180	; 0xb4
 8001ee4:	f7ff feec 	bl	8001cc0 <GetTimer>
 8001ee8:	2800      	cmp	r0, #0
 8001eea:	f43f af4d 	beq.w	8001d88 <vDATATask+0x78>
      input_regs[reg_addr] = data;
 8001eee:	4b2d      	ldr	r3, [pc, #180]	; (8001fa4 <vDATATask+0x294>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	819a      	strh	r2, [r3, #12]
									 ResetTimer();
 8001ef4:	f7ff ff00 	bl	8001cf8 <ResetTimer>
 8001ef8:	e746      	b.n	8001d88 <vDATATask+0x78>
      input_regs[reg_addr] = data;
 8001efa:	4b2a      	ldr	r3, [pc, #168]	; (8001fa4 <vDATATask+0x294>)
 8001efc:	2202      	movs	r2, #2
 8001efe:	819a      	strh	r2, [r3, #12]
					    		 ResetTimer();
 8001f00:	f7ff fefa 	bl	8001cf8 <ResetTimer>
 8001f04:	e7e8      	b.n	8001ed8 <vDATATask+0x1c8>
								vSetState(FAN_SPEED_MAX, VALVE_ON);
 8001f06:	2101      	movs	r1, #1
 8001f08:	2003      	movs	r0, #3
 8001f0a:	f7ff fe47 	bl	8001b9c <vSetState>
 8001f0e:	e73b      	b.n	8001d88 <vDATATask+0x78>
			connection = 1;
 8001f10:	4b28      	ldr	r3, [pc, #160]	; (8001fb4 <vDATATask+0x2a4>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	701a      	strb	r2, [r3, #0]
		usRes = system_regs[reg_addr];
 8001f16:	4b24      	ldr	r3, [pc, #144]	; (8001fa8 <vDATATask+0x298>)
 8001f18:	881b      	ldrh	r3, [r3, #0]
					    if ((usGetRegInput(TYPE) == HW) && ( usGetReg(MODE) == DEV_AUTO))
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d00e      	beq.n	8001f3c <vDATATask+0x22c>
					    if  ( usGetReg(MODE) == DEV_MANUAL)
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	f47f af32 	bne.w	8001d88 <vDATATask+0x78>
		usRes = system_regs[reg_addr];
 8001f24:	4b20      	ldr	r3, [pc, #128]	; (8001fa8 <vDATATask+0x298>)
					    	if (usGetReg(AIR_TEMP) > ( usGetReg(WORK_TEMP) + VALVE_OFF_TEMP_DELTA))
 8001f26:	88da      	ldrh	r2, [r3, #6]
 8001f28:	889b      	ldrh	r3, [r3, #4]
 8001f2a:	1c99      	adds	r1, r3, #2
 8001f2c:	428a      	cmp	r2, r1
 8001f2e:	dd59      	ble.n	8001fe4 <vDATATask+0x2d4>
					    		vSetState(usGetReg(FAN_SPEED_CONFIG), VALVE_OFF);
 8001f30:	2100      	movs	r1, #0
 8001f32:	4b1d      	ldr	r3, [pc, #116]	; (8001fa8 <vDATATask+0x298>)
 8001f34:	7898      	ldrb	r0, [r3, #2]
 8001f36:	f7ff fe31 	bl	8001b9c <vSetState>
					    		break;
 8001f3a:	e725      	b.n	8001d88 <vDATATask+0x78>
    usRes = input_regs[reg_addr];
 8001f3c:	4b19      	ldr	r3, [pc, #100]	; (8001fa4 <vDATATask+0x294>)
 8001f3e:	889a      	ldrh	r2, [r3, #4]
		usRes = system_regs[reg_addr];
 8001f40:	4b19      	ldr	r3, [pc, #100]	; (8001fa8 <vDATATask+0x298>)
 8001f42:	889b      	ldrh	r3, [r3, #4]
					    	if ( usGetRegInput(IN_AIR_TEMP)  < ( usGetReg(WORK_TEMP) - SPEED_3_HW_SWITCH_TEMP_DELTA  ) )
 8001f44:	1f99      	subs	r1, r3, #6
 8001f46:	428a      	cmp	r2, r1
 8001f48:	da04      	bge.n	8001f54 <vDATATask+0x244>
					    		vSetState(FAN_SPEED_MAX, VALVE_ON);
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	2003      	movs	r0, #3
 8001f4e:	f7ff fe25 	bl	8001b9c <vSetState>
					    		break;
 8001f52:	e719      	b.n	8001d88 <vDATATask+0x78>
					    	if ( usGetRegInput(IN_AIR_TEMP) < ( usGetReg(WORK_TEMP) - SPEED_2_HW_SWITCH_TEMP_DELTA))
 8001f54:	1f19      	subs	r1, r3, #4
 8001f56:	428a      	cmp	r2, r1
 8001f58:	da04      	bge.n	8001f64 <vDATATask+0x254>
					    		vSetState(FAN_SPEED_AUTO,  VALVE_AUTO);
 8001f5a:	2102      	movs	r1, #2
 8001f5c:	2004      	movs	r0, #4
 8001f5e:	f7ff fe1d 	bl	8001b9c <vSetState>
					    		break;
 8001f62:	e711      	b.n	8001d88 <vDATATask+0x78>
					    	if ( usGetRegInput(IN_AIR_TEMP) == ( usGetReg(WORK_TEMP) - SPEED_2_HW_SWITCH_TEMP_DELTA))
 8001f64:	428a      	cmp	r2, r1
 8001f66:	d007      	beq.n	8001f78 <vDATATask+0x268>
					    	if (usGetRegInput(IN_AIR_TEMP) < ( usGetReg(WORK_TEMP) - SPEED_1_HW_SWITCH_TEMP_DELTA))
 8001f68:	1e99      	subs	r1, r3, #2
 8001f6a:	428a      	cmp	r2, r1
 8001f6c:	da09      	bge.n	8001f82 <vDATATask+0x272>
					    		vSetState(FAN_SPEED_AUTO,VALVE_AUTO);
 8001f6e:	2102      	movs	r1, #2
 8001f70:	2004      	movs	r0, #4
 8001f72:	f7ff fe13 	bl	8001b9c <vSetState>
					    		break;
 8001f76:	e707      	b.n	8001d88 <vDATATask+0x78>
					    		vSetState(FAN_SPEED_MID, VALVE_AUTO);
 8001f78:	2102      	movs	r1, #2
 8001f7a:	4608      	mov	r0, r1
 8001f7c:	f7ff fe0e 	bl	8001b9c <vSetState>
					    	    break;
 8001f80:	e702      	b.n	8001d88 <vDATATask+0x78>
					    	if (usGetRegInput(IN_AIR_TEMP) == ( usGetReg(WORK_TEMP) - SPEED_1_HW_SWITCH_TEMP_DELTA))
 8001f82:	428a      	cmp	r2, r1
 8001f84:	d018      	beq.n	8001fb8 <vDATATask+0x2a8>
					    	if  (usGetRegInput(IN_AIR_TEMP)  <  usGetReg(WORK_TEMP))
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d91b      	bls.n	8001fc2 <vDATATask+0x2b2>
					    		vSetState(FAN_SPEED_AUTO ,VALVE_AUTO);
 8001f8a:	2102      	movs	r1, #2
 8001f8c:	2004      	movs	r0, #4
 8001f8e:	f7ff fe05 	bl	8001b9c <vSetState>
					    		break;
 8001f92:	e6f9      	b.n	8001d88 <vDATATask+0x78>
 8001f94:	40010800 	.word	0x40010800
 8001f98:	40590000 	.word	0x40590000
 8001f9c:	200016fc 	.word	0x200016fc
 8001fa0:	200016e5 	.word	0x200016e5
 8001fa4:	200016e8 	.word	0x200016e8
 8001fa8:	20001704 	.word	0x20001704
 8001fac:	200016e0 	.word	0x200016e0
 8001fb0:	2000170e 	.word	0x2000170e
 8001fb4:	200016e4 	.word	0x200016e4
					    		vSetState(FAN_SPEED_MIN ,VALVE_AUTO);
 8001fb8:	2102      	movs	r1, #2
 8001fba:	2001      	movs	r0, #1
 8001fbc:	f7ff fdee 	bl	8001b9c <vSetState>
					    		break;
 8001fc0:	e6e2      	b.n	8001d88 <vDATATask+0x78>
					    	if (usGetRegInput(IN_AIR_TEMP) ==  usGetReg(WORK_TEMP) )
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d009      	beq.n	8001fda <vDATATask+0x2ca>
					    	if (usGetRegInput(IN_AIR_TEMP)  < ( usGetReg(WORK_TEMP) + FAN_OFF_HW_TEMP_DELTA))
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	429a      	cmp	r2, r3
					    		vSetState(FAN_SPEED_AUTO ,VALVE_OFF);
 8001fca:	f04f 0100 	mov.w	r1, #0
 8001fce:	bfd4      	ite	le
 8001fd0:	2004      	movle	r0, #4
					    		vSetState(FAN_SPEED_OFF,VALVE_OFF);
 8001fd2:	4608      	movgt	r0, r1
 8001fd4:	f7ff fde2 	bl	8001b9c <vSetState>
					    		break;
 8001fd8:	e6d6      	b.n	8001d88 <vDATATask+0x78>
					    		vSetState(FAN_SPEED_AUTO ,VALVE_OFF);
 8001fda:	2100      	movs	r1, #0
 8001fdc:	2004      	movs	r0, #4
 8001fde:	f7ff fddd 	bl	8001b9c <vSetState>
					    		break;
 8001fe2:	e6d1      	b.n	8001d88 <vDATATask+0x78>
					    	if (usGetReg(AIR_TEMP) < (usGetReg(WORK_TEMP) - VALVE_ON_TEMP_DELTA ))
 8001fe4:	3b02      	subs	r3, #2
 8001fe6:	429a      	cmp	r2, r3
					    		vSetState(usGetReg(FAN_SPEED_CONFIG), VALVE_ON);
 8001fe8:	bfb4      	ite	lt
 8001fea:	2101      	movlt	r1, #1
					    	vSetState(usGetReg(FAN_SPEED_CONFIG), VALVE_AUTO);
 8001fec:	2102      	movge	r1, #2
 8001fee:	4b46      	ldr	r3, [pc, #280]	; (8002108 <vDATATask+0x3f8>)
 8001ff0:	7898      	ldrb	r0, [r3, #2]
 8001ff2:	f7ff fdd3 	bl	8001b9c <vSetState>
					    	break;
 8001ff6:	e6c7      	b.n	8001d88 <vDATATask+0x78>
					    	}
					    	if (usGetReg(AIR_TEMP) == ( usGetReg(WORK_TEMP) - VALVE_ON_TEMP_DELTA))
 8001ff8:	428a      	cmp	r2, r1
 8001ffa:	d006      	beq.n	800200a <vDATATask+0x2fa>
					    	{
					    		vSetState( FAN_SPEED_MIN, VALVE_AUTO);
					    		break;
					    	}
					    	if (usGetReg(AIR_TEMP) <  usGetReg(WORK_TEMP))
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d909      	bls.n	8002014 <vDATATask+0x304>
					    	{
					    		vSetState( FAN_SPEED_AUTO ,VALVE_AUTO);
 8002000:	2102      	movs	r1, #2
 8002002:	2004      	movs	r0, #4
 8002004:	f7ff fdca 	bl	8001b9c <vSetState>
					    		break;
 8002008:	e6be      	b.n	8001d88 <vDATATask+0x78>
					    		vSetState( FAN_SPEED_MIN, VALVE_AUTO);
 800200a:	2102      	movs	r1, #2
 800200c:	2001      	movs	r0, #1
 800200e:	f7ff fdc5 	bl	8001b9c <vSetState>
					    		break;
 8002012:	e6b9      	b.n	8001d88 <vDATATask+0x78>
					    	}
					    	if (usGetReg(AIR_TEMP) ==  usGetReg(WORK_TEMP))
 8002014:	4293      	cmp	r3, r2
 8002016:	d009      	beq.n	800202c <vDATATask+0x31c>
					    	{
					    		vSetState( FAN_SPEED_AUTO ,VALVE_OFF );
					    		break;
					    	}
					    	if (usGetReg(AIR_TEMP) < (usGetReg(WORK_TEMP) + SPEED_SWITCH_AW_TEMP_DELTA))
 8002018:	3301      	adds	r3, #1
 800201a:	429a      	cmp	r2, r3
					    	{
					    		vSetState( FAN_SPEED_AUTO ,VALVE_OFF );
 800201c:	f04f 0100 	mov.w	r1, #0
 8002020:	bfd4      	ite	le
 8002022:	2004      	movle	r0, #4
					    		break;
					        }
					    	if (usGetReg(AIR_TEMP) >= (usGetReg(WORK_TEMP) + SPEED_SWITCH_AW_TEMP_DELTA))
					    	{
					    		vSetState(FAN_SPEED_OFF,VALVE_OFF );
 8002024:	4608      	movgt	r0, r1
 8002026:	f7ff fdb9 	bl	8001b9c <vSetState>
					    		break;
 800202a:	e6ad      	b.n	8001d88 <vDATATask+0x78>
					    		vSetState( FAN_SPEED_AUTO ,VALVE_OFF );
 800202c:	2100      	movs	r1, #0
 800202e:	2004      	movs	r0, #4
 8002030:	f7ff fdb4 	bl	8001b9c <vSetState>
					    		break;
 8002034:	e6a8      	b.n	8001d88 <vDATATask+0x78>
			 sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002036:	2360      	movs	r3, #96	; 0x60
 8002038:	9301      	str	r3, [sp, #4]
			  sConfigOC.Pulse = (pwm/100.0)*860;
 800203a:	f7fe f9db 	bl	80003f4 <__aeabi_i2d>
 800203e:	4632      	mov	r2, r6
 8002040:	463b      	mov	r3, r7
 8002042:	f7fe fb6b 	bl	800071c <__aeabi_ddiv>
 8002046:	2200      	movs	r2, #0
 8002048:	4b30      	ldr	r3, [pc, #192]	; (800210c <vDATATask+0x3fc>)
 800204a:	f7fe fa3d 	bl	80004c8 <__aeabi_dmul>
 800204e:	f7fe fc4d 	bl	80008ec <__aeabi_d2uiz>
 8002052:	9002      	str	r0, [sp, #8]
			  HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_1);
 8002054:	4d2e      	ldr	r5, [pc, #184]	; (8002110 <vDATATask+0x400>)
 8002056:	2100      	movs	r1, #0
 8002058:	4628      	mov	r0, r5
 800205a:	f001 fffb 	bl	8004054 <HAL_TIM_PWM_Stop>
			  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 800205e:	2200      	movs	r2, #0
 8002060:	a901      	add	r1, sp, #4
 8002062:	4628      	mov	r0, r5
 8002064:	f001 fe54 	bl	8003d10 <HAL_TIM_PWM_ConfigChannel>
			  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8002068:	2100      	movs	r1, #0
 800206a:	4628      	mov	r0, r5
 800206c:	f001 ff8e 	bl	8003f8c <HAL_TIM_PWM_Start>
 8002070:	e69b      	b.n	8001daa <vDATATask+0x9a>
    	 timer =0;
 8002072:	4b28      	ldr	r3, [pc, #160]	; (8002114 <vDATATask+0x404>)
 8002074:	2200      	movs	r2, #0
 8002076:	801a      	strh	r2, [r3, #0]
    	 HAL_GPIO_TogglePin( LED_R_GPIO_Port, LED_R_Pin);
 8002078:	2120      	movs	r1, #32
 800207a:	4648      	mov	r0, r9
 800207c:	f001 f81c 	bl	80030b8 <HAL_GPIO_TogglePin>
 8002080:	e01a      	b.n	80020b8 <vDATATask+0x3a8>
		 vUPDATECoils(1);
 8002082:	2001      	movs	r0, #1
 8002084:	f003 f96a 	bl	800535c <vUPDATECoils>
 8002088:	e651      	b.n	8001d2e <vDATATask+0x1e>
	     		 if (usGetRegInput(TYPE) != AW)
 800208a:	2b01      	cmp	r3, #1
 800208c:	d003      	beq.n	8002096 <vDATATask+0x386>
	     		   K1 = 1;
 800208e:	4621      	mov	r1, r4
		 K3 = 0;
 8002090:	2400      	movs	r4, #0
		 K2 = 0;
 8002092:	46a2      	mov	sl, r4
 8002094:	e022      	b.n	80020dc <vDATATask+0x3cc>
		 K1 = 0;
 8002096:	2100      	movs	r1, #0
		 K3 = 0;
 8002098:	468a      	mov	sl, r1
 800209a:	e01f      	b.n	80020dc <vDATATask+0x3cc>
		 K1 = 0;
 800209c:	2100      	movs	r1, #0
		 K3 = 0;
 800209e:	468a      	mov	sl, r1
 80020a0:	e01c      	b.n	80020dc <vDATATask+0x3cc>
 80020a2:	4b1d      	ldr	r3, [pc, #116]	; (8002118 <vDATATask+0x408>)
 80020a4:	2232      	movs	r2, #50	; 0x32
 80020a6:	801a      	strh	r2, [r3, #0]
       timer++;
 80020a8:	4b1a      	ldr	r3, [pc, #104]	; (8002114 <vDATATask+0x404>)
 80020aa:	881b      	ldrh	r3, [r3, #0]
 80020ac:	3301      	adds	r3, #1
 80020ae:	b29b      	uxth	r3, r3
       if (timer>=timeout)
 80020b0:	2b31      	cmp	r3, #49	; 0x31
 80020b2:	d8de      	bhi.n	8002072 <vDATATask+0x362>
       timer++;
 80020b4:	4a17      	ldr	r2, [pc, #92]	; (8002114 <vDATATask+0x404>)
 80020b6:	8013      	strh	r3, [r2, #0]
    usRes = input_regs[reg_addr];
 80020b8:	4b18      	ldr	r3, [pc, #96]	; (800211c <vDATATask+0x40c>)
 80020ba:	881b      	ldrh	r3, [r3, #0]
	 if (usGetRegInput(TYPE) == NONE)
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0e0      	beq.n	8002082 <vDATATask+0x372>
    usRes = input_regs[reg_addr];
 80020c0:	4a16      	ldr	r2, [pc, #88]	; (800211c <vDATATask+0x40c>)
 80020c2:	8951      	ldrh	r1, [r2, #10]
		 switch(usGetRegInput(FAN_SPEED))
 80020c4:	2902      	cmp	r1, #2
 80020c6:	d0e9      	beq.n	800209c <vDATATask+0x38c>
 80020c8:	2903      	cmp	r1, #3
 80020ca:	d0de      	beq.n	800208a <vDATATask+0x37a>
		 K3 = 0;
 80020cc:	2901      	cmp	r1, #1
 80020ce:	bf14      	ite	ne
 80020d0:	f04f 0a00 	movne.w	sl, #0
 80020d4:	f04f 0a01 	moveq.w	sl, #1
 80020d8:	2100      	movs	r1, #0
 80020da:	460c      	mov	r4, r1
		 vSetOutState( OUT_1, K1 );
 80020dc:	2000      	movs	r0, #0
 80020de:	f7ff faa5 	bl	800162c <vSetOutState>
	     vSetOutState( OUT_2, K2 );
 80020e2:	4621      	mov	r1, r4
 80020e4:	2001      	movs	r0, #1
 80020e6:	f7ff faa1 	bl	800162c <vSetOutState>
	     vSetOutState( OUT_3, K3 );
 80020ea:	4651      	mov	r1, sl
 80020ec:	2002      	movs	r0, #2
 80020ee:	f7ff fa9d 	bl	800162c <vSetOutState>
	     vSetOutState( OUT_4, usGetRegInput(WATER_VALVE) );
 80020f2:	4b0a      	ldr	r3, [pc, #40]	; (800211c <vDATATask+0x40c>)
 80020f4:	7a19      	ldrb	r1, [r3, #8]
 80020f6:	2003      	movs	r0, #3
 80020f8:	f7ff fa98 	bl	800162c <vSetOutState>
 80020fc:	e617      	b.n	8001d2e <vDATATask+0x1e>
 80020fe:	4b06      	ldr	r3, [pc, #24]	; (8002118 <vDATATask+0x408>)
 8002100:	2232      	movs	r2, #50	; 0x32
 8002102:	801a      	strh	r2, [r3, #0]
     if (timeout)
 8002104:	e7d0      	b.n	80020a8 <vDATATask+0x398>
 8002106:	bf00      	nop
 8002108:	20001704 	.word	0x20001704
 800210c:	408ae000 	.word	0x408ae000
 8002110:	2000159c 	.word	0x2000159c
 8002114:	20001710 	.word	0x20001710
 8002118:	2000170e 	.word	0x2000170e
 800211c:	200016e8 	.word	0x200016e8

08002120 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002120:	b500      	push	{lr}
 8002122:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002124:	4b11      	ldr	r3, [pc, #68]	; (800216c <HAL_MspInit+0x4c>)
 8002126:	699a      	ldr	r2, [r3, #24]
 8002128:	f042 0201 	orr.w	r2, r2, #1
 800212c:	619a      	str	r2, [r3, #24]
 800212e:	699a      	ldr	r2, [r3, #24]
 8002130:	f002 0201 	and.w	r2, r2, #1
 8002134:	9200      	str	r2, [sp, #0]
 8002136:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002138:	69da      	ldr	r2, [r3, #28]
 800213a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800213e:	61da      	str	r2, [r3, #28]
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002146:	9301      	str	r3, [sp, #4]
 8002148:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800214a:	2200      	movs	r2, #0
 800214c:	210f      	movs	r1, #15
 800214e:	f06f 0001 	mvn.w	r0, #1
 8002152:	f000 fc93 	bl	8002a7c <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002156:	4a06      	ldr	r2, [pc, #24]	; (8002170 <HAL_MspInit+0x50>)
 8002158:	6853      	ldr	r3, [r2, #4]
 800215a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800215e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002162:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002164:	b003      	add	sp, #12
 8002166:	f85d fb04 	ldr.w	pc, [sp], #4
 800216a:	bf00      	nop
 800216c:	40021000 	.word	0x40021000
 8002170:	40010000 	.word	0x40010000

08002174 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002174:	b510      	push	{r4, lr}
 8002176:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002178:	2300      	movs	r3, #0
 800217a:	9302      	str	r3, [sp, #8]
 800217c:	9303      	str	r3, [sp, #12]
 800217e:	9304      	str	r3, [sp, #16]
 8002180:	9305      	str	r3, [sp, #20]
  if(hadc->Instance==ADC1)
 8002182:	6802      	ldr	r2, [r0, #0]
 8002184:	4b1d      	ldr	r3, [pc, #116]	; (80021fc <HAL_ADC_MspInit+0x88>)
 8002186:	429a      	cmp	r2, r3
 8002188:	d001      	beq.n	800218e <HAL_ADC_MspInit+0x1a>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800218a:	b006      	add	sp, #24
 800218c:	bd10      	pop	{r4, pc}
 800218e:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002190:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8002194:	699a      	ldr	r2, [r3, #24]
 8002196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800219a:	619a      	str	r2, [r3, #24]
 800219c:	699a      	ldr	r2, [r3, #24]
 800219e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80021a2:	9200      	str	r2, [sp, #0]
 80021a4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a6:	699a      	ldr	r2, [r3, #24]
 80021a8:	f042 0204 	orr.w	r2, r2, #4
 80021ac:	619a      	str	r2, [r3, #24]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	9301      	str	r3, [sp, #4]
 80021b6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80021b8:	2307      	movs	r3, #7
 80021ba:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021bc:	2303      	movs	r3, #3
 80021be:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c0:	a902      	add	r1, sp, #8
 80021c2:	480f      	ldr	r0, [pc, #60]	; (8002200 <HAL_ADC_MspInit+0x8c>)
 80021c4:	f000 fe32 	bl	8002e2c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 80021c8:	480e      	ldr	r0, [pc, #56]	; (8002204 <HAL_ADC_MspInit+0x90>)
 80021ca:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <HAL_ADC_MspInit+0x94>)
 80021cc:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021ce:	2300      	movs	r3, #0
 80021d0:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80021d2:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80021d4:	2280      	movs	r2, #128	; 0x80
 80021d6:	60c2      	str	r2, [r0, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021dc:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021e2:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80021e4:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80021e6:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80021e8:	f000 fc8c 	bl	8002b04 <HAL_DMA_Init>
 80021ec:	b918      	cbnz	r0, 80021f6 <HAL_ADC_MspInit+0x82>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80021ee:	4b05      	ldr	r3, [pc, #20]	; (8002204 <HAL_ADC_MspInit+0x90>)
 80021f0:	6223      	str	r3, [r4, #32]
 80021f2:	625c      	str	r4, [r3, #36]	; 0x24
}
 80021f4:	e7c9      	b.n	800218a <HAL_ADC_MspInit+0x16>
      Error_Handler();
 80021f6:	f7ff fccf 	bl	8001b98 <Error_Handler>
 80021fa:	e7f8      	b.n	80021ee <HAL_ADC_MspInit+0x7a>
 80021fc:	40012400 	.word	0x40012400
 8002200:	40010800 	.word	0x40010800
 8002204:	20001510 	.word	0x20001510
 8002208:	40020008 	.word	0x40020008

0800220c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800220c:	b500      	push	{lr}
 800220e:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM2)
 8002210:	6803      	ldr	r3, [r0, #0]
 8002212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002216:	d008      	beq.n	800222a <HAL_TIM_Base_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8002218:	4a1d      	ldr	r2, [pc, #116]	; (8002290 <HAL_TIM_Base_MspInit+0x84>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d019      	beq.n	8002252 <HAL_TIM_Base_MspInit+0x46>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 800221e:	4a1d      	ldr	r2, [pc, #116]	; (8002294 <HAL_TIM_Base_MspInit+0x88>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d021      	beq.n	8002268 <HAL_TIM_Base_MspInit+0x5c>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002224:	b005      	add	sp, #20
 8002226:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 800222a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800222e:	69da      	ldr	r2, [r3, #28]
 8002230:	f042 0201 	orr.w	r2, r2, #1
 8002234:	61da      	str	r2, [r3, #28]
 8002236:	69db      	ldr	r3, [r3, #28]
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	9301      	str	r3, [sp, #4]
 800223e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002240:	2200      	movs	r2, #0
 8002242:	2105      	movs	r1, #5
 8002244:	201c      	movs	r0, #28
 8002246:	f000 fc19 	bl	8002a7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800224a:	201c      	movs	r0, #28
 800224c:	f000 fc4c 	bl	8002ae8 <HAL_NVIC_EnableIRQ>
 8002250:	e7e8      	b.n	8002224 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002252:	4b11      	ldr	r3, [pc, #68]	; (8002298 <HAL_TIM_Base_MspInit+0x8c>)
 8002254:	69da      	ldr	r2, [r3, #28]
 8002256:	f042 0202 	orr.w	r2, r2, #2
 800225a:	61da      	str	r2, [r3, #28]
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	9302      	str	r3, [sp, #8]
 8002264:	9b02      	ldr	r3, [sp, #8]
 8002266:	e7dd      	b.n	8002224 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002268:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <HAL_TIM_Base_MspInit+0x8c>)
 800226a:	69da      	ldr	r2, [r3, #28]
 800226c:	f042 0204 	orr.w	r2, r2, #4
 8002270:	61da      	str	r2, [r3, #28]
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	9303      	str	r3, [sp, #12]
 800227a:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800227c:	2200      	movs	r2, #0
 800227e:	2105      	movs	r1, #5
 8002280:	201e      	movs	r0, #30
 8002282:	f000 fbfb 	bl	8002a7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002286:	201e      	movs	r0, #30
 8002288:	f000 fc2e 	bl	8002ae8 <HAL_NVIC_EnableIRQ>
}
 800228c:	e7ca      	b.n	8002224 <HAL_TIM_Base_MspInit+0x18>
 800228e:	bf00      	nop
 8002290:	40000400 	.word	0x40000400
 8002294:	40000800 	.word	0x40000800
 8002298:	40021000 	.word	0x40021000

0800229c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800229c:	b500      	push	{lr}
 800229e:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a0:	2300      	movs	r3, #0
 80022a2:	9302      	str	r3, [sp, #8]
 80022a4:	9303      	str	r3, [sp, #12]
 80022a6:	9304      	str	r3, [sp, #16]
 80022a8:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM3)
 80022aa:	6802      	ldr	r2, [r0, #0]
 80022ac:	4b0d      	ldr	r3, [pc, #52]	; (80022e4 <HAL_TIM_MspPostInit+0x48>)
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d002      	beq.n	80022b8 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80022b2:	b007      	add	sp, #28
 80022b4:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b8:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 80022bc:	699a      	ldr	r2, [r3, #24]
 80022be:	f042 0204 	orr.w	r2, r2, #4
 80022c2:	619a      	str	r2, [r3, #24]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	f003 0304 	and.w	r3, r3, #4
 80022ca:	9301      	str	r3, [sp, #4]
 80022cc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022ce:	23c0      	movs	r3, #192	; 0xc0
 80022d0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d2:	2302      	movs	r3, #2
 80022d4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022d6:	2303      	movs	r3, #3
 80022d8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022da:	a902      	add	r1, sp, #8
 80022dc:	4802      	ldr	r0, [pc, #8]	; (80022e8 <HAL_TIM_MspPostInit+0x4c>)
 80022de:	f000 fda5 	bl	8002e2c <HAL_GPIO_Init>
}
 80022e2:	e7e6      	b.n	80022b2 <HAL_TIM_MspPostInit+0x16>
 80022e4:	40000400 	.word	0x40000400
 80022e8:	40010800 	.word	0x40010800

080022ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022ec:	b530      	push	{r4, r5, lr}
 80022ee:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f0:	2300      	movs	r3, #0
 80022f2:	9302      	str	r3, [sp, #8]
 80022f4:	9303      	str	r3, [sp, #12]
 80022f6:	9304      	str	r3, [sp, #16]
 80022f8:	9305      	str	r3, [sp, #20]
  if(huart->Instance==USART1)
 80022fa:	6802      	ldr	r2, [r0, #0]
 80022fc:	4b1b      	ldr	r3, [pc, #108]	; (800236c <HAL_UART_MspInit+0x80>)
 80022fe:	429a      	cmp	r2, r3
 8002300:	d001      	beq.n	8002306 <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002302:	b007      	add	sp, #28
 8002304:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8002306:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800230a:	699a      	ldr	r2, [r3, #24]
 800230c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002310:	619a      	str	r2, [r3, #24]
 8002312:	699a      	ldr	r2, [r3, #24]
 8002314:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002318:	9200      	str	r2, [sp, #0]
 800231a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800231c:	699a      	ldr	r2, [r3, #24]
 800231e:	f042 0204 	orr.w	r2, r2, #4
 8002322:	619a      	str	r2, [r3, #24]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	f003 0304 	and.w	r3, r3, #4
 800232a:	9301      	str	r3, [sp, #4]
 800232c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800232e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002332:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002334:	2302      	movs	r3, #2
 8002336:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002338:	2303      	movs	r3, #3
 800233a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800233c:	4d0c      	ldr	r5, [pc, #48]	; (8002370 <HAL_UART_MspInit+0x84>)
 800233e:	a902      	add	r1, sp, #8
 8002340:	4628      	mov	r0, r5
 8002342:	f000 fd73 	bl	8002e2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800234a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800234c:	2400      	movs	r4, #0
 800234e:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002350:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002352:	a902      	add	r1, sp, #8
 8002354:	4628      	mov	r0, r5
 8002356:	f000 fd69 	bl	8002e2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800235a:	4622      	mov	r2, r4
 800235c:	2105      	movs	r1, #5
 800235e:	2025      	movs	r0, #37	; 0x25
 8002360:	f000 fb8c 	bl	8002a7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002364:	2025      	movs	r0, #37	; 0x25
 8002366:	f000 fbbf 	bl	8002ae8 <HAL_NVIC_EnableIRQ>
}
 800236a:	e7ca      	b.n	8002302 <HAL_UART_MspInit+0x16>
 800236c:	40013800 	.word	0x40013800
 8002370:	40010800 	.word	0x40010800

08002374 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002374:	b530      	push	{r4, r5, lr}
 8002376:	b089      	sub	sp, #36	; 0x24
 8002378:	4604      	mov	r4, r0
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800237a:	4b1e      	ldr	r3, [pc, #120]	; (80023f4 <HAL_InitTick+0x80>)
 800237c:	699a      	ldr	r2, [r3, #24]
 800237e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002382:	619a      	str	r2, [r3, #24]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800238a:	9301      	str	r3, [sp, #4]
 800238c:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800238e:	a902      	add	r1, sp, #8
 8002390:	a803      	add	r0, sp, #12
 8002392:	f001 f9b3 	bl	80036fc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002396:	f001 f9a1 	bl	80036dc <HAL_RCC_GetPCLK2Freq>
 800239a:	4603      	mov	r3, r0

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800239c:	4816      	ldr	r0, [pc, #88]	; (80023f8 <HAL_InitTick+0x84>)
 800239e:	4a17      	ldr	r2, [pc, #92]	; (80023fc <HAL_InitTick+0x88>)
 80023a0:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80023a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023a6:	60c2      	str	r2, [r0, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80023a8:	4a15      	ldr	r2, [pc, #84]	; (8002400 <HAL_InitTick+0x8c>)
 80023aa:	fba2 2303 	umull	r2, r3, r2, r3
 80023ae:	0c9b      	lsrs	r3, r3, #18
 80023b0:	3b01      	subs	r3, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 80023b2:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 80023b4:	2300      	movs	r3, #0
 80023b6:	6103      	str	r3, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023b8:	6083      	str	r3, [r0, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ba:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80023bc:	f001 fc22 	bl	8003c04 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80023c0:	4605      	mov	r5, r0
 80023c2:	b110      	cbz	r0, 80023ca <HAL_InitTick+0x56>
    }
  }

 /* Return function status */
  return status;
}
 80023c4:	4628      	mov	r0, r5
 80023c6:	b009      	add	sp, #36	; 0x24
 80023c8:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim1);
 80023ca:	480b      	ldr	r0, [pc, #44]	; (80023f8 <HAL_InitTick+0x84>)
 80023cc:	f001 fabc 	bl	8003948 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80023d0:	4605      	mov	r5, r0
 80023d2:	2800      	cmp	r0, #0
 80023d4:	d1f6      	bne.n	80023c4 <HAL_InitTick+0x50>
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80023d6:	2019      	movs	r0, #25
 80023d8:	f000 fb86 	bl	8002ae8 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023dc:	2c0f      	cmp	r4, #15
 80023de:	d901      	bls.n	80023e4 <HAL_InitTick+0x70>
        status = HAL_ERROR;
 80023e0:	2501      	movs	r5, #1
 80023e2:	e7ef      	b.n	80023c4 <HAL_InitTick+0x50>
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80023e4:	2200      	movs	r2, #0
 80023e6:	4621      	mov	r1, r4
 80023e8:	2019      	movs	r0, #25
 80023ea:	f000 fb47 	bl	8002a7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023ee:	4b05      	ldr	r3, [pc, #20]	; (8002404 <HAL_InitTick+0x90>)
 80023f0:	601c      	str	r4, [r3, #0]
 80023f2:	e7e7      	b.n	80023c4 <HAL_InitTick+0x50>
 80023f4:	40021000 	.word	0x40021000
 80023f8:	20001718 	.word	0x20001718
 80023fc:	40012c00 	.word	0x40012c00
 8002400:	431bde83 	.word	0x431bde83
 8002404:	20000008 	.word	0x20000008

08002408 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002408:	e7fe      	b.n	8002408 <NMI_Handler>

0800240a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800240a:	e7fe      	b.n	800240a <HardFault_Handler>

0800240c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800240c:	e7fe      	b.n	800240c <MemManage_Handler>

0800240e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800240e:	e7fe      	b.n	800240e <BusFault_Handler>

08002410 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002410:	e7fe      	b.n	8002410 <UsageFault_Handler>

08002412 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002412:	4770      	bx	lr

08002414 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002414:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	vADCReady();
 8002416:	f7fe fecf 	bl	80011b8 <vADCReady>
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800241a:	4802      	ldr	r0, [pc, #8]	; (8002424 <DMA1_Channel1_IRQHandler+0x10>)
 800241c:	f000 fc66 	bl	8002cec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002420:	bd08      	pop	{r3, pc}
 8002422:	bf00      	nop
 8002424:	20001510 	.word	0x20001510

08002428 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002428:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800242a:	4802      	ldr	r0, [pc, #8]	; (8002434 <TIM1_UP_IRQHandler+0xc>)
 800242c:	f001 fade 	bl	80039ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002430:	bd08      	pop	{r3, pc}
 8002432:	bf00      	nop
 8002434:	20001718 	.word	0x20001718

08002438 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002438:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800243a:	4802      	ldr	r0, [pc, #8]	; (8002444 <TIM2_IRQHandler+0xc>)
 800243c:	f001 fad6 	bl	80039ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002440:	bd08      	pop	{r3, pc}
 8002442:	bf00      	nop
 8002444:	20001554 	.word	0x20001554

08002448 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002448:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */
  vTimer1sInc();
 800244a:	f7ff fc31 	bl	8001cb0 <vTimer1sInc>
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800244e:	4802      	ldr	r0, [pc, #8]	; (8002458 <TIM4_IRQHandler+0x10>)
 8002450:	f001 facc 	bl	80039ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002454:	bd08      	pop	{r3, pc}
 8002456:	bf00      	nop
 8002458:	200015e4 	.word	0x200015e4

0800245c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800245c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800245e:	4802      	ldr	r0, [pc, #8]	; (8002468 <USART1_IRQHandler+0xc>)
 8002460:	f002 f814 	bl	800448c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002464:	bd08      	pop	{r3, pc}
 8002466:	bf00      	nop
 8002468:	2000162c 	.word	0x2000162c

0800246c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800246c:	4770      	bx	lr
	...

08002470 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002470:	f7ff fffc 	bl	800246c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002474:	480b      	ldr	r0, [pc, #44]	; (80024a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002476:	490c      	ldr	r1, [pc, #48]	; (80024a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002478:	4a0c      	ldr	r2, [pc, #48]	; (80024ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800247a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800247c:	e002      	b.n	8002484 <LoopCopyDataInit>

0800247e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800247e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002482:	3304      	adds	r3, #4

08002484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002488:	d3f9      	bcc.n	800247e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800248a:	4a09      	ldr	r2, [pc, #36]	; (80024b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800248c:	4c09      	ldr	r4, [pc, #36]	; (80024b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800248e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002490:	e001      	b.n	8002496 <LoopFillZerobss>

08002492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002494:	3204      	adds	r2, #4

08002496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002498:	d3fb      	bcc.n	8002492 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800249a:	f005 f871 	bl	8007580 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800249e:	f7ff f94b 	bl	8001738 <main>
  bx lr
 80024a2:	4770      	bx	lr
  ldr r0, =_sdata
 80024a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024a8:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 80024ac:	08007c38 	.word	0x08007c38
  ldr r2, =_sbss
 80024b0:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 80024b4:	200032e0 	.word	0x200032e0

080024b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024b8:	e7fe      	b.n	80024b8 <ADC1_2_IRQHandler>
	...

080024bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024bc:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024be:	4a07      	ldr	r2, [pc, #28]	; (80024dc <HAL_Init+0x20>)
 80024c0:	6813      	ldr	r3, [r2, #0]
 80024c2:	f043 0310 	orr.w	r3, r3, #16
 80024c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024c8:	2003      	movs	r0, #3
 80024ca:	f000 fac5 	bl	8002a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024ce:	200f      	movs	r0, #15
 80024d0:	f7ff ff50 	bl	8002374 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024d4:	f7ff fe24 	bl	8002120 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80024d8:	2000      	movs	r0, #0
 80024da:	bd08      	pop	{r3, pc}
 80024dc:	40022000 	.word	0x40022000

080024e0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80024e0:	4a03      	ldr	r2, [pc, #12]	; (80024f0 <HAL_IncTick+0x10>)
 80024e2:	6811      	ldr	r1, [r2, #0]
 80024e4:	4b03      	ldr	r3, [pc, #12]	; (80024f4 <HAL_IncTick+0x14>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	440b      	add	r3, r1
 80024ea:	6013      	str	r3, [r2, #0]
}
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	20001760 	.word	0x20001760
 80024f4:	20000004 	.word	0x20000004

080024f8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80024f8:	4b01      	ldr	r3, [pc, #4]	; (8002500 <HAL_GetTick+0x8>)
 80024fa:	6818      	ldr	r0, [r3, #0]
}
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	20001760 	.word	0x20001760

08002504 <HAL_ADC_ConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002504:	4770      	bx	lr

08002506 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002506:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002508:	6a43      	ldr	r3, [r0, #36]	; 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800250a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800250c:	f012 0f50 	tst.w	r2, #80	; 0x50
 8002510:	d11e      	bne.n	8002550 <ADC_DMAConvCplt+0x4a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002512:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002514:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002518:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	6892      	ldr	r2, [r2, #8]
 800251e:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8002522:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8002526:	d003      	beq.n	8002530 <ADC_DMAConvCplt+0x2a>
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff ffeb 	bl	8002504 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800252e:	bd08      	pop	{r3, pc}
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002530:	7b1a      	ldrb	r2, [r3, #12]
 8002532:	2a00      	cmp	r2, #0
 8002534:	d1f8      	bne.n	8002528 <ADC_DMAConvCplt+0x22>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002536:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002538:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800253c:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800253e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002540:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8002544:	d1f0      	bne.n	8002528 <ADC_DMAConvCplt+0x22>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002546:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002548:	f042 0201 	orr.w	r2, r2, #1
 800254c:	629a      	str	r2, [r3, #40]	; 0x28
 800254e:	e7eb      	b.n	8002528 <ADC_DMAConvCplt+0x22>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002554:	4798      	blx	r3
}
 8002556:	e7ea      	b.n	800252e <ADC_DMAConvCplt+0x28>

08002558 <HAL_ADC_ConvHalfCpltCallback>:
}
 8002558:	4770      	bx	lr

0800255a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800255a:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800255c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800255e:	f7ff fffb 	bl	8002558 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002562:	bd08      	pop	{r3, pc}

08002564 <HAL_ADC_ErrorCallback>:
}
 8002564:	4770      	bx	lr

08002566 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002566:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002568:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800256a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800256c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002570:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002572:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002574:	f043 0304 	orr.w	r3, r3, #4
 8002578:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800257a:	f7ff fff3 	bl	8002564 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800257e:	bd08      	pop	{r3, pc}

08002580 <HAL_ADC_ConfigChannel>:
{ 
 8002580:	b430      	push	{r4, r5}
 8002582:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8002584:	2200      	movs	r2, #0
 8002586:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8002588:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 800258c:	2a01      	cmp	r2, #1
 800258e:	f000 8095 	beq.w	80026bc <HAL_ADC_ConfigChannel+0x13c>
 8002592:	4603      	mov	r3, r0
 8002594:	2201      	movs	r2, #1
 8002596:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800259a:	684a      	ldr	r2, [r1, #4]
 800259c:	2a06      	cmp	r2, #6
 800259e:	d82d      	bhi.n	80025fc <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80025a0:	6804      	ldr	r4, [r0, #0]
 80025a2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80025a4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80025a8:	3a05      	subs	r2, #5
 80025aa:	f04f 0c1f 	mov.w	ip, #31
 80025ae:	fa0c fc02 	lsl.w	ip, ip, r2
 80025b2:	ea20 000c 	bic.w	r0, r0, ip
 80025b6:	680d      	ldr	r5, [r1, #0]
 80025b8:	fa05 f202 	lsl.w	r2, r5, r2
 80025bc:	4302      	orrs	r2, r0
 80025be:	6362      	str	r2, [r4, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80025c0:	680a      	ldr	r2, [r1, #0]
 80025c2:	2a09      	cmp	r2, #9
 80025c4:	d93a      	bls.n	800263c <HAL_ADC_ConfigChannel+0xbc>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80025c6:	681c      	ldr	r4, [r3, #0]
 80025c8:	68e0      	ldr	r0, [r4, #12]
 80025ca:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80025ce:	3a1e      	subs	r2, #30
 80025d0:	f04f 0c07 	mov.w	ip, #7
 80025d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80025d8:	ea20 000c 	bic.w	r0, r0, ip
 80025dc:	688d      	ldr	r5, [r1, #8]
 80025de:	fa05 f202 	lsl.w	r2, r5, r2
 80025e2:	4302      	orrs	r2, r0
 80025e4:	60e2      	str	r2, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025e6:	680a      	ldr	r2, [r1, #0]
 80025e8:	3a10      	subs	r2, #16
 80025ea:	2a01      	cmp	r2, #1
 80025ec:	d936      	bls.n	800265c <HAL_ADC_ConfigChannel+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ee:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 80025f6:	b002      	add	sp, #8
 80025f8:	bc30      	pop	{r4, r5}
 80025fa:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 80025fc:	2a0c      	cmp	r2, #12
 80025fe:	d80e      	bhi.n	800261e <HAL_ADC_ConfigChannel+0x9e>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002600:	6805      	ldr	r5, [r0, #0]
 8002602:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002604:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002608:	3a23      	subs	r2, #35	; 0x23
 800260a:	241f      	movs	r4, #31
 800260c:	4094      	lsls	r4, r2
 800260e:	ea20 0004 	bic.w	r0, r0, r4
 8002612:	680c      	ldr	r4, [r1, #0]
 8002614:	fa04 f202 	lsl.w	r2, r4, r2
 8002618:	4302      	orrs	r2, r0
 800261a:	632a      	str	r2, [r5, #48]	; 0x30
 800261c:	e7d0      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800261e:	6805      	ldr	r5, [r0, #0]
 8002620:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8002622:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002626:	3a41      	subs	r2, #65	; 0x41
 8002628:	241f      	movs	r4, #31
 800262a:	4094      	lsls	r4, r2
 800262c:	ea20 0004 	bic.w	r0, r0, r4
 8002630:	680c      	ldr	r4, [r1, #0]
 8002632:	fa04 f202 	lsl.w	r2, r4, r2
 8002636:	4302      	orrs	r2, r0
 8002638:	62ea      	str	r2, [r5, #44]	; 0x2c
 800263a:	e7c1      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800263c:	681c      	ldr	r4, [r3, #0]
 800263e:	6920      	ldr	r0, [r4, #16]
 8002640:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002644:	f04f 0c07 	mov.w	ip, #7
 8002648:	fa0c fc02 	lsl.w	ip, ip, r2
 800264c:	ea20 000c 	bic.w	r0, r0, ip
 8002650:	688d      	ldr	r5, [r1, #8]
 8002652:	fa05 f202 	lsl.w	r2, r5, r2
 8002656:	4302      	orrs	r2, r0
 8002658:	6122      	str	r2, [r4, #16]
 800265a:	e7c4      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x66>
    if (hadc->Instance == ADC1)
 800265c:	6818      	ldr	r0, [r3, #0]
 800265e:	4a18      	ldr	r2, [pc, #96]	; (80026c0 <HAL_ADC_ConfigChannel+0x140>)
 8002660:	4290      	cmp	r0, r2
 8002662:	d005      	beq.n	8002670 <HAL_ADC_ConfigChannel+0xf0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002664:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002666:	f042 0220 	orr.w	r2, r2, #32
 800266a:	629a      	str	r2, [r3, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 800266c:	2001      	movs	r0, #1
 800266e:	e7bf      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x70>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002670:	6892      	ldr	r2, [r2, #8]
 8002672:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
 8002676:	d11d      	bne.n	80026b4 <HAL_ADC_ConfigChannel+0x134>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002678:	4811      	ldr	r0, [pc, #68]	; (80026c0 <HAL_ADC_ConfigChannel+0x140>)
 800267a:	6882      	ldr	r2, [r0, #8]
 800267c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002680:	6082      	str	r2, [r0, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002682:	680a      	ldr	r2, [r1, #0]
 8002684:	2a10      	cmp	r2, #16
 8002686:	d001      	beq.n	800268c <HAL_ADC_ConfigChannel+0x10c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002688:	2000      	movs	r0, #0
 800268a:	e7b1      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800268c:	4a0d      	ldr	r2, [pc, #52]	; (80026c4 <HAL_ADC_ConfigChannel+0x144>)
 800268e:	6812      	ldr	r2, [r2, #0]
 8002690:	490d      	ldr	r1, [pc, #52]	; (80026c8 <HAL_ADC_ConfigChannel+0x148>)
 8002692:	fba1 1202 	umull	r1, r2, r1, r2
 8002696:	0c92      	lsrs	r2, r2, #18
 8002698:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800269c:	0052      	lsls	r2, r2, #1
 800269e:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80026a0:	9a01      	ldr	r2, [sp, #4]
 80026a2:	b14a      	cbz	r2, 80026b8 <HAL_ADC_ConfigChannel+0x138>
            wait_loop_index--;
 80026a4:	9a01      	ldr	r2, [sp, #4]
 80026a6:	3a01      	subs	r2, #1
 80026a8:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80026aa:	9a01      	ldr	r2, [sp, #4]
 80026ac:	2a00      	cmp	r2, #0
 80026ae:	d1f9      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x124>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026b0:	2000      	movs	r0, #0
 80026b2:	e79d      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x70>
 80026b4:	2000      	movs	r0, #0
 80026b6:	e79b      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x70>
 80026b8:	2000      	movs	r0, #0
 80026ba:	e799      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 80026bc:	2002      	movs	r0, #2
 80026be:	e79a      	b.n	80025f6 <HAL_ADC_ConfigChannel+0x76>
 80026c0:	40012400 	.word	0x40012400
 80026c4:	20000000 	.word	0x20000000
 80026c8:	431bde83 	.word	0x431bde83

080026cc <ADC_Enable>:
{
 80026cc:	b530      	push	{r4, r5, lr}
 80026ce:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80026d4:	6803      	ldr	r3, [r0, #0]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	f012 0f01 	tst.w	r2, #1
 80026dc:	d13b      	bne.n	8002756 <ADC_Enable+0x8a>
 80026de:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	f042 0201 	orr.w	r2, r2, #1
 80026e6:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026e8:	4b1c      	ldr	r3, [pc, #112]	; (800275c <ADC_Enable+0x90>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a1c      	ldr	r2, [pc, #112]	; (8002760 <ADC_Enable+0x94>)
 80026ee:	fba2 2303 	umull	r2, r3, r2, r3
 80026f2:	0c9b      	lsrs	r3, r3, #18
 80026f4:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80026f6:	9b01      	ldr	r3, [sp, #4]
 80026f8:	b12b      	cbz	r3, 8002706 <ADC_Enable+0x3a>
      wait_loop_index--;
 80026fa:	9b01      	ldr	r3, [sp, #4]
 80026fc:	3b01      	subs	r3, #1
 80026fe:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002700:	9b01      	ldr	r3, [sp, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1f9      	bne.n	80026fa <ADC_Enable+0x2e>
    tickstart = HAL_GetTick();
 8002706:	f7ff fef7 	bl	80024f8 <HAL_GetTick>
 800270a:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 800270c:	6823      	ldr	r3, [r4, #0]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f013 0f01 	tst.w	r3, #1
 8002714:	d006      	beq.n	8002724 <ADC_Enable+0x58>
  return HAL_OK;
 8002716:	2000      	movs	r0, #0
 8002718:	e01e      	b.n	8002758 <ADC_Enable+0x8c>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800271a:	6823      	ldr	r3, [r4, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f013 0f01 	tst.w	r3, #1
 8002722:	d116      	bne.n	8002752 <ADC_Enable+0x86>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002724:	f7ff fee8 	bl	80024f8 <HAL_GetTick>
 8002728:	1b43      	subs	r3, r0, r5
 800272a:	2b02      	cmp	r3, #2
 800272c:	d9f5      	bls.n	800271a <ADC_Enable+0x4e>
        if(ADC_IS_ENABLE(hadc) == RESET)
 800272e:	6823      	ldr	r3, [r4, #0]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f013 0f01 	tst.w	r3, #1
 8002736:	d1f0      	bne.n	800271a <ADC_Enable+0x4e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002738:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800273a:	f043 0310 	orr.w	r3, r3, #16
 800273e:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002740:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	62e3      	str	r3, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 8002748:	2300      	movs	r3, #0
 800274a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          return HAL_ERROR;
 800274e:	2001      	movs	r0, #1
 8002750:	e002      	b.n	8002758 <ADC_Enable+0x8c>
  return HAL_OK;
 8002752:	2000      	movs	r0, #0
 8002754:	e000      	b.n	8002758 <ADC_Enable+0x8c>
 8002756:	2000      	movs	r0, #0
}
 8002758:	b003      	add	sp, #12
 800275a:	bd30      	pop	{r4, r5, pc}
 800275c:	20000000 	.word	0x20000000
 8002760:	431bde83 	.word	0x431bde83

08002764 <HAL_ADC_Start_DMA>:
{
 8002764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002766:	4604      	mov	r4, r0
 8002768:	460d      	mov	r5, r1
 800276a:	4616      	mov	r6, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800276c:	6801      	ldr	r1, [r0, #0]
 800276e:	4842      	ldr	r0, [pc, #264]	; (8002878 <HAL_ADC_Start_DMA+0x114>)
 8002770:	4281      	cmp	r1, r0
 8002772:	d05d      	beq.n	8002830 <HAL_ADC_Start_DMA+0xcc>
 8002774:	4b41      	ldr	r3, [pc, #260]	; (800287c <HAL_ADC_Start_DMA+0x118>)
 8002776:	4299      	cmp	r1, r3
 8002778:	d05a      	beq.n	8002830 <HAL_ADC_Start_DMA+0xcc>
    __HAL_LOCK(hadc);
 800277a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800277e:	2b01      	cmp	r3, #1
 8002780:	d077      	beq.n	8002872 <HAL_ADC_Start_DMA+0x10e>
 8002782:	2301      	movs	r3, #1
 8002784:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8002788:	4620      	mov	r0, r4
 800278a:	f7ff ff9f 	bl	80026cc <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800278e:	4607      	mov	r7, r0
 8002790:	2800      	cmp	r0, #0
 8002792:	d16a      	bne.n	800286a <HAL_ADC_Start_DMA+0x106>
      ADC_STATE_CLR_SET(hadc->State,
 8002794:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002796:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00
 800279a:	f021 0101 	bic.w	r1, r1, #1
 800279e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80027a2:	62a1      	str	r1, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80027a4:	6822      	ldr	r2, [r4, #0]
 80027a6:	4b35      	ldr	r3, [pc, #212]	; (800287c <HAL_ADC_Start_DMA+0x118>)
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d048      	beq.n	800283e <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80027ae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80027b2:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027b4:	6853      	ldr	r3, [r2, #4]
 80027b6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80027ba:	d005      	beq.n	80027c8 <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80027be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027c6:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80027ca:	f413 5f80 	tst.w	r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80027ce:	bf1a      	itte	ne
 80027d0:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
 80027d2:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 80027d6:	2300      	moveq	r3, #0
 80027d8:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 80027da:	2300      	movs	r3, #0
 80027dc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80027e0:	6a23      	ldr	r3, [r4, #32]
 80027e2:	4a27      	ldr	r2, [pc, #156]	; (8002880 <HAL_ADC_Start_DMA+0x11c>)
 80027e4:	629a      	str	r2, [r3, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80027e6:	6a23      	ldr	r3, [r4, #32]
 80027e8:	4a26      	ldr	r2, [pc, #152]	; (8002884 <HAL_ADC_Start_DMA+0x120>)
 80027ea:	62da      	str	r2, [r3, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80027ec:	6a23      	ldr	r3, [r4, #32]
 80027ee:	4a26      	ldr	r2, [pc, #152]	; (8002888 <HAL_ADC_Start_DMA+0x124>)
 80027f0:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80027f2:	6823      	ldr	r3, [r4, #0]
 80027f4:	f06f 0202 	mvn.w	r2, #2
 80027f8:	601a      	str	r2, [r3, #0]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80027fa:	6822      	ldr	r2, [r4, #0]
 80027fc:	6893      	ldr	r3, [r2, #8]
 80027fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002802:	6093      	str	r3, [r2, #8]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002804:	6821      	ldr	r1, [r4, #0]
 8002806:	4633      	mov	r3, r6
 8002808:	462a      	mov	r2, r5
 800280a:	314c      	adds	r1, #76	; 0x4c
 800280c:	6a20      	ldr	r0, [r4, #32]
 800280e:	f000 f9af 	bl	8002b70 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002812:	6823      	ldr	r3, [r4, #0]
 8002814:	689a      	ldr	r2, [r3, #8]
 8002816:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800281a:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	bf0c      	ite	eq
 8002822:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002826:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 800282a:	609a      	str	r2, [r3, #8]
}
 800282c:	4638      	mov	r0, r7
 800282e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002830:	4b11      	ldr	r3, [pc, #68]	; (8002878 <HAL_ADC_Start_DMA+0x114>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8002838:	d09f      	beq.n	800277a <HAL_ADC_Start_DMA+0x16>
    tmp_hal_status = HAL_ERROR;
 800283a:	2701      	movs	r7, #1
 800283c:	e7f6      	b.n	800282c <HAL_ADC_Start_DMA+0xc8>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800283e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8002848:	d0b0      	beq.n	80027ac <HAL_ADC_Start_DMA+0x48>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800284a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800284c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002850:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002852:	4b09      	ldr	r3, [pc, #36]	; (8002878 <HAL_ADC_Start_DMA+0x114>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800285a:	d0b5      	beq.n	80027c8 <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800285c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800285e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002862:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002866:	62a3      	str	r3, [r4, #40]	; 0x28
 8002868:	e7ae      	b.n	80027c8 <HAL_ADC_Start_DMA+0x64>
      __HAL_UNLOCK(hadc);
 800286a:	2300      	movs	r3, #0
 800286c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8002870:	e7dc      	b.n	800282c <HAL_ADC_Start_DMA+0xc8>
    __HAL_LOCK(hadc);
 8002872:	2702      	movs	r7, #2
 8002874:	e7da      	b.n	800282c <HAL_ADC_Start_DMA+0xc8>
 8002876:	bf00      	nop
 8002878:	40012400 	.word	0x40012400
 800287c:	40012800 	.word	0x40012800
 8002880:	08002507 	.word	0x08002507
 8002884:	0800255b 	.word	0x0800255b
 8002888:	08002567 	.word	0x08002567

0800288c <ADC_ConversionStop_Disable>:
{
 800288c:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800288e:	6803      	ldr	r3, [r0, #0]
 8002890:	689a      	ldr	r2, [r3, #8]
 8002892:	f012 0f01 	tst.w	r2, #1
 8002896:	d101      	bne.n	800289c <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8002898:	2000      	movs	r0, #0
}
 800289a:	bd38      	pop	{r3, r4, r5, pc}
 800289c:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	f022 0201 	bic.w	r2, r2, #1
 80028a4:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80028a6:	f7ff fe27 	bl	80024f8 <HAL_GetTick>
 80028aa:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80028ac:	6823      	ldr	r3, [r4, #0]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f013 0f01 	tst.w	r3, #1
 80028b4:	d106      	bne.n	80028c4 <ADC_ConversionStop_Disable+0x38>
  return HAL_OK;
 80028b6:	2000      	movs	r0, #0
 80028b8:	e7ef      	b.n	800289a <ADC_ConversionStop_Disable+0xe>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80028ba:	6823      	ldr	r3, [r4, #0]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f013 0f01 	tst.w	r3, #1
 80028c2:	d013      	beq.n	80028ec <ADC_ConversionStop_Disable+0x60>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80028c4:	f7ff fe18 	bl	80024f8 <HAL_GetTick>
 80028c8:	1b43      	subs	r3, r0, r5
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d9f5      	bls.n	80028ba <ADC_ConversionStop_Disable+0x2e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 80028ce:	6823      	ldr	r3, [r4, #0]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f013 0f01 	tst.w	r3, #1
 80028d6:	d0f0      	beq.n	80028ba <ADC_ConversionStop_Disable+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80028da:	f043 0310 	orr.w	r3, r3, #16
 80028de:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 80028e8:	2001      	movs	r0, #1
 80028ea:	e7d6      	b.n	800289a <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 80028ec:	2000      	movs	r0, #0
 80028ee:	e7d4      	b.n	800289a <ADC_ConversionStop_Disable+0xe>

080028f0 <HAL_ADC_Init>:
  if(hadc == NULL)
 80028f0:	2800      	cmp	r0, #0
 80028f2:	d07a      	beq.n	80029ea <HAL_ADC_Init+0xfa>
{
 80028f4:	b570      	push	{r4, r5, r6, lr}
 80028f6:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028f8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d04f      	beq.n	800299e <HAL_ADC_Init+0xae>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80028fe:	4620      	mov	r0, r4
 8002900:	f7ff ffc4 	bl	800288c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002904:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002906:	f013 0310 	ands.w	r3, r3, #16
 800290a:	d168      	bne.n	80029de <HAL_ADC_Init+0xee>
 800290c:	2800      	cmp	r0, #0
 800290e:	d166      	bne.n	80029de <HAL_ADC_Init+0xee>
    ADC_STATE_CLR_SET(hadc->State,
 8002910:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002912:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8002916:	f022 0202 	bic.w	r2, r2, #2
 800291a:	f042 0202 	orr.w	r2, r2, #2
 800291e:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002920:	7b21      	ldrb	r1, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002922:	6862      	ldr	r2, [r4, #4]
 8002924:	69e5      	ldr	r5, [r4, #28]
 8002926:	432a      	orrs	r2, r5
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002928:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800292c:	68a5      	ldr	r5, [r4, #8]
 800292e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8002932:	d004      	beq.n	800293e <HAL_ADC_Init+0x4e>
 8002934:	2d01      	cmp	r5, #1
 8002936:	bf14      	ite	ne
 8002938:	461d      	movne	r5, r3
 800293a:	f44f 7580 	moveq.w	r5, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800293e:	7d26      	ldrb	r6, [r4, #20]
 8002940:	2e01      	cmp	r6, #1
 8002942:	d032      	beq.n	80029aa <HAL_ADC_Init+0xba>
      MODIFY_REG(hadc->Instance->CR1,
 8002944:	6826      	ldr	r6, [r4, #0]
 8002946:	6871      	ldr	r1, [r6, #4]
 8002948:	f421 4169 	bic.w	r1, r1, #59648	; 0xe900
 800294c:	4329      	orrs	r1, r5
 800294e:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002950:	6825      	ldr	r5, [r4, #0]
 8002952:	68ae      	ldr	r6, [r5, #8]
 8002954:	4926      	ldr	r1, [pc, #152]	; (80029f0 <HAL_ADC_Init+0x100>)
 8002956:	4031      	ands	r1, r6
 8002958:	4311      	orrs	r1, r2
 800295a:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800295c:	68a1      	ldr	r1, [r4, #8]
 800295e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002962:	d001      	beq.n	8002968 <HAL_ADC_Init+0x78>
 8002964:	2901      	cmp	r1, #1
 8002966:	d102      	bne.n	800296e <HAL_ADC_Init+0x7e>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002968:	6923      	ldr	r3, [r4, #16]
 800296a:	3b01      	subs	r3, #1
 800296c:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 800296e:	6825      	ldr	r5, [r4, #0]
 8002970:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8002972:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 8002976:	430b      	orrs	r3, r1
 8002978:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800297a:	6823      	ldr	r3, [r4, #0]
 800297c:	6899      	ldr	r1, [r3, #8]
 800297e:	4b1d      	ldr	r3, [pc, #116]	; (80029f4 <HAL_ADC_Init+0x104>)
 8002980:	400b      	ands	r3, r1
 8002982:	429a      	cmp	r2, r3
 8002984:	d022      	beq.n	80029cc <HAL_ADC_Init+0xdc>
      ADC_STATE_CLR_SET(hadc->State,
 8002986:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002988:	f023 0312 	bic.w	r3, r3, #18
 800298c:	f043 0310 	orr.w	r3, r3, #16
 8002990:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002992:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002994:	f043 0301 	orr.w	r3, r3, #1
 8002998:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 800299a:	2001      	movs	r0, #1
 800299c:	e024      	b.n	80029e8 <HAL_ADC_Init+0xf8>
    ADC_CLEAR_ERRORCODE(hadc);
 800299e:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80029a0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80029a4:	f7ff fbe6 	bl	8002174 <HAL_ADC_MspInit>
 80029a8:	e7a9      	b.n	80028fe <HAL_ADC_Init+0xe>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80029aa:	b931      	cbnz	r1, 80029ba <HAL_ADC_Init+0xca>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80029ac:	69a1      	ldr	r1, [r4, #24]
 80029ae:	3901      	subs	r1, #1
 80029b0:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 80029b4:	f441 6500 	orr.w	r5, r1, #2048	; 0x800
 80029b8:	e7c4      	b.n	8002944 <HAL_ADC_Init+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029ba:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80029bc:	f041 0120 	orr.w	r1, r1, #32
 80029c0:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029c2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80029c4:	f041 0101 	orr.w	r1, r1, #1
 80029c8:	62e1      	str	r1, [r4, #44]	; 0x2c
 80029ca:	e7bb      	b.n	8002944 <HAL_ADC_Init+0x54>
      ADC_CLEAR_ERRORCODE(hadc);
 80029cc:	2300      	movs	r3, #0
 80029ce:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80029d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80029d2:	f023 0303 	bic.w	r3, r3, #3
 80029d6:	f043 0301 	orr.w	r3, r3, #1
 80029da:	62a3      	str	r3, [r4, #40]	; 0x28
 80029dc:	e004      	b.n	80029e8 <HAL_ADC_Init+0xf8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80029e0:	f043 0310 	orr.w	r3, r3, #16
 80029e4:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 80029e6:	2001      	movs	r0, #1
}
 80029e8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80029ea:	2001      	movs	r0, #1
}
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	ffe1f7fd 	.word	0xffe1f7fd
 80029f4:	ff1f0efe 	.word	0xff1f0efe

080029f8 <HAL_ADC_Stop_DMA>:
  __HAL_LOCK(hadc);
 80029f8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d028      	beq.n	8002a52 <HAL_ADC_Stop_DMA+0x5a>
{
 8002a00:	b510      	push	{r4, lr}
 8002a02:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8002a04:	2301      	movs	r3, #1
 8002a06:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002a0a:	f7ff ff3f 	bl	800288c <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 8002a0e:	b950      	cbnz	r0, 8002a26 <HAL_ADC_Stop_DMA+0x2e>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002a10:	6822      	ldr	r2, [r4, #0]
 8002a12:	6893      	ldr	r3, [r2, #8]
 8002a14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a18:	6093      	str	r3, [r2, #8]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002a1a:	6a22      	ldr	r2, [r4, #32]
 8002a1c:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d003      	beq.n	8002a2e <HAL_ADC_Stop_DMA+0x36>
  __HAL_UNLOCK(hadc);
 8002a26:	2300      	movs	r3, #0
 8002a28:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8002a2c:	bd10      	pop	{r4, pc}
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002a2e:	4610      	mov	r0, r2
 8002a30:	f000 f8ed 	bl	8002c0e <HAL_DMA_Abort>
      if (tmp_hal_status == HAL_OK)
 8002a34:	b940      	cbnz	r0, 8002a48 <HAL_ADC_Stop_DMA+0x50>
        ADC_STATE_CLR_SET(hadc->State,
 8002a36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002a38:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a3c:	f023 0301 	bic.w	r3, r3, #1
 8002a40:	f043 0301 	orr.w	r3, r3, #1
 8002a44:	62a3      	str	r3, [r4, #40]	; 0x28
 8002a46:	e7ee      	b.n	8002a26 <HAL_ADC_Stop_DMA+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002a48:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002a4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a4e:	62a3      	str	r3, [r4, #40]	; 0x28
 8002a50:	e7e9      	b.n	8002a26 <HAL_ADC_Stop_DMA+0x2e>
  __HAL_LOCK(hadc);
 8002a52:	2002      	movs	r0, #2
}
 8002a54:	4770      	bx	lr
	...

08002a58 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a58:	4907      	ldr	r1, [pc, #28]	; (8002a78 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002a5a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a5c:	0203      	lsls	r3, r0, #8
 8002a5e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a62:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a66:	0412      	lsls	r2, r2, #16
 8002a68:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002a74:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002a76:	4770      	bx	lr
 8002a78:	e000ed00 	.word	0xe000ed00

08002a7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a7c:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a7e:	4b18      	ldr	r3, [pc, #96]	; (8002ae0 <HAL_NVIC_SetPriority+0x64>)
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a86:	f1c3 0c07 	rsb	ip, r3, #7
 8002a8a:	f1bc 0f04 	cmp.w	ip, #4
 8002a8e:	bf28      	it	cs
 8002a90:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a94:	f103 0e04 	add.w	lr, r3, #4
 8002a98:	f1be 0f06 	cmp.w	lr, #6
 8002a9c:	bf8c      	ite	hi
 8002a9e:	3b03      	subhi	r3, #3
 8002aa0:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa2:	f04f 3eff 	mov.w	lr, #4294967295
 8002aa6:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002aaa:	ea21 010c 	bic.w	r1, r1, ip
 8002aae:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ab0:	fa0e f303 	lsl.w	r3, lr, r3
 8002ab4:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab8:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002aba:	2800      	cmp	r0, #0
 8002abc:	db09      	blt.n	8002ad2 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002abe:	0109      	lsls	r1, r1, #4
 8002ac0:	b2c9      	uxtb	r1, r1
 8002ac2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002ac6:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002aca:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002ace:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ad2:	f000 000f 	and.w	r0, r0, #15
 8002ad6:	0109      	lsls	r1, r1, #4
 8002ad8:	b2c9      	uxtb	r1, r1
 8002ada:	4b02      	ldr	r3, [pc, #8]	; (8002ae4 <HAL_NVIC_SetPriority+0x68>)
 8002adc:	5419      	strb	r1, [r3, r0]
 8002ade:	e7f6      	b.n	8002ace <HAL_NVIC_SetPriority+0x52>
 8002ae0:	e000ed00 	.word	0xe000ed00
 8002ae4:	e000ed14 	.word	0xe000ed14

08002ae8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002ae8:	2800      	cmp	r0, #0
 8002aea:	db08      	blt.n	8002afe <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aec:	0942      	lsrs	r2, r0, #5
 8002aee:	f000 001f 	and.w	r0, r0, #31
 8002af2:	2301      	movs	r3, #1
 8002af4:	fa03 f000 	lsl.w	r0, r3, r0
 8002af8:	4b01      	ldr	r3, [pc, #4]	; (8002b00 <HAL_NVIC_EnableIRQ+0x18>)
 8002afa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002afe:	4770      	bx	lr
 8002b00:	e000e100 	.word	0xe000e100

08002b04 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002b04:	b360      	cbz	r0, 8002b60 <HAL_DMA_Init+0x5c>
{
 8002b06:	b410      	push	{r4}
 8002b08:	4602      	mov	r2, r0
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002b0a:	6801      	ldr	r1, [r0, #0]
 8002b0c:	4b15      	ldr	r3, [pc, #84]	; (8002b64 <HAL_DMA_Init+0x60>)
 8002b0e:	440b      	add	r3, r1
 8002b10:	4815      	ldr	r0, [pc, #84]	; (8002b68 <HAL_DMA_Init+0x64>)
 8002b12:	fba0 0303 	umull	r0, r3, r0, r3
 8002b16:	091b      	lsrs	r3, r3, #4
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	6413      	str	r3, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002b1c:	4b13      	ldr	r3, [pc, #76]	; (8002b6c <HAL_DMA_Init+0x68>)
 8002b1e:	63d3      	str	r3, [r2, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b20:	2302      	movs	r3, #2
 8002b22:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b26:	6808      	ldr	r0, [r1, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b28:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
 8002b2c:	f020 0030 	bic.w	r0, r0, #48	; 0x30
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b30:	6853      	ldr	r3, [r2, #4]
 8002b32:	6894      	ldr	r4, [r2, #8]
 8002b34:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b36:	68d4      	ldr	r4, [r2, #12]
 8002b38:	4323      	orrs	r3, r4
 8002b3a:	6914      	ldr	r4, [r2, #16]
 8002b3c:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b3e:	6954      	ldr	r4, [r2, #20]
 8002b40:	4323      	orrs	r3, r4
 8002b42:	6994      	ldr	r4, [r2, #24]
 8002b44:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b46:	69d4      	ldr	r4, [r2, #28]
 8002b48:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8002b4a:	4303      	orrs	r3, r0

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b4c:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b4e:	2000      	movs	r0, #0
 8002b50:	6390      	str	r0, [r2, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b52:	2301      	movs	r3, #1
 8002b54:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b58:	f882 0020 	strb.w	r0, [r2, #32]

  return HAL_OK;
}
 8002b5c:	bc10      	pop	{r4}
 8002b5e:	4770      	bx	lr
    return HAL_ERROR;
 8002b60:	2001      	movs	r0, #1
}
 8002b62:	4770      	bx	lr
 8002b64:	bffdfff8 	.word	0xbffdfff8
 8002b68:	cccccccd 	.word	0xcccccccd
 8002b6c:	40020000 	.word	0x40020000

08002b70 <HAL_DMA_Start_IT>:

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b70:	f890 c020 	ldrb.w	ip, [r0, #32]
 8002b74:	f1bc 0f01 	cmp.w	ip, #1
 8002b78:	d047      	beq.n	8002c0a <HAL_DMA_Start_IT+0x9a>
 8002b7a:	f04f 0c01 	mov.w	ip, #1
 8002b7e:	f880 c020 	strb.w	ip, [r0, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b82:	f890 c021 	ldrb.w	ip, [r0, #33]	; 0x21
 8002b86:	fa5f fc8c 	uxtb.w	ip, ip
 8002b8a:	f1bc 0f01 	cmp.w	ip, #1
 8002b8e:	d004      	beq.n	8002b9a <HAL_DMA_Start_IT+0x2a>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002b90:	2300      	movs	r3, #0
 8002b92:	f880 3020 	strb.w	r3, [r0, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002b96:	2002      	movs	r0, #2
 8002b98:	4770      	bx	lr
{
 8002b9a:	b470      	push	{r4, r5, r6}
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b9c:	2402      	movs	r4, #2
 8002b9e:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ba2:	2400      	movs	r4, #0
 8002ba4:	6384      	str	r4, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8002ba6:	6805      	ldr	r5, [r0, #0]
 8002ba8:	682c      	ldr	r4, [r5, #0]
 8002baa:	f024 0401 	bic.w	r4, r4, #1
 8002bae:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002bb0:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8002bb2:	2401      	movs	r4, #1
 8002bb4:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8002bb6:	40b4      	lsls	r4, r6
 8002bb8:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002bba:	6804      	ldr	r4, [r0, #0]
 8002bbc:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bbe:	6843      	ldr	r3, [r0, #4]
 8002bc0:	2b10      	cmp	r3, #16
 8002bc2:	d012      	beq.n	8002bea <HAL_DMA_Start_IT+0x7a>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002bc4:	6803      	ldr	r3, [r0, #0]
 8002bc6:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002bc8:	6803      	ldr	r3, [r0, #0]
 8002bca:	60da      	str	r2, [r3, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8002bcc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002bce:	b18b      	cbz	r3, 8002bf4 <HAL_DMA_Start_IT+0x84>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bd0:	6802      	ldr	r2, [r0, #0]
 8002bd2:	6813      	ldr	r3, [r2, #0]
 8002bd4:	f043 030e 	orr.w	r3, r3, #14
 8002bd8:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8002bda:	6802      	ldr	r2, [r0, #0]
 8002bdc:	6813      	ldr	r3, [r2, #0]
 8002bde:	f043 0301 	orr.w	r3, r3, #1
 8002be2:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002be4:	2000      	movs	r0, #0
}
 8002be6:	bc70      	pop	{r4, r5, r6}
 8002be8:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8002bea:	6803      	ldr	r3, [r0, #0]
 8002bec:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002bee:	6803      	ldr	r3, [r0, #0]
 8002bf0:	60d9      	str	r1, [r3, #12]
 8002bf2:	e7eb      	b.n	8002bcc <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bf4:	6802      	ldr	r2, [r0, #0]
 8002bf6:	6813      	ldr	r3, [r2, #0]
 8002bf8:	f023 0304 	bic.w	r3, r3, #4
 8002bfc:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002bfe:	6802      	ldr	r2, [r0, #0]
 8002c00:	6813      	ldr	r3, [r2, #0]
 8002c02:	f043 030a 	orr.w	r3, r3, #10
 8002c06:	6013      	str	r3, [r2, #0]
 8002c08:	e7e7      	b.n	8002bda <HAL_DMA_Start_IT+0x6a>
  __HAL_LOCK(hdma);
 8002c0a:	2002      	movs	r0, #2
}
 8002c0c:	4770      	bx	lr

08002c0e <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c0e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d006      	beq.n	8002c26 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c18:	2304      	movs	r3, #4
 8002c1a:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 8002c22:	2001      	movs	r0, #1
 8002c24:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c26:	6802      	ldr	r2, [r0, #0]
 8002c28:	6813      	ldr	r3, [r2, #0]
 8002c2a:	f023 030e 	bic.w	r3, r3, #14
 8002c2e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002c30:	6802      	ldr	r2, [r0, #0]
 8002c32:	6813      	ldr	r3, [r2, #0]
 8002c34:	f023 0301 	bic.w	r3, r3, #1
 8002c38:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c3a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	604b      	str	r3, [r1, #4]
  hdma->State = HAL_DMA_STATE_READY;
 8002c46:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  __HAL_UNLOCK(hdma);      
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	f880 3020 	strb.w	r3, [r0, #32]
  return status; 
 8002c50:	4618      	mov	r0, r3
}
 8002c52:	4770      	bx	lr

08002c54 <HAL_DMA_Abort_IT>:
{  
 8002c54:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002c56:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d003      	beq.n	8002c68 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c60:	2304      	movs	r3, #4
 8002c62:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8002c64:	2001      	movs	r0, #1
}
 8002c66:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c68:	6802      	ldr	r2, [r0, #0]
 8002c6a:	6813      	ldr	r3, [r2, #0]
 8002c6c:	f023 030e 	bic.w	r3, r3, #14
 8002c70:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002c72:	6802      	ldr	r2, [r0, #0]
 8002c74:	6813      	ldr	r3, [r2, #0]
 8002c76:	f023 0301 	bic.w	r3, r3, #1
 8002c7a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002c7c:	6803      	ldr	r3, [r0, #0]
 8002c7e:	4a19      	ldr	r2, [pc, #100]	; (8002ce4 <HAL_DMA_Abort_IT+0x90>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d013      	beq.n	8002cac <HAL_DMA_Abort_IT+0x58>
 8002c84:	3214      	adds	r2, #20
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d01e      	beq.n	8002cc8 <HAL_DMA_Abort_IT+0x74>
 8002c8a:	3214      	adds	r2, #20
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d01d      	beq.n	8002ccc <HAL_DMA_Abort_IT+0x78>
 8002c90:	3214      	adds	r2, #20
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d01d      	beq.n	8002cd2 <HAL_DMA_Abort_IT+0x7e>
 8002c96:	3214      	adds	r2, #20
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d01d      	beq.n	8002cd8 <HAL_DMA_Abort_IT+0x84>
 8002c9c:	3214      	adds	r2, #20
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	bf0c      	ite	eq
 8002ca2:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8002ca6:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8002caa:	e000      	b.n	8002cae <HAL_DMA_Abort_IT+0x5a>
 8002cac:	2301      	movs	r3, #1
 8002cae:	4a0e      	ldr	r2, [pc, #56]	; (8002ce8 <HAL_DMA_Abort_IT+0x94>)
 8002cb0:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002cb8:	2300      	movs	r3, #0
 8002cba:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002cbe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002cc0:	b16b      	cbz	r3, 8002cde <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 8002cc2:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002cc4:	2000      	movs	r0, #0
 8002cc6:	e7ce      	b.n	8002c66 <HAL_DMA_Abort_IT+0x12>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002cc8:	2310      	movs	r3, #16
 8002cca:	e7f0      	b.n	8002cae <HAL_DMA_Abort_IT+0x5a>
 8002ccc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cd0:	e7ed      	b.n	8002cae <HAL_DMA_Abort_IT+0x5a>
 8002cd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cd6:	e7ea      	b.n	8002cae <HAL_DMA_Abort_IT+0x5a>
 8002cd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cdc:	e7e7      	b.n	8002cae <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 8002cde:	2000      	movs	r0, #0
 8002ce0:	e7c1      	b.n	8002c66 <HAL_DMA_Abort_IT+0x12>
 8002ce2:	bf00      	nop
 8002ce4:	40020008 	.word	0x40020008
 8002ce8:	40020000 	.word	0x40020000

08002cec <HAL_DMA_IRQHandler>:
{
 8002cec:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002cee:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002cf0:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002cf2:	6804      	ldr	r4, [r0, #0]
 8002cf4:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002cf6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002cf8:	2304      	movs	r3, #4
 8002cfa:	408b      	lsls	r3, r1
 8002cfc:	4213      	tst	r3, r2
 8002cfe:	d034      	beq.n	8002d6a <HAL_DMA_IRQHandler+0x7e>
 8002d00:	f015 0f04 	tst.w	r5, #4
 8002d04:	d031      	beq.n	8002d6a <HAL_DMA_IRQHandler+0x7e>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d06:	6823      	ldr	r3, [r4, #0]
 8002d08:	f013 0f20 	tst.w	r3, #32
 8002d0c:	d103      	bne.n	8002d16 <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d0e:	6823      	ldr	r3, [r4, #0]
 8002d10:	f023 0304 	bic.w	r3, r3, #4
 8002d14:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002d16:	6803      	ldr	r3, [r0, #0]
 8002d18:	4a42      	ldr	r2, [pc, #264]	; (8002e24 <HAL_DMA_IRQHandler+0x138>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d013      	beq.n	8002d46 <HAL_DMA_IRQHandler+0x5a>
 8002d1e:	3214      	adds	r2, #20
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d017      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x68>
 8002d24:	3214      	adds	r2, #20
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d016      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x6c>
 8002d2a:	3214      	adds	r2, #20
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d016      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x72>
 8002d30:	3214      	adds	r2, #20
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d016      	beq.n	8002d64 <HAL_DMA_IRQHandler+0x78>
 8002d36:	3214      	adds	r2, #20
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	bf0c      	ite	eq
 8002d3c:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8002d40:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8002d44:	e000      	b.n	8002d48 <HAL_DMA_IRQHandler+0x5c>
 8002d46:	2304      	movs	r3, #4
 8002d48:	4a37      	ldr	r2, [pc, #220]	; (8002e28 <HAL_DMA_IRQHandler+0x13c>)
 8002d4a:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8002d4c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002d4e:	b103      	cbz	r3, 8002d52 <HAL_DMA_IRQHandler+0x66>
      hdma->XferHalfCpltCallback(hdma);
 8002d50:	4798      	blx	r3
}
 8002d52:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002d54:	2340      	movs	r3, #64	; 0x40
 8002d56:	e7f7      	b.n	8002d48 <HAL_DMA_IRQHandler+0x5c>
 8002d58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d5c:	e7f4      	b.n	8002d48 <HAL_DMA_IRQHandler+0x5c>
 8002d5e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d62:	e7f1      	b.n	8002d48 <HAL_DMA_IRQHandler+0x5c>
 8002d64:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d68:	e7ee      	b.n	8002d48 <HAL_DMA_IRQHandler+0x5c>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	408b      	lsls	r3, r1
 8002d6e:	4213      	tst	r3, r2
 8002d70:	d03b      	beq.n	8002dea <HAL_DMA_IRQHandler+0xfe>
 8002d72:	f015 0f02 	tst.w	r5, #2
 8002d76:	d038      	beq.n	8002dea <HAL_DMA_IRQHandler+0xfe>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d78:	6823      	ldr	r3, [r4, #0]
 8002d7a:	f013 0f20 	tst.w	r3, #32
 8002d7e:	d106      	bne.n	8002d8e <HAL_DMA_IRQHandler+0xa2>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002d80:	6823      	ldr	r3, [r4, #0]
 8002d82:	f023 030a 	bic.w	r3, r3, #10
 8002d86:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002d8e:	6803      	ldr	r3, [r0, #0]
 8002d90:	4a24      	ldr	r2, [pc, #144]	; (8002e24 <HAL_DMA_IRQHandler+0x138>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d013      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xd2>
 8002d96:	3214      	adds	r2, #20
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d01b      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0xe8>
 8002d9c:	3214      	adds	r2, #20
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d01a      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0xec>
 8002da2:	3214      	adds	r2, #20
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d01a      	beq.n	8002dde <HAL_DMA_IRQHandler+0xf2>
 8002da8:	3214      	adds	r2, #20
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d01a      	beq.n	8002de4 <HAL_DMA_IRQHandler+0xf8>
 8002dae:	3214      	adds	r2, #20
 8002db0:	4293      	cmp	r3, r2
 8002db2:	bf0c      	ite	eq
 8002db4:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8002db8:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8002dbc:	e000      	b.n	8002dc0 <HAL_DMA_IRQHandler+0xd4>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	4a19      	ldr	r2, [pc, #100]	; (8002e28 <HAL_DMA_IRQHandler+0x13c>)
 8002dc2:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8002dca:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d0c0      	beq.n	8002d52 <HAL_DMA_IRQHandler+0x66>
      hdma->XferCpltCallback(hdma);
 8002dd0:	4798      	blx	r3
 8002dd2:	e7be      	b.n	8002d52 <HAL_DMA_IRQHandler+0x66>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002dd4:	2320      	movs	r3, #32
 8002dd6:	e7f3      	b.n	8002dc0 <HAL_DMA_IRQHandler+0xd4>
 8002dd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ddc:	e7f0      	b.n	8002dc0 <HAL_DMA_IRQHandler+0xd4>
 8002dde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002de2:	e7ed      	b.n	8002dc0 <HAL_DMA_IRQHandler+0xd4>
 8002de4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002de8:	e7ea      	b.n	8002dc0 <HAL_DMA_IRQHandler+0xd4>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002dea:	2308      	movs	r3, #8
 8002dec:	fa03 f101 	lsl.w	r1, r3, r1
 8002df0:	4211      	tst	r1, r2
 8002df2:	d0ae      	beq.n	8002d52 <HAL_DMA_IRQHandler+0x66>
 8002df4:	f015 0f08 	tst.w	r5, #8
 8002df8:	d0ab      	beq.n	8002d52 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dfa:	6823      	ldr	r3, [r4, #0]
 8002dfc:	f023 030e 	bic.w	r3, r3, #14
 8002e00:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e02:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002e04:	2301      	movs	r3, #1
 8002e06:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002e08:	fa03 f202 	lsl.w	r2, r3, r2
 8002e0c:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e0e:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8002e10:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002e14:	2300      	movs	r3, #0
 8002e16:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8002e1a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d098      	beq.n	8002d52 <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 8002e20:	4798      	blx	r3
  return;
 8002e22:	e796      	b.n	8002d52 <HAL_DMA_IRQHandler+0x66>
 8002e24:	40020008 	.word	0x40020008
 8002e28:	40020000 	.word	0x40020000

08002e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e30:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e32:	f8d1 9000 	ldr.w	r9, [r1]
 8002e36:	f1b9 0f00 	cmp.w	r9, #0
 8002e3a:	f000 811f 	beq.w	800307c <HAL_GPIO_Init+0x250>
 8002e3e:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8002e40:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e42:	4e90      	ldr	r6, [pc, #576]	; (8003084 <HAL_GPIO_Init+0x258>)
        {
          SET_BIT(EXTI->IMR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e44:	4c90      	ldr	r4, [pc, #576]	; (8003088 <HAL_GPIO_Init+0x25c>)
      switch (GPIO_Init->Mode)
 8002e46:	4d91      	ldr	r5, [pc, #580]	; (800308c <HAL_GPIO_Init+0x260>)
 8002e48:	f8df e244 	ldr.w	lr, [pc, #580]	; 8003090 <HAL_GPIO_Init+0x264>
 8002e4c:	4694      	mov	ip, r2
 8002e4e:	e0ba      	b.n	8002fc6 <HAL_GPIO_Init+0x19a>
 8002e50:	f04f 0c00 	mov.w	ip, #0
 8002e54:	e025      	b.n	8002ea2 <HAL_GPIO_Init+0x76>
 8002e56:	45a9      	cmp	r9, r5
 8002e58:	d00f      	beq.n	8002e7a <HAL_GPIO_Init+0x4e>
 8002e5a:	d906      	bls.n	8002e6a <HAL_GPIO_Init+0x3e>
 8002e5c:	45f1      	cmp	r9, lr
 8002e5e:	d00c      	beq.n	8002e7a <HAL_GPIO_Init+0x4e>
 8002e60:	f8df a230 	ldr.w	sl, [pc, #560]	; 8003094 <HAL_GPIO_Init+0x268>
 8002e64:	45d1      	cmp	r9, sl
 8002e66:	d008      	beq.n	8002e7a <HAL_GPIO_Init+0x4e>
 8002e68:	e01b      	b.n	8002ea2 <HAL_GPIO_Init+0x76>
 8002e6a:	f8df a22c 	ldr.w	sl, [pc, #556]	; 8003098 <HAL_GPIO_Init+0x26c>
 8002e6e:	45d1      	cmp	r9, sl
 8002e70:	d003      	beq.n	8002e7a <HAL_GPIO_Init+0x4e>
 8002e72:	f50a 2a70 	add.w	sl, sl, #983040	; 0xf0000
 8002e76:	45d1      	cmp	r9, sl
 8002e78:	d10f      	bne.n	8002e9a <HAL_GPIO_Init+0x6e>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e7a:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8002e7e:	f1bc 0f00 	cmp.w	ip, #0
 8002e82:	f000 80ef 	beq.w	8003064 <HAL_GPIO_Init+0x238>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e86:	f1bc 0f01 	cmp.w	ip, #1
            GPIOx->BSRR = ioposition;
 8002e8a:	bf0c      	ite	eq
 8002e8c:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8002e90:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e94:	f04f 0c08 	mov.w	ip, #8
 8002e98:	e003      	b.n	8002ea2 <HAL_GPIO_Init+0x76>
      switch (GPIO_Init->Mode)
 8002e9a:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
 8002e9e:	45d1      	cmp	r9, sl
 8002ea0:	d0eb      	beq.n	8002e7a <HAL_GPIO_Init+0x4e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ea2:	2fff      	cmp	r7, #255	; 0xff
 8002ea4:	bf99      	ittee	ls
 8002ea6:	4681      	movls	r9, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ea8:	4692      	movls	sl, r2
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002eaa:	f100 0904 	addhi.w	r9, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002eae:	f1a2 0a20 	subhi.w	sl, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002eb2:	f8d9 8000 	ldr.w	r8, [r9]
 8002eb6:	f04f 0b0f 	mov.w	fp, #15
 8002eba:	fa0b fb0a 	lsl.w	fp, fp, sl
 8002ebe:	ea28 080b 	bic.w	r8, r8, fp
 8002ec2:	fa0c fa0a 	lsl.w	sl, ip, sl
 8002ec6:	ea48 080a 	orr.w	r8, r8, sl
 8002eca:	f8c9 8000 	str.w	r8, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ece:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002ed2:	f018 5f80 	tst.w	r8, #268435456	; 0x10000000
 8002ed6:	d06f      	beq.n	8002fb8 <HAL_GPIO_Init+0x18c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ed8:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8002edc:	f048 0801 	orr.w	r8, r8, #1
 8002ee0:	f8c6 8018 	str.w	r8, [r6, #24]
 8002ee4:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8002ee8:	f008 0801 	and.w	r8, r8, #1
 8002eec:	f8cd 8004 	str.w	r8, [sp, #4]
 8002ef0:	f8dd 8004 	ldr.w	r8, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8002ef4:	f023 0803 	bic.w	r8, r3, #3
 8002ef8:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8002efc:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8002f00:	f8d8 a008 	ldr.w	sl, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f04:	f003 0903 	and.w	r9, r3, #3
 8002f08:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 8002f0c:	f04f 090f 	mov.w	r9, #15
 8002f10:	fa09 f90b 	lsl.w	r9, r9, fp
 8002f14:	ea2a 0a09 	bic.w	sl, sl, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f18:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800309c <HAL_GPIO_Init+0x270>
 8002f1c:	4548      	cmp	r0, r9
 8002f1e:	f000 80a4 	beq.w	800306a <HAL_GPIO_Init+0x23e>
 8002f22:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8002f26:	4548      	cmp	r0, r9
 8002f28:	f000 80a2 	beq.w	8003070 <HAL_GPIO_Init+0x244>
 8002f2c:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8002f30:	4548      	cmp	r0, r9
 8002f32:	f000 80a0 	beq.w	8003076 <HAL_GPIO_Init+0x24a>
 8002f36:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8002f3a:	4548      	cmp	r0, r9
 8002f3c:	bf0c      	ite	eq
 8002f3e:	f04f 0903 	moveq.w	r9, #3
 8002f42:	f04f 0904 	movne.w	r9, #4
 8002f46:	fa09 f90b 	lsl.w	r9, r9, fp
 8002f4a:	ea49 090a 	orr.w	r9, r9, sl
        AFIO->EXTICR[position >> 2u] = temp;
 8002f4e:	f8c8 9008 	str.w	r9, [r8, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f52:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002f56:	f418 1f80 	tst.w	r8, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f5a:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8002f5e:	bf14      	ite	ne
 8002f60:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f64:	ea28 0807 	biceq.w	r8, r8, r7
 8002f68:	f8c4 8008 	str.w	r8, [r4, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f6c:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002f70:	f418 1f00 	tst.w	r8, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f74:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8002f78:	bf14      	ite	ne
 8002f7a:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f7e:	ea28 0807 	biceq.w	r8, r8, r7
 8002f82:	f8c4 800c 	str.w	r8, [r4, #12]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f86:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002f8a:	f418 3f00 	tst.w	r8, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002f8e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8002f92:	bf14      	ite	ne
 8002f94:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f98:	ea28 0807 	biceq.w	r8, r8, r7
 8002f9c:	f8c4 8004 	str.w	r8, [r4, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fa0:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002fa4:	f418 3f80 	tst.w	r8, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002fa8:	f8d4 8000 	ldr.w	r8, [r4]
 8002fac:	bf14      	ite	ne
 8002fae:	ea48 0707 	orrne.w	r7, r8, r7
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002fb2:	ea28 0707 	biceq.w	r7, r8, r7
 8002fb6:	6027      	str	r7, [r4, #0]
        }
      }
    }

	position++;
 8002fb8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fba:	f8d1 9000 	ldr.w	r9, [r1]
 8002fbe:	3204      	adds	r2, #4
 8002fc0:	fa39 f703 	lsrs.w	r7, r9, r3
 8002fc4:	d05a      	beq.n	800307c <HAL_GPIO_Init+0x250>
    ioposition = (0x01uL << position);
 8002fc6:	f04f 0801 	mov.w	r8, #1
 8002fca:	fa08 f803 	lsl.w	r8, r8, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fce:	ea08 0709 	and.w	r7, r8, r9
    if (iocurrent == ioposition)
 8002fd2:	ea38 0909 	bics.w	r9, r8, r9
 8002fd6:	d1ef      	bne.n	8002fb8 <HAL_GPIO_Init+0x18c>
      switch (GPIO_Init->Mode)
 8002fd8:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8002fdc:	f1b9 0f12 	cmp.w	r9, #18
 8002fe0:	f63f af39 	bhi.w	8002e56 <HAL_GPIO_Init+0x2a>
 8002fe4:	f1b9 0f12 	cmp.w	r9, #18
 8002fe8:	f63f af5b 	bhi.w	8002ea2 <HAL_GPIO_Init+0x76>
 8002fec:	f20f 0a04 	addw	sl, pc, #4
 8002ff0:	f85a f029 	ldr.w	pc, [sl, r9, lsl #2]
 8002ff4:	08002e7b 	.word	0x08002e7b
 8002ff8:	08003041 	.word	0x08003041
 8002ffc:	08003051 	.word	0x08003051
 8003000:	08002e51 	.word	0x08002e51
 8003004:	08002ea3 	.word	0x08002ea3
 8003008:	08002ea3 	.word	0x08002ea3
 800300c:	08002ea3 	.word	0x08002ea3
 8003010:	08002ea3 	.word	0x08002ea3
 8003014:	08002ea3 	.word	0x08002ea3
 8003018:	08002ea3 	.word	0x08002ea3
 800301c:	08002ea3 	.word	0x08002ea3
 8003020:	08002ea3 	.word	0x08002ea3
 8003024:	08002ea3 	.word	0x08002ea3
 8003028:	08002ea3 	.word	0x08002ea3
 800302c:	08002ea3 	.word	0x08002ea3
 8003030:	08002ea3 	.word	0x08002ea3
 8003034:	08002ea3 	.word	0x08002ea3
 8003038:	08003047 	.word	0x08003047
 800303c:	0800305b 	.word	0x0800305b
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003040:	f8d1 c00c 	ldr.w	ip, [r1, #12]
          break;
 8003044:	e72d      	b.n	8002ea2 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003046:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800304a:	f10c 0c04 	add.w	ip, ip, #4
          break;
 800304e:	e728      	b.n	8002ea2 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003050:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8003054:	f10c 0c08 	add.w	ip, ip, #8
          break;
 8003058:	e723      	b.n	8002ea2 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800305a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800305e:	f10c 0c0c 	add.w	ip, ip, #12
          break;
 8003062:	e71e      	b.n	8002ea2 <HAL_GPIO_Init+0x76>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003064:	f04f 0c04 	mov.w	ip, #4
 8003068:	e71b      	b.n	8002ea2 <HAL_GPIO_Init+0x76>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800306a:	f04f 0900 	mov.w	r9, #0
 800306e:	e76a      	b.n	8002f46 <HAL_GPIO_Init+0x11a>
 8003070:	f04f 0901 	mov.w	r9, #1
 8003074:	e767      	b.n	8002f46 <HAL_GPIO_Init+0x11a>
 8003076:	f04f 0902 	mov.w	r9, #2
 800307a:	e764      	b.n	8002f46 <HAL_GPIO_Init+0x11a>
  }
}
 800307c:	b003      	add	sp, #12
 800307e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003082:	bf00      	nop
 8003084:	40021000 	.word	0x40021000
 8003088:	40010400 	.word	0x40010400
 800308c:	10220000 	.word	0x10220000
 8003090:	10310000 	.word	0x10310000
 8003094:	10320000 	.word	0x10320000
 8003098:	10120000 	.word	0x10120000
 800309c:	40010800 	.word	0x40010800

080030a0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030a0:	6883      	ldr	r3, [r0, #8]
 80030a2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80030a4:	bf14      	ite	ne
 80030a6:	2001      	movne	r0, #1
 80030a8:	2000      	moveq	r0, #0
 80030aa:	4770      	bx	lr

080030ac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030ac:	b10a      	cbz	r2, 80030b2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030ae:	6101      	str	r1, [r0, #16]
 80030b0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030b2:	0409      	lsls	r1, r1, #16
 80030b4:	6101      	str	r1, [r0, #16]
  }
}
 80030b6:	4770      	bx	lr

080030b8 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80030b8:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030ba:	ea01 0203 	and.w	r2, r1, r3
 80030be:	ea21 0103 	bic.w	r1, r1, r3
 80030c2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80030c6:	6101      	str	r1, [r0, #16]
}
 80030c8:	4770      	bx	lr
	...

080030cc <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030cc:	2800      	cmp	r0, #0
 80030ce:	f000 8201 	beq.w	80034d4 <HAL_RCC_OscConfig+0x408>
{
 80030d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030da:	6803      	ldr	r3, [r0, #0]
 80030dc:	f013 0f01 	tst.w	r3, #1
 80030e0:	d02c      	beq.n	800313c <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030e2:	4b9f      	ldr	r3, [pc, #636]	; (8003360 <HAL_RCC_OscConfig+0x294>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f003 030c 	and.w	r3, r3, #12
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	d01d      	beq.n	800312a <HAL_RCC_OscConfig+0x5e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030ee:	4b9c      	ldr	r3, [pc, #624]	; (8003360 <HAL_RCC_OscConfig+0x294>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f003 030c 	and.w	r3, r3, #12
 80030f6:	2b08      	cmp	r3, #8
 80030f8:	d012      	beq.n	8003120 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030fa:	6863      	ldr	r3, [r4, #4]
 80030fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003100:	d041      	beq.n	8003186 <HAL_RCC_OscConfig+0xba>
 8003102:	2b00      	cmp	r3, #0
 8003104:	d155      	bne.n	80031b2 <HAL_RCC_OscConfig+0xe6>
 8003106:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800310a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003114:	601a      	str	r2, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	e037      	b.n	8003190 <HAL_RCC_OscConfig+0xc4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003120:	4b8f      	ldr	r3, [pc, #572]	; (8003360 <HAL_RCC_OscConfig+0x294>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003128:	d0e7      	beq.n	80030fa <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800312a:	4b8d      	ldr	r3, [pc, #564]	; (8003360 <HAL_RCC_OscConfig+0x294>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003132:	d003      	beq.n	800313c <HAL_RCC_OscConfig+0x70>
 8003134:	6863      	ldr	r3, [r4, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 81ce 	beq.w	80034d8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800313c:	6823      	ldr	r3, [r4, #0]
 800313e:	f013 0f02 	tst.w	r3, #2
 8003142:	d075      	beq.n	8003230 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003144:	4b86      	ldr	r3, [pc, #536]	; (8003360 <HAL_RCC_OscConfig+0x294>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f013 0f0c 	tst.w	r3, #12
 800314c:	d05f      	beq.n	800320e <HAL_RCC_OscConfig+0x142>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800314e:	4b84      	ldr	r3, [pc, #528]	; (8003360 <HAL_RCC_OscConfig+0x294>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f003 030c 	and.w	r3, r3, #12
 8003156:	2b08      	cmp	r3, #8
 8003158:	d054      	beq.n	8003204 <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800315a:	6923      	ldr	r3, [r4, #16]
 800315c:	2b00      	cmp	r3, #0
 800315e:	f000 808a 	beq.w	8003276 <HAL_RCC_OscConfig+0x1aa>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003162:	4b80      	ldr	r3, [pc, #512]	; (8003364 <HAL_RCC_OscConfig+0x298>)
 8003164:	2201      	movs	r2, #1
 8003166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003168:	f7ff f9c6 	bl	80024f8 <HAL_GetTick>
 800316c:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800316e:	4e7c      	ldr	r6, [pc, #496]	; (8003360 <HAL_RCC_OscConfig+0x294>)
 8003170:	6833      	ldr	r3, [r6, #0]
 8003172:	f013 0f02 	tst.w	r3, #2
 8003176:	d175      	bne.n	8003264 <HAL_RCC_OscConfig+0x198>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003178:	f7ff f9be 	bl	80024f8 <HAL_GetTick>
 800317c:	1b40      	subs	r0, r0, r5
 800317e:	2802      	cmp	r0, #2
 8003180:	d9f6      	bls.n	8003170 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_TIMEOUT;
 8003182:	2003      	movs	r0, #3
 8003184:	e1ad      	b.n	80034e2 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003186:	4a76      	ldr	r2, [pc, #472]	; (8003360 <HAL_RCC_OscConfig+0x294>)
 8003188:	6813      	ldr	r3, [r2, #0]
 800318a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800318e:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003190:	6863      	ldr	r3, [r4, #4]
 8003192:	b343      	cbz	r3, 80031e6 <HAL_RCC_OscConfig+0x11a>
        tickstart = HAL_GetTick();
 8003194:	f7ff f9b0 	bl	80024f8 <HAL_GetTick>
 8003198:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800319a:	4e71      	ldr	r6, [pc, #452]	; (8003360 <HAL_RCC_OscConfig+0x294>)
 800319c:	6833      	ldr	r3, [r6, #0]
 800319e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80031a2:	d1cb      	bne.n	800313c <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031a4:	f7ff f9a8 	bl	80024f8 <HAL_GetTick>
 80031a8:	1b40      	subs	r0, r0, r5
 80031aa:	2864      	cmp	r0, #100	; 0x64
 80031ac:	d9f6      	bls.n	800319c <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 80031ae:	2003      	movs	r0, #3
 80031b0:	e197      	b.n	80034e2 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031b6:	d009      	beq.n	80031cc <HAL_RCC_OscConfig+0x100>
 80031b8:	4b69      	ldr	r3, [pc, #420]	; (8003360 <HAL_RCC_OscConfig+0x294>)
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	e7e1      	b.n	8003190 <HAL_RCC_OscConfig+0xc4>
 80031cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80031d0:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	e7d4      	b.n	8003190 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 80031e6:	f7ff f987 	bl	80024f8 <HAL_GetTick>
 80031ea:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ec:	4e5c      	ldr	r6, [pc, #368]	; (8003360 <HAL_RCC_OscConfig+0x294>)
 80031ee:	6833      	ldr	r3, [r6, #0]
 80031f0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80031f4:	d0a2      	beq.n	800313c <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031f6:	f7ff f97f 	bl	80024f8 <HAL_GetTick>
 80031fa:	1b40      	subs	r0, r0, r5
 80031fc:	2864      	cmp	r0, #100	; 0x64
 80031fe:	d9f6      	bls.n	80031ee <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 8003200:	2003      	movs	r0, #3
 8003202:	e16e      	b.n	80034e2 <HAL_RCC_OscConfig+0x416>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003204:	4b56      	ldr	r3, [pc, #344]	; (8003360 <HAL_RCC_OscConfig+0x294>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800320c:	d1a5      	bne.n	800315a <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800320e:	4b54      	ldr	r3, [pc, #336]	; (8003360 <HAL_RCC_OscConfig+0x294>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f013 0f02 	tst.w	r3, #2
 8003216:	d003      	beq.n	8003220 <HAL_RCC_OscConfig+0x154>
 8003218:	6923      	ldr	r3, [r4, #16]
 800321a:	2b01      	cmp	r3, #1
 800321c:	f040 815e 	bne.w	80034dc <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003220:	4a4f      	ldr	r2, [pc, #316]	; (8003360 <HAL_RCC_OscConfig+0x294>)
 8003222:	6813      	ldr	r3, [r2, #0]
 8003224:	6961      	ldr	r1, [r4, #20]
 8003226:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800322a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800322e:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003230:	6823      	ldr	r3, [r4, #0]
 8003232:	f013 0f08 	tst.w	r3, #8
 8003236:	d03d      	beq.n	80032b4 <HAL_RCC_OscConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003238:	69a3      	ldr	r3, [r4, #24]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d066      	beq.n	800330c <HAL_RCC_OscConfig+0x240>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800323e:	4b49      	ldr	r3, [pc, #292]	; (8003364 <HAL_RCC_OscConfig+0x298>)
 8003240:	2201      	movs	r2, #1
 8003242:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003246:	f7ff f957 	bl	80024f8 <HAL_GetTick>
 800324a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800324c:	4e44      	ldr	r6, [pc, #272]	; (8003360 <HAL_RCC_OscConfig+0x294>)
 800324e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003250:	f013 0f02 	tst.w	r3, #2
 8003254:	d121      	bne.n	800329a <HAL_RCC_OscConfig+0x1ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003256:	f7ff f94f 	bl	80024f8 <HAL_GetTick>
 800325a:	1b40      	subs	r0, r0, r5
 800325c:	2802      	cmp	r0, #2
 800325e:	d9f6      	bls.n	800324e <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 8003260:	2003      	movs	r0, #3
 8003262:	e13e      	b.n	80034e2 <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003264:	4a3e      	ldr	r2, [pc, #248]	; (8003360 <HAL_RCC_OscConfig+0x294>)
 8003266:	6813      	ldr	r3, [r2, #0]
 8003268:	6961      	ldr	r1, [r4, #20]
 800326a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800326e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003272:	6013      	str	r3, [r2, #0]
 8003274:	e7dc      	b.n	8003230 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8003276:	4b3b      	ldr	r3, [pc, #236]	; (8003364 <HAL_RCC_OscConfig+0x298>)
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800327c:	f7ff f93c 	bl	80024f8 <HAL_GetTick>
 8003280:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003282:	4e37      	ldr	r6, [pc, #220]	; (8003360 <HAL_RCC_OscConfig+0x294>)
 8003284:	6833      	ldr	r3, [r6, #0]
 8003286:	f013 0f02 	tst.w	r3, #2
 800328a:	d0d1      	beq.n	8003230 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800328c:	f7ff f934 	bl	80024f8 <HAL_GetTick>
 8003290:	1b40      	subs	r0, r0, r5
 8003292:	2802      	cmp	r0, #2
 8003294:	d9f6      	bls.n	8003284 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 8003296:	2003      	movs	r0, #3
 8003298:	e123      	b.n	80034e2 <HAL_RCC_OscConfig+0x416>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800329a:	4b33      	ldr	r3, [pc, #204]	; (8003368 <HAL_RCC_OscConfig+0x29c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a33      	ldr	r2, [pc, #204]	; (800336c <HAL_RCC_OscConfig+0x2a0>)
 80032a0:	fba2 2303 	umull	r2, r3, r2, r3
 80032a4:	0a5b      	lsrs	r3, r3, #9
 80032a6:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80032a8:	bf00      	nop
  }
  while (Delay --);
 80032aa:	9b01      	ldr	r3, [sp, #4]
 80032ac:	1e5a      	subs	r2, r3, #1
 80032ae:	9201      	str	r2, [sp, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1f9      	bne.n	80032a8 <HAL_RCC_OscConfig+0x1dc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032b4:	6823      	ldr	r3, [r4, #0]
 80032b6:	f013 0f04 	tst.w	r3, #4
 80032ba:	f000 809b 	beq.w	80033f4 <HAL_RCC_OscConfig+0x328>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032be:	4b28      	ldr	r3, [pc, #160]	; (8003360 <HAL_RCC_OscConfig+0x294>)
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80032c6:	d134      	bne.n	8003332 <HAL_RCC_OscConfig+0x266>
      __HAL_RCC_PWR_CLK_ENABLE();
 80032c8:	4b25      	ldr	r3, [pc, #148]	; (8003360 <HAL_RCC_OscConfig+0x294>)
 80032ca:	69da      	ldr	r2, [r3, #28]
 80032cc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80032d0:	61da      	str	r2, [r3, #28]
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 80032dc:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032de:	4b24      	ldr	r3, [pc, #144]	; (8003370 <HAL_RCC_OscConfig+0x2a4>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80032e6:	d026      	beq.n	8003336 <HAL_RCC_OscConfig+0x26a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032e8:	68e3      	ldr	r3, [r4, #12]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d042      	beq.n	8003374 <HAL_RCC_OscConfig+0x2a8>
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d158      	bne.n	80033a4 <HAL_RCC_OscConfig+0x2d8>
 80032f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80032f6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80032fa:	6a1a      	ldr	r2, [r3, #32]
 80032fc:	f022 0201 	bic.w	r2, r2, #1
 8003300:	621a      	str	r2, [r3, #32]
 8003302:	6a1a      	ldr	r2, [r3, #32]
 8003304:	f022 0204 	bic.w	r2, r2, #4
 8003308:	621a      	str	r2, [r3, #32]
 800330a:	e038      	b.n	800337e <HAL_RCC_OscConfig+0x2b2>
      __HAL_RCC_LSI_DISABLE();
 800330c:	4b15      	ldr	r3, [pc, #84]	; (8003364 <HAL_RCC_OscConfig+0x298>)
 800330e:	2200      	movs	r2, #0
 8003310:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8003314:	f7ff f8f0 	bl	80024f8 <HAL_GetTick>
 8003318:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800331a:	4e11      	ldr	r6, [pc, #68]	; (8003360 <HAL_RCC_OscConfig+0x294>)
 800331c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800331e:	f013 0f02 	tst.w	r3, #2
 8003322:	d0c7      	beq.n	80032b4 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003324:	f7ff f8e8 	bl	80024f8 <HAL_GetTick>
 8003328:	1b40      	subs	r0, r0, r5
 800332a:	2802      	cmp	r0, #2
 800332c:	d9f6      	bls.n	800331c <HAL_RCC_OscConfig+0x250>
          return HAL_TIMEOUT;
 800332e:	2003      	movs	r0, #3
 8003330:	e0d7      	b.n	80034e2 <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 8003332:	2500      	movs	r5, #0
 8003334:	e7d3      	b.n	80032de <HAL_RCC_OscConfig+0x212>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003336:	4a0e      	ldr	r2, [pc, #56]	; (8003370 <HAL_RCC_OscConfig+0x2a4>)
 8003338:	6813      	ldr	r3, [r2, #0]
 800333a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800333e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003340:	f7ff f8da 	bl	80024f8 <HAL_GetTick>
 8003344:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003346:	4f0a      	ldr	r7, [pc, #40]	; (8003370 <HAL_RCC_OscConfig+0x2a4>)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800334e:	d1cb      	bne.n	80032e8 <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003350:	f7ff f8d2 	bl	80024f8 <HAL_GetTick>
 8003354:	1b80      	subs	r0, r0, r6
 8003356:	2864      	cmp	r0, #100	; 0x64
 8003358:	d9f6      	bls.n	8003348 <HAL_RCC_OscConfig+0x27c>
          return HAL_TIMEOUT;
 800335a:	2003      	movs	r0, #3
 800335c:	e0c1      	b.n	80034e2 <HAL_RCC_OscConfig+0x416>
 800335e:	bf00      	nop
 8003360:	40021000 	.word	0x40021000
 8003364:	42420000 	.word	0x42420000
 8003368:	20000000 	.word	0x20000000
 800336c:	10624dd3 	.word	0x10624dd3
 8003370:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003374:	4a5e      	ldr	r2, [pc, #376]	; (80034f0 <HAL_RCC_OscConfig+0x424>)
 8003376:	6a13      	ldr	r3, [r2, #32]
 8003378:	f043 0301 	orr.w	r3, r3, #1
 800337c:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800337e:	68e3      	ldr	r3, [r4, #12]
 8003380:	b333      	cbz	r3, 80033d0 <HAL_RCC_OscConfig+0x304>
      tickstart = HAL_GetTick();
 8003382:	f7ff f8b9 	bl	80024f8 <HAL_GetTick>
 8003386:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003388:	4f59      	ldr	r7, [pc, #356]	; (80034f0 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800338a:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	f013 0f02 	tst.w	r3, #2
 8003394:	d12d      	bne.n	80033f2 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003396:	f7ff f8af 	bl	80024f8 <HAL_GetTick>
 800339a:	1b80      	subs	r0, r0, r6
 800339c:	4540      	cmp	r0, r8
 800339e:	d9f6      	bls.n	800338e <HAL_RCC_OscConfig+0x2c2>
          return HAL_TIMEOUT;
 80033a0:	2003      	movs	r0, #3
 80033a2:	e09e      	b.n	80034e2 <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033a4:	2b05      	cmp	r3, #5
 80033a6:	d009      	beq.n	80033bc <HAL_RCC_OscConfig+0x2f0>
 80033a8:	4b51      	ldr	r3, [pc, #324]	; (80034f0 <HAL_RCC_OscConfig+0x424>)
 80033aa:	6a1a      	ldr	r2, [r3, #32]
 80033ac:	f022 0201 	bic.w	r2, r2, #1
 80033b0:	621a      	str	r2, [r3, #32]
 80033b2:	6a1a      	ldr	r2, [r3, #32]
 80033b4:	f022 0204 	bic.w	r2, r2, #4
 80033b8:	621a      	str	r2, [r3, #32]
 80033ba:	e7e0      	b.n	800337e <HAL_RCC_OscConfig+0x2b2>
 80033bc:	4b4c      	ldr	r3, [pc, #304]	; (80034f0 <HAL_RCC_OscConfig+0x424>)
 80033be:	6a1a      	ldr	r2, [r3, #32]
 80033c0:	f042 0204 	orr.w	r2, r2, #4
 80033c4:	621a      	str	r2, [r3, #32]
 80033c6:	6a1a      	ldr	r2, [r3, #32]
 80033c8:	f042 0201 	orr.w	r2, r2, #1
 80033cc:	621a      	str	r2, [r3, #32]
 80033ce:	e7d6      	b.n	800337e <HAL_RCC_OscConfig+0x2b2>
      tickstart = HAL_GetTick();
 80033d0:	f7ff f892 	bl	80024f8 <HAL_GetTick>
 80033d4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033d6:	4f46      	ldr	r7, [pc, #280]	; (80034f0 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033d8:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033dc:	6a3b      	ldr	r3, [r7, #32]
 80033de:	f013 0f02 	tst.w	r3, #2
 80033e2:	d006      	beq.n	80033f2 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033e4:	f7ff f888 	bl	80024f8 <HAL_GetTick>
 80033e8:	1b80      	subs	r0, r0, r6
 80033ea:	4540      	cmp	r0, r8
 80033ec:	d9f6      	bls.n	80033dc <HAL_RCC_OscConfig+0x310>
          return HAL_TIMEOUT;
 80033ee:	2003      	movs	r0, #3
 80033f0:	e077      	b.n	80034e2 <HAL_RCC_OscConfig+0x416>
    if (pwrclkchanged == SET)
 80033f2:	b9e5      	cbnz	r5, 800342e <HAL_RCC_OscConfig+0x362>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033f4:	69e3      	ldr	r3, [r4, #28]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d072      	beq.n	80034e0 <HAL_RCC_OscConfig+0x414>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033fa:	4a3d      	ldr	r2, [pc, #244]	; (80034f0 <HAL_RCC_OscConfig+0x424>)
 80033fc:	6852      	ldr	r2, [r2, #4]
 80033fe:	f002 020c 	and.w	r2, r2, #12
 8003402:	2a08      	cmp	r2, #8
 8003404:	d056      	beq.n	80034b4 <HAL_RCC_OscConfig+0x3e8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003406:	2b02      	cmp	r3, #2
 8003408:	d017      	beq.n	800343a <HAL_RCC_OscConfig+0x36e>
        __HAL_RCC_PLL_DISABLE();
 800340a:	4b3a      	ldr	r3, [pc, #232]	; (80034f4 <HAL_RCC_OscConfig+0x428>)
 800340c:	2200      	movs	r2, #0
 800340e:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003410:	f7ff f872 	bl	80024f8 <HAL_GetTick>
 8003414:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003416:	4d36      	ldr	r5, [pc, #216]	; (80034f0 <HAL_RCC_OscConfig+0x424>)
 8003418:	682b      	ldr	r3, [r5, #0]
 800341a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800341e:	d047      	beq.n	80034b0 <HAL_RCC_OscConfig+0x3e4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003420:	f7ff f86a 	bl	80024f8 <HAL_GetTick>
 8003424:	1b00      	subs	r0, r0, r4
 8003426:	2802      	cmp	r0, #2
 8003428:	d9f6      	bls.n	8003418 <HAL_RCC_OscConfig+0x34c>
            return HAL_TIMEOUT;
 800342a:	2003      	movs	r0, #3
 800342c:	e059      	b.n	80034e2 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 800342e:	4a30      	ldr	r2, [pc, #192]	; (80034f0 <HAL_RCC_OscConfig+0x424>)
 8003430:	69d3      	ldr	r3, [r2, #28]
 8003432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003436:	61d3      	str	r3, [r2, #28]
 8003438:	e7dc      	b.n	80033f4 <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_PLL_DISABLE();
 800343a:	4b2e      	ldr	r3, [pc, #184]	; (80034f4 <HAL_RCC_OscConfig+0x428>)
 800343c:	2200      	movs	r2, #0
 800343e:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003440:	f7ff f85a 	bl	80024f8 <HAL_GetTick>
 8003444:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003446:	4e2a      	ldr	r6, [pc, #168]	; (80034f0 <HAL_RCC_OscConfig+0x424>)
 8003448:	6833      	ldr	r3, [r6, #0]
 800344a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800344e:	d006      	beq.n	800345e <HAL_RCC_OscConfig+0x392>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003450:	f7ff f852 	bl	80024f8 <HAL_GetTick>
 8003454:	1b40      	subs	r0, r0, r5
 8003456:	2802      	cmp	r0, #2
 8003458:	d9f6      	bls.n	8003448 <HAL_RCC_OscConfig+0x37c>
            return HAL_TIMEOUT;
 800345a:	2003      	movs	r0, #3
 800345c:	e041      	b.n	80034e2 <HAL_RCC_OscConfig+0x416>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800345e:	6a23      	ldr	r3, [r4, #32]
 8003460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003464:	d01a      	beq.n	800349c <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003466:	4922      	ldr	r1, [pc, #136]	; (80034f0 <HAL_RCC_OscConfig+0x424>)
 8003468:	684a      	ldr	r2, [r1, #4]
 800346a:	6a23      	ldr	r3, [r4, #32]
 800346c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800346e:	4303      	orrs	r3, r0
 8003470:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8003474:	4313      	orrs	r3, r2
 8003476:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8003478:	4b1e      	ldr	r3, [pc, #120]	; (80034f4 <HAL_RCC_OscConfig+0x428>)
 800347a:	2201      	movs	r2, #1
 800347c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800347e:	f7ff f83b 	bl	80024f8 <HAL_GetTick>
 8003482:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003484:	4d1a      	ldr	r5, [pc, #104]	; (80034f0 <HAL_RCC_OscConfig+0x424>)
 8003486:	682b      	ldr	r3, [r5, #0]
 8003488:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800348c:	d10e      	bne.n	80034ac <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800348e:	f7ff f833 	bl	80024f8 <HAL_GetTick>
 8003492:	1b00      	subs	r0, r0, r4
 8003494:	2802      	cmp	r0, #2
 8003496:	d9f6      	bls.n	8003486 <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 8003498:	2003      	movs	r0, #3
 800349a:	e022      	b.n	80034e2 <HAL_RCC_OscConfig+0x416>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800349c:	4a14      	ldr	r2, [pc, #80]	; (80034f0 <HAL_RCC_OscConfig+0x424>)
 800349e:	6853      	ldr	r3, [r2, #4]
 80034a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80034a4:	68a1      	ldr	r1, [r4, #8]
 80034a6:	430b      	orrs	r3, r1
 80034a8:	6053      	str	r3, [r2, #4]
 80034aa:	e7dc      	b.n	8003466 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 80034ac:	2000      	movs	r0, #0
 80034ae:	e018      	b.n	80034e2 <HAL_RCC_OscConfig+0x416>
 80034b0:	2000      	movs	r0, #0
 80034b2:	e016      	b.n	80034e2 <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d017      	beq.n	80034e8 <HAL_RCC_OscConfig+0x41c>
        pll_config = RCC->CFGR;
 80034b8:	4b0d      	ldr	r3, [pc, #52]	; (80034f0 <HAL_RCC_OscConfig+0x424>)
 80034ba:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034bc:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80034c0:	6a22      	ldr	r2, [r4, #32]
 80034c2:	4291      	cmp	r1, r2
 80034c4:	d112      	bne.n	80034ec <HAL_RCC_OscConfig+0x420>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80034c6:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
        return HAL_ERROR;
 80034cc:	1a18      	subs	r0, r3, r0
 80034ce:	bf18      	it	ne
 80034d0:	2001      	movne	r0, #1
 80034d2:	e006      	b.n	80034e2 <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 80034d4:	2001      	movs	r0, #1
}
 80034d6:	4770      	bx	lr
        return HAL_ERROR;
 80034d8:	2001      	movs	r0, #1
 80034da:	e002      	b.n	80034e2 <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 80034dc:	2001      	movs	r0, #1
 80034de:	e000      	b.n	80034e2 <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 80034e0:	2000      	movs	r0, #0
}
 80034e2:	b002      	add	sp, #8
 80034e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 80034e8:	2001      	movs	r0, #1
 80034ea:	e7fa      	b.n	80034e2 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 80034ec:	2001      	movs	r0, #1
 80034ee:	e7f8      	b.n	80034e2 <HAL_RCC_OscConfig+0x416>
 80034f0:	40021000 	.word	0x40021000
 80034f4:	42420000 	.word	0x42420000

080034f8 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80034f8:	4b0f      	ldr	r3, [pc, #60]	; (8003538 <HAL_RCC_GetSysClockFreq+0x40>)
 80034fa:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80034fc:	f003 020c 	and.w	r2, r3, #12
 8003500:	2a08      	cmp	r2, #8
 8003502:	d001      	beq.n	8003508 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8003504:	480d      	ldr	r0, [pc, #52]	; (800353c <HAL_RCC_GetSysClockFreq+0x44>)
}
 8003506:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003508:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800350c:	490c      	ldr	r1, [pc, #48]	; (8003540 <HAL_RCC_GetSysClockFreq+0x48>)
 800350e:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003510:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003514:	d00b      	beq.n	800352e <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003516:	4b08      	ldr	r3, [pc, #32]	; (8003538 <HAL_RCC_GetSysClockFreq+0x40>)
 8003518:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800351a:	4a08      	ldr	r2, [pc, #32]	; (800353c <HAL_RCC_GetSysClockFreq+0x44>)
 800351c:	fb02 f000 	mul.w	r0, r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003520:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8003524:	4a07      	ldr	r2, [pc, #28]	; (8003544 <HAL_RCC_GetSysClockFreq+0x4c>)
 8003526:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003528:	fbb0 f0f3 	udiv	r0, r0, r3
 800352c:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800352e:	4b06      	ldr	r3, [pc, #24]	; (8003548 <HAL_RCC_GetSysClockFreq+0x50>)
 8003530:	fb03 f000 	mul.w	r0, r3, r0
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	40021000 	.word	0x40021000
 800353c:	007a1200 	.word	0x007a1200
 8003540:	080079a4 	.word	0x080079a4
 8003544:	080079b4 	.word	0x080079b4
 8003548:	003d0900 	.word	0x003d0900

0800354c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800354c:	2800      	cmp	r0, #0
 800354e:	f000 80a2 	beq.w	8003696 <HAL_RCC_ClockConfig+0x14a>
{
 8003552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003556:	460d      	mov	r5, r1
 8003558:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800355a:	4b53      	ldr	r3, [pc, #332]	; (80036a8 <HAL_RCC_ClockConfig+0x15c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0307 	and.w	r3, r3, #7
 8003562:	428b      	cmp	r3, r1
 8003564:	d20b      	bcs.n	800357e <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003566:	4a50      	ldr	r2, [pc, #320]	; (80036a8 <HAL_RCC_ClockConfig+0x15c>)
 8003568:	6813      	ldr	r3, [r2, #0]
 800356a:	f023 0307 	bic.w	r3, r3, #7
 800356e:	430b      	orrs	r3, r1
 8003570:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003572:	6813      	ldr	r3, [r2, #0]
 8003574:	f003 0307 	and.w	r3, r3, #7
 8003578:	428b      	cmp	r3, r1
 800357a:	f040 808e 	bne.w	800369a <HAL_RCC_ClockConfig+0x14e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800357e:	6823      	ldr	r3, [r4, #0]
 8003580:	f013 0f02 	tst.w	r3, #2
 8003584:	d017      	beq.n	80035b6 <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003586:	f013 0f04 	tst.w	r3, #4
 800358a:	d004      	beq.n	8003596 <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800358c:	4a47      	ldr	r2, [pc, #284]	; (80036ac <HAL_RCC_ClockConfig+0x160>)
 800358e:	6853      	ldr	r3, [r2, #4]
 8003590:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003594:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003596:	6823      	ldr	r3, [r4, #0]
 8003598:	f013 0f08 	tst.w	r3, #8
 800359c:	d004      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800359e:	4a43      	ldr	r2, [pc, #268]	; (80036ac <HAL_RCC_ClockConfig+0x160>)
 80035a0:	6853      	ldr	r3, [r2, #4]
 80035a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80035a6:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035a8:	4a40      	ldr	r2, [pc, #256]	; (80036ac <HAL_RCC_ClockConfig+0x160>)
 80035aa:	6853      	ldr	r3, [r2, #4]
 80035ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035b0:	68a1      	ldr	r1, [r4, #8]
 80035b2:	430b      	orrs	r3, r1
 80035b4:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035b6:	6823      	ldr	r3, [r4, #0]
 80035b8:	f013 0f01 	tst.w	r3, #1
 80035bc:	d031      	beq.n	8003622 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035be:	6862      	ldr	r2, [r4, #4]
 80035c0:	2a01      	cmp	r2, #1
 80035c2:	d020      	beq.n	8003606 <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035c4:	2a02      	cmp	r2, #2
 80035c6:	d025      	beq.n	8003614 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c8:	4b38      	ldr	r3, [pc, #224]	; (80036ac <HAL_RCC_ClockConfig+0x160>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f013 0f02 	tst.w	r3, #2
 80035d0:	d065      	beq.n	800369e <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035d2:	4936      	ldr	r1, [pc, #216]	; (80036ac <HAL_RCC_ClockConfig+0x160>)
 80035d4:	684b      	ldr	r3, [r1, #4]
 80035d6:	f023 0303 	bic.w	r3, r3, #3
 80035da:	4313      	orrs	r3, r2
 80035dc:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80035de:	f7fe ff8b 	bl	80024f8 <HAL_GetTick>
 80035e2:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035e4:	4f31      	ldr	r7, [pc, #196]	; (80036ac <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035e6:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f003 030c 	and.w	r3, r3, #12
 80035f0:	6862      	ldr	r2, [r4, #4]
 80035f2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80035f6:	d014      	beq.n	8003622 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f8:	f7fe ff7e 	bl	80024f8 <HAL_GetTick>
 80035fc:	1b80      	subs	r0, r0, r6
 80035fe:	4540      	cmp	r0, r8
 8003600:	d9f3      	bls.n	80035ea <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 8003602:	2003      	movs	r0, #3
 8003604:	e045      	b.n	8003692 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003606:	4b29      	ldr	r3, [pc, #164]	; (80036ac <HAL_RCC_ClockConfig+0x160>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800360e:	d1e0      	bne.n	80035d2 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8003610:	2001      	movs	r0, #1
 8003612:	e03e      	b.n	8003692 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003614:	4b25      	ldr	r3, [pc, #148]	; (80036ac <HAL_RCC_ClockConfig+0x160>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800361c:	d1d9      	bne.n	80035d2 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 800361e:	2001      	movs	r0, #1
 8003620:	e037      	b.n	8003692 <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003622:	4b21      	ldr	r3, [pc, #132]	; (80036a8 <HAL_RCC_ClockConfig+0x15c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0307 	and.w	r3, r3, #7
 800362a:	42ab      	cmp	r3, r5
 800362c:	d90a      	bls.n	8003644 <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362e:	4a1e      	ldr	r2, [pc, #120]	; (80036a8 <HAL_RCC_ClockConfig+0x15c>)
 8003630:	6813      	ldr	r3, [r2, #0]
 8003632:	f023 0307 	bic.w	r3, r3, #7
 8003636:	432b      	orrs	r3, r5
 8003638:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800363a:	6813      	ldr	r3, [r2, #0]
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	42ab      	cmp	r3, r5
 8003642:	d12e      	bne.n	80036a2 <HAL_RCC_ClockConfig+0x156>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003644:	6823      	ldr	r3, [r4, #0]
 8003646:	f013 0f04 	tst.w	r3, #4
 800364a:	d006      	beq.n	800365a <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800364c:	4a17      	ldr	r2, [pc, #92]	; (80036ac <HAL_RCC_ClockConfig+0x160>)
 800364e:	6853      	ldr	r3, [r2, #4]
 8003650:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003654:	68e1      	ldr	r1, [r4, #12]
 8003656:	430b      	orrs	r3, r1
 8003658:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800365a:	6823      	ldr	r3, [r4, #0]
 800365c:	f013 0f08 	tst.w	r3, #8
 8003660:	d007      	beq.n	8003672 <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003662:	4a12      	ldr	r2, [pc, #72]	; (80036ac <HAL_RCC_ClockConfig+0x160>)
 8003664:	6853      	ldr	r3, [r2, #4]
 8003666:	6921      	ldr	r1, [r4, #16]
 8003668:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800366c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003670:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003672:	f7ff ff41 	bl	80034f8 <HAL_RCC_GetSysClockFreq>
 8003676:	4b0d      	ldr	r3, [pc, #52]	; (80036ac <HAL_RCC_ClockConfig+0x160>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800367e:	4a0c      	ldr	r2, [pc, #48]	; (80036b0 <HAL_RCC_ClockConfig+0x164>)
 8003680:	5cd3      	ldrb	r3, [r2, r3]
 8003682:	40d8      	lsrs	r0, r3
 8003684:	4b0b      	ldr	r3, [pc, #44]	; (80036b4 <HAL_RCC_ClockConfig+0x168>)
 8003686:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003688:	4b0b      	ldr	r3, [pc, #44]	; (80036b8 <HAL_RCC_ClockConfig+0x16c>)
 800368a:	6818      	ldr	r0, [r3, #0]
 800368c:	f7fe fe72 	bl	8002374 <HAL_InitTick>
  return HAL_OK;
 8003690:	2000      	movs	r0, #0
}
 8003692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8003696:	2001      	movs	r0, #1
}
 8003698:	4770      	bx	lr
    return HAL_ERROR;
 800369a:	2001      	movs	r0, #1
 800369c:	e7f9      	b.n	8003692 <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 800369e:	2001      	movs	r0, #1
 80036a0:	e7f7      	b.n	8003692 <HAL_RCC_ClockConfig+0x146>
    return HAL_ERROR;
 80036a2:	2001      	movs	r0, #1
 80036a4:	e7f5      	b.n	8003692 <HAL_RCC_ClockConfig+0x146>
 80036a6:	bf00      	nop
 80036a8:	40022000 	.word	0x40022000
 80036ac:	40021000 	.word	0x40021000
 80036b0:	0800798c 	.word	0x0800798c
 80036b4:	20000000 	.word	0x20000000
 80036b8:	20000008 	.word	0x20000008

080036bc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036bc:	4b04      	ldr	r3, [pc, #16]	; (80036d0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80036c4:	4a03      	ldr	r2, [pc, #12]	; (80036d4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80036c6:	5cd3      	ldrb	r3, [r2, r3]
 80036c8:	4a03      	ldr	r2, [pc, #12]	; (80036d8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80036ca:	6810      	ldr	r0, [r2, #0]
}
 80036cc:	40d8      	lsrs	r0, r3
 80036ce:	4770      	bx	lr
 80036d0:	40021000 	.word	0x40021000
 80036d4:	0800799c 	.word	0x0800799c
 80036d8:	20000000 	.word	0x20000000

080036dc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036dc:	4b04      	ldr	r3, [pc, #16]	; (80036f0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80036e4:	4a03      	ldr	r2, [pc, #12]	; (80036f4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80036e6:	5cd3      	ldrb	r3, [r2, r3]
 80036e8:	4a03      	ldr	r2, [pc, #12]	; (80036f8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80036ea:	6810      	ldr	r0, [r2, #0]
}
 80036ec:	40d8      	lsrs	r0, r3
 80036ee:	4770      	bx	lr
 80036f0:	40021000 	.word	0x40021000
 80036f4:	0800799c 	.word	0x0800799c
 80036f8:	20000000 	.word	0x20000000

080036fc <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80036fc:	230f      	movs	r3, #15
 80036fe:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003700:	4b0b      	ldr	r3, [pc, #44]	; (8003730 <HAL_RCC_GetClockConfig+0x34>)
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	f002 0203 	and.w	r2, r2, #3
 8003708:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003710:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003718:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	08db      	lsrs	r3, r3, #3
 800371e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003722:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003724:	4b03      	ldr	r3, [pc, #12]	; (8003734 <HAL_RCC_GetClockConfig+0x38>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	600b      	str	r3, [r1, #0]
}
 800372e:	4770      	bx	lr
 8003730:	40021000 	.word	0x40021000
 8003734:	40022000 	.word	0x40022000

08003738 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800373c:	b082      	sub	sp, #8
 800373e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003740:	6803      	ldr	r3, [r0, #0]
 8003742:	f013 0f01 	tst.w	r3, #1
 8003746:	d036      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003748:	4b3f      	ldr	r3, [pc, #252]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003750:	d149      	bne.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xae>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003752:	4b3d      	ldr	r3, [pc, #244]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003754:	69da      	ldr	r2, [r3, #28]
 8003756:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800375a:	61da      	str	r2, [r3, #28]
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003762:	9301      	str	r3, [sp, #4]
 8003764:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003766:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003768:	4b38      	ldr	r3, [pc, #224]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003770:	d03b      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003772:	4b35      	ldr	r3, [pc, #212]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003774:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003776:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800377a:	d013      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800377c:	6862      	ldr	r2, [r4, #4]
 800377e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003782:	429a      	cmp	r2, r3
 8003784:	d00e      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003786:	4a30      	ldr	r2, [pc, #192]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003788:	6a13      	ldr	r3, [r2, #32]
 800378a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800378e:	4930      	ldr	r1, [pc, #192]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003790:	2601      	movs	r6, #1
 8003792:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003796:	2600      	movs	r6, #0
 8003798:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800379c:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800379e:	f013 0f01 	tst.w	r3, #1
 80037a2:	d136      	bne.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0xda>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037a4:	4a28      	ldr	r2, [pc, #160]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80037a6:	6a13      	ldr	r3, [r2, #32]
 80037a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ac:	6861      	ldr	r1, [r4, #4]
 80037ae:	430b      	orrs	r3, r1
 80037b0:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037b2:	2d00      	cmp	r5, #0
 80037b4:	d13e      	bne.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037b6:	6823      	ldr	r3, [r4, #0]
 80037b8:	f013 0f02 	tst.w	r3, #2
 80037bc:	d006      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037be:	4a22      	ldr	r2, [pc, #136]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80037c0:	6853      	ldr	r3, [r2, #4]
 80037c2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80037c6:	68a1      	ldr	r1, [r4, #8]
 80037c8:	430b      	orrs	r3, r1
 80037ca:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037cc:	6823      	ldr	r3, [r4, #0]
 80037ce:	f013 0f10 	tst.w	r3, #16
 80037d2:	d034      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037d4:	4a1c      	ldr	r2, [pc, #112]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80037d6:	6853      	ldr	r3, [r2, #4]
 80037d8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80037dc:	68e1      	ldr	r1, [r4, #12]
 80037de:	430b      	orrs	r3, r1
 80037e0:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80037e2:	2000      	movs	r0, #0
 80037e4:	e02c      	b.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x108>
    FlagStatus pwrclkchanged = RESET;
 80037e6:	2500      	movs	r5, #0
 80037e8:	e7be      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037ea:	4a18      	ldr	r2, [pc, #96]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80037ec:	6813      	ldr	r3, [r2, #0]
 80037ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037f2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80037f4:	f7fe fe80 	bl	80024f8 <HAL_GetTick>
 80037f8:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037fa:	4f14      	ldr	r7, [pc, #80]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003802:	d1b6      	bne.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003804:	f7fe fe78 	bl	80024f8 <HAL_GetTick>
 8003808:	1b80      	subs	r0, r0, r6
 800380a:	2864      	cmp	r0, #100	; 0x64
 800380c:	d9f6      	bls.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0xc4>
          return HAL_TIMEOUT;
 800380e:	2003      	movs	r0, #3
 8003810:	e016      	b.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x108>
        tickstart = HAL_GetTick();
 8003812:	f7fe fe71 	bl	80024f8 <HAL_GetTick>
 8003816:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003818:	4f0b      	ldr	r7, [pc, #44]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x110>)
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800381a:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800381e:	6a3b      	ldr	r3, [r7, #32]
 8003820:	f013 0f02 	tst.w	r3, #2
 8003824:	d1be      	bne.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003826:	f7fe fe67 	bl	80024f8 <HAL_GetTick>
 800382a:	1b80      	subs	r0, r0, r6
 800382c:	4540      	cmp	r0, r8
 800382e:	d9f6      	bls.n	800381e <HAL_RCCEx_PeriphCLKConfig+0xe6>
            return HAL_TIMEOUT;
 8003830:	2003      	movs	r0, #3
 8003832:	e005      	b.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x108>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003834:	69d3      	ldr	r3, [r2, #28]
 8003836:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800383a:	61d3      	str	r3, [r2, #28]
 800383c:	e7bb      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
  return HAL_OK;
 800383e:	2000      	movs	r0, #0
}
 8003840:	b002      	add	sp, #8
 8003842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003846:	bf00      	nop
 8003848:	40021000 	.word	0x40021000
 800384c:	40007000 	.word	0x40007000
 8003850:	42420000 	.word	0x42420000

08003854 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003854:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003856:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003858:	6a02      	ldr	r2, [r0, #32]
 800385a:	f022 0201 	bic.w	r2, r2, #1
 800385e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003860:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003862:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003864:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003868:	680d      	ldr	r5, [r1, #0]
 800386a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800386c:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003870:	688d      	ldr	r5, [r1, #8]
 8003872:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003874:	4d0b      	ldr	r5, [pc, #44]	; (80038a4 <TIM_OC1_SetConfig+0x50>)
 8003876:	42a8      	cmp	r0, r5
 8003878:	d006      	beq.n	8003888 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800387a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800387c:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800387e:	684a      	ldr	r2, [r1, #4]
 8003880:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003882:	6203      	str	r3, [r0, #32]
}
 8003884:	bc70      	pop	{r4, r5, r6}
 8003886:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8003888:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800388c:	68cd      	ldr	r5, [r1, #12]
 800388e:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8003890:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003894:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8003898:	694d      	ldr	r5, [r1, #20]
 800389a:	698e      	ldr	r6, [r1, #24]
 800389c:	4335      	orrs	r5, r6
 800389e:	432c      	orrs	r4, r5
 80038a0:	e7eb      	b.n	800387a <TIM_OC1_SetConfig+0x26>
 80038a2:	bf00      	nop
 80038a4:	40012c00 	.word	0x40012c00

080038a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038a8:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038aa:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038ac:	6a02      	ldr	r2, [r0, #32]
 80038ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038b2:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038b4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038b6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038b8:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038bc:	680d      	ldr	r5, [r1, #0]
 80038be:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038c4:	688d      	ldr	r5, [r1, #8]
 80038c6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038ca:	4d0c      	ldr	r5, [pc, #48]	; (80038fc <TIM_OC3_SetConfig+0x54>)
 80038cc:	42a8      	cmp	r0, r5
 80038ce:	d006      	beq.n	80038de <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038d0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038d2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038d4:	684a      	ldr	r2, [r1, #4]
 80038d6:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038d8:	6203      	str	r3, [r0, #32]
}
 80038da:	bc70      	pop	{r4, r5, r6}
 80038dc:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 80038de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038e2:	68cd      	ldr	r5, [r1, #12]
 80038e4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80038e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038ec:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038f0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038f2:	698e      	ldr	r6, [r1, #24]
 80038f4:	4335      	orrs	r5, r6
 80038f6:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 80038fa:	e7e9      	b.n	80038d0 <TIM_OC3_SetConfig+0x28>
 80038fc:	40012c00 	.word	0x40012c00

08003900 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003900:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003902:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003904:	6a02      	ldr	r2, [r0, #32]
 8003906:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800390a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800390c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800390e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003910:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003914:	680d      	ldr	r5, [r1, #0]
 8003916:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800391a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800391e:	688d      	ldr	r5, [r1, #8]
 8003920:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003924:	4d07      	ldr	r5, [pc, #28]	; (8003944 <TIM_OC4_SetConfig+0x44>)
 8003926:	42a8      	cmp	r0, r5
 8003928:	d006      	beq.n	8003938 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800392a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800392c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800392e:	684a      	ldr	r2, [r1, #4]
 8003930:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003932:	6203      	str	r3, [r0, #32]
}
 8003934:	bc30      	pop	{r4, r5}
 8003936:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003938:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800393c:	694d      	ldr	r5, [r1, #20]
 800393e:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8003942:	e7f2      	b.n	800392a <TIM_OC4_SetConfig+0x2a>
 8003944:	40012c00 	.word	0x40012c00

08003948 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003948:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b01      	cmp	r3, #1
 8003950:	d127      	bne.n	80039a2 <HAL_TIM_Base_Start_IT+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003952:	2302      	movs	r3, #2
 8003954:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003958:	6802      	ldr	r2, [r0, #0]
 800395a:	68d3      	ldr	r3, [r2, #12]
 800395c:	f043 0301 	orr.w	r3, r3, #1
 8003960:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003962:	6803      	ldr	r3, [r0, #0]
 8003964:	4a11      	ldr	r2, [pc, #68]	; (80039ac <HAL_TIM_Base_Start_IT+0x64>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d010      	beq.n	800398c <HAL_TIM_Base_Start_IT+0x44>
 800396a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800396e:	d00d      	beq.n	800398c <HAL_TIM_Base_Start_IT+0x44>
 8003970:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003974:	4293      	cmp	r3, r2
 8003976:	d009      	beq.n	800398c <HAL_TIM_Base_Start_IT+0x44>
 8003978:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800397c:	4293      	cmp	r3, r2
 800397e:	d005      	beq.n	800398c <HAL_TIM_Base_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	f042 0201 	orr.w	r2, r2, #1
 8003986:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003988:	2000      	movs	r0, #0
 800398a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800398c:	689a      	ldr	r2, [r3, #8]
 800398e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003992:	2a06      	cmp	r2, #6
 8003994:	d007      	beq.n	80039a6 <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	f042 0201 	orr.w	r2, r2, #1
 800399c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800399e:	2000      	movs	r0, #0
 80039a0:	4770      	bx	lr
    return HAL_ERROR;
 80039a2:	2001      	movs	r0, #1
 80039a4:	4770      	bx	lr
  return HAL_OK;
 80039a6:	2000      	movs	r0, #0
}
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	40012c00 	.word	0x40012c00

080039b0 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80039b0:	6802      	ldr	r2, [r0, #0]
 80039b2:	68d3      	ldr	r3, [r2, #12]
 80039b4:	f023 0301 	bic.w	r3, r3, #1
 80039b8:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 80039ba:	6803      	ldr	r3, [r0, #0]
 80039bc:	6a19      	ldr	r1, [r3, #32]
 80039be:	f241 1211 	movw	r2, #4369	; 0x1111
 80039c2:	4211      	tst	r1, r2
 80039c4:	d108      	bne.n	80039d8 <HAL_TIM_Base_Stop_IT+0x28>
 80039c6:	6a19      	ldr	r1, [r3, #32]
 80039c8:	f240 4244 	movw	r2, #1092	; 0x444
 80039cc:	4211      	tst	r1, r2
 80039ce:	d103      	bne.n	80039d8 <HAL_TIM_Base_Stop_IT+0x28>
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	f022 0201 	bic.w	r2, r2, #1
 80039d6:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80039d8:	2301      	movs	r3, #1
 80039da:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 80039de:	2000      	movs	r0, #0
 80039e0:	4770      	bx	lr

080039e2 <HAL_TIM_PWM_MspInit>:
}
 80039e2:	4770      	bx	lr

080039e4 <HAL_TIM_OC_DelayElapsedCallback>:
}
 80039e4:	4770      	bx	lr

080039e6 <HAL_TIM_IC_CaptureCallback>:
}
 80039e6:	4770      	bx	lr

080039e8 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80039e8:	4770      	bx	lr

080039ea <HAL_TIM_TriggerCallback>:
}
 80039ea:	4770      	bx	lr

080039ec <HAL_TIM_IRQHandler>:
{
 80039ec:	b510      	push	{r4, lr}
 80039ee:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039f0:	6803      	ldr	r3, [r0, #0]
 80039f2:	691a      	ldr	r2, [r3, #16]
 80039f4:	f012 0f02 	tst.w	r2, #2
 80039f8:	d011      	beq.n	8003a1e <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039fa:	68da      	ldr	r2, [r3, #12]
 80039fc:	f012 0f02 	tst.w	r2, #2
 8003a00:	d00d      	beq.n	8003a1e <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a02:	f06f 0202 	mvn.w	r2, #2
 8003a06:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a0c:	6803      	ldr	r3, [r0, #0]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	f013 0f03 	tst.w	r3, #3
 8003a14:	d070      	beq.n	8003af8 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8003a16:	f7ff ffe6 	bl	80039e6 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a1e:	6823      	ldr	r3, [r4, #0]
 8003a20:	691a      	ldr	r2, [r3, #16]
 8003a22:	f012 0f04 	tst.w	r2, #4
 8003a26:	d012      	beq.n	8003a4e <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a28:	68da      	ldr	r2, [r3, #12]
 8003a2a:	f012 0f04 	tst.w	r2, #4
 8003a2e:	d00e      	beq.n	8003a4e <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a30:	f06f 0204 	mvn.w	r2, #4
 8003a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a36:	2302      	movs	r3, #2
 8003a38:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a3a:	6823      	ldr	r3, [r4, #0]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003a42:	d05f      	beq.n	8003b04 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8003a44:	4620      	mov	r0, r4
 8003a46:	f7ff ffce 	bl	80039e6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a4e:	6823      	ldr	r3, [r4, #0]
 8003a50:	691a      	ldr	r2, [r3, #16]
 8003a52:	f012 0f08 	tst.w	r2, #8
 8003a56:	d012      	beq.n	8003a7e <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a58:	68da      	ldr	r2, [r3, #12]
 8003a5a:	f012 0f08 	tst.w	r2, #8
 8003a5e:	d00e      	beq.n	8003a7e <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a60:	f06f 0208 	mvn.w	r2, #8
 8003a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a66:	2304      	movs	r3, #4
 8003a68:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a6a:	6823      	ldr	r3, [r4, #0]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	f013 0f03 	tst.w	r3, #3
 8003a72:	d04e      	beq.n	8003b12 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8003a74:	4620      	mov	r0, r4
 8003a76:	f7ff ffb6 	bl	80039e6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a7e:	6823      	ldr	r3, [r4, #0]
 8003a80:	691a      	ldr	r2, [r3, #16]
 8003a82:	f012 0f10 	tst.w	r2, #16
 8003a86:	d012      	beq.n	8003aae <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a88:	68da      	ldr	r2, [r3, #12]
 8003a8a:	f012 0f10 	tst.w	r2, #16
 8003a8e:	d00e      	beq.n	8003aae <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a90:	f06f 0210 	mvn.w	r2, #16
 8003a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a96:	2308      	movs	r3, #8
 8003a98:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a9a:	6823      	ldr	r3, [r4, #0]
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003aa2:	d03d      	beq.n	8003b20 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8003aa4:	4620      	mov	r0, r4
 8003aa6:	f7ff ff9e 	bl	80039e6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003aae:	6823      	ldr	r3, [r4, #0]
 8003ab0:	691a      	ldr	r2, [r3, #16]
 8003ab2:	f012 0f01 	tst.w	r2, #1
 8003ab6:	d003      	beq.n	8003ac0 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ab8:	68da      	ldr	r2, [r3, #12]
 8003aba:	f012 0f01 	tst.w	r2, #1
 8003abe:	d136      	bne.n	8003b2e <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ac0:	6823      	ldr	r3, [r4, #0]
 8003ac2:	691a      	ldr	r2, [r3, #16]
 8003ac4:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003ac8:	d003      	beq.n	8003ad2 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003aca:	68da      	ldr	r2, [r3, #12]
 8003acc:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003ad0:	d134      	bne.n	8003b3c <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ad2:	6823      	ldr	r3, [r4, #0]
 8003ad4:	691a      	ldr	r2, [r3, #16]
 8003ad6:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003ada:	d003      	beq.n	8003ae4 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003adc:	68da      	ldr	r2, [r3, #12]
 8003ade:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003ae2:	d132      	bne.n	8003b4a <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ae4:	6823      	ldr	r3, [r4, #0]
 8003ae6:	691a      	ldr	r2, [r3, #16]
 8003ae8:	f012 0f20 	tst.w	r2, #32
 8003aec:	d003      	beq.n	8003af6 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003aee:	68da      	ldr	r2, [r3, #12]
 8003af0:	f012 0f20 	tst.w	r2, #32
 8003af4:	d130      	bne.n	8003b58 <HAL_TIM_IRQHandler+0x16c>
}
 8003af6:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003af8:	f7ff ff74 	bl	80039e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003afc:	4620      	mov	r0, r4
 8003afe:	f7ff ff73 	bl	80039e8 <HAL_TIM_PWM_PulseFinishedCallback>
 8003b02:	e78a      	b.n	8003a1a <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b04:	4620      	mov	r0, r4
 8003b06:	f7ff ff6d 	bl	80039e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b0a:	4620      	mov	r0, r4
 8003b0c:	f7ff ff6c 	bl	80039e8 <HAL_TIM_PWM_PulseFinishedCallback>
 8003b10:	e79b      	b.n	8003a4a <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b12:	4620      	mov	r0, r4
 8003b14:	f7ff ff66 	bl	80039e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b18:	4620      	mov	r0, r4
 8003b1a:	f7ff ff65 	bl	80039e8 <HAL_TIM_PWM_PulseFinishedCallback>
 8003b1e:	e7ac      	b.n	8003a7a <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b20:	4620      	mov	r0, r4
 8003b22:	f7ff ff5f 	bl	80039e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b26:	4620      	mov	r0, r4
 8003b28:	f7ff ff5e 	bl	80039e8 <HAL_TIM_PWM_PulseFinishedCallback>
 8003b2c:	e7bd      	b.n	8003aaa <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b2e:	f06f 0201 	mvn.w	r2, #1
 8003b32:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b34:	4620      	mov	r0, r4
 8003b36:	f7fe f81b 	bl	8001b70 <HAL_TIM_PeriodElapsedCallback>
 8003b3a:	e7c1      	b.n	8003ac0 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b40:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003b42:	4620      	mov	r0, r4
 8003b44:	f000 fafd 	bl	8004142 <HAL_TIMEx_BreakCallback>
 8003b48:	e7c3      	b.n	8003ad2 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b4e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003b50:	4620      	mov	r0, r4
 8003b52:	f7ff ff4a 	bl	80039ea <HAL_TIM_TriggerCallback>
 8003b56:	e7c5      	b.n	8003ae4 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b58:	f06f 0220 	mvn.w	r2, #32
 8003b5c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003b5e:	4620      	mov	r0, r4
 8003b60:	f000 faee 	bl	8004140 <HAL_TIMEx_CommutCallback>
}
 8003b64:	e7c7      	b.n	8003af6 <HAL_TIM_IRQHandler+0x10a>
	...

08003b68 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003b68:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b6a:	4a25      	ldr	r2, [pc, #148]	; (8003c00 <TIM_Base_SetConfig+0x98>)
 8003b6c:	4290      	cmp	r0, r2
 8003b6e:	d014      	beq.n	8003b9a <TIM_Base_SetConfig+0x32>
 8003b70:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003b74:	d02b      	beq.n	8003bce <TIM_Base_SetConfig+0x66>
 8003b76:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003b7a:	4290      	cmp	r0, r2
 8003b7c:	d022      	beq.n	8003bc4 <TIM_Base_SetConfig+0x5c>
 8003b7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b82:	4290      	cmp	r0, r2
 8003b84:	d037      	beq.n	8003bf6 <TIM_Base_SetConfig+0x8e>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b8a:	694a      	ldr	r2, [r1, #20]
 8003b8c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003b8e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b90:	688b      	ldr	r3, [r1, #8]
 8003b92:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003b94:	680b      	ldr	r3, [r1, #0]
 8003b96:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b98:	e02a      	b.n	8003bf0 <TIM_Base_SetConfig+0x88>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003b9e:	684a      	ldr	r2, [r1, #4]
 8003ba0:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ba2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ba6:	68ca      	ldr	r2, [r1, #12]
 8003ba8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003baa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bae:	694a      	ldr	r2, [r1, #20]
 8003bb0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003bb2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bb4:	688b      	ldr	r3, [r1, #8]
 8003bb6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003bb8:	680b      	ldr	r3, [r1, #0]
 8003bba:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003bbc:	690a      	ldr	r2, [r1, #16]
 8003bbe:	4b10      	ldr	r3, [pc, #64]	; (8003c00 <TIM_Base_SetConfig+0x98>)
 8003bc0:	631a      	str	r2, [r3, #48]	; 0x30
 8003bc2:	e015      	b.n	8003bf0 <TIM_Base_SetConfig+0x88>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003bc8:	684a      	ldr	r2, [r1, #4]
 8003bca:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bcc:	e003      	b.n	8003bd6 <TIM_Base_SetConfig+0x6e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003bd2:	684a      	ldr	r2, [r1, #4]
 8003bd4:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bda:	68ca      	ldr	r2, [r1, #12]
 8003bdc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003be2:	694a      	ldr	r2, [r1, #20]
 8003be4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003be6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003be8:	688b      	ldr	r3, [r1, #8]
 8003bea:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003bec:	680b      	ldr	r3, [r1, #0]
 8003bee:	6283      	str	r3, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	6143      	str	r3, [r0, #20]
}
 8003bf4:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003bfa:	684a      	ldr	r2, [r1, #4]
 8003bfc:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bfe:	e7ea      	b.n	8003bd6 <TIM_Base_SetConfig+0x6e>
 8003c00:	40012c00 	.word	0x40012c00

08003c04 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003c04:	b340      	cbz	r0, 8003c58 <HAL_TIM_Base_Init+0x54>
{
 8003c06:	b510      	push	{r4, lr}
 8003c08:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003c0a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003c0e:	b1f3      	cbz	r3, 8003c4e <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003c10:	2302      	movs	r3, #2
 8003c12:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c16:	4621      	mov	r1, r4
 8003c18:	f851 0b04 	ldr.w	r0, [r1], #4
 8003c1c:	f7ff ffa4 	bl	8003b68 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c20:	2301      	movs	r3, #1
 8003c22:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c26:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003c2a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003c2e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003c32:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c36:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c3e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003c42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003c46:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003c4a:	2000      	movs	r0, #0
}
 8003c4c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003c4e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003c52:	f7fe fadb 	bl	800220c <HAL_TIM_Base_MspInit>
 8003c56:	e7db      	b.n	8003c10 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003c58:	2001      	movs	r0, #1
}
 8003c5a:	4770      	bx	lr

08003c5c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003c5c:	b340      	cbz	r0, 8003cb0 <HAL_TIM_PWM_Init+0x54>
{
 8003c5e:	b510      	push	{r4, lr}
 8003c60:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003c62:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003c66:	b1f3      	cbz	r3, 8003ca6 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003c68:	2302      	movs	r3, #2
 8003c6a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c6e:	4621      	mov	r1, r4
 8003c70:	f851 0b04 	ldr.w	r0, [r1], #4
 8003c74:	f7ff ff78 	bl	8003b68 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c7e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003c82:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003c86:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003c8a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c8e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c96:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003c9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003c9e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003ca2:	2000      	movs	r0, #0
}
 8003ca4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003ca6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003caa:	f7ff fe9a 	bl	80039e2 <HAL_TIM_PWM_MspInit>
 8003cae:	e7db      	b.n	8003c68 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8003cb0:	2001      	movs	r0, #1
}
 8003cb2:	4770      	bx	lr

08003cb4 <TIM_OC2_SetConfig>:
{
 8003cb4:	b470      	push	{r4, r5, r6}
  tmpccer = TIMx->CCER;
 8003cb6:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cb8:	6a02      	ldr	r2, [r0, #32]
 8003cba:	f022 0210 	bic.w	r2, r2, #16
 8003cbe:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003cc0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003cc2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cc4:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cc8:	680d      	ldr	r5, [r1, #0]
 8003cca:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8003cce:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cd2:	688d      	ldr	r5, [r1, #8]
 8003cd4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cd8:	4d0c      	ldr	r5, [pc, #48]	; (8003d0c <TIM_OC2_SetConfig+0x58>)
 8003cda:	42a8      	cmp	r0, r5
 8003cdc:	d006      	beq.n	8003cec <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 8003cde:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003ce0:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003ce2:	684a      	ldr	r2, [r1, #4]
 8003ce4:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003ce6:	6203      	str	r3, [r0, #32]
}
 8003ce8:	bc70      	pop	{r4, r5, r6}
 8003cea:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cf0:	68cd      	ldr	r5, [r1, #12]
 8003cf2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cfa:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003cfe:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d00:	698e      	ldr	r6, [r1, #24]
 8003d02:	4335      	orrs	r5, r6
 8003d04:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8003d08:	e7e9      	b.n	8003cde <TIM_OC2_SetConfig+0x2a>
 8003d0a:	bf00      	nop
 8003d0c:	40012c00 	.word	0x40012c00

08003d10 <HAL_TIM_PWM_ConfigChannel>:
{
 8003d10:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003d12:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d066      	beq.n	8003de8 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8003d1a:	4604      	mov	r4, r0
 8003d1c:	460d      	mov	r5, r1
 8003d1e:	2301      	movs	r3, #1
 8003d20:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8003d24:	2a0c      	cmp	r2, #12
 8003d26:	d85a      	bhi.n	8003dde <HAL_TIM_PWM_ConfigChannel+0xce>
 8003d28:	e8df f002 	tbb	[pc, r2]
 8003d2c:	59595907 	.word	0x59595907
 8003d30:	5959591b 	.word	0x5959591b
 8003d34:	59595930 	.word	0x59595930
 8003d38:	44          	.byte	0x44
 8003d39:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d3a:	6800      	ldr	r0, [r0, #0]
 8003d3c:	f7ff fd8a 	bl	8003854 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d40:	6822      	ldr	r2, [r4, #0]
 8003d42:	6993      	ldr	r3, [r2, #24]
 8003d44:	f043 0308 	orr.w	r3, r3, #8
 8003d48:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d4a:	6822      	ldr	r2, [r4, #0]
 8003d4c:	6993      	ldr	r3, [r2, #24]
 8003d4e:	f023 0304 	bic.w	r3, r3, #4
 8003d52:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d54:	6822      	ldr	r2, [r4, #0]
 8003d56:	6993      	ldr	r3, [r2, #24]
 8003d58:	6929      	ldr	r1, [r5, #16]
 8003d5a:	430b      	orrs	r3, r1
 8003d5c:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003d5e:	2000      	movs	r0, #0
      break;
 8003d60:	e03e      	b.n	8003de0 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d62:	6800      	ldr	r0, [r0, #0]
 8003d64:	f7ff ffa6 	bl	8003cb4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d68:	6822      	ldr	r2, [r4, #0]
 8003d6a:	6993      	ldr	r3, [r2, #24]
 8003d6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003d70:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d72:	6822      	ldr	r2, [r4, #0]
 8003d74:	6993      	ldr	r3, [r2, #24]
 8003d76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d7a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d7c:	6822      	ldr	r2, [r4, #0]
 8003d7e:	6993      	ldr	r3, [r2, #24]
 8003d80:	6929      	ldr	r1, [r5, #16]
 8003d82:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003d86:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003d88:	2000      	movs	r0, #0
      break;
 8003d8a:	e029      	b.n	8003de0 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d8c:	6800      	ldr	r0, [r0, #0]
 8003d8e:	f7ff fd8b 	bl	80038a8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d92:	6822      	ldr	r2, [r4, #0]
 8003d94:	69d3      	ldr	r3, [r2, #28]
 8003d96:	f043 0308 	orr.w	r3, r3, #8
 8003d9a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d9c:	6822      	ldr	r2, [r4, #0]
 8003d9e:	69d3      	ldr	r3, [r2, #28]
 8003da0:	f023 0304 	bic.w	r3, r3, #4
 8003da4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003da6:	6822      	ldr	r2, [r4, #0]
 8003da8:	69d3      	ldr	r3, [r2, #28]
 8003daa:	6929      	ldr	r1, [r5, #16]
 8003dac:	430b      	orrs	r3, r1
 8003dae:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003db0:	2000      	movs	r0, #0
      break;
 8003db2:	e015      	b.n	8003de0 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003db4:	6800      	ldr	r0, [r0, #0]
 8003db6:	f7ff fda3 	bl	8003900 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dba:	6822      	ldr	r2, [r4, #0]
 8003dbc:	69d3      	ldr	r3, [r2, #28]
 8003dbe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003dc2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dc4:	6822      	ldr	r2, [r4, #0]
 8003dc6:	69d3      	ldr	r3, [r2, #28]
 8003dc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dcc:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dce:	6822      	ldr	r2, [r4, #0]
 8003dd0:	69d3      	ldr	r3, [r2, #28]
 8003dd2:	6929      	ldr	r1, [r5, #16]
 8003dd4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003dd8:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003dda:	2000      	movs	r0, #0
      break;
 8003ddc:	e000      	b.n	8003de0 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8003dde:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8003de0:	2300      	movs	r3, #0
 8003de2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003de6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8003de8:	2002      	movs	r0, #2
 8003dea:	e7fc      	b.n	8003de6 <HAL_TIM_PWM_ConfigChannel+0xd6>

08003dec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003dec:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003dee:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003df0:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003df4:	430a      	orrs	r2, r1
 8003df6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003dfa:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dfe:	6082      	str	r2, [r0, #8]
}
 8003e00:	bc10      	pop	{r4}
 8003e02:	4770      	bx	lr

08003e04 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003e04:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	f000 80ae 	beq.w	8003f6a <HAL_TIM_ConfigClockSource+0x166>
{
 8003e0e:	b570      	push	{r4, r5, r6, lr}
 8003e10:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003e12:	2301      	movs	r3, #1
 8003e14:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003e18:	2302      	movs	r3, #2
 8003e1a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003e1e:	6802      	ldr	r2, [r0, #0]
 8003e20:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003e2a:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003e2c:	680b      	ldr	r3, [r1, #0]
 8003e2e:	2b60      	cmp	r3, #96	; 0x60
 8003e30:	d060      	beq.n	8003ef4 <HAL_TIM_ConfigClockSource+0xf0>
 8003e32:	d83d      	bhi.n	8003eb0 <HAL_TIM_ConfigClockSource+0xac>
 8003e34:	2b40      	cmp	r3, #64	; 0x40
 8003e36:	d079      	beq.n	8003f2c <HAL_TIM_ConfigClockSource+0x128>
 8003e38:	d91c      	bls.n	8003e74 <HAL_TIM_ConfigClockSource+0x70>
 8003e3a:	2b50      	cmp	r3, #80	; 0x50
 8003e3c:	d136      	bne.n	8003eac <HAL_TIM_ConfigClockSource+0xa8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e3e:	6803      	ldr	r3, [r0, #0]
 8003e40:	6848      	ldr	r0, [r1, #4]
 8003e42:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8003e44:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e46:	6a1a      	ldr	r2, [r3, #32]
 8003e48:	f022 0201 	bic.w	r2, r2, #1
 8003e4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e4e:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e50:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e54:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e58:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8003e5c:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8003e5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e60:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e62:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8003e64:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e6a:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8003e6e:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003e70:	2000      	movs	r0, #0
}
 8003e72:	e012      	b.n	8003e9a <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8003e74:	2b20      	cmp	r3, #32
 8003e76:	d002      	beq.n	8003e7e <HAL_TIM_ConfigClockSource+0x7a>
 8003e78:	d90b      	bls.n	8003e92 <HAL_TIM_ConfigClockSource+0x8e>
 8003e7a:	2b30      	cmp	r3, #48	; 0x30
 8003e7c:	d114      	bne.n	8003ea8 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e7e:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8003e80:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e82:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e86:	4313      	orrs	r3, r2
 8003e88:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8003e8c:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003e8e:	2000      	movs	r0, #0
}
 8003e90:	e003      	b.n	8003e9a <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8003e92:	f033 0210 	bics.w	r2, r3, #16
 8003e96:	d0f2      	beq.n	8003e7e <HAL_TIM_ConfigClockSource+0x7a>
 8003e98:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003ea6:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8003ea8:	2001      	movs	r0, #1
 8003eaa:	e7f6      	b.n	8003e9a <HAL_TIM_ConfigClockSource+0x96>
 8003eac:	2001      	movs	r0, #1
 8003eae:	e7f4      	b.n	8003e9a <HAL_TIM_ConfigClockSource+0x96>
 8003eb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eb4:	d055      	beq.n	8003f62 <HAL_TIM_ConfigClockSource+0x15e>
 8003eb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eba:	d10c      	bne.n	8003ed6 <HAL_TIM_ConfigClockSource+0xd2>
      TIM_ETR_SetConfig(htim->Instance,
 8003ebc:	68cb      	ldr	r3, [r1, #12]
 8003ebe:	684a      	ldr	r2, [r1, #4]
 8003ec0:	6889      	ldr	r1, [r1, #8]
 8003ec2:	6800      	ldr	r0, [r0, #0]
 8003ec4:	f7ff ff92 	bl	8003dec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ec8:	6822      	ldr	r2, [r4, #0]
 8003eca:	6893      	ldr	r3, [r2, #8]
 8003ecc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ed0:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003ed2:	2000      	movs	r0, #0
      break;
 8003ed4:	e7e1      	b.n	8003e9a <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8003ed6:	2b70      	cmp	r3, #112	; 0x70
 8003ed8:	d145      	bne.n	8003f66 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ETR_SetConfig(htim->Instance,
 8003eda:	68cb      	ldr	r3, [r1, #12]
 8003edc:	684a      	ldr	r2, [r1, #4]
 8003ede:	6889      	ldr	r1, [r1, #8]
 8003ee0:	6800      	ldr	r0, [r0, #0]
 8003ee2:	f7ff ff83 	bl	8003dec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003ee6:	6822      	ldr	r2, [r4, #0]
 8003ee8:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003eea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003eee:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003ef0:	2000      	movs	r0, #0
      break;
 8003ef2:	e7d2      	b.n	8003e9a <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ef4:	6803      	ldr	r3, [r0, #0]
 8003ef6:	684d      	ldr	r5, [r1, #4]
 8003ef8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8003efa:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003efc:	6a18      	ldr	r0, [r3, #32]
 8003efe:	f020 0010 	bic.w	r0, r0, #16
 8003f02:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f04:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f06:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f0a:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f0e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f12:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8003f16:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f18:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f1a:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8003f1c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f22:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8003f26:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003f28:	2000      	movs	r0, #0
}
 8003f2a:	e7b6      	b.n	8003e9a <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f2c:	6803      	ldr	r3, [r0, #0]
 8003f2e:	6848      	ldr	r0, [r1, #4]
 8003f30:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8003f32:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f34:	6a1a      	ldr	r2, [r3, #32]
 8003f36:	f022 0201 	bic.w	r2, r2, #1
 8003f3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f3c:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f3e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f42:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f46:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8003f4a:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8003f4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f4e:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f50:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8003f52:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f58:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8003f5c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003f5e:	2000      	movs	r0, #0
}
 8003f60:	e79b      	b.n	8003e9a <HAL_TIM_ConfigClockSource+0x96>
  HAL_StatusTypeDef status = HAL_OK;
 8003f62:	2000      	movs	r0, #0
 8003f64:	e799      	b.n	8003e9a <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8003f66:	2001      	movs	r0, #1
 8003f68:	e797      	b.n	8003e9a <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 8003f6a:	2002      	movs	r0, #2
}
 8003f6c:	4770      	bx	lr

08003f6e <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f6e:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f72:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f74:	f04f 0c01 	mov.w	ip, #1
 8003f78:	fa0c fc01 	lsl.w	ip, ip, r1
  TIMx->CCER &= ~tmp;
 8003f7c:	ea23 030c 	bic.w	r3, r3, ip
 8003f80:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f82:	6a03      	ldr	r3, [r0, #32]
 8003f84:	408a      	lsls	r2, r1
 8003f86:	431a      	orrs	r2, r3
 8003f88:	6202      	str	r2, [r0, #32]
}
 8003f8a:	4770      	bx	lr

08003f8c <HAL_TIM_PWM_Start>:
{
 8003f8c:	b510      	push	{r4, lr}
 8003f8e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f90:	4608      	mov	r0, r1
 8003f92:	bb01      	cbnz	r1, 8003fd6 <HAL_TIM_PWM_Start+0x4a>
 8003f94:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d152      	bne.n	8004044 <HAL_TIM_PWM_Start+0xb8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	4601      	mov	r1, r0
 8003fa8:	6820      	ldr	r0, [r4, #0]
 8003faa:	f7ff ffe0 	bl	8003f6e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fae:	6823      	ldr	r3, [r4, #0]
 8003fb0:	4a26      	ldr	r2, [pc, #152]	; (800404c <HAL_TIM_PWM_Start+0xc0>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d034      	beq.n	8004020 <HAL_TIM_PWM_Start+0x94>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fba:	d038      	beq.n	800402e <HAL_TIM_PWM_Start+0xa2>
 8003fbc:	4a24      	ldr	r2, [pc, #144]	; (8004050 <HAL_TIM_PWM_Start+0xc4>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d035      	beq.n	800402e <HAL_TIM_PWM_Start+0xa2>
 8003fc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d031      	beq.n	800402e <HAL_TIM_PWM_Start+0xa2>
    __HAL_TIM_ENABLE(htim);
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	f042 0201 	orr.w	r2, r2, #1
 8003fd0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003fd2:	2000      	movs	r0, #0
 8003fd4:	e035      	b.n	8004042 <HAL_TIM_PWM_Start+0xb6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003fd6:	2904      	cmp	r1, #4
 8003fd8:	d00c      	beq.n	8003ff4 <HAL_TIM_PWM_Start+0x68>
 8003fda:	2908      	cmp	r1, #8
 8003fdc:	bf0c      	ite	eq
 8003fde:	f894 3040 	ldrbeq.w	r3, [r4, #64]	; 0x40
 8003fe2:	f894 3041 	ldrbne.w	r3, [r4, #65]	; 0x41
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	bf18      	it	ne
 8003fec:	2301      	movne	r3, #1
 8003fee:	b143      	cbz	r3, 8004002 <HAL_TIM_PWM_Start+0x76>
    return HAL_ERROR;
 8003ff0:	2001      	movs	r0, #1
 8003ff2:	e026      	b.n	8004042 <HAL_TIM_PWM_Start+0xb6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ff4:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	bf18      	it	ne
 8003ffe:	2301      	movne	r3, #1
 8004000:	e7f5      	b.n	8003fee <HAL_TIM_PWM_Start+0x62>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004002:	2804      	cmp	r0, #4
 8004004:	d008      	beq.n	8004018 <HAL_TIM_PWM_Start+0x8c>
 8004006:	2808      	cmp	r0, #8
 8004008:	f04f 0302 	mov.w	r3, #2
 800400c:	bf0c      	ite	eq
 800400e:	f884 3040 	strbeq.w	r3, [r4, #64]	; 0x40
 8004012:	f884 3041 	strbne.w	r3, [r4, #65]	; 0x41
 8004016:	e7c5      	b.n	8003fa4 <HAL_TIM_PWM_Start+0x18>
 8004018:	2302      	movs	r3, #2
 800401a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800401e:	e7c1      	b.n	8003fa4 <HAL_TIM_PWM_Start+0x18>
    __HAL_TIM_MOE_ENABLE(htim);
 8004020:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8004022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004026:	6453      	str	r3, [r2, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004028:	6823      	ldr	r3, [r4, #0]
 800402a:	4293      	cmp	r3, r2
 800402c:	d1c3      	bne.n	8003fb6 <HAL_TIM_PWM_Start+0x2a>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004034:	2a06      	cmp	r2, #6
 8004036:	d007      	beq.n	8004048 <HAL_TIM_PWM_Start+0xbc>
      __HAL_TIM_ENABLE(htim);
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	f042 0201 	orr.w	r2, r2, #1
 800403e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004040:	2000      	movs	r0, #0
}
 8004042:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004044:	2001      	movs	r0, #1
 8004046:	e7fc      	b.n	8004042 <HAL_TIM_PWM_Start+0xb6>
  return HAL_OK;
 8004048:	2000      	movs	r0, #0
 800404a:	e7fa      	b.n	8004042 <HAL_TIM_PWM_Start+0xb6>
 800404c:	40012c00 	.word	0x40012c00
 8004050:	40000400 	.word	0x40000400

08004054 <HAL_TIM_PWM_Stop>:
{
 8004054:	b538      	push	{r3, r4, r5, lr}
 8004056:	4604      	mov	r4, r0
 8004058:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800405a:	2200      	movs	r2, #0
 800405c:	6800      	ldr	r0, [r0, #0]
 800405e:	f7ff ff86 	bl	8003f6e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004062:	6822      	ldr	r2, [r4, #0]
 8004064:	4b1b      	ldr	r3, [pc, #108]	; (80040d4 <HAL_TIM_PWM_Stop+0x80>)
 8004066:	429a      	cmp	r2, r3
 8004068:	d014      	beq.n	8004094 <HAL_TIM_PWM_Stop+0x40>
  __HAL_TIM_DISABLE(htim);
 800406a:	6823      	ldr	r3, [r4, #0]
 800406c:	6a19      	ldr	r1, [r3, #32]
 800406e:	f241 1211 	movw	r2, #4369	; 0x1111
 8004072:	4211      	tst	r1, r2
 8004074:	d108      	bne.n	8004088 <HAL_TIM_PWM_Stop+0x34>
 8004076:	6a19      	ldr	r1, [r3, #32]
 8004078:	f240 4244 	movw	r2, #1092	; 0x444
 800407c:	4211      	tst	r1, r2
 800407e:	d103      	bne.n	8004088 <HAL_TIM_PWM_Stop+0x34>
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	f022 0201 	bic.w	r2, r2, #1
 8004086:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004088:	b9ad      	cbnz	r5, 80040b6 <HAL_TIM_PWM_Stop+0x62>
 800408a:	2301      	movs	r3, #1
 800408c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8004090:	2000      	movs	r0, #0
 8004092:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 8004094:	6a1a      	ldr	r2, [r3, #32]
 8004096:	f241 1311 	movw	r3, #4369	; 0x1111
 800409a:	421a      	tst	r2, r3
 800409c:	d1e5      	bne.n	800406a <HAL_TIM_PWM_Stop+0x16>
 800409e:	4b0d      	ldr	r3, [pc, #52]	; (80040d4 <HAL_TIM_PWM_Stop+0x80>)
 80040a0:	6a1a      	ldr	r2, [r3, #32]
 80040a2:	f240 4344 	movw	r3, #1092	; 0x444
 80040a6:	421a      	tst	r2, r3
 80040a8:	d1df      	bne.n	800406a <HAL_TIM_PWM_Stop+0x16>
 80040aa:	4a0a      	ldr	r2, [pc, #40]	; (80040d4 <HAL_TIM_PWM_Stop+0x80>)
 80040ac:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80040ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80040b2:	6453      	str	r3, [r2, #68]	; 0x44
 80040b4:	e7d9      	b.n	800406a <HAL_TIM_PWM_Stop+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80040b6:	2d04      	cmp	r5, #4
 80040b8:	d008      	beq.n	80040cc <HAL_TIM_PWM_Stop+0x78>
 80040ba:	2d08      	cmp	r5, #8
 80040bc:	f04f 0301 	mov.w	r3, #1
 80040c0:	bf0c      	ite	eq
 80040c2:	f884 3040 	strbeq.w	r3, [r4, #64]	; 0x40
 80040c6:	f884 3041 	strbne.w	r3, [r4, #65]	; 0x41
 80040ca:	e7e1      	b.n	8004090 <HAL_TIM_PWM_Stop+0x3c>
 80040cc:	2301      	movs	r3, #1
 80040ce:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80040d2:	e7dd      	b.n	8004090 <HAL_TIM_PWM_Stop+0x3c>
 80040d4:	40012c00 	.word	0x40012c00

080040d8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040d8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d02b      	beq.n	8004138 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 80040e0:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80040e2:	2301      	movs	r3, #1
 80040e4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040e8:	2302      	movs	r3, #2
 80040ea:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040ee:	6804      	ldr	r4, [r0, #0]
 80040f0:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040f2:	68a2      	ldr	r2, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040f8:	680d      	ldr	r5, [r1, #0]
 80040fa:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040fc:	6063      	str	r3, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040fe:	6803      	ldr	r3, [r0, #0]
 8004100:	4c0e      	ldr	r4, [pc, #56]	; (800413c <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8004102:	42a3      	cmp	r3, r4
 8004104:	d00a      	beq.n	800411c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8004106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800410a:	d007      	beq.n	800411c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 800410c:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8004110:	42a3      	cmp	r3, r4
 8004112:	d003      	beq.n	800411c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8004114:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004118:	42a3      	cmp	r3, r4
 800411a:	d104      	bne.n	8004126 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800411c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004120:	6849      	ldr	r1, [r1, #4]
 8004122:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004124:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004126:	2301      	movs	r3, #1
 8004128:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800412c:	2300      	movs	r3, #0
 800412e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8004132:	4618      	mov	r0, r3
}
 8004134:	bc30      	pop	{r4, r5}
 8004136:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004138:	2002      	movs	r0, #2
}
 800413a:	4770      	bx	lr
 800413c:	40012c00 	.word	0x40012c00

08004140 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004140:	4770      	bx	lr

08004142 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004142:	4770      	bx	lr

08004144 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004144:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004146:	f102 030c 	add.w	r3, r2, #12
 800414a:	e853 3f00 	ldrex	r3, [r3]
 800414e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004152:	320c      	adds	r2, #12
 8004154:	e842 3100 	strex	r1, r3, [r2]
 8004158:	2900      	cmp	r1, #0
 800415a:	d1f3      	bne.n	8004144 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800415c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415e:	f102 0314 	add.w	r3, r2, #20
 8004162:	e853 3f00 	ldrex	r3, [r3]
 8004166:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416a:	3214      	adds	r2, #20
 800416c:	e842 3100 	strex	r1, r3, [r2]
 8004170:	2900      	cmp	r1, #0
 8004172:	d1f3      	bne.n	800415c <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004174:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004176:	2b01      	cmp	r3, #1
 8004178:	d005      	beq.n	8004186 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800417a:	2320      	movs	r3, #32
 800417c:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004180:	2300      	movs	r3, #0
 8004182:	6303      	str	r3, [r0, #48]	; 0x30
}
 8004184:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004186:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004188:	f102 030c 	add.w	r3, r2, #12
 800418c:	e853 3f00 	ldrex	r3, [r3]
 8004190:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004194:	320c      	adds	r2, #12
 8004196:	e842 3100 	strex	r1, r3, [r2]
 800419a:	2900      	cmp	r1, #0
 800419c:	d1f3      	bne.n	8004186 <UART_EndRxTransfer+0x42>
 800419e:	e7ec      	b.n	800417a <UART_EndRxTransfer+0x36>

080041a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041a0:	b510      	push	{r4, lr}
 80041a2:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041a4:	6802      	ldr	r2, [r0, #0]
 80041a6:	6913      	ldr	r3, [r2, #16]
 80041a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80041ac:	68c1      	ldr	r1, [r0, #12]
 80041ae:	430b      	orrs	r3, r1
 80041b0:	6113      	str	r3, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
  MODIFY_REG(huart->Instance->CR1,
 80041b2:	6801      	ldr	r1, [r0, #0]
 80041b4:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80041b6:	6883      	ldr	r3, [r0, #8]
 80041b8:	6900      	ldr	r0, [r0, #16]
 80041ba:	4303      	orrs	r3, r0
 80041bc:	6960      	ldr	r0, [r4, #20]
 80041be:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80041c0:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 80041c4:	f022 020c 	bic.w	r2, r2, #12
 80041c8:	4313      	orrs	r3, r2
 80041ca:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041cc:	6822      	ldr	r2, [r4, #0]
 80041ce:	6953      	ldr	r3, [r2, #20]
 80041d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041d4:	69a1      	ldr	r1, [r4, #24]
 80041d6:	430b      	orrs	r3, r1
 80041d8:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 80041da:	6822      	ldr	r2, [r4, #0]
 80041dc:	4b11      	ldr	r3, [pc, #68]	; (8004224 <UART_SetConfig+0x84>)
 80041de:	429a      	cmp	r2, r3
 80041e0:	d01b      	beq.n	800421a <UART_SetConfig+0x7a>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80041e2:	f7ff fa6b 	bl	80036bc <HAL_RCC_GetPCLK1Freq>
 80041e6:	4603      	mov	r3, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80041ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80041f0:	6862      	ldr	r2, [r4, #4]
 80041f2:	0092      	lsls	r2, r2, #2
 80041f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80041f8:	6820      	ldr	r0, [r4, #0]
 80041fa:	490b      	ldr	r1, [pc, #44]	; (8004228 <UART_SetConfig+0x88>)
 80041fc:	fba1 4203 	umull	r4, r2, r1, r3
 8004200:	0952      	lsrs	r2, r2, #5
 8004202:	2464      	movs	r4, #100	; 0x64
 8004204:	fb04 3312 	mls	r3, r4, r2, r3
 8004208:	011b      	lsls	r3, r3, #4
 800420a:	3332      	adds	r3, #50	; 0x32
 800420c:	fba1 1303 	umull	r1, r3, r1, r3
 8004210:	0112      	lsls	r2, r2, #4
 8004212:	eb02 1353 	add.w	r3, r2, r3, lsr #5
 8004216:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8004218:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 800421a:	f7ff fa5f 	bl	80036dc <HAL_RCC_GetPCLK2Freq>
 800421e:	4603      	mov	r3, r0
 8004220:	e7e2      	b.n	80041e8 <UART_SetConfig+0x48>
 8004222:	bf00      	nop
 8004224:	40013800 	.word	0x40013800
 8004228:	51eb851f 	.word	0x51eb851f

0800422c <HAL_UART_Init>:
  if (huart == NULL)
 800422c:	b360      	cbz	r0, 8004288 <HAL_UART_Init+0x5c>
{
 800422e:	b510      	push	{r4, lr}
 8004230:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004232:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004236:	b313      	cbz	r3, 800427e <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8004238:	2324      	movs	r3, #36	; 0x24
 800423a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 800423e:	6822      	ldr	r2, [r4, #0]
 8004240:	68d3      	ldr	r3, [r2, #12]
 8004242:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004246:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004248:	4620      	mov	r0, r4
 800424a:	f7ff ffa9 	bl	80041a0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800424e:	6822      	ldr	r2, [r4, #0]
 8004250:	6913      	ldr	r3, [r2, #16]
 8004252:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004256:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004258:	6822      	ldr	r2, [r4, #0]
 800425a:	6953      	ldr	r3, [r2, #20]
 800425c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004260:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8004262:	6822      	ldr	r2, [r4, #0]
 8004264:	68d3      	ldr	r3, [r2, #12]
 8004266:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800426a:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800426c:	2000      	movs	r0, #0
 800426e:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004270:	2320      	movs	r3, #32
 8004272:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004276:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800427a:	6360      	str	r0, [r4, #52]	; 0x34
}
 800427c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800427e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 8004282:	f7fe f833 	bl	80022ec <HAL_UART_MspInit>
 8004286:	e7d7      	b.n	8004238 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8004288:	2001      	movs	r0, #1
}
 800428a:	4770      	bx	lr

0800428c <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 800428c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b20      	cmp	r3, #32
 8004294:	d110      	bne.n	80042b8 <HAL_UART_Transmit_IT+0x2c>
    if ((pData == NULL) || (Size == 0U))
 8004296:	b189      	cbz	r1, 80042bc <HAL_UART_Transmit_IT+0x30>
 8004298:	b192      	cbz	r2, 80042c0 <HAL_UART_Transmit_IT+0x34>
    huart->pTxBuffPtr = pData;
 800429a:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 800429c:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 800429e:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a0:	2300      	movs	r3, #0
 80042a2:	6443      	str	r3, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042a4:	2221      	movs	r2, #33	; 0x21
 80042a6:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80042aa:	6801      	ldr	r1, [r0, #0]
 80042ac:	68ca      	ldr	r2, [r1, #12]
 80042ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80042b2:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 80042b4:	4618      	mov	r0, r3
 80042b6:	4770      	bx	lr
    return HAL_BUSY;
 80042b8:	2002      	movs	r0, #2
 80042ba:	4770      	bx	lr
      return HAL_ERROR;
 80042bc:	2001      	movs	r0, #1
 80042be:	4770      	bx	lr
 80042c0:	2001      	movs	r0, #1
}
 80042c2:	4770      	bx	lr

080042c4 <HAL_UART_ErrorCallback>:
}
 80042c4:	4770      	bx	lr

080042c6 <UART_DMAAbortOnError>:
{
 80042c6:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042c8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80042ca:	2300      	movs	r3, #0
 80042cc:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80042ce:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80042d0:	f7ff fff8 	bl	80042c4 <HAL_UART_ErrorCallback>
}
 80042d4:	bd08      	pop	{r3, pc}

080042d6 <HAL_UART_AbortReceiveCpltCallback>:
}
 80042d6:	4770      	bx	lr

080042d8 <HAL_UART_AbortReceive_IT>:
{
 80042d8:	b510      	push	{r4, lr}
 80042da:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042dc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042de:	f102 030c 	add.w	r3, r2, #12
 80042e2:	e853 3f00 	ldrex	r3, [r3]
 80042e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ea:	320c      	adds	r2, #12
 80042ec:	e842 3100 	strex	r1, r3, [r2]
 80042f0:	2900      	cmp	r1, #0
 80042f2:	d1f3      	bne.n	80042dc <HAL_UART_AbortReceive_IT+0x4>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042f4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f6:	f102 0314 	add.w	r3, r2, #20
 80042fa:	e853 3f00 	ldrex	r3, [r3]
 80042fe:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004302:	3214      	adds	r2, #20
 8004304:	e842 3100 	strex	r1, r3, [r2]
 8004308:	2900      	cmp	r1, #0
 800430a:	d1f3      	bne.n	80042f4 <HAL_UART_AbortReceive_IT+0x1c>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800430c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800430e:	2b01      	cmp	r3, #1
 8004310:	d01c      	beq.n	800434c <HAL_UART_AbortReceive_IT+0x74>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004312:	6823      	ldr	r3, [r4, #0]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	f013 0f40 	tst.w	r3, #64	; 0x40
 800431a:	d02e      	beq.n	800437a <HAL_UART_AbortReceive_IT+0xa2>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800431c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431e:	f102 0314 	add.w	r3, r2, #20
 8004322:	e853 3f00 	ldrex	r3, [r3]
 8004326:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432a:	3214      	adds	r2, #20
 800432c:	e842 3100 	strex	r1, r3, [r2]
 8004330:	2900      	cmp	r1, #0
 8004332:	d1f3      	bne.n	800431c <HAL_UART_AbortReceive_IT+0x44>
    if (huart->hdmarx != NULL)
 8004334:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004336:	b1b3      	cbz	r3, 8004366 <HAL_UART_AbortReceive_IT+0x8e>
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8004338:	4a15      	ldr	r2, [pc, #84]	; (8004390 <HAL_UART_AbortReceive_IT+0xb8>)
 800433a:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800433c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800433e:	f7fe fc89 	bl	8002c54 <HAL_DMA_Abort_IT>
 8004342:	b318      	cbz	r0, 800438c <HAL_UART_AbortReceive_IT+0xb4>
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004344:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004346:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004348:	4798      	blx	r3
 800434a:	e01f      	b.n	800438c <HAL_UART_AbortReceive_IT+0xb4>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800434c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434e:	f102 030c 	add.w	r3, r2, #12
 8004352:	e853 3f00 	ldrex	r3, [r3]
 8004356:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435a:	320c      	adds	r2, #12
 800435c:	e842 3100 	strex	r1, r3, [r2]
 8004360:	2900      	cmp	r1, #0
 8004362:	d1f3      	bne.n	800434c <HAL_UART_AbortReceive_IT+0x74>
 8004364:	e7d5      	b.n	8004312 <HAL_UART_AbortReceive_IT+0x3a>
      huart->RxXferCount = 0x00U;
 8004366:	2300      	movs	r3, #0
 8004368:	85e3      	strh	r3, [r4, #46]	; 0x2e
      huart->RxState = HAL_UART_STATE_READY;
 800436a:	2220      	movs	r2, #32
 800436c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004370:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_UART_AbortReceiveCpltCallback(huart);
 8004372:	4620      	mov	r0, r4
 8004374:	f7ff ffaf 	bl	80042d6 <HAL_UART_AbortReceiveCpltCallback>
 8004378:	e008      	b.n	800438c <HAL_UART_AbortReceive_IT+0xb4>
    huart->RxXferCount = 0x00U;
 800437a:	2300      	movs	r3, #0
 800437c:	85e3      	strh	r3, [r4, #46]	; 0x2e
    huart->RxState = HAL_UART_STATE_READY;
 800437e:	2220      	movs	r2, #32
 8004380:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004384:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_UART_AbortReceiveCpltCallback(huart);
 8004386:	4620      	mov	r0, r4
 8004388:	f7ff ffa5 	bl	80042d6 <HAL_UART_AbortReceiveCpltCallback>
}
 800438c:	2000      	movs	r0, #0
 800438e:	bd10      	pop	{r4, pc}
 8004390:	08004395 	.word	0x08004395

08004394 <UART_DMARxOnlyAbortCallback>:
{
 8004394:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004396:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8004398:	2300      	movs	r3, #0
 800439a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->RxState = HAL_UART_STATE_READY;
 800439c:	2220      	movs	r2, #32
 800439e:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a2:	6303      	str	r3, [r0, #48]	; 0x30
  HAL_UART_AbortReceiveCpltCallback(huart);
 80043a4:	f7ff ff97 	bl	80042d6 <HAL_UART_AbortReceiveCpltCallback>
}
 80043a8:	bd08      	pop	{r3, pc}

080043aa <HAL_UARTEx_RxEventCallback>:
}
 80043aa:	4770      	bx	lr

080043ac <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043ac:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b22      	cmp	r3, #34	; 0x22
 80043b4:	d11e      	bne.n	80043f4 <UART_Receive_IT+0x48>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043b6:	6883      	ldr	r3, [r0, #8]
 80043b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043bc:	d006      	beq.n	80043cc <UART_Receive_IT+0x20>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80043be:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80043c0:	b183      	cbz	r3, 80043e4 <UART_Receive_IT+0x38>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043c2:	6803      	ldr	r3, [r0, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043ca:	e01b      	b.n	8004404 <UART_Receive_IT+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043cc:	6903      	ldr	r3, [r0, #16]
 80043ce:	b9ab      	cbnz	r3, 80043fc <UART_Receive_IT+0x50>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80043d0:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80043d2:	6803      	ldr	r3, [r0, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043da:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80043dc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80043de:	3302      	adds	r3, #2
 80043e0:	6283      	str	r3, [r0, #40]	; 0x28
 80043e2:	e013      	b.n	800440c <UART_Receive_IT+0x60>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80043e4:	6903      	ldr	r3, [r0, #16]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1eb      	bne.n	80043c2 <UART_Receive_IT+0x16>
 80043ea:	e008      	b.n	80043fe <UART_Receive_IT+0x52>
        HAL_UART_RxCpltCallback(huart);
 80043ec:	f000 ff84 	bl	80052f8 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80043f0:	2000      	movs	r0, #0
 80043f2:	e048      	b.n	8004486 <UART_Receive_IT+0xda>
    return HAL_BUSY;
 80043f4:	2002      	movs	r0, #2
 80043f6:	4770      	bx	lr
    return HAL_OK;
 80043f8:	2000      	movs	r0, #0
}
 80043fa:	4770      	bx	lr
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80043fc:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043fe:	6803      	ldr	r3, [r0, #0]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	b2db      	uxtb	r3, r3
 8004404:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8004406:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004408:	3301      	adds	r3, #1
 800440a:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800440c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800440e:	3b01      	subs	r3, #1
 8004410:	b29b      	uxth	r3, r3
 8004412:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1ef      	bne.n	80043f8 <UART_Receive_IT+0x4c>
{
 8004418:	b500      	push	{lr}
 800441a:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800441c:	6802      	ldr	r2, [r0, #0]
 800441e:	68d3      	ldr	r3, [r2, #12]
 8004420:	f023 0320 	bic.w	r3, r3, #32
 8004424:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004426:	6802      	ldr	r2, [r0, #0]
 8004428:	68d3      	ldr	r3, [r2, #12]
 800442a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800442e:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004430:	6802      	ldr	r2, [r0, #0]
 8004432:	6953      	ldr	r3, [r2, #20]
 8004434:	f023 0301 	bic.w	r3, r3, #1
 8004438:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800443a:	2320      	movs	r3, #32
 800443c:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004440:	2300      	movs	r3, #0
 8004442:	6343      	str	r3, [r0, #52]	; 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004444:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004446:	2b01      	cmp	r3, #1
 8004448:	d1d0      	bne.n	80043ec <UART_Receive_IT+0x40>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800444a:	2300      	movs	r3, #0
 800444c:	6303      	str	r3, [r0, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800444e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004450:	f102 030c 	add.w	r3, r2, #12
 8004454:	e853 3f00 	ldrex	r3, [r3]
 8004458:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445c:	320c      	adds	r2, #12
 800445e:	e842 3100 	strex	r1, r3, [r2]
 8004462:	2900      	cmp	r1, #0
 8004464:	d1f3      	bne.n	800444e <UART_Receive_IT+0xa2>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004466:	6803      	ldr	r3, [r0, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	f012 0f10 	tst.w	r2, #16
 800446e:	d006      	beq.n	800447e <UART_Receive_IT+0xd2>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004470:	2200      	movs	r2, #0
 8004472:	9201      	str	r2, [sp, #4]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	9201      	str	r2, [sp, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	9301      	str	r3, [sp, #4]
 800447c:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800447e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8004480:	f7ff ff93 	bl	80043aa <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8004484:	2000      	movs	r0, #0
}
 8004486:	b003      	add	sp, #12
 8004488:	f85d fb04 	ldr.w	pc, [sp], #4

0800448c <HAL_UART_IRQHandler>:
{
 800448c:	b510      	push	{r4, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004492:	6802      	ldr	r2, [r0, #0]
 8004494:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004496:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004498:	6950      	ldr	r0, [r2, #20]
  if (errorflags == RESET)
 800449a:	f013 0f0f 	tst.w	r3, #15
 800449e:	d109      	bne.n	80044b4 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044a0:	f013 0f20 	tst.w	r3, #32
 80044a4:	d00d      	beq.n	80044c2 <HAL_UART_IRQHandler+0x36>
 80044a6:	f011 0f20 	tst.w	r1, #32
 80044aa:	d00a      	beq.n	80044c2 <HAL_UART_IRQHandler+0x36>
      UART_Receive_IT(huart);
 80044ac:	4620      	mov	r0, r4
 80044ae:	f7ff ff7d 	bl	80043ac <UART_Receive_IT>
      return;
 80044b2:	e017      	b.n	80044e4 <HAL_UART_IRQHandler+0x58>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80044b4:	f000 0001 	and.w	r0, r0, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80044b8:	f401 7c90 	and.w	ip, r1, #288	; 0x120
 80044bc:	ea5c 0c00 	orrs.w	ip, ip, r0
 80044c0:	d112      	bne.n	80044e8 <HAL_UART_IRQHandler+0x5c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80044c4:	2801      	cmp	r0, #1
 80044c6:	d07f      	beq.n	80045c8 <HAL_UART_IRQHandler+0x13c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044c8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80044cc:	d003      	beq.n	80044d6 <HAL_UART_IRQHandler+0x4a>
 80044ce:	f011 0f80 	tst.w	r1, #128	; 0x80
 80044d2:	f040 8119 	bne.w	8004708 <HAL_UART_IRQHandler+0x27c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044d6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80044da:	d003      	beq.n	80044e4 <HAL_UART_IRQHandler+0x58>
 80044dc:	f011 0f40 	tst.w	r1, #64	; 0x40
 80044e0:	f040 813f 	bne.w	8004762 <HAL_UART_IRQHandler+0x2d6>
}
 80044e4:	b002      	add	sp, #8
 80044e6:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80044e8:	f013 0f01 	tst.w	r3, #1
 80044ec:	d006      	beq.n	80044fc <HAL_UART_IRQHandler+0x70>
 80044ee:	f411 7f80 	tst.w	r1, #256	; 0x100
 80044f2:	d003      	beq.n	80044fc <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044f4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80044f6:	f042 0201 	orr.w	r2, r2, #1
 80044fa:	6462      	str	r2, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044fc:	f013 0f04 	tst.w	r3, #4
 8004500:	d02f      	beq.n	8004562 <HAL_UART_IRQHandler+0xd6>
 8004502:	b158      	cbz	r0, 800451c <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004504:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004506:	f042 0202 	orr.w	r2, r2, #2
 800450a:	6462      	str	r2, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800450c:	f013 0f02 	tst.w	r3, #2
 8004510:	f000 8132 	beq.w	8004778 <HAL_UART_IRQHandler+0x2ec>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004514:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004516:	f042 0204 	orr.w	r2, r2, #4
 800451a:	6462      	str	r2, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800451c:	f013 0f08 	tst.w	r3, #8
 8004520:	d007      	beq.n	8004532 <HAL_UART_IRQHandler+0xa6>
 8004522:	f001 0220 	and.w	r2, r1, #32
 8004526:	4302      	orrs	r2, r0
 8004528:	d003      	beq.n	8004532 <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800452a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800452c:	f042 0208 	orr.w	r2, r2, #8
 8004530:	6462      	str	r2, [r4, #68]	; 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004532:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004534:	2a00      	cmp	r2, #0
 8004536:	d0d5      	beq.n	80044e4 <HAL_UART_IRQHandler+0x58>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004538:	f013 0f20 	tst.w	r3, #32
 800453c:	d002      	beq.n	8004544 <HAL_UART_IRQHandler+0xb8>
 800453e:	f011 0f20 	tst.w	r1, #32
 8004542:	d114      	bne.n	800456e <HAL_UART_IRQHandler+0xe2>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004544:	6823      	ldr	r3, [r4, #0]
 8004546:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004548:	6c63      	ldr	r3, [r4, #68]	; 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800454a:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800454e:	f003 0308 	and.w	r3, r3, #8
 8004552:	4313      	orrs	r3, r2
 8004554:	d10f      	bne.n	8004576 <HAL_UART_IRQHandler+0xea>
        HAL_UART_ErrorCallback(huart);
 8004556:	4620      	mov	r0, r4
 8004558:	f7ff feb4 	bl	80042c4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800455c:	2300      	movs	r3, #0
 800455e:	6463      	str	r3, [r4, #68]	; 0x44
 8004560:	e7c0      	b.n	80044e4 <HAL_UART_IRQHandler+0x58>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004562:	f013 0f02 	tst.w	r3, #2
 8004566:	d0d9      	beq.n	800451c <HAL_UART_IRQHandler+0x90>
 8004568:	2800      	cmp	r0, #0
 800456a:	d0d7      	beq.n	800451c <HAL_UART_IRQHandler+0x90>
 800456c:	e7d2      	b.n	8004514 <HAL_UART_IRQHandler+0x88>
        UART_Receive_IT(huart);
 800456e:	4620      	mov	r0, r4
 8004570:	f7ff ff1c 	bl	80043ac <UART_Receive_IT>
 8004574:	e7e6      	b.n	8004544 <HAL_UART_IRQHandler+0xb8>
        UART_EndRxTransfer(huart);
 8004576:	4620      	mov	r0, r4
 8004578:	f7ff fde4 	bl	8004144 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800457c:	6823      	ldr	r3, [r4, #0]
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004584:	d01c      	beq.n	80045c0 <HAL_UART_IRQHandler+0x134>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004586:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004588:	f102 0314 	add.w	r3, r2, #20
 800458c:	e853 3f00 	ldrex	r3, [r3]
 8004590:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004594:	3214      	adds	r2, #20
 8004596:	e842 3100 	strex	r1, r3, [r2]
 800459a:	2900      	cmp	r1, #0
 800459c:	d1f3      	bne.n	8004586 <HAL_UART_IRQHandler+0xfa>
          if (huart->hdmarx != NULL)
 800459e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80045a0:	b153      	cbz	r3, 80045b8 <HAL_UART_IRQHandler+0x12c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045a2:	4a78      	ldr	r2, [pc, #480]	; (8004784 <HAL_UART_IRQHandler+0x2f8>)
 80045a4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045a6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80045a8:	f7fe fb54 	bl	8002c54 <HAL_DMA_Abort_IT>
 80045ac:	2800      	cmp	r0, #0
 80045ae:	d099      	beq.n	80044e4 <HAL_UART_IRQHandler+0x58>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045b0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80045b2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80045b4:	4798      	blx	r3
 80045b6:	e795      	b.n	80044e4 <HAL_UART_IRQHandler+0x58>
            HAL_UART_ErrorCallback(huart);
 80045b8:	4620      	mov	r0, r4
 80045ba:	f7ff fe83 	bl	80042c4 <HAL_UART_ErrorCallback>
 80045be:	e791      	b.n	80044e4 <HAL_UART_IRQHandler+0x58>
          HAL_UART_ErrorCallback(huart);
 80045c0:	4620      	mov	r0, r4
 80045c2:	f7ff fe7f 	bl	80042c4 <HAL_UART_ErrorCallback>
 80045c6:	e78d      	b.n	80044e4 <HAL_UART_IRQHandler+0x58>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80045c8:	f013 0f10 	tst.w	r3, #16
 80045cc:	f43f af7c 	beq.w	80044c8 <HAL_UART_IRQHandler+0x3c>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80045d0:	f011 0f10 	tst.w	r1, #16
 80045d4:	f43f af78 	beq.w	80044c8 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045d8:	2300      	movs	r3, #0
 80045da:	9301      	str	r3, [sp, #4]
 80045dc:	6813      	ldr	r3, [r2, #0]
 80045de:	9301      	str	r3, [sp, #4]
 80045e0:	6853      	ldr	r3, [r2, #4]
 80045e2:	9301      	str	r3, [sp, #4]
 80045e4:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e6:	6953      	ldr	r3, [r2, #20]
 80045e8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80045ec:	d050      	beq.n	8004690 <HAL_UART_IRQHandler+0x204>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045ee:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80045f0:	6813      	ldr	r3, [r2, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f43f af74 	beq.w	80044e4 <HAL_UART_IRQHandler+0x58>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045fc:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80045fe:	4299      	cmp	r1, r3
 8004600:	f67f af70 	bls.w	80044e4 <HAL_UART_IRQHandler+0x58>
        huart->RxXferCount = nb_remaining_rx_data;
 8004604:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004606:	6993      	ldr	r3, [r2, #24]
 8004608:	2b20      	cmp	r3, #32
 800460a:	d037      	beq.n	800467c <HAL_UART_IRQHandler+0x1f0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800460c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460e:	f102 030c 	add.w	r3, r2, #12
 8004612:	e853 3f00 	ldrex	r3, [r3]
 8004616:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461a:	320c      	adds	r2, #12
 800461c:	e842 3100 	strex	r1, r3, [r2]
 8004620:	2900      	cmp	r1, #0
 8004622:	d1f3      	bne.n	800460c <HAL_UART_IRQHandler+0x180>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004624:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004626:	f102 0314 	add.w	r3, r2, #20
 800462a:	e853 3f00 	ldrex	r3, [r3]
 800462e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004632:	3214      	adds	r2, #20
 8004634:	e842 3100 	strex	r1, r3, [r2]
 8004638:	2900      	cmp	r1, #0
 800463a:	d1f3      	bne.n	8004624 <HAL_UART_IRQHandler+0x198>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800463c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463e:	f102 0314 	add.w	r3, r2, #20
 8004642:	e853 3f00 	ldrex	r3, [r3]
 8004646:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464a:	3214      	adds	r2, #20
 800464c:	e842 3100 	strex	r1, r3, [r2]
 8004650:	2900      	cmp	r1, #0
 8004652:	d1f3      	bne.n	800463c <HAL_UART_IRQHandler+0x1b0>
          huart->RxState = HAL_UART_STATE_READY;
 8004654:	2320      	movs	r3, #32
 8004656:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800465a:	2300      	movs	r3, #0
 800465c:	6323      	str	r3, [r4, #48]	; 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800465e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004660:	f102 030c 	add.w	r3, r2, #12
 8004664:	e853 3f00 	ldrex	r3, [r3]
 8004668:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466c:	320c      	adds	r2, #12
 800466e:	e842 3100 	strex	r1, r3, [r2]
 8004672:	2900      	cmp	r1, #0
 8004674:	d1f3      	bne.n	800465e <HAL_UART_IRQHandler+0x1d2>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004676:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004678:	f7fe fac9 	bl	8002c0e <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800467c:	2302      	movs	r3, #2
 800467e:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004680:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8004682:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8004684:	1ac9      	subs	r1, r1, r3
 8004686:	b289      	uxth	r1, r1
 8004688:	4620      	mov	r0, r4
 800468a:	f7ff fe8e 	bl	80043aa <HAL_UARTEx_RxEventCallback>
 800468e:	e729      	b.n	80044e4 <HAL_UART_IRQHandler+0x58>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004690:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8004692:	b29a      	uxth	r2, r3
      if ((huart->RxXferCount > 0U)
 8004694:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8004696:	b29b      	uxth	r3, r3
 8004698:	2b00      	cmp	r3, #0
 800469a:	f43f af23 	beq.w	80044e4 <HAL_UART_IRQHandler+0x58>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800469e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 80046a0:	1a9b      	subs	r3, r3, r2
 80046a2:	b299      	uxth	r1, r3
          && (nb_rx_data > 0U))
 80046a4:	2900      	cmp	r1, #0
 80046a6:	f43f af1d 	beq.w	80044e4 <HAL_UART_IRQHandler+0x58>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046aa:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ac:	f102 030c 	add.w	r3, r2, #12
 80046b0:	e853 3f00 	ldrex	r3, [r3]
 80046b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b8:	320c      	adds	r2, #12
 80046ba:	e842 3000 	strex	r0, r3, [r2]
 80046be:	2800      	cmp	r0, #0
 80046c0:	d1f3      	bne.n	80046aa <HAL_UART_IRQHandler+0x21e>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046c2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c4:	f102 0314 	add.w	r3, r2, #20
 80046c8:	e853 3f00 	ldrex	r3, [r3]
 80046cc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d0:	3214      	adds	r2, #20
 80046d2:	e842 3000 	strex	r0, r3, [r2]
 80046d6:	2800      	cmp	r0, #0
 80046d8:	d1f3      	bne.n	80046c2 <HAL_UART_IRQHandler+0x236>
        huart->RxState = HAL_UART_STATE_READY;
 80046da:	2320      	movs	r3, #32
 80046dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046e0:	2300      	movs	r3, #0
 80046e2:	6323      	str	r3, [r4, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046e4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e6:	f102 030c 	add.w	r3, r2, #12
 80046ea:	e853 3f00 	ldrex	r3, [r3]
 80046ee:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f2:	320c      	adds	r2, #12
 80046f4:	e842 3000 	strex	r0, r3, [r2]
 80046f8:	2800      	cmp	r0, #0
 80046fa:	d1f3      	bne.n	80046e4 <HAL_UART_IRQHandler+0x258>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046fc:	2302      	movs	r3, #2
 80046fe:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004700:	4620      	mov	r0, r4
 8004702:	f7ff fe52 	bl	80043aa <HAL_UARTEx_RxEventCallback>
 8004706:	e6ed      	b.n	80044e4 <HAL_UART_IRQHandler+0x58>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004708:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b21      	cmp	r3, #33	; 0x21
 8004710:	f47f aee8 	bne.w	80044e4 <HAL_UART_IRQHandler+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004714:	68a3      	ldr	r3, [r4, #8]
 8004716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800471a:	d016      	beq.n	800474a <HAL_UART_IRQHandler+0x2be>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800471c:	6a23      	ldr	r3, [r4, #32]
 800471e:	1c59      	adds	r1, r3, #1
 8004720:	6221      	str	r1, [r4, #32]
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	6053      	str	r3, [r2, #4]
    if (--huart->TxXferCount == 0U)
 8004726:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004728:	3b01      	subs	r3, #1
 800472a:	b29b      	uxth	r3, r3
 800472c:	84e3      	strh	r3, [r4, #38]	; 0x26
 800472e:	2b00      	cmp	r3, #0
 8004730:	f47f aed8 	bne.w	80044e4 <HAL_UART_IRQHandler+0x58>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004734:	6822      	ldr	r2, [r4, #0]
 8004736:	68d3      	ldr	r3, [r2, #12]
 8004738:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800473c:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800473e:	6822      	ldr	r2, [r4, #0]
 8004740:	68d3      	ldr	r3, [r2, #12]
 8004742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004746:	60d3      	str	r3, [r2, #12]
 8004748:	e6cc      	b.n	80044e4 <HAL_UART_IRQHandler+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800474a:	6923      	ldr	r3, [r4, #16]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1e5      	bne.n	800471c <HAL_UART_IRQHandler+0x290>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004750:	6a23      	ldr	r3, [r4, #32]
 8004752:	881b      	ldrh	r3, [r3, #0]
 8004754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004758:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 800475a:	6a23      	ldr	r3, [r4, #32]
 800475c:	3302      	adds	r3, #2
 800475e:	6223      	str	r3, [r4, #32]
 8004760:	e7e1      	b.n	8004726 <HAL_UART_IRQHandler+0x29a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004762:	68d3      	ldr	r3, [r2, #12]
 8004764:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004768:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 800476a:	2320      	movs	r3, #32
 800476c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  HAL_UART_TxCpltCallback(huart);
 8004770:	4620      	mov	r0, r4
 8004772:	f000 fd89 	bl	8005288 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8004776:	e6b5      	b.n	80044e4 <HAL_UART_IRQHandler+0x58>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004778:	f013 0f08 	tst.w	r3, #8
 800477c:	f47f aed5 	bne.w	800452a <HAL_UART_IRQHandler+0x9e>
 8004780:	e6d7      	b.n	8004532 <HAL_UART_IRQHandler+0xa6>
 8004782:	bf00      	nop
 8004784:	080042c7 	.word	0x080042c7

08004788 <UART_Start_Receive_IT>:
  huart->pRxBuffPtr = pData;
 8004788:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 800478a:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxXferCount = Size;
 800478c:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800478e:	2300      	movs	r3, #0
 8004790:	6443      	str	r3, [r0, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004792:	2322      	movs	r3, #34	; 0x22
 8004794:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004798:	6903      	ldr	r3, [r0, #16]
 800479a:	b123      	cbz	r3, 80047a6 <UART_Start_Receive_IT+0x1e>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800479c:	6802      	ldr	r2, [r0, #0]
 800479e:	68d3      	ldr	r3, [r2, #12]
 80047a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047a4:	60d3      	str	r3, [r2, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80047a6:	6802      	ldr	r2, [r0, #0]
 80047a8:	6953      	ldr	r3, [r2, #20]
 80047aa:	f043 0301 	orr.w	r3, r3, #1
 80047ae:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80047b0:	6802      	ldr	r2, [r0, #0]
 80047b2:	68d3      	ldr	r3, [r2, #12]
 80047b4:	f043 0320 	orr.w	r3, r3, #32
 80047b8:	60d3      	str	r3, [r2, #12]
}
 80047ba:	2000      	movs	r0, #0
 80047bc:	4770      	bx	lr

080047be <HAL_UART_Receive_IT>:
{
 80047be:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80047c0:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b20      	cmp	r3, #32
 80047c8:	d108      	bne.n	80047dc <HAL_UART_Receive_IT+0x1e>
    if ((pData == NULL) || (Size == 0U))
 80047ca:	b149      	cbz	r1, 80047e0 <HAL_UART_Receive_IT+0x22>
 80047cc:	b90a      	cbnz	r2, 80047d2 <HAL_UART_Receive_IT+0x14>
      return HAL_ERROR;
 80047ce:	2001      	movs	r0, #1
}
 80047d0:	bd08      	pop	{r3, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047d2:	2300      	movs	r3, #0
 80047d4:	6303      	str	r3, [r0, #48]	; 0x30
    return (UART_Start_Receive_IT(huart, pData, Size));
 80047d6:	f7ff ffd7 	bl	8004788 <UART_Start_Receive_IT>
 80047da:	e7f9      	b.n	80047d0 <HAL_UART_Receive_IT+0x12>
    return HAL_BUSY;
 80047dc:	2002      	movs	r0, #2
 80047de:	e7f7      	b.n	80047d0 <HAL_UART_Receive_IT+0x12>
      return HAL_ERROR;
 80047e0:	2001      	movs	r0, #1
 80047e2:	e7f5      	b.n	80047d0 <HAL_UART_Receive_IT+0x12>

080047e4 <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 80047e4:	b510      	push	{r4, lr}
 80047e6:	4604      	mov	r4, r0
 80047e8:	4608      	mov	r0, r1
    eMBErrorCode    eStatus = MB_ENOERR;

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 80047ea:	f101 3cff 	add.w	ip, r1, #4294967295
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 80047ee:	fa5f fc8c 	uxtb.w	ip, ip
 80047f2:	f1bc 0ff6 	cmp.w	ip, #246	; 0xf6
 80047f6:	d82b      	bhi.n	8004850 <eMBInit+0x6c>
 80047f8:	4611      	mov	r1, r2
 80047fa:	461a      	mov	r2, r3
    {
        eStatus = MB_EINVAL;
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
 80047fc:	4b17      	ldr	r3, [pc, #92]	; (800485c <eMBInit+0x78>)
 80047fe:	7018      	strb	r0, [r3, #0]

        switch ( eMode )
 8004800:	b10c      	cbz	r4, 8004806 <eMBInit+0x22>

            eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
            break;
#endif
        default:
            eStatus = MB_EINVAL;
 8004802:	2402      	movs	r4, #2
 8004804:	e025      	b.n	8004852 <eMBInit+0x6e>
            pvMBFrameStartCur = eMBRTUStart;
 8004806:	4b16      	ldr	r3, [pc, #88]	; (8004860 <eMBInit+0x7c>)
 8004808:	4c16      	ldr	r4, [pc, #88]	; (8004864 <eMBInit+0x80>)
 800480a:	601c      	str	r4, [r3, #0]
            pvMBFrameStopCur = eMBRTUStop;
 800480c:	4b16      	ldr	r3, [pc, #88]	; (8004868 <eMBInit+0x84>)
 800480e:	4c17      	ldr	r4, [pc, #92]	; (800486c <eMBInit+0x88>)
 8004810:	601c      	str	r4, [r3, #0]
            peMBFrameSendCur = eMBRTUSend;
 8004812:	4b17      	ldr	r3, [pc, #92]	; (8004870 <eMBInit+0x8c>)
 8004814:	4c17      	ldr	r4, [pc, #92]	; (8004874 <eMBInit+0x90>)
 8004816:	601c      	str	r4, [r3, #0]
            peMBFrameReceiveCur = eMBRTUReceive;
 8004818:	4b17      	ldr	r3, [pc, #92]	; (8004878 <eMBInit+0x94>)
 800481a:	4c18      	ldr	r4, [pc, #96]	; (800487c <eMBInit+0x98>)
 800481c:	601c      	str	r4, [r3, #0]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 800481e:	4b18      	ldr	r3, [pc, #96]	; (8004880 <eMBInit+0x9c>)
 8004820:	2400      	movs	r4, #0
 8004822:	601c      	str	r4, [r3, #0]
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
 8004824:	4b17      	ldr	r3, [pc, #92]	; (8004884 <eMBInit+0xa0>)
 8004826:	4c18      	ldr	r4, [pc, #96]	; (8004888 <eMBInit+0xa4>)
 8004828:	601c      	str	r4, [r3, #0]
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
 800482a:	4b18      	ldr	r3, [pc, #96]	; (800488c <eMBInit+0xa8>)
 800482c:	4c18      	ldr	r4, [pc, #96]	; (8004890 <eMBInit+0xac>)
 800482e:	601c      	str	r4, [r3, #0]
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
 8004830:	4b18      	ldr	r3, [pc, #96]	; (8004894 <eMBInit+0xb0>)
 8004832:	4c19      	ldr	r4, [pc, #100]	; (8004898 <eMBInit+0xb4>)
 8004834:	601c      	str	r4, [r3, #0]
            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 8004836:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800483a:	f000 fab9 	bl	8004db0 <eMBRTUInit>
            break;
        }

        if( eStatus == MB_ENOERR )
 800483e:	4604      	mov	r4, r0
 8004840:	b938      	cbnz	r0, 8004852 <eMBInit+0x6e>
        {
            if( !xMBPortEventInit(  ) )
 8004842:	f000 fc3d 	bl	80050c0 <xMBPortEventInit>
 8004846:	b130      	cbz	r0, 8004856 <eMBInit+0x72>
                eStatus = MB_EPORTERR;
            }
            else
            {
                eMBCurrentMode = eMode;
                eMBState = STATE_DISABLED;
 8004848:	4b14      	ldr	r3, [pc, #80]	; (800489c <eMBInit+0xb8>)
 800484a:	2201      	movs	r2, #1
 800484c:	701a      	strb	r2, [r3, #0]
 800484e:	e000      	b.n	8004852 <eMBInit+0x6e>
        eStatus = MB_EINVAL;
 8004850:	2402      	movs	r4, #2
            }
        }
    }
    return eStatus;
}
 8004852:	4620      	mov	r0, r4
 8004854:	bd10      	pop	{r4, pc}
                eStatus = MB_EPORTERR;
 8004856:	2403      	movs	r4, #3
 8004858:	e7fb      	b.n	8004852 <eMBInit+0x6e>
 800485a:	bf00      	nop
 800485c:	20001789 	.word	0x20001789
 8004860:	20001774 	.word	0x20001774
 8004864:	08004dfd 	.word	0x08004dfd
 8004868:	20001778 	.word	0x20001778
 800486c:	08004e1d 	.word	0x08004e1d
 8004870:	2000176c 	.word	0x2000176c
 8004874:	08004e85 	.word	0x08004e85
 8004878:	20001768 	.word	0x20001768
 800487c:	08004e35 	.word	0x08004e35
 8004880:	20001770 	.word	0x20001770
 8004884:	2000177c 	.word	0x2000177c
 8004888:	08004f0d 	.word	0x08004f0d
 800488c:	20001780 	.word	0x20001780
 8004890:	08004f99 	.word	0x08004f99
 8004894:	20001784 	.word	0x20001784
 8004898:	08005005 	.word	0x08005005
 800489c:	2000000c 	.word	0x2000000c

080048a0 <eMBEnable>:
}


eMBErrorCode
eMBEnable( void )
{
 80048a0:	b508      	push	{r3, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( eMBState == STATE_DISABLED )
 80048a2:	4b06      	ldr	r3, [pc, #24]	; (80048bc <eMBEnable+0x1c>)
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d001      	beq.n	80048ae <eMBEnable+0xe>
        pvMBFrameStartCur(  );
        eMBState = STATE_ENABLED;
    }
    else
    {
        eStatus = MB_EILLSTATE;
 80048aa:	2006      	movs	r0, #6
    }
    return eStatus;
}
 80048ac:	bd08      	pop	{r3, pc}
        pvMBFrameStartCur(  );
 80048ae:	4b04      	ldr	r3, [pc, #16]	; (80048c0 <eMBEnable+0x20>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 80048b4:	2000      	movs	r0, #0
 80048b6:	4b01      	ldr	r3, [pc, #4]	; (80048bc <eMBEnable+0x1c>)
 80048b8:	7018      	strb	r0, [r3, #0]
 80048ba:	e7f7      	b.n	80048ac <eMBEnable+0xc>
 80048bc:	2000000c 	.word	0x2000000c
 80048c0:	20001774 	.word	0x20001774

080048c4 <eMBPoll>:
    }
    return eStatus;
}

eMBErrorCode eMBPoll( void )
{
 80048c4:	b570      	push	{r4, r5, r6, lr}
 80048c6:	b082      	sub	sp, #8
    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 80048c8:	4b36      	ldr	r3, [pc, #216]	; (80049a4 <eMBPoll+0xe0>)
 80048ca:	781c      	ldrb	r4, [r3, #0]
 80048cc:	2c00      	cmp	r4, #0
 80048ce:	d165      	bne.n	800499c <eMBPoll+0xd8>
        return MB_EILLSTATE;
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 80048d0:	f10d 0007 	add.w	r0, sp, #7
 80048d4:	f000 fc3c 	bl	8005150 <xMBPortEventGet>
 80048d8:	2801      	cmp	r0, #1
 80048da:	d002      	beq.n	80048e2 <eMBPoll+0x1e>
        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
}
 80048dc:	4620      	mov	r0, r4
 80048de:	b002      	add	sp, #8
 80048e0:	bd70      	pop	{r4, r5, r6, pc}
        switch ( eEvent )
 80048e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d019      	beq.n	800491e <eMBPoll+0x5a>
 80048ea:	2b04      	cmp	r3, #4
 80048ec:	d1f6      	bne.n	80048dc <eMBPoll+0x18>
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 80048ee:	4b2e      	ldr	r3, [pc, #184]	; (80049a8 <eMBPoll+0xe4>)
 80048f0:	681e      	ldr	r6, [r3, #0]
 80048f2:	7831      	ldrb	r1, [r6, #0]
 80048f4:	4b2d      	ldr	r3, [pc, #180]	; (80049ac <eMBPoll+0xe8>)
 80048f6:	7019      	strb	r1, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 80048f8:	4b2d      	ldr	r3, [pc, #180]	; (80049b0 <eMBPoll+0xec>)
 80048fa:	2201      	movs	r2, #1
 80048fc:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 80048fe:	2300      	movs	r3, #0
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 8004900:	4d2c      	ldr	r5, [pc, #176]	; (80049b4 <eMBPoll+0xf0>)
 8004902:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
 8004906:	b122      	cbz	r2, 8004912 <eMBPoll+0x4e>
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 8004908:	4291      	cmp	r1, r2
 800490a:	d01e      	beq.n	800494a <eMBPoll+0x86>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 800490c:	3301      	adds	r3, #1
 800490e:	2b10      	cmp	r3, #16
 8004910:	d1f7      	bne.n	8004902 <eMBPoll+0x3e>
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 8004912:	4b29      	ldr	r3, [pc, #164]	; (80049b8 <eMBPoll+0xf4>)
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d130      	bne.n	800497c <eMBPoll+0xb8>
    return MB_ENOERR;
 800491a:	461c      	mov	r4, r3
 800491c:	e7de      	b.n	80048dc <eMBPoll+0x18>
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 800491e:	4b27      	ldr	r3, [pc, #156]	; (80049bc <eMBPoll+0xf8>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a27      	ldr	r2, [pc, #156]	; (80049c0 <eMBPoll+0xfc>)
 8004924:	4920      	ldr	r1, [pc, #128]	; (80049a8 <eMBPoll+0xe4>)
 8004926:	4824      	ldr	r0, [pc, #144]	; (80049b8 <eMBPoll+0xf4>)
 8004928:	4798      	blx	r3
            if( eStatus == MB_ENOERR )
 800492a:	4605      	mov	r5, r0
 800492c:	2800      	cmp	r0, #0
 800492e:	d1d5      	bne.n	80048dc <eMBPoll+0x18>
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 8004930:	4b21      	ldr	r3, [pc, #132]	; (80049b8 <eMBPoll+0xf4>)
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	4a23      	ldr	r2, [pc, #140]	; (80049c4 <eMBPoll+0x100>)
 8004936:	7812      	ldrb	r2, [r2, #0]
 8004938:	429a      	cmp	r2, r3
 800493a:	d001      	beq.n	8004940 <eMBPoll+0x7c>
 800493c:	2b00      	cmp	r3, #0
 800493e:	d12f      	bne.n	80049a0 <eMBPoll+0xdc>
                    ( void )xMBPortEventPost( EV_EXECUTE );
 8004940:	2004      	movs	r0, #4
 8004942:	f000 fbc7 	bl	80050d4 <xMBPortEventPost>
    return MB_ENOERR;
 8004946:	462c      	mov	r4, r5
 8004948:	e7c8      	b.n	80048dc <eMBPoll+0x18>
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 800494a:	4a1a      	ldr	r2, [pc, #104]	; (80049b4 <eMBPoll+0xf0>)
 800494c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	491b      	ldr	r1, [pc, #108]	; (80049c0 <eMBPoll+0xfc>)
 8004954:	4630      	mov	r0, r6
 8004956:	4798      	blx	r3
 8004958:	4b15      	ldr	r3, [pc, #84]	; (80049b0 <eMBPoll+0xec>)
 800495a:	7018      	strb	r0, [r3, #0]
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 800495c:	4b16      	ldr	r3, [pc, #88]	; (80049b8 <eMBPoll+0xf4>)
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	b153      	cbz	r3, 8004978 <eMBPoll+0xb4>
                if( eException != MB_EX_NONE )
 8004962:	b958      	cbnz	r0, 800497c <eMBPoll+0xb8>
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 8004964:	4b18      	ldr	r3, [pc, #96]	; (80049c8 <eMBPoll+0x104>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a15      	ldr	r2, [pc, #84]	; (80049c0 <eMBPoll+0xfc>)
 800496a:	8812      	ldrh	r2, [r2, #0]
 800496c:	490e      	ldr	r1, [pc, #56]	; (80049a8 <eMBPoll+0xe4>)
 800496e:	6809      	ldr	r1, [r1, #0]
 8004970:	4814      	ldr	r0, [pc, #80]	; (80049c4 <eMBPoll+0x100>)
 8004972:	7800      	ldrb	r0, [r0, #0]
 8004974:	4798      	blx	r3
 8004976:	e7b1      	b.n	80048dc <eMBPoll+0x18>
    return MB_ENOERR;
 8004978:	461c      	mov	r4, r3
 800497a:	e7af      	b.n	80048dc <eMBPoll+0x18>
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 800497c:	4b0b      	ldr	r3, [pc, #44]	; (80049ac <eMBPoll+0xe8>)
 800497e:	781a      	ldrb	r2, [r3, #0]
 8004980:	4909      	ldr	r1, [pc, #36]	; (80049a8 <eMBPoll+0xe4>)
 8004982:	680d      	ldr	r5, [r1, #0]
 8004984:	4b0e      	ldr	r3, [pc, #56]	; (80049c0 <eMBPoll+0xfc>)
 8004986:	2601      	movs	r6, #1
 8004988:	801e      	strh	r6, [r3, #0]
 800498a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800498e:	702a      	strb	r2, [r5, #0]
                    ucMBFrame[usLength++] = eException;
 8004990:	6809      	ldr	r1, [r1, #0]
 8004992:	881a      	ldrh	r2, [r3, #0]
 8004994:	1995      	adds	r5, r2, r6
 8004996:	801d      	strh	r5, [r3, #0]
 8004998:	5488      	strb	r0, [r1, r2]
 800499a:	e7e3      	b.n	8004964 <eMBPoll+0xa0>
        return MB_EILLSTATE;
 800499c:	2406      	movs	r4, #6
 800499e:	e79d      	b.n	80048dc <eMBPoll+0x18>
    return MB_ENOERR;
 80049a0:	4604      	mov	r4, r0
 80049a2:	e79b      	b.n	80048dc <eMBPoll+0x18>
 80049a4:	2000000c 	.word	0x2000000c
 80049a8:	2000178c 	.word	0x2000178c
 80049ac:	20001788 	.word	0x20001788
 80049b0:	20001764 	.word	0x20001764
 80049b4:	20000010 	.word	0x20000010
 80049b8:	20001790 	.word	0x20001790
 80049bc:	20001768 	.word	0x20001768
 80049c0:	20001792 	.word	0x20001792
 80049c4:	20001789 	.word	0x20001789
 80049c8:	2000176c 	.word	0x2000176c

080049cc <usMBCRC16>:
{
    UCHAR           ucCRCHi = 0xFF;
    UCHAR           ucCRCLo = 0xFF;
    int             iIndex;

    while( usLen-- )
 80049cc:	b1b9      	cbz	r1, 80049fe <usMBCRC16+0x32>
{
 80049ce:	b430      	push	{r4, r5}
 80049d0:	f101 3cff 	add.w	ip, r1, #4294967295
 80049d4:	fa1f fc8c 	uxth.w	ip, ip
 80049d8:	f10c 0c01 	add.w	ip, ip, #1
 80049dc:	4484      	add	ip, r0
    UCHAR           ucCRCLo = 0xFF;
 80049de:	22ff      	movs	r2, #255	; 0xff
    UCHAR           ucCRCHi = 0xFF;
 80049e0:	4611      	mov	r1, r2
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 80049e2:	4d09      	ldr	r5, [pc, #36]	; (8004a08 <usMBCRC16+0x3c>)
        ucCRCHi = aucCRCLo[iIndex];
 80049e4:	4c09      	ldr	r4, [pc, #36]	; (8004a0c <usMBCRC16+0x40>)
        iIndex = ucCRCLo ^ *( pucFrame++ );
 80049e6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80049ea:	4053      	eors	r3, r2
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 80049ec:	5cea      	ldrb	r2, [r5, r3]
 80049ee:	404a      	eors	r2, r1
        ucCRCHi = aucCRCLo[iIndex];
 80049f0:	5ce1      	ldrb	r1, [r4, r3]
    while( usLen-- )
 80049f2:	4560      	cmp	r0, ip
 80049f4:	d1f7      	bne.n	80049e6 <usMBCRC16+0x1a>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
}
 80049f6:	ea42 2001 	orr.w	r0, r2, r1, lsl #8
 80049fa:	bc30      	pop	{r4, r5}
 80049fc:	4770      	bx	lr
    UCHAR           ucCRCLo = 0xFF;
 80049fe:	22ff      	movs	r2, #255	; 0xff
}
 8004a00:	ea42 2002 	orr.w	r0, r2, r2, lsl #8
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	080079b8 	.word	0x080079b8
 8004a0c:	08007ab8 	.word	0x08007ab8

08004a10 <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8004a10:	b538      	push	{r3, r4, r5, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8004a12:	880b      	ldrh	r3, [r1, #0]
 8004a14:	2b05      	cmp	r3, #5
 8004a16:	d001      	beq.n	8004a1c <eMBFuncReadCoils+0xc>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004a18:	2003      	movs	r0, #3
    }
    return eStatus;
}
 8004a1a:	bd38      	pop	{r3, r4, r5, pc}
 8004a1c:	460c      	mov	r4, r1
        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 8004a1e:	78c3      	ldrb	r3, [r0, #3]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 8004a20:	7902      	ldrb	r2, [r0, #4]
 8004a22:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
        if( ( usCoilCount >= 1 ) &&
 8004a26:	1e53      	subs	r3, r2, #1
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	f240 71ce 	movw	r1, #1998	; 0x7ce
 8004a2e:	428b      	cmp	r3, r1
 8004a30:	d825      	bhi.n	8004a7e <eMBFuncReadCoils+0x6e>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8004a32:	f890 c001 	ldrb.w	ip, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8004a36:	7881      	ldrb	r1, [r0, #2]
            *usLen = MB_PDU_FUNC_OFF;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 8004a40:	8823      	ldrh	r3, [r4, #0]
 8004a42:	3301      	adds	r3, #1
 8004a44:	8023      	strh	r3, [r4, #0]
            if( ( usCoilCount & 0x0007 ) != 0 )
 8004a46:	f012 0f07 	tst.w	r2, #7
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 8004a4a:	bf1d      	ittte	ne
 8004a4c:	08d5      	lsrne	r5, r2, #3
 8004a4e:	3501      	addne	r5, #1
 8004a50:	b2ed      	uxtbne	r5, r5
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 8004a52:	f3c2 05c7 	ubfxeq	r5, r2, #3, #8
            *pucFrameCur++ = ucNBytes;
 8004a56:	7045      	strb	r5, [r0, #1]
            *usLen += 1;
 8004a58:	8823      	ldrh	r3, [r4, #0]
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	8023      	strh	r3, [r4, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8004a5e:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
        usRegAddress++;
 8004a62:	3101      	adds	r1, #1
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 8004a64:	2300      	movs	r3, #0
 8004a66:	b289      	uxth	r1, r1
 8004a68:	3002      	adds	r0, #2
 8004a6a:	f000 fd19 	bl	80054a0 <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 8004a6e:	b918      	cbnz	r0, 8004a78 <eMBFuncReadCoils+0x68>
                *usLen += ucNBytes;;
 8004a70:	8823      	ldrh	r3, [r4, #0]
 8004a72:	441d      	add	r5, r3
 8004a74:	8025      	strh	r5, [r4, #0]
 8004a76:	e7d0      	b.n	8004a1a <eMBFuncReadCoils+0xa>
                eStatus = prveMBError2Exception( eRegStatus );
 8004a78:	f000 fb14 	bl	80050a4 <prveMBError2Exception>
 8004a7c:	e7cd      	b.n	8004a1a <eMBFuncReadCoils+0xa>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004a7e:	2003      	movs	r0, #3
 8004a80:	e7cb      	b.n	8004a1a <eMBFuncReadCoils+0xa>

08004a82 <eMBFuncWriteCoil>:
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8004a82:	880b      	ldrh	r3, [r1, #0]
 8004a84:	2b05      	cmp	r3, #5
 8004a86:	d001      	beq.n	8004a8c <eMBFuncWriteCoil+0xa>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004a88:	2003      	movs	r0, #3
 8004a8a:	4770      	bx	lr
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8004a8c:	7903      	ldrb	r3, [r0, #4]
 8004a8e:	bb0b      	cbnz	r3, 8004ad4 <eMBFuncWriteCoil+0x52>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8004a90:	78c2      	ldrb	r2, [r0, #3]
 8004a92:	1e53      	subs	r3, r2, #1
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2bfd      	cmp	r3, #253	; 0xfd
 8004a98:	d91e      	bls.n	8004ad8 <eMBFuncWriteCoil+0x56>
{
 8004a9a:	b500      	push	{lr}
 8004a9c:	b083      	sub	sp, #12
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8004a9e:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8004aa0:	7881      	ldrb	r1, [r0, #2]
            ucBuf[1] = 0;
 8004aa2:	2000      	movs	r0, #0
 8004aa4:	f88d 0005 	strb.w	r0, [sp, #5]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8004aa8:	2aff      	cmp	r2, #255	; 0xff
 8004aaa:	bf14      	ite	ne
 8004aac:	2200      	movne	r2, #0
 8004aae:	2201      	moveq	r2, #1
 8004ab0:	f88d 2004 	strb.w	r2, [sp, #4]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8004ab4:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8004ab8:	3101      	adds	r1, #1
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 8004aba:	2301      	movs	r3, #1
 8004abc:	461a      	mov	r2, r3
 8004abe:	b289      	uxth	r1, r1
 8004ac0:	a801      	add	r0, sp, #4
 8004ac2:	f000 fced 	bl	80054a0 <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 8004ac6:	b910      	cbnz	r0, 8004ace <eMBFuncWriteCoil+0x4c>
    }
    return eStatus;
}
 8004ac8:	b003      	add	sp, #12
 8004aca:	f85d fb04 	ldr.w	pc, [sp], #4
                eStatus = prveMBError2Exception( eRegStatus );
 8004ace:	f000 fae9 	bl	80050a4 <prveMBError2Exception>
 8004ad2:	e7f9      	b.n	8004ac8 <eMBFuncWriteCoil+0x46>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004ad4:	2003      	movs	r0, #3
 8004ad6:	4770      	bx	lr
 8004ad8:	2003      	movs	r0, #3
}
 8004ada:	4770      	bx	lr

08004adc <eMBFuncWriteMultipleCoils>:
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8004adc:	880b      	ldrh	r3, [r1, #0]
 8004ade:	2b05      	cmp	r3, #5
 8004ae0:	d928      	bls.n	8004b34 <eMBFuncWriteMultipleCoils+0x58>
{
 8004ae2:	b510      	push	{r4, lr}
 8004ae4:	460c      	mov	r4, r1
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 8004ae6:	78c2      	ldrb	r2, [r0, #3]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 8004ae8:	7903      	ldrb	r3, [r0, #4]
 8004aea:	ea43 2202 	orr.w	r2, r3, r2, lsl #8

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8004aee:	f013 0f07 	tst.w	r3, #7
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 8004af2:	bf1d      	ittte	ne
 8004af4:	08d1      	lsrne	r1, r2, #3
 8004af6:	3101      	addne	r1, #1
 8004af8:	b2c9      	uxtbne	r1, r1
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 8004afa:	f3c2 01c7 	ubfxeq	r1, r2, #3, #8
        }

        if( ( usCoilCnt >= 1 ) &&
 8004afe:	1e53      	subs	r3, r2, #1
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	f5b3 6ff6 	cmp.w	r3, #1968	; 0x7b0
 8004b06:	d217      	bcs.n	8004b38 <eMBFuncWriteMultipleCoils+0x5c>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 8004b08:	7943      	ldrb	r3, [r0, #5]
 8004b0a:	428b      	cmp	r3, r1
 8004b0c:	d001      	beq.n	8004b12 <eMBFuncWriteMultipleCoils+0x36>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004b0e:	2003      	movs	r0, #3
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8004b10:	bd10      	pop	{r4, pc}
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8004b12:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8004b14:	7881      	ldrb	r1, [r0, #2]
 8004b16:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8004b1a:	3101      	adds	r1, #1
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	b289      	uxth	r1, r1
 8004b20:	3006      	adds	r0, #6
 8004b22:	f000 fcbd 	bl	80054a0 <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 8004b26:	b910      	cbnz	r0, 8004b2e <eMBFuncWriteMultipleCoils+0x52>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8004b28:	2305      	movs	r3, #5
 8004b2a:	8023      	strh	r3, [r4, #0]
 8004b2c:	e7f0      	b.n	8004b10 <eMBFuncWriteMultipleCoils+0x34>
                eStatus = prveMBError2Exception( eRegStatus );
 8004b2e:	f000 fab9 	bl	80050a4 <prveMBError2Exception>
 8004b32:	e7ed      	b.n	8004b10 <eMBFuncWriteMultipleCoils+0x34>
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004b34:	2003      	movs	r0, #3
}
 8004b36:	4770      	bx	lr
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004b38:	2003      	movs	r0, #3
 8004b3a:	e7e9      	b.n	8004b10 <eMBFuncWriteMultipleCoils+0x34>

08004b3c <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_DISCRETE_INPUTS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 8004b3c:	b538      	push	{r3, r4, r5, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8004b3e:	880b      	ldrh	r3, [r1, #0]
 8004b40:	2b05      	cmp	r3, #5
 8004b42:	d001      	beq.n	8004b48 <eMBFuncReadDiscreteInputs+0xc>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004b44:	2003      	movs	r0, #3
    }
    return eStatus;
}
 8004b46:	bd38      	pop	{r3, r4, r5, pc}
 8004b48:	460c      	mov	r4, r1
        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 8004b4a:	78c3      	ldrb	r3, [r0, #3]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 8004b4c:	7902      	ldrb	r2, [r0, #4]
 8004b4e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
        if( ( usDiscreteCnt >= 1 ) &&
 8004b52:	1e53      	subs	r3, r2, #1
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	f240 71ce 	movw	r1, #1998	; 0x7ce
 8004b5a:	428b      	cmp	r3, r1
 8004b5c:	d824      	bhi.n	8004ba8 <eMBFuncReadDiscreteInputs+0x6c>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8004b5e:	f890 c001 	ldrb.w	ip, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8004b62:	7881      	ldrb	r1, [r0, #2]
            *usLen = MB_PDU_FUNC_OFF;
 8004b64:	2300      	movs	r3, #0
 8004b66:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 8004b68:	2302      	movs	r3, #2
 8004b6a:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 8004b6c:	8823      	ldrh	r3, [r4, #0]
 8004b6e:	3301      	adds	r3, #1
 8004b70:	8023      	strh	r3, [r4, #0]
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 8004b72:	f012 0f07 	tst.w	r2, #7
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 8004b76:	bf1d      	ittte	ne
 8004b78:	08d5      	lsrne	r5, r2, #3
 8004b7a:	3501      	addne	r5, #1
 8004b7c:	b2ed      	uxtbne	r5, r5
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 8004b7e:	f3c2 05c7 	ubfxeq	r5, r2, #3, #8
            *pucFrameCur++ = ucNBytes;
 8004b82:	7045      	strb	r5, [r0, #1]
            *usLen += 1;
 8004b84:	8823      	ldrh	r3, [r4, #0]
 8004b86:	3301      	adds	r3, #1
 8004b88:	8023      	strh	r3, [r4, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8004b8a:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
        usRegAddress++;
 8004b8e:	3101      	adds	r1, #1
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 8004b90:	b289      	uxth	r1, r1
 8004b92:	3002      	adds	r0, #2
 8004b94:	f000 fcf6 	bl	8005584 <eMBRegDiscreteCB>
            if( eRegStatus != MB_ENOERR )
 8004b98:	b918      	cbnz	r0, 8004ba2 <eMBFuncReadDiscreteInputs+0x66>
                *usLen += ucNBytes;;
 8004b9a:	8823      	ldrh	r3, [r4, #0]
 8004b9c:	441d      	add	r5, r3
 8004b9e:	8025      	strh	r5, [r4, #0]
 8004ba0:	e7d1      	b.n	8004b46 <eMBFuncReadDiscreteInputs+0xa>
                eStatus = prveMBError2Exception( eRegStatus );
 8004ba2:	f000 fa7f 	bl	80050a4 <prveMBError2Exception>
 8004ba6:	e7ce      	b.n	8004b46 <eMBFuncReadDiscreteInputs+0xa>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004ba8:	2003      	movs	r0, #3
 8004baa:	e7cc      	b.n	8004b46 <eMBFuncReadDiscreteInputs+0xa>

08004bac <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8004bac:	b508      	push	{r3, lr}
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8004bae:	880b      	ldrh	r3, [r1, #0]
 8004bb0:	2b05      	cmp	r3, #5
 8004bb2:	d001      	beq.n	8004bb8 <eMBFuncWriteHoldingRegister+0xc>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004bb4:	2003      	movs	r0, #3
    }
    return eStatus;
}
 8004bb6:	bd08      	pop	{r3, pc}
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8004bb8:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8004bba:	7881      	ldrb	r1, [r0, #2]
 8004bbc:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8004bc0:	3101      	adds	r1, #1
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	b289      	uxth	r1, r1
 8004bc8:	3003      	adds	r0, #3
 8004bca:	f000 fc1f 	bl	800540c <eMBRegHoldingCB>
        if( eRegStatus != MB_ENOERR )
 8004bce:	2800      	cmp	r0, #0
 8004bd0:	d0f1      	beq.n	8004bb6 <eMBFuncWriteHoldingRegister+0xa>
            eStatus = prveMBError2Exception( eRegStatus );
 8004bd2:	f000 fa67 	bl	80050a4 <prveMBError2Exception>
 8004bd6:	e7ee      	b.n	8004bb6 <eMBFuncWriteHoldingRegister+0xa>

08004bd8 <eMBFuncWriteMultipleHoldingRegister>:
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8004bd8:	880b      	ldrh	r3, [r1, #0]
 8004bda:	2b05      	cmp	r3, #5
 8004bdc:	d921      	bls.n	8004c22 <eMBFuncWriteMultipleHoldingRegister+0x4a>
{
 8004bde:	b510      	push	{r4, lr}
 8004be0:	460c      	mov	r4, r1
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 8004be2:	78c3      	ldrb	r3, [r0, #3]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 8004be4:	7902      	ldrb	r2, [r0, #4]
 8004be6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];

        if( ( usRegCount >= 1 ) &&
 8004bea:	1e53      	subs	r3, r2, #1
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	2b77      	cmp	r3, #119	; 0x77
 8004bf0:	d819      	bhi.n	8004c26 <eMBFuncWriteMultipleHoldingRegister+0x4e>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 8004bf2:	0053      	lsls	r3, r2, #1
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 8004bf4:	7941      	ldrb	r1, [r0, #5]
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	4299      	cmp	r1, r3
 8004bfa:	d001      	beq.n	8004c00 <eMBFuncWriteMultipleHoldingRegister+0x28>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004bfc:	2003      	movs	r0, #3
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8004bfe:	bd10      	pop	{r4, pc}
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8004c00:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8004c02:	7881      	ldrb	r1, [r0, #2]
 8004c04:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8004c08:	3101      	adds	r1, #1
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	b289      	uxth	r1, r1
 8004c0e:	3006      	adds	r0, #6
 8004c10:	f000 fbfc 	bl	800540c <eMBRegHoldingCB>
            if( eRegStatus != MB_ENOERR )
 8004c14:	b910      	cbnz	r0, 8004c1c <eMBFuncWriteMultipleHoldingRegister+0x44>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8004c16:	2305      	movs	r3, #5
 8004c18:	8023      	strh	r3, [r4, #0]
 8004c1a:	e7f0      	b.n	8004bfe <eMBFuncWriteMultipleHoldingRegister+0x26>
                eStatus = prveMBError2Exception( eRegStatus );
 8004c1c:	f000 fa42 	bl	80050a4 <prveMBError2Exception>
 8004c20:	e7ed      	b.n	8004bfe <eMBFuncWriteMultipleHoldingRegister+0x26>
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004c22:	2003      	movs	r0, #3
}
 8004c24:	4770      	bx	lr
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004c26:	2003      	movs	r0, #3
 8004c28:	e7e9      	b.n	8004bfe <eMBFuncWriteMultipleHoldingRegister+0x26>

08004c2a <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8004c2a:	b538      	push	{r3, r4, r5, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8004c2c:	880b      	ldrh	r3, [r1, #0]
 8004c2e:	2b05      	cmp	r3, #5
 8004c30:	d001      	beq.n	8004c36 <eMBFuncReadHoldingRegister+0xc>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004c32:	2003      	movs	r0, #3
    }
    return eStatus;
}
 8004c34:	bd38      	pop	{r3, r4, r5, pc}
 8004c36:	460c      	mov	r4, r1
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8004c38:	78c3      	ldrb	r3, [r0, #3]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8004c3a:	7905      	ldrb	r5, [r0, #4]
 8004c3c:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8004c40:	1e6b      	subs	r3, r5, #1
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	2b7c      	cmp	r3, #124	; 0x7c
 8004c46:	d901      	bls.n	8004c4c <eMBFuncReadHoldingRegister+0x22>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004c48:	2003      	movs	r0, #3
 8004c4a:	e7f3      	b.n	8004c34 <eMBFuncReadHoldingRegister+0xa>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8004c4c:	f890 c001 	ldrb.w	ip, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8004c50:	7881      	ldrb	r1, [r0, #2]
            *usLen = MB_PDU_FUNC_OFF;
 8004c52:	2300      	movs	r3, #0
 8004c54:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 8004c56:	2203      	movs	r2, #3
 8004c58:	7002      	strb	r2, [r0, #0]
            *usLen += 1;
 8004c5a:	8822      	ldrh	r2, [r4, #0]
 8004c5c:	3201      	adds	r2, #1
 8004c5e:	8022      	strh	r2, [r4, #0]
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 8004c60:	006a      	lsls	r2, r5, #1
 8004c62:	7042      	strb	r2, [r0, #1]
            *usLen += 1;
 8004c64:	8822      	ldrh	r2, [r4, #0]
 8004c66:	3201      	adds	r2, #1
 8004c68:	8022      	strh	r2, [r4, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8004c6a:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
        usRegAddress++;
 8004c6e:	3101      	adds	r1, #1
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 8004c70:	462a      	mov	r2, r5
 8004c72:	b289      	uxth	r1, r1
 8004c74:	3002      	adds	r0, #2
 8004c76:	f000 fbc9 	bl	800540c <eMBRegHoldingCB>
            if( eRegStatus != MB_ENOERR )
 8004c7a:	b920      	cbnz	r0, 8004c86 <eMBFuncReadHoldingRegister+0x5c>
                *usLen += usRegCount * 2;
 8004c7c:	8823      	ldrh	r3, [r4, #0]
 8004c7e:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004c82:	8025      	strh	r5, [r4, #0]
 8004c84:	e7d6      	b.n	8004c34 <eMBFuncReadHoldingRegister+0xa>
                eStatus = prveMBError2Exception( eRegStatus );
 8004c86:	f000 fa0d 	bl	80050a4 <prveMBError2Exception>
 8004c8a:	e7d3      	b.n	8004c34 <eMBFuncReadHoldingRegister+0xa>

08004c8c <eMBFuncReadWriteMultipleHoldingRegister>:
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8004c8c:	880b      	ldrh	r3, [r1, #0]
 8004c8e:	2b09      	cmp	r3, #9
 8004c90:	d945      	bls.n	8004d1e <eMBFuncReadWriteMultipleHoldingRegister+0x92>
{
 8004c92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c96:	4604      	mov	r4, r0
 8004c98:	460d      	mov	r5, r1
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 8004c9a:	78c3      	ldrb	r3, [r0, #3]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 8004c9c:	7906      	ldrb	r6, [r0, #4]
 8004c9e:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8004ca2:	1e73      	subs	r3, r6, #1
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	2b7c      	cmp	r3, #124	; 0x7c
 8004ca8:	d83b      	bhi.n	8004d22 <eMBFuncReadWriteMultipleHoldingRegister+0x96>
        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8004caa:	79c3      	ldrb	r3, [r0, #7]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 8004cac:	7a02      	ldrb	r2, [r0, #8]
 8004cae:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8004cb2:	1e53      	subs	r3, r2, #1
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	2b78      	cmp	r3, #120	; 0x78
 8004cb8:	d836      	bhi.n	8004d28 <eMBFuncReadWriteMultipleHoldingRegister+0x9c>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 8004cba:	7a43      	ldrb	r3, [r0, #9]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8004cbc:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8004cc0:	d001      	beq.n	8004cc6 <eMBFuncReadWriteMultipleHoldingRegister+0x3a>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004cc2:	2003      	movs	r0, #3
 8004cc4:	e02e      	b.n	8004d24 <eMBFuncReadWriteMultipleHoldingRegister+0x98>
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 8004cc6:	f890 8001 	ldrb.w	r8, [r0, #1]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8004cca:	7887      	ldrb	r7, [r0, #2]
        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 8004ccc:	7943      	ldrb	r3, [r0, #5]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 8004cce:	7981      	ldrb	r1, [r0, #6]
 8004cd0:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegWriteAddress++;
 8004cd4:	3101      	adds	r1, #1
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	b289      	uxth	r1, r1
 8004cda:	300a      	adds	r0, #10
 8004cdc:	f000 fb96 	bl	800540c <eMBRegHoldingCB>
 8004ce0:	4603      	mov	r3, r0
            if( eRegStatus == MB_ENOERR )
 8004ce2:	b110      	cbz	r0, 8004cea <eMBFuncReadWriteMultipleHoldingRegister+0x5e>
                eStatus = prveMBError2Exception( eRegStatus );
 8004ce4:	f000 f9de 	bl	80050a4 <prveMBError2Exception>
        }
    }
    return eStatus;
 8004ce8:	e01c      	b.n	8004d24 <eMBFuncReadWriteMultipleHoldingRegister+0x98>
                *usLen = MB_PDU_FUNC_OFF;
 8004cea:	8028      	strh	r0, [r5, #0]
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 8004cec:	2217      	movs	r2, #23
 8004cee:	7022      	strb	r2, [r4, #0]
                *usLen += 1;
 8004cf0:	882a      	ldrh	r2, [r5, #0]
 8004cf2:	3201      	adds	r2, #1
 8004cf4:	802a      	strh	r2, [r5, #0]
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8004cf6:	0072      	lsls	r2, r6, #1
 8004cf8:	7062      	strb	r2, [r4, #1]
                *usLen += 1;
 8004cfa:	882a      	ldrh	r2, [r5, #0]
 8004cfc:	3201      	adds	r2, #1
 8004cfe:	802a      	strh	r2, [r5, #0]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8004d00:	ea47 2108 	orr.w	r1, r7, r8, lsl #8
        usRegReadAddress++;
 8004d04:	3101      	adds	r1, #1
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 8004d06:	4632      	mov	r2, r6
 8004d08:	b289      	uxth	r1, r1
 8004d0a:	1ca0      	adds	r0, r4, #2
 8004d0c:	f000 fb7e 	bl	800540c <eMBRegHoldingCB>
                if( eRegStatus == MB_ENOERR )
 8004d10:	2800      	cmp	r0, #0
 8004d12:	d1e7      	bne.n	8004ce4 <eMBFuncReadWriteMultipleHoldingRegister+0x58>
                    *usLen += 2 * usRegReadCount;
 8004d14:	882b      	ldrh	r3, [r5, #0]
 8004d16:	eb03 0646 	add.w	r6, r3, r6, lsl #1
 8004d1a:	802e      	strh	r6, [r5, #0]
            if( eRegStatus != MB_ENOERR )
 8004d1c:	e002      	b.n	8004d24 <eMBFuncReadWriteMultipleHoldingRegister+0x98>
    eMBException    eStatus = MB_EX_NONE;
 8004d1e:	2000      	movs	r0, #0
}
 8004d20:	4770      	bx	lr
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004d22:	2003      	movs	r0, #3
}
 8004d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004d28:	2003      	movs	r0, #3
 8004d2a:	e7fb      	b.n	8004d24 <eMBFuncReadWriteMultipleHoldingRegister+0x98>

08004d2c <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8004d2c:	b538      	push	{r3, r4, r5, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8004d2e:	880b      	ldrh	r3, [r1, #0]
 8004d30:	2b05      	cmp	r3, #5
 8004d32:	d001      	beq.n	8004d38 <eMBFuncReadInputRegister+0xc>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004d34:	2003      	movs	r0, #3
    }
    return eStatus;
}
 8004d36:	bd38      	pop	{r3, r4, r5, pc}
 8004d38:	460c      	mov	r4, r1
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8004d3a:	78c3      	ldrb	r3, [r0, #3]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8004d3c:	7905      	ldrb	r5, [r0, #4]
 8004d3e:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8004d42:	1e6b      	subs	r3, r5, #1
        if( ( usRegCount >= 1 )
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	2b7b      	cmp	r3, #123	; 0x7b
 8004d48:	d901      	bls.n	8004d4e <eMBFuncReadInputRegister+0x22>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004d4a:	2003      	movs	r0, #3
 8004d4c:	e7f3      	b.n	8004d36 <eMBFuncReadInputRegister+0xa>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8004d4e:	7842      	ldrb	r2, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8004d50:	7881      	ldrb	r1, [r0, #2]
            *usLen = MB_PDU_FUNC_OFF;
 8004d52:	2300      	movs	r3, #0
 8004d54:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 8004d56:	2304      	movs	r3, #4
 8004d58:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 8004d5a:	8823      	ldrh	r3, [r4, #0]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 8004d60:	006b      	lsls	r3, r5, #1
 8004d62:	7043      	strb	r3, [r0, #1]
            *usLen += 1;
 8004d64:	8823      	ldrh	r3, [r4, #0]
 8004d66:	3301      	adds	r3, #1
 8004d68:	8023      	strh	r3, [r4, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8004d6a:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
        usRegAddress++;
 8004d6e:	3101      	adds	r1, #1
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 8004d70:	462a      	mov	r2, r5
 8004d72:	b289      	uxth	r1, r1
 8004d74:	3002      	adds	r0, #2
 8004d76:	f000 fb1d 	bl	80053b4 <eMBRegInputCB>
            if( eRegStatus != MB_ENOERR )
 8004d7a:	b920      	cbnz	r0, 8004d86 <eMBFuncReadInputRegister+0x5a>
                *usLen += usRegCount * 2;
 8004d7c:	8823      	ldrh	r3, [r4, #0]
 8004d7e:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004d82:	8025      	strh	r5, [r4, #0]
 8004d84:	e7d7      	b.n	8004d36 <eMBFuncReadInputRegister+0xa>
                eStatus = prveMBError2Exception( eRegStatus );
 8004d86:	f000 f98d 	bl	80050a4 <prveMBError2Exception>
 8004d8a:	e7d4      	b.n	8004d36 <eMBFuncReadInputRegister+0xa>

08004d8c <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8004d8c:	b538      	push	{r3, r4, r5, lr}
 8004d8e:	460d      	mov	r5, r1
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8004d90:	4b05      	ldr	r3, [pc, #20]	; (8004da8 <eMBFuncReportSlaveID+0x1c>)
 8004d92:	881c      	ldrh	r4, [r3, #0]
 8004d94:	4622      	mov	r2, r4
 8004d96:	4905      	ldr	r1, [pc, #20]	; (8004dac <eMBFuncReportSlaveID+0x20>)
 8004d98:	3001      	adds	r0, #1
 8004d9a:	f002 fc17 	bl	80075cc <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 8004d9e:	3401      	adds	r4, #1
 8004da0:	802c      	strh	r4, [r5, #0]
    return MB_EX_NONE;
}
 8004da2:	2000      	movs	r0, #0
 8004da4:	bd38      	pop	{r3, r4, r5, pc}
 8004da6:	bf00      	nop
 8004da8:	200017b4 	.word	0x200017b4
 8004dac:	20001794 	.word	0x20001794

08004db0 <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8004db0:	b570      	push	{r4, r5, r6, lr}
 8004db2:	460d      	mov	r5, r1
 8004db4:	4614      	mov	r4, r2
 8004db6:	461e      	mov	r6, r3
    eMBErrorCode    eStatus = MB_ENOERR;
    ULONG           usTimerT35_50us;

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );
 8004db8:	f000 f980 	bl	80050bc <EnterCriticalSection>

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 8004dbc:	4633      	mov	r3, r6
 8004dbe:	2208      	movs	r2, #8
 8004dc0:	4621      	mov	r1, r4
 8004dc2:	4628      	mov	r0, r5
 8004dc4:	f000 f9ea 	bl	800519c <xMBPortSerialInit>
 8004dc8:	2801      	cmp	r0, #1
 8004dca:	d004      	beq.n	8004dd6 <eMBRTUInit+0x26>
    {
        eStatus = MB_EPORTERR;
 8004dcc:	2403      	movs	r4, #3
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
        {
            eStatus = MB_EPORTERR;
        }
    }
    EXIT_CRITICAL_SECTION(  );
 8004dce:	f000 f976 	bl	80050be <ExitCriticalSection>

    return eStatus;
}
 8004dd2:	4620      	mov	r0, r4
 8004dd4:	bd70      	pop	{r4, r5, r6, pc}
        if( ulBaudRate > 19200 )
 8004dd6:	f5b4 4f96 	cmp.w	r4, #19200	; 0x4b00
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 8004dda:	bf9d      	ittte	ls
 8004ddc:	0064      	lslls	r4, r4, #1
 8004dde:	4806      	ldrls	r0, [pc, #24]	; (8004df8 <eMBRTUInit+0x48>)
 8004de0:	fbb0 f0f4 	udivls	r0, r0, r4
            usTimerT35_50us = 35;       /* 1800us. */
 8004de4:	2023      	movhi	r0, #35	; 0x23
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 8004de6:	b280      	uxth	r0, r0
 8004de8:	f000 fa9c 	bl	8005324 <xMBPortTimersInit>
            eStatus = MB_EPORTERR;
 8004dec:	2801      	cmp	r0, #1
 8004dee:	bf0c      	ite	eq
 8004df0:	2400      	moveq	r4, #0
 8004df2:	2403      	movne	r4, #3
 8004df4:	e7eb      	b.n	8004dce <eMBRTUInit+0x1e>
 8004df6:	bf00      	nop
 8004df8:	00177fa0 	.word	0x00177fa0

08004dfc <eMBRTUStart>:

void
eMBRTUStart( void )
{
 8004dfc:	b508      	push	{r3, lr}
    ENTER_CRITICAL_SECTION(  );
 8004dfe:	f000 f95d 	bl	80050bc <EnterCriticalSection>
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 8004e02:	2100      	movs	r1, #0
 8004e04:	4b04      	ldr	r3, [pc, #16]	; (8004e18 <eMBRTUStart+0x1c>)
 8004e06:	7019      	strb	r1, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE );
 8004e08:	2001      	movs	r0, #1
 8004e0a:	f000 f9eb 	bl	80051e4 <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
 8004e0e:	f000 fa8e 	bl	800532e <vMBPortTimersEnable>

    EXIT_CRITICAL_SECTION(  );
 8004e12:	f000 f954 	bl	80050be <ExitCriticalSection>
}
 8004e16:	bd08      	pop	{r3, pc}
 8004e18:	200017b6 	.word	0x200017b6

08004e1c <eMBRTUStop>:

void
eMBRTUStop( void )
{
 8004e1c:	b508      	push	{r3, lr}
    ENTER_CRITICAL_SECTION(  );
 8004e1e:	f000 f94d 	bl	80050bc <EnterCriticalSection>
    vMBPortSerialEnable( FALSE, FALSE );
 8004e22:	2100      	movs	r1, #0
 8004e24:	4608      	mov	r0, r1
 8004e26:	f000 f9dd 	bl	80051e4 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
 8004e2a:	f000 fa84 	bl	8005336 <vMBPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
 8004e2e:	f000 f946 	bl	80050be <ExitCriticalSection>
}
 8004e32:	bd08      	pop	{r3, pc}

08004e34 <eMBRTUReceive>:

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 8004e34:	b570      	push	{r4, r5, r6, lr}
 8004e36:	4606      	mov	r6, r0
 8004e38:	460d      	mov	r5, r1
 8004e3a:	4614      	mov	r4, r2
    eMBErrorCode    eStatus = MB_ENOERR;

    ENTER_CRITICAL_SECTION(  );
 8004e3c:	f000 f93e 	bl	80050bc <EnterCriticalSection>
//    assert_param( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 8004e40:	4b0e      	ldr	r3, [pc, #56]	; (8004e7c <eMBRTUReceive+0x48>)
 8004e42:	881b      	ldrh	r3, [r3, #0]
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	2b03      	cmp	r3, #3
 8004e48:	d804      	bhi.n	8004e54 <eMBRTUReceive+0x20>
        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
    }
    else
    {
        eStatus = MB_EIO;
 8004e4a:	2405      	movs	r4, #5
    }

    EXIT_CRITICAL_SECTION(  );
 8004e4c:	f000 f937 	bl	80050be <ExitCriticalSection>
    return eStatus;
}
 8004e50:	4620      	mov	r0, r4
 8004e52:	bd70      	pop	{r4, r5, r6, pc}
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 8004e54:	4b09      	ldr	r3, [pc, #36]	; (8004e7c <eMBRTUReceive+0x48>)
 8004e56:	8819      	ldrh	r1, [r3, #0]
 8004e58:	b289      	uxth	r1, r1
 8004e5a:	4809      	ldr	r0, [pc, #36]	; (8004e80 <eMBRTUReceive+0x4c>)
 8004e5c:	f7ff fdb6 	bl	80049cc <usMBCRC16>
 8004e60:	b950      	cbnz	r0, 8004e78 <eMBRTUReceive+0x44>
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 8004e62:	4b07      	ldr	r3, [pc, #28]	; (8004e80 <eMBRTUReceive+0x4c>)
 8004e64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e68:	7032      	strb	r2, [r6, #0]
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 8004e6a:	4a04      	ldr	r2, [pc, #16]	; (8004e7c <eMBRTUReceive+0x48>)
 8004e6c:	8812      	ldrh	r2, [r2, #0]
 8004e6e:	3a03      	subs	r2, #3
 8004e70:	8022      	strh	r2, [r4, #0]
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 8004e72:	602b      	str	r3, [r5, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8004e74:	2400      	movs	r4, #0
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 8004e76:	e7e9      	b.n	8004e4c <eMBRTUReceive+0x18>
        eStatus = MB_EIO;
 8004e78:	2405      	movs	r4, #5
 8004e7a:	e7e7      	b.n	8004e4c <eMBRTUReceive+0x18>
 8004e7c:	200018bc 	.word	0x200018bc
 8004e80:	200017bc 	.word	0x200017bc

08004e84 <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 8004e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e88:	4605      	mov	r5, r0
 8004e8a:	460c      	mov	r4, r1
 8004e8c:	4690      	mov	r8, r2
    eMBErrorCode    eStatus = MB_ENOERR;
    USHORT          usCRC16;

    ENTER_CRITICAL_SECTION(  );
 8004e8e:	f000 f915 	bl	80050bc <EnterCriticalSection>

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
 8004e92:	4b19      	ldr	r3, [pc, #100]	; (8004ef8 <eMBRTUSend+0x74>)
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d005      	beq.n	8004ea8 <eMBRTUSend+0x24>
        eSndState = STATE_TX_XMIT;
        vMBPortSerialEnable( FALSE, TRUE );
    }
    else
    {
        eStatus = MB_EIO;
 8004e9c:	2405      	movs	r4, #5
    }
    EXIT_CRITICAL_SECTION(  );
 8004e9e:	f000 f90e 	bl	80050be <ExitCriticalSection>
    return eStatus;
}
 8004ea2:	4620      	mov	r0, r4
 8004ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 8004ea8:	1e60      	subs	r0, r4, #1
 8004eaa:	4b14      	ldr	r3, [pc, #80]	; (8004efc <eMBRTUSend+0x78>)
 8004eac:	6018      	str	r0, [r3, #0]
        usSndBufferCount = 1;
 8004eae:	4f14      	ldr	r7, [pc, #80]	; (8004f00 <eMBRTUSend+0x7c>)
 8004eb0:	2601      	movs	r6, #1
 8004eb2:	803e      	strh	r6, [r7, #0]
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 8004eb4:	f804 5c01 	strb.w	r5, [r4, #-1]
        usSndBufferCount += usLength;
 8004eb8:	883a      	ldrh	r2, [r7, #0]
 8004eba:	4442      	add	r2, r8
 8004ebc:	b292      	uxth	r2, r2
 8004ebe:	803a      	strh	r2, [r7, #0]
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 8004ec0:	8839      	ldrh	r1, [r7, #0]
 8004ec2:	b289      	uxth	r1, r1
 8004ec4:	f7ff fd82 	bl	80049cc <usMBCRC16>
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 8004ec8:	883b      	ldrh	r3, [r7, #0]
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	199a      	adds	r2, r3, r6
 8004ece:	b292      	uxth	r2, r2
 8004ed0:	803a      	strh	r2, [r7, #0]
 8004ed2:	b2c2      	uxtb	r2, r0
 8004ed4:	490b      	ldr	r1, [pc, #44]	; (8004f04 <eMBRTUSend+0x80>)
 8004ed6:	54ca      	strb	r2, [r1, r3]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 8004ed8:	883b      	ldrh	r3, [r7, #0]
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	199a      	adds	r2, r3, r6
 8004ede:	b292      	uxth	r2, r2
 8004ee0:	803a      	strh	r2, [r7, #0]
 8004ee2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8004ee6:	54c8      	strb	r0, [r1, r3]
        eSndState = STATE_TX_XMIT;
 8004ee8:	4b07      	ldr	r3, [pc, #28]	; (8004f08 <eMBRTUSend+0x84>)
 8004eea:	701e      	strb	r6, [r3, #0]
        vMBPortSerialEnable( FALSE, TRUE );
 8004eec:	4631      	mov	r1, r6
 8004eee:	2000      	movs	r0, #0
 8004ef0:	f000 f978 	bl	80051e4 <vMBPortSerialEnable>
    eMBErrorCode    eStatus = MB_ENOERR;
 8004ef4:	2400      	movs	r4, #0
 8004ef6:	e7d2      	b.n	8004e9e <eMBRTUSend+0x1a>
 8004ef8:	200017b6 	.word	0x200017b6
 8004efc:	200017b8 	.word	0x200017b8
 8004f00:	200018be 	.word	0x200018be
 8004f04:	200017bc 	.word	0x200017bc
 8004f08:	200017b7 	.word	0x200017b7

08004f0c <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )
{
 8004f0c:	b500      	push	{lr}
 8004f0e:	b083      	sub	sp, #12
    UCHAR           ucByte;

  //  assert_param( eSndState == STATE_TX_IDLE );

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 8004f10:	f10d 0007 	add.w	r0, sp, #7
 8004f14:	f000 f9b0 	bl	8005278 <xMBPortSerialGetByte>

    switch ( eRcvState )
 8004f18:	4b1c      	ldr	r3, [pc, #112]	; (8004f8c <xMBRTUReceiveFSM+0x80>)
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b03      	cmp	r3, #3
 8004f20:	d805      	bhi.n	8004f2e <xMBRTUReceiveFSM+0x22>
 8004f22:	e8df f003 	tbb	[pc, r3]
 8004f26:	0b02      	.short	0x0b02
 8004f28:	081d      	.short	0x081d
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_RX_INIT:
        vMBPortTimersEnable( );
 8004f2a:	f000 fa00 	bl	800532e <vMBPortTimersEnable>
        }
        vMBPortTimersEnable();
        break;
    }
    return xTaskNeedSwitch;
}
 8004f2e:	2000      	movs	r0, #0
 8004f30:	b003      	add	sp, #12
 8004f32:	f85d fb04 	ldr.w	pc, [sp], #4
        vMBPortTimersEnable( );
 8004f36:	f000 f9fa 	bl	800532e <vMBPortTimersEnable>
        break;
 8004f3a:	e7f8      	b.n	8004f2e <xMBRTUReceiveFSM+0x22>
        usRcvBufferPos = 0;
 8004f3c:	4a14      	ldr	r2, [pc, #80]	; (8004f90 <xMBRTUReceiveFSM+0x84>)
 8004f3e:	2300      	movs	r3, #0
 8004f40:	8013      	strh	r3, [r2, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 8004f42:	8813      	ldrh	r3, [r2, #0]
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	1c59      	adds	r1, r3, #1
 8004f48:	b289      	uxth	r1, r1
 8004f4a:	8011      	strh	r1, [r2, #0]
 8004f4c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8004f50:	4a10      	ldr	r2, [pc, #64]	; (8004f94 <xMBRTUReceiveFSM+0x88>)
 8004f52:	54d1      	strb	r1, [r2, r3]
        eRcvState = STATE_RX_RCV;
 8004f54:	4b0d      	ldr	r3, [pc, #52]	; (8004f8c <xMBRTUReceiveFSM+0x80>)
 8004f56:	2202      	movs	r2, #2
 8004f58:	701a      	strb	r2, [r3, #0]
        vMBPortTimersEnable( );
 8004f5a:	f000 f9e8 	bl	800532e <vMBPortTimersEnable>
        break;
 8004f5e:	e7e6      	b.n	8004f2e <xMBRTUReceiveFSM+0x22>
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 8004f60:	4b0b      	ldr	r3, [pc, #44]	; (8004f90 <xMBRTUReceiveFSM+0x84>)
 8004f62:	881b      	ldrh	r3, [r3, #0]
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	2bff      	cmp	r3, #255	; 0xff
 8004f68:	d80c      	bhi.n	8004f84 <xMBRTUReceiveFSM+0x78>
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 8004f6a:	4909      	ldr	r1, [pc, #36]	; (8004f90 <xMBRTUReceiveFSM+0x84>)
 8004f6c:	880b      	ldrh	r3, [r1, #0]
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	1c5a      	adds	r2, r3, #1
 8004f72:	b292      	uxth	r2, r2
 8004f74:	800a      	strh	r2, [r1, #0]
 8004f76:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8004f7a:	4a06      	ldr	r2, [pc, #24]	; (8004f94 <xMBRTUReceiveFSM+0x88>)
 8004f7c:	54d1      	strb	r1, [r2, r3]
        vMBPortTimersEnable();
 8004f7e:	f000 f9d6 	bl	800532e <vMBPortTimersEnable>
        break;
 8004f82:	e7d4      	b.n	8004f2e <xMBRTUReceiveFSM+0x22>
            eRcvState = STATE_RX_ERROR;
 8004f84:	4b01      	ldr	r3, [pc, #4]	; (8004f8c <xMBRTUReceiveFSM+0x80>)
 8004f86:	2203      	movs	r2, #3
 8004f88:	701a      	strb	r2, [r3, #0]
 8004f8a:	e7f8      	b.n	8004f7e <xMBRTUReceiveFSM+0x72>
 8004f8c:	200017b6 	.word	0x200017b6
 8004f90:	200018bc 	.word	0x200018bc
 8004f94:	200017bc 	.word	0x200017bc

08004f98 <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
 8004f98:	b510      	push	{r4, lr}
    BOOL            xNeedPoll = FALSE;

   // assert_param( eRcvState == STATE_RX_IDLE );

    switch ( eSndState )
 8004f9a:	4b17      	ldr	r3, [pc, #92]	; (8004ff8 <xMBRTUTransmitFSM+0x60>)
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 8004fa2:	b123      	cbz	r3, 8004fae <xMBRTUTransmitFSM+0x16>
 8004fa4:	2c01      	cmp	r4, #1
 8004fa6:	d007      	beq.n	8004fb8 <xMBRTUTransmitFSM+0x20>
 8004fa8:	2400      	movs	r4, #0
        }
        break;
    }

    return xNeedPoll;
}
 8004faa:	4620      	mov	r0, r4
 8004fac:	bd10      	pop	{r4, pc}
        vMBPortSerialEnable( TRUE, FALSE );
 8004fae:	2100      	movs	r1, #0
 8004fb0:	2001      	movs	r0, #1
 8004fb2:	f000 f917 	bl	80051e4 <vMBPortSerialEnable>
        break;
 8004fb6:	e7f8      	b.n	8004faa <xMBRTUTransmitFSM+0x12>
        if( usSndBufferCount != 0 )
 8004fb8:	4b10      	ldr	r3, [pc, #64]	; (8004ffc <xMBRTUTransmitFSM+0x64>)
 8004fba:	881b      	ldrh	r3, [r3, #0]
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	b173      	cbz	r3, 8004fde <xMBRTUTransmitFSM+0x46>
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 8004fc0:	4c0f      	ldr	r4, [pc, #60]	; (8005000 <xMBRTUTransmitFSM+0x68>)
 8004fc2:	6823      	ldr	r3, [r4, #0]
 8004fc4:	7818      	ldrb	r0, [r3, #0]
 8004fc6:	f000 f93f 	bl	8005248 <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
 8004fca:	6823      	ldr	r3, [r4, #0]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	6023      	str	r3, [r4, #0]
            usSndBufferCount--;
 8004fd0:	4a0a      	ldr	r2, [pc, #40]	; (8004ffc <xMBRTUTransmitFSM+0x64>)
 8004fd2:	8813      	ldrh	r3, [r2, #0]
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	8013      	strh	r3, [r2, #0]
    BOOL            xNeedPoll = FALSE;
 8004fda:	2400      	movs	r4, #0
 8004fdc:	e7e5      	b.n	8004faa <xMBRTUTransmitFSM+0x12>
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 8004fde:	2008      	movs	r0, #8
 8004fe0:	f000 f878 	bl	80050d4 <xMBPortEventPost>
 8004fe4:	4604      	mov	r4, r0
            vMBPortSerialEnable( TRUE, FALSE );
 8004fe6:	2100      	movs	r1, #0
 8004fe8:	2001      	movs	r0, #1
 8004fea:	f000 f8fb 	bl	80051e4 <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 8004fee:	4b02      	ldr	r3, [pc, #8]	; (8004ff8 <xMBRTUTransmitFSM+0x60>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	701a      	strb	r2, [r3, #0]
 8004ff4:	e7d9      	b.n	8004faa <xMBRTUTransmitFSM+0x12>
 8004ff6:	bf00      	nop
 8004ff8:	200017b7 	.word	0x200017b7
 8004ffc:	200018be 	.word	0x200018be
 8005000:	200017b8 	.word	0x200017b8

08005004 <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
 8005004:	b510      	push	{r4, lr}
    BOOL            xNeedPoll = FALSE;

    switch ( eRcvState )
 8005006:	4b0c      	ldr	r3, [pc, #48]	; (8005038 <xMBRTUTimerT35Expired+0x34>)
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	b15b      	cbz	r3, 8005024 <xMBRTUTimerT35Expired+0x20>
 800500c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005010:	2a02      	cmp	r2, #2
 8005012:	d00c      	beq.n	800502e <xMBRTUTimerT35Expired+0x2a>
 8005014:	2400      	movs	r4, #0
    //    assert_param( ( eRcvState == STATE_RX_INIT ) ||
    //            ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
         break;
    }

    vMBPortTimersDisable(  );
 8005016:	f000 f98e 	bl	8005336 <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
 800501a:	4b07      	ldr	r3, [pc, #28]	; (8005038 <xMBRTUTimerT35Expired+0x34>)
 800501c:	2201      	movs	r2, #1
 800501e:	701a      	strb	r2, [r3, #0]

    return xNeedPoll;
}
 8005020:	4620      	mov	r0, r4
 8005022:	bd10      	pop	{r4, pc}
        xNeedPoll = xMBPortEventPost( EV_READY );
 8005024:	2001      	movs	r0, #1
 8005026:	f000 f855 	bl	80050d4 <xMBPortEventPost>
 800502a:	4604      	mov	r4, r0
        break;
 800502c:	e7f3      	b.n	8005016 <xMBRTUTimerT35Expired+0x12>
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 800502e:	2002      	movs	r0, #2
 8005030:	f000 f850 	bl	80050d4 <xMBPortEventPost>
 8005034:	4604      	mov	r4, r0
        break;
 8005036:	e7ee      	b.n	8005016 <xMBRTUTimerT35Expired+0x12>
 8005038:	200017b6 	.word	0x200017b6

0800503c <xMBUtilSetBits>:

/* ----------------------- Start implementation -----------------------------*/
void
xMBUtilSetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits,
                UCHAR ucValue )
{
 800503c:	b530      	push	{r4, r5, lr}
  //  assert_param( ucNBits <= 8 );
  //  assert_param( ( size_t )BITS_UCHAR == sizeof( UCHAR ) * 8 );

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 800503e:	08cc      	lsrs	r4, r1, #3
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8005040:	f104 0e01 	add.w	lr, r4, #1
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8005044:	f04f 0c01 	mov.w	ip, #1
 8005048:	fa0c fc02 	lsl.w	ip, ip, r2
 800504c:	f10c 3cff 	add.w	ip, ip, #4294967295
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;
 8005050:	fa1f fc8c 	uxth.w	ip, ip
 8005054:	eba1 02c4 	sub.w	r2, r1, r4, lsl #3
 8005058:	fa0c fc02 	lsl.w	ip, ip, r2
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 800505c:	f810 500e 	ldrb.w	r5, [r0, lr]
 8005060:	5d02      	ldrb	r2, [r0, r4]
 8005062:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 8005066:	ea22 020c 	bic.w	r2, r2, ip
    usValue <<= usNPreBits;
 800506a:	f001 0107 	and.w	r1, r1, #7
 800506e:	408b      	lsls	r3, r1
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 8005070:	4313      	orrs	r3, r2
 8005072:	b21b      	sxth	r3, r3

    /* move bits back into storage */
    ucByteBuf[usByteOffset] = ( UCHAR )( usWordBuf & 0xFF );
 8005074:	5503      	strb	r3, [r0, r4]
    ucByteBuf[usByteOffset + 1] = ( UCHAR )( usWordBuf >> BITS_UCHAR );
 8005076:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800507a:	f800 300e 	strb.w	r3, [r0, lr]
}
 800507e:	bd30      	pop	{r4, r5, pc}

08005080 <xMBUtilGetBits>:
    USHORT          usByteOffset;
    USHORT          usNPreBits;

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 8005080:	ea4f 0cd1 	mov.w	ip, r1, lsr #3
    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8005084:	f10c 0301 	add.w	r3, ip, #1
 8005088:	5cc3      	ldrb	r3, [r0, r3]
 800508a:	f810 000c 	ldrb.w	r0, [r0, ip]

    /* throw away unneeded bits. */
    usWordBuf >>= usNPreBits;
 800508e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8005092:	f001 0107 	and.w	r1, r1, #7
 8005096:	4108      	asrs	r0, r1
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8005098:	2301      	movs	r3, #1
 800509a:	4093      	lsls	r3, r2
 800509c:	3b01      	subs	r3, #1

    /* mask away bits above the requested bitfield. */
    usWordBuf &= usMask;
 800509e:	4018      	ands	r0, r3

    return ( UCHAR ) usWordBuf;
}
 80050a0:	b2c0      	uxtb	r0, r0
 80050a2:	4770      	bx	lr

080050a4 <prveMBError2Exception>:
eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
    eMBException    eStatus;

    switch ( eErrorCode )
 80050a4:	2801      	cmp	r0, #1
 80050a6:	d005      	beq.n	80050b4 <prveMBError2Exception+0x10>
 80050a8:	2807      	cmp	r0, #7
 80050aa:	d005      	beq.n	80050b8 <prveMBError2Exception+0x14>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 80050ac:	2800      	cmp	r0, #0
 80050ae:	bf18      	it	ne
 80050b0:	2004      	movne	r0, #4
 80050b2:	4770      	bx	lr
    switch ( eErrorCode )
 80050b4:	2002      	movs	r0, #2
 80050b6:	4770      	bx	lr
        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
            break;

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 80050b8:	2006      	movs	r0, #6
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
            break;
    }

    return eStatus;
}
 80050ba:	4770      	bx	lr

080050bc <EnterCriticalSection>:

/* ----------------------- Start implementation -----------------------------*/
void EnterCriticalSection(void)
{
  //  rt_enter_critical();
}
 80050bc:	4770      	bx	lr

080050be <ExitCriticalSection>:

void ExitCriticalSection(void)
{
   // rt_exit_critical();
}
 80050be:	4770      	bx	lr

080050c0 <xMBPortEventInit>:



BOOL
xMBPortEventInit( void )
{
 80050c0:	b508      	push	{r3, lr}
	xSlaveOsEventGroupHandle = xGetOSEvent();
 80050c2:	f7fc fac5 	bl	8001650 <xGetOSEvent>
 80050c6:	4b02      	ldr	r3, [pc, #8]	; (80050d0 <xMBPortEventInit+0x10>)
 80050c8:	6018      	str	r0, [r3, #0]

   // rt_event_init(&xSlaveOsEvent,"slave event",RT_IPC_FLAG_PRIO);
    return TRUE;
}
 80050ca:	2001      	movs	r0, #1
 80050cc:	bd08      	pop	{r3, pc}
 80050ce:	bf00      	nop
 80050d0:	200018c0 	.word	0x200018c0

080050d4 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
 80050d4:	b500      	push	{lr}
 80050d6:	b083      	sub	sp, #12
 80050d8:	4601      	mov	r1, r0
	BaseType_t xHigherPriorityTaskWoken, xResult;
	  switch (eEvent)
 80050da:	2804      	cmp	r0, #4
 80050dc:	d01f      	beq.n	800511e <xMBPortEventPost+0x4a>
 80050de:	d818      	bhi.n	8005112 <xMBPortEventPost+0x3e>
 80050e0:	1e43      	subs	r3, r0, #1
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d816      	bhi.n	8005116 <xMBPortEventPost+0x42>
	    {
	    case EV_READY:
	    case EV_FRAME_RECEIVED:

	    		/* xHigherPriorityTaskWoken must be initialised to pdFALSE. */
	    		xHigherPriorityTaskWoken = pdFALSE;
 80050e8:	2300      	movs	r3, #0
 80050ea:	9301      	str	r3, [sp, #4]

	    		 /* Set bit 0 and bit 4 in xEventGroup. */
	    		 xResult = xEventGroupSetBitsFromISR(
 80050ec:	aa01      	add	r2, sp, #4
 80050ee:	4b17      	ldr	r3, [pc, #92]	; (800514c <xMBPortEventPost+0x78>)
 80050f0:	6818      	ldr	r0, [r3, #0]
 80050f2:	f000 fca1 	bl	8005a38 <xEventGroupSetBitsFromISR>
	    				 	 	 	 	 	 	 xSlaveOsEventGroupHandle,   /* The event group being updated. */
												 eEvent , /* The bits being set. */
	    		                              &xHigherPriorityTaskWoken );

	    		  /* Was the message posted successfully? */
	    		  if( xResult != pdFAIL )
 80050f6:	b170      	cbz	r0, 8005116 <xMBPortEventPost+0x42>
	    		  {
	    		      /* If xHigherPriorityTaskWoken is now set to pdTRUE then a context
	    		      switch should be requested.  The macro used is port specific and will
	    		      be either portYIELD_FROM_ISR() or portEND_SWITCHING_ISR() - refer to
	    		      the documentation page for the port being used. */
	    		      portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80050f8:	9b01      	ldr	r3, [sp, #4]
 80050fa:	b163      	cbz	r3, 8005116 <xMBPortEventPost+0x42>
 80050fc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005104:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	f3bf 8f6f 	isb	sy
 8005110:	e001      	b.n	8005116 <xMBPortEventPost+0x42>
	  switch (eEvent)
 8005112:	2808      	cmp	r0, #8
 8005114:	d003      	beq.n	800511e <xMBPortEventPost+0x4a>



   // rt_event_send(&xSlaveOsEvent, eEvent);
    return TRUE;
}
 8005116:	2001      	movs	r0, #1
 8005118:	b003      	add	sp, #12
 800511a:	f85d fb04 	ldr.w	pc, [sp], #4
	    	xHigherPriorityTaskWoken = pdFALSE;
 800511e:	2300      	movs	r3, #0
 8005120:	9301      	str	r3, [sp, #4]
	    	xResult =xEventGroupSetBitsFromISR(
 8005122:	aa01      	add	r2, sp, #4
 8005124:	4b09      	ldr	r3, [pc, #36]	; (800514c <xMBPortEventPost+0x78>)
 8005126:	6818      	ldr	r0, [r3, #0]
 8005128:	f000 fc86 	bl	8005a38 <xEventGroupSetBitsFromISR>
	    	 if( xResult != pdFAIL )
 800512c:	2800      	cmp	r0, #0
 800512e:	d0f2      	beq.n	8005116 <xMBPortEventPost+0x42>
	    		    		      portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8005130:	9b01      	ldr	r3, [sp, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d0ef      	beq.n	8005116 <xMBPortEventPost+0x42>
 8005136:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800513a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800513e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005142:	f3bf 8f4f 	dsb	sy
 8005146:	f3bf 8f6f 	isb	sy
 800514a:	e7e4      	b.n	8005116 <xMBPortEventPost+0x42>
 800514c:	200018c0 	.word	0x200018c0

08005150 <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
 8005150:	b530      	push	{r4, r5, lr}
 8005152:	b083      	sub	sp, #12
 8005154:	4605      	mov	r5, r0
   // rt_uint32_t recvedEvent;
    /* waiting forever OS event */
	 EventBits_t recvedEvent;
	 recvedEvent = xEventGroupWaitBits(xSlaveOsEventGroupHandle,    EV_READY | EV_FRAME_RECEIVED | EV_EXECUTE | EV_FRAME_SENT,   pdTRUE, pdFALSE, portMAX_DELAY );
 8005156:	f04f 33ff 	mov.w	r3, #4294967295
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	2300      	movs	r3, #0
 800515e:	2201      	movs	r2, #1
 8005160:	210f      	movs	r1, #15
 8005162:	4c0d      	ldr	r4, [pc, #52]	; (8005198 <xMBPortEventGet+0x48>)
 8005164:	6820      	ldr	r0, [r4, #0]
 8005166:	f000 fb8e 	bl	8005886 <xEventGroupWaitBits>
   // rt_event_recv(&xSlaveOsEvent,
   //         EV_READY | EV_FRAME_RECEIVED | EV_EXECUTE | EV_FRAME_SENT,
   //         RT_EVENT_FLAG_OR | RT_EVENT_FLAG_CLEAR, RT_WAITING_FOREVER,
   //         &recvedEvent);
    switch (recvedEvent)
 800516a:	1e43      	subs	r3, r0, #1
 800516c:	2b07      	cmp	r3, #7
 800516e:	d807      	bhi.n	8005180 <xMBPortEventGet+0x30>
 8005170:	e8df f003 	tbb	[pc, r3]
 8005174:	0c060904 	.word	0x0c060904
 8005178:	0f060606 	.word	0x0f060606
    {
    case EV_READY:
        *eEvent = EV_READY;
 800517c:	2301      	movs	r3, #1
 800517e:	702b      	strb	r3, [r5, #0]
    case EV_FRAME_SENT:
        *eEvent = EV_FRAME_SENT;
        break;
    }
    return TRUE;
}
 8005180:	2001      	movs	r0, #1
 8005182:	b003      	add	sp, #12
 8005184:	bd30      	pop	{r4, r5, pc}
        *eEvent = EV_FRAME_RECEIVED;
 8005186:	2302      	movs	r3, #2
 8005188:	702b      	strb	r3, [r5, #0]
        break;
 800518a:	e7f9      	b.n	8005180 <xMBPortEventGet+0x30>
        *eEvent = EV_EXECUTE;
 800518c:	2304      	movs	r3, #4
 800518e:	702b      	strb	r3, [r5, #0]
        break;
 8005190:	e7f6      	b.n	8005180 <xMBPortEventGet+0x30>
        *eEvent = EV_FRAME_SENT;
 8005192:	2308      	movs	r3, #8
 8005194:	702b      	strb	r3, [r5, #0]
        break;
 8005196:	e7f3      	b.n	8005180 <xMBPortEventGet+0x30>
 8005198:	200018c0 	.word	0x200018c0

0800519c <xMBPortSerialInit>:
	HAL_GPIO_WritePin(GPIOA,EN_Pin,GPIO_PIN_SET);
}

/* ----------------------- Start implementation -----------------------------*/
BOOL xMBPortSerialInit(UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity)
{
 800519c:	b508      	push	{r3, lr}
     * @note MODBUS_SLAVE_RT_CONTROL_PIN_INDEX need be defined by user
     */
  //  rt_pin_mode(MODBUS_SLAVE_RT_CONTROL_PIN_INDEX, PIN_MODE_OUTPUT);

    /* set serial configure parameter */
     huart1.Init.BaudRate = ulBaudRate;
 800519e:	4a10      	ldr	r2, [pc, #64]	; (80051e0 <xMBPortSerialInit+0x44>)
 80051a0:	6051      	str	r1, [r2, #4]
     huart1.Init.StopBits = UART_STOPBITS_1;
 80051a2:	2100      	movs	r1, #0
 80051a4:	60d1      	str	r1, [r2, #12]

    switch(eParity)
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d00a      	beq.n	80051c0 <xMBPortSerialInit+0x24>
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d010      	beq.n	80051d0 <xMBPortSerialInit+0x34>
 80051ae:	b123      	cbz	r3, 80051ba <xMBPortSerialInit+0x1e>
    		huart1.Init.Parity = UART_PARITY_EVEN;
    		break;
    }
    /* set serial configure */

    HAL_UART_Init(&huart1);
 80051b0:	480b      	ldr	r0, [pc, #44]	; (80051e0 <xMBPortSerialInit+0x44>)
 80051b2:	f7ff f83b 	bl	800422c <HAL_UART_Init>
          //         sizeof(serial_soft_trans_irq_stack),
           //        10, 5);
    //rt_thread_startup(&thread_serial_soft_trans_irq);

    return TRUE;
}
 80051b6:	2001      	movs	r0, #1
 80051b8:	bd08      	pop	{r3, pc}
    		huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80051ba:	6091      	str	r1, [r2, #8]
    		huart1.Init.Parity = UART_PARITY_NONE;
 80051bc:	6111      	str	r1, [r2, #16]
    		break;
 80051be:	e7f7      	b.n	80051b0 <xMBPortSerialInit+0x14>
    		huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80051c0:	4b07      	ldr	r3, [pc, #28]	; (80051e0 <xMBPortSerialInit+0x44>)
 80051c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80051c6:	609a      	str	r2, [r3, #8]
    	  	huart1.Init.Parity = UART_PARITY_ODD;
 80051c8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80051cc:	611a      	str	r2, [r3, #16]
    	  	break;
 80051ce:	e7ef      	b.n	80051b0 <xMBPortSerialInit+0x14>
    		huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80051d0:	4b03      	ldr	r3, [pc, #12]	; (80051e0 <xMBPortSerialInit+0x44>)
 80051d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80051d6:	609a      	str	r2, [r3, #8]
    		huart1.Init.Parity = UART_PARITY_EVEN;
 80051d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051dc:	611a      	str	r2, [r3, #16]
    		break;
 80051de:	e7e7      	b.n	80051b0 <xMBPortSerialInit+0x14>
 80051e0:	2000162c 	.word	0x2000162c

080051e4 <vMBPortSerialEnable>:

void vMBPortSerialEnable(BOOL xRxEnable, BOOL xTxEnable)
{
 80051e4:	b510      	push	{r4, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	460c      	mov	r4, r1
//    rt_uint32_t recved_event;
    if (xRxEnable)
 80051ea:	b190      	cbz	r0, 8005212 <vMBPortSerialEnable+0x2e>
    {

    	HAL_UART_Receive_IT(&huart1,&rx_data_buf,1);
 80051ec:	2201      	movs	r2, #1
 80051ee:	4912      	ldr	r1, [pc, #72]	; (8005238 <vMBPortSerialEnable+0x54>)
 80051f0:	4812      	ldr	r0, [pc, #72]	; (800523c <vMBPortSerialEnable+0x58>)
 80051f2:	f7ff fae4 	bl	80047be <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(GPIOA,EN_Pin,GPIO_PIN_RESET);
 80051f6:	2200      	movs	r2, #0
 80051f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80051fc:	4810      	ldr	r0, [pc, #64]	; (8005240 <vMBPortSerialEnable+0x5c>)
 80051fe:	f7fd ff55 	bl	80030ac <HAL_GPIO_WritePin>
    	vTransmitEnable();
        /* disable RX interrupt */
    	HAL_UART_AbortReceive_IT(&huart1);
     //   serial->ops->control(serial, RT_DEVICE_CTRL_CLR_INT, (void *)RT_DEVICE_FLAG_INT_RX);
    }
    if (xTxEnable)
 8005202:	b184      	cbz	r4, 8005226 <vMBPortSerialEnable+0x42>
    {
    	//HAL_HalfDuplex_EnableTransmitter(&huart1);

    	xEventGroupSetBits(xSerialEventGroupHandle,EVENT_SERIAL_TRANS_START);
 8005204:	2101      	movs	r1, #1
 8005206:	4b0f      	ldr	r3, [pc, #60]	; (8005244 <vMBPortSerialEnable+0x60>)
 8005208:	6818      	ldr	r0, [r3, #0]
 800520a:	f000 fbc7 	bl	800599c <xEventGroupSetBits>
    	xEventGroupWaitBits( xSerialEventGroupHandle,  EVENT_SERIAL_TRANS_START,  pdTRUE, pdFALSE, 0 );
        //rt_event_recv(&event_serial, EVENT_SERIAL_TRANS_START,
        //        RT_EVENT_FLAG_OR | RT_EVENT_FLAG_CLEAR, 0,
         //       &recved_event);
    }
}
 800520e:	b002      	add	sp, #8
 8005210:	bd10      	pop	{r4, pc}
	HAL_GPIO_WritePin(GPIOA,EN_Pin,GPIO_PIN_SET);
 8005212:	2201      	movs	r2, #1
 8005214:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005218:	4809      	ldr	r0, [pc, #36]	; (8005240 <vMBPortSerialEnable+0x5c>)
 800521a:	f7fd ff47 	bl	80030ac <HAL_GPIO_WritePin>
    	HAL_UART_AbortReceive_IT(&huart1);
 800521e:	4807      	ldr	r0, [pc, #28]	; (800523c <vMBPortSerialEnable+0x58>)
 8005220:	f7ff f85a 	bl	80042d8 <HAL_UART_AbortReceive_IT>
 8005224:	e7ed      	b.n	8005202 <vMBPortSerialEnable+0x1e>
    	xEventGroupWaitBits( xSerialEventGroupHandle,  EVENT_SERIAL_TRANS_START,  pdTRUE, pdFALSE, 0 );
 8005226:	2300      	movs	r3, #0
 8005228:	9300      	str	r3, [sp, #0]
 800522a:	2201      	movs	r2, #1
 800522c:	4611      	mov	r1, r2
 800522e:	4805      	ldr	r0, [pc, #20]	; (8005244 <vMBPortSerialEnable+0x60>)
 8005230:	6800      	ldr	r0, [r0, #0]
 8005232:	f000 fb28 	bl	8005886 <xEventGroupWaitBits>
}
 8005236:	e7ea      	b.n	800520e <vMBPortSerialEnable+0x2a>
 8005238:	200018c5 	.word	0x200018c5
 800523c:	2000162c 	.word	0x2000162c
 8005240:	40010800 	.word	0x40010800
 8005244:	200018c8 	.word	0x200018c8

08005248 <xMBPortSerialPutByte>:
    //serial->parent.close(&(serial->parent));
}

BOOL xMBPortSerialPutByte(CHAR ucByte)

{
 8005248:	b500      	push	{lr}
 800524a:	b083      	sub	sp, #12
 800524c:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_GPIO_WritePin(GPIOA,EN_Pin,GPIO_PIN_SET);
 8005250:	2201      	movs	r2, #1
 8005252:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005256:	4806      	ldr	r0, [pc, #24]	; (8005270 <xMBPortSerialPutByte+0x28>)
 8005258:	f7fd ff28 	bl	80030ac <HAL_GPIO_WritePin>
	HAL_UART_Transmit_IT(&huart1,(uint8_t *) &ucByte, 1);
 800525c:	2201      	movs	r2, #1
 800525e:	f10d 0107 	add.w	r1, sp, #7
 8005262:	4804      	ldr	r0, [pc, #16]	; (8005274 <xMBPortSerialPutByte+0x2c>)
 8005264:	f7ff f812 	bl	800428c <HAL_UART_Transmit_IT>
    //serial->parent.write(&(serial->parent), 0, ;
    return TRUE;
}
 8005268:	2001      	movs	r0, #1
 800526a:	b003      	add	sp, #12
 800526c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005270:	40010800 	.word	0x40010800
 8005274:	2000162c 	.word	0x2000162c

08005278 <xMBPortSerialGetByte>:

BOOL xMBPortSerialGetByte(CHAR * pucByte)
{
	* pucByte = rx_data;
 8005278:	4b02      	ldr	r3, [pc, #8]	; (8005284 <xMBPortSerialGetByte+0xc>)
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	7003      	strb	r3, [r0, #0]
    //serial->parent.read(&(serial->parent), 0, pucByte, 1);
    return TRUE;
}
 800527e:	2001      	movs	r0, #1
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	200018c4 	.word	0x200018c4

08005288 <HAL_UART_TxCpltCallback>:


#ifdef SLAVE_MODE
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005288:	b500      	push	{lr}
 800528a:	b083      	sub	sp, #12

	BaseType_t xHigherPriorityTaskWoken, xResult;
	/* xHigherPriorityTaskWoken must be initialised to pdFALSE. */
	xHigherPriorityTaskWoken = pdFALSE;
 800528c:	2300      	movs	r3, #0
 800528e:	9301      	str	r3, [sp, #4]

	 /* Set bit 0 and bit 4 in xEventGroup. */
	 xResult = xEventGroupSetBitsFromISR(
 8005290:	aa01      	add	r2, sp, #4
 8005292:	2101      	movs	r1, #1
 8005294:	4b09      	ldr	r3, [pc, #36]	; (80052bc <HAL_UART_TxCpltCallback+0x34>)
 8005296:	6818      	ldr	r0, [r3, #0]
 8005298:	f000 fbce 	bl	8005a38 <xEventGroupSetBitsFromISR>
			 	 	 	 	 	   xSerialEventGroupHandle,   /* The event group being updated. */
								   EVENT_SERIAL_TRANS_START, /* The bits being set. */
	                              &xHigherPriorityTaskWoken );

	  /* Was the message posted successfully? */
	  if( xResult != pdFAIL )
 800529c:	b158      	cbz	r0, 80052b6 <HAL_UART_TxCpltCallback+0x2e>
	  {
	      /* If xHigherPriorityTaskWoken is now set to pdTRUE then a context
	      switch should be requested.  The macro used is port specific and will
	      be either portYIELD_FROM_ISR() or portEND_SWITCHING_ISR() - refer to
	      the documentation page for the port being used. */
	      portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800529e:	9b01      	ldr	r3, [sp, #4]
 80052a0:	b14b      	cbz	r3, 80052b6 <HAL_UART_TxCpltCallback+0x2e>
 80052a2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80052a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052aa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80052ae:	f3bf 8f4f 	dsb	sy
 80052b2:	f3bf 8f6f 	isb	sy
	  }
}
 80052b6:	b003      	add	sp, #12
 80052b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80052bc:	200018c8 	.word	0x200018c8

080052c0 <StartUARTTask>:



void StartUARTTask(void *argument)
{
 80052c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052c2:	b083      	sub	sp, #12
	  EventBits_t uxBits;
	  /* Attempt to create the event group. */
	  xSerialEventGroupHandle = xGetUARTEvent();
 80052c4:	f7fc f9ca 	bl	800165c <xGetUARTEvent>
 80052c8:	4b09      	ldr	r3, [pc, #36]	; (80052f0 <StartUARTTask+0x30>)
 80052ca:	6018      	str	r0, [r3, #0]
	  while(1)
	  {
		  uxBits = xEventGroupWaitBits( xSerialEventGroupHandle,  EVENT_SERIAL_TRANS_START,  pdTRUE, pdFALSE, portMAX_DELAY );
 80052cc:	461e      	mov	r6, r3
 80052ce:	f04f 35ff 	mov.w	r5, #4294967295
		  switch (uxBits)
		  {
		  	  	  case EVENT_SERIAL_TRANS_START:
		  	  		  pxMBFrameCBTransmitterEmpty();
 80052d2:	4f08      	ldr	r7, [pc, #32]	; (80052f4 <StartUARTTask+0x34>)
		  uxBits = xEventGroupWaitBits( xSerialEventGroupHandle,  EVENT_SERIAL_TRANS_START,  pdTRUE, pdFALSE, portMAX_DELAY );
 80052d4:	2400      	movs	r4, #0
 80052d6:	9500      	str	r5, [sp, #0]
 80052d8:	4623      	mov	r3, r4
 80052da:	2201      	movs	r2, #1
 80052dc:	4611      	mov	r1, r2
 80052de:	6830      	ldr	r0, [r6, #0]
 80052e0:	f000 fad1 	bl	8005886 <xEventGroupWaitBits>
		  switch (uxBits)
 80052e4:	2801      	cmp	r0, #1
 80052e6:	d1f6      	bne.n	80052d6 <StartUARTTask+0x16>
		  	  		  pxMBFrameCBTransmitterEmpty();
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	4798      	blx	r3
		  	  		  break;
 80052ec:	e7f2      	b.n	80052d4 <StartUARTTask+0x14>
 80052ee:	bf00      	nop
 80052f0:	200018c8 	.word	0x200018c8
 80052f4:	20001780 	.word	0x20001780

080052f8 <HAL_UART_RxCpltCallback>:

}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80052f8:	b508      	push	{r3, lr}
	rx_data = rx_data_buf;
 80052fa:	4906      	ldr	r1, [pc, #24]	; (8005314 <HAL_UART_RxCpltCallback+0x1c>)
 80052fc:	780a      	ldrb	r2, [r1, #0]
 80052fe:	4b06      	ldr	r3, [pc, #24]	; (8005318 <HAL_UART_RxCpltCallback+0x20>)
 8005300:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1,&rx_data_buf,1);
 8005302:	2201      	movs	r2, #1
 8005304:	4805      	ldr	r0, [pc, #20]	; (800531c <HAL_UART_RxCpltCallback+0x24>)
 8005306:	f7ff fa5a 	bl	80047be <HAL_UART_Receive_IT>
	pxMBFrameCBByteReceived();
 800530a:	4b05      	ldr	r3, [pc, #20]	; (8005320 <HAL_UART_RxCpltCallback+0x28>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4798      	blx	r3
}
 8005310:	bd08      	pop	{r3, pc}
 8005312:	bf00      	nop
 8005314:	200018c5 	.word	0x200018c5
 8005318:	200018c4 	.word	0x200018c4
 800531c:	2000162c 	.word	0x2000162c
 8005320:	2000177c 	.word	0x2000177c

08005324 <xMBPortTimersInit>:



/* ----------------------- Start implementation -----------------------------*/
BOOL xMBPortTimersInit(USHORT usTim1Timerout50us)
{
 8005324:	b508      	push	{r3, lr}

   vTimerInit(usTim1Timerout50us);
 8005326:	f7fc f9a5 	bl	8001674 <vTimerInit>
   //                timer_timeout_ind, /* bind timeout callback function */
    //               RT_NULL,
     //              (50 * usTim1Timerout50us) / (1000 * 1000 / RT_TICK_PER_SECOND) + 1,
      //             RT_TIMER_FLAG_ONE_SHOT); /* one shot */
    return TRUE;
}
 800532a:	2001      	movs	r0, #1
 800532c:	bd08      	pop	{r3, pc}

0800532e <vMBPortTimersEnable>:

void vMBPortTimersEnable()
{
 800532e:	b508      	push	{r3, lr}
	vStartTimer();
 8005330:	f7fc f9ac 	bl	800168c <vStartTimer>
}
 8005334:	bd08      	pop	{r3, pc}

08005336 <vMBPortTimersDisable>:


void vMBPortTimersDisable()
{
 8005336:	b508      	push	{r3, lr}
	vStopTimer();
 8005338:	f7fc f9b6 	bl	80016a8 <vStopTimer>
}
 800533c:	bd08      	pop	{r3, pc}
	...

08005340 <rvvTIMERExpiredISR>:


#ifdef SLAVE_MODE
void rvvTIMERExpiredISR()
{
 8005340:	b508      	push	{r3, lr}
    (void) pxMBPortCBTimerExpired();
 8005342:	4b02      	ldr	r3, [pc, #8]	; (800534c <rvvTIMERExpiredISR+0xc>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4798      	blx	r3
}
 8005348:	bd08      	pop	{r3, pc}
 800534a:	bf00      	nop
 800534c:	20001784 	.word	0x20001784

08005350 <vUPDATEDin>:

#ifdef SLAVE_MODE

void vUPDATEDin(uint8_t state )
{
	ucSDiscInBuf[0] = state;
 8005350:	4b01      	ldr	r3, [pc, #4]	; (8005358 <vUPDATEDin+0x8>)
 8005352:	7018      	strb	r0, [r3, #0]
}
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	200018d0 	.word	0x200018d0

0800535c <vUPDATECoils>:

void vUPDATECoils( uint8_t rw)
{
 800535c:	b570      	push	{r4, r5, r6, lr}
 800535e:	b082      	sub	sp, #8
	volatile uint8_t temp;
	if (rw == 1)
 8005360:	2801      	cmp	r0, #1
 8005362:	d011      	beq.n	8005388 <vUPDATECoils+0x2c>
		{
			temp =xMBUtilGetBits(&ucSCoilBuf[0],i,1);
			vSetOutState( i,temp );
		}
	}
	if (rw == 0)
 8005364:	b970      	cbnz	r0, 8005384 <vUPDATECoils+0x28>
 8005366:	2400      	movs	r4, #0
	{
		for (uint8_t i = 0;i<S_COIL_NCOILS;i++)
		{
			xMBUtilSetBits(&ucSCoilBuf[0],i,1, vGetOutState(i));
 8005368:	4e11      	ldr	r6, [pc, #68]	; (80053b0 <vUPDATECoils+0x54>)
 800536a:	2501      	movs	r5, #1
 800536c:	b2e0      	uxtb	r0, r4
 800536e:	f7fc f963 	bl	8001638 <vGetOutState>
 8005372:	4603      	mov	r3, r0
 8005374:	462a      	mov	r2, r5
 8005376:	b2a1      	uxth	r1, r4
 8005378:	4630      	mov	r0, r6
 800537a:	f7ff fe5f 	bl	800503c <xMBUtilSetBits>
		for (uint8_t i = 0;i<S_COIL_NCOILS;i++)
 800537e:	3401      	adds	r4, #1
 8005380:	2c04      	cmp	r4, #4
 8005382:	d1f3      	bne.n	800536c <vUPDATECoils+0x10>
		}

	}


}
 8005384:	b002      	add	sp, #8
 8005386:	bd70      	pop	{r4, r5, r6, pc}
 8005388:	2400      	movs	r4, #0
			temp =xMBUtilGetBits(&ucSCoilBuf[0],i,1);
 800538a:	4e09      	ldr	r6, [pc, #36]	; (80053b0 <vUPDATECoils+0x54>)
 800538c:	2501      	movs	r5, #1
 800538e:	462a      	mov	r2, r5
 8005390:	b2a1      	uxth	r1, r4
 8005392:	4630      	mov	r0, r6
 8005394:	f7ff fe74 	bl	8005080 <xMBUtilGetBits>
 8005398:	f88d 0007 	strb.w	r0, [sp, #7]
			vSetOutState( i,temp );
 800539c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80053a0:	b2e0      	uxtb	r0, r4
 80053a2:	f7fc f943 	bl	800162c <vSetOutState>
		for (uint8_t i = 0;i<S_COIL_NCOILS;i++)
 80053a6:	3401      	adds	r4, #1
 80053a8:	2c04      	cmp	r4, #4
 80053aa:	d1f0      	bne.n	800538e <vUPDATECoils+0x32>
 80053ac:	e7ea      	b.n	8005384 <vUPDATECoils+0x28>
 80053ae:	bf00      	nop
 80053b0:	200018cc 	.word	0x200018cc

080053b4 <eMBRegInputCB>:
    REG_INPUT_START = S_REG_INPUT_START;
    REG_INPUT_NREGS = S_REG_INPUT_NREGS;
    usRegInStart = usSRegInStart;

    /* it already plus one in modbus function method. */
    usAddress--;
 80053b4:	3901      	subs	r1, #1
 80053b6:	b289      	uxth	r1, r1

    if ((usAddress >= REG_INPUT_START)
 80053b8:	2904      	cmp	r1, #4
 80053ba:	d91e      	bls.n	80053fa <eMBRegInputCB+0x46>
{
 80053bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
            && (usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS))
 80053be:	188b      	adds	r3, r1, r2
 80053c0:	2b0d      	cmp	r3, #13
 80053c2:	dc1c      	bgt.n	80053fe <eMBRegInputCB+0x4a>
    usRegInStart = usSRegInStart;
 80053c4:	4b10      	ldr	r3, [pc, #64]	; (8005408 <eMBRegInputCB+0x54>)
    {
        iRegIndex = usAddress - usRegInStart;
 80053c6:	881c      	ldrh	r4, [r3, #0]
 80053c8:	1b0c      	subs	r4, r1, r4
 80053ca:	b2a4      	uxth	r4, r4
        while (usNRegs > 0)
 80053cc:	b1ca      	cbz	r2, 8005402 <eMBRegInputCB+0x4e>
 80053ce:	1c85      	adds	r5, r0, #2
 80053d0:	4422      	add	r2, r4
 80053d2:	b296      	uxth	r6, r2
        {

            *pucRegBuffer++ = (UCHAR) ( usGetRegInput(iRegIndex) >> 8);
 80053d4:	b2e7      	uxtb	r7, r4
 80053d6:	4638      	mov	r0, r7
 80053d8:	f7fc fc1e 	bl	8001c18 <usGetRegInput>
 80053dc:	0a00      	lsrs	r0, r0, #8
 80053de:	f805 0c02 	strb.w	r0, [r5, #-2]
            *pucRegBuffer++ = (UCHAR) ( usGetRegInput(iRegIndex) & 0xFF);
 80053e2:	4638      	mov	r0, r7
 80053e4:	f7fc fc18 	bl	8001c18 <usGetRegInput>
 80053e8:	f805 0c01 	strb.w	r0, [r5, #-1]
            iRegIndex++;
 80053ec:	3401      	adds	r4, #1
 80053ee:	b2a4      	uxth	r4, r4
        while (usNRegs > 0)
 80053f0:	3502      	adds	r5, #2
 80053f2:	42b4      	cmp	r4, r6
 80053f4:	d1ee      	bne.n	80053d4 <eMBRegInputCB+0x20>
    eMBErrorCode    eStatus = MB_ENOERR;
 80053f6:	2000      	movs	r0, #0
 80053f8:	e002      	b.n	8005400 <eMBRegInputCB+0x4c>
            usNRegs--;
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 80053fa:	2001      	movs	r0, #1
    }

    return eStatus;
}
 80053fc:	4770      	bx	lr
        eStatus = MB_ENOREG;
 80053fe:	2001      	movs	r0, #1
}
 8005400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eMBErrorCode    eStatus = MB_ENOERR;
 8005402:	2000      	movs	r0, #0
 8005404:	e7fc      	b.n	8005400 <eMBRegInputCB+0x4c>
 8005406:	bf00      	nop
 8005408:	20000094 	.word	0x20000094

0800540c <eMBRegHoldingCB>:
    REG_HOLDING_START = S_REG_HOLDING_START;
    REG_HOLDING_NREGS = S_REG_HOLDING_NREGS;
    usRegHoldStart = usSRegHoldStart;

    /* it already plus one in modbus function method. */
    usAddress--;
 800540c:	3901      	subs	r1, #1
 800540e:	b289      	uxth	r1, r1

    if ((usAddress >= REG_HOLDING_START)
 8005410:	290c      	cmp	r1, #12
 8005412:	d93a      	bls.n	800548a <eMBRegHoldingCB+0x7e>
{
 8005414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005418:	4605      	mov	r5, r0
 800541a:	461e      	mov	r6, r3
            && (usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS))
 800541c:	188b      	adds	r3, r1, r2
 800541e:	2b2b      	cmp	r3, #43	; 0x2b
 8005420:	dc35      	bgt.n	800548e <eMBRegHoldingCB+0x82>
    usRegHoldStart = usSRegHoldStart;
 8005422:	4b1e      	ldr	r3, [pc, #120]	; (800549c <eMBRegHoldingCB+0x90>)
    {
        iRegIndex = usAddress - usRegHoldStart;
 8005424:	881c      	ldrh	r4, [r3, #0]
 8005426:	1b0c      	subs	r4, r1, r4
 8005428:	b2a4      	uxth	r4, r4
        switch (eMode)
 800542a:	b1b6      	cbz	r6, 800545a <eMBRegHoldingCB+0x4e>
 800542c:	2e01      	cmp	r6, #1
 800542e:	d131      	bne.n	8005494 <eMBRegHoldingCB+0x88>
    eMBErrorCode    eStatus = MB_ENOERR;
 8005430:	2000      	movs	r0, #0
            }
            break;

        /* write current register values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (usNRegs > 0)
 8005432:	b36a      	cbz	r2, 8005490 <eMBRegHoldingCB+0x84>
 8005434:	3502      	adds	r5, #2
 8005436:	1916      	adds	r6, r2, r4
 8005438:	b2b6      	uxth	r6, r6
            {
            	vSetReg(iRegIndex, (*pucRegBuffer)<<8 | *(pucRegBuffer + 1) );
 800543a:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800543e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005442:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8005446:	b2e0      	uxtb	r0, r4
 8005448:	f7fc fbfe 	bl	8001c48 <vSetReg>
            	pucRegBuffer++;
				pucRegBuffer++;
                //pusRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
                //pusRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
                iRegIndex++;
 800544c:	3401      	adds	r4, #1
 800544e:	b2a4      	uxth	r4, r4
            while (usNRegs > 0)
 8005450:	3502      	adds	r5, #2
 8005452:	42b4      	cmp	r4, r6
 8005454:	d1f1      	bne.n	800543a <eMBRegHoldingCB+0x2e>
    eMBErrorCode    eStatus = MB_ENOERR;
 8005456:	2000      	movs	r0, #0
 8005458:	e01a      	b.n	8005490 <eMBRegHoldingCB+0x84>
            while (usNRegs > 0)
 800545a:	b1ea      	cbz	r2, 8005498 <eMBRegHoldingCB+0x8c>
 800545c:	3502      	adds	r5, #2
 800545e:	4422      	add	r2, r4
 8005460:	fa1f f882 	uxth.w	r8, r2
                *pucRegBuffer++ = (UCHAR) (usGetReg(iRegIndex) >> 8);
 8005464:	b2e7      	uxtb	r7, r4
 8005466:	4638      	mov	r0, r7
 8005468:	f7fc fbc8 	bl	8001bfc <usGetReg>
 800546c:	0a00      	lsrs	r0, r0, #8
 800546e:	f805 0c02 	strb.w	r0, [r5, #-2]
                *pucRegBuffer++ = (UCHAR) (usGetReg(iRegIndex) & 0xFF);
 8005472:	4638      	mov	r0, r7
 8005474:	f7fc fbc2 	bl	8001bfc <usGetReg>
 8005478:	f805 0c01 	strb.w	r0, [r5, #-1]
                iRegIndex++;
 800547c:	3401      	adds	r4, #1
 800547e:	b2a4      	uxth	r4, r4
            while (usNRegs > 0)
 8005480:	3502      	adds	r5, #2
 8005482:	45a0      	cmp	r8, r4
 8005484:	d1ee      	bne.n	8005464 <eMBRegHoldingCB+0x58>
    eMBErrorCode    eStatus = MB_ENOERR;
 8005486:	4630      	mov	r0, r6
 8005488:	e002      	b.n	8005490 <eMBRegHoldingCB+0x84>
            break;
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 800548a:	2001      	movs	r0, #1
    }
    return eStatus;
}
 800548c:	4770      	bx	lr
        eStatus = MB_ENOREG;
 800548e:	2001      	movs	r0, #1
}
 8005490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (eMode)
 8005494:	2000      	movs	r0, #0
 8005496:	e7fb      	b.n	8005490 <eMBRegHoldingCB+0x84>
    eMBErrorCode    eStatus = MB_ENOERR;
 8005498:	4630      	mov	r0, r6
 800549a:	e7f9      	b.n	8005490 <eMBRegHoldingCB+0x84>
 800549c:	20000092 	.word	0x20000092

080054a0 <eMBRegCoilsCB>:
    COIL_START = S_COIL_START;
    COIL_NCOILS = S_COIL_NCOILS;
    usCoilStart = usSCoilStart;

    /* it already plus one in modbus function method. */
    usAddress--;
 80054a0:	3901      	subs	r1, #1
 80054a2:	b289      	uxth	r1, r1

    if( ( usAddress >= COIL_START ) &&
 80054a4:	2900      	cmp	r1, #0
 80054a6:	d062      	beq.n	800556e <eMBRegCoilsCB+0xce>
{
 80054a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ac:	4605      	mov	r5, r0
 80054ae:	4616      	mov	r6, r2
 80054b0:	461f      	mov	r7, r3
        ( usAddress + usNCoils <= COIL_START + COIL_NCOILS ) )
 80054b2:	188b      	adds	r3, r1, r2
    if( ( usAddress >= COIL_START ) &&
 80054b4:	2b05      	cmp	r3, #5
 80054b6:	dc5c      	bgt.n	8005572 <eMBRegCoilsCB+0xd2>
    iNReg =  usNCoils / 8 + 1;
 80054b8:	ea4f 08d2 	mov.w	r8, r2, lsr #3
 80054bc:	f108 0201 	add.w	r2, r8, #1
    usCoilStart = usSCoilStart;
 80054c0:	4b2e      	ldr	r3, [pc, #184]	; (800557c <eMBRegCoilsCB+0xdc>)
    {
        iRegIndex = (USHORT) (usAddress - usCoilStart) / 8;
 80054c2:	881c      	ldrh	r4, [r3, #0]
 80054c4:	1b0c      	subs	r4, r1, r4
 80054c6:	f3c4 0bcc 	ubfx	fp, r4, #3, #13
        iRegBitIndex = (USHORT) (usAddress - usCoilStart) % 8;
 80054ca:	f004 0407 	and.w	r4, r4, #7
        switch ( eMode )
 80054ce:	b1ff      	cbz	r7, 8005510 <eMBRegCoilsCB+0x70>
 80054d0:	2f01      	cmp	r7, #1
 80054d2:	d151      	bne.n	8005578 <eMBRegCoilsCB+0xd8>

            break;

            /* write current coil values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (iNReg > 1)
 80054d4:	2a01      	cmp	r2, #1
 80054d6:	bf98      	it	ls
 80054d8:	4681      	movls	r9, r0
 80054da:	d914      	bls.n	8005506 <eMBRegCoilsCB+0x66>
 80054dc:	eb00 0908 	add.w	r9, r0, r8
 80054e0:	4607      	mov	r7, r0
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
 80054e2:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8005580 <eMBRegCoilsCB+0xe0>
 80054e6:	ebab 0500 	sub.w	r5, fp, r0
 80054ea:	1978      	adds	r0, r7, r5
 80054ec:	b280      	uxth	r0, r0
 80054ee:	f817 3b01 	ldrb.w	r3, [r7], #1
 80054f2:	2208      	movs	r2, #8
 80054f4:	4621      	mov	r1, r4
 80054f6:	4450      	add	r0, sl
 80054f8:	f7ff fda0 	bl	800503c <xMBUtilSetBits>
            while (iNReg > 1)
 80054fc:	454f      	cmp	r7, r9
 80054fe:	d1f4      	bne.n	80054ea <eMBRegCoilsCB+0x4a>
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
 8005500:	44c3      	add	fp, r8
 8005502:	fa1f fb8b 	uxth.w	fp, fp
                iNReg--;
            }
            /* last coils */
            usNCoils = usNCoils % 8;
            /* xMBUtilSetBits has bug when ucNBits is zero */
            if (usNCoils != 0)
 8005506:	f016 0207 	ands.w	r2, r6, #7
 800550a:	d127      	bne.n	800555c <eMBRegCoilsCB+0xbc>
    eMBErrorCode    eStatus = MB_ENOERR;
 800550c:	2000      	movs	r0, #0
 800550e:	e031      	b.n	8005574 <eMBRegCoilsCB+0xd4>
        	vUPDATECoils(0);
 8005510:	2000      	movs	r0, #0
 8005512:	f7ff ff23 	bl	800535c <vUPDATECoils>
            while (iNReg > 0)
 8005516:	f108 0801 	add.w	r8, r8, #1
 800551a:	44a8      	add	r8, r5
        	vUPDATECoils(0);
 800551c:	46a9      	mov	r9, r5
                *pucRegBuffer++ = xMBUtilGetBits(&pucCoilBuf[iRegIndex++],
 800551e:	f8df a060 	ldr.w	sl, [pc, #96]	; 8005580 <eMBRegCoilsCB+0xe0>
 8005522:	ebab 0505 	sub.w	r5, fp, r5
 8005526:	f04f 0b08 	mov.w	fp, #8
 800552a:	eb09 0005 	add.w	r0, r9, r5
 800552e:	b280      	uxth	r0, r0
 8005530:	465a      	mov	r2, fp
 8005532:	4621      	mov	r1, r4
 8005534:	4450      	add	r0, sl
 8005536:	f7ff fda3 	bl	8005080 <xMBUtilGetBits>
 800553a:	f809 0b01 	strb.w	r0, [r9], #1
            while (iNReg > 0)
 800553e:	45c1      	cmp	r9, r8
 8005540:	d1f3      	bne.n	800552a <eMBRegCoilsCB+0x8a>
            *pucRegBuffer = *pucRegBuffer << (8 - usNCoils);
 8005542:	f006 0607 	and.w	r6, r6, #7
 8005546:	f1c6 0208 	rsb	r2, r6, #8
 800554a:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 800554e:	4096      	lsls	r6, r2
            *pucRegBuffer = *pucRegBuffer >> (8 - usNCoils);
 8005550:	b2f6      	uxtb	r6, r6
 8005552:	4116      	asrs	r6, r2
 8005554:	f808 6c01 	strb.w	r6, [r8, #-1]
    eMBErrorCode    eStatus = MB_ENOERR;
 8005558:	4638      	mov	r0, r7
            break;
 800555a:	e00b      	b.n	8005574 <eMBRegCoilsCB+0xd4>
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, usNCoils,
 800555c:	f899 3000 	ldrb.w	r3, [r9]
 8005560:	4621      	mov	r1, r4
 8005562:	4807      	ldr	r0, [pc, #28]	; (8005580 <eMBRegCoilsCB+0xe0>)
 8005564:	4458      	add	r0, fp
 8005566:	f7ff fd69 	bl	800503c <xMBUtilSetBits>
    eMBErrorCode    eStatus = MB_ENOERR;
 800556a:	2000      	movs	r0, #0
 800556c:	e002      	b.n	8005574 <eMBRegCoilsCB+0xd4>
            break;
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 800556e:	2001      	movs	r0, #1
    }
    return eStatus;
}
 8005570:	4770      	bx	lr
        eStatus = MB_ENOREG;
 8005572:	2001      	movs	r0, #1
}
 8005574:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch ( eMode )
 8005578:	2000      	movs	r0, #0
 800557a:	e7fb      	b.n	8005574 <eMBRegCoilsCB+0xd4>
 800557c:	20000090 	.word	0x20000090
 8005580:	200018cc 	.word	0x200018cc

08005584 <eMBRegDiscreteCB>:
 * @param usNDiscrete discrete number
 *
 * @return result
 */
eMBErrorCode eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
 8005584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    DISCRETE_INPUT_START = S_DISCRETE_INPUT_START;
    DISCRETE_INPUT_NDISCRETES = S_DISCRETE_INPUT_NDISCRETES;
    usDiscreteInputStart = usSDiscInStart;

    /* it already plus one in modbus function method. */
    usAddress--;
 8005588:	1e4d      	subs	r5, r1, #1
 800558a:	b2ad      	uxth	r5, r5

    if ((usAddress >= DISCRETE_INPUT_START)
            && (usAddress + usNDiscrete    <= DISCRETE_INPUT_START + DISCRETE_INPUT_NDISCRETES))
 800558c:	18ab      	adds	r3, r5, r2
 800558e:	2b01      	cmp	r3, #1
 8005590:	dd02      	ble.n	8005598 <eMBRegDiscreteCB+0x14>
        *pucRegBuffer = *pucRegBuffer << (8 - usNDiscrete);
        *pucRegBuffer = *pucRegBuffer >> (8 - usNDiscrete);
    }
    else
    {
        eStatus = MB_ENOREG;
 8005592:	2001      	movs	r0, #1
    }

    return eStatus;
}
 8005594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005598:	4616      	mov	r6, r2
    usDiscreteInputStart = usSDiscInStart;
 800559a:	4b15      	ldr	r3, [pc, #84]	; (80055f0 <eMBRegDiscreteCB+0x6c>)
        iRegIndex = (USHORT) (usAddress - usDiscreteInputStart) / 8;
 800559c:	881b      	ldrh	r3, [r3, #0]
 800559e:	1aed      	subs	r5, r5, r3
 80055a0:	f3c5 08cc 	ubfx	r8, r5, #3, #13
        iRegBitIndex = (USHORT) (usAddress - usDiscreteInputStart) % 8;
 80055a4:	f005 0507 	and.w	r5, r5, #7
        while (iNReg > 0)
 80055a8:	eb00 07d2 	add.w	r7, r0, r2, lsr #3
 80055ac:	3701      	adds	r7, #1
        iRegBitIndex = (USHORT) (usAddress - usDiscreteInputStart) % 8;
 80055ae:	4604      	mov	r4, r0
            *pucRegBuffer++ = xMBUtilGetBits(&pucDiscreteInputBuf[iRegIndex++],
 80055b0:	f8df a040 	ldr.w	sl, [pc, #64]	; 80055f4 <eMBRegDiscreteCB+0x70>
 80055b4:	eba8 0800 	sub.w	r8, r8, r0
 80055b8:	f04f 0908 	mov.w	r9, #8
 80055bc:	eb04 0008 	add.w	r0, r4, r8
 80055c0:	b280      	uxth	r0, r0
 80055c2:	464a      	mov	r2, r9
 80055c4:	4629      	mov	r1, r5
 80055c6:	4450      	add	r0, sl
 80055c8:	f7ff fd5a 	bl	8005080 <xMBUtilGetBits>
 80055cc:	f804 0b01 	strb.w	r0, [r4], #1
        while (iNReg > 0)
 80055d0:	42a7      	cmp	r7, r4
 80055d2:	d1f3      	bne.n	80055bc <eMBRegDiscreteCB+0x38>
        *pucRegBuffer = *pucRegBuffer << (8 - usNDiscrete);
 80055d4:	f006 0607 	and.w	r6, r6, #7
 80055d8:	f1c6 0608 	rsb	r6, r6, #8
 80055dc:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80055e0:	40b3      	lsls	r3, r6
        *pucRegBuffer = *pucRegBuffer >> (8 - usNDiscrete);
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	fa43 f606 	asr.w	r6, r3, r6
 80055e8:	f807 6c01 	strb.w	r6, [r7, #-1]
    eMBErrorCode    eStatus = MB_ENOERR;
 80055ec:	2000      	movs	r0, #0
        *pucRegBuffer = *pucRegBuffer >> (8 - usNDiscrete);
 80055ee:	e7d1      	b.n	8005594 <eMBRegDiscreteCB+0x10>
 80055f0:	200018d2 	.word	0x200018d2
 80055f4:	200018d0 	.word	0x200018d0

080055f8 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055f8:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80055fc:	b9a3      	cbnz	r3, 8005628 <osKernelInitialize+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055fe:	f3ef 8310 	mrs	r3, PRIMASK
 8005602:	b9a3      	cbnz	r3, 800562e <osKernelInitialize+0x36>
 8005604:	4b0d      	ldr	r3, [pc, #52]	; (800563c <osKernelInitialize+0x44>)
 8005606:	6818      	ldr	r0, [r3, #0]
 8005608:	2802      	cmp	r0, #2
 800560a:	d004      	beq.n	8005616 <osKernelInitialize+0x1e>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800560c:	b990      	cbnz	r0, 8005634 <osKernelInitialize+0x3c>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800560e:	4b0b      	ldr	r3, [pc, #44]	; (800563c <osKernelInitialize+0x44>)
 8005610:	2201      	movs	r2, #1
 8005612:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005614:	4770      	bx	lr
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005616:	f3ef 8311 	mrs	r3, BASEPRI
    } else {
      stat = osError;
 800561a:	2b00      	cmp	r3, #0
 800561c:	bf14      	ite	ne
 800561e:	f06f 0005 	mvnne.w	r0, #5
 8005622:	f04f 30ff 	moveq.w	r0, #4294967295
 8005626:	4770      	bx	lr
    stat = osErrorISR;
 8005628:	f06f 0005 	mvn.w	r0, #5
 800562c:	4770      	bx	lr
 800562e:	f06f 0005 	mvn.w	r0, #5
 8005632:	4770      	bx	lr
      stat = osError;
 8005634:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	20001b90 	.word	0x20001b90

08005640 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005640:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005642:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8005646:	b9c3      	cbnz	r3, 800567a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005648:	f3ef 8310 	mrs	r3, PRIMASK
 800564c:	b9c3      	cbnz	r3, 8005680 <osKernelStart+0x40>
 800564e:	4b0f      	ldr	r3, [pc, #60]	; (800568c <osKernelStart+0x4c>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2b02      	cmp	r3, #2
 8005654:	d008      	beq.n	8005668 <osKernelStart+0x28>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8005656:	2b01      	cmp	r3, #1
 8005658:	d115      	bne.n	8005686 <osKernelStart+0x46>
      KernelState = osKernelRunning;
 800565a:	4b0c      	ldr	r3, [pc, #48]	; (800568c <osKernelStart+0x4c>)
 800565c:	2202      	movs	r2, #2
 800565e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005660:	f000 ff74 	bl	800654c <vTaskStartScheduler>
      stat = osOK;
 8005664:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 8005666:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005668:	f3ef 8311 	mrs	r3, BASEPRI
      stat = osError;
 800566c:	2b00      	cmp	r3, #0
 800566e:	bf14      	ite	ne
 8005670:	f06f 0005 	mvnne.w	r0, #5
 8005674:	f04f 30ff 	moveq.w	r0, #4294967295
 8005678:	e7f5      	b.n	8005666 <osKernelStart+0x26>
    stat = osErrorISR;
 800567a:	f06f 0005 	mvn.w	r0, #5
 800567e:	e7f2      	b.n	8005666 <osKernelStart+0x26>
 8005680:	f06f 0005 	mvn.w	r0, #5
 8005684:	e7ef      	b.n	8005666 <osKernelStart+0x26>
      stat = osError;
 8005686:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800568a:	e7ec      	b.n	8005666 <osKernelStart+0x26>
 800568c:	20001b90 	.word	0x20001b90

08005690 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005692:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005694:	2400      	movs	r4, #0
 8005696:	9404      	str	r4, [sp, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005698:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800569c:	b9d4      	cbnz	r4, 80056d4 <osThreadNew+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800569e:	f3ef 8310 	mrs	r3, PRIMASK
 80056a2:	b9bb      	cbnz	r3, 80056d4 <osThreadNew+0x44>
 80056a4:	4b2c      	ldr	r3, [pc, #176]	; (8005758 <osThreadNew+0xc8>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d00f      	beq.n	80056cc <osThreadNew+0x3c>
 80056ac:	b190      	cbz	r0, 80056d4 <osThreadNew+0x44>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 80056ae:	2300      	movs	r3, #0
 80056b0:	f88d 3017 	strb.w	r3, [sp, #23]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 80056b4:	2a00      	cmp	r2, #0
 80056b6:	d03a      	beq.n	800572e <osThreadNew+0x9e>
      if (attr->name != NULL) {
 80056b8:	6814      	ldr	r4, [r2, #0]
 80056ba:	b174      	cbz	r4, 80056da <osThreadNew+0x4a>
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 80056bc:	6993      	ldr	r3, [r2, #24]
 80056be:	b17b      	cbz	r3, 80056e0 <osThreadNew+0x50>
        prio = (UBaseType_t)attr->priority;
 80056c0:	461d      	mov	r5, r3
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80056c2:	3b01      	subs	r3, #1
 80056c4:	2b37      	cmp	r3, #55	; 0x37
 80056c6:	d90c      	bls.n	80056e2 <osThreadNew+0x52>
        return (NULL);
 80056c8:	2000      	movs	r0, #0
 80056ca:	e004      	b.n	80056d6 <osThreadNew+0x46>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80056cc:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (func != NULL)) {
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d0eb      	beq.n	80056ac <osThreadNew+0x1c>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80056d4:	9804      	ldr	r0, [sp, #16]
}
 80056d6:	b007      	add	sp, #28
 80056d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    name  = &empty;
 80056da:	f10d 0417 	add.w	r4, sp, #23
 80056de:	e7ed      	b.n	80056bc <osThreadNew+0x2c>
 80056e0:	2518      	movs	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80056e2:	6853      	ldr	r3, [r2, #4]
 80056e4:	f013 0f01 	tst.w	r3, #1
 80056e8:	d134      	bne.n	8005754 <osThreadNew+0xc4>
      if (attr->stack_size > 0U) {
 80056ea:	6953      	ldr	r3, [r2, #20]
 80056ec:	b113      	cbz	r3, 80056f4 <osThreadNew+0x64>
        stack = attr->stack_size / sizeof(StackType_t);
 80056ee:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80056f2:	e001      	b.n	80056f8 <osThreadNew+0x68>
    stack = configMINIMAL_STACK_SIZE;
 80056f4:	f04f 0c80 	mov.w	ip, #128	; 0x80
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80056f8:	6896      	ldr	r6, [r2, #8]
 80056fa:	b18e      	cbz	r6, 8005720 <osThreadNew+0x90>
 80056fc:	68d7      	ldr	r7, [r2, #12]
 80056fe:	2fbb      	cmp	r7, #187	; 0xbb
 8005700:	d9e8      	bls.n	80056d4 <osThreadNew+0x44>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005702:	6912      	ldr	r2, [r2, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005704:	2a00      	cmp	r2, #0
 8005706:	d0e5      	beq.n	80056d4 <osThreadNew+0x44>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005708:	2b00      	cmp	r3, #0
 800570a:	d0e3      	beq.n	80056d4 <osThreadNew+0x44>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800570c:	9602      	str	r6, [sp, #8]
 800570e:	9201      	str	r2, [sp, #4]
 8005710:	9500      	str	r5, [sp, #0]
 8005712:	460b      	mov	r3, r1
 8005714:	4662      	mov	r2, ip
 8005716:	4621      	mov	r1, r4
 8005718:	f000 feac 	bl	8006474 <xTaskCreateStatic>
 800571c:	9004      	str	r0, [sp, #16]
 800571e:	e7d9      	b.n	80056d4 <osThreadNew+0x44>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005720:	68d3      	ldr	r3, [r2, #12]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1d6      	bne.n	80056d4 <osThreadNew+0x44>
      if (mem == 0) {
 8005726:	6913      	ldr	r3, [r2, #16]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1d3      	bne.n	80056d4 <osThreadNew+0x44>
 800572c:	e004      	b.n	8005738 <osThreadNew+0xa8>
    prio  = (UBaseType_t)osPriorityNormal;
 800572e:	2518      	movs	r5, #24
    stack = configMINIMAL_STACK_SIZE;
 8005730:	f04f 0c80 	mov.w	ip, #128	; 0x80
    name  = &empty;
 8005734:	f10d 0417 	add.w	r4, sp, #23
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005738:	ab04      	add	r3, sp, #16
 800573a:	9301      	str	r3, [sp, #4]
 800573c:	9500      	str	r5, [sp, #0]
 800573e:	460b      	mov	r3, r1
 8005740:	fa1f f28c 	uxth.w	r2, ip
 8005744:	4621      	mov	r1, r4
 8005746:	f000 fecf 	bl	80064e8 <xTaskCreate>
 800574a:	2801      	cmp	r0, #1
          hTask = NULL;
 800574c:	bf1c      	itt	ne
 800574e:	2300      	movne	r3, #0
 8005750:	9304      	strne	r3, [sp, #16]
 8005752:	e7bf      	b.n	80056d4 <osThreadNew+0x44>
        return (NULL);
 8005754:	2000      	movs	r0, #0
 8005756:	e7be      	b.n	80056d6 <osThreadNew+0x46>
 8005758:	20001b90 	.word	0x20001b90

0800575c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800575c:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800575e:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8005762:	b9a3      	cbnz	r3, 800578e <osDelay+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005764:	f3ef 8310 	mrs	r3, PRIMASK
 8005768:	b9a3      	cbnz	r3, 8005794 <osDelay+0x38>
 800576a:	4b0c      	ldr	r3, [pc, #48]	; (800579c <osDelay+0x40>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2b02      	cmp	r3, #2
 8005770:	d002      	beq.n	8005778 <osDelay+0x1c>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8005772:	b940      	cbnz	r0, 8005786 <osDelay+0x2a>
    stat = osOK;
 8005774:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8005776:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005778:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 800577c:	2b00      	cmp	r3, #0
 800577e:	d0f8      	beq.n	8005772 <osDelay+0x16>
    stat = osErrorISR;
 8005780:	f06f 0005 	mvn.w	r0, #5
 8005784:	e7f7      	b.n	8005776 <osDelay+0x1a>
      vTaskDelay(ticks);
 8005786:	f001 f859 	bl	800683c <vTaskDelay>
    stat = osOK;
 800578a:	2000      	movs	r0, #0
 800578c:	e7f3      	b.n	8005776 <osDelay+0x1a>
    stat = osErrorISR;
 800578e:	f06f 0005 	mvn.w	r0, #5
 8005792:	e7f0      	b.n	8005776 <osDelay+0x1a>
 8005794:	f06f 0005 	mvn.w	r0, #5
 8005798:	e7ed      	b.n	8005776 <osDelay+0x1a>
 800579a:	bf00      	nop
 800579c:	20001b90 	.word	0x20001b90

080057a0 <osEventFlagsNew>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057a0:	f3ef 8205 	mrs	r2, IPSR
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;

  if (!IS_IRQ()) {
 80057a4:	b9f2      	cbnz	r2, 80057e4 <osEventFlagsNew+0x44>
osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80057a6:	b508      	push	{r3, lr}
 80057a8:	4603      	mov	r3, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057aa:	f3ef 8210 	mrs	r2, PRIMASK
  if (!IS_IRQ()) {
 80057ae:	b9da      	cbnz	r2, 80057e8 <osEventFlagsNew+0x48>
 80057b0:	4a0e      	ldr	r2, [pc, #56]	; (80057ec <osEventFlagsNew+0x4c>)
 80057b2:	6812      	ldr	r2, [r2, #0]
 80057b4:	2a02      	cmp	r2, #2
 80057b6:	d007      	beq.n	80057c8 <osEventFlagsNew+0x28>
    mem = -1;

    if (attr != NULL) {
 80057b8:	b173      	cbz	r3, 80057d8 <osEventFlagsNew+0x38>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80057ba:	6898      	ldr	r0, [r3, #8]
 80057bc:	b150      	cbz	r0, 80057d4 <osEventFlagsNew+0x34>
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	2b1f      	cmp	r3, #31
 80057c2:	d80c      	bhi.n	80057de <osEventFlagsNew+0x3e>
  hEventGroup = NULL;
 80057c4:	2000      	movs	r0, #0
 80057c6:	e009      	b.n	80057dc <osEventFlagsNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80057c8:	f3ef 8211 	mrs	r2, BASEPRI
  if (!IS_IRQ()) {
 80057cc:	2a00      	cmp	r2, #0
 80057ce:	d0f3      	beq.n	80057b8 <osEventFlagsNew+0x18>
  hEventGroup = NULL;
 80057d0:	2000      	movs	r0, #0
        hEventGroup = xEventGroupCreate();
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80057d2:	e003      	b.n	80057dc <osEventFlagsNew+0x3c>
      if (mem == 0) {
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	b90b      	cbnz	r3, 80057dc <osEventFlagsNew+0x3c>
        hEventGroup = xEventGroupCreate();
 80057d8:	f000 f847 	bl	800586a <xEventGroupCreate>
}
 80057dc:	bd08      	pop	{r3, pc}
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80057de:	f000 f81f 	bl	8005820 <xEventGroupCreateStatic>
 80057e2:	e7fb      	b.n	80057dc <osEventFlagsNew+0x3c>
  hEventGroup = NULL;
 80057e4:	2000      	movs	r0, #0
}
 80057e6:	4770      	bx	lr
  hEventGroup = NULL;
 80057e8:	2000      	movs	r0, #0
 80057ea:	e7f7      	b.n	80057dc <osEventFlagsNew+0x3c>
 80057ec:	20001b90 	.word	0x20001b90

080057f0 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80057f0:	4b03      	ldr	r3, [pc, #12]	; (8005800 <vApplicationGetIdleTaskMemory+0x10>)
 80057f2:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80057f4:	4b03      	ldr	r3, [pc, #12]	; (8005804 <vApplicationGetIdleTaskMemory+0x14>)
 80057f6:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80057f8:	2380      	movs	r3, #128	; 0x80
 80057fa:	6013      	str	r3, [r2, #0]
}
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	20001ad4 	.word	0x20001ad4
 8005804:	200018d4 	.word	0x200018d4

08005808 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005808:	4b03      	ldr	r3, [pc, #12]	; (8005818 <vApplicationGetTimerTaskMemory+0x10>)
 800580a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800580c:	4b03      	ldr	r3, [pc, #12]	; (800581c <vApplicationGetTimerTaskMemory+0x14>)
 800580e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005810:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005814:	6013      	str	r3, [r2, #0]
}
 8005816:	4770      	bx	lr
 8005818:	20001f94 	.word	0x20001f94
 800581c:	20001b94 	.word	0x20001b94

08005820 <xEventGroupCreateStatic>:
	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8005820:	b180      	cbz	r0, 8005844 <xEventGroupCreateStatic+0x24>
	{
 8005822:	b510      	push	{r4, lr}
 8005824:	b082      	sub	sp, #8
 8005826:	4604      	mov	r4, r0
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8005828:	2320      	movs	r3, #32
 800582a:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800582c:	9b01      	ldr	r3, [sp, #4]
 800582e:	2b20      	cmp	r3, #32
 8005830:	d011      	beq.n	8005856 <xEventGroupCreateStatic+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005836:	f383 8811 	msr	BASEPRI, r3
 800583a:	f3bf 8f6f 	isb	sy
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	e7fe      	b.n	8005842 <xEventGroupCreateStatic+0x22>
 8005844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005848:	f383 8811 	msr	BASEPRI, r3
 800584c:	f3bf 8f6f 	isb	sy
 8005850:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventGroupBuffer );
 8005854:	e7fe      	b.n	8005854 <xEventGroupCreateStatic+0x34>
		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */

		if( pxEventBits != NULL )
		{
			pxEventBits->uxEventBits = 0;
 8005856:	2300      	movs	r3, #0
 8005858:	f840 3b04 	str.w	r3, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800585c:	f000 f8f6 	bl	8005a4c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8005860:	2301      	movs	r3, #1
 8005862:	7723      	strb	r3, [r4, #28]
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
	}
 8005864:	4620      	mov	r0, r4
 8005866:	b002      	add	sp, #8
 8005868:	bd10      	pop	{r4, pc}

0800586a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800586a:	b538      	push	{r3, r4, r5, lr}
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 800586c:	2020      	movs	r0, #32
 800586e:	f001 fdbb 	bl	80073e8 <pvPortMalloc>

		if( pxEventBits != NULL )
 8005872:	4604      	mov	r4, r0
 8005874:	b128      	cbz	r0, 8005882 <xEventGroupCreate+0x18>
		{
			pxEventBits->uxEventBits = 0;
 8005876:	2500      	movs	r5, #0
 8005878:	f840 5b04 	str.w	r5, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800587c:	f000 f8e6 	bl	8005a4c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8005880:	7725      	strb	r5, [r4, #28]
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
	}
 8005882:	4620      	mov	r0, r4
 8005884:	bd38      	pop	{r3, r4, r5, pc}

08005886 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8005886:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800588a:	b178      	cbz	r0, 80058ac <xEventGroupWaitBits+0x26>
 800588c:	460c      	mov	r4, r1
 800588e:	4616      	mov	r6, r2
 8005890:	461d      	mov	r5, r3
 8005892:	4607      	mov	r7, r0
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005894:	f011 487f 	ands.w	r8, r1, #4278190080	; 0xff000000
 8005898:	d011      	beq.n	80058be <xEventGroupWaitBits+0x38>
 800589a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589e:	f383 8811 	msr	BASEPRI, r3
 80058a2:	f3bf 8f6f 	isb	sy
 80058a6:	f3bf 8f4f 	dsb	sy
 80058aa:	e7fe      	b.n	80058aa <xEventGroupWaitBits+0x24>
 80058ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b0:	f383 8811 	msr	BASEPRI, r3
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 80058bc:	e7fe      	b.n	80058bc <xEventGroupWaitBits+0x36>
	configASSERT( uxBitsToWaitFor != 0 );
 80058be:	b941      	cbnz	r1, 80058d2 <xEventGroupWaitBits+0x4c>
 80058c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c4:	f383 8811 	msr	BASEPRI, r3
 80058c8:	f3bf 8f6f 	isb	sy
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	e7fe      	b.n	80058d0 <xEventGroupWaitBits+0x4a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058d2:	f001 f96d 	bl	8006bb0 <xTaskGetSchedulerState>
 80058d6:	b950      	cbnz	r0, 80058ee <xEventGroupWaitBits+0x68>
 80058d8:	9b08      	ldr	r3, [sp, #32]
 80058da:	b143      	cbz	r3, 80058ee <xEventGroupWaitBits+0x68>
 80058dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e0:	f383 8811 	msr	BASEPRI, r3
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	e7fe      	b.n	80058ec <xEventGroupWaitBits+0x66>
	}
	#endif

	vTaskSuspendAll();
 80058ee:	f000 fe7b 	bl	80065e8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80058f2:	f8d7 9000 	ldr.w	r9, [r7]

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
 80058f6:	bb55      	cbnz	r5, 800594e <xEventGroupWaitBits+0xc8>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80058f8:	ea14 0f09 	tst.w	r4, r9
 80058fc:	bf14      	ite	ne
 80058fe:	2001      	movne	r0, #1
 8005900:	2000      	moveq	r0, #0
		if( xWaitConditionMet != pdFALSE )
 8005902:	bb50      	cbnz	r0, 800595a <xEventGroupWaitBits+0xd4>
		else if( xTicksToWait == ( TickType_t ) 0 )
 8005904:	9b08      	ldr	r3, [sp, #32]
 8005906:	b363      	cbz	r3, 8005962 <xEventGroupWaitBits+0xdc>
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8005908:	2e00      	cmp	r6, #0
 800590a:	bf18      	it	ne
 800590c:	f04f 7880 	movne.w	r8, #16777216	; 0x1000000
			if( xWaitForAllBits != pdFALSE )
 8005910:	b10d      	cbz	r5, 8005916 <xEventGroupWaitBits+0x90>
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8005912:	f048 6880 	orr.w	r8, r8, #67108864	; 0x4000000
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8005916:	9a08      	ldr	r2, [sp, #32]
 8005918:	ea48 0104 	orr.w	r1, r8, r4
 800591c:	1d38      	adds	r0, r7, #4
 800591e:	f001 f821 	bl	8006964 <vTaskPlaceOnUnorderedEventList>
	xAlreadyYielded = xTaskResumeAll();
 8005922:	f000 ff09 	bl	8006738 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8005926:	b948      	cbnz	r0, 800593c <xEventGroupWaitBits+0xb6>
			portYIELD_WITHIN_API();
 8005928:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800592c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005930:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005934:	f3bf 8f4f 	dsb	sy
 8005938:	f3bf 8f6f 	isb	sy
		uxReturn = uxTaskResetEventItemValue();
 800593c:	f001 f990 	bl	8006c60 <uxTaskResetEventItemValue>
 8005940:	4681      	mov	r9, r0
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8005942:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8005946:	d011      	beq.n	800596c <xEventGroupWaitBits+0xe6>
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005948:	f029 497f 	bic.w	r9, r9, #4278190080	; 0xff000000
	return uxReturn;
 800594c:	e00b      	b.n	8005966 <xEventGroupWaitBits+0xe0>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800594e:	ea34 0309 	bics.w	r3, r4, r9
 8005952:	bf0c      	ite	eq
 8005954:	2001      	moveq	r0, #1
 8005956:	2000      	movne	r0, #0
 8005958:	e7d3      	b.n	8005902 <xEventGroupWaitBits+0x7c>
			if( xClearOnExit != pdFALSE )
 800595a:	b116      	cbz	r6, 8005962 <xEventGroupWaitBits+0xdc>
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800595c:	ea29 0404 	bic.w	r4, r9, r4
 8005960:	603c      	str	r4, [r7, #0]
	xAlreadyYielded = xTaskResumeAll();
 8005962:	f000 fee9 	bl	8006738 <xTaskResumeAll>
}
 8005966:	4648      	mov	r0, r9
 8005968:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			taskENTER_CRITICAL();
 800596c:	f001 fbf2 	bl	8007154 <vPortEnterCritical>
				uxReturn = pxEventBits->uxEventBits;
 8005970:	f8d7 9000 	ldr.w	r9, [r7]
	if( xWaitForAllBits == pdFALSE )
 8005974:	b965      	cbnz	r5, 8005990 <xEventGroupWaitBits+0x10a>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8005976:	ea14 0f09 	tst.w	r4, r9
 800597a:	bf14      	ite	ne
 800597c:	2301      	movne	r3, #1
 800597e:	2300      	moveq	r3, #0
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8005980:	b11b      	cbz	r3, 800598a <xEventGroupWaitBits+0x104>
					if( xClearOnExit != pdFALSE )
 8005982:	b116      	cbz	r6, 800598a <xEventGroupWaitBits+0x104>
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005984:	ea29 0404 	bic.w	r4, r9, r4
 8005988:	603c      	str	r4, [r7, #0]
			taskEXIT_CRITICAL();
 800598a:	f001 fc05 	bl	8007198 <vPortExitCritical>
 800598e:	e7db      	b.n	8005948 <xEventGroupWaitBits+0xc2>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8005990:	ea34 0309 	bics.w	r3, r4, r9
 8005994:	bf0c      	ite	eq
 8005996:	2301      	moveq	r3, #1
 8005998:	2300      	movne	r3, #0
 800599a:	e7f1      	b.n	8005980 <xEventGroupWaitBits+0xfa>

0800599c <xEventGroupSetBits>:
	configASSERT( xEventGroup );
 800599c:	b178      	cbz	r0, 80059be <xEventGroupSetBits+0x22>
{
 800599e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059a2:	460e      	mov	r6, r1
 80059a4:	4605      	mov	r5, r0
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80059a6:	f011 487f 	ands.w	r8, r1, #4278190080	; 0xff000000
 80059aa:	d011      	beq.n	80059d0 <xEventGroupSetBits+0x34>
 80059ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b0:	f383 8811 	msr	BASEPRI, r3
 80059b4:	f3bf 8f6f 	isb	sy
 80059b8:	f3bf 8f4f 	dsb	sy
 80059bc:	e7fe      	b.n	80059bc <xEventGroupSetBits+0x20>
 80059be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c2:	f383 8811 	msr	BASEPRI, r3
 80059c6:	f3bf 8f6f 	isb	sy
 80059ca:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 80059ce:	e7fe      	b.n	80059ce <xEventGroupSetBits+0x32>
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059d0:	f100 070c 	add.w	r7, r0, #12
	vTaskSuspendAll();
 80059d4:	f000 fe08 	bl	80065e8 <vTaskSuspendAll>
		pxListItem = listGET_HEAD_ENTRY( pxList );
 80059d8:	692c      	ldr	r4, [r5, #16]
		pxEventBits->uxEventBits |= uxBitsToSet;
 80059da:	682b      	ldr	r3, [r5, #0]
 80059dc:	4333      	orrs	r3, r6
 80059de:	602b      	str	r3, [r5, #0]
		while( pxListItem != pxListEnd )
 80059e0:	42a7      	cmp	r7, r4
 80059e2:	d118      	bne.n	8005a16 <xEventGroupSetBits+0x7a>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80059e4:	682b      	ldr	r3, [r5, #0]
 80059e6:	ea23 0308 	bic.w	r3, r3, r8
 80059ea:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80059ec:	f000 fea4 	bl	8006738 <xTaskResumeAll>
}
 80059f0:	6828      	ldr	r0, [r5, #0]
 80059f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80059f6:	6829      	ldr	r1, [r5, #0]
 80059f8:	ea32 0101 	bics.w	r1, r2, r1
 80059fc:	d109      	bne.n	8005a12 <xEventGroupSetBits+0x76>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80059fe:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
					uxBitsToClear |= uxBitsWaitedFor;
 8005a02:	bf18      	it	ne
 8005a04:	ea48 0802 	orrne.w	r8, r8, r2
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8005a08:	6829      	ldr	r1, [r5, #0]
 8005a0a:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8005a0e:	f001 f837 	bl	8006a80 <vTaskRemoveFromUnorderedEventList>
		while( pxListItem != pxListEnd )
 8005a12:	42a7      	cmp	r7, r4
 8005a14:	d0e6      	beq.n	80059e4 <xEventGroupSetBits+0x48>
			pxNext = listGET_NEXT( pxListItem );
 8005a16:	4620      	mov	r0, r4
 8005a18:	6864      	ldr	r4, [r4, #4]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8005a1a:	6803      	ldr	r3, [r0, #0]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005a1c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8005a20:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8005a24:	d1e7      	bne.n	80059f6 <xEventGroupSetBits+0x5a>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8005a26:	6829      	ldr	r1, [r5, #0]
 8005a28:	420a      	tst	r2, r1
 8005a2a:	d1e8      	bne.n	80059fe <xEventGroupSetBits+0x62>
 8005a2c:	e7f1      	b.n	8005a12 <xEventGroupSetBits+0x76>

08005a2e <vEventGroupSetBitsCallback>:
{
 8005a2e:	b508      	push	{r3, lr}
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8005a30:	f7ff ffb4 	bl	800599c <xEventGroupSetBits>
}
 8005a34:	bd08      	pop	{r3, pc}
	...

08005a38 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005a38:	b508      	push	{r3, lr}
 8005a3a:	4613      	mov	r3, r2
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8005a3c:	460a      	mov	r2, r1
 8005a3e:	4601      	mov	r1, r0
 8005a40:	4801      	ldr	r0, [pc, #4]	; (8005a48 <xEventGroupSetBitsFromISR+0x10>)
 8005a42:	f001 fb1f 	bl	8007084 <xTimerPendFunctionCallFromISR>

		return xReturn;
	}
 8005a46:	bd08      	pop	{r3, pc}
 8005a48:	08005a2f 	.word	0x08005a2f

08005a4c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a4c:	f100 0308 	add.w	r3, r0, #8
 8005a50:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005a52:	f04f 32ff 	mov.w	r2, #4294967295
 8005a56:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a58:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a5a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005a60:	4770      	bx	lr

08005a62 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005a62:	2300      	movs	r3, #0
 8005a64:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005a66:	4770      	bx	lr

08005a68 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8005a68:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005a6a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005a6c:	689a      	ldr	r2, [r3, #8]
 8005a6e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005a70:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005a72:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005a74:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8005a76:	6803      	ldr	r3, [r0, #0]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	6003      	str	r3, [r0, #0]
}
 8005a7c:	4770      	bx	lr

08005a7e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a7e:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a80:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a82:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005a86:	d011      	beq.n	8005aac <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a88:	f100 0308 	add.w	r3, r0, #8
 8005a8c:	461c      	mov	r4, r3
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	42aa      	cmp	r2, r5
 8005a94:	d9fa      	bls.n	8005a8c <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a96:	6863      	ldr	r3, [r4, #4]
 8005a98:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a9a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005a9c:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8005a9e:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005aa0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8005aa2:	6803      	ldr	r3, [r0, #0]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	6003      	str	r3, [r0, #0]
}
 8005aa8:	bc30      	pop	{r4, r5}
 8005aaa:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8005aac:	6904      	ldr	r4, [r0, #16]
 8005aae:	e7f2      	b.n	8005a96 <vListInsert+0x18>

08005ab0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005ab0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ab2:	6841      	ldr	r1, [r0, #4]
 8005ab4:	6882      	ldr	r2, [r0, #8]
 8005ab6:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ab8:	6841      	ldr	r1, [r0, #4]
 8005aba:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005abc:	685a      	ldr	r2, [r3, #4]
 8005abe:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005ac0:	bf04      	itt	eq
 8005ac2:	6882      	ldreq	r2, [r0, #8]
 8005ac4:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	3a01      	subs	r2, #1
 8005ace:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005ad0:	6818      	ldr	r0, [r3, #0]
}
 8005ad2:	4770      	bx	lr

08005ad4 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005ad4:	b510      	push	{r4, lr}
 8005ad6:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ad8:	f001 fb3c 	bl	8007154 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005adc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8005ade:	f001 fb5b 	bl	8007198 <vPortExitCritical>

	return xReturn;
}
 8005ae2:	fab4 f084 	clz	r0, r4
 8005ae6:	0940      	lsrs	r0, r0, #5
 8005ae8:	bd10      	pop	{r4, pc}

08005aea <prvCopyDataToQueue>:
{
 8005aea:	b570      	push	{r4, r5, r6, lr}
 8005aec:	4604      	mov	r4, r0
 8005aee:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005af0:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005af2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005af4:	b95a      	cbnz	r2, 8005b0e <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005af6:	6803      	ldr	r3, [r0, #0]
 8005af8:	b11b      	cbz	r3, 8005b02 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8005afa:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005afc:	3601      	adds	r6, #1
 8005afe:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8005b00:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005b02:	6840      	ldr	r0, [r0, #4]
 8005b04:	f001 f864 	bl	8006bd0 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	6063      	str	r3, [r4, #4]
 8005b0c:	e7f6      	b.n	8005afc <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8005b0e:	b96d      	cbnz	r5, 8005b2c <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005b10:	6880      	ldr	r0, [r0, #8]
 8005b12:	f001 fd5b 	bl	80075cc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005b16:	68a3      	ldr	r3, [r4, #8]
 8005b18:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005b1a:	4413      	add	r3, r2
 8005b1c:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b1e:	6862      	ldr	r2, [r4, #4]
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d319      	bcc.n	8005b58 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b24:	6823      	ldr	r3, [r4, #0]
 8005b26:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8005b28:	4628      	mov	r0, r5
 8005b2a:	e7e7      	b.n	8005afc <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b2c:	68c0      	ldr	r0, [r0, #12]
 8005b2e:	f001 fd4d 	bl	80075cc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005b32:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005b34:	4251      	negs	r1, r2
 8005b36:	68e3      	ldr	r3, [r4, #12]
 8005b38:	1a9b      	subs	r3, r3, r2
 8005b3a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b3c:	6822      	ldr	r2, [r4, #0]
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d202      	bcs.n	8005b48 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005b42:	6863      	ldr	r3, [r4, #4]
 8005b44:	440b      	add	r3, r1
 8005b46:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8005b48:	2d02      	cmp	r5, #2
 8005b4a:	d001      	beq.n	8005b50 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8005b4c:	2000      	movs	r0, #0
 8005b4e:	e7d5      	b.n	8005afc <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b50:	b126      	cbz	r6, 8005b5c <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8005b52:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8005b54:	2000      	movs	r0, #0
 8005b56:	e7d1      	b.n	8005afc <prvCopyDataToQueue+0x12>
 8005b58:	4628      	mov	r0, r5
 8005b5a:	e7cf      	b.n	8005afc <prvCopyDataToQueue+0x12>
 8005b5c:	2000      	movs	r0, #0
 8005b5e:	e7cd      	b.n	8005afc <prvCopyDataToQueue+0x12>

08005b60 <prvCopyDataFromQueue>:
{
 8005b60:	b508      	push	{r3, lr}
 8005b62:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005b64:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005b66:	b162      	cbz	r2, 8005b82 <prvCopyDataFromQueue+0x22>
 8005b68:	4608      	mov	r0, r1
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005b6a:	68d9      	ldr	r1, [r3, #12]
 8005b6c:	4411      	add	r1, r2
 8005b6e:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005b70:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8005b74:	4561      	cmp	r1, ip
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005b76:	bf24      	itt	cs
 8005b78:	6819      	ldrcs	r1, [r3, #0]
 8005b7a:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005b7c:	68d9      	ldr	r1, [r3, #12]
 8005b7e:	f001 fd25 	bl	80075cc <memcpy>
}
 8005b82:	bd08      	pop	{r3, pc}

08005b84 <prvUnlockQueue>:
{
 8005b84:	b570      	push	{r4, r5, r6, lr}
 8005b86:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8005b88:	f001 fae4 	bl	8007154 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005b8c:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8005b90:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b92:	2c00      	cmp	r4, #0
 8005b94:	dd0f      	ble.n	8005bb6 <prvUnlockQueue+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b96:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8005b9a:	e002      	b.n	8005ba2 <prvUnlockQueue+0x1e>
			--cTxLock;
 8005b9c:	3c01      	subs	r4, #1
 8005b9e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ba0:	b14c      	cbz	r4, 8005bb6 <prvUnlockQueue+0x32>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ba2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005ba4:	b13b      	cbz	r3, 8005bb6 <prvUnlockQueue+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ba6:	4630      	mov	r0, r6
 8005ba8:	f000 ff26 	bl	80069f8 <xTaskRemoveFromEventList>
 8005bac:	2800      	cmp	r0, #0
 8005bae:	d0f5      	beq.n	8005b9c <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8005bb0:	f000 fff8 	bl	8006ba4 <vTaskMissedYield>
 8005bb4:	e7f2      	b.n	8005b9c <prvUnlockQueue+0x18>
		pxQueue->cTxLock = queueUNLOCKED;
 8005bb6:	23ff      	movs	r3, #255	; 0xff
 8005bb8:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8005bbc:	f001 faec 	bl	8007198 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005bc0:	f001 fac8 	bl	8007154 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005bc4:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8005bc8:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005bca:	2c00      	cmp	r4, #0
 8005bcc:	dd0f      	ble.n	8005bee <prvUnlockQueue+0x6a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bce:	f105 0610 	add.w	r6, r5, #16
 8005bd2:	e002      	b.n	8005bda <prvUnlockQueue+0x56>
				--cRxLock;
 8005bd4:	3c01      	subs	r4, #1
 8005bd6:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005bd8:	b14c      	cbz	r4, 8005bee <prvUnlockQueue+0x6a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bda:	692b      	ldr	r3, [r5, #16]
 8005bdc:	b13b      	cbz	r3, 8005bee <prvUnlockQueue+0x6a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bde:	4630      	mov	r0, r6
 8005be0:	f000 ff0a 	bl	80069f8 <xTaskRemoveFromEventList>
 8005be4:	2800      	cmp	r0, #0
 8005be6:	d0f5      	beq.n	8005bd4 <prvUnlockQueue+0x50>
					vTaskMissedYield();
 8005be8:	f000 ffdc 	bl	8006ba4 <vTaskMissedYield>
 8005bec:	e7f2      	b.n	8005bd4 <prvUnlockQueue+0x50>
		pxQueue->cRxLock = queueUNLOCKED;
 8005bee:	23ff      	movs	r3, #255	; 0xff
 8005bf0:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8005bf4:	f001 fad0 	bl	8007198 <vPortExitCritical>
}
 8005bf8:	bd70      	pop	{r4, r5, r6, pc}

08005bfa <xQueueGenericReset>:
{
 8005bfa:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8005bfc:	b1e0      	cbz	r0, 8005c38 <xQueueGenericReset+0x3e>
 8005bfe:	460d      	mov	r5, r1
 8005c00:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8005c02:	f001 faa7 	bl	8007154 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005c06:	6822      	ldr	r2, [r4, #0]
 8005c08:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005c0a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005c0c:	fb01 f303 	mul.w	r3, r1, r3
 8005c10:	18d0      	adds	r0, r2, r3
 8005c12:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005c14:	2000      	movs	r0, #0
 8005c16:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c18:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005c1a:	1a5b      	subs	r3, r3, r1
 8005c1c:	4413      	add	r3, r2
 8005c1e:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005c20:	23ff      	movs	r3, #255	; 0xff
 8005c22:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005c26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8005c2a:	b9fd      	cbnz	r5, 8005c6c <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c2c:	6923      	ldr	r3, [r4, #16]
 8005c2e:	b963      	cbnz	r3, 8005c4a <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8005c30:	f001 fab2 	bl	8007198 <vPortExitCritical>
}
 8005c34:	2001      	movs	r0, #1
 8005c36:	bd38      	pop	{r3, r4, r5, pc}
 8005c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3c:	f383 8811 	msr	BASEPRI, r3
 8005c40:	f3bf 8f6f 	isb	sy
 8005c44:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005c48:	e7fe      	b.n	8005c48 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c4a:	f104 0010 	add.w	r0, r4, #16
 8005c4e:	f000 fed3 	bl	80069f8 <xTaskRemoveFromEventList>
 8005c52:	2800      	cmp	r0, #0
 8005c54:	d0ec      	beq.n	8005c30 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8005c56:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c5e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005c62:	f3bf 8f4f 	dsb	sy
 8005c66:	f3bf 8f6f 	isb	sy
 8005c6a:	e7e1      	b.n	8005c30 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005c6c:	f104 0010 	add.w	r0, r4, #16
 8005c70:	f7ff feec 	bl	8005a4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005c74:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005c78:	f7ff fee8 	bl	8005a4c <vListInitialise>
 8005c7c:	e7d8      	b.n	8005c30 <xQueueGenericReset+0x36>

08005c7e <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005c7e:	b940      	cbnz	r0, 8005c92 <xQueueGenericCreateStatic+0x14>
 8005c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c84:	f383 8811 	msr	BASEPRI, r3
 8005c88:	f3bf 8f6f 	isb	sy
 8005c8c:	f3bf 8f4f 	dsb	sy
 8005c90:	e7fe      	b.n	8005c90 <xQueueGenericCreateStatic+0x12>
	{
 8005c92:	b510      	push	{r4, lr}
 8005c94:	b082      	sub	sp, #8
 8005c96:	461c      	mov	r4, r3
 8005c98:	4603      	mov	r3, r0
		configASSERT( pxStaticQueue != NULL );
 8005c9a:	b154      	cbz	r4, 8005cb2 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005c9c:	b192      	cbz	r2, 8005cc4 <xQueueGenericCreateStatic+0x46>
 8005c9e:	b9d9      	cbnz	r1, 8005cd8 <xQueueGenericCreateStatic+0x5a>
 8005ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca4:	f383 8811 	msr	BASEPRI, r3
 8005ca8:	f3bf 8f6f 	isb	sy
 8005cac:	f3bf 8f4f 	dsb	sy
 8005cb0:	e7fe      	b.n	8005cb0 <xQueueGenericCreateStatic+0x32>
 8005cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb6:	f383 8811 	msr	BASEPRI, r3
 8005cba:	f3bf 8f6f 	isb	sy
 8005cbe:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8005cc2:	e7fe      	b.n	8005cc2 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005cc4:	b339      	cbz	r1, 8005d16 <xQueueGenericCreateStatic+0x98>
 8005cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cca:	f383 8811 	msr	BASEPRI, r3
 8005cce:	f3bf 8f6f 	isb	sy
 8005cd2:	f3bf 8f4f 	dsb	sy
 8005cd6:	e7fe      	b.n	8005cd6 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005cd8:	2050      	movs	r0, #80	; 0x50
 8005cda:	9001      	str	r0, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005cdc:	9801      	ldr	r0, [sp, #4]
 8005cde:	2850      	cmp	r0, #80	; 0x50
 8005ce0:	d008      	beq.n	8005cf4 <xQueueGenericCreateStatic+0x76>
 8005ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce6:	f383 8811 	msr	BASEPRI, r3
 8005cea:	f3bf 8f6f 	isb	sy
 8005cee:	f3bf 8f4f 	dsb	sy
 8005cf2:	e7fe      	b.n	8005cf2 <xQueueGenericCreateStatic+0x74>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005cf4:	2001      	movs	r0, #1
 8005cf6:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8005cfa:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8005cfc:	63e3      	str	r3, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005cfe:	6421      	str	r1, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005d00:	2101      	movs	r1, #1
 8005d02:	4620      	mov	r0, r4
 8005d04:	f7ff ff79 	bl	8005bfa <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8005d08:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8005d0c:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8005d10:	4620      	mov	r0, r4
 8005d12:	b002      	add	sp, #8
 8005d14:	bd10      	pop	{r4, pc}
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005d16:	2250      	movs	r2, #80	; 0x50
 8005d18:	9201      	str	r2, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005d1a:	9a01      	ldr	r2, [sp, #4]
 8005d1c:	2a50      	cmp	r2, #80	; 0x50
 8005d1e:	d1e0      	bne.n	8005ce2 <xQueueGenericCreateStatic+0x64>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005d20:	2201      	movs	r2, #1
 8005d22:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005d26:	4622      	mov	r2, r4
 8005d28:	e7e7      	b.n	8005cfa <xQueueGenericCreateStatic+0x7c>

08005d2a <xQueueGenericSend>:
{
 8005d2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8005d32:	b188      	cbz	r0, 8005d58 <xQueueGenericSend+0x2e>
 8005d34:	460e      	mov	r6, r1
 8005d36:	461d      	mov	r5, r3
 8005d38:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d3a:	b1b1      	cbz	r1, 8005d6a <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d3c:	2d02      	cmp	r5, #2
 8005d3e:	d120      	bne.n	8005d82 <xQueueGenericSend+0x58>
 8005d40:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d01d      	beq.n	8005d82 <xQueueGenericSend+0x58>
 8005d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4a:	f383 8811 	msr	BASEPRI, r3
 8005d4e:	f3bf 8f6f 	isb	sy
 8005d52:	f3bf 8f4f 	dsb	sy
 8005d56:	e7fe      	b.n	8005d56 <xQueueGenericSend+0x2c>
 8005d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5c:	f383 8811 	msr	BASEPRI, r3
 8005d60:	f3bf 8f6f 	isb	sy
 8005d64:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005d68:	e7fe      	b.n	8005d68 <xQueueGenericSend+0x3e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d6a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d0e5      	beq.n	8005d3c <xQueueGenericSend+0x12>
 8005d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d74:	f383 8811 	msr	BASEPRI, r3
 8005d78:	f3bf 8f6f 	isb	sy
 8005d7c:	f3bf 8f4f 	dsb	sy
 8005d80:	e7fe      	b.n	8005d80 <xQueueGenericSend+0x56>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d82:	f000 ff15 	bl	8006bb0 <xTaskGetSchedulerState>
 8005d86:	b950      	cbnz	r0, 8005d9e <xQueueGenericSend+0x74>
 8005d88:	9b01      	ldr	r3, [sp, #4]
 8005d8a:	b163      	cbz	r3, 8005da6 <xQueueGenericSend+0x7c>
 8005d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d90:	f383 8811 	msr	BASEPRI, r3
 8005d94:	f3bf 8f6f 	isb	sy
 8005d98:	f3bf 8f4f 	dsb	sy
 8005d9c:	e7fe      	b.n	8005d9c <xQueueGenericSend+0x72>
 8005d9e:	f04f 0800 	mov.w	r8, #0
		prvLockQueue( pxQueue );
 8005da2:	2700      	movs	r7, #0
 8005da4:	e03a      	b.n	8005e1c <xQueueGenericSend+0xf2>
 8005da6:	f04f 0800 	mov.w	r8, #0
 8005daa:	e7fa      	b.n	8005da2 <xQueueGenericSend+0x78>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005dac:	462a      	mov	r2, r5
 8005dae:	4631      	mov	r1, r6
 8005db0:	4620      	mov	r0, r4
 8005db2:	f7ff fe9a 	bl	8005aea <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005db6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005db8:	b983      	cbnz	r3, 8005ddc <xQueueGenericSend+0xb2>
					else if( xYieldRequired != pdFALSE )
 8005dba:	b148      	cbz	r0, 8005dd0 <xQueueGenericSend+0xa6>
						queueYIELD_IF_USING_PREEMPTION();
 8005dbc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005dc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dc4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8005dd0:	f001 f9e2 	bl	8007198 <vPortExitCritical>
				return pdPASS;
 8005dd4:	2001      	movs	r0, #1
}
 8005dd6:	b005      	add	sp, #20
 8005dd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ddc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005de0:	f000 fe0a 	bl	80069f8 <xTaskRemoveFromEventList>
 8005de4:	2800      	cmp	r0, #0
 8005de6:	d0f3      	beq.n	8005dd0 <xQueueGenericSend+0xa6>
							queueYIELD_IF_USING_PREEMPTION();
 8005de8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005dec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005df0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005df4:	f3bf 8f4f 	dsb	sy
 8005df8:	f3bf 8f6f 	isb	sy
 8005dfc:	e7e8      	b.n	8005dd0 <xQueueGenericSend+0xa6>
					taskEXIT_CRITICAL();
 8005dfe:	f001 f9cb 	bl	8007198 <vPortExitCritical>
					return errQUEUE_FULL;
 8005e02:	2000      	movs	r0, #0
 8005e04:	e7e7      	b.n	8005dd6 <xQueueGenericSend+0xac>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e06:	a802      	add	r0, sp, #8
 8005e08:	f000 fe7e 	bl	8006b08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e0c:	e014      	b.n	8005e38 <xQueueGenericSend+0x10e>
				prvUnlockQueue( pxQueue );
 8005e0e:	4620      	mov	r0, r4
 8005e10:	f7ff feb8 	bl	8005b84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e14:	f000 fc90 	bl	8006738 <xTaskResumeAll>
 8005e18:	f04f 0801 	mov.w	r8, #1
		taskENTER_CRITICAL();
 8005e1c:	f001 f99a 	bl	8007154 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e20:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005e22:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d3c1      	bcc.n	8005dac <xQueueGenericSend+0x82>
 8005e28:	2d02      	cmp	r5, #2
 8005e2a:	d0bf      	beq.n	8005dac <xQueueGenericSend+0x82>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e2c:	9b01      	ldr	r3, [sp, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d0e5      	beq.n	8005dfe <xQueueGenericSend+0xd4>
				else if( xEntryTimeSet == pdFALSE )
 8005e32:	f1b8 0f00 	cmp.w	r8, #0
 8005e36:	d0e6      	beq.n	8005e06 <xQueueGenericSend+0xdc>
		taskEXIT_CRITICAL();
 8005e38:	f001 f9ae 	bl	8007198 <vPortExitCritical>
		vTaskSuspendAll();
 8005e3c:	f000 fbd4 	bl	80065e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e40:	f001 f988 	bl	8007154 <vPortEnterCritical>
 8005e44:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8005e48:	b252      	sxtb	r2, r2
 8005e4a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005e4e:	bf08      	it	eq
 8005e50:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8005e54:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8005e58:	b252      	sxtb	r2, r2
 8005e5a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005e5e:	bf08      	it	eq
 8005e60:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8005e64:	f001 f998 	bl	8007198 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e68:	a901      	add	r1, sp, #4
 8005e6a:	a802      	add	r0, sp, #8
 8005e6c:	f000 fe58 	bl	8006b20 <xTaskCheckForTimeOut>
 8005e70:	bb00      	cbnz	r0, 8005eb4 <xQueueGenericSend+0x18a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e72:	f001 f96f 	bl	8007154 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005e76:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
 8005e7a:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8005e7e:	f001 f98b 	bl	8007198 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005e82:	45c1      	cmp	r9, r8
 8005e84:	d1c3      	bne.n	8005e0e <xQueueGenericSend+0xe4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005e86:	9901      	ldr	r1, [sp, #4]
 8005e88:	f104 0010 	add.w	r0, r4, #16
 8005e8c:	f000 fd52 	bl	8006934 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e90:	4620      	mov	r0, r4
 8005e92:	f7ff fe77 	bl	8005b84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e96:	f000 fc4f 	bl	8006738 <xTaskResumeAll>
 8005e9a:	2800      	cmp	r0, #0
 8005e9c:	d1bc      	bne.n	8005e18 <xQueueGenericSend+0xee>
					portYIELD_WITHIN_API();
 8005e9e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ea6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005eaa:	f3bf 8f4f 	dsb	sy
 8005eae:	f3bf 8f6f 	isb	sy
 8005eb2:	e7b1      	b.n	8005e18 <xQueueGenericSend+0xee>
			prvUnlockQueue( pxQueue );
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	f7ff fe65 	bl	8005b84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005eba:	f000 fc3d 	bl	8006738 <xTaskResumeAll>
			return errQUEUE_FULL;
 8005ebe:	2000      	movs	r0, #0
 8005ec0:	e789      	b.n	8005dd6 <xQueueGenericSend+0xac>

08005ec2 <xQueueGenericSendFromISR>:
{
 8005ec2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8005ec6:	b190      	cbz	r0, 8005eee <xQueueGenericSendFromISR+0x2c>
 8005ec8:	460f      	mov	r7, r1
 8005eca:	4616      	mov	r6, r2
 8005ecc:	461c      	mov	r4, r3
 8005ece:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ed0:	b1b1      	cbz	r1, 8005f00 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ed2:	2c02      	cmp	r4, #2
 8005ed4:	d120      	bne.n	8005f18 <xQueueGenericSendFromISR+0x56>
 8005ed6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d01d      	beq.n	8005f18 <xQueueGenericSendFromISR+0x56>
 8005edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee0:	f383 8811 	msr	BASEPRI, r3
 8005ee4:	f3bf 8f6f 	isb	sy
 8005ee8:	f3bf 8f4f 	dsb	sy
 8005eec:	e7fe      	b.n	8005eec <xQueueGenericSendFromISR+0x2a>
 8005eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef2:	f383 8811 	msr	BASEPRI, r3
 8005ef6:	f3bf 8f6f 	isb	sy
 8005efa:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005efe:	e7fe      	b.n	8005efe <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f00:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d0e5      	beq.n	8005ed2 <xQueueGenericSendFromISR+0x10>
 8005f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0a:	f383 8811 	msr	BASEPRI, r3
 8005f0e:	f3bf 8f6f 	isb	sy
 8005f12:	f3bf 8f4f 	dsb	sy
 8005f16:	e7fe      	b.n	8005f16 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f18:	f001 fa08 	bl	800732c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005f1c:	f3ef 8911 	mrs	r9, BASEPRI
 8005f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f24:	f383 8811 	msr	BASEPRI, r3
 8005f28:	f3bf 8f6f 	isb	sy
 8005f2c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f30:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8005f32:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d306      	bcc.n	8005f46 <xQueueGenericSendFromISR+0x84>
 8005f38:	2c02      	cmp	r4, #2
 8005f3a:	d004      	beq.n	8005f46 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8005f3c:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f3e:	f389 8811 	msr	BASEPRI, r9
}
 8005f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8005f46:	f895 8045 	ldrb.w	r8, [r5, #69]	; 0x45
 8005f4a:	fa4f f888 	sxtb.w	r8, r8
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f4e:	4622      	mov	r2, r4
 8005f50:	4639      	mov	r1, r7
 8005f52:	4628      	mov	r0, r5
 8005f54:	f7ff fdc9 	bl	8005aea <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8005f58:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005f5c:	d006      	beq.n	8005f6c <xQueueGenericSendFromISR+0xaa>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f5e:	f108 0301 	add.w	r3, r8, #1
 8005f62:	b25b      	sxtb	r3, r3
 8005f64:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 8005f68:	2001      	movs	r0, #1
 8005f6a:	e7e8      	b.n	8005f3e <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f6c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005f6e:	b90b      	cbnz	r3, 8005f74 <xQueueGenericSendFromISR+0xb2>
			xReturn = pdPASS;
 8005f70:	2001      	movs	r0, #1
 8005f72:	e7e4      	b.n	8005f3e <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f74:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8005f78:	f000 fd3e 	bl	80069f8 <xTaskRemoveFromEventList>
 8005f7c:	b118      	cbz	r0, 8005f86 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 8005f7e:	b126      	cbz	r6, 8005f8a <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f80:	2001      	movs	r0, #1
 8005f82:	6030      	str	r0, [r6, #0]
 8005f84:	e7db      	b.n	8005f3e <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8005f86:	2001      	movs	r0, #1
 8005f88:	e7d9      	b.n	8005f3e <xQueueGenericSendFromISR+0x7c>
 8005f8a:	2001      	movs	r0, #1
 8005f8c:	e7d7      	b.n	8005f3e <xQueueGenericSendFromISR+0x7c>

08005f8e <xQueueReceive>:
{
 8005f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8005f96:	b180      	cbz	r0, 8005fba <xQueueReceive+0x2c>
 8005f98:	460e      	mov	r6, r1
 8005f9a:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f9c:	b1b1      	cbz	r1, 8005fcc <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f9e:	f000 fe07 	bl	8006bb0 <xTaskGetSchedulerState>
 8005fa2:	b9f8      	cbnz	r0, 8005fe4 <xQueueReceive+0x56>
 8005fa4:	9b01      	ldr	r3, [sp, #4]
 8005fa6:	b30b      	cbz	r3, 8005fec <xQueueReceive+0x5e>
	__asm volatile
 8005fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fac:	f383 8811 	msr	BASEPRI, r3
 8005fb0:	f3bf 8f6f 	isb	sy
 8005fb4:	f3bf 8f4f 	dsb	sy
 8005fb8:	e7fe      	b.n	8005fb8 <xQueueReceive+0x2a>
 8005fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbe:	f383 8811 	msr	BASEPRI, r3
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8005fca:	e7fe      	b.n	8005fca <xQueueReceive+0x3c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fcc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d0e5      	beq.n	8005f9e <xQueueReceive+0x10>
 8005fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd6:	f383 8811 	msr	BASEPRI, r3
 8005fda:	f3bf 8f6f 	isb	sy
 8005fde:	f3bf 8f4f 	dsb	sy
 8005fe2:	e7fe      	b.n	8005fe2 <xQueueReceive+0x54>
 8005fe4:	f04f 0800 	mov.w	r8, #0
		prvLockQueue( pxQueue );
 8005fe8:	2700      	movs	r7, #0
 8005fea:	e03b      	b.n	8006064 <xQueueReceive+0xd6>
 8005fec:	f04f 0800 	mov.w	r8, #0
 8005ff0:	e7fa      	b.n	8005fe8 <xQueueReceive+0x5a>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ff2:	4631      	mov	r1, r6
 8005ff4:	4620      	mov	r0, r4
 8005ff6:	f7ff fdb3 	bl	8005b60 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ffa:	3d01      	subs	r5, #1
 8005ffc:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ffe:	6923      	ldr	r3, [r4, #16]
 8006000:	b92b      	cbnz	r3, 800600e <xQueueReceive+0x80>
				taskEXIT_CRITICAL();
 8006002:	f001 f8c9 	bl	8007198 <vPortExitCritical>
				return pdPASS;
 8006006:	2001      	movs	r0, #1
}
 8006008:	b004      	add	sp, #16
 800600a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800600e:	f104 0010 	add.w	r0, r4, #16
 8006012:	f000 fcf1 	bl	80069f8 <xTaskRemoveFromEventList>
 8006016:	2800      	cmp	r0, #0
 8006018:	d0f3      	beq.n	8006002 <xQueueReceive+0x74>
						queueYIELD_IF_USING_PREEMPTION();
 800601a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800601e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006022:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006026:	f3bf 8f4f 	dsb	sy
 800602a:	f3bf 8f6f 	isb	sy
 800602e:	e7e8      	b.n	8006002 <xQueueReceive+0x74>
					taskEXIT_CRITICAL();
 8006030:	f001 f8b2 	bl	8007198 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8006034:	2000      	movs	r0, #0
 8006036:	e7e7      	b.n	8006008 <xQueueReceive+0x7a>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006038:	a802      	add	r0, sp, #8
 800603a:	f000 fd65 	bl	8006b08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800603e:	e01c      	b.n	800607a <xQueueReceive+0xec>
				prvUnlockQueue( pxQueue );
 8006040:	4620      	mov	r0, r4
 8006042:	f7ff fd9f 	bl	8005b84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006046:	f000 fb77 	bl	8006738 <xTaskResumeAll>
 800604a:	e009      	b.n	8006060 <xQueueReceive+0xd2>
			prvUnlockQueue( pxQueue );
 800604c:	4620      	mov	r0, r4
 800604e:	f7ff fd99 	bl	8005b84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006052:	f000 fb71 	bl	8006738 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006056:	4620      	mov	r0, r4
 8006058:	f7ff fd3c 	bl	8005ad4 <prvIsQueueEmpty>
 800605c:	2800      	cmp	r0, #0
 800605e:	d146      	bne.n	80060ee <xQueueReceive+0x160>
 8006060:	f04f 0801 	mov.w	r8, #1
		taskENTER_CRITICAL();
 8006064:	f001 f876 	bl	8007154 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006068:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800606a:	2d00      	cmp	r5, #0
 800606c:	d1c1      	bne.n	8005ff2 <xQueueReceive+0x64>
				if( xTicksToWait == ( TickType_t ) 0 )
 800606e:	9b01      	ldr	r3, [sp, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d0dd      	beq.n	8006030 <xQueueReceive+0xa2>
				else if( xEntryTimeSet == pdFALSE )
 8006074:	f1b8 0f00 	cmp.w	r8, #0
 8006078:	d0de      	beq.n	8006038 <xQueueReceive+0xaa>
		taskEXIT_CRITICAL();
 800607a:	f001 f88d 	bl	8007198 <vPortExitCritical>
		vTaskSuspendAll();
 800607e:	f000 fab3 	bl	80065e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006082:	f001 f867 	bl	8007154 <vPortEnterCritical>
 8006086:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800608a:	b25b      	sxtb	r3, r3
 800608c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006090:	bf08      	it	eq
 8006092:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8006096:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800609a:	b25b      	sxtb	r3, r3
 800609c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a0:	bf08      	it	eq
 80060a2:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 80060a6:	f001 f877 	bl	8007198 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060aa:	a901      	add	r1, sp, #4
 80060ac:	a802      	add	r0, sp, #8
 80060ae:	f000 fd37 	bl	8006b20 <xTaskCheckForTimeOut>
 80060b2:	2800      	cmp	r0, #0
 80060b4:	d1ca      	bne.n	800604c <xQueueReceive+0xbe>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060b6:	4620      	mov	r0, r4
 80060b8:	f7ff fd0c 	bl	8005ad4 <prvIsQueueEmpty>
 80060bc:	2800      	cmp	r0, #0
 80060be:	d0bf      	beq.n	8006040 <xQueueReceive+0xb2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80060c0:	9901      	ldr	r1, [sp, #4]
 80060c2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80060c6:	f000 fc35 	bl	8006934 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80060ca:	4620      	mov	r0, r4
 80060cc:	f7ff fd5a 	bl	8005b84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80060d0:	f000 fb32 	bl	8006738 <xTaskResumeAll>
 80060d4:	2800      	cmp	r0, #0
 80060d6:	d1c3      	bne.n	8006060 <xQueueReceive+0xd2>
					portYIELD_WITHIN_API();
 80060d8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80060dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060e0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80060e4:	f3bf 8f4f 	dsb	sy
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	e7b8      	b.n	8006060 <xQueueReceive+0xd2>
				return errQUEUE_EMPTY;
 80060ee:	2000      	movs	r0, #0
 80060f0:	e78a      	b.n	8006008 <xQueueReceive+0x7a>
	...

080060f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80060f4:	b410      	push	{r4}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060f6:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80060f8:	4c07      	ldr	r4, [pc, #28]	; (8006118 <vQueueAddToRegistry+0x24>)
 80060fa:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
 80060fe:	b122      	cbz	r2, 800610a <vQueueAddToRegistry+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006100:	3301      	adds	r3, #1
 8006102:	2b08      	cmp	r3, #8
 8006104:	d1f9      	bne.n	80060fa <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006106:	bc10      	pop	{r4}
 8006108:	4770      	bx	lr
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800610a:	4a03      	ldr	r2, [pc, #12]	; (8006118 <vQueueAddToRegistry+0x24>)
 800610c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006110:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006114:	6058      	str	r0, [r3, #4]
				break;
 8006116:	e7f6      	b.n	8006106 <vQueueAddToRegistry+0x12>
 8006118:	20002050 	.word	0x20002050

0800611c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800611c:	b570      	push	{r4, r5, r6, lr}
 800611e:	4604      	mov	r4, r0
 8006120:	460d      	mov	r5, r1
 8006122:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006124:	f001 f816 	bl	8007154 <vPortEnterCritical>
 8006128:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800612c:	b25b      	sxtb	r3, r3
 800612e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006132:	bf04      	itt	eq
 8006134:	2300      	moveq	r3, #0
 8006136:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 800613a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800613e:	b25b      	sxtb	r3, r3
 8006140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006144:	bf04      	itt	eq
 8006146:	2300      	moveq	r3, #0
 8006148:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 800614c:	f001 f824 	bl	8007198 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006150:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006152:	b11b      	cbz	r3, 800615c <vQueueWaitForMessageRestricted+0x40>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006154:	4620      	mov	r0, r4
 8006156:	f7ff fd15 	bl	8005b84 <prvUnlockQueue>
	}
 800615a:	bd70      	pop	{r4, r5, r6, pc}
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800615c:	4632      	mov	r2, r6
 800615e:	4629      	mov	r1, r5
 8006160:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006164:	f000 fc2a 	bl	80069bc <vTaskPlaceOnEventListRestricted>
 8006168:	e7f4      	b.n	8006154 <vQueueWaitForMessageRestricted+0x38>
	...

0800616c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800616c:	4b08      	ldr	r3, [pc, #32]	; (8006190 <prvResetNextTaskUnblockTime+0x24>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	b923      	cbnz	r3, 800617e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006174:	4b07      	ldr	r3, [pc, #28]	; (8006194 <prvResetNextTaskUnblockTime+0x28>)
 8006176:	f04f 32ff 	mov.w	r2, #4294967295
 800617a:	601a      	str	r2, [r3, #0]
 800617c:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800617e:	4b04      	ldr	r3, [pc, #16]	; (8006190 <prvResetNextTaskUnblockTime+0x24>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	685a      	ldr	r2, [r3, #4]
 8006188:	4b02      	ldr	r3, [pc, #8]	; (8006194 <prvResetNextTaskUnblockTime+0x28>)
 800618a:	601a      	str	r2, [r3, #0]
	}
}
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	20002094 	.word	0x20002094
 8006194:	2000253c 	.word	0x2000253c

08006198 <prvInitialiseNewTask>:
{
 8006198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800619c:	4606      	mov	r6, r0
 800619e:	4689      	mov	r9, r1
 80061a0:	461f      	mov	r7, r3
 80061a2:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80061a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80061a8:	0095      	lsls	r5, r2, #2
 80061aa:	462a      	mov	r2, r5
 80061ac:	21a5      	movs	r1, #165	; 0xa5
 80061ae:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80061b0:	f001 fa1a 	bl	80075e8 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80061b4:	3d04      	subs	r5, #4
 80061b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80061b8:	441d      	add	r5, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80061ba:	f025 0507 	bic.w	r5, r5, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80061be:	f109 3cff 	add.w	ip, r9, #4294967295
 80061c2:	f104 0e33 	add.w	lr, r4, #51	; 0x33
 80061c6:	f109 010f 	add.w	r1, r9, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80061ca:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 80061ce:	f80e 2f01 	strb.w	r2, [lr, #1]!
		if( pcName[ x ] == 0x00 )
 80061d2:	b10a      	cbz	r2, 80061d8 <prvInitialiseNewTask+0x40>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80061d4:	458c      	cmp	ip, r1
 80061d6:	d1f8      	bne.n	80061ca <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80061d8:	f04f 0a00 	mov.w	sl, #0
 80061dc:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80061e0:	9b08      	ldr	r3, [sp, #32]
 80061e2:	2b37      	cmp	r3, #55	; 0x37
 80061e4:	bf28      	it	cs
 80061e6:	2337      	movcs	r3, #55	; 0x37
 80061e8:	4699      	mov	r9, r3
	pxNewTCB->uxPriority = uxPriority;
 80061ea:	62e3      	str	r3, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80061ec:	64e3      	str	r3, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80061ee:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80061f2:	1d20      	adds	r0, r4, #4
 80061f4:	f7ff fc35 	bl	8005a62 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80061f8:	f104 0018 	add.w	r0, r4, #24
 80061fc:	f7ff fc31 	bl	8005a62 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006200:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006202:	f1c9 0338 	rsb	r3, r9, #56	; 0x38
 8006206:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006208:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800620a:	f8c4 a0b4 	str.w	sl, [r4, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800620e:	f884 a0b8 	strb.w	sl, [r4, #184]	; 0xb8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006212:	2260      	movs	r2, #96	; 0x60
 8006214:	4651      	mov	r1, sl
 8006216:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800621a:	f001 f9e5 	bl	80075e8 <memset>
 800621e:	4b09      	ldr	r3, [pc, #36]	; (8006244 <prvInitialiseNewTask+0xac>)
 8006220:	65a3      	str	r3, [r4, #88]	; 0x58
 8006222:	4b09      	ldr	r3, [pc, #36]	; (8006248 <prvInitialiseNewTask+0xb0>)
 8006224:	65e3      	str	r3, [r4, #92]	; 0x5c
 8006226:	4b09      	ldr	r3, [pc, #36]	; (800624c <prvInitialiseNewTask+0xb4>)
 8006228:	6623      	str	r3, [r4, #96]	; 0x60
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800622a:	463a      	mov	r2, r7
 800622c:	4631      	mov	r1, r6
 800622e:	4628      	mov	r0, r5
 8006230:	f000 ff6c 	bl	800710c <pxPortInitialiseStack>
 8006234:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8006236:	f1b8 0f00 	cmp.w	r8, #0
 800623a:	d001      	beq.n	8006240 <prvInitialiseNewTask+0xa8>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800623c:	f8c8 4000 	str.w	r4, [r8]
}
 8006240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006244:	08007bf0 	.word	0x08007bf0
 8006248:	08007c10 	.word	0x08007c10
 800624c:	08007bd0 	.word	0x08007bd0

08006250 <prvAddNewTaskToReadyList>:
{
 8006250:	b570      	push	{r4, r5, r6, lr}
 8006252:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8006254:	f000 ff7e 	bl	8007154 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8006258:	4a30      	ldr	r2, [pc, #192]	; (800631c <prvAddNewTaskToReadyList+0xcc>)
 800625a:	6813      	ldr	r3, [r2, #0]
 800625c:	3301      	adds	r3, #1
 800625e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006260:	4b2f      	ldr	r3, [pc, #188]	; (8006320 <prvAddNewTaskToReadyList+0xd0>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d034      	beq.n	80062d2 <prvAddNewTaskToReadyList+0x82>
			if( xSchedulerRunning == pdFALSE )
 8006268:	4b2e      	ldr	r3, [pc, #184]	; (8006324 <prvAddNewTaskToReadyList+0xd4>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	b93b      	cbnz	r3, 800627e <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800626e:	4b2c      	ldr	r3, [pc, #176]	; (8006320 <prvAddNewTaskToReadyList+0xd0>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006274:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006276:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8006278:	bf9c      	itt	ls
 800627a:	4b29      	ldrls	r3, [pc, #164]	; (8006320 <prvAddNewTaskToReadyList+0xd0>)
 800627c:	601d      	strls	r5, [r3, #0]
		uxTaskNumber++;
 800627e:	4a2a      	ldr	r2, [pc, #168]	; (8006328 <prvAddNewTaskToReadyList+0xd8>)
 8006280:	6813      	ldr	r3, [r2, #0]
 8006282:	3301      	adds	r3, #1
 8006284:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006286:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8006288:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800628a:	4b28      	ldr	r3, [pc, #160]	; (800632c <prvAddNewTaskToReadyList+0xdc>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4298      	cmp	r0, r3
 8006290:	bf84      	itt	hi
 8006292:	4b26      	ldrhi	r3, [pc, #152]	; (800632c <prvAddNewTaskToReadyList+0xdc>)
 8006294:	6018      	strhi	r0, [r3, #0]
 8006296:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800629a:	1d29      	adds	r1, r5, #4
 800629c:	4b24      	ldr	r3, [pc, #144]	; (8006330 <prvAddNewTaskToReadyList+0xe0>)
 800629e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80062a2:	f7ff fbe1 	bl	8005a68 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80062a6:	f000 ff77 	bl	8007198 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80062aa:	4b1e      	ldr	r3, [pc, #120]	; (8006324 <prvAddNewTaskToReadyList+0xd4>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	b17b      	cbz	r3, 80062d0 <prvAddNewTaskToReadyList+0x80>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80062b0:	4b1b      	ldr	r3, [pc, #108]	; (8006320 <prvAddNewTaskToReadyList+0xd0>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062b6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d209      	bcs.n	80062d0 <prvAddNewTaskToReadyList+0x80>
			taskYIELD_IF_USING_PREEMPTION();
 80062bc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80062c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062c4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80062c8:	f3bf 8f4f 	dsb	sy
 80062cc:	f3bf 8f6f 	isb	sy
}
 80062d0:	bd70      	pop	{r4, r5, r6, pc}
			pxCurrentTCB = pxNewTCB;
 80062d2:	4b13      	ldr	r3, [pc, #76]	; (8006320 <prvAddNewTaskToReadyList+0xd0>)
 80062d4:	601d      	str	r5, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80062d6:	6813      	ldr	r3, [r2, #0]
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d1d0      	bne.n	800627e <prvAddNewTaskToReadyList+0x2e>
 80062dc:	4c14      	ldr	r4, [pc, #80]	; (8006330 <prvAddNewTaskToReadyList+0xe0>)
 80062de:	f504 668c 	add.w	r6, r4, #1120	; 0x460
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80062e2:	4620      	mov	r0, r4
 80062e4:	f7ff fbb2 	bl	8005a4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062e8:	3414      	adds	r4, #20
 80062ea:	42b4      	cmp	r4, r6
 80062ec:	d1f9      	bne.n	80062e2 <prvAddNewTaskToReadyList+0x92>
	vListInitialise( &xDelayedTaskList1 );
 80062ee:	4e11      	ldr	r6, [pc, #68]	; (8006334 <prvAddNewTaskToReadyList+0xe4>)
 80062f0:	4630      	mov	r0, r6
 80062f2:	f7ff fbab 	bl	8005a4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80062f6:	4c10      	ldr	r4, [pc, #64]	; (8006338 <prvAddNewTaskToReadyList+0xe8>)
 80062f8:	4620      	mov	r0, r4
 80062fa:	f7ff fba7 	bl	8005a4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80062fe:	480f      	ldr	r0, [pc, #60]	; (800633c <prvAddNewTaskToReadyList+0xec>)
 8006300:	f7ff fba4 	bl	8005a4c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8006304:	480e      	ldr	r0, [pc, #56]	; (8006340 <prvAddNewTaskToReadyList+0xf0>)
 8006306:	f7ff fba1 	bl	8005a4c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800630a:	480e      	ldr	r0, [pc, #56]	; (8006344 <prvAddNewTaskToReadyList+0xf4>)
 800630c:	f7ff fb9e 	bl	8005a4c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8006310:	4b0d      	ldr	r3, [pc, #52]	; (8006348 <prvAddNewTaskToReadyList+0xf8>)
 8006312:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006314:	4b0d      	ldr	r3, [pc, #52]	; (800634c <prvAddNewTaskToReadyList+0xfc>)
 8006316:	601c      	str	r4, [r3, #0]
}
 8006318:	e7b1      	b.n	800627e <prvAddNewTaskToReadyList+0x2e>
 800631a:	bf00      	nop
 800631c:	200024fc 	.word	0x200024fc
 8006320:	20002090 	.word	0x20002090
 8006324:	20002558 	.word	0x20002558
 8006328:	2000250c 	.word	0x2000250c
 800632c:	20002510 	.word	0x20002510
 8006330:	2000209c 	.word	0x2000209c
 8006334:	20002514 	.word	0x20002514
 8006338:	20002528 	.word	0x20002528
 800633c:	20002544 	.word	0x20002544
 8006340:	20002570 	.word	0x20002570
 8006344:	2000255c 	.word	0x2000255c
 8006348:	20002094 	.word	0x20002094
 800634c:	20002098 	.word	0x20002098

08006350 <prvDeleteTCB>:
	{
 8006350:	b510      	push	{r4, lr}
 8006352:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006354:	3054      	adds	r0, #84	; 0x54
 8006356:	f001 f95d 	bl	8007614 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800635a:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 800635e:	b163      	cbz	r3, 800637a <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006360:	2b01      	cmp	r3, #1
 8006362:	d011      	beq.n	8006388 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006364:	2b02      	cmp	r3, #2
 8006366:	d00e      	beq.n	8006386 <prvDeleteTCB+0x36>
 8006368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636c:	f383 8811 	msr	BASEPRI, r3
 8006370:	f3bf 8f6f 	isb	sy
 8006374:	f3bf 8f4f 	dsb	sy
 8006378:	e7fe      	b.n	8006378 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 800637a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800637c:	f001 f8ca 	bl	8007514 <vPortFree>
				vPortFree( pxTCB );
 8006380:	4620      	mov	r0, r4
 8006382:	f001 f8c7 	bl	8007514 <vPortFree>
	}
 8006386:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8006388:	4620      	mov	r0, r4
 800638a:	f001 f8c3 	bl	8007514 <vPortFree>
 800638e:	e7fa      	b.n	8006386 <prvDeleteTCB+0x36>

08006390 <prvIdleTask>:
{
 8006390:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006392:	4c15      	ldr	r4, [pc, #84]	; (80063e8 <prvIdleTask+0x58>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006394:	4f15      	ldr	r7, [pc, #84]	; (80063ec <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 8006396:	4e16      	ldr	r6, [pc, #88]	; (80063f0 <prvIdleTask+0x60>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006398:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80063f4 <prvIdleTask+0x64>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800639c:	6823      	ldr	r3, [r4, #0]
 800639e:	b1a3      	cbz	r3, 80063ca <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 80063a0:	f000 fed8 	bl	8007154 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063a8:	1d28      	adds	r0, r5, #4
 80063aa:	f7ff fb81 	bl	8005ab0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80063ae:	6833      	ldr	r3, [r6, #0]
 80063b0:	3b01      	subs	r3, #1
 80063b2:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 80063b4:	6823      	ldr	r3, [r4, #0]
 80063b6:	3b01      	subs	r3, #1
 80063b8:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80063ba:	f000 feed 	bl	8007198 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80063be:	4628      	mov	r0, r5
 80063c0:	f7ff ffc6 	bl	8006350 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063c4:	6823      	ldr	r3, [r4, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1ea      	bne.n	80063a0 <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80063ca:	f8d8 3000 	ldr.w	r3, [r8]
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d9e4      	bls.n	800639c <prvIdleTask+0xc>
				taskYIELD();
 80063d2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80063d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063da:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80063de:	f3bf 8f4f 	dsb	sy
 80063e2:	f3bf 8f6f 	isb	sy
 80063e6:	e7d9      	b.n	800639c <prvIdleTask+0xc>
 80063e8:	20002500 	.word	0x20002500
 80063ec:	20002570 	.word	0x20002570
 80063f0:	200024fc 	.word	0x200024fc
 80063f4:	2000209c 	.word	0x2000209c

080063f8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80063f8:	b570      	push	{r4, r5, r6, lr}
 80063fa:	4604      	mov	r4, r0
 80063fc:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80063fe:	4b17      	ldr	r3, [pc, #92]	; (800645c <prvAddCurrentTaskToDelayedList+0x64>)
 8006400:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006402:	4b17      	ldr	r3, [pc, #92]	; (8006460 <prvAddCurrentTaskToDelayedList+0x68>)
 8006404:	6818      	ldr	r0, [r3, #0]
 8006406:	3004      	adds	r0, #4
 8006408:	f7ff fb52 	bl	8005ab0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800640c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006410:	d00d      	beq.n	800642e <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006412:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006414:	4b12      	ldr	r3, [pc, #72]	; (8006460 <prvAddCurrentTaskToDelayedList+0x68>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800641a:	42a6      	cmp	r6, r4
 800641c:	d910      	bls.n	8006440 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800641e:	4b11      	ldr	r3, [pc, #68]	; (8006464 <prvAddCurrentTaskToDelayedList+0x6c>)
 8006420:	6818      	ldr	r0, [r3, #0]
 8006422:	4b0f      	ldr	r3, [pc, #60]	; (8006460 <prvAddCurrentTaskToDelayedList+0x68>)
 8006424:	6819      	ldr	r1, [r3, #0]
 8006426:	3104      	adds	r1, #4
 8006428:	f7ff fb29 	bl	8005a7e <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800642c:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800642e:	2d00      	cmp	r5, #0
 8006430:	d0ef      	beq.n	8006412 <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006432:	4b0b      	ldr	r3, [pc, #44]	; (8006460 <prvAddCurrentTaskToDelayedList+0x68>)
 8006434:	6819      	ldr	r1, [r3, #0]
 8006436:	3104      	adds	r1, #4
 8006438:	480b      	ldr	r0, [pc, #44]	; (8006468 <prvAddCurrentTaskToDelayedList+0x70>)
 800643a:	f7ff fb15 	bl	8005a68 <vListInsertEnd>
 800643e:	e7f5      	b.n	800642c <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006440:	4b0a      	ldr	r3, [pc, #40]	; (800646c <prvAddCurrentTaskToDelayedList+0x74>)
 8006442:	6818      	ldr	r0, [r3, #0]
 8006444:	4b06      	ldr	r3, [pc, #24]	; (8006460 <prvAddCurrentTaskToDelayedList+0x68>)
 8006446:	6819      	ldr	r1, [r3, #0]
 8006448:	3104      	adds	r1, #4
 800644a:	f7ff fb18 	bl	8005a7e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800644e:	4b08      	ldr	r3, [pc, #32]	; (8006470 <prvAddCurrentTaskToDelayedList+0x78>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	42a3      	cmp	r3, r4
					xNextTaskUnblockTime = xTimeToWake;
 8006454:	bf84      	itt	hi
 8006456:	4b06      	ldrhi	r3, [pc, #24]	; (8006470 <prvAddCurrentTaskToDelayedList+0x78>)
 8006458:	601c      	strhi	r4, [r3, #0]
}
 800645a:	e7e7      	b.n	800642c <prvAddCurrentTaskToDelayedList+0x34>
 800645c:	20002584 	.word	0x20002584
 8006460:	20002090 	.word	0x20002090
 8006464:	20002098 	.word	0x20002098
 8006468:	2000255c 	.word	0x2000255c
 800646c:	20002094 	.word	0x20002094
 8006470:	2000253c 	.word	0x2000253c

08006474 <xTaskCreateStatic>:
	{
 8006474:	b530      	push	{r4, r5, lr}
 8006476:	b087      	sub	sp, #28
 8006478:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800647a:	b17c      	cbz	r4, 800649c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800647c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800647e:	b1b5      	cbz	r5, 80064ae <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8006480:	25bc      	movs	r5, #188	; 0xbc
 8006482:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006484:	9d04      	ldr	r5, [sp, #16]
 8006486:	2dbc      	cmp	r5, #188	; 0xbc
 8006488:	d01a      	beq.n	80064c0 <xTaskCreateStatic+0x4c>
 800648a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648e:	f383 8811 	msr	BASEPRI, r3
 8006492:	f3bf 8f6f 	isb	sy
 8006496:	f3bf 8f4f 	dsb	sy
 800649a:	e7fe      	b.n	800649a <xTaskCreateStatic+0x26>
 800649c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a0:	f383 8811 	msr	BASEPRI, r3
 80064a4:	f3bf 8f6f 	isb	sy
 80064a8:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 80064ac:	e7fe      	b.n	80064ac <xTaskCreateStatic+0x38>
 80064ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b2:	f383 8811 	msr	BASEPRI, r3
 80064b6:	f3bf 8f6f 	isb	sy
 80064ba:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 80064be:	e7fe      	b.n	80064be <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80064c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80064c2:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80064c4:	2402      	movs	r4, #2
 80064c6:	f885 40b9 	strb.w	r4, [r5, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80064ca:	2400      	movs	r4, #0
 80064cc:	9403      	str	r4, [sp, #12]
 80064ce:	9502      	str	r5, [sp, #8]
 80064d0:	ac05      	add	r4, sp, #20
 80064d2:	9401      	str	r4, [sp, #4]
 80064d4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80064d6:	9400      	str	r4, [sp, #0]
 80064d8:	f7ff fe5e 	bl	8006198 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064dc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80064de:	f7ff feb7 	bl	8006250 <prvAddNewTaskToReadyList>
	}
 80064e2:	9805      	ldr	r0, [sp, #20]
 80064e4:	b007      	add	sp, #28
 80064e6:	bd30      	pop	{r4, r5, pc}

080064e8 <xTaskCreate>:
	{
 80064e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80064ec:	b085      	sub	sp, #20
 80064ee:	4607      	mov	r7, r0
 80064f0:	4688      	mov	r8, r1
 80064f2:	4614      	mov	r4, r2
 80064f4:	461e      	mov	r6, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064f6:	0090      	lsls	r0, r2, #2
 80064f8:	f000 ff76 	bl	80073e8 <pvPortMalloc>
			if( pxStack != NULL )
 80064fc:	b308      	cbz	r0, 8006542 <xTaskCreate+0x5a>
 80064fe:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006500:	20bc      	movs	r0, #188	; 0xbc
 8006502:	f000 ff71 	bl	80073e8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8006506:	4605      	mov	r5, r0
 8006508:	b1a8      	cbz	r0, 8006536 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 800650a:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800650e:	2300      	movs	r3, #0
 8006510:	f880 30b9 	strb.w	r3, [r0, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006514:	9303      	str	r3, [sp, #12]
 8006516:	9002      	str	r0, [sp, #8]
 8006518:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800651a:	9301      	str	r3, [sp, #4]
 800651c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800651e:	9300      	str	r3, [sp, #0]
 8006520:	4633      	mov	r3, r6
 8006522:	4622      	mov	r2, r4
 8006524:	4641      	mov	r1, r8
 8006526:	4638      	mov	r0, r7
 8006528:	f7ff fe36 	bl	8006198 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800652c:	4628      	mov	r0, r5
 800652e:	f7ff fe8f 	bl	8006250 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006532:	2001      	movs	r0, #1
 8006534:	e007      	b.n	8006546 <xTaskCreate+0x5e>
					vPortFree( pxStack );
 8006536:	4648      	mov	r0, r9
 8006538:	f000 ffec 	bl	8007514 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800653c:	f04f 30ff 	mov.w	r0, #4294967295
 8006540:	e001      	b.n	8006546 <xTaskCreate+0x5e>
 8006542:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8006546:	b005      	add	sp, #20
 8006548:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800654c <vTaskStartScheduler>:
{
 800654c:	b510      	push	{r4, lr}
 800654e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006550:	2400      	movs	r4, #0
 8006552:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006554:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006556:	aa07      	add	r2, sp, #28
 8006558:	a906      	add	r1, sp, #24
 800655a:	a805      	add	r0, sp, #20
 800655c:	f7ff f948 	bl	80057f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006560:	9b05      	ldr	r3, [sp, #20]
 8006562:	9302      	str	r3, [sp, #8]
 8006564:	9b06      	ldr	r3, [sp, #24]
 8006566:	9301      	str	r3, [sp, #4]
 8006568:	9400      	str	r4, [sp, #0]
 800656a:	4623      	mov	r3, r4
 800656c:	9a07      	ldr	r2, [sp, #28]
 800656e:	4917      	ldr	r1, [pc, #92]	; (80065cc <vTaskStartScheduler+0x80>)
 8006570:	4817      	ldr	r0, [pc, #92]	; (80065d0 <vTaskStartScheduler+0x84>)
 8006572:	f7ff ff7f 	bl	8006474 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8006576:	b338      	cbz	r0, 80065c8 <vTaskStartScheduler+0x7c>
			xReturn = xTimerCreateTimerTask();
 8006578:	f000 fbda 	bl	8006d30 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800657c:	2801      	cmp	r0, #1
 800657e:	d00b      	beq.n	8006598 <vTaskStartScheduler+0x4c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006580:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006584:	d120      	bne.n	80065c8 <vTaskStartScheduler+0x7c>
 8006586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658a:	f383 8811 	msr	BASEPRI, r3
 800658e:	f3bf 8f6f 	isb	sy
 8006592:	f3bf 8f4f 	dsb	sy
 8006596:	e7fe      	b.n	8006596 <vTaskStartScheduler+0x4a>
 8006598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659c:	f383 8811 	msr	BASEPRI, r3
 80065a0:	f3bf 8f6f 	isb	sy
 80065a4:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80065a8:	4b0a      	ldr	r3, [pc, #40]	; (80065d4 <vTaskStartScheduler+0x88>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	3354      	adds	r3, #84	; 0x54
 80065ae:	4a0a      	ldr	r2, [pc, #40]	; (80065d8 <vTaskStartScheduler+0x8c>)
 80065b0:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 80065b2:	4b0a      	ldr	r3, [pc, #40]	; (80065dc <vTaskStartScheduler+0x90>)
 80065b4:	f04f 32ff 	mov.w	r2, #4294967295
 80065b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80065ba:	4b09      	ldr	r3, [pc, #36]	; (80065e0 <vTaskStartScheduler+0x94>)
 80065bc:	2201      	movs	r2, #1
 80065be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80065c0:	4b08      	ldr	r3, [pc, #32]	; (80065e4 <vTaskStartScheduler+0x98>)
 80065c2:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80065c4:	f000 fe50 	bl	8007268 <xPortStartScheduler>
}
 80065c8:	b008      	add	sp, #32
 80065ca:	bd10      	pop	{r4, pc}
 80065cc:	08007bb8 	.word	0x08007bb8
 80065d0:	08006391 	.word	0x08006391
 80065d4:	20002090 	.word	0x20002090
 80065d8:	2000009c 	.word	0x2000009c
 80065dc:	2000253c 	.word	0x2000253c
 80065e0:	20002558 	.word	0x20002558
 80065e4:	20002584 	.word	0x20002584

080065e8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80065e8:	4a02      	ldr	r2, [pc, #8]	; (80065f4 <vTaskSuspendAll+0xc>)
 80065ea:	6813      	ldr	r3, [r2, #0]
 80065ec:	3301      	adds	r3, #1
 80065ee:	6013      	str	r3, [r2, #0]
}
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop
 80065f4:	20002508 	.word	0x20002508

080065f8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80065f8:	4b01      	ldr	r3, [pc, #4]	; (8006600 <xTaskGetTickCount+0x8>)
 80065fa:	6818      	ldr	r0, [r3, #0]
}
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	20002584 	.word	0x20002584

08006604 <xTaskIncrementTick>:
{
 8006604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006608:	4b40      	ldr	r3, [pc, #256]	; (800670c <xTaskIncrementTick+0x108>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d170      	bne.n	80066f2 <xTaskIncrementTick+0xee>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006610:	4b3f      	ldr	r3, [pc, #252]	; (8006710 <xTaskIncrementTick+0x10c>)
 8006612:	681e      	ldr	r6, [r3, #0]
 8006614:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8006616:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006618:	b9c6      	cbnz	r6, 800664c <xTaskIncrementTick+0x48>
			taskSWITCH_DELAYED_LISTS();
 800661a:	4b3e      	ldr	r3, [pc, #248]	; (8006714 <xTaskIncrementTick+0x110>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	b143      	cbz	r3, 8006634 <xTaskIncrementTick+0x30>
 8006622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	e7fe      	b.n	8006632 <xTaskIncrementTick+0x2e>
 8006634:	4a37      	ldr	r2, [pc, #220]	; (8006714 <xTaskIncrementTick+0x110>)
 8006636:	6811      	ldr	r1, [r2, #0]
 8006638:	4b37      	ldr	r3, [pc, #220]	; (8006718 <xTaskIncrementTick+0x114>)
 800663a:	6818      	ldr	r0, [r3, #0]
 800663c:	6010      	str	r0, [r2, #0]
 800663e:	6019      	str	r1, [r3, #0]
 8006640:	4a36      	ldr	r2, [pc, #216]	; (800671c <xTaskIncrementTick+0x118>)
 8006642:	6813      	ldr	r3, [r2, #0]
 8006644:	3301      	adds	r3, #1
 8006646:	6013      	str	r3, [r2, #0]
 8006648:	f7ff fd90 	bl	800616c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800664c:	4b34      	ldr	r3, [pc, #208]	; (8006720 <xTaskIncrementTick+0x11c>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	42b3      	cmp	r3, r6
 8006652:	d841      	bhi.n	80066d8 <xTaskIncrementTick+0xd4>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006654:	4b2f      	ldr	r3, [pc, #188]	; (8006714 <xTaskIncrementTick+0x110>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	b13b      	cbz	r3, 800666c <xTaskIncrementTick+0x68>
BaseType_t xSwitchRequired = pdFALSE;
 800665c:	2500      	movs	r5, #0
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800665e:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8006714 <xTaskIncrementTick+0x110>
					prvAddTaskToReadyList( pxTCB );
 8006662:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8006724 <xTaskIncrementTick+0x120>
 8006666:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8006728 <xTaskIncrementTick+0x124>
 800666a:	e022      	b.n	80066b2 <xTaskIncrementTick+0xae>
BaseType_t xSwitchRequired = pdFALSE;
 800666c:	2500      	movs	r5, #0
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800666e:	4b2c      	ldr	r3, [pc, #176]	; (8006720 <xTaskIncrementTick+0x11c>)
 8006670:	f04f 32ff 	mov.w	r2, #4294967295
 8006674:	601a      	str	r2, [r3, #0]
					break;
 8006676:	e030      	b.n	80066da <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = xItemValue;
 8006678:	4a29      	ldr	r2, [pc, #164]	; (8006720 <xTaskIncrementTick+0x11c>)
 800667a:	6013      	str	r3, [r2, #0]
						break;
 800667c:	e02d      	b.n	80066da <xTaskIncrementTick+0xd6>
					prvAddTaskToReadyList( pxTCB );
 800667e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006680:	f8d9 3000 	ldr.w	r3, [r9]
 8006684:	4298      	cmp	r0, r3
 8006686:	bf88      	it	hi
 8006688:	f8c9 0000 	strhi.w	r0, [r9]
 800668c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006690:	4639      	mov	r1, r7
 8006692:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 8006696:	f7ff f9e7 	bl	8005a68 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800669a:	4b24      	ldr	r3, [pc, #144]	; (800672c <xTaskIncrementTick+0x128>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80066a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80066a2:	429a      	cmp	r2, r3
 80066a4:	bf28      	it	cs
 80066a6:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066a8:	f8d8 3000 	ldr.w	r3, [r8]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d0dd      	beq.n	800666e <xTaskIncrementTick+0x6a>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80066b2:	f8d8 3000 	ldr.w	r3, [r8]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80066ba:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 80066bc:	429e      	cmp	r6, r3
 80066be:	d3db      	bcc.n	8006678 <xTaskIncrementTick+0x74>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066c0:	1d27      	adds	r7, r4, #4
 80066c2:	4638      	mov	r0, r7
 80066c4:	f7ff f9f4 	bl	8005ab0 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80066c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d0d7      	beq.n	800667e <xTaskIncrementTick+0x7a>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066ce:	f104 0018 	add.w	r0, r4, #24
 80066d2:	f7ff f9ed 	bl	8005ab0 <uxListRemove>
 80066d6:	e7d2      	b.n	800667e <xTaskIncrementTick+0x7a>
BaseType_t xSwitchRequired = pdFALSE;
 80066d8:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80066da:	4b14      	ldr	r3, [pc, #80]	; (800672c <xTaskIncrementTick+0x128>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	4a10      	ldr	r2, [pc, #64]	; (8006728 <xTaskIncrementTick+0x124>)
 80066e8:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	bf28      	it	cs
 80066ee:	2501      	movcs	r5, #1
 80066f0:	e004      	b.n	80066fc <xTaskIncrementTick+0xf8>
		++uxPendedTicks;
 80066f2:	4a0f      	ldr	r2, [pc, #60]	; (8006730 <xTaskIncrementTick+0x12c>)
 80066f4:	6813      	ldr	r3, [r2, #0]
 80066f6:	3301      	adds	r3, #1
 80066f8:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80066fa:	2500      	movs	r5, #0
		if( xYieldPending != pdFALSE )
 80066fc:	4b0d      	ldr	r3, [pc, #52]	; (8006734 <xTaskIncrementTick+0x130>)
 80066fe:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8006700:	2b00      	cmp	r3, #0
}
 8006702:	bf0c      	ite	eq
 8006704:	4628      	moveq	r0, r5
 8006706:	2001      	movne	r0, #1
 8006708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800670c:	20002508 	.word	0x20002508
 8006710:	20002584 	.word	0x20002584
 8006714:	20002094 	.word	0x20002094
 8006718:	20002098 	.word	0x20002098
 800671c:	20002540 	.word	0x20002540
 8006720:	2000253c 	.word	0x2000253c
 8006724:	20002510 	.word	0x20002510
 8006728:	2000209c 	.word	0x2000209c
 800672c:	20002090 	.word	0x20002090
 8006730:	20002504 	.word	0x20002504
 8006734:	20002588 	.word	0x20002588

08006738 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8006738:	4b38      	ldr	r3, [pc, #224]	; (800681c <xTaskResumeAll+0xe4>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	b943      	cbnz	r3, 8006750 <xTaskResumeAll+0x18>
 800673e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006742:	f383 8811 	msr	BASEPRI, r3
 8006746:	f3bf 8f6f 	isb	sy
 800674a:	f3bf 8f4f 	dsb	sy
 800674e:	e7fe      	b.n	800674e <xTaskResumeAll+0x16>
{
 8006750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
 8006754:	f000 fcfe 	bl	8007154 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8006758:	4b30      	ldr	r3, [pc, #192]	; (800681c <xTaskResumeAll+0xe4>)
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	3a01      	subs	r2, #1
 800675e:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d149      	bne.n	80067fa <xTaskResumeAll+0xc2>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006766:	4b2e      	ldr	r3, [pc, #184]	; (8006820 <xTaskResumeAll+0xe8>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d04b      	beq.n	8006806 <xTaskResumeAll+0xce>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800676e:	4b2d      	ldr	r3, [pc, #180]	; (8006824 <xTaskResumeAll+0xec>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d04b      	beq.n	800680e <xTaskResumeAll+0xd6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006776:	4e2b      	ldr	r6, [pc, #172]	; (8006824 <xTaskResumeAll+0xec>)
					prvAddTaskToReadyList( pxTCB );
 8006778:	4f2b      	ldr	r7, [pc, #172]	; (8006828 <xTaskResumeAll+0xf0>)
 800677a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800682c <xTaskResumeAll+0xf4>
 800677e:	e002      	b.n	8006786 <xTaskResumeAll+0x4e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006780:	6833      	ldr	r3, [r6, #0]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d041      	beq.n	800680a <xTaskResumeAll+0xd2>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006786:	68f3      	ldr	r3, [r6, #12]
 8006788:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800678a:	f104 0018 	add.w	r0, r4, #24
 800678e:	f7ff f98f 	bl	8005ab0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006792:	1d25      	adds	r5, r4, #4
 8006794:	4628      	mov	r0, r5
 8006796:	f7ff f98b 	bl	8005ab0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800679a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	4298      	cmp	r0, r3
 80067a0:	bf88      	it	hi
 80067a2:	6038      	strhi	r0, [r7, #0]
 80067a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80067a8:	4629      	mov	r1, r5
 80067aa:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 80067ae:	f7ff f95b 	bl	8005a68 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80067b2:	4b1f      	ldr	r3, [pc, #124]	; (8006830 <xTaskResumeAll+0xf8>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80067b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d3e0      	bcc.n	8006780 <xTaskResumeAll+0x48>
						xYieldPending = pdTRUE;
 80067be:	4b1d      	ldr	r3, [pc, #116]	; (8006834 <xTaskResumeAll+0xfc>)
 80067c0:	2201      	movs	r2, #1
 80067c2:	601a      	str	r2, [r3, #0]
 80067c4:	e7dc      	b.n	8006780 <xTaskResumeAll+0x48>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80067c6:	3c01      	subs	r4, #1
 80067c8:	d005      	beq.n	80067d6 <xTaskResumeAll+0x9e>
							if( xTaskIncrementTick() != pdFALSE )
 80067ca:	f7ff ff1b 	bl	8006604 <xTaskIncrementTick>
 80067ce:	2800      	cmp	r0, #0
 80067d0:	d0f9      	beq.n	80067c6 <xTaskResumeAll+0x8e>
								xYieldPending = pdTRUE;
 80067d2:	6035      	str	r5, [r6, #0]
 80067d4:	e7f7      	b.n	80067c6 <xTaskResumeAll+0x8e>
						uxPendedTicks = 0;
 80067d6:	4b18      	ldr	r3, [pc, #96]	; (8006838 <xTaskResumeAll+0x100>)
 80067d8:	2200      	movs	r2, #0
 80067da:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 80067dc:	4b15      	ldr	r3, [pc, #84]	; (8006834 <xTaskResumeAll+0xfc>)
 80067de:	681c      	ldr	r4, [r3, #0]
 80067e0:	b164      	cbz	r4, 80067fc <xTaskResumeAll+0xc4>
					taskYIELD_IF_USING_PREEMPTION();
 80067e2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80067e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067ea:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80067ee:	f3bf 8f4f 	dsb	sy
 80067f2:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80067f6:	2401      	movs	r4, #1
 80067f8:	e000      	b.n	80067fc <xTaskResumeAll+0xc4>
BaseType_t xAlreadyYielded = pdFALSE;
 80067fa:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80067fc:	f000 fccc 	bl	8007198 <vPortExitCritical>
}
 8006800:	4620      	mov	r0, r4
 8006802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 8006806:	2400      	movs	r4, #0
 8006808:	e7f8      	b.n	80067fc <xTaskResumeAll+0xc4>
					prvResetNextTaskUnblockTime();
 800680a:	f7ff fcaf 	bl	800616c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800680e:	4b0a      	ldr	r3, [pc, #40]	; (8006838 <xTaskResumeAll+0x100>)
 8006810:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006812:	2c00      	cmp	r4, #0
 8006814:	d0e2      	beq.n	80067dc <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 8006816:	4e07      	ldr	r6, [pc, #28]	; (8006834 <xTaskResumeAll+0xfc>)
 8006818:	2501      	movs	r5, #1
 800681a:	e7d6      	b.n	80067ca <xTaskResumeAll+0x92>
 800681c:	20002508 	.word	0x20002508
 8006820:	200024fc 	.word	0x200024fc
 8006824:	20002544 	.word	0x20002544
 8006828:	20002510 	.word	0x20002510
 800682c:	2000209c 	.word	0x2000209c
 8006830:	20002090 	.word	0x20002090
 8006834:	20002588 	.word	0x20002588
 8006838:	20002504 	.word	0x20002504

0800683c <vTaskDelay>:
	{
 800683c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800683e:	b1a8      	cbz	r0, 800686c <vTaskDelay+0x30>
 8006840:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8006842:	4b10      	ldr	r3, [pc, #64]	; (8006884 <vTaskDelay+0x48>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	b143      	cbz	r3, 800685a <vTaskDelay+0x1e>
 8006848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684c:	f383 8811 	msr	BASEPRI, r3
 8006850:	f3bf 8f6f 	isb	sy
 8006854:	f3bf 8f4f 	dsb	sy
 8006858:	e7fe      	b.n	8006858 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800685a:	f7ff fec5 	bl	80065e8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800685e:	2100      	movs	r1, #0
 8006860:	4620      	mov	r0, r4
 8006862:	f7ff fdc9 	bl	80063f8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8006866:	f7ff ff67 	bl	8006738 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800686a:	b948      	cbnz	r0, 8006880 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 800686c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006870:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006874:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006878:	f3bf 8f4f 	dsb	sy
 800687c:	f3bf 8f6f 	isb	sy
	}
 8006880:	bd10      	pop	{r4, pc}
 8006882:	bf00      	nop
 8006884:	20002508 	.word	0x20002508

08006888 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006888:	4b24      	ldr	r3, [pc, #144]	; (800691c <vTaskSwitchContext+0x94>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	b11b      	cbz	r3, 8006896 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800688e:	4b24      	ldr	r3, [pc, #144]	; (8006920 <vTaskSwitchContext+0x98>)
 8006890:	2201      	movs	r2, #1
 8006892:	601a      	str	r2, [r3, #0]
 8006894:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8006896:	4b22      	ldr	r3, [pc, #136]	; (8006920 <vTaskSwitchContext+0x98>)
 8006898:	2200      	movs	r2, #0
 800689a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800689c:	4b21      	ldr	r3, [pc, #132]	; (8006924 <vTaskSwitchContext+0x9c>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80068a4:	0092      	lsls	r2, r2, #2
 80068a6:	4920      	ldr	r1, [pc, #128]	; (8006928 <vTaskSwitchContext+0xa0>)
 80068a8:	588a      	ldr	r2, [r1, r2]
 80068aa:	b98a      	cbnz	r2, 80068d0 <vTaskSwitchContext+0x48>
 80068ac:	b13b      	cbz	r3, 80068be <vTaskSwitchContext+0x36>
 80068ae:	3b01      	subs	r3, #1
 80068b0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80068b4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80068b8:	b952      	cbnz	r2, 80068d0 <vTaskSwitchContext+0x48>
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1f7      	bne.n	80068ae <vTaskSwitchContext+0x26>
 80068be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c2:	f383 8811 	msr	BASEPRI, r3
 80068c6:	f3bf 8f6f 	isb	sy
 80068ca:	f3bf 8f4f 	dsb	sy
 80068ce:	e7fe      	b.n	80068ce <vTaskSwitchContext+0x46>
 80068d0:	4a15      	ldr	r2, [pc, #84]	; (8006928 <vTaskSwitchContext+0xa0>)
 80068d2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80068d6:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80068da:	6848      	ldr	r0, [r1, #4]
 80068dc:	6840      	ldr	r0, [r0, #4]
 80068de:	6048      	str	r0, [r1, #4]
 80068e0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80068e4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80068e8:	3208      	adds	r2, #8
 80068ea:	4290      	cmp	r0, r2
 80068ec:	d00f      	beq.n	800690e <vTaskSwitchContext+0x86>
 80068ee:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80068f2:	4a0d      	ldr	r2, [pc, #52]	; (8006928 <vTaskSwitchContext+0xa0>)
 80068f4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80068f8:	6852      	ldr	r2, [r2, #4]
 80068fa:	68d1      	ldr	r1, [r2, #12]
 80068fc:	4a0b      	ldr	r2, [pc, #44]	; (800692c <vTaskSwitchContext+0xa4>)
 80068fe:	6011      	str	r1, [r2, #0]
 8006900:	4908      	ldr	r1, [pc, #32]	; (8006924 <vTaskSwitchContext+0x9c>)
 8006902:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006904:	6813      	ldr	r3, [r2, #0]
 8006906:	3354      	adds	r3, #84	; 0x54
 8006908:	4a09      	ldr	r2, [pc, #36]	; (8006930 <vTaskSwitchContext+0xa8>)
 800690a:	6013      	str	r3, [r2, #0]
}
 800690c:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800690e:	6840      	ldr	r0, [r0, #4]
 8006910:	4a05      	ldr	r2, [pc, #20]	; (8006928 <vTaskSwitchContext+0xa0>)
 8006912:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006916:	6050      	str	r0, [r2, #4]
 8006918:	e7e9      	b.n	80068ee <vTaskSwitchContext+0x66>
 800691a:	bf00      	nop
 800691c:	20002508 	.word	0x20002508
 8006920:	20002588 	.word	0x20002588
 8006924:	20002510 	.word	0x20002510
 8006928:	2000209c 	.word	0x2000209c
 800692c:	20002090 	.word	0x20002090
 8006930:	2000009c 	.word	0x2000009c

08006934 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8006934:	b158      	cbz	r0, 800694e <vTaskPlaceOnEventList+0x1a>
{
 8006936:	b510      	push	{r4, lr}
 8006938:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800693a:	4a09      	ldr	r2, [pc, #36]	; (8006960 <vTaskPlaceOnEventList+0x2c>)
 800693c:	6811      	ldr	r1, [r2, #0]
 800693e:	3118      	adds	r1, #24
 8006940:	f7ff f89d 	bl	8005a7e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006944:	2101      	movs	r1, #1
 8006946:	4620      	mov	r0, r4
 8006948:	f7ff fd56 	bl	80063f8 <prvAddCurrentTaskToDelayedList>
}
 800694c:	bd10      	pop	{r4, pc}
 800694e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006952:	f383 8811 	msr	BASEPRI, r3
 8006956:	f3bf 8f6f 	isb	sy
 800695a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 800695e:	e7fe      	b.n	800695e <vTaskPlaceOnEventList+0x2a>
 8006960:	20002090 	.word	0x20002090

08006964 <vTaskPlaceOnUnorderedEventList>:
	configASSERT( pxEventList );
 8006964:	b170      	cbz	r0, 8006984 <vTaskPlaceOnUnorderedEventList+0x20>
{
 8006966:	b510      	push	{r4, lr}
 8006968:	4614      	mov	r4, r2
 800696a:	4602      	mov	r2, r0
	configASSERT( uxSchedulerSuspended != 0 );
 800696c:	4b11      	ldr	r3, [pc, #68]	; (80069b4 <vTaskPlaceOnUnorderedEventList+0x50>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	b98b      	cbnz	r3, 8006996 <vTaskPlaceOnUnorderedEventList+0x32>
 8006972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006976:	f383 8811 	msr	BASEPRI, r3
 800697a:	f3bf 8f6f 	isb	sy
 800697e:	f3bf 8f4f 	dsb	sy
 8006982:	e7fe      	b.n	8006982 <vTaskPlaceOnUnorderedEventList+0x1e>
 8006984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006988:	f383 8811 	msr	BASEPRI, r3
 800698c:	f3bf 8f6f 	isb	sy
 8006990:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8006994:	e7fe      	b.n	8006994 <vTaskPlaceOnUnorderedEventList+0x30>
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006996:	4b08      	ldr	r3, [pc, #32]	; (80069b8 <vTaskPlaceOnUnorderedEventList+0x54>)
 8006998:	6818      	ldr	r0, [r3, #0]
 800699a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800699e:	6181      	str	r1, [r0, #24]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069a0:	6819      	ldr	r1, [r3, #0]
 80069a2:	3118      	adds	r1, #24
 80069a4:	4610      	mov	r0, r2
 80069a6:	f7ff f85f 	bl	8005a68 <vListInsertEnd>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80069aa:	2101      	movs	r1, #1
 80069ac:	4620      	mov	r0, r4
 80069ae:	f7ff fd23 	bl	80063f8 <prvAddCurrentTaskToDelayedList>
}
 80069b2:	bd10      	pop	{r4, pc}
 80069b4:	20002508 	.word	0x20002508
 80069b8:	20002090 	.word	0x20002090

080069bc <vTaskPlaceOnEventListRestricted>:
	{
 80069bc:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 80069be:	b178      	cbz	r0, 80069e0 <vTaskPlaceOnEventListRestricted+0x24>
 80069c0:	460d      	mov	r5, r1
 80069c2:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069c4:	4a0b      	ldr	r2, [pc, #44]	; (80069f4 <vTaskPlaceOnEventListRestricted+0x38>)
 80069c6:	6811      	ldr	r1, [r2, #0]
 80069c8:	3118      	adds	r1, #24
 80069ca:	f7ff f84d 	bl	8005a68 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 80069ce:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80069d0:	4621      	mov	r1, r4
 80069d2:	bf0c      	ite	eq
 80069d4:	4628      	moveq	r0, r5
 80069d6:	f04f 30ff 	movne.w	r0, #4294967295
 80069da:	f7ff fd0d 	bl	80063f8 <prvAddCurrentTaskToDelayedList>
	}
 80069de:	bd38      	pop	{r3, r4, r5, pc}
 80069e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e4:	f383 8811 	msr	BASEPRI, r3
 80069e8:	f3bf 8f6f 	isb	sy
 80069ec:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 80069f0:	e7fe      	b.n	80069f0 <vTaskPlaceOnEventListRestricted+0x34>
 80069f2:	bf00      	nop
 80069f4:	20002090 	.word	0x20002090

080069f8 <xTaskRemoveFromEventList>:
{
 80069f8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80069fa:	68c3      	ldr	r3, [r0, #12]
 80069fc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80069fe:	b32c      	cbz	r4, 8006a4c <xTaskRemoveFromEventList+0x54>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006a00:	f104 0518 	add.w	r5, r4, #24
 8006a04:	4628      	mov	r0, r5
 8006a06:	f7ff f853 	bl	8005ab0 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a0a:	4b17      	ldr	r3, [pc, #92]	; (8006a68 <xTaskRemoveFromEventList+0x70>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	bb33      	cbnz	r3, 8006a5e <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a10:	1d25      	adds	r5, r4, #4
 8006a12:	4628      	mov	r0, r5
 8006a14:	f7ff f84c 	bl	8005ab0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006a18:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006a1a:	4b14      	ldr	r3, [pc, #80]	; (8006a6c <xTaskRemoveFromEventList+0x74>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4298      	cmp	r0, r3
 8006a20:	bf84      	itt	hi
 8006a22:	4b12      	ldrhi	r3, [pc, #72]	; (8006a6c <xTaskRemoveFromEventList+0x74>)
 8006a24:	6018      	strhi	r0, [r3, #0]
 8006a26:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006a2a:	4629      	mov	r1, r5
 8006a2c:	4b10      	ldr	r3, [pc, #64]	; (8006a70 <xTaskRemoveFromEventList+0x78>)
 8006a2e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006a32:	f7ff f819 	bl	8005a68 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a36:	4b0f      	ldr	r3, [pc, #60]	; (8006a74 <xTaskRemoveFromEventList+0x7c>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3e:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8006a40:	bf83      	ittte	hi
 8006a42:	2001      	movhi	r0, #1
 8006a44:	4b0c      	ldrhi	r3, [pc, #48]	; (8006a78 <xTaskRemoveFromEventList+0x80>)
 8006a46:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8006a48:	2000      	movls	r0, #0
}
 8006a4a:	bd38      	pop	{r3, r4, r5, pc}
 8006a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a50:	f383 8811 	msr	BASEPRI, r3
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8006a5c:	e7fe      	b.n	8006a5c <xTaskRemoveFromEventList+0x64>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006a5e:	4629      	mov	r1, r5
 8006a60:	4806      	ldr	r0, [pc, #24]	; (8006a7c <xTaskRemoveFromEventList+0x84>)
 8006a62:	f7ff f801 	bl	8005a68 <vListInsertEnd>
 8006a66:	e7e6      	b.n	8006a36 <xTaskRemoveFromEventList+0x3e>
 8006a68:	20002508 	.word	0x20002508
 8006a6c:	20002510 	.word	0x20002510
 8006a70:	2000209c 	.word	0x2000209c
 8006a74:	20002090 	.word	0x20002090
 8006a78:	20002588 	.word	0x20002588
 8006a7c:	20002544 	.word	0x20002544

08006a80 <vTaskRemoveFromUnorderedEventList>:
{
 8006a80:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8006a82:	4b1c      	ldr	r3, [pc, #112]	; (8006af4 <vTaskRemoveFromUnorderedEventList+0x74>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	b943      	cbnz	r3, 8006a9a <vTaskRemoveFromUnorderedEventList+0x1a>
 8006a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a8c:	f383 8811 	msr	BASEPRI, r3
 8006a90:	f3bf 8f6f 	isb	sy
 8006a94:	f3bf 8f4f 	dsb	sy
 8006a98:	e7fe      	b.n	8006a98 <vTaskRemoveFromUnorderedEventList+0x18>
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006a9a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8006a9e:	6001      	str	r1, [r0, #0]
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8006aa0:	68c4      	ldr	r4, [r0, #12]
	configASSERT( pxUnblockedTCB );
 8006aa2:	b1f4      	cbz	r4, 8006ae2 <vTaskRemoveFromUnorderedEventList+0x62>
	( void ) uxListRemove( pxEventListItem );
 8006aa4:	f7ff f804 	bl	8005ab0 <uxListRemove>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006aa8:	1d25      	adds	r5, r4, #4
 8006aaa:	4628      	mov	r0, r5
 8006aac:	f7ff f800 	bl	8005ab0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006ab0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006ab2:	4b11      	ldr	r3, [pc, #68]	; (8006af8 <vTaskRemoveFromUnorderedEventList+0x78>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4298      	cmp	r0, r3
 8006ab8:	bf84      	itt	hi
 8006aba:	4b0f      	ldrhi	r3, [pc, #60]	; (8006af8 <vTaskRemoveFromUnorderedEventList+0x78>)
 8006abc:	6018      	strhi	r0, [r3, #0]
 8006abe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006ac2:	4629      	mov	r1, r5
 8006ac4:	4b0d      	ldr	r3, [pc, #52]	; (8006afc <vTaskRemoveFromUnorderedEventList+0x7c>)
 8006ac6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006aca:	f7fe ffcd 	bl	8005a68 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ace:	4b0c      	ldr	r3, [pc, #48]	; (8006b00 <vTaskRemoveFromUnorderedEventList+0x80>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d902      	bls.n	8006ae0 <vTaskRemoveFromUnorderedEventList+0x60>
		xYieldPending = pdTRUE;
 8006ada:	4b0a      	ldr	r3, [pc, #40]	; (8006b04 <vTaskRemoveFromUnorderedEventList+0x84>)
 8006adc:	2201      	movs	r2, #1
 8006ade:	601a      	str	r2, [r3, #0]
}
 8006ae0:	bd38      	pop	{r3, r4, r5, pc}
 8006ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae6:	f383 8811 	msr	BASEPRI, r3
 8006aea:	f3bf 8f6f 	isb	sy
 8006aee:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8006af2:	e7fe      	b.n	8006af2 <vTaskRemoveFromUnorderedEventList+0x72>
 8006af4:	20002508 	.word	0x20002508
 8006af8:	20002510 	.word	0x20002510
 8006afc:	2000209c 	.word	0x2000209c
 8006b00:	20002090 	.word	0x20002090
 8006b04:	20002588 	.word	0x20002588

08006b08 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b08:	4b03      	ldr	r3, [pc, #12]	; (8006b18 <vTaskInternalSetTimeOutState+0x10>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006b0e:	4b03      	ldr	r3, [pc, #12]	; (8006b1c <vTaskInternalSetTimeOutState+0x14>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	6043      	str	r3, [r0, #4]
}
 8006b14:	4770      	bx	lr
 8006b16:	bf00      	nop
 8006b18:	20002540 	.word	0x20002540
 8006b1c:	20002584 	.word	0x20002584

08006b20 <xTaskCheckForTimeOut>:
{
 8006b20:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
 8006b22:	b1d0      	cbz	r0, 8006b5a <xTaskCheckForTimeOut+0x3a>
 8006b24:	460c      	mov	r4, r1
 8006b26:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8006b28:	b301      	cbz	r1, 8006b6c <xTaskCheckForTimeOut+0x4c>
	taskENTER_CRITICAL();
 8006b2a:	f000 fb13 	bl	8007154 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8006b2e:	4b1b      	ldr	r3, [pc, #108]	; (8006b9c <xTaskCheckForTimeOut+0x7c>)
 8006b30:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8006b32:	6823      	ldr	r3, [r4, #0]
 8006b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b38:	d029      	beq.n	8006b8e <xTaskCheckForTimeOut+0x6e>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b3a:	6869      	ldr	r1, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b3c:	4818      	ldr	r0, [pc, #96]	; (8006ba0 <xTaskCheckForTimeOut+0x80>)
 8006b3e:	6800      	ldr	r0, [r0, #0]
 8006b40:	f8d5 c000 	ldr.w	ip, [r5]
 8006b44:	4584      	cmp	ip, r0
 8006b46:	d001      	beq.n	8006b4c <xTaskCheckForTimeOut+0x2c>
 8006b48:	4291      	cmp	r1, r2
 8006b4a:	d925      	bls.n	8006b98 <xTaskCheckForTimeOut+0x78>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b4c:	1a50      	subs	r0, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006b4e:	4283      	cmp	r3, r0
 8006b50:	d815      	bhi.n	8006b7e <xTaskCheckForTimeOut+0x5e>
			*pxTicksToWait = 0;
 8006b52:	2300      	movs	r3, #0
 8006b54:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8006b56:	2401      	movs	r4, #1
 8006b58:	e01a      	b.n	8006b90 <xTaskCheckForTimeOut+0x70>
 8006b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5e:	f383 8811 	msr	BASEPRI, r3
 8006b62:	f3bf 8f6f 	isb	sy
 8006b66:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8006b6a:	e7fe      	b.n	8006b6a <xTaskCheckForTimeOut+0x4a>
 8006b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b70:	f383 8811 	msr	BASEPRI, r3
 8006b74:	f3bf 8f6f 	isb	sy
 8006b78:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8006b7c:	e7fe      	b.n	8006b7c <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait -= xElapsedTime;
 8006b7e:	1a9b      	subs	r3, r3, r2
 8006b80:	440b      	add	r3, r1
 8006b82:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006b84:	4628      	mov	r0, r5
 8006b86:	f7ff ffbf 	bl	8006b08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006b8a:	2400      	movs	r4, #0
 8006b8c:	e000      	b.n	8006b90 <xTaskCheckForTimeOut+0x70>
				xReturn = pdFALSE;
 8006b8e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006b90:	f000 fb02 	bl	8007198 <vPortExitCritical>
}
 8006b94:	4620      	mov	r0, r4
 8006b96:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 8006b98:	2401      	movs	r4, #1
 8006b9a:	e7f9      	b.n	8006b90 <xTaskCheckForTimeOut+0x70>
 8006b9c:	20002584 	.word	0x20002584
 8006ba0:	20002540 	.word	0x20002540

08006ba4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8006ba4:	4b01      	ldr	r3, [pc, #4]	; (8006bac <vTaskMissedYield+0x8>)
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	601a      	str	r2, [r3, #0]
}
 8006baa:	4770      	bx	lr
 8006bac:	20002588 	.word	0x20002588

08006bb0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8006bb0:	4b05      	ldr	r3, [pc, #20]	; (8006bc8 <xTaskGetSchedulerState+0x18>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	b133      	cbz	r3, 8006bc4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bb6:	4b05      	ldr	r3, [pc, #20]	; (8006bcc <xTaskGetSchedulerState+0x1c>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	bf0c      	ite	eq
 8006bbe:	2002      	moveq	r0, #2
 8006bc0:	2000      	movne	r0, #0
 8006bc2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006bc4:	2001      	movs	r0, #1
	}
 8006bc6:	4770      	bx	lr
 8006bc8:	20002558 	.word	0x20002558
 8006bcc:	20002508 	.word	0x20002508

08006bd0 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8006bd0:	2800      	cmp	r0, #0
 8006bd2:	d03b      	beq.n	8006c4c <xTaskPriorityDisinherit+0x7c>
	{
 8006bd4:	b538      	push	{r3, r4, r5, lr}
 8006bd6:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8006bd8:	4b1e      	ldr	r3, [pc, #120]	; (8006c54 <xTaskPriorityDisinherit+0x84>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4283      	cmp	r3, r0
 8006bde:	d008      	beq.n	8006bf2 <xTaskPriorityDisinherit+0x22>
 8006be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be4:	f383 8811 	msr	BASEPRI, r3
 8006be8:	f3bf 8f6f 	isb	sy
 8006bec:	f3bf 8f4f 	dsb	sy
 8006bf0:	e7fe      	b.n	8006bf0 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8006bf2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006bf4:	b943      	cbnz	r3, 8006c08 <xTaskPriorityDisinherit+0x38>
 8006bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfa:	f383 8811 	msr	BASEPRI, r3
 8006bfe:	f3bf 8f6f 	isb	sy
 8006c02:	f3bf 8f4f 	dsb	sy
 8006c06:	e7fe      	b.n	8006c06 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8006c08:	3b01      	subs	r3, #1
 8006c0a:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006c0c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8006c0e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8006c10:	4291      	cmp	r1, r2
 8006c12:	d01d      	beq.n	8006c50 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006c14:	b10b      	cbz	r3, 8006c1a <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8006c16:	2000      	movs	r0, #0
	}
 8006c18:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c1a:	1d05      	adds	r5, r0, #4
 8006c1c:	4628      	mov	r0, r5
 8006c1e:	f7fe ff47 	bl	8005ab0 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006c22:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006c24:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c26:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 8006c2a:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8006c2c:	4b0a      	ldr	r3, [pc, #40]	; (8006c58 <xTaskPriorityDisinherit+0x88>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4298      	cmp	r0, r3
 8006c32:	bf84      	itt	hi
 8006c34:	4b08      	ldrhi	r3, [pc, #32]	; (8006c58 <xTaskPriorityDisinherit+0x88>)
 8006c36:	6018      	strhi	r0, [r3, #0]
 8006c38:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006c3c:	4629      	mov	r1, r5
 8006c3e:	4b07      	ldr	r3, [pc, #28]	; (8006c5c <xTaskPriorityDisinherit+0x8c>)
 8006c40:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006c44:	f7fe ff10 	bl	8005a68 <vListInsertEnd>
					xReturn = pdTRUE;
 8006c48:	2001      	movs	r0, #1
 8006c4a:	e7e5      	b.n	8006c18 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8006c4c:	2000      	movs	r0, #0
	}
 8006c4e:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8006c50:	2000      	movs	r0, #0
 8006c52:	e7e1      	b.n	8006c18 <xTaskPriorityDisinherit+0x48>
 8006c54:	20002090 	.word	0x20002090
 8006c58:	20002510 	.word	0x20002510
 8006c5c:	2000209c 	.word	0x2000209c

08006c60 <uxTaskResetEventItemValue>:
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8006c60:	4b04      	ldr	r3, [pc, #16]	; (8006c74 <uxTaskResetEventItemValue+0x14>)
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	6990      	ldr	r0, [r2, #24]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c66:	6819      	ldr	r1, [r3, #0]
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8006c6c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006c70:	6193      	str	r3, [r2, #24]
}
 8006c72:	4770      	bx	lr
 8006c74:	20002090 	.word	0x20002090

08006c78 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006c78:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006c7a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c7c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006c7e:	4291      	cmp	r1, r2
 8006c80:	d80c      	bhi.n	8006c9c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c82:	1ad2      	subs	r2, r2, r3
 8006c84:	6983      	ldr	r3, [r0, #24]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d301      	bcc.n	8006c8e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006c8a:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8006c8c:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006c8e:	1d01      	adds	r1, r0, #4
 8006c90:	4b09      	ldr	r3, [pc, #36]	; (8006cb8 <prvInsertTimerInActiveList+0x40>)
 8006c92:	6818      	ldr	r0, [r3, #0]
 8006c94:	f7fe fef3 	bl	8005a7e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8006c98:	2000      	movs	r0, #0
 8006c9a:	e7f7      	b.n	8006c8c <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d201      	bcs.n	8006ca4 <prvInsertTimerInActiveList+0x2c>
 8006ca0:	4299      	cmp	r1, r3
 8006ca2:	d206      	bcs.n	8006cb2 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ca4:	1d01      	adds	r1, r0, #4
 8006ca6:	4b05      	ldr	r3, [pc, #20]	; (8006cbc <prvInsertTimerInActiveList+0x44>)
 8006ca8:	6818      	ldr	r0, [r3, #0]
 8006caa:	f7fe fee8 	bl	8005a7e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8006cae:	2000      	movs	r0, #0
 8006cb0:	e7ec      	b.n	8006c8c <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 8006cb2:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8006cb4:	e7ea      	b.n	8006c8c <prvInsertTimerInActiveList+0x14>
 8006cb6:	bf00      	nop
 8006cb8:	20002590 	.word	0x20002590
 8006cbc:	2000258c 	.word	0x2000258c

08006cc0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006cc0:	b530      	push	{r4, r5, lr}
 8006cc2:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006cc4:	f000 fa46 	bl	8007154 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006cc8:	4b11      	ldr	r3, [pc, #68]	; (8006d10 <prvCheckForValidListAndQueue+0x50>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	b11b      	cbz	r3, 8006cd6 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006cce:	f000 fa63 	bl	8007198 <vPortExitCritical>
}
 8006cd2:	b003      	add	sp, #12
 8006cd4:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 8006cd6:	4d0f      	ldr	r5, [pc, #60]	; (8006d14 <prvCheckForValidListAndQueue+0x54>)
 8006cd8:	4628      	mov	r0, r5
 8006cda:	f7fe feb7 	bl	8005a4c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006cde:	4c0e      	ldr	r4, [pc, #56]	; (8006d18 <prvCheckForValidListAndQueue+0x58>)
 8006ce0:	4620      	mov	r0, r4
 8006ce2:	f7fe feb3 	bl	8005a4c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006ce6:	4b0d      	ldr	r3, [pc, #52]	; (8006d1c <prvCheckForValidListAndQueue+0x5c>)
 8006ce8:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006cea:	4b0d      	ldr	r3, [pc, #52]	; (8006d20 <prvCheckForValidListAndQueue+0x60>)
 8006cec:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006cee:	2300      	movs	r3, #0
 8006cf0:	9300      	str	r3, [sp, #0]
 8006cf2:	4b0c      	ldr	r3, [pc, #48]	; (8006d24 <prvCheckForValidListAndQueue+0x64>)
 8006cf4:	4a0c      	ldr	r2, [pc, #48]	; (8006d28 <prvCheckForValidListAndQueue+0x68>)
 8006cf6:	2110      	movs	r1, #16
 8006cf8:	200a      	movs	r0, #10
 8006cfa:	f7fe ffc0 	bl	8005c7e <xQueueGenericCreateStatic>
 8006cfe:	4b04      	ldr	r3, [pc, #16]	; (8006d10 <prvCheckForValidListAndQueue+0x50>)
 8006d00:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 8006d02:	2800      	cmp	r0, #0
 8006d04:	d0e3      	beq.n	8006cce <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006d06:	4909      	ldr	r1, [pc, #36]	; (8006d2c <prvCheckForValidListAndQueue+0x6c>)
 8006d08:	f7ff f9f4 	bl	80060f4 <vQueueAddToRegistry>
 8006d0c:	e7df      	b.n	8006cce <prvCheckForValidListAndQueue+0xe>
 8006d0e:	bf00      	nop
 8006d10:	200026b0 	.word	0x200026b0
 8006d14:	20002634 	.word	0x20002634
 8006d18:	20002648 	.word	0x20002648
 8006d1c:	2000258c 	.word	0x2000258c
 8006d20:	20002590 	.word	0x20002590
 8006d24:	20002660 	.word	0x20002660
 8006d28:	20002594 	.word	0x20002594
 8006d2c:	08007bc0 	.word	0x08007bc0

08006d30 <xTimerCreateTimerTask>:
{
 8006d30:	b510      	push	{r4, lr}
 8006d32:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8006d34:	f7ff ffc4 	bl	8006cc0 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8006d38:	4b12      	ldr	r3, [pc, #72]	; (8006d84 <xTimerCreateTimerTask+0x54>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	b1cb      	cbz	r3, 8006d72 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006d3e:	2400      	movs	r4, #0
 8006d40:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006d42:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006d44:	aa07      	add	r2, sp, #28
 8006d46:	a906      	add	r1, sp, #24
 8006d48:	a805      	add	r0, sp, #20
 8006d4a:	f7fe fd5d 	bl	8005808 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006d4e:	9b05      	ldr	r3, [sp, #20]
 8006d50:	9302      	str	r3, [sp, #8]
 8006d52:	9b06      	ldr	r3, [sp, #24]
 8006d54:	9301      	str	r3, [sp, #4]
 8006d56:	2302      	movs	r3, #2
 8006d58:	9300      	str	r3, [sp, #0]
 8006d5a:	4623      	mov	r3, r4
 8006d5c:	9a07      	ldr	r2, [sp, #28]
 8006d5e:	490a      	ldr	r1, [pc, #40]	; (8006d88 <xTimerCreateTimerTask+0x58>)
 8006d60:	480a      	ldr	r0, [pc, #40]	; (8006d8c <xTimerCreateTimerTask+0x5c>)
 8006d62:	f7ff fb87 	bl	8006474 <xTaskCreateStatic>
 8006d66:	4b0a      	ldr	r3, [pc, #40]	; (8006d90 <xTimerCreateTimerTask+0x60>)
 8006d68:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8006d6a:	b110      	cbz	r0, 8006d72 <xTimerCreateTimerTask+0x42>
}
 8006d6c:	2001      	movs	r0, #1
 8006d6e:	b008      	add	sp, #32
 8006d70:	bd10      	pop	{r4, pc}
 8006d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d76:	f383 8811 	msr	BASEPRI, r3
 8006d7a:	f3bf 8f6f 	isb	sy
 8006d7e:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8006d82:	e7fe      	b.n	8006d82 <xTimerCreateTimerTask+0x52>
 8006d84:	200026b0 	.word	0x200026b0
 8006d88:	08007bc8 	.word	0x08007bc8
 8006d8c:	08006ea1 	.word	0x08006ea1
 8006d90:	200026b4 	.word	0x200026b4

08006d94 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8006d94:	b1d8      	cbz	r0, 8006dce <xTimerGenericCommand+0x3a>
 8006d96:	469c      	mov	ip, r3
 8006d98:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 8006d9a:	4815      	ldr	r0, [pc, #84]	; (8006df0 <xTimerGenericCommand+0x5c>)
 8006d9c:	6800      	ldr	r0, [r0, #0]
 8006d9e:	b328      	cbz	r0, 8006dec <xTimerGenericCommand+0x58>
{
 8006da0:	b500      	push	{lr}
 8006da2:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8006da4:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006da6:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006da8:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006daa:	2905      	cmp	r1, #5
 8006dac:	dc18      	bgt.n	8006de0 <xTimerGenericCommand+0x4c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006dae:	f7ff feff 	bl	8006bb0 <xTaskGetSchedulerState>
 8006db2:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006db4:	f04f 0300 	mov.w	r3, #0
 8006db8:	bf0c      	ite	eq
 8006dba:	9a06      	ldreq	r2, [sp, #24]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006dbc:	461a      	movne	r2, r3
 8006dbe:	4669      	mov	r1, sp
 8006dc0:	480b      	ldr	r0, [pc, #44]	; (8006df0 <xTimerGenericCommand+0x5c>)
 8006dc2:	6800      	ldr	r0, [r0, #0]
 8006dc4:	f7fe ffb1 	bl	8005d2a <xQueueGenericSend>
}
 8006dc8:	b005      	add	sp, #20
 8006dca:	f85d fb04 	ldr.w	pc, [sp], #4
 8006dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd2:	f383 8811 	msr	BASEPRI, r3
 8006dd6:	f3bf 8f6f 	isb	sy
 8006dda:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8006dde:	e7fe      	b.n	8006dde <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006de0:	2300      	movs	r3, #0
 8006de2:	4662      	mov	r2, ip
 8006de4:	4669      	mov	r1, sp
 8006de6:	f7ff f86c 	bl	8005ec2 <xQueueGenericSendFromISR>
 8006dea:	e7ed      	b.n	8006dc8 <xTimerGenericCommand+0x34>
BaseType_t xReturn = pdFAIL;
 8006dec:	2000      	movs	r0, #0
}
 8006dee:	4770      	bx	lr
 8006df0:	200026b0 	.word	0x200026b0

08006df4 <prvSampleTimeNow>:
{
 8006df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006df8:	b082      	sub	sp, #8
 8006dfa:	4682      	mov	sl, r0
	xTimeNow = xTaskGetTickCount();
 8006dfc:	f7ff fbfc 	bl	80065f8 <xTaskGetTickCount>
 8006e00:	4606      	mov	r6, r0
	if( xTimeNow < xLastTime )
 8006e02:	4b24      	ldr	r3, [pc, #144]	; (8006e94 <prvSampleTimeNow+0xa0>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4283      	cmp	r3, r0
 8006e08:	d808      	bhi.n	8006e1c <prvSampleTimeNow+0x28>
		*pxTimerListsWereSwitched = pdFALSE;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	f8ca 3000 	str.w	r3, [sl]
	xLastTime = xTimeNow;
 8006e10:	4b20      	ldr	r3, [pc, #128]	; (8006e94 <prvSampleTimeNow+0xa0>)
 8006e12:	601e      	str	r6, [r3, #0]
}
 8006e14:	4630      	mov	r0, r6
 8006e16:	b002      	add	sp, #8
 8006e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e1c:	4d1e      	ldr	r5, [pc, #120]	; (8006e98 <prvSampleTimeNow+0xa4>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e1e:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e22:	682b      	ldr	r3, [r5, #0]
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	b35a      	cbz	r2, 8006e80 <prvSampleTimeNow+0x8c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	681f      	ldr	r7, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e2c:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e2e:	f104 0904 	add.w	r9, r4, #4
 8006e32:	4648      	mov	r0, r9
 8006e34:	f7fe fe3c 	bl	8005ab0 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006e3e:	69e3      	ldr	r3, [r4, #28]
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d1ee      	bne.n	8006e22 <prvSampleTimeNow+0x2e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006e44:	69a3      	ldr	r3, [r4, #24]
 8006e46:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 8006e48:	429f      	cmp	r7, r3
 8006e4a:	d206      	bcs.n	8006e5a <prvSampleTimeNow+0x66>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006e4c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e4e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e50:	4649      	mov	r1, r9
 8006e52:	6828      	ldr	r0, [r5, #0]
 8006e54:	f7fe fe13 	bl	8005a7e <vListInsert>
 8006e58:	e7e3      	b.n	8006e22 <prvSampleTimeNow+0x2e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e5a:	f8cd 8000 	str.w	r8, [sp]
 8006e5e:	4643      	mov	r3, r8
 8006e60:	463a      	mov	r2, r7
 8006e62:	4641      	mov	r1, r8
 8006e64:	4620      	mov	r0, r4
 8006e66:	f7ff ff95 	bl	8006d94 <xTimerGenericCommand>
				configASSERT( xResult );
 8006e6a:	2800      	cmp	r0, #0
 8006e6c:	d1d9      	bne.n	8006e22 <prvSampleTimeNow+0x2e>
 8006e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e72:	f383 8811 	msr	BASEPRI, r3
 8006e76:	f3bf 8f6f 	isb	sy
 8006e7a:	f3bf 8f4f 	dsb	sy
 8006e7e:	e7fe      	b.n	8006e7e <prvSampleTimeNow+0x8a>
	pxCurrentTimerList = pxOverflowTimerList;
 8006e80:	4a06      	ldr	r2, [pc, #24]	; (8006e9c <prvSampleTimeNow+0xa8>)
 8006e82:	6810      	ldr	r0, [r2, #0]
 8006e84:	4904      	ldr	r1, [pc, #16]	; (8006e98 <prvSampleTimeNow+0xa4>)
 8006e86:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8006e88:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	f8ca 3000 	str.w	r3, [sl]
 8006e90:	e7be      	b.n	8006e10 <prvSampleTimeNow+0x1c>
 8006e92:	bf00      	nop
 8006e94:	2000265c 	.word	0x2000265c
 8006e98:	2000258c 	.word	0x2000258c
 8006e9c:	20002590 	.word	0x20002590

08006ea0 <prvTimerTask>:
{
 8006ea0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ea4:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006ea6:	4e74      	ldr	r6, [pc, #464]	; (8007078 <prvTimerTask+0x1d8>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006ea8:	4d74      	ldr	r5, [pc, #464]	; (800707c <prvTimerTask+0x1dc>)
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006eaa:	4f75      	ldr	r7, [pc, #468]	; (8007080 <prvTimerTask+0x1e0>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006eac:	6833      	ldr	r3, [r6, #0]
 8006eae:	f8d3 8000 	ldr.w	r8, [r3]
	if( *pxListWasEmpty == pdFALSE )
 8006eb2:	f1b8 0f00 	cmp.w	r8, #0
 8006eb6:	d00f      	beq.n	8006ed8 <prvTimerTask+0x38>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 8006ebe:	f7ff fb93 	bl	80065e8 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ec2:	a804      	add	r0, sp, #16
 8006ec4:	f7ff ff96 	bl	8006df4 <prvSampleTimeNow>
 8006ec8:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8006eca:	9b04      	ldr	r3, [sp, #16]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d154      	bne.n	8006f7a <prvTimerTask+0xda>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006ed0:	4580      	cmp	r8, r0
 8006ed2:	d923      	bls.n	8006f1c <prvTimerTask+0x7c>
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	e00d      	b.n	8006ef4 <prvTimerTask+0x54>
	vTaskSuspendAll();
 8006ed8:	f7ff fb86 	bl	80065e8 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006edc:	a804      	add	r0, sp, #16
 8006ede:	f7ff ff89 	bl	8006df4 <prvSampleTimeNow>
 8006ee2:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8006ee4:	9b04      	ldr	r3, [sp, #16]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d147      	bne.n	8006f7a <prvTimerTask+0xda>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	fab2 f282 	clz	r2, r2
 8006ef2:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006ef4:	eba8 0104 	sub.w	r1, r8, r4
 8006ef8:	6828      	ldr	r0, [r5, #0]
 8006efa:	f7ff f90f 	bl	800611c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006efe:	f7ff fc1b 	bl	8006738 <xTaskResumeAll>
 8006f02:	2800      	cmp	r0, #0
 8006f04:	d13b      	bne.n	8006f7e <prvTimerTask+0xde>
					portYIELD_WITHIN_API();
 8006f06:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006f0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f0e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006f12:	f3bf 8f4f 	dsb	sy
 8006f16:	f3bf 8f6f 	isb	sy
 8006f1a:	e030      	b.n	8006f7e <prvTimerTask+0xde>
				( void ) xTaskResumeAll();
 8006f1c:	f7ff fc0c 	bl	8006738 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f20:	6833      	ldr	r3, [r6, #0]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	f8d3 900c 	ldr.w	r9, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f28:	f109 0004 	add.w	r0, r9, #4
 8006f2c:	f7fe fdc0 	bl	8005ab0 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006f30:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d004      	beq.n	8006f42 <prvTimerTask+0xa2>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f38:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8006f3c:	4648      	mov	r0, r9
 8006f3e:	4798      	blx	r3
}
 8006f40:	e01d      	b.n	8006f7e <prvTimerTask+0xde>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006f42:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8006f46:	4643      	mov	r3, r8
 8006f48:	4622      	mov	r2, r4
 8006f4a:	4441      	add	r1, r8
 8006f4c:	4648      	mov	r0, r9
 8006f4e:	f7ff fe93 	bl	8006c78 <prvInsertTimerInActiveList>
 8006f52:	2800      	cmp	r0, #0
 8006f54:	d0f0      	beq.n	8006f38 <prvTimerTask+0x98>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006f56:	2100      	movs	r1, #0
 8006f58:	9100      	str	r1, [sp, #0]
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	4642      	mov	r2, r8
 8006f5e:	4648      	mov	r0, r9
 8006f60:	f7ff ff18 	bl	8006d94 <xTimerGenericCommand>
			configASSERT( xResult );
 8006f64:	2800      	cmp	r0, #0
 8006f66:	d1e7      	bne.n	8006f38 <prvTimerTask+0x98>
 8006f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6c:	f383 8811 	msr	BASEPRI, r3
 8006f70:	f3bf 8f6f 	isb	sy
 8006f74:	f3bf 8f4f 	dsb	sy
 8006f78:	e7fe      	b.n	8006f78 <prvTimerTask+0xd8>
			( void ) xTaskResumeAll();
 8006f7a:	f7ff fbdd 	bl	8006738 <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f7e:	2400      	movs	r4, #0
}
 8006f80:	e006      	b.n	8006f90 <prvTimerTask+0xf0>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006f82:	9907      	ldr	r1, [sp, #28]
 8006f84:	9806      	ldr	r0, [sp, #24]
 8006f86:	9b05      	ldr	r3, [sp, #20]
 8006f88:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006f8a:	9b04      	ldr	r3, [sp, #16]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	da09      	bge.n	8006fa4 <prvTimerTask+0x104>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f90:	4622      	mov	r2, r4
 8006f92:	a904      	add	r1, sp, #16
 8006f94:	6828      	ldr	r0, [r5, #0]
 8006f96:	f7fe fffa 	bl	8005f8e <xQueueReceive>
 8006f9a:	2800      	cmp	r0, #0
 8006f9c:	d086      	beq.n	8006eac <prvTimerTask+0xc>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006f9e:	9b04      	ldr	r3, [sp, #16]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	dbee      	blt.n	8006f82 <prvTimerTask+0xe2>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006fa4:	f8dd 8018 	ldr.w	r8, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006fa8:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8006fac:	b11b      	cbz	r3, 8006fb6 <prvTimerTask+0x116>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006fae:	f108 0004 	add.w	r0, r8, #4
 8006fb2:	f7fe fd7d 	bl	8005ab0 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006fb6:	a803      	add	r0, sp, #12
 8006fb8:	f7ff ff1c 	bl	8006df4 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8006fbc:	9b04      	ldr	r3, [sp, #16]
 8006fbe:	2b09      	cmp	r3, #9
 8006fc0:	d8e6      	bhi.n	8006f90 <prvTimerTask+0xf0>
 8006fc2:	a201      	add	r2, pc, #4	; (adr r2, 8006fc8 <prvTimerTask+0x128>)
 8006fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc8:	08006ff1 	.word	0x08006ff1
 8006fcc:	08006ff1 	.word	0x08006ff1
 8006fd0:	08006ff1 	.word	0x08006ff1
 8006fd4:	08006f91 	.word	0x08006f91
 8006fd8:	0800703f 	.word	0x0800703f
 8006fdc:	08007067 	.word	0x08007067
 8006fe0:	08006ff1 	.word	0x08006ff1
 8006fe4:	08006ff1 	.word	0x08006ff1
 8006fe8:	08006f91 	.word	0x08006f91
 8006fec:	0800703f 	.word	0x0800703f
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006ff0:	9b05      	ldr	r3, [sp, #20]
 8006ff2:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	4419      	add	r1, r3
 8006ffa:	4640      	mov	r0, r8
 8006ffc:	f7ff fe3c 	bl	8006c78 <prvInsertTimerInActiveList>
 8007000:	2800      	cmp	r0, #0
 8007002:	d0c5      	beq.n	8006f90 <prvTimerTask+0xf0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007004:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8007008:	4640      	mov	r0, r8
 800700a:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800700c:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8007010:	2b01      	cmp	r3, #1
 8007012:	d1bd      	bne.n	8006f90 <prvTimerTask+0xf0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007014:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8007018:	9400      	str	r4, [sp, #0]
 800701a:	4623      	mov	r3, r4
 800701c:	9905      	ldr	r1, [sp, #20]
 800701e:	440a      	add	r2, r1
 8007020:	4621      	mov	r1, r4
 8007022:	4640      	mov	r0, r8
 8007024:	f7ff feb6 	bl	8006d94 <xTimerGenericCommand>
							configASSERT( xResult );
 8007028:	2800      	cmp	r0, #0
 800702a:	d1b1      	bne.n	8006f90 <prvTimerTask+0xf0>
 800702c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007030:	f383 8811 	msr	BASEPRI, r3
 8007034:	f3bf 8f6f 	isb	sy
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	e7fe      	b.n	800703c <prvTimerTask+0x19c>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800703e:	9905      	ldr	r1, [sp, #20]
 8007040:	f8c8 1018 	str.w	r1, [r8, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007044:	b131      	cbz	r1, 8007054 <prvTimerTask+0x1b4>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007046:	4603      	mov	r3, r0
 8007048:	4602      	mov	r2, r0
 800704a:	4401      	add	r1, r0
 800704c:	4640      	mov	r0, r8
 800704e:	f7ff fe13 	bl	8006c78 <prvInsertTimerInActiveList>
					break;
 8007052:	e79d      	b.n	8006f90 <prvTimerTask+0xf0>
 8007054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007058:	f383 8811 	msr	BASEPRI, r3
 800705c:	f3bf 8f6f 	isb	sy
 8007060:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007064:	e7fe      	b.n	8007064 <prvTimerTask+0x1c4>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007066:	f898 302c 	ldrb.w	r3, [r8, #44]	; 0x2c
 800706a:	2b00      	cmp	r3, #0
 800706c:	d190      	bne.n	8006f90 <prvTimerTask+0xf0>
							vPortFree( pxTimer );
 800706e:	4640      	mov	r0, r8
 8007070:	f000 fa50 	bl	8007514 <vPortFree>
 8007074:	e78c      	b.n	8006f90 <prvTimerTask+0xf0>
 8007076:	bf00      	nop
 8007078:	2000258c 	.word	0x2000258c
 800707c:	200026b0 	.word	0x200026b0
 8007080:	20002590 	.word	0x20002590

08007084 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007084:	b510      	push	{r4, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	4614      	mov	r4, r2
 800708a:	461a      	mov	r2, r3
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800708c:	f06f 0301 	mvn.w	r3, #1
 8007090:	9300      	str	r3, [sp, #0]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8007092:	9001      	str	r0, [sp, #4]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8007094:	9102      	str	r1, [sp, #8]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8007096:	9403      	str	r4, [sp, #12]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007098:	2300      	movs	r3, #0
 800709a:	4669      	mov	r1, sp
 800709c:	4802      	ldr	r0, [pc, #8]	; (80070a8 <xTimerPendFunctionCallFromISR+0x24>)
 800709e:	6800      	ldr	r0, [r0, #0]
 80070a0:	f7fe ff0f 	bl	8005ec2 <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
 80070a4:	b004      	add	sp, #16
 80070a6:	bd10      	pop	{r4, pc}
 80070a8:	200026b0 	.word	0x200026b0

080070ac <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80070ac:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 80070ae:	2300      	movs	r3, #0
 80070b0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80070b2:	4b0d      	ldr	r3, [pc, #52]	; (80070e8 <prvTaskExitError+0x3c>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ba:	d008      	beq.n	80070ce <prvTaskExitError+0x22>
 80070bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c0:	f383 8811 	msr	BASEPRI, r3
 80070c4:	f3bf 8f6f 	isb	sy
 80070c8:	f3bf 8f4f 	dsb	sy
 80070cc:	e7fe      	b.n	80070cc <prvTaskExitError+0x20>
 80070ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d2:	f383 8811 	msr	BASEPRI, r3
 80070d6:	f3bf 8f6f 	isb	sy
 80070da:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80070de:	9b01      	ldr	r3, [sp, #4]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d0fc      	beq.n	80070de <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80070e4:	b002      	add	sp, #8
 80070e6:	4770      	bx	lr
 80070e8:	20000098 	.word	0x20000098

080070ec <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80070ec:	4806      	ldr	r0, [pc, #24]	; (8007108 <prvPortStartFirstTask+0x1c>)
 80070ee:	6800      	ldr	r0, [r0, #0]
 80070f0:	6800      	ldr	r0, [r0, #0]
 80070f2:	f380 8808 	msr	MSP, r0
 80070f6:	b662      	cpsie	i
 80070f8:	b661      	cpsie	f
 80070fa:	f3bf 8f4f 	dsb	sy
 80070fe:	f3bf 8f6f 	isb	sy
 8007102:	df00      	svc	0
 8007104:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007106:	0000      	.short	0x0000
 8007108:	e000ed08 	.word	0xe000ed08

0800710c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800710c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007110:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007114:	f021 0101 	bic.w	r1, r1, #1
 8007118:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800711c:	4b03      	ldr	r3, [pc, #12]	; (800712c <pxPortInitialiseStack+0x20>)
 800711e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007122:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8007126:	3840      	subs	r0, #64	; 0x40
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop
 800712c:	080070ad 	.word	0x080070ad

08007130 <SVC_Handler>:
	__asm volatile (
 8007130:	4b07      	ldr	r3, [pc, #28]	; (8007150 <pxCurrentTCBConst2>)
 8007132:	6819      	ldr	r1, [r3, #0]
 8007134:	6808      	ldr	r0, [r1, #0]
 8007136:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800713a:	f380 8809 	msr	PSP, r0
 800713e:	f3bf 8f6f 	isb	sy
 8007142:	f04f 0000 	mov.w	r0, #0
 8007146:	f380 8811 	msr	BASEPRI, r0
 800714a:	f04e 0e0d 	orr.w	lr, lr, #13
 800714e:	4770      	bx	lr

08007150 <pxCurrentTCBConst2>:
 8007150:	20002090 	.word	0x20002090

08007154 <vPortEnterCritical>:
 8007154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007158:	f383 8811 	msr	BASEPRI, r3
 800715c:	f3bf 8f6f 	isb	sy
 8007160:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007164:	4a0b      	ldr	r2, [pc, #44]	; (8007194 <vPortEnterCritical+0x40>)
 8007166:	6813      	ldr	r3, [r2, #0]
 8007168:	3301      	adds	r3, #1
 800716a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800716c:	2b01      	cmp	r3, #1
 800716e:	d000      	beq.n	8007172 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8007170:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007172:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007176:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800717a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800717e:	d0f7      	beq.n	8007170 <vPortEnterCritical+0x1c>
 8007180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007184:	f383 8811 	msr	BASEPRI, r3
 8007188:	f3bf 8f6f 	isb	sy
 800718c:	f3bf 8f4f 	dsb	sy
 8007190:	e7fe      	b.n	8007190 <vPortEnterCritical+0x3c>
 8007192:	bf00      	nop
 8007194:	20000098 	.word	0x20000098

08007198 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8007198:	4b09      	ldr	r3, [pc, #36]	; (80071c0 <vPortExitCritical+0x28>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	b943      	cbnz	r3, 80071b0 <vPortExitCritical+0x18>
 800719e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a2:	f383 8811 	msr	BASEPRI, r3
 80071a6:	f3bf 8f6f 	isb	sy
 80071aa:	f3bf 8f4f 	dsb	sy
 80071ae:	e7fe      	b.n	80071ae <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80071b0:	3b01      	subs	r3, #1
 80071b2:	4a03      	ldr	r2, [pc, #12]	; (80071c0 <vPortExitCritical+0x28>)
 80071b4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80071b6:	b90b      	cbnz	r3, 80071bc <vPortExitCritical+0x24>
	__asm volatile
 80071b8:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	20000098 	.word	0x20000098
	...

080071d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80071d0:	f3ef 8009 	mrs	r0, PSP
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	4b0d      	ldr	r3, [pc, #52]	; (8007210 <pxCurrentTCBConst>)
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80071e0:	6010      	str	r0, [r2, #0]
 80071e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80071e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80071ea:	f380 8811 	msr	BASEPRI, r0
 80071ee:	f7ff fb4b 	bl	8006888 <vTaskSwitchContext>
 80071f2:	f04f 0000 	mov.w	r0, #0
 80071f6:	f380 8811 	msr	BASEPRI, r0
 80071fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80071fe:	6819      	ldr	r1, [r3, #0]
 8007200:	6808      	ldr	r0, [r1, #0]
 8007202:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007206:	f380 8809 	msr	PSP, r0
 800720a:	f3bf 8f6f 	isb	sy
 800720e:	4770      	bx	lr

08007210 <pxCurrentTCBConst>:
 8007210:	20002090 	.word	0x20002090

08007214 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007214:	b508      	push	{r3, lr}
	__asm volatile
 8007216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721a:	f383 8811 	msr	BASEPRI, r3
 800721e:	f3bf 8f6f 	isb	sy
 8007222:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007226:	f7ff f9ed 	bl	8006604 <xTaskIncrementTick>
 800722a:	b128      	cbz	r0, 8007238 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800722c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007234:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8007238:	2300      	movs	r3, #0
 800723a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800723e:	bd08      	pop	{r3, pc}

08007240 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007240:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8007244:	2300      	movs	r3, #0
 8007246:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007248:	6193      	str	r3, [r2, #24]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800724a:	4b05      	ldr	r3, [pc, #20]	; (8007260 <vPortSetupTimerInterrupt+0x20>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4905      	ldr	r1, [pc, #20]	; (8007264 <vPortSetupTimerInterrupt+0x24>)
 8007250:	fba1 1303 	umull	r1, r3, r1, r3
 8007254:	099b      	lsrs	r3, r3, #6
 8007256:	3b01      	subs	r3, #1
 8007258:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800725a:	2307      	movs	r3, #7
 800725c:	6113      	str	r3, [r2, #16]
}
 800725e:	4770      	bx	lr
 8007260:	20000000 	.word	0x20000000
 8007264:	10624dd3 	.word	0x10624dd3

08007268 <xPortStartScheduler>:
{
 8007268:	b510      	push	{r4, lr}
 800726a:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800726c:	4b2b      	ldr	r3, [pc, #172]	; (800731c <xPortStartScheduler+0xb4>)
 800726e:	781a      	ldrb	r2, [r3, #0]
 8007270:	b2d2      	uxtb	r2, r2
 8007272:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007274:	22ff      	movs	r2, #255	; 0xff
 8007276:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	b2db      	uxtb	r3, r3
 800727c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007280:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007284:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007288:	4a25      	ldr	r2, [pc, #148]	; (8007320 <xPortStartScheduler+0xb8>)
 800728a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800728c:	4b25      	ldr	r3, [pc, #148]	; (8007324 <xPortStartScheduler+0xbc>)
 800728e:	2207      	movs	r2, #7
 8007290:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007292:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007296:	f013 0f80 	tst.w	r3, #128	; 0x80
 800729a:	d011      	beq.n	80072c0 <xPortStartScheduler+0x58>
 800729c:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800729e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80072a2:	005b      	lsls	r3, r3, #1
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072aa:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80072ae:	4611      	mov	r1, r2
 80072b0:	3a01      	subs	r2, #1
 80072b2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80072b6:	d1f2      	bne.n	800729e <xPortStartScheduler+0x36>
 80072b8:	4b1a      	ldr	r3, [pc, #104]	; (8007324 <xPortStartScheduler+0xbc>)
 80072ba:	6019      	str	r1, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80072bc:	2903      	cmp	r1, #3
 80072be:	d008      	beq.n	80072d2 <xPortStartScheduler+0x6a>
	__asm volatile
 80072c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c4:	f383 8811 	msr	BASEPRI, r3
 80072c8:	f3bf 8f6f 	isb	sy
 80072cc:	f3bf 8f4f 	dsb	sy
 80072d0:	e7fe      	b.n	80072d0 <xPortStartScheduler+0x68>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80072d2:	4b14      	ldr	r3, [pc, #80]	; (8007324 <xPortStartScheduler+0xbc>)
 80072d4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80072d8:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80072da:	9b01      	ldr	r3, [sp, #4]
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	4a0f      	ldr	r2, [pc, #60]	; (800731c <xPortStartScheduler+0xb4>)
 80072e0:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80072e2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80072e6:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 80072ea:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80072ee:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80072f2:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 80072f6:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80072fa:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 80072fe:	f7ff ff9f 	bl	8007240 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8007302:	2400      	movs	r4, #0
 8007304:	4b08      	ldr	r3, [pc, #32]	; (8007328 <xPortStartScheduler+0xc0>)
 8007306:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8007308:	f7ff fef0 	bl	80070ec <prvPortStartFirstTask>
	vTaskSwitchContext();
 800730c:	f7ff fabc 	bl	8006888 <vTaskSwitchContext>
	prvTaskExitError();
 8007310:	f7ff fecc 	bl	80070ac <prvTaskExitError>
}
 8007314:	4620      	mov	r0, r4
 8007316:	b002      	add	sp, #8
 8007318:	bd10      	pop	{r4, pc}
 800731a:	bf00      	nop
 800731c:	e000e400 	.word	0xe000e400
 8007320:	200026b8 	.word	0x200026b8
 8007324:	200026bc 	.word	0x200026bc
 8007328:	20000098 	.word	0x20000098

0800732c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800732c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007330:	2b0f      	cmp	r3, #15
 8007332:	d90f      	bls.n	8007354 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007334:	4a11      	ldr	r2, [pc, #68]	; (800737c <vPortValidateInterruptPriority+0x50>)
 8007336:	5c9b      	ldrb	r3, [r3, r2]
 8007338:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800733a:	4a11      	ldr	r2, [pc, #68]	; (8007380 <vPortValidateInterruptPriority+0x54>)
 800733c:	7812      	ldrb	r2, [r2, #0]
 800733e:	429a      	cmp	r2, r3
 8007340:	d908      	bls.n	8007354 <vPortValidateInterruptPriority+0x28>
 8007342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007346:	f383 8811 	msr	BASEPRI, r3
 800734a:	f3bf 8f6f 	isb	sy
 800734e:	f3bf 8f4f 	dsb	sy
 8007352:	e7fe      	b.n	8007352 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007354:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007358:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800735c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007360:	4a08      	ldr	r2, [pc, #32]	; (8007384 <vPortValidateInterruptPriority+0x58>)
 8007362:	6812      	ldr	r2, [r2, #0]
 8007364:	4293      	cmp	r3, r2
 8007366:	d908      	bls.n	800737a <vPortValidateInterruptPriority+0x4e>
 8007368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736c:	f383 8811 	msr	BASEPRI, r3
 8007370:	f3bf 8f6f 	isb	sy
 8007374:	f3bf 8f4f 	dsb	sy
 8007378:	e7fe      	b.n	8007378 <vPortValidateInterruptPriority+0x4c>
	}
 800737a:	4770      	bx	lr
 800737c:	e000e3f0 	.word	0xe000e3f0
 8007380:	200026b8 	.word	0x200026b8
 8007384:	200026bc 	.word	0x200026bc

08007388 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007388:	4b15      	ldr	r3, [pc, #84]	; (80073e0 <prvInsertBlockIntoFreeList+0x58>)
 800738a:	461a      	mov	r2, r3
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4283      	cmp	r3, r0
 8007390:	d3fb      	bcc.n	800738a <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007392:	6851      	ldr	r1, [r2, #4]
 8007394:	eb02 0c01 	add.w	ip, r2, r1
 8007398:	4560      	cmp	r0, ip
 800739a:	d009      	beq.n	80073b0 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800739c:	6841      	ldr	r1, [r0, #4]
 800739e:	eb00 0c01 	add.w	ip, r0, r1
 80073a2:	4563      	cmp	r3, ip
 80073a4:	d009      	beq.n	80073ba <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80073a6:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80073a8:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80073aa:	bf18      	it	ne
 80073ac:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 80073ae:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80073b0:	6840      	ldr	r0, [r0, #4]
 80073b2:	4401      	add	r1, r0
 80073b4:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 80073b6:	4610      	mov	r0, r2
 80073b8:	e7f0      	b.n	800739c <prvInsertBlockIntoFreeList+0x14>
{
 80073ba:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80073bc:	4c09      	ldr	r4, [pc, #36]	; (80073e4 <prvInsertBlockIntoFreeList+0x5c>)
 80073be:	6824      	ldr	r4, [r4, #0]
 80073c0:	42a3      	cmp	r3, r4
 80073c2:	d00a      	beq.n	80073da <prvInsertBlockIntoFreeList+0x52>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	4419      	add	r1, r3
 80073c8:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80073ca:	6813      	ldr	r3, [r2, #0]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 80073d0:	4290      	cmp	r0, r2
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80073d2:	bf18      	it	ne
 80073d4:	6010      	strne	r0, [r2, #0]
	}
}
 80073d6:	bc10      	pop	{r4}
 80073d8:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80073da:	6004      	str	r4, [r0, #0]
 80073dc:	e7f8      	b.n	80073d0 <prvInsertBlockIntoFreeList+0x48>
 80073de:	bf00      	nop
 80073e0:	200032d0 	.word	0x200032d0
 80073e4:	200026c0 	.word	0x200026c0

080073e8 <pvPortMalloc>:
{
 80073e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ea:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80073ec:	f7ff f8fc 	bl	80065e8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80073f0:	4b42      	ldr	r3, [pc, #264]	; (80074fc <pvPortMalloc+0x114>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	b1b3      	cbz	r3, 8007424 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80073f6:	4b42      	ldr	r3, [pc, #264]	; (8007500 <pvPortMalloc+0x118>)
 80073f8:	681d      	ldr	r5, [r3, #0]
 80073fa:	4225      	tst	r5, r4
 80073fc:	d179      	bne.n	80074f2 <pvPortMalloc+0x10a>
			if( xWantedSize > 0 )
 80073fe:	2c00      	cmp	r4, #0
 8007400:	d077      	beq.n	80074f2 <pvPortMalloc+0x10a>
				xWantedSize += xHeapStructSize;
 8007402:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007406:	f014 0f07 	tst.w	r4, #7
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800740a:	bf1c      	itt	ne
 800740c:	f022 0207 	bicne.w	r2, r2, #7
 8007410:	3208      	addne	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007412:	2a00      	cmp	r2, #0
 8007414:	d06d      	beq.n	80074f2 <pvPortMalloc+0x10a>
 8007416:	4b3b      	ldr	r3, [pc, #236]	; (8007504 <pvPortMalloc+0x11c>)
 8007418:	681e      	ldr	r6, [r3, #0]
 800741a:	4296      	cmp	r6, r2
 800741c:	d369      	bcc.n	80074f2 <pvPortMalloc+0x10a>
				pxBlock = xStart.pxNextFreeBlock;
 800741e:	493a      	ldr	r1, [pc, #232]	; (8007508 <pvPortMalloc+0x120>)
 8007420:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007422:	e027      	b.n	8007474 <pvPortMalloc+0x8c>
	uxAddress = ( size_t ) ucHeap;
 8007424:	4a39      	ldr	r2, [pc, #228]	; (800750c <pvPortMalloc+0x124>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007426:	f012 0f07 	tst.w	r2, #7
 800742a:	d007      	beq.n	800743c <pvPortMalloc+0x54>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800742c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800742e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007432:	f502 6340 	add.w	r3, r2, #3072	; 0xc00
 8007436:	1a5b      	subs	r3, r3, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007438:	460a      	mov	r2, r1
 800743a:	e001      	b.n	8007440 <pvPortMalloc+0x58>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800743c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007440:	4831      	ldr	r0, [pc, #196]	; (8007508 <pvPortMalloc+0x120>)
 8007442:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007444:	2100      	movs	r1, #0
 8007446:	6041      	str	r1, [r0, #4]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007448:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800744a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800744c:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8007450:	482a      	ldr	r0, [pc, #168]	; (80074fc <pvPortMalloc+0x114>)
 8007452:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8007454:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007456:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007458:	1a99      	subs	r1, r3, r2
 800745a:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800745c:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800745e:	4b2c      	ldr	r3, [pc, #176]	; (8007510 <pvPortMalloc+0x128>)
 8007460:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007462:	4b28      	ldr	r3, [pc, #160]	; (8007504 <pvPortMalloc+0x11c>)
 8007464:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007466:	4b26      	ldr	r3, [pc, #152]	; (8007500 <pvPortMalloc+0x118>)
 8007468:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800746c:	601a      	str	r2, [r3, #0]
}
 800746e:	e7c2      	b.n	80073f6 <pvPortMalloc+0xe>
 8007470:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8007472:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007474:	6863      	ldr	r3, [r4, #4]
 8007476:	4293      	cmp	r3, r2
 8007478:	d202      	bcs.n	8007480 <pvPortMalloc+0x98>
 800747a:	6823      	ldr	r3, [r4, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1f7      	bne.n	8007470 <pvPortMalloc+0x88>
				if( pxBlock != pxEnd )
 8007480:	4b1e      	ldr	r3, [pc, #120]	; (80074fc <pvPortMalloc+0x114>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	42a3      	cmp	r3, r4
 8007486:	d034      	beq.n	80074f2 <pvPortMalloc+0x10a>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007488:	680f      	ldr	r7, [r1, #0]
 800748a:	3708      	adds	r7, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800748c:	6823      	ldr	r3, [r4, #0]
 800748e:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007490:	6863      	ldr	r3, [r4, #4]
 8007492:	1a9b      	subs	r3, r3, r2
 8007494:	2b10      	cmp	r3, #16
 8007496:	d910      	bls.n	80074ba <pvPortMalloc+0xd2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007498:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800749a:	f010 0f07 	tst.w	r0, #7
 800749e:	d008      	beq.n	80074b2 <pvPortMalloc+0xca>
 80074a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a4:	f383 8811 	msr	BASEPRI, r3
 80074a8:	f3bf 8f6f 	isb	sy
 80074ac:	f3bf 8f4f 	dsb	sy
 80074b0:	e7fe      	b.n	80074b0 <pvPortMalloc+0xc8>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80074b2:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80074b4:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80074b6:	f7ff ff67 	bl	8007388 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80074ba:	6863      	ldr	r3, [r4, #4]
 80074bc:	1af6      	subs	r6, r6, r3
 80074be:	4a11      	ldr	r2, [pc, #68]	; (8007504 <pvPortMalloc+0x11c>)
 80074c0:	6016      	str	r6, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80074c2:	4a13      	ldr	r2, [pc, #76]	; (8007510 <pvPortMalloc+0x128>)
 80074c4:	6812      	ldr	r2, [r2, #0]
 80074c6:	4296      	cmp	r6, r2
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80074c8:	bf3c      	itt	cc
 80074ca:	4a11      	ldrcc	r2, [pc, #68]	; (8007510 <pvPortMalloc+0x128>)
 80074cc:	6016      	strcc	r6, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80074ce:	431d      	orrs	r5, r3
 80074d0:	6065      	str	r5, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80074d2:	2300      	movs	r3, #0
 80074d4:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 80074d6:	f7ff f92f 	bl	8006738 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80074da:	f017 0f07 	tst.w	r7, #7
 80074de:	d00b      	beq.n	80074f8 <pvPortMalloc+0x110>
 80074e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e4:	f383 8811 	msr	BASEPRI, r3
 80074e8:	f3bf 8f6f 	isb	sy
 80074ec:	f3bf 8f4f 	dsb	sy
 80074f0:	e7fe      	b.n	80074f0 <pvPortMalloc+0x108>
	( void ) xTaskResumeAll();
 80074f2:	f7ff f921 	bl	8006738 <xTaskResumeAll>
 80074f6:	2700      	movs	r7, #0
}
 80074f8:	4638      	mov	r0, r7
 80074fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074fc:	200026c0 	.word	0x200026c0
 8007500:	200032c4 	.word	0x200032c4
 8007504:	200032c8 	.word	0x200032c8
 8007508:	200032d0 	.word	0x200032d0
 800750c:	200026c4 	.word	0x200026c4
 8007510:	200032cc 	.word	0x200032cc

08007514 <vPortFree>:
	if( pv != NULL )
 8007514:	b378      	cbz	r0, 8007576 <vPortFree+0x62>
{
 8007516:	b510      	push	{r4, lr}
 8007518:	4604      	mov	r4, r0
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800751a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800751e:	4a16      	ldr	r2, [pc, #88]	; (8007578 <vPortFree+0x64>)
 8007520:	6812      	ldr	r2, [r2, #0]
 8007522:	4213      	tst	r3, r2
 8007524:	d108      	bne.n	8007538 <vPortFree+0x24>
 8007526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752a:	f383 8811 	msr	BASEPRI, r3
 800752e:	f3bf 8f6f 	isb	sy
 8007532:	f3bf 8f4f 	dsb	sy
 8007536:	e7fe      	b.n	8007536 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007538:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800753c:	b141      	cbz	r1, 8007550 <vPortFree+0x3c>
 800753e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007542:	f383 8811 	msr	BASEPRI, r3
 8007546:	f3bf 8f6f 	isb	sy
 800754a:	f3bf 8f4f 	dsb	sy
 800754e:	e7fe      	b.n	800754e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007550:	ea23 0302 	bic.w	r3, r3, r2
 8007554:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8007558:	f7ff f846 	bl	80065e8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800755c:	4a07      	ldr	r2, [pc, #28]	; (800757c <vPortFree+0x68>)
 800755e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007562:	6811      	ldr	r1, [r2, #0]
 8007564:	440b      	add	r3, r1
 8007566:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007568:	f1a4 0008 	sub.w	r0, r4, #8
 800756c:	f7ff ff0c 	bl	8007388 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8007570:	f7ff f8e2 	bl	8006738 <xTaskResumeAll>
}
 8007574:	bd10      	pop	{r4, pc}
 8007576:	4770      	bx	lr
 8007578:	200032c4 	.word	0x200032c4
 800757c:	200032c8 	.word	0x200032c8

08007580 <__libc_init_array>:
 8007580:	b570      	push	{r4, r5, r6, lr}
 8007582:	2600      	movs	r6, #0
 8007584:	4d0c      	ldr	r5, [pc, #48]	; (80075b8 <__libc_init_array+0x38>)
 8007586:	4c0d      	ldr	r4, [pc, #52]	; (80075bc <__libc_init_array+0x3c>)
 8007588:	1b64      	subs	r4, r4, r5
 800758a:	10a4      	asrs	r4, r4, #2
 800758c:	42a6      	cmp	r6, r4
 800758e:	d109      	bne.n	80075a4 <__libc_init_array+0x24>
 8007590:	f000 f8f0 	bl	8007774 <_init>
 8007594:	2600      	movs	r6, #0
 8007596:	4d0a      	ldr	r5, [pc, #40]	; (80075c0 <__libc_init_array+0x40>)
 8007598:	4c0a      	ldr	r4, [pc, #40]	; (80075c4 <__libc_init_array+0x44>)
 800759a:	1b64      	subs	r4, r4, r5
 800759c:	10a4      	asrs	r4, r4, #2
 800759e:	42a6      	cmp	r6, r4
 80075a0:	d105      	bne.n	80075ae <__libc_init_array+0x2e>
 80075a2:	bd70      	pop	{r4, r5, r6, pc}
 80075a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80075a8:	4798      	blx	r3
 80075aa:	3601      	adds	r6, #1
 80075ac:	e7ee      	b.n	800758c <__libc_init_array+0xc>
 80075ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80075b2:	4798      	blx	r3
 80075b4:	3601      	adds	r6, #1
 80075b6:	e7f2      	b.n	800759e <__libc_init_array+0x1e>
 80075b8:	08007c30 	.word	0x08007c30
 80075bc:	08007c30 	.word	0x08007c30
 80075c0:	08007c30 	.word	0x08007c30
 80075c4:	08007c34 	.word	0x08007c34

080075c8 <__retarget_lock_acquire_recursive>:
 80075c8:	4770      	bx	lr

080075ca <__retarget_lock_release_recursive>:
 80075ca:	4770      	bx	lr

080075cc <memcpy>:
 80075cc:	440a      	add	r2, r1
 80075ce:	4291      	cmp	r1, r2
 80075d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80075d4:	d100      	bne.n	80075d8 <memcpy+0xc>
 80075d6:	4770      	bx	lr
 80075d8:	b510      	push	{r4, lr}
 80075da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075de:	4291      	cmp	r1, r2
 80075e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075e4:	d1f9      	bne.n	80075da <memcpy+0xe>
 80075e6:	bd10      	pop	{r4, pc}

080075e8 <memset>:
 80075e8:	4603      	mov	r3, r0
 80075ea:	4402      	add	r2, r0
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d100      	bne.n	80075f2 <memset+0xa>
 80075f0:	4770      	bx	lr
 80075f2:	f803 1b01 	strb.w	r1, [r3], #1
 80075f6:	e7f9      	b.n	80075ec <memset+0x4>

080075f8 <cleanup_glue>:
 80075f8:	b538      	push	{r3, r4, r5, lr}
 80075fa:	460c      	mov	r4, r1
 80075fc:	6809      	ldr	r1, [r1, #0]
 80075fe:	4605      	mov	r5, r0
 8007600:	b109      	cbz	r1, 8007606 <cleanup_glue+0xe>
 8007602:	f7ff fff9 	bl	80075f8 <cleanup_glue>
 8007606:	4621      	mov	r1, r4
 8007608:	4628      	mov	r0, r5
 800760a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800760e:	f000 b869 	b.w	80076e4 <_free_r>
	...

08007614 <_reclaim_reent>:
 8007614:	4b2c      	ldr	r3, [pc, #176]	; (80076c8 <_reclaim_reent+0xb4>)
 8007616:	b570      	push	{r4, r5, r6, lr}
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4604      	mov	r4, r0
 800761c:	4283      	cmp	r3, r0
 800761e:	d051      	beq.n	80076c4 <_reclaim_reent+0xb0>
 8007620:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007622:	b143      	cbz	r3, 8007636 <_reclaim_reent+0x22>
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d14a      	bne.n	80076c0 <_reclaim_reent+0xac>
 800762a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800762c:	6819      	ldr	r1, [r3, #0]
 800762e:	b111      	cbz	r1, 8007636 <_reclaim_reent+0x22>
 8007630:	4620      	mov	r0, r4
 8007632:	f000 f857 	bl	80076e4 <_free_r>
 8007636:	6961      	ldr	r1, [r4, #20]
 8007638:	b111      	cbz	r1, 8007640 <_reclaim_reent+0x2c>
 800763a:	4620      	mov	r0, r4
 800763c:	f000 f852 	bl	80076e4 <_free_r>
 8007640:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007642:	b111      	cbz	r1, 800764a <_reclaim_reent+0x36>
 8007644:	4620      	mov	r0, r4
 8007646:	f000 f84d 	bl	80076e4 <_free_r>
 800764a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800764c:	b111      	cbz	r1, 8007654 <_reclaim_reent+0x40>
 800764e:	4620      	mov	r0, r4
 8007650:	f000 f848 	bl	80076e4 <_free_r>
 8007654:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007656:	b111      	cbz	r1, 800765e <_reclaim_reent+0x4a>
 8007658:	4620      	mov	r0, r4
 800765a:	f000 f843 	bl	80076e4 <_free_r>
 800765e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007660:	b111      	cbz	r1, 8007668 <_reclaim_reent+0x54>
 8007662:	4620      	mov	r0, r4
 8007664:	f000 f83e 	bl	80076e4 <_free_r>
 8007668:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800766a:	b111      	cbz	r1, 8007672 <_reclaim_reent+0x5e>
 800766c:	4620      	mov	r0, r4
 800766e:	f000 f839 	bl	80076e4 <_free_r>
 8007672:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007674:	b111      	cbz	r1, 800767c <_reclaim_reent+0x68>
 8007676:	4620      	mov	r0, r4
 8007678:	f000 f834 	bl	80076e4 <_free_r>
 800767c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800767e:	b111      	cbz	r1, 8007686 <_reclaim_reent+0x72>
 8007680:	4620      	mov	r0, r4
 8007682:	f000 f82f 	bl	80076e4 <_free_r>
 8007686:	69a3      	ldr	r3, [r4, #24]
 8007688:	b1e3      	cbz	r3, 80076c4 <_reclaim_reent+0xb0>
 800768a:	4620      	mov	r0, r4
 800768c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800768e:	4798      	blx	r3
 8007690:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007692:	b1b9      	cbz	r1, 80076c4 <_reclaim_reent+0xb0>
 8007694:	4620      	mov	r0, r4
 8007696:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800769a:	f7ff bfad 	b.w	80075f8 <cleanup_glue>
 800769e:	5949      	ldr	r1, [r1, r5]
 80076a0:	b941      	cbnz	r1, 80076b4 <_reclaim_reent+0xa0>
 80076a2:	3504      	adds	r5, #4
 80076a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076a6:	2d80      	cmp	r5, #128	; 0x80
 80076a8:	68d9      	ldr	r1, [r3, #12]
 80076aa:	d1f8      	bne.n	800769e <_reclaim_reent+0x8a>
 80076ac:	4620      	mov	r0, r4
 80076ae:	f000 f819 	bl	80076e4 <_free_r>
 80076b2:	e7ba      	b.n	800762a <_reclaim_reent+0x16>
 80076b4:	680e      	ldr	r6, [r1, #0]
 80076b6:	4620      	mov	r0, r4
 80076b8:	f000 f814 	bl	80076e4 <_free_r>
 80076bc:	4631      	mov	r1, r6
 80076be:	e7ef      	b.n	80076a0 <_reclaim_reent+0x8c>
 80076c0:	2500      	movs	r5, #0
 80076c2:	e7ef      	b.n	80076a4 <_reclaim_reent+0x90>
 80076c4:	bd70      	pop	{r4, r5, r6, pc}
 80076c6:	bf00      	nop
 80076c8:	2000009c 	.word	0x2000009c

080076cc <__malloc_lock>:
 80076cc:	4801      	ldr	r0, [pc, #4]	; (80076d4 <__malloc_lock+0x8>)
 80076ce:	f7ff bf7b 	b.w	80075c8 <__retarget_lock_acquire_recursive>
 80076d2:	bf00      	nop
 80076d4:	200032d8 	.word	0x200032d8

080076d8 <__malloc_unlock>:
 80076d8:	4801      	ldr	r0, [pc, #4]	; (80076e0 <__malloc_unlock+0x8>)
 80076da:	f7ff bf76 	b.w	80075ca <__retarget_lock_release_recursive>
 80076de:	bf00      	nop
 80076e0:	200032d8 	.word	0x200032d8

080076e4 <_free_r>:
 80076e4:	b538      	push	{r3, r4, r5, lr}
 80076e6:	4605      	mov	r5, r0
 80076e8:	2900      	cmp	r1, #0
 80076ea:	d040      	beq.n	800776e <_free_r+0x8a>
 80076ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076f0:	1f0c      	subs	r4, r1, #4
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	bfb8      	it	lt
 80076f6:	18e4      	addlt	r4, r4, r3
 80076f8:	f7ff ffe8 	bl	80076cc <__malloc_lock>
 80076fc:	4a1c      	ldr	r2, [pc, #112]	; (8007770 <_free_r+0x8c>)
 80076fe:	6813      	ldr	r3, [r2, #0]
 8007700:	b933      	cbnz	r3, 8007710 <_free_r+0x2c>
 8007702:	6063      	str	r3, [r4, #4]
 8007704:	6014      	str	r4, [r2, #0]
 8007706:	4628      	mov	r0, r5
 8007708:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800770c:	f7ff bfe4 	b.w	80076d8 <__malloc_unlock>
 8007710:	42a3      	cmp	r3, r4
 8007712:	d908      	bls.n	8007726 <_free_r+0x42>
 8007714:	6820      	ldr	r0, [r4, #0]
 8007716:	1821      	adds	r1, r4, r0
 8007718:	428b      	cmp	r3, r1
 800771a:	bf01      	itttt	eq
 800771c:	6819      	ldreq	r1, [r3, #0]
 800771e:	685b      	ldreq	r3, [r3, #4]
 8007720:	1809      	addeq	r1, r1, r0
 8007722:	6021      	streq	r1, [r4, #0]
 8007724:	e7ed      	b.n	8007702 <_free_r+0x1e>
 8007726:	461a      	mov	r2, r3
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	b10b      	cbz	r3, 8007730 <_free_r+0x4c>
 800772c:	42a3      	cmp	r3, r4
 800772e:	d9fa      	bls.n	8007726 <_free_r+0x42>
 8007730:	6811      	ldr	r1, [r2, #0]
 8007732:	1850      	adds	r0, r2, r1
 8007734:	42a0      	cmp	r0, r4
 8007736:	d10b      	bne.n	8007750 <_free_r+0x6c>
 8007738:	6820      	ldr	r0, [r4, #0]
 800773a:	4401      	add	r1, r0
 800773c:	1850      	adds	r0, r2, r1
 800773e:	4283      	cmp	r3, r0
 8007740:	6011      	str	r1, [r2, #0]
 8007742:	d1e0      	bne.n	8007706 <_free_r+0x22>
 8007744:	6818      	ldr	r0, [r3, #0]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	4401      	add	r1, r0
 800774a:	6011      	str	r1, [r2, #0]
 800774c:	6053      	str	r3, [r2, #4]
 800774e:	e7da      	b.n	8007706 <_free_r+0x22>
 8007750:	d902      	bls.n	8007758 <_free_r+0x74>
 8007752:	230c      	movs	r3, #12
 8007754:	602b      	str	r3, [r5, #0]
 8007756:	e7d6      	b.n	8007706 <_free_r+0x22>
 8007758:	6820      	ldr	r0, [r4, #0]
 800775a:	1821      	adds	r1, r4, r0
 800775c:	428b      	cmp	r3, r1
 800775e:	bf01      	itttt	eq
 8007760:	6819      	ldreq	r1, [r3, #0]
 8007762:	685b      	ldreq	r3, [r3, #4]
 8007764:	1809      	addeq	r1, r1, r0
 8007766:	6021      	streq	r1, [r4, #0]
 8007768:	6063      	str	r3, [r4, #4]
 800776a:	6054      	str	r4, [r2, #4]
 800776c:	e7cb      	b.n	8007706 <_free_r+0x22>
 800776e:	bd38      	pop	{r3, r4, r5, pc}
 8007770:	200032dc 	.word	0x200032dc

08007774 <_init>:
 8007774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007776:	bf00      	nop
 8007778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800777a:	bc08      	pop	{r3}
 800777c:	469e      	mov	lr, r3
 800777e:	4770      	bx	lr

08007780 <_fini>:
 8007780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007782:	bf00      	nop
 8007784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007786:	bc08      	pop	{r3}
 8007788:	469e      	mov	lr, r3
 800778a:	4770      	bx	lr

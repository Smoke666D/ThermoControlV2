
ThermoControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007abc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  08007bcc  08007bcc  00017bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008070  08008070  00020124  2**0
                  CONTENTS
  4 .ARM          00000000  08008070  08008070  00020124  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008070  08008070  00020124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008070  08008070  00018070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008074  08008074  00018074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000124  20000000  08008078  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002f7c  20000128  0800819c  00020128  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200030a4  0800819c  000230a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d441  00000000  00000000  0002014d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006787  00000000  00000000  0004d58e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000206b8  00000000  00000000  00053d15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001958  00000000  00000000  000743d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002078  00000000  00000000  00075d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001da73  00000000  00000000  00077da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002cf6b  00000000  00000000  00095813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009d374  00000000  00000000  000c277e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015faf2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ba8  00000000  00000000  0015fb44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000128 	.word	0x20000128
 800012c:	00000000 	.word	0x00000000
 8000130:	08007bb4 	.word	0x08007bb4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000012c 	.word	0x2000012c
 800014c:	08007bb4 	.word	0x08007bb4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <__aeabi_d2f>:
 800092c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000930:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000934:	bf24      	itt	cs
 8000936:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800093a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800093e:	d90d      	bls.n	800095c <__aeabi_d2f+0x30>
 8000940:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000944:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000948:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800094c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000950:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000954:	bf08      	it	eq
 8000956:	f020 0001 	biceq.w	r0, r0, #1
 800095a:	4770      	bx	lr
 800095c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000960:	d121      	bne.n	80009a6 <__aeabi_d2f+0x7a>
 8000962:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000966:	bfbc      	itt	lt
 8000968:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800096c:	4770      	bxlt	lr
 800096e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000972:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000976:	f1c2 0218 	rsb	r2, r2, #24
 800097a:	f1c2 0c20 	rsb	ip, r2, #32
 800097e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000982:	fa20 f002 	lsr.w	r0, r0, r2
 8000986:	bf18      	it	ne
 8000988:	f040 0001 	orrne.w	r0, r0, #1
 800098c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000990:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000994:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000998:	ea40 000c 	orr.w	r0, r0, ip
 800099c:	fa23 f302 	lsr.w	r3, r3, r2
 80009a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009a4:	e7cc      	b.n	8000940 <__aeabi_d2f+0x14>
 80009a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009aa:	d107      	bne.n	80009bc <__aeabi_d2f+0x90>
 80009ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009b0:	bf1e      	ittt	ne
 80009b2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009b6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ba:	4770      	bxne	lr
 80009bc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_frsub>:
 80009cc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	e002      	b.n	80009d8 <__addsf3>
 80009d2:	bf00      	nop

080009d4 <__aeabi_fsub>:
 80009d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009d8 <__addsf3>:
 80009d8:	0042      	lsls	r2, r0, #1
 80009da:	bf1f      	itttt	ne
 80009dc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009e0:	ea92 0f03 	teqne	r2, r3
 80009e4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009e8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ec:	d06a      	beq.n	8000ac4 <__addsf3+0xec>
 80009ee:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009f2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009f6:	bfc1      	itttt	gt
 80009f8:	18d2      	addgt	r2, r2, r3
 80009fa:	4041      	eorgt	r1, r0
 80009fc:	4048      	eorgt	r0, r1
 80009fe:	4041      	eorgt	r1, r0
 8000a00:	bfb8      	it	lt
 8000a02:	425b      	neglt	r3, r3
 8000a04:	2b19      	cmp	r3, #25
 8000a06:	bf88      	it	hi
 8000a08:	4770      	bxhi	lr
 8000a0a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a16:	bf18      	it	ne
 8000a18:	4240      	negne	r0, r0
 8000a1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a1e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a22:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4249      	negne	r1, r1
 8000a2a:	ea92 0f03 	teq	r2, r3
 8000a2e:	d03f      	beq.n	8000ab0 <__addsf3+0xd8>
 8000a30:	f1a2 0201 	sub.w	r2, r2, #1
 8000a34:	fa41 fc03 	asr.w	ip, r1, r3
 8000a38:	eb10 000c 	adds.w	r0, r0, ip
 8000a3c:	f1c3 0320 	rsb	r3, r3, #32
 8000a40:	fa01 f103 	lsl.w	r1, r1, r3
 8000a44:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a48:	d502      	bpl.n	8000a50 <__addsf3+0x78>
 8000a4a:	4249      	negs	r1, r1
 8000a4c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a50:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a54:	d313      	bcc.n	8000a7e <__addsf3+0xa6>
 8000a56:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a5a:	d306      	bcc.n	8000a6a <__addsf3+0x92>
 8000a5c:	0840      	lsrs	r0, r0, #1
 8000a5e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a62:	f102 0201 	add.w	r2, r2, #1
 8000a66:	2afe      	cmp	r2, #254	; 0xfe
 8000a68:	d251      	bcs.n	8000b0e <__addsf3+0x136>
 8000a6a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a72:	bf08      	it	eq
 8000a74:	f020 0001 	biceq.w	r0, r0, #1
 8000a78:	ea40 0003 	orr.w	r0, r0, r3
 8000a7c:	4770      	bx	lr
 8000a7e:	0049      	lsls	r1, r1, #1
 8000a80:	eb40 0000 	adc.w	r0, r0, r0
 8000a84:	3a01      	subs	r2, #1
 8000a86:	bf28      	it	cs
 8000a88:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a8c:	d2ed      	bcs.n	8000a6a <__addsf3+0x92>
 8000a8e:	fab0 fc80 	clz	ip, r0
 8000a92:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a96:	ebb2 020c 	subs.w	r2, r2, ip
 8000a9a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a9e:	bfaa      	itet	ge
 8000aa0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000aa4:	4252      	neglt	r2, r2
 8000aa6:	4318      	orrge	r0, r3
 8000aa8:	bfbc      	itt	lt
 8000aaa:	40d0      	lsrlt	r0, r2
 8000aac:	4318      	orrlt	r0, r3
 8000aae:	4770      	bx	lr
 8000ab0:	f092 0f00 	teq	r2, #0
 8000ab4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ab8:	bf06      	itte	eq
 8000aba:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000abe:	3201      	addeq	r2, #1
 8000ac0:	3b01      	subne	r3, #1
 8000ac2:	e7b5      	b.n	8000a30 <__addsf3+0x58>
 8000ac4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ac8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000acc:	bf18      	it	ne
 8000ace:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad2:	d021      	beq.n	8000b18 <__addsf3+0x140>
 8000ad4:	ea92 0f03 	teq	r2, r3
 8000ad8:	d004      	beq.n	8000ae4 <__addsf3+0x10c>
 8000ada:	f092 0f00 	teq	r2, #0
 8000ade:	bf08      	it	eq
 8000ae0:	4608      	moveq	r0, r1
 8000ae2:	4770      	bx	lr
 8000ae4:	ea90 0f01 	teq	r0, r1
 8000ae8:	bf1c      	itt	ne
 8000aea:	2000      	movne	r0, #0
 8000aec:	4770      	bxne	lr
 8000aee:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000af2:	d104      	bne.n	8000afe <__addsf3+0x126>
 8000af4:	0040      	lsls	r0, r0, #1
 8000af6:	bf28      	it	cs
 8000af8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000afc:	4770      	bx	lr
 8000afe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b02:	bf3c      	itt	cc
 8000b04:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bxcc	lr
 8000b0a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b0e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b16:	4770      	bx	lr
 8000b18:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b1c:	bf16      	itet	ne
 8000b1e:	4608      	movne	r0, r1
 8000b20:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b24:	4601      	movne	r1, r0
 8000b26:	0242      	lsls	r2, r0, #9
 8000b28:	bf06      	itte	eq
 8000b2a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b2e:	ea90 0f01 	teqeq	r0, r1
 8000b32:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b36:	4770      	bx	lr

08000b38 <__aeabi_ui2f>:
 8000b38:	f04f 0300 	mov.w	r3, #0
 8000b3c:	e004      	b.n	8000b48 <__aeabi_i2f+0x8>
 8000b3e:	bf00      	nop

08000b40 <__aeabi_i2f>:
 8000b40:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	bf48      	it	mi
 8000b46:	4240      	negmi	r0, r0
 8000b48:	ea5f 0c00 	movs.w	ip, r0
 8000b4c:	bf08      	it	eq
 8000b4e:	4770      	bxeq	lr
 8000b50:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b54:	4601      	mov	r1, r0
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	e01c      	b.n	8000b96 <__aeabi_l2f+0x2a>

08000b5c <__aeabi_ul2f>:
 8000b5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b60:	bf08      	it	eq
 8000b62:	4770      	bxeq	lr
 8000b64:	f04f 0300 	mov.w	r3, #0
 8000b68:	e00a      	b.n	8000b80 <__aeabi_l2f+0x14>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_l2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b78:	d502      	bpl.n	8000b80 <__aeabi_l2f+0x14>
 8000b7a:	4240      	negs	r0, r0
 8000b7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b80:	ea5f 0c01 	movs.w	ip, r1
 8000b84:	bf02      	ittt	eq
 8000b86:	4684      	moveq	ip, r0
 8000b88:	4601      	moveq	r1, r0
 8000b8a:	2000      	moveq	r0, #0
 8000b8c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b90:	bf08      	it	eq
 8000b92:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b96:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b9a:	fabc f28c 	clz	r2, ip
 8000b9e:	3a08      	subs	r2, #8
 8000ba0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ba4:	db10      	blt.n	8000bc8 <__aeabi_l2f+0x5c>
 8000ba6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000baa:	4463      	add	r3, ip
 8000bac:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bb0:	f1c2 0220 	rsb	r2, r2, #32
 8000bb4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bbc:	eb43 0002 	adc.w	r0, r3, r2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f102 0220 	add.w	r2, r2, #32
 8000bcc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bd0:	f1c2 0220 	rsb	r2, r2, #32
 8000bd4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bd8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bdc:	eb43 0002 	adc.w	r0, r3, r2
 8000be0:	bf08      	it	eq
 8000be2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_fmul>:
 8000be8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bf6:	ea92 0f0c 	teqne	r2, ip
 8000bfa:	ea93 0f0c 	teqne	r3, ip
 8000bfe:	d06f      	beq.n	8000ce0 <__aeabi_fmul+0xf8>
 8000c00:	441a      	add	r2, r3
 8000c02:	ea80 0c01 	eor.w	ip, r0, r1
 8000c06:	0240      	lsls	r0, r0, #9
 8000c08:	bf18      	it	ne
 8000c0a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c0e:	d01e      	beq.n	8000c4e <__aeabi_fmul+0x66>
 8000c10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c14:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c18:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c1c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c24:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c28:	bf3e      	ittt	cc
 8000c2a:	0049      	lslcc	r1, r1, #1
 8000c2c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c30:	005b      	lslcc	r3, r3, #1
 8000c32:	ea40 0001 	orr.w	r0, r0, r1
 8000c36:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c3a:	2afd      	cmp	r2, #253	; 0xfd
 8000c3c:	d81d      	bhi.n	8000c7a <__aeabi_fmul+0x92>
 8000c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	4770      	bx	lr
 8000c4e:	f090 0f00 	teq	r0, #0
 8000c52:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c56:	bf08      	it	eq
 8000c58:	0249      	lsleq	r1, r1, #9
 8000c5a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c5e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c62:	3a7f      	subs	r2, #127	; 0x7f
 8000c64:	bfc2      	ittt	gt
 8000c66:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c6a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c6e:	4770      	bxgt	lr
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	3a01      	subs	r2, #1
 8000c7a:	dc5d      	bgt.n	8000d38 <__aeabi_fmul+0x150>
 8000c7c:	f112 0f19 	cmn.w	r2, #25
 8000c80:	bfdc      	itt	le
 8000c82:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c86:	4770      	bxle	lr
 8000c88:	f1c2 0200 	rsb	r2, r2, #0
 8000c8c:	0041      	lsls	r1, r0, #1
 8000c8e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c92:	f1c2 0220 	rsb	r2, r2, #32
 8000c96:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c9a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c9e:	f140 0000 	adc.w	r0, r0, #0
 8000ca2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ca6:	bf08      	it	eq
 8000ca8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cac:	4770      	bx	lr
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cb6:	bf02      	ittt	eq
 8000cb8:	0040      	lsleq	r0, r0, #1
 8000cba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cbe:	3a01      	subeq	r2, #1
 8000cc0:	d0f9      	beq.n	8000cb6 <__aeabi_fmul+0xce>
 8000cc2:	ea40 000c 	orr.w	r0, r0, ip
 8000cc6:	f093 0f00 	teq	r3, #0
 8000cca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cce:	bf02      	ittt	eq
 8000cd0:	0049      	lsleq	r1, r1, #1
 8000cd2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000cd6:	3b01      	subeq	r3, #1
 8000cd8:	d0f9      	beq.n	8000cce <__aeabi_fmul+0xe6>
 8000cda:	ea41 010c 	orr.w	r1, r1, ip
 8000cde:	e78f      	b.n	8000c00 <__aeabi_fmul+0x18>
 8000ce0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ce4:	ea92 0f0c 	teq	r2, ip
 8000ce8:	bf18      	it	ne
 8000cea:	ea93 0f0c 	teqne	r3, ip
 8000cee:	d00a      	beq.n	8000d06 <__aeabi_fmul+0x11e>
 8000cf0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cf4:	bf18      	it	ne
 8000cf6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cfa:	d1d8      	bne.n	8000cae <__aeabi_fmul+0xc6>
 8000cfc:	ea80 0001 	eor.w	r0, r0, r1
 8000d00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d04:	4770      	bx	lr
 8000d06:	f090 0f00 	teq	r0, #0
 8000d0a:	bf17      	itett	ne
 8000d0c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d10:	4608      	moveq	r0, r1
 8000d12:	f091 0f00 	teqne	r1, #0
 8000d16:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d1a:	d014      	beq.n	8000d46 <__aeabi_fmul+0x15e>
 8000d1c:	ea92 0f0c 	teq	r2, ip
 8000d20:	d101      	bne.n	8000d26 <__aeabi_fmul+0x13e>
 8000d22:	0242      	lsls	r2, r0, #9
 8000d24:	d10f      	bne.n	8000d46 <__aeabi_fmul+0x15e>
 8000d26:	ea93 0f0c 	teq	r3, ip
 8000d2a:	d103      	bne.n	8000d34 <__aeabi_fmul+0x14c>
 8000d2c:	024b      	lsls	r3, r1, #9
 8000d2e:	bf18      	it	ne
 8000d30:	4608      	movne	r0, r1
 8000d32:	d108      	bne.n	8000d46 <__aeabi_fmul+0x15e>
 8000d34:	ea80 0001 	eor.w	r0, r0, r1
 8000d38:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	4770      	bx	lr
 8000d46:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d4a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d4e:	4770      	bx	lr

08000d50 <__aeabi_fdiv>:
 8000d50:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d58:	bf1e      	ittt	ne
 8000d5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d5e:	ea92 0f0c 	teqne	r2, ip
 8000d62:	ea93 0f0c 	teqne	r3, ip
 8000d66:	d069      	beq.n	8000e3c <__aeabi_fdiv+0xec>
 8000d68:	eba2 0203 	sub.w	r2, r2, r3
 8000d6c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d70:	0249      	lsls	r1, r1, #9
 8000d72:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d76:	d037      	beq.n	8000de8 <__aeabi_fdiv+0x98>
 8000d78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d7c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d80:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d84:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	bf38      	it	cc
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d92:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d96:	428b      	cmp	r3, r1
 8000d98:	bf24      	itt	cs
 8000d9a:	1a5b      	subcs	r3, r3, r1
 8000d9c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000da0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000da4:	bf24      	itt	cs
 8000da6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000daa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dae:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000db2:	bf24      	itt	cs
 8000db4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000db8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dbc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dc0:	bf24      	itt	cs
 8000dc2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dc6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dca:	011b      	lsls	r3, r3, #4
 8000dcc:	bf18      	it	ne
 8000dce:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000dd2:	d1e0      	bne.n	8000d96 <__aeabi_fdiv+0x46>
 8000dd4:	2afd      	cmp	r2, #253	; 0xfd
 8000dd6:	f63f af50 	bhi.w	8000c7a <__aeabi_fmul+0x92>
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de0:	bf08      	it	eq
 8000de2:	f020 0001 	biceq.w	r0, r0, #1
 8000de6:	4770      	bx	lr
 8000de8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dec:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df0:	327f      	adds	r2, #127	; 0x7f
 8000df2:	bfc2      	ittt	gt
 8000df4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000df8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfc:	4770      	bxgt	lr
 8000dfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e02:	f04f 0300 	mov.w	r3, #0
 8000e06:	3a01      	subs	r2, #1
 8000e08:	e737      	b.n	8000c7a <__aeabi_fmul+0x92>
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fdiv+0xc2>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fdiv+0xda>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e795      	b.n	8000d68 <__aeabi_fdiv+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	d108      	bne.n	8000e58 <__aeabi_fdiv+0x108>
 8000e46:	0242      	lsls	r2, r0, #9
 8000e48:	f47f af7d 	bne.w	8000d46 <__aeabi_fmul+0x15e>
 8000e4c:	ea93 0f0c 	teq	r3, ip
 8000e50:	f47f af70 	bne.w	8000d34 <__aeabi_fmul+0x14c>
 8000e54:	4608      	mov	r0, r1
 8000e56:	e776      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e58:	ea93 0f0c 	teq	r3, ip
 8000e5c:	d104      	bne.n	8000e68 <__aeabi_fdiv+0x118>
 8000e5e:	024b      	lsls	r3, r1, #9
 8000e60:	f43f af4c 	beq.w	8000cfc <__aeabi_fmul+0x114>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e76e      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e68:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e6c:	bf18      	it	ne
 8000e6e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e72:	d1ca      	bne.n	8000e0a <__aeabi_fdiv+0xba>
 8000e74:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e78:	f47f af5c 	bne.w	8000d34 <__aeabi_fmul+0x14c>
 8000e7c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e80:	f47f af3c 	bne.w	8000cfc <__aeabi_fmul+0x114>
 8000e84:	e75f      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e86:	bf00      	nop

08000e88 <__gesf2>:
 8000e88:	f04f 3cff 	mov.w	ip, #4294967295
 8000e8c:	e006      	b.n	8000e9c <__cmpsf2+0x4>
 8000e8e:	bf00      	nop

08000e90 <__lesf2>:
 8000e90:	f04f 0c01 	mov.w	ip, #1
 8000e94:	e002      	b.n	8000e9c <__cmpsf2+0x4>
 8000e96:	bf00      	nop

08000e98 <__cmpsf2>:
 8000e98:	f04f 0c01 	mov.w	ip, #1
 8000e9c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ea0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ea4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ea8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eac:	bf18      	it	ne
 8000eae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000eb2:	d011      	beq.n	8000ed8 <__cmpsf2+0x40>
 8000eb4:	b001      	add	sp, #4
 8000eb6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eba:	bf18      	it	ne
 8000ebc:	ea90 0f01 	teqne	r0, r1
 8000ec0:	bf58      	it	pl
 8000ec2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ec6:	bf88      	it	hi
 8000ec8:	17c8      	asrhi	r0, r1, #31
 8000eca:	bf38      	it	cc
 8000ecc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ed0:	bf18      	it	ne
 8000ed2:	f040 0001 	orrne.w	r0, r0, #1
 8000ed6:	4770      	bx	lr
 8000ed8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000edc:	d102      	bne.n	8000ee4 <__cmpsf2+0x4c>
 8000ede:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ee2:	d105      	bne.n	8000ef0 <__cmpsf2+0x58>
 8000ee4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ee8:	d1e4      	bne.n	8000eb4 <__cmpsf2+0x1c>
 8000eea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eee:	d0e1      	beq.n	8000eb4 <__cmpsf2+0x1c>
 8000ef0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_cfrcmple>:
 8000ef8:	4684      	mov	ip, r0
 8000efa:	4608      	mov	r0, r1
 8000efc:	4661      	mov	r1, ip
 8000efe:	e7ff      	b.n	8000f00 <__aeabi_cfcmpeq>

08000f00 <__aeabi_cfcmpeq>:
 8000f00:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f02:	f7ff ffc9 	bl	8000e98 <__cmpsf2>
 8000f06:	2800      	cmp	r0, #0
 8000f08:	bf48      	it	mi
 8000f0a:	f110 0f00 	cmnmi.w	r0, #0
 8000f0e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f10 <__aeabi_fcmpeq>:
 8000f10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f14:	f7ff fff4 	bl	8000f00 <__aeabi_cfcmpeq>
 8000f18:	bf0c      	ite	eq
 8000f1a:	2001      	moveq	r0, #1
 8000f1c:	2000      	movne	r0, #0
 8000f1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f22:	bf00      	nop

08000f24 <__aeabi_fcmplt>:
 8000f24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f28:	f7ff ffea 	bl	8000f00 <__aeabi_cfcmpeq>
 8000f2c:	bf34      	ite	cc
 8000f2e:	2001      	movcc	r0, #1
 8000f30:	2000      	movcs	r0, #0
 8000f32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f36:	bf00      	nop

08000f38 <__aeabi_fcmple>:
 8000f38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f3c:	f7ff ffe0 	bl	8000f00 <__aeabi_cfcmpeq>
 8000f40:	bf94      	ite	ls
 8000f42:	2001      	movls	r0, #1
 8000f44:	2000      	movhi	r0, #0
 8000f46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f4a:	bf00      	nop

08000f4c <__aeabi_fcmpge>:
 8000f4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f50:	f7ff ffd2 	bl	8000ef8 <__aeabi_cfrcmple>
 8000f54:	bf94      	ite	ls
 8000f56:	2001      	movls	r0, #1
 8000f58:	2000      	movhi	r0, #0
 8000f5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5e:	bf00      	nop

08000f60 <__aeabi_fcmpgt>:
 8000f60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f64:	f7ff ffc8 	bl	8000ef8 <__aeabi_cfrcmple>
 8000f68:	bf34      	ite	cc
 8000f6a:	2001      	movcc	r0, #1
 8000f6c:	2000      	movcs	r0, #0
 8000f6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f72:	bf00      	nop

08000f74 <__aeabi_f2uiz>:
 8000f74:	0042      	lsls	r2, r0, #1
 8000f76:	d20e      	bcs.n	8000f96 <__aeabi_f2uiz+0x22>
 8000f78:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f7c:	d30b      	bcc.n	8000f96 <__aeabi_f2uiz+0x22>
 8000f7e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f82:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f86:	d409      	bmi.n	8000f9c <__aeabi_f2uiz+0x28>
 8000f88:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f90:	fa23 f002 	lsr.w	r0, r3, r2
 8000f94:	4770      	bx	lr
 8000f96:	f04f 0000 	mov.w	r0, #0
 8000f9a:	4770      	bx	lr
 8000f9c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fa0:	d101      	bne.n	8000fa6 <__aeabi_f2uiz+0x32>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	d102      	bne.n	8000fac <__aeabi_f2uiz+0x38>
 8000fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8000faa:	4770      	bx	lr
 8000fac:	f04f 0000 	mov.w	r0, #0
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <fGetAinCalData>:
}
/*
 *
 */
float fGetAinCalData( AIN_NAME_t name, float raw_data)
{
 8000fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     float out_data = 0U;
      if ( name < AIN_NUMBER )
 8000fb8:	2802      	cmp	r0, #2
 8000fba:	d833      	bhi.n	8001024 <fGetAinCalData+0x70>
 8000fbc:	460e      	mov	r6, r1
     {
          if ( xAinData[ name ].coof_count == 0 )
 8000fbe:	4b1c      	ldr	r3, [pc, #112]	; (8001030 <fGetAinCalData+0x7c>)
 8000fc0:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 8000fc4:	b90b      	cbnz	r3, 8000fca <fGetAinCalData+0x16>
           {
               out_data = raw_data;
 8000fc6:	460f      	mov	r7, r1
 8000fc8:	e02d      	b.n	8001026 <fGetAinCalData+0x72>
    for (uint16_t i =  xAinData[ name ].index; i < (xAinData[ name ].index + xAinData[ name ].coof_count ); i++ )
 8000fca:	4a19      	ldr	r2, [pc, #100]	; (8001030 <fGetAinCalData+0x7c>)
 8000fcc:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8000fd0:	7842      	ldrb	r2, [r0, #1]
 8000fd2:	b294      	uxth	r4, r2
 8000fd4:	4615      	mov	r5, r2
 8000fd6:	eb03 0802 	add.w	r8, r3, r2
 8000fda:	4542      	cmp	r2, r8
 8000fdc:	da26      	bge.n	800102c <fGetAinCalData+0x78>
    float out_data = 0;
 8000fde:	2700      	movs	r7, #0
        if ( (i ==  (xAinData[ name ].index + xAinData[ name ].coof_count)) || (in_data <= xKoofData[i].data ) )
 8000fe0:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8001034 <fGetAinCalData+0x80>
 8000fe4:	e004      	b.n	8000ff0 <fGetAinCalData+0x3c>
    for (uint16_t i =  xAinData[ name ].index; i < (xAinData[ name ].index + xAinData[ name ].coof_count ); i++ )
 8000fe6:	3401      	adds	r4, #1
 8000fe8:	b2a4      	uxth	r4, r4
 8000fea:	4625      	mov	r5, r4
 8000fec:	4544      	cmp	r4, r8
 8000fee:	da1a      	bge.n	8001026 <fGetAinCalData+0x72>
        if ( (i ==  (xAinData[ name ].index + xAinData[ name ].coof_count)) || (in_data <= xKoofData[i].data ) )
 8000ff0:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000ff4:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 8000ff8:	4630      	mov	r0, r6
 8000ffa:	f7ff ff9d 	bl	8000f38 <__aeabi_fcmple>
 8000ffe:	2800      	cmp	r0, #0
 8001000:	d0f1      	beq.n	8000fe6 <fGetAinCalData+0x32>
            out_data = xKoofData[i].k * in_data + xKoofData[i].b;
 8001002:	006f      	lsls	r7, r5, #1
 8001004:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001008:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800100c:	6859      	ldr	r1, [r3, #4]
 800100e:	4630      	mov	r0, r6
 8001010:	f7ff fdea 	bl	8000be8 <__aeabi_fmul>
 8001014:	442f      	add	r7, r5
 8001016:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800101a:	68b9      	ldr	r1, [r7, #8]
 800101c:	f7ff fcdc 	bl	80009d8 <__addsf3>
 8001020:	4607      	mov	r7, r0
 8001022:	e7e0      	b.n	8000fe6 <fGetAinCalData+0x32>
     float out_data = 0U;
 8001024:	2700      	movs	r7, #0
           {
               out_data = fConvertCalData( name, raw_data);
           }
      }
      return ( out_data );
}
 8001026:	4638      	mov	r0, r7
 8001028:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    float out_data = 0;
 800102c:	2700      	movs	r7, #0
      return ( out_data );
 800102e:	e7fa      	b.n	8001026 <fGetAinCalData+0x72>
 8001030:	20000148 	.word	0x20000148
 8001034:	20000150 	.word	0x20000150

08001038 <eAinCalDataConfig>:

CAL_ERROR_CODE  eAinCalDataConfig(AIN_NAME_t name, uint8_t cal_point_count )
{
    CAL_ERROR_CODE res = CAL_SUCCESS;
    if (cal_point_count == 1)
 8001038:	2901      	cmp	r1, #1
 800103a:	d01e      	beq.n	800107a <eAinCalDataConfig+0x42>
 800103c:	4603      	mov	r3, r0
    {
        res = CAL_POINT_COUNT_ERROR;
    }
    else
    {
        if (  xAinData[ name ].coof_count == 0 )
 800103e:	4a11      	ldr	r2, [pc, #68]	; (8001084 <eAinCalDataConfig+0x4c>)
 8001040:	f812 0010 	ldrb.w	r0, [r2, r0, lsl #1]
 8001044:	b998      	cbnz	r0, 800106e <eAinCalDataConfig+0x36>
{
 8001046:	b410      	push	{r4}
        {
            if  ( (cal_point_count +  usCurMaxIndex) > MAX_TOTAL_CAL_POINT )
 8001048:	4a0f      	ldr	r2, [pc, #60]	; (8001088 <eAinCalDataConfig+0x50>)
 800104a:	8812      	ldrh	r2, [r2, #0]
 800104c:	188c      	adds	r4, r1, r2
 800104e:	2c3c      	cmp	r4, #60	; 0x3c
 8001050:	d815      	bhi.n	800107e <eAinCalDataConfig+0x46>
            {
                res = CAL_MEMORY_FULL;
            }
            else
            {
                xAinData[ name ].coof_count = cal_point_count - 1;
 8001052:	4c0c      	ldr	r4, [pc, #48]	; (8001084 <eAinCalDataConfig+0x4c>)
 8001054:	f101 3cff 	add.w	ip, r1, #4294967295
 8001058:	f804 c013 	strb.w	ip, [r4, r3, lsl #1]
                xAinData[ name ].index = usCurMaxIndex;
 800105c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8001060:	705a      	strb	r2, [r3, #1]
                usCurMaxIndex += cal_point_count - 1;
 8001062:	3a01      	subs	r2, #1
 8001064:	4411      	add	r1, r2
 8001066:	4b08      	ldr	r3, [pc, #32]	; (8001088 <eAinCalDataConfig+0x50>)
 8001068:	8019      	strh	r1, [r3, #0]
                    res = CAL_OVERWRITE_ERROR;
                }
        }
    }
    return ( res );
}
 800106a:	bc10      	pop	{r4}
 800106c:	4770      	bx	lr
                if ( xAinData[ name ].coof_count != ( cal_point_count- 1))
 800106e:	3901      	subs	r1, #1
                    res = CAL_OVERWRITE_ERROR;
 8001070:	4288      	cmp	r0, r1
 8001072:	bf14      	ite	ne
 8001074:	2002      	movne	r0, #2
 8001076:	2000      	moveq	r0, #0
 8001078:	4770      	bx	lr
        res = CAL_POINT_COUNT_ERROR;
 800107a:	2003      	movs	r0, #3
}
 800107c:	4770      	bx	lr
                res = CAL_MEMORY_FULL;
 800107e:	2001      	movs	r0, #1
 8001080:	e7f3      	b.n	800106a <eAinCalDataConfig+0x32>
 8001082:	bf00      	nop
 8001084:	20000148 	.word	0x20000148
 8001088:	20000144 	.word	0x20000144

0800108c <vABLineKoofFinde>:

/*
 *
 */
void vABLineKoofFinde(float * k, float * b,  float x1, float x2, float y1, float y2)
{
 800108c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001090:	4607      	mov	r7, r0
 8001092:	460e      	mov	r6, r1
 8001094:	4615      	mov	r5, r2
 8001096:	461c      	mov	r4, r3
 8001098:	f8dd a020 	ldr.w	sl, [sp, #32]
 800109c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
		 *k = (float)( y1 - y2 ) /(float) (x1 - x2);
 80010a0:	4649      	mov	r1, r9
 80010a2:	4650      	mov	r0, sl
 80010a4:	f7ff fc96 	bl	80009d4 <__aeabi_fsub>
 80010a8:	4680      	mov	r8, r0
 80010aa:	4621      	mov	r1, r4
 80010ac:	4628      	mov	r0, r5
 80010ae:	f7ff fc91 	bl	80009d4 <__aeabi_fsub>
 80010b2:	4601      	mov	r1, r0
 80010b4:	4640      	mov	r0, r8
 80010b6:	f7ff fe4b 	bl	8000d50 <__aeabi_fdiv>
 80010ba:	6038      	str	r0, [r7, #0]
		 *b = (float)(y1*x2 - y2*x1) / (float) (x2-x1);
 80010bc:	4621      	mov	r1, r4
 80010be:	4650      	mov	r0, sl
 80010c0:	f7ff fd92 	bl	8000be8 <__aeabi_fmul>
 80010c4:	4607      	mov	r7, r0
 80010c6:	4629      	mov	r1, r5
 80010c8:	4648      	mov	r0, r9
 80010ca:	f7ff fd8d 	bl	8000be8 <__aeabi_fmul>
 80010ce:	4601      	mov	r1, r0
 80010d0:	4638      	mov	r0, r7
 80010d2:	f7ff fc7f 	bl	80009d4 <__aeabi_fsub>
 80010d6:	4607      	mov	r7, r0
 80010d8:	4629      	mov	r1, r5
 80010da:	4620      	mov	r0, r4
 80010dc:	f7ff fc7a 	bl	80009d4 <__aeabi_fsub>
 80010e0:	4601      	mov	r1, r0
 80010e2:	4638      	mov	r0, r7
 80010e4:	f7ff fe34 	bl	8000d50 <__aeabi_fdiv>
 80010e8:	6030      	str	r0, [r6, #0]
		 return;
}
 80010ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080010f0 <eSetAinCalPoint>:
	if ( PointNumber < xAinData[ name ].coof_count)
 80010f0:	4b14      	ldr	r3, [pc, #80]	; (8001144 <eSetAinCalPoint+0x54>)
 80010f2:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d801      	bhi.n	80010fe <eSetAinCalPoint+0xe>
		res = CAL_OVERWRITE_ERROR;
 80010fa:	2002      	movs	r0, #2
}
 80010fc:	4770      	bx	lr
{
 80010fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001100:	b083      	sub	sp, #12
 8001102:	460d      	mov	r5, r1
		uint16_t index = PointNumber + xAinData[ name ].index;
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <eSetAinCalPoint+0x54>)
 8001106:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800110a:	7844      	ldrb	r4, [r0, #1]
 800110c:	4422      	add	r2, r4
 800110e:	b294      	uxth	r4, r2
		vABLineKoofFinde ( &xKoofData[index].k, &xKoofData[index].b,
 8001110:	0067      	lsls	r7, r4, #1
 8001112:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8001116:	0080      	lsls	r0, r0, #2
 8001118:	4e0b      	ldr	r6, [pc, #44]	; (8001148 <eSetAinCalPoint+0x58>)
 800111a:	f100 0108 	add.w	r1, r0, #8
 800111e:	3004      	adds	r0, #4
 8001120:	68ab      	ldr	r3, [r5, #8]
 8001122:	9301      	str	r3, [sp, #4]
 8001124:	682b      	ldr	r3, [r5, #0]
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	68eb      	ldr	r3, [r5, #12]
 800112a:	686a      	ldr	r2, [r5, #4]
 800112c:	4431      	add	r1, r6
 800112e:	4430      	add	r0, r6
 8001130:	f7ff ffac 	bl	800108c <vABLineKoofFinde>
		xKoofData[index].data = cal_point[ 1 ].X;
 8001134:	68eb      	ldr	r3, [r5, #12]
 8001136:	443c      	add	r4, r7
 8001138:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
	CAL_ERROR_CODE res = CAL_SUCCESS;
 800113c:	2000      	movs	r0, #0
}
 800113e:	b003      	add	sp, #12
 8001140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001142:	bf00      	nop
 8001144:	20000148 	.word	0x20000148
 8001148:	20000150 	.word	0x20000150

0800114c <eDinConfig>:
}
/*
 *
 */
DIN_FUNCTION_ERROR_t eDinConfig( uint8_t ucCh, DIN_INPUT_TYPE inType, uint32_t ulHFront, uint32_t ulLFront)
{
 800114c:	b570      	push	{r4, r5, r6, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	461d      	mov	r5, r3
	DIN_FUNCTION_ERROR_t eRes = DIN_WRONG_CHANNEL_NUMBER ;
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001152:	2300      	movs	r3, #0
 8001154:	9301      	str	r3, [sp, #4]
 8001156:	9303      	str	r3, [sp, #12]
	if ( ucCh < DIN_CHANNEL)
 8001158:	2808      	cmp	r0, #8
 800115a:	d827      	bhi.n	80011ac <eDinConfig+0x60>
 800115c:	4604      	mov	r4, r0
 800115e:	4616      	mov	r6, r2
	{
		xDinConfig[ucCh].eInputType = inType;
 8001160:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <eDinConfig+0x64>)
 8001162:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8001166:	7399      	strb	r1, [r3, #14]
		xDinConfig[ucCh].ucValue 	= (xDinConfig[ucCh].eInputType == DIN_CONFIG_POSITIVE ) ? 0U : 1U;
 8001168:	1e4a      	subs	r2, r1, #1
 800116a:	bf18      	it	ne
 800116c:	2201      	movne	r2, #1
 800116e:	731a      	strb	r2, [r3, #12]
		GPIO_InitStruct.Pin 		= xDinPortConfig[ucCh].Pin;
 8001170:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <eDinConfig+0x68>)
 8001172:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 8001176:	9300      	str	r3, [sp, #0]

		if ( xDinConfig[ucCh].eInputType == RPM_CONFIG )
 8001178:	2902      	cmp	r1, #2
 800117a:	d011      	beq.n	80011a0 <eDinConfig+0x54>
		{
			xDinConfig[ucCh].eInputType = DIN_CONFIG_POSITIVE;
		}
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800117c:	2301      	movs	r3, #1
 800117e:	9302      	str	r3, [sp, #8]
		HAL_GPIO_Init(xDinPortConfig[ucCh].GPIOx,&GPIO_InitStruct);
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <eDinConfig+0x68>)
 8001182:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8001186:	4669      	mov	r1, sp
 8001188:	6858      	ldr	r0, [r3, #4]
 800118a:	f002 f887 	bl	800329c <HAL_GPIO_Init>
		xDinConfig[ucCh].ulHighCounter = ulHFront;
 800118e:	4808      	ldr	r0, [pc, #32]	; (80011b0 <eDinConfig+0x64>)
 8001190:	eb00 1404 	add.w	r4, r0, r4, lsl #4
 8001194:	60a6      	str	r6, [r4, #8]
		xDinConfig[ucCh].ulLowCounter = ulLFront;
 8001196:	6065      	str	r5, [r4, #4]
		xDinConfig[ucCh].ucTempValue = 0U;
 8001198:	2000      	movs	r0, #0
 800119a:	7360      	strb	r0, [r4, #13]
		eRes = DIN_CONFIG_OK;
	}
	return ( eRes );
}
 800119c:	b004      	add	sp, #16
 800119e:	bd70      	pop	{r4, r5, r6, pc}
			xDinConfig[ucCh].eInputType = DIN_CONFIG_POSITIVE;
 80011a0:	4b03      	ldr	r3, [pc, #12]	; (80011b0 <eDinConfig+0x64>)
 80011a2:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80011a6:	2201      	movs	r2, #1
 80011a8:	739a      	strb	r2, [r3, #14]
 80011aa:	e7e7      	b.n	800117c <eDinConfig+0x30>
	DIN_FUNCTION_ERROR_t eRes = DIN_WRONG_CHANNEL_NUMBER ;
 80011ac:	2001      	movs	r0, #1
 80011ae:	e7f5      	b.n	800119c <eDinConfig+0x50>
 80011b0:	20000420 	.word	0x20000420
 80011b4:	08007c1c 	.word	0x08007c1c

080011b8 <vADCReady>:
	{
		 ADC_OLD_RAW[i] = 0x00;
	}
}
void vADCReady()
{
 80011b8:	b510      	push	{r4, lr}
	 static portBASE_TYPE xHigherPriorityTaskWoken;
	  xHigherPriorityTaskWoken = pdFALSE;
 80011ba:	4c0b      	ldr	r4, [pc, #44]	; (80011e8 <vADCReady+0x30>)
 80011bc:	2300      	movs	r3, #0
 80011be:	6023      	str	r3, [r4, #0]
	   xEventGroupSetBitsFromISR(xSystemEventGroupHandle, AIN_READY, &xHigherPriorityTaskWoken );
 80011c0:	4622      	mov	r2, r4
 80011c2:	2102      	movs	r1, #2
 80011c4:	4b09      	ldr	r3, [pc, #36]	; (80011ec <vADCReady+0x34>)
 80011c6:	6818      	ldr	r0, [r3, #0]
 80011c8:	f004 fe56 	bl	8005e78 <xEventGroupSetBitsFromISR>
	   portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 80011cc:	6823      	ldr	r3, [r4, #0]
 80011ce:	b14b      	cbz	r3, 80011e4 <vADCReady+0x2c>
 80011d0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80011d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011d8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80011dc:	f3bf 8f4f 	dsb	sy
 80011e0:	f3bf 8f6f 	isb	sy
	   return;
}
 80011e4:	bd10      	pop	{r4, pc}
 80011e6:	bf00      	nop
 80011e8:	200004b8 	.word	0x200004b8
 80011ec:	200004bc 	.word	0x200004bc

080011f0 <vGetAverDataFromRAW>:
 /*
  * Функция вытаскивает из входного буфера Indata  (размером FrameSize*BufferSize) со смещением InIndex FrameSize отсчетов,
  * счетает среднее арефмитическое и записывает в буффер OutData со смещением OutIndex
  */
  void vGetAverDataFromRAW(uint16_t * InData, uint16_t *OutData, uint8_t InIndex, uint8_t OutIndex, uint8_t Size, uint16_t BufferSize)
 {
 80011f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	f89d 5020 	ldrb.w	r5, [sp, #32]
 	volatile uint32_t temp;
 	for (uint8_t i=0; i<Size; i++ )
 80011fa:	b345      	cbz	r5, 800124e <vGetAverDataFromRAW+0x5e>
 80011fc:	eb01 0e43 	add.w	lr, r1, r3, lsl #1
 8001200:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8001204:	3d01      	subs	r5, #1
 8001206:	b2ec      	uxtb	r4, r5
 8001208:	4423      	add	r3, r4
 800120a:	3102      	adds	r1, #2
 800120c:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 8001210:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
 8001214:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 	{
 		temp = 0;
 8001218:	2700      	movs	r7, #0
 800121a:	f04f 0803 	mov.w	r8, #3
 		for (uint8_t j=0;j < ADC_FRAME_SIZE; j++ )
 		{
 		  temp += (InData[ InIndex + i + j * BufferSize ]);
 		}
 		OutData[ OutIndex + i ] = temp / ADC_FRAME_SIZE;
 800121e:	4d0d      	ldr	r5, [pc, #52]	; (8001254 <vGetAverDataFromRAW+0x64>)
 8001220:	e008      	b.n	8001234 <vGetAverDataFromRAW+0x44>
 8001222:	9b01      	ldr	r3, [sp, #4]
 8001224:	fba5 2303 	umull	r2, r3, r5, r3
 8001228:	085b      	lsrs	r3, r3, #1
 800122a:	f82e 3b02 	strh.w	r3, [lr], #2
 	for (uint8_t i=0; i<Size; i++ )
 800122e:	3002      	adds	r0, #2
 8001230:	45a6      	cmp	lr, r4
 8001232:	d00c      	beq.n	800124e <vGetAverDataFromRAW+0x5e>
 		temp = 0;
 8001234:	9701      	str	r7, [sp, #4]
 8001236:	4601      	mov	r1, r0
 8001238:	4643      	mov	r3, r8
 		  temp += (InData[ InIndex + i + j * BufferSize ]);
 800123a:	9e01      	ldr	r6, [sp, #4]
 800123c:	880a      	ldrh	r2, [r1, #0]
 800123e:	4432      	add	r2, r6
 8001240:	9201      	str	r2, [sp, #4]
 		for (uint8_t j=0;j < ADC_FRAME_SIZE; j++ )
 8001242:	3b01      	subs	r3, #1
 8001244:	4461      	add	r1, ip
 8001246:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800124a:	d1f6      	bne.n	800123a <vGetAverDataFromRAW+0x4a>
 800124c:	e7e9      	b.n	8001222 <vGetAverDataFromRAW+0x32>
 	}
 	return;
 }
 800124e:	b002      	add	sp, #8
 8001250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001254:	aaaaaaab 	.word	0xaaaaaaab

08001258 <vAinGetData>:
	*old_output = output;
	return output;
}

uint16_t vAinGetData(AIN_INPUT_NAME channel)
 {
 8001258:	b5d0      	push	{r4, r6, r7, lr}
 800125a:	b084      	sub	sp, #16
	 float temp;
	 ADC_RAW[channel] = vRCFilter(ADC_RAW[channel], &ADC_OLD_RAW[channel]);
 800125c:	4a1e      	ldr	r2, [pc, #120]	; (80012d8 <vAinGetData+0x80>)
	volatile uint32_t new = input;
 800125e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
 8001262:	9302      	str	r3, [sp, #8]
	volatile uint32_t old = *old_output;
 8001264:	491d      	ldr	r1, [pc, #116]	; (80012dc <vAinGetData+0x84>)
 8001266:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
 800126a:	9303      	str	r3, [sp, #12]
	volatile uint16_t  output =  ( A * old + (256-A)*new )>>8;
 800126c:	9c03      	ldr	r4, [sp, #12]
 800126e:	9b02      	ldr	r3, [sp, #8]
 8001270:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	26dc      	movs	r6, #220	; 0xdc
 8001278:	fb06 3304 	mla	r3, r6, r4, r3
 800127c:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8001280:	f8ad 3006 	strh.w	r3, [sp, #6]
	*old_output = output;
 8001284:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001288:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
	return output;
 800128c:	f8bd 4006 	ldrh.w	r4, [sp, #6]
 8001290:	b2a4      	uxth	r4, r4
	 ADC_RAW[channel] = vRCFilter(ADC_RAW[channel], &ADC_OLD_RAW[channel]);
 8001292:	f822 4010 	strh.w	r4, [r2, r0, lsl #1]
	 temp =  ADC_RAW[channel]*RA/(4095- ADC_RAW[channel]);
 8001296:	4620      	mov	r0, r4
 8001298:	f7ff f8ac 	bl	80003f4 <__aeabi_i2d>
 800129c:	a30c      	add	r3, pc, #48	; (adr r3, 80012d0 <vAinGetData+0x78>)
 800129e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a2:	f7ff f911 	bl	80004c8 <__aeabi_dmul>
 80012a6:	4606      	mov	r6, r0
 80012a8:	460f      	mov	r7, r1
 80012aa:	f5c4 607f 	rsb	r0, r4, #4080	; 0xff0
 80012ae:	300f      	adds	r0, #15
 80012b0:	f7ff f8a0 	bl	80003f4 <__aeabi_i2d>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4630      	mov	r0, r6
 80012ba:	4639      	mov	r1, r7
 80012bc:	f7ff fa2e 	bl	800071c <__aeabi_ddiv>
 80012c0:	f7ff fb34 	bl	800092c <__aeabi_d2f>
	 return (uint16_t)temp;
 80012c4:	f7ff fe56 	bl	8000f74 <__aeabi_f2uiz>
 }
 80012c8:	b280      	uxth	r0, r0
 80012ca:	b004      	add	sp, #16
 80012cc:	bdd0      	pop	{r4, r6, r7, pc}
 80012ce:	bf00      	nop
 80012d0:	00000000 	.word	0x00000000
 80012d4:	40c38800 	.word	0x40c38800
 80012d8:	20000418 	.word	0x20000418
 80012dc:	20000410 	.word	0x20000410

080012e0 <uiGetDinMask>:
  *
  */
 uint32_t uiGetDinMask()
 {
 	uint32_t uiMask = 0;
 	for (int8_t i = (DIN_CHANNEL -1);  i > -1 ; i--)
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <uiGetDinMask+0x1c>)
 80012e2:	f1a3 0190 	sub.w	r1, r3, #144	; 0x90
 	uint32_t uiMask = 0;
 80012e6:	2000      	movs	r0, #0
 	{
 		uiMask <<=1;
 		uiMask |= ( xDinConfig[ i ].ucValue & 0x01 );
 80012e8:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80012ec:	f002 0201 	and.w	r2, r2, #1
 80012f0:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
 	for (int8_t i = (DIN_CHANNEL -1);  i > -1 ; i--)
 80012f4:	3b10      	subs	r3, #16
 80012f6:	428b      	cmp	r3, r1
 80012f8:	d1f6      	bne.n	80012e8 <uiGetDinMask+0x8>
 	}
 	return ( uiMask );
 }
 80012fa:	4770      	bx	lr
 80012fc:	20000420 	.word	0x20000420

08001300 <vDTask>:
 {
 8001300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001304:	b08b      	sub	sp, #44	; 0x2c
	  xSystemEventGroupHandle =  xGetSystemControlEvent();
 8001306:	f000 fa17 	bl	8001738 <xGetSystemControlEvent>
 800130a:	4bb2      	ldr	r3, [pc, #712]	; (80015d4 <vDTask+0x2d4>)
 800130c:	6018      	str	r0, [r3, #0]
	eDinConfig( INPUT_1, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 800130e:	230a      	movs	r3, #10
 8001310:	461a      	mov	r2, r3
 8001312:	2100      	movs	r1, #0
 8001314:	4608      	mov	r0, r1
 8001316:	f7ff ff19 	bl	800114c <eDinConfig>
	eDinConfig( INPUT_2, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 800131a:	230a      	movs	r3, #10
 800131c:	461a      	mov	r2, r3
 800131e:	2100      	movs	r1, #0
 8001320:	2001      	movs	r0, #1
 8001322:	f7ff ff13 	bl	800114c <eDinConfig>
	eDinConfig( INPUT_3, DIN_CONFIG_NEGATIVE, DEF_H_FRONT, DEF_L_FRONT );
 8001326:	230a      	movs	r3, #10
 8001328:	461a      	mov	r2, r3
 800132a:	2100      	movs	r1, #0
 800132c:	2002      	movs	r0, #2
 800132e:	f7ff ff0d 	bl	800114c <eDinConfig>
	eDinConfig( INPUT_4, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 8001332:	230a      	movs	r3, #10
 8001334:	461a      	mov	r2, r3
 8001336:	2100      	movs	r1, #0
 8001338:	2003      	movs	r0, #3
 800133a:	f7ff ff07 	bl	800114c <eDinConfig>
	eDinConfig( INPUT_5, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 800133e:	230a      	movs	r3, #10
 8001340:	461a      	mov	r2, r3
 8001342:	2100      	movs	r1, #0
 8001344:	2004      	movs	r0, #4
 8001346:	f7ff ff01 	bl	800114c <eDinConfig>
	eDinConfig( INPUT_6, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 800134a:	230a      	movs	r3, #10
 800134c:	461a      	mov	r2, r3
 800134e:	2100      	movs	r1, #0
 8001350:	2005      	movs	r0, #5
 8001352:	f7ff fefb 	bl	800114c <eDinConfig>
	eDinConfig( INPUT_7, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 8001356:	230a      	movs	r3, #10
 8001358:	461a      	mov	r2, r3
 800135a:	2100      	movs	r1, #0
 800135c:	2006      	movs	r0, #6
 800135e:	f7ff fef5 	bl	800114c <eDinConfig>
	eDinConfig( INPUT_8, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 8001362:	230a      	movs	r3, #10
 8001364:	461a      	mov	r2, r3
 8001366:	2100      	movs	r1, #0
 8001368:	2007      	movs	r0, #7
 800136a:	f7ff feef 	bl	800114c <eDinConfig>
	eDinConfig( INPUT_9, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 800136e:	230a      	movs	r3, #10
 8001370:	461a      	mov	r2, r3
 8001372:	2100      	movs	r1, #0
 8001374:	2008      	movs	r0, #8
 8001376:	f7ff fee9 	bl	800114c <eDinConfig>
	eAinCalDataConfig(AIN_2,20);
 800137a:	2114      	movs	r1, #20
 800137c:	2001      	movs	r0, #1
 800137e:	f7ff fe5b 	bl	8001038 <eAinCalDataConfig>
	for (int i = 0;i<19;i++)
 8001382:	4c95      	ldr	r4, [pc, #596]	; (80015d8 <vDTask+0x2d8>)
	eAinCalDataConfig(AIN_2,20);
 8001384:	4625      	mov	r5, r4
 8001386:	2600      	movs	r6, #0
		eSetAinCalPoint(AIN_2,&d[0],i);
 8001388:	2701      	movs	r7, #1
		d[0].X = CalPoint[i][1];
 800138a:	8868      	ldrh	r0, [r5, #2]
 800138c:	f7ff fbd4 	bl	8000b38 <__aeabi_ui2f>
 8001390:	9006      	str	r0, [sp, #24]
		d[0].Y = CalPoint[i][0];
 8001392:	8828      	ldrh	r0, [r5, #0]
 8001394:	f7ff fbd0 	bl	8000b38 <__aeabi_ui2f>
 8001398:	9005      	str	r0, [sp, #20]
		d[1].X = CalPoint[i+1][1];
 800139a:	88e8      	ldrh	r0, [r5, #6]
 800139c:	f7ff fbcc 	bl	8000b38 <__aeabi_ui2f>
 80013a0:	9008      	str	r0, [sp, #32]
		d[1].Y = CalPoint[i+1][0];
 80013a2:	f835 0f04 	ldrh.w	r0, [r5, #4]!
 80013a6:	f7ff fbc7 	bl	8000b38 <__aeabi_ui2f>
 80013aa:	9007      	str	r0, [sp, #28]
		eSetAinCalPoint(AIN_2,&d[0],i);
 80013ac:	b2b2      	uxth	r2, r6
 80013ae:	a905      	add	r1, sp, #20
 80013b0:	4638      	mov	r0, r7
 80013b2:	f7ff fe9d 	bl	80010f0 <eSetAinCalPoint>
	for (int i = 0;i<19;i++)
 80013b6:	3601      	adds	r6, #1
 80013b8:	2e13      	cmp	r6, #19
 80013ba:	d1e6      	bne.n	800138a <vDTask+0x8a>
	eAinCalDataConfig(AIN_3,20);
 80013bc:	2114      	movs	r1, #20
 80013be:	2002      	movs	r0, #2
 80013c0:	f7ff fe3a 	bl	8001038 <eAinCalDataConfig>
 80013c4:	2500      	movs	r5, #0
		eSetAinCalPoint(AIN_3,&d[0],i);
 80013c6:	2602      	movs	r6, #2
		d[0].X = CalPoint[i][1];
 80013c8:	8860      	ldrh	r0, [r4, #2]
 80013ca:	f7ff fbb5 	bl	8000b38 <__aeabi_ui2f>
 80013ce:	9006      	str	r0, [sp, #24]
		d[0].Y = CalPoint[i][0];
 80013d0:	8820      	ldrh	r0, [r4, #0]
 80013d2:	f7ff fbb1 	bl	8000b38 <__aeabi_ui2f>
 80013d6:	9005      	str	r0, [sp, #20]
		d[1].X = CalPoint[i+1][1];
 80013d8:	88e0      	ldrh	r0, [r4, #6]
 80013da:	f7ff fbad 	bl	8000b38 <__aeabi_ui2f>
 80013de:	9008      	str	r0, [sp, #32]
		d[1].Y = CalPoint[i+1][0];
 80013e0:	f834 0f04 	ldrh.w	r0, [r4, #4]!
 80013e4:	f7ff fba8 	bl	8000b38 <__aeabi_ui2f>
 80013e8:	9007      	str	r0, [sp, #28]
		eSetAinCalPoint(AIN_3,&d[0],i);
 80013ea:	b2aa      	uxth	r2, r5
 80013ec:	a905      	add	r1, sp, #20
 80013ee:	4630      	mov	r0, r6
 80013f0:	f7ff fe7e 	bl	80010f0 <eSetAinCalPoint>
	for (int i = 0;i<19;i++)
 80013f4:	3501      	adds	r5, #1
 80013f6:	2d13      	cmp	r5, #19
 80013f8:	d1e6      	bne.n	80013c8 <vDTask+0xc8>
		xDoutConfig[channel].eOutConfig = type;
 80013fa:	4b78      	ldr	r3, [pc, #480]	; (80015dc <vDTask+0x2dc>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	705a      	strb	r2, [r3, #1]
 8001400:	70da      	strb	r2, [r3, #3]
 8001402:	715a      	strb	r2, [r3, #5]
 8001404:	71da      	strb	r2, [r3, #7]
		 ADC_OLD_RAW[i] = 0x00;
 8001406:	4a76      	ldr	r2, [pc, #472]	; (80015e0 <vDTask+0x2e0>)
 8001408:	2300      	movs	r3, #0
 800140a:	8013      	strh	r3, [r2, #0]
 800140c:	8053      	strh	r3, [r2, #2]
 800140e:	8093      	strh	r3, [r2, #4]
	  uint8_t init_timer = 0;
 8001410:	9303      	str	r3, [sp, #12]
		    HAL_ADC_Start_DMA(&hadc1,&ADC1_DMABuffer[0], 9);
 8001412:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 80015e4 <vDTask+0x2e4>
		  	vTaskDelay(1);
 8001416:	f04f 0801 	mov.w	r8, #1
									xDinConfig[i].ulCounter = 0U;
 800141a:	4699      	mov	r9, r3
			if (temp1>35000)
 800141c:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 80015e8 <vDTask+0x2e8>
}
 8001420:	e081      	b.n	8001526 <vDTask+0x226>
				   DataReadyFlag = 1;
 8001422:	4b72      	ldr	r3, [pc, #456]	; (80015ec <vDTask+0x2ec>)
 8001424:	f883 8000 	strb.w	r8, [r3]
				   xEventGroupSetBits(xSystemEventGroupHandle, DIN_READY );
 8001428:	4641      	mov	r1, r8
 800142a:	4b6a      	ldr	r3, [pc, #424]	; (80015d4 <vDTask+0x2d4>)
 800142c:	6818      	ldr	r0, [r3, #0]
 800142e:	f004 fcd5 	bl	8005ddc <xEventGroupSetBits>
 8001432:	e08f      	b.n	8001554 <vDTask+0x254>
									if (xDinConfig[i].ulCounter > ( (xDinConfig[i].ucTempValue == GPIO_PIN_RESET) ? xDinConfig[i].ulHighCounter : xDinConfig[i].ulLowCounter ) )
 8001434:	6862      	ldr	r2, [r4, #4]
 8001436:	e016      	b.n	8001466 <vDTask+0x166>
									xDinConfig[i].ulCounter = 0U;
 8001438:	f8c4 9000 	str.w	r9, [r4]
			for (uint8_t i = 0U; i < DIN_CHANNEL; i++)
 800143c:	3410      	adds	r4, #16
 800143e:	3508      	adds	r5, #8
 8001440:	42bc      	cmp	r4, r7
 8001442:	d01b      	beq.n	800147c <vDTask+0x17c>
						if ( xDinConfig[i].eInputType != RPM_CONFIG )
 8001444:	4626      	mov	r6, r4
 8001446:	7ba3      	ldrb	r3, [r4, #14]
 8001448:	2b02      	cmp	r3, #2
 800144a:	d0f7      	beq.n	800143c <vDTask+0x13c>
							uint8_t uсDinState = HAL_GPIO_ReadPin( xDinPortConfig[i].GPIOx, xDinPortConfig[i].Pin);
 800144c:	8829      	ldrh	r1, [r5, #0]
 800144e:	6868      	ldr	r0, [r5, #4]
 8001450:	f002 f85e 	bl	8003510 <HAL_GPIO_ReadPin>
							if (uсDinState != xDinConfig[i].ucTempValue )
 8001454:	7b62      	ldrb	r2, [r4, #13]
 8001456:	4282      	cmp	r2, r0
 8001458:	d0ee      	beq.n	8001438 <vDTask+0x138>
									xDinConfig[i].ulCounter ++ ;
 800145a:	6823      	ldr	r3, [r4, #0]
 800145c:	3301      	adds	r3, #1
 800145e:	6023      	str	r3, [r4, #0]
									if (xDinConfig[i].ulCounter > ( (xDinConfig[i].ucTempValue == GPIO_PIN_RESET) ? xDinConfig[i].ulHighCounter : xDinConfig[i].ulLowCounter ) )
 8001460:	2a00      	cmp	r2, #0
 8001462:	d1e7      	bne.n	8001434 <vDTask+0x134>
 8001464:	68a2      	ldr	r2, [r4, #8]
 8001466:	4293      	cmp	r3, r2
 8001468:	d9e8      	bls.n	800143c <vDTask+0x13c>
												xDinConfig[i].ucValue = uсDinState  ^ ( (~xDinConfig[i].eInputType) & 0x1);
 800146a:	7bb3      	ldrb	r3, [r6, #14]
 800146c:	f083 0301 	eor.w	r3, r3, #1
 8001470:	f003 0301 	and.w	r3, r3, #1
 8001474:	4043      	eors	r3, r0
 8001476:	7333      	strb	r3, [r6, #12]
												xDinConfig[i].ucTempValue = uсDinState ;
 8001478:	7370      	strb	r0, [r6, #13]
 800147a:	e7df      	b.n	800143c <vDTask+0x13c>
			xEventGroupWaitBits(xSystemEventGroupHandle,  AIN_READY,  pdFALSE, pdTRUE, portMAX_DELAY );
 800147c:	f04f 33ff 	mov.w	r3, #4294967295
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	4643      	mov	r3, r8
 8001484:	464a      	mov	r2, r9
 8001486:	2102      	movs	r1, #2
 8001488:	4852      	ldr	r0, [pc, #328]	; (80015d4 <vDTask+0x2d4>)
 800148a:	6800      	ldr	r0, [r0, #0]
 800148c:	f004 fc1b 	bl	8005cc6 <xEventGroupWaitBits>
			HAL_ADC_Stop_DMA(&hadc1);
 8001490:	4857      	ldr	r0, [pc, #348]	; (80015f0 <vDTask+0x2f0>)
 8001492:	f001 fb9b 	bl	8002bcc <HAL_ADC_Stop_DMA>
			vGetAverDataFromRAW(&ADC1_DMABuffer[0],&ADC_RAW[0],0,0,3,3);
 8001496:	2303      	movs	r3, #3
 8001498:	9301      	str	r3, [sp, #4]
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	464b      	mov	r3, r9
 800149e:	464a      	mov	r2, r9
 80014a0:	4954      	ldr	r1, [pc, #336]	; (80015f4 <vDTask+0x2f4>)
 80014a2:	4658      	mov	r0, fp
 80014a4:	f7ff fea4 	bl	80011f0 <vGetAverDataFromRAW>
			temp1 = vAinGetData(AIN_2);
 80014a8:	4640      	mov	r0, r8
 80014aa:	f7ff fed5 	bl	8001258 <vAinGetData>
 80014ae:	f7ff fb43 	bl	8000b38 <__aeabi_ui2f>
 80014b2:	9009      	str	r0, [sp, #36]	; 0x24
			if (temp1>35000)
 80014b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80014b6:	4651      	mov	r1, sl
 80014b8:	f7ff fd52 	bl	8000f60 <__aeabi_fcmpgt>
 80014bc:	2800      	cmp	r0, #0
 80014be:	d060      	beq.n	8001582 <vDTask+0x282>
				vSetRegInput(WATER_TEMP,-1);
 80014c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80014c4:	4640      	mov	r0, r8
 80014c6:	f000 fc15 	bl	8001cf4 <vSetRegInput>
				vSetRegInput(ERROR_STATUS,usGetRegInput(ERROR_STATUS) | WATER_TEMP_ERROR);
 80014ca:	2008      	movs	r0, #8
 80014cc:	f000 fc0c 	bl	8001ce8 <usGetRegInput>
 80014d0:	f040 0101 	orr.w	r1, r0, #1
 80014d4:	b289      	uxth	r1, r1
 80014d6:	2008      	movs	r0, #8
 80014d8:	f000 fc0c 	bl	8001cf4 <vSetRegInput>
			temp1 = vAinGetData(AIN_3);
 80014dc:	2002      	movs	r0, #2
 80014de:	f7ff febb 	bl	8001258 <vAinGetData>
 80014e2:	f7ff fb29 	bl	8000b38 <__aeabi_ui2f>
 80014e6:	9009      	str	r0, [sp, #36]	; 0x24
			if (temp1>35000)
 80014e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80014ea:	4651      	mov	r1, sl
 80014ec:	f7ff fd38 	bl	8000f60 <__aeabi_fcmpgt>
 80014f0:	2800      	cmp	r0, #0
 80014f2:	d05a      	beq.n	80015aa <vDTask+0x2aa>
				vSetRegInput(IN_AIR_TEMP, -1);
 80014f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80014f8:	2002      	movs	r0, #2
 80014fa:	f000 fbfb 	bl	8001cf4 <vSetRegInput>
				vSetRegInput(ERROR_STATUS,usGetRegInput(ERROR_STATUS) | AIR_TEMP_ERROR);
 80014fe:	2008      	movs	r0, #8
 8001500:	f000 fbf2 	bl	8001ce8 <usGetRegInput>
 8001504:	f040 0102 	orr.w	r1, r0, #2
 8001508:	b289      	uxth	r1, r1
 800150a:	2008      	movs	r0, #8
 800150c:	f000 fbf2 	bl	8001cf4 <vSetRegInput>
			vSetRegInput(TYPE, (uiGetDinMask() & DEVICE_MODE_MASK)>>DEVICE_MODE_OFFSET );
 8001510:	f7ff fee6 	bl	80012e0 <uiGetDinMask>
 8001514:	f3c0 1101 	ubfx	r1, r0, #4, #2
 8001518:	4648      	mov	r0, r9
 800151a:	f000 fbeb 	bl	8001cf4 <vSetRegInput>
			vSetRegInput(DOOR_STATE, (uiGetDinMask() & DEVICE_DOOR_MASK)>>DEVICE_DOOR_OFFSET );
 800151e:	4649      	mov	r1, r9
 8001520:	2006      	movs	r0, #6
 8001522:	f000 fbe7 	bl	8001cf4 <vSetRegInput>
		    HAL_ADC_Start_DMA(&hadc1,&ADC1_DMABuffer[0], 9);
 8001526:	2209      	movs	r2, #9
 8001528:	4659      	mov	r1, fp
 800152a:	4831      	ldr	r0, [pc, #196]	; (80015f0 <vDTask+0x2f0>)
 800152c:	f001 fa04 	bl	8002938 <HAL_ADC_Start_DMA>
		  	vTaskDelay(1);
 8001530:	4640      	mov	r0, r8
 8001532:	f005 fba3 	bl	8006c7c <vTaskDelay>
			HAL_GPIO_WritePin( LED_G_GPIO_Port, LED_G_Pin,GPIO_PIN_SET);
 8001536:	4642      	mov	r2, r8
 8001538:	2110      	movs	r1, #16
 800153a:	482f      	ldr	r0, [pc, #188]	; (80015f8 <vDTask+0x2f8>)
 800153c:	f001 ffee 	bl	800351c <HAL_GPIO_WritePin>
			if (DataReadyFlag == 0)
 8001540:	4b2a      	ldr	r3, [pc, #168]	; (80015ec <vDTask+0x2ec>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	b933      	cbnz	r3, 8001554 <vDTask+0x254>
			   init_timer++;
 8001546:	9b03      	ldr	r3, [sp, #12]
 8001548:	3301      	adds	r3, #1
 800154a:	b2db      	uxtb	r3, r3
 800154c:	9303      	str	r3, [sp, #12]
			   if (init_timer == 50)
 800154e:	2b32      	cmp	r3, #50	; 0x32
 8001550:	f43f af67 	beq.w	8001422 <vDTask+0x122>
	  uint8_t init_timer = 0;
 8001554:	2400      	movs	r4, #0
				HAL_GPIO_WritePin(xDoutPortConfig[i].GPIOx, xDoutPortConfig[i].Pin, xDoutConfig[i].state == 0 ? GPIO_PIN_RESET: GPIO_PIN_SET );
 8001556:	4e21      	ldr	r6, [pc, #132]	; (80015dc <vDTask+0x2dc>)
 8001558:	4d28      	ldr	r5, [pc, #160]	; (80015fc <vDTask+0x2fc>)
 800155a:	f816 2014 	ldrb.w	r2, [r6, r4, lsl #1]
 800155e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8001562:	3a00      	subs	r2, #0
 8001564:	bf18      	it	ne
 8001566:	2201      	movne	r2, #1
 8001568:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
 800156c:	6858      	ldr	r0, [r3, #4]
 800156e:	f001 ffd5 	bl	800351c <HAL_GPIO_WritePin>
			for (uint8_t i= 0U; i < DOUT_CHANNEL; i++)
 8001572:	3401      	adds	r4, #1
 8001574:	2c04      	cmp	r4, #4
 8001576:	d1f0      	bne.n	800155a <vDTask+0x25a>
 8001578:	4c21      	ldr	r4, [pc, #132]	; (8001600 <vDTask+0x300>)
 800157a:	4d22      	ldr	r5, [pc, #136]	; (8001604 <vDTask+0x304>)
 800157c:	f104 0790 	add.w	r7, r4, #144	; 0x90
 8001580:	e760      	b.n	8001444 <vDTask+0x144>
				vSetRegInput(WATER_TEMP, (uint16_t)fGetAinCalData(AIN_2,temp1));
 8001582:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001584:	4640      	mov	r0, r8
 8001586:	f7ff fd15 	bl	8000fb4 <fGetAinCalData>
 800158a:	f7ff fcf3 	bl	8000f74 <__aeabi_f2uiz>
 800158e:	b281      	uxth	r1, r0
 8001590:	4640      	mov	r0, r8
 8001592:	f000 fbaf 	bl	8001cf4 <vSetRegInput>
				vSetRegInput(ERROR_STATUS,usGetRegInput(ERROR_STATUS) & ~WATER_TEMP_ERROR);
 8001596:	2008      	movs	r0, #8
 8001598:	f000 fba6 	bl	8001ce8 <usGetRegInput>
 800159c:	f020 0101 	bic.w	r1, r0, #1
 80015a0:	b289      	uxth	r1, r1
 80015a2:	2008      	movs	r0, #8
 80015a4:	f000 fba6 	bl	8001cf4 <vSetRegInput>
 80015a8:	e798      	b.n	80014dc <vDTask+0x1dc>
				vSetRegInput(IN_AIR_TEMP,(uint16_t)fGetAinCalData(AIN_3,temp1));
 80015aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80015ac:	2002      	movs	r0, #2
 80015ae:	f7ff fd01 	bl	8000fb4 <fGetAinCalData>
 80015b2:	f7ff fcdf 	bl	8000f74 <__aeabi_f2uiz>
 80015b6:	b281      	uxth	r1, r0
 80015b8:	2002      	movs	r0, #2
 80015ba:	f000 fb9b 	bl	8001cf4 <vSetRegInput>
				vSetRegInput(ERROR_STATUS,usGetRegInput(ERROR_STATUS) & ~AIR_TEMP_ERROR);
 80015be:	2008      	movs	r0, #8
 80015c0:	f000 fb92 	bl	8001ce8 <usGetRegInput>
 80015c4:	f020 0102 	bic.w	r1, r0, #2
 80015c8:	b289      	uxth	r1, r1
 80015ca:	2008      	movs	r0, #8
 80015cc:	f000 fb92 	bl	8001cf4 <vSetRegInput>
 80015d0:	e79e      	b.n	8001510 <vDTask+0x210>
 80015d2:	bf00      	nop
 80015d4:	200004bc 	.word	0x200004bc
 80015d8:	08007bcc 	.word	0x08007bcc
 80015dc:	200004b0 	.word	0x200004b0
 80015e0:	20000410 	.word	0x20000410
 80015e4:	200003fc 	.word	0x200003fc
 80015e8:	4708b800 	.word	0x4708b800
 80015ec:	2000041e 	.word	0x2000041e
 80015f0:	20001280 	.word	0x20001280
 80015f4:	20000418 	.word	0x20000418
 80015f8:	40010800 	.word	0x40010800
 80015fc:	08007c64 	.word	0x08007c64
 8001600:	20000420 	.word	0x20000420
 8001604:	08007c1c 	.word	0x08007c1c

08001608 <vSetOutState>:
 /*
  *
  */
 void vSetOutState( uint8_t channel, uint8_t state)
 {
	 xDoutConfig[channel].state = state;
 8001608:	4b01      	ldr	r3, [pc, #4]	; (8001610 <vSetOutState+0x8>)
 800160a:	f803 1010 	strb.w	r1, [r3, r0, lsl #1]
 }
 800160e:	4770      	bx	lr
 8001610:	200004b0 	.word	0x200004b0

08001614 <vGetOutState>:
 uint8_t vGetOutState(uint8_t channel)
 {
	 return xDoutConfig[channel].state;
 }
 8001614:	4b01      	ldr	r3, [pc, #4]	; (800161c <vGetOutState+0x8>)
 8001616:	f813 0010 	ldrb.w	r0, [r3, r0, lsl #1]
 800161a:	4770      	bx	lr
 800161c:	200004b0 	.word	0x200004b0

08001620 <vFDWtiteReg>:
{
	return ((void *)&SettingsREG[adr]);
}

void vFDWtiteReg(void)
{
 8001620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001624:	b087      	sub	sp, #28
{

  HAL_StatusTypeDef flashStatus = HAL_ERROR;
  while ( flashStatus != HAL_OK )
  {
    flashStatus = HAL_FLASH_Unlock();
 8001626:	f001 fd19 	bl	800305c <HAL_FLASH_Unlock>
  while ( flashStatus != HAL_OK )
 800162a:	2800      	cmp	r0, #0
 800162c:	d1fb      	bne.n	8001626 <vFDWtiteReg+0x6>
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS()
{
  /* USER CODE BEGIN 2 */
  uint32_t               pageError = 0U;
 800162e:	2300      	movs	r3, #0
 8001630:	9301      	str	r3, [sp, #4]
  HAL_StatusTypeDef      status    = HAL_ERROR;
  FLASH_EraseInitTypeDef eraseInit;


    eraseInit.TypeErase    = FLASH_TYPEERASE_PAGES;
 8001632:	9302      	str	r3, [sp, #8]
    eraseInit.Banks        = FLASH_BANK_1;
 8001634:	2301      	movs	r3, #1
 8001636:	9303      	str	r3, [sp, #12]
    eraseInit.PageAddress      = FLASH_DATA_ADR;
 8001638:	4c12      	ldr	r4, [pc, #72]	; (8001684 <vFDWtiteReg+0x64>)
 800163a:	9404      	str	r4, [sp, #16]
    eraseInit.NbPages    = 1U;
 800163c:	9305      	str	r3, [sp, #20]
    status = HAL_FLASHEx_Erase( &eraseInit, &pageError );
 800163e:	a901      	add	r1, sp, #4
 8001640:	a802      	add	r0, sp, #8
 8001642:	f001 fdc7 	bl	80031d4 <HAL_FLASHEx_Erase>
{
  /* USER CODE BEGIN 3 */
  uint32_t           i      = 0U;
  HAL_StatusTypeDef      status    = HAL_ERROR;

  for ( i=0U; i<Len; i+=4U )
 8001646:	4d10      	ldr	r5, [pc, #64]	; (8001688 <vFDWtiteReg+0x68>)
  {
	if ( ( uint32_t )( dest + i ) > FLASH_SIZE )
 8001648:	4f10      	ldr	r7, [pc, #64]	; (800168c <vFDWtiteReg+0x6c>)
	{
      if ( HAL_FLASH_Program( FLASH_TYPEPROGRAM_WORD, ( uint32_t )( dest + i ), *( uint32_t* )( src + i ) ) == HAL_OK )
 800164a:	f04f 0900 	mov.w	r9, #0
  for ( i=0U; i<Len; i+=4U )
 800164e:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8001690 <vFDWtiteReg+0x70>
 8001652:	e003      	b.n	800165c <vFDWtiteReg+0x3c>
 8001654:	3404      	adds	r4, #4
 8001656:	3504      	adds	r5, #4
 8001658:	4544      	cmp	r4, r8
 800165a:	d00c      	beq.n	8001676 <vFDWtiteReg+0x56>
	if ( ( uint32_t )( dest + i ) > FLASH_SIZE )
 800165c:	42bc      	cmp	r4, r7
 800165e:	d3f9      	bcc.n	8001654 <vFDWtiteReg+0x34>
      if ( HAL_FLASH_Program( FLASH_TYPEPROGRAM_WORD, ( uint32_t )( dest + i ), *( uint32_t* )( src + i ) ) == HAL_OK )
 8001660:	682a      	ldr	r2, [r5, #0]
 8001662:	464b      	mov	r3, r9
 8001664:	4621      	mov	r1, r4
 8001666:	2002      	movs	r0, #2
 8001668:	f001 fd4e 	bl	8003108 <HAL_FLASH_Program>
 800166c:	b918      	cbnz	r0, 8001676 <vFDWtiteReg+0x56>
      {
        if ( *( uint32_t* )( src + i ) != *( uint32_t* )( dest + i ) )
 800166e:	682a      	ldr	r2, [r5, #0]
 8001670:	6823      	ldr	r3, [r4, #0]
 8001672:	429a      	cmp	r2, r3
 8001674:	d0ee      	beq.n	8001654 <vFDWtiteReg+0x34>
    flashStatus = HAL_FLASH_Lock();
 8001676:	f001 fd07 	bl	8003088 <HAL_FLASH_Lock>
  while ( flashStatus != HAL_OK )
 800167a:	2800      	cmp	r0, #0
 800167c:	d1fb      	bne.n	8001676 <vFDWtiteReg+0x56>
}
 800167e:	b007      	add	sp, #28
 8001680:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001684:	0800fc00 	.word	0x0800fc00
 8001688:	20000004 	.word	0x20000004
 800168c:	08008000 	.word	0x08008000
 8001690:	0800fc20 	.word	0x0800fc20

08001694 <vFDInit>:
{
 8001694:	b508      	push	{r3, lr}
	if (FisrtStart)
 8001696:	4b0d      	ldr	r3, [pc, #52]	; (80016cc <vFDInit+0x38>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	b91b      	cbnz	r3, 80016a4 <vFDInit+0x10>
}
 800169c:	bd08      	pop	{r3, pc}
		   vFDWtiteReg();
 800169e:	f7ff ffbf 	bl	8001620 <vFDWtiteReg>
 80016a2:	e003      	b.n	80016ac <vFDInit+0x18>
    uint32_t i    = 0U;
    uint8_t *psrc = src;

    for ( i=0U; i<Len; i++ )
    {
      dest[i] = *psrc++;
 80016a4:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <vFDInit+0x3c>)
	   if (buff!= VALID_CODE)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b72      	cmp	r3, #114	; 0x72
 80016aa:	d1f8      	bne.n	800169e <vFDInit+0xa>
    for ( i=0U; i<Len; i++ )
 80016ac:	4a09      	ldr	r2, [pc, #36]	; (80016d4 <vFDInit+0x40>)
 80016ae:	1e53      	subs	r3, r2, #1
 80016b0:	f102 001d 	add.w	r0, r2, #29
      dest[i] = *psrc++;
 80016b4:	4908      	ldr	r1, [pc, #32]	; (80016d8 <vFDInit+0x44>)
 80016b6:	1a89      	subs	r1, r1, r2
 80016b8:	5cca      	ldrb	r2, [r1, r3]
 80016ba:	f803 2f01 	strb.w	r2, [r3, #1]!
    for ( i=0U; i<Len; i++ )
 80016be:	4283      	cmp	r3, r0
 80016c0:	d1fa      	bne.n	80016b8 <vFDInit+0x24>
	   FisrtStart = 0;
 80016c2:	4b02      	ldr	r3, [pc, #8]	; (80016cc <vFDInit+0x38>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]
}
 80016c8:	e7e8      	b.n	800169c <vFDInit+0x8>
 80016ca:	bf00      	nop
 80016cc:	20000000 	.word	0x20000000
 80016d0:	0800fc00 	.word	0x0800fc00
 80016d4:	20000004 	.word	0x20000004
 80016d8:	0800fc01 	.word	0x0800fc01

080016dc <vFDSetRegState>:
{
 80016dc:	b508      	push	{r3, lr}
	SettingsREG[adr+1]= state;
 80016de:	3001      	adds	r0, #1
 80016e0:	4b02      	ldr	r3, [pc, #8]	; (80016ec <vFDSetRegState+0x10>)
 80016e2:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
	vFDWtiteReg();
 80016e6:	f7ff ff9b 	bl	8001620 <vFDWtiteReg>
}
 80016ea:	bd08      	pop	{r3, pc}
 80016ec:	20000004 	.word	0x20000004

080016f0 <vFDGetRegState>:
{
 80016f0:	b510      	push	{r4, lr}
 80016f2:	4604      	mov	r4, r0
	if (FisrtStart)
 80016f4:	4b05      	ldr	r3, [pc, #20]	; (800170c <vFDGetRegState+0x1c>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	b923      	cbnz	r3, 8001704 <vFDGetRegState+0x14>
	return SettingsREG[adr+1];
 80016fa:	3401      	adds	r4, #1
}
 80016fc:	4b04      	ldr	r3, [pc, #16]	; (8001710 <vFDGetRegState+0x20>)
 80016fe:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8001702:	bd10      	pop	{r4, pc}
	  vFDInit();
 8001704:	f7ff ffc6 	bl	8001694 <vFDInit>
 8001708:	e7f7      	b.n	80016fa <vFDGetRegState+0xa>
 800170a:	bf00      	nop
 800170c:	20000000 	.word	0x20000000
 8001710:	20000004 	.word	0x20000004

08001714 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001714:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  for(;;)
  {
    osDelay(10);
 8001716:	240a      	movs	r4, #10
 8001718:	4620      	mov	r0, r4
 800171a:	f004 fa3f 	bl	8005b9c <osDelay>
  for(;;)
 800171e:	e7fb      	b.n	8001718 <StartDefaultTask+0x4>

08001720 <xGetOSEvent>:
}
 8001720:	4b01      	ldr	r3, [pc, #4]	; (8001728 <xGetOSEvent+0x8>)
 8001722:	6818      	ldr	r0, [r3, #0]
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	20001434 	.word	0x20001434

0800172c <xGetUARTEvent>:
 }
 800172c:	4b01      	ldr	r3, [pc, #4]	; (8001734 <xGetUARTEvent+0x8>)
 800172e:	6818      	ldr	r0, [r3, #0]
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	2000147c 	.word	0x2000147c

08001738 <xGetSystemControlEvent>:
 }
 8001738:	4b01      	ldr	r3, [pc, #4]	; (8001740 <xGetSystemControlEvent+0x8>)
 800173a:	6818      	ldr	r0, [r3, #0]
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	20001458 	.word	0x20001458

08001744 <vTimerInit>:
{
 8001744:	b508      	push	{r3, lr}
	htim2.Init.Period = timeout;
 8001746:	4b04      	ldr	r3, [pc, #16]	; (8001758 <vTimerInit+0x14>)
 8001748:	60d8      	str	r0, [r3, #12]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800174a:	4618      	mov	r0, r3
 800174c:	f002 fc92 	bl	8004074 <HAL_TIM_Base_Init>
 8001750:	b900      	cbnz	r0, 8001754 <vTimerInit+0x10>
}
 8001752:	bd08      	pop	{r3, pc}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001754:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001756:	e7fe      	b.n	8001756 <vTimerInit+0x12>
 8001758:	200012f4 	.word	0x200012f4

0800175c <vStartTimer>:
{
 800175c:	b508      	push	{r3, lr}
	HAL_TIM_Base_Start_IT(&htim2);
 800175e:	4802      	ldr	r0, [pc, #8]	; (8001768 <vStartTimer+0xc>)
 8001760:	f002 fb2a 	bl	8003db8 <HAL_TIM_Base_Start_IT>
}
 8001764:	bd08      	pop	{r3, pc}
 8001766:	bf00      	nop
 8001768:	200012f4 	.word	0x200012f4

0800176c <vStopTimer>:
{
 800176c:	b508      	push	{r3, lr}
	HAL_TIM_Base_Stop_IT(&htim2);
 800176e:	4802      	ldr	r0, [pc, #8]	; (8001778 <vStopTimer+0xc>)
 8001770:	f002 fb56 	bl	8003e20 <HAL_TIM_Base_Stop_IT>
}
 8001774:	bd08      	pop	{r3, pc}
 8001776:	bf00      	nop
 8001778:	200012f4 	.word	0x200012f4

0800177c <SystemClock_Config>:
{
 800177c:	b500      	push	{lr}
 800177e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001780:	2220      	movs	r2, #32
 8001782:	2100      	movs	r1, #0
 8001784:	a80b      	add	r0, sp, #44	; 0x2c
 8001786:	f006 f94f 	bl	8007a28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800178a:	2300      	movs	r3, #0
 800178c:	9305      	str	r3, [sp, #20]
 800178e:	9306      	str	r3, [sp, #24]
 8001790:	9307      	str	r3, [sp, #28]
 8001792:	9308      	str	r3, [sp, #32]
 8001794:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001796:	9301      	str	r3, [sp, #4]
 8001798:	9302      	str	r3, [sp, #8]
 800179a:	9303      	str	r3, [sp, #12]
 800179c:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800179e:	2302      	movs	r3, #2
 80017a0:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017a2:	2201      	movs	r2, #1
 80017a4:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017a6:	2210      	movs	r2, #16
 80017a8:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017aa:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80017ac:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80017b0:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017b2:	a80a      	add	r0, sp, #40	; 0x28
 80017b4:	f001 fec2 	bl	800353c <HAL_RCC_OscConfig>
 80017b8:	b9c8      	cbnz	r0, 80017ee <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ba:	230f      	movs	r3, #15
 80017bc:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017be:	2102      	movs	r1, #2
 80017c0:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017c2:	2300      	movs	r3, #0
 80017c4:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017ca:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017cc:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017ce:	a805      	add	r0, sp, #20
 80017d0:	f002 f8f4 	bl	80039bc <HAL_RCC_ClockConfig>
 80017d4:	b968      	cbnz	r0, 80017f2 <SystemClock_Config+0x76>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80017d6:	2302      	movs	r3, #2
 80017d8:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80017da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017de:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017e0:	a801      	add	r0, sp, #4
 80017e2:	f002 f9e1 	bl	8003ba8 <HAL_RCCEx_PeriphCLKConfig>
 80017e6:	b930      	cbnz	r0, 80017f6 <SystemClock_Config+0x7a>
}
 80017e8:	b015      	add	sp, #84	; 0x54
 80017ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80017ee:	b672      	cpsid	i
  while (1)
 80017f0:	e7fe      	b.n	80017f0 <SystemClock_Config+0x74>
 80017f2:	b672      	cpsid	i
 80017f4:	e7fe      	b.n	80017f4 <SystemClock_Config+0x78>
 80017f6:	b672      	cpsid	i
 80017f8:	e7fe      	b.n	80017f8 <SystemClock_Config+0x7c>
	...

080017fc <main>:
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b092      	sub	sp, #72	; 0x48
  HAL_Init();
 8001800:	f000 ff46 	bl	8002690 <HAL_Init>
  SystemClock_Config();
 8001804:	f7ff ffba 	bl	800177c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	2400      	movs	r4, #0
 800180a:	940b      	str	r4, [sp, #44]	; 0x2c
 800180c:	940c      	str	r4, [sp, #48]	; 0x30
 800180e:	940d      	str	r4, [sp, #52]	; 0x34
 8001810:	940e      	str	r4, [sp, #56]	; 0x38
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001812:	4dad      	ldr	r5, [pc, #692]	; (8001ac8 <main+0x2cc>)
 8001814:	69ab      	ldr	r3, [r5, #24]
 8001816:	f043 0310 	orr.w	r3, r3, #16
 800181a:	61ab      	str	r3, [r5, #24]
 800181c:	69ab      	ldr	r3, [r5, #24]
 800181e:	f003 0310 	and.w	r3, r3, #16
 8001822:	9301      	str	r3, [sp, #4]
 8001824:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001826:	69ab      	ldr	r3, [r5, #24]
 8001828:	f043 0320 	orr.w	r3, r3, #32
 800182c:	61ab      	str	r3, [r5, #24]
 800182e:	69ab      	ldr	r3, [r5, #24]
 8001830:	f003 0320 	and.w	r3, r3, #32
 8001834:	9302      	str	r3, [sp, #8]
 8001836:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001838:	69ab      	ldr	r3, [r5, #24]
 800183a:	f043 0304 	orr.w	r3, r3, #4
 800183e:	61ab      	str	r3, [r5, #24]
 8001840:	69ab      	ldr	r3, [r5, #24]
 8001842:	f003 0304 	and.w	r3, r3, #4
 8001846:	9303      	str	r3, [sp, #12]
 8001848:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800184a:	69ab      	ldr	r3, [r5, #24]
 800184c:	f043 0308 	orr.w	r3, r3, #8
 8001850:	61ab      	str	r3, [r5, #24]
 8001852:	69ab      	ldr	r3, [r5, #24]
 8001854:	f003 0308 	and.w	r3, r3, #8
 8001858:	9304      	str	r3, [sp, #16]
 800185a:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, LED_G_Pin|LED_R_Pin|EN_Pin, GPIO_PIN_RESET);
 800185c:	4e9b      	ldr	r6, [pc, #620]	; (8001acc <main+0x2d0>)
 800185e:	4622      	mov	r2, r4
 8001860:	f44f 7198 	mov.w	r1, #304	; 0x130
 8001864:	4630      	mov	r0, r6
 8001866:	f001 fe59 	bl	800351c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, K2_Pin|K4_Pin|K6_Pin|K8_Pin, GPIO_PIN_RESET);
 800186a:	4f99      	ldr	r7, [pc, #612]	; (8001ad0 <main+0x2d4>)
 800186c:	4622      	mov	r2, r4
 800186e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001872:	4638      	mov	r0, r7
 8001874:	f001 fe52 	bl	800351c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin|EN_Pin;
 8001878:	f44f 7398 	mov.w	r3, #304	; 0x130
 800187c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187e:	f04f 0901 	mov.w	r9, #1
 8001882:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001888:	f04f 0802 	mov.w	r8, #2
 800188c:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001890:	a90b      	add	r1, sp, #44	; 0x2c
 8001892:	4630      	mov	r0, r6
 8001894:	f001 fd02 	bl	800329c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = S1_Pin|S2_Pin|S3_Pin|S4_Pin
 8001898:	f640 73ff 	movw	r3, #4095	; 0xfff
 800189c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800189e:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a2:	a90b      	add	r1, sp, #44	; 0x2c
 80018a4:	4638      	mov	r0, r7
 80018a6:	f001 fcf9 	bl	800329c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = K2_Pin|K4_Pin|K6_Pin|K8_Pin;
 80018aa:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80018ae:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b0:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b6:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ba:	a90b      	add	r1, sp, #44	; 0x2c
 80018bc:	4638      	mov	r0, r7
 80018be:	f001 fced 	bl	800329c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SW8_Pin;
 80018c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018c6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c8:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(SW8_GPIO_Port, &GPIO_InitStruct);
 80018cc:	a90b      	add	r1, sp, #44	; 0x2c
 80018ce:	4630      	mov	r0, r6
 80018d0:	f001 fce4 	bl	800329c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018d4:	696b      	ldr	r3, [r5, #20]
 80018d6:	ea43 0309 	orr.w	r3, r3, r9
 80018da:	616b      	str	r3, [r5, #20]
 80018dc:	696b      	ldr	r3, [r5, #20]
 80018de:	ea03 0309 	and.w	r3, r3, r9
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80018e6:	4622      	mov	r2, r4
 80018e8:	2105      	movs	r1, #5
 80018ea:	200b      	movs	r0, #11
 80018ec:	f001 f9b0 	bl	8002c50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80018f0:	200b      	movs	r0, #11
 80018f2:	f001 f9e3 	bl	8002cbc <HAL_NVIC_EnableIRQ>
  huart1.Instance = USART1;
 80018f6:	4877      	ldr	r0, [pc, #476]	; (8001ad4 <main+0x2d8>)
 80018f8:	4b77      	ldr	r3, [pc, #476]	; (8001ad8 <main+0x2dc>)
 80018fa:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80018fc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001900:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8001902:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001906:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001908:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 800190a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800190e:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001910:	230c      	movs	r3, #12
 8001912:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001914:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001916:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001918:	f002 fec0 	bl	800469c <HAL_UART_Init>
 800191c:	2800      	cmp	r0, #0
 800191e:	f040 813a 	bne.w	8001b96 <main+0x39a>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001922:	2300      	movs	r3, #0
 8001924:	930b      	str	r3, [sp, #44]	; 0x2c
 8001926:	930c      	str	r3, [sp, #48]	; 0x30
 8001928:	930d      	str	r3, [sp, #52]	; 0x34
 800192a:	930e      	str	r3, [sp, #56]	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800192c:	9307      	str	r3, [sp, #28]
 800192e:	9308      	str	r3, [sp, #32]
  htim2.Instance = TIM2;
 8001930:	486a      	ldr	r0, [pc, #424]	; (8001adc <main+0x2e0>)
 8001932:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001936:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 3264;
 8001938:	f44f 624c 	mov.w	r2, #3264	; 0xcc0
 800193c:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800193e:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 1000;
 8001940:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001944:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001946:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001948:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800194a:	f002 fb93 	bl	8004074 <HAL_TIM_Base_Init>
 800194e:	2800      	cmp	r0, #0
 8001950:	f040 8123 	bne.w	8001b9a <main+0x39e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001958:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800195a:	a90b      	add	r1, sp, #44	; 0x2c
 800195c:	485f      	ldr	r0, [pc, #380]	; (8001adc <main+0x2e0>)
 800195e:	f002 fc89 	bl	8004274 <HAL_TIM_ConfigClockSource>
 8001962:	2800      	cmp	r0, #0
 8001964:	f040 811b 	bne.w	8001b9e <main+0x3a2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001968:	2320      	movs	r3, #32
 800196a:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800196c:	2300      	movs	r3, #0
 800196e:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001970:	a907      	add	r1, sp, #28
 8001972:	485a      	ldr	r0, [pc, #360]	; (8001adc <main+0x2e0>)
 8001974:	f002 fde8 	bl	8004548 <HAL_TIMEx_MasterConfigSynchronization>
 8001978:	2800      	cmp	r0, #0
 800197a:	f040 8112 	bne.w	8001ba2 <main+0x3a6>
  ADC_ChannelConfTypeDef sConfig = {0};
 800197e:	2300      	movs	r3, #0
 8001980:	930b      	str	r3, [sp, #44]	; 0x2c
 8001982:	930c      	str	r3, [sp, #48]	; 0x30
 8001984:	930d      	str	r3, [sp, #52]	; 0x34
  hadc1.Instance = ADC1;
 8001986:	4856      	ldr	r0, [pc, #344]	; (8001ae0 <main+0x2e4>)
 8001988:	4a56      	ldr	r2, [pc, #344]	; (8001ae4 <main+0x2e8>)
 800198a:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800198c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001990:	6082      	str	r2, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001992:	2201      	movs	r2, #1
 8001994:	7302      	strb	r2, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001996:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001998:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800199c:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800199e:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 3;
 80019a0:	2303      	movs	r3, #3
 80019a2:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019a4:	f001 f88e 	bl	8002ac4 <HAL_ADC_Init>
 80019a8:	2800      	cmp	r0, #0
 80019aa:	f040 80fc 	bne.w	8001ba6 <main+0x3aa>
  sConfig.Channel = ADC_CHANNEL_0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019b2:	2301      	movs	r3, #1
 80019b4:	930c      	str	r3, [sp, #48]	; 0x30
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 80019b6:	2304      	movs	r3, #4
 80019b8:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019ba:	a90b      	add	r1, sp, #44	; 0x2c
 80019bc:	4848      	ldr	r0, [pc, #288]	; (8001ae0 <main+0x2e4>)
 80019be:	f000 fec9 	bl	8002754 <HAL_ADC_ConfigChannel>
 80019c2:	2800      	cmp	r0, #0
 80019c4:	f040 80f1 	bne.w	8001baa <main+0x3ae>
  sConfig.Channel = ADC_CHANNEL_1;
 80019c8:	2301      	movs	r3, #1
 80019ca:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80019cc:	2302      	movs	r3, #2
 80019ce:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019d0:	a90b      	add	r1, sp, #44	; 0x2c
 80019d2:	4843      	ldr	r0, [pc, #268]	; (8001ae0 <main+0x2e4>)
 80019d4:	f000 febe 	bl	8002754 <HAL_ADC_ConfigChannel>
 80019d8:	2800      	cmp	r0, #0
 80019da:	f040 80e8 	bne.w	8001bae <main+0x3b2>
  sConfig.Channel = ADC_CHANNEL_2;
 80019de:	2302      	movs	r3, #2
 80019e0:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80019e2:	2303      	movs	r3, #3
 80019e4:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019e6:	a90b      	add	r1, sp, #44	; 0x2c
 80019e8:	483d      	ldr	r0, [pc, #244]	; (8001ae0 <main+0x2e4>)
 80019ea:	f000 feb3 	bl	8002754 <HAL_ADC_ConfigChannel>
 80019ee:	2800      	cmp	r0, #0
 80019f0:	f040 80df 	bne.w	8001bb2 <main+0x3b6>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019f4:	2300      	movs	r3, #0
 80019f6:	9307      	str	r3, [sp, #28]
 80019f8:	9308      	str	r3, [sp, #32]
 80019fa:	9309      	str	r3, [sp, #36]	; 0x24
 80019fc:	930a      	str	r3, [sp, #40]	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019fe:	9305      	str	r3, [sp, #20]
 8001a00:	9306      	str	r3, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a02:	930b      	str	r3, [sp, #44]	; 0x2c
 8001a04:	930c      	str	r3, [sp, #48]	; 0x30
 8001a06:	930d      	str	r3, [sp, #52]	; 0x34
 8001a08:	930e      	str	r3, [sp, #56]	; 0x38
 8001a0a:	930f      	str	r3, [sp, #60]	; 0x3c
 8001a0c:	9310      	str	r3, [sp, #64]	; 0x40
 8001a0e:	9311      	str	r3, [sp, #68]	; 0x44
  htim3.Instance = TIM3;
 8001a10:	4835      	ldr	r0, [pc, #212]	; (8001ae8 <main+0x2ec>)
 8001a12:	4a36      	ldr	r2, [pc, #216]	; (8001aec <main+0x2f0>)
 8001a14:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 2;
 8001a16:	2202      	movs	r2, #2
 8001a18:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a1a:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 1000;
 8001a1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a20:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a22:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a24:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a26:	f002 fb25 	bl	8004074 <HAL_TIM_Base_Init>
 8001a2a:	2800      	cmp	r0, #0
 8001a2c:	f040 80c3 	bne.w	8001bb6 <main+0x3ba>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a34:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a36:	a907      	add	r1, sp, #28
 8001a38:	482b      	ldr	r0, [pc, #172]	; (8001ae8 <main+0x2ec>)
 8001a3a:	f002 fc1b 	bl	8004274 <HAL_TIM_ConfigClockSource>
 8001a3e:	2800      	cmp	r0, #0
 8001a40:	f040 80bb 	bne.w	8001bba <main+0x3be>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a44:	4828      	ldr	r0, [pc, #160]	; (8001ae8 <main+0x2ec>)
 8001a46:	f002 fb41 	bl	80040cc <HAL_TIM_PWM_Init>
 8001a4a:	2800      	cmp	r0, #0
 8001a4c:	f040 80b7 	bne.w	8001bbe <main+0x3c2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a50:	2300      	movs	r3, #0
 8001a52:	9305      	str	r3, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a54:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a56:	a905      	add	r1, sp, #20
 8001a58:	4823      	ldr	r0, [pc, #140]	; (8001ae8 <main+0x2ec>)
 8001a5a:	f002 fd75 	bl	8004548 <HAL_TIMEx_MasterConfigSynchronization>
 8001a5e:	2800      	cmp	r0, #0
 8001a60:	f040 80af 	bne.w	8001bc2 <main+0x3c6>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a64:	2360      	movs	r3, #96	; 0x60
 8001a66:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8001a68:	2200      	movs	r2, #0
 8001a6a:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a6c:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001a6e:	2304      	movs	r3, #4
 8001a70:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a72:	a90b      	add	r1, sp, #44	; 0x2c
 8001a74:	481c      	ldr	r0, [pc, #112]	; (8001ae8 <main+0x2ec>)
 8001a76:	f002 fb83 	bl	8004180 <HAL_TIM_PWM_ConfigChannel>
 8001a7a:	2800      	cmp	r0, #0
 8001a7c:	f040 80a3 	bne.w	8001bc6 <main+0x3ca>
  sConfigOC.Pulse = 500;
 8001a80:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001a84:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a86:	2204      	movs	r2, #4
 8001a88:	a90b      	add	r1, sp, #44	; 0x2c
 8001a8a:	4817      	ldr	r0, [pc, #92]	; (8001ae8 <main+0x2ec>)
 8001a8c:	f002 fb78 	bl	8004180 <HAL_TIM_PWM_ConfigChannel>
 8001a90:	2800      	cmp	r0, #0
 8001a92:	f040 809a 	bne.w	8001bca <main+0x3ce>
  HAL_TIM_MspPostInit(&htim3);
 8001a96:	4814      	ldr	r0, [pc, #80]	; (8001ae8 <main+0x2ec>)
 8001a98:	f000 fcea 	bl	8002470 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001aa0:	930c      	str	r3, [sp, #48]	; 0x30
 8001aa2:	930d      	str	r3, [sp, #52]	; 0x34
 8001aa4:	930e      	str	r3, [sp, #56]	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa6:	9307      	str	r3, [sp, #28]
 8001aa8:	9308      	str	r3, [sp, #32]
  htim4.Instance = TIM4;
 8001aaa:	4811      	ldr	r0, [pc, #68]	; (8001af0 <main+0x2f4>)
 8001aac:	4a11      	ldr	r2, [pc, #68]	; (8001af4 <main+0x2f8>)
 8001aae:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 32000;
 8001ab0:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001ab4:	6042      	str	r2, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab6:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 2000;
 8001ab8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001abc:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001abe:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ac0:	2380      	movs	r3, #128	; 0x80
 8001ac2:	6183      	str	r3, [r0, #24]
 8001ac4:	e018      	b.n	8001af8 <main+0x2fc>
 8001ac6:	bf00      	nop
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	40010800 	.word	0x40010800
 8001ad0:	40010c00 	.word	0x40010c00
 8001ad4:	200013cc 	.word	0x200013cc
 8001ad8:	40013800 	.word	0x40013800
 8001adc:	200012f4 	.word	0x200012f4
 8001ae0:	20001280 	.word	0x20001280
 8001ae4:	40012400 	.word	0x40012400
 8001ae8:	2000133c 	.word	0x2000133c
 8001aec:	40000400 	.word	0x40000400
 8001af0:	20001384 	.word	0x20001384
 8001af4:	40000800 	.word	0x40000800
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001af8:	f002 fabc 	bl	8004074 <HAL_TIM_Base_Init>
 8001afc:	2800      	cmp	r0, #0
 8001afe:	d166      	bne.n	8001bce <main+0x3d2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b04:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b06:	a90b      	add	r1, sp, #44	; 0x2c
 8001b08:	4834      	ldr	r0, [pc, #208]	; (8001bdc <main+0x3e0>)
 8001b0a:	f002 fbb3 	bl	8004274 <HAL_TIM_ConfigClockSource>
 8001b0e:	2800      	cmp	r0, #0
 8001b10:	d15f      	bne.n	8001bd2 <main+0x3d6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b12:	2300      	movs	r3, #0
 8001b14:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b16:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b18:	a907      	add	r1, sp, #28
 8001b1a:	4830      	ldr	r0, [pc, #192]	; (8001bdc <main+0x3e0>)
 8001b1c:	f002 fd14 	bl	8004548 <HAL_TIMEx_MasterConfigSynchronization>
 8001b20:	2800      	cmp	r0, #0
 8001b22:	d158      	bne.n	8001bd6 <main+0x3da>
  osKernelInitialize();
 8001b24:	f003 ff88 	bl	8005a38 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001b28:	4a2d      	ldr	r2, [pc, #180]	; (8001be0 <main+0x3e4>)
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	482d      	ldr	r0, [pc, #180]	; (8001be4 <main+0x3e8>)
 8001b2e:	f003 ffcf 	bl	8005ad0 <osThreadNew>
 8001b32:	4b2d      	ldr	r3, [pc, #180]	; (8001be8 <main+0x3ec>)
 8001b34:	6018      	str	r0, [r3, #0]
  DIN_DOUTHandle = osThreadNew(vDTask, NULL, &DIN_DOUT_attributes);
 8001b36:	4a2d      	ldr	r2, [pc, #180]	; (8001bec <main+0x3f0>)
 8001b38:	2100      	movs	r1, #0
 8001b3a:	482d      	ldr	r0, [pc, #180]	; (8001bf0 <main+0x3f4>)
 8001b3c:	f003 ffc8 	bl	8005ad0 <osThreadNew>
 8001b40:	4b2c      	ldr	r3, [pc, #176]	; (8001bf4 <main+0x3f8>)
 8001b42:	6018      	str	r0, [r3, #0]
  UARTTaskHandle = osThreadNew(StartUARTTask, NULL, &UARTTask_attributes);
 8001b44:	4a2c      	ldr	r2, [pc, #176]	; (8001bf8 <main+0x3fc>)
 8001b46:	2100      	movs	r1, #0
 8001b48:	482c      	ldr	r0, [pc, #176]	; (8001bfc <main+0x400>)
 8001b4a:	f003 ffc1 	bl	8005ad0 <osThreadNew>
 8001b4e:	4b2c      	ldr	r3, [pc, #176]	; (8001c00 <main+0x404>)
 8001b50:	6018      	str	r0, [r3, #0]
  DataTaskHandle = osThreadNew(vDATATask, NULL, &DataTask_attributes);
 8001b52:	4a2c      	ldr	r2, [pc, #176]	; (8001c04 <main+0x408>)
 8001b54:	2100      	movs	r1, #0
 8001b56:	482c      	ldr	r0, [pc, #176]	; (8001c08 <main+0x40c>)
 8001b58:	f003 ffba 	bl	8005ad0 <osThreadNew>
 8001b5c:	4b2b      	ldr	r3, [pc, #172]	; (8001c0c <main+0x410>)
 8001b5e:	6018      	str	r0, [r3, #0]
  MBTaskHandle = osThreadNew(vMBTask, NULL, &MBTask_attributes);
 8001b60:	4a2b      	ldr	r2, [pc, #172]	; (8001c10 <main+0x414>)
 8001b62:	2100      	movs	r1, #0
 8001b64:	482b      	ldr	r0, [pc, #172]	; (8001c14 <main+0x418>)
 8001b66:	f003 ffb3 	bl	8005ad0 <osThreadNew>
 8001b6a:	4b2b      	ldr	r3, [pc, #172]	; (8001c18 <main+0x41c>)
 8001b6c:	6018      	str	r0, [r3, #0]
  xOSEventHandle = osEventFlagsNew(&xOSEvent_attributes);
 8001b6e:	482b      	ldr	r0, [pc, #172]	; (8001c1c <main+0x420>)
 8001b70:	f004 f836 	bl	8005be0 <osEventFlagsNew>
 8001b74:	4b2a      	ldr	r3, [pc, #168]	; (8001c20 <main+0x424>)
 8001b76:	6018      	str	r0, [r3, #0]
  xUARTEvnetHandle = osEventFlagsNew(&xUARTEvnet_attributes);
 8001b78:	482a      	ldr	r0, [pc, #168]	; (8001c24 <main+0x428>)
 8001b7a:	f004 f831 	bl	8005be0 <osEventFlagsNew>
 8001b7e:	4b2a      	ldr	r3, [pc, #168]	; (8001c28 <main+0x42c>)
 8001b80:	6018      	str	r0, [r3, #0]
  xSystemControlEventHandle = osEventFlagsNew(&xSystemControlEvent_attributes);
 8001b82:	482a      	ldr	r0, [pc, #168]	; (8001c2c <main+0x430>)
 8001b84:	f004 f82c 	bl	8005be0 <osEventFlagsNew>
 8001b88:	4b29      	ldr	r3, [pc, #164]	; (8001c30 <main+0x434>)
 8001b8a:	6018      	str	r0, [r3, #0]
  InitSystemEnvet(xSystemControlEventHandle);
 8001b8c:	f000 f880 	bl	8001c90 <InitSystemEnvet>
  osKernelStart();
 8001b90:	f003 ff76 	bl	8005a80 <osKernelStart>
  while (1)
 8001b94:	e7fe      	b.n	8001b94 <main+0x398>
 8001b96:	b672      	cpsid	i
  while (1)
 8001b98:	e7fe      	b.n	8001b98 <main+0x39c>
 8001b9a:	b672      	cpsid	i
 8001b9c:	e7fe      	b.n	8001b9c <main+0x3a0>
 8001b9e:	b672      	cpsid	i
 8001ba0:	e7fe      	b.n	8001ba0 <main+0x3a4>
 8001ba2:	b672      	cpsid	i
 8001ba4:	e7fe      	b.n	8001ba4 <main+0x3a8>
 8001ba6:	b672      	cpsid	i
 8001ba8:	e7fe      	b.n	8001ba8 <main+0x3ac>
 8001baa:	b672      	cpsid	i
 8001bac:	e7fe      	b.n	8001bac <main+0x3b0>
 8001bae:	b672      	cpsid	i
 8001bb0:	e7fe      	b.n	8001bb0 <main+0x3b4>
 8001bb2:	b672      	cpsid	i
 8001bb4:	e7fe      	b.n	8001bb4 <main+0x3b8>
 8001bb6:	b672      	cpsid	i
 8001bb8:	e7fe      	b.n	8001bb8 <main+0x3bc>
 8001bba:	b672      	cpsid	i
 8001bbc:	e7fe      	b.n	8001bbc <main+0x3c0>
 8001bbe:	b672      	cpsid	i
 8001bc0:	e7fe      	b.n	8001bc0 <main+0x3c4>
 8001bc2:	b672      	cpsid	i
 8001bc4:	e7fe      	b.n	8001bc4 <main+0x3c8>
 8001bc6:	b672      	cpsid	i
 8001bc8:	e7fe      	b.n	8001bc8 <main+0x3cc>
 8001bca:	b672      	cpsid	i
 8001bcc:	e7fe      	b.n	8001bcc <main+0x3d0>
 8001bce:	b672      	cpsid	i
 8001bd0:	e7fe      	b.n	8001bd0 <main+0x3d4>
 8001bd2:	b672      	cpsid	i
 8001bd4:	e7fe      	b.n	8001bd4 <main+0x3d8>
 8001bd6:	b672      	cpsid	i
 8001bd8:	e7fe      	b.n	8001bd8 <main+0x3dc>
 8001bda:	bf00      	nop
 8001bdc:	20001384 	.word	0x20001384
 8001be0:	08007d78 	.word	0x08007d78
 8001be4:	08001715 	.word	0x08001715
 8001be8:	2000127c 	.word	0x2000127c
 8001bec:	08007ce8 	.word	0x08007ce8
 8001bf0:	08001301 	.word	0x08001301
 8001bf4:	2000077c 	.word	0x2000077c
 8001bf8:	08007d54 	.word	0x08007d54
 8001bfc:	0800570d 	.word	0x0800570d
 8001c00:	20000fbc 	.word	0x20000fbc
 8001c04:	08007d0c 	.word	0x08007d0c
 8001c08:	08001de5 	.word	0x08001de5
 8001c0c:	20000a3c 	.word	0x20000a3c
 8001c10:	08007d30 	.word	0x08007d30
 8001c14:	08001d41 	.word	0x08001d41
 8001c18:	20000cfc 	.word	0x20000cfc
 8001c1c:	08007d9c 	.word	0x08007d9c
 8001c20:	20001434 	.word	0x20001434
 8001c24:	08007dbc 	.word	0x08007dbc
 8001c28:	2000147c 	.word	0x2000147c
 8001c2c:	08007dac 	.word	0x08007dac
 8001c30:	20001458 	.word	0x20001458

08001c34 <HAL_TIM_PeriodElapsedCallback>:
{
 8001c34:	b510      	push	{r4, lr}
 8001c36:	4604      	mov	r4, r0
	 if (htim->Instance == TIM2) {
 8001c38:	6803      	ldr	r3, [r0, #0]
 8001c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c3e:	d004      	beq.n	8001c4a <HAL_TIM_PeriodElapsedCallback+0x16>
  if (htim->Instance == TIM1) {
 8001c40:	6822      	ldr	r2, [r4, #0]
 8001c42:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d003      	beq.n	8001c50 <HAL_TIM_PeriodElapsedCallback+0x1c>
}
 8001c48:	bd10      	pop	{r4, pc}
		 rvvTIMERExpiredISR();
 8001c4a:	f003 fd9f 	bl	800578c <rvvTIMERExpiredISR>
 8001c4e:	e7f7      	b.n	8001c40 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001c50:	f000 fd30 	bl	80026b4 <HAL_IncTick>
}
 8001c54:	e7f8      	b.n	8001c48 <HAL_TIM_PeriodElapsedCallback+0x14>
 8001c56:	bf00      	nop
 8001c58:	40012c00 	.word	0x40012c00

08001c5c <Error_Handler>:
 8001c5c:	b672      	cpsid	i
  while (1)
 8001c5e:	e7fe      	b.n	8001c5e <Error_Handler+0x2>

08001c60 <vSetState>:
/*
 *
 */
static void vSetState( FAN_SPEED_t speed ,VALVE_STATE_t state )
{
	if (state != VALVE_AUTO)
 8001c60:	2902      	cmp	r1, #2
	{
		valve_state = state;
 8001c62:	bf1c      	itt	ne
 8001c64:	4b07      	ldrne	r3, [pc, #28]	; (8001c84 <vSetState+0x24>)
 8001c66:	7019      	strbne	r1, [r3, #0]
	}
	vSetRegInput(WATER_VALVE, valve_state  );
 8001c68:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <vSetState+0x24>)
 8001c6a:	781a      	ldrb	r2, [r3, #0]
 8001c6c:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <vSetState+0x28>)
 8001c6e:	811a      	strh	r2, [r3, #8]

	if ( speed != FAN_SPEED_AUTO)
 8001c70:	2804      	cmp	r0, #4
	{
		current_fan_speed = speed;
 8001c72:	bf1c      	itt	ne
 8001c74:	4b05      	ldrne	r3, [pc, #20]	; (8001c8c <vSetState+0x2c>)
 8001c76:	7018      	strbne	r0, [r3, #0]
	}
	vSetRegInput(FAN_SPEED, current_fan_speed );
 8001c78:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <vSetState+0x2c>)
 8001c7a:	781a      	ldrb	r2, [r3, #0]
 8001c7c:	4b02      	ldr	r3, [pc, #8]	; (8001c88 <vSetState+0x28>)
 8001c7e:	815a      	strh	r2, [r3, #10]
}
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	200014b2 	.word	0x200014b2
 8001c88:	20001488 	.word	0x20001488
 8001c8c:	20001486 	.word	0x20001486

08001c90 <InitSystemEnvet>:
	 xSystemEventGroupHandle = event;
 8001c90:	4b01      	ldr	r3, [pc, #4]	; (8001c98 <InitSystemEnvet+0x8>)
 8001c92:	6018      	str	r0, [r3, #0]
}
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	200014b4 	.word	0x200014b4

08001c9c <waitFlag>:
{
 8001c9c:	b500      	push	{lr}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	4601      	mov	r1, r0
	xEventGroupWaitBits(xSystemEventGroupHandle,   flag ,  pdFALSE, pdTRUE, portMAX_DELAY );
 8001ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	2301      	movs	r3, #1
 8001caa:	2200      	movs	r2, #0
 8001cac:	4803      	ldr	r0, [pc, #12]	; (8001cbc <waitFlag+0x20>)
 8001cae:	6800      	ldr	r0, [r0, #0]
 8001cb0:	f004 f809 	bl	8005cc6 <xEventGroupWaitBits>
}
 8001cb4:	b003      	add	sp, #12
 8001cb6:	f85d fb04 	ldr.w	pc, [sp], #4
 8001cba:	bf00      	nop
 8001cbc:	200014b4 	.word	0x200014b4

08001cc0 <usGetReg>:
{
 8001cc0:	b508      	push	{r3, lr}
	if (reg_addr>= DEVICE_HOLDING_FLASG)
 8001cc2:	2804      	cmp	r0, #4
 8001cc4:	d807      	bhi.n	8001cd6 <usGetReg+0x16>
		if (reg_addr == MODE)
 8001cc6:	b910      	cbnz	r0, 8001cce <usGetReg+0xe>
			connection = 1;
 8001cc8:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <usGetReg+0x20>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	701a      	strb	r2, [r3, #0]
		usRes = system_regs[reg_addr];
 8001cce:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <usGetReg+0x24>)
 8001cd0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
 8001cd4:	bd08      	pop	{r3, pc}
		usRes = vFDGetRegState( reg_addr - DEVICE_HOLDING_FLASG );
 8001cd6:	3805      	subs	r0, #5
 8001cd8:	f7ff fd0a 	bl	80016f0 <vFDGetRegState>
 8001cdc:	b280      	uxth	r0, r0
 8001cde:	e7f9      	b.n	8001cd4 <usGetReg+0x14>
 8001ce0:	20001484 	.word	0x20001484
 8001ce4:	200014a4 	.word	0x200014a4

08001ce8 <usGetRegInput>:
}
 8001ce8:	4b01      	ldr	r3, [pc, #4]	; (8001cf0 <usGetRegInput+0x8>)
 8001cea:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8001cee:	4770      	bx	lr
 8001cf0:	20001488 	.word	0x20001488

08001cf4 <vSetRegInput>:
	  if (reg_addr == TYPE)
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	b930      	cbnz	r0, 8001d06 <vSetRegInput+0x12>
		  if (input_regs[reg_addr] != data)
 8001cf8:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <vSetRegInput+0x1c>)
 8001cfa:	881b      	ldrh	r3, [r3, #0]
 8001cfc:	428b      	cmp	r3, r1
 8001cfe:	d002      	beq.n	8001d06 <vSetRegInput+0x12>
			  mode_restart = 1;
 8001d00:	4b04      	ldr	r3, [pc, #16]	; (8001d14 <vSetRegInput+0x20>)
 8001d02:	2001      	movs	r0, #1
 8001d04:	7018      	strb	r0, [r3, #0]
      input_regs[reg_addr] = data;
 8001d06:	4b02      	ldr	r3, [pc, #8]	; (8001d10 <vSetRegInput+0x1c>)
 8001d08:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
}
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	20001488 	.word	0x20001488
 8001d14:	2000149c 	.word	0x2000149c

08001d18 <vSetReg>:
{
 8001d18:	b508      	push	{r3, lr}
		  if (reg_addr>=  DEVICE_HOLDING_FLASG)
 8001d1a:	2804      	cmp	r0, #4
 8001d1c:	d807      	bhi.n	8001d2e <vSetReg+0x16>
			  if (reg_addr == MODE)
 8001d1e:	b910      	cbnz	r0, 8001d26 <vSetReg+0xe>
				  mode_restart = 1;
 8001d20:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <vSetReg+0x20>)
 8001d22:	2201      	movs	r2, #1
 8001d24:	701a      	strb	r2, [r3, #0]
			  system_regs[reg_addr] = data;
 8001d26:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <vSetReg+0x24>)
 8001d28:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
}
 8001d2c:	bd08      	pop	{r3, pc}
			  vFDSetRegState( reg_addr - DEVICE_HOLDING_FLASG,data);
 8001d2e:	3805      	subs	r0, #5
 8001d30:	f7ff fcd4 	bl	80016dc <vFDSetRegState>
 8001d34:	e7fa      	b.n	8001d2c <vSetReg+0x14>
 8001d36:	bf00      	nop
 8001d38:	2000149c 	.word	0x2000149c
 8001d3c:	200014a4 	.word	0x200014a4

08001d40 <vMBTask>:
 {
 8001d40:	b510      	push	{r4, lr}
 8001d42:	b082      	sub	sp, #8
	 waitFlag( DIN_READY );
 8001d44:	2001      	movs	r0, #1
 8001d46:	f7ff ffa9 	bl	8001c9c <waitFlag>
	 addres = (uiGetDinMask() & DEVICE_ADDR_MASK)>>DEVICE_ADDR_OFFSET;
 8001d4a:	f7ff fac9 	bl	80012e0 <uiGetDinMask>
	 eMBInit(MB_RTU,addres,0,115200,MB_PAR_ODD );
 8001d4e:	2301      	movs	r3, #1
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001d56:	2200      	movs	r2, #0
 8001d58:	f000 010f 	and.w	r1, r0, #15
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	f002 ff79 	bl	8004c54 <eMBInit>
	 eMBEnable(  );
 8001d62:	f002 ffd5 	bl	8004d10 <eMBEnable>
	 xEventGroupSetBits(xSystemEventGroupHandle,  MB_READY );
 8001d66:	2104      	movs	r1, #4
 8001d68:	4b05      	ldr	r3, [pc, #20]	; (8001d80 <vMBTask+0x40>)
 8001d6a:	6818      	ldr	r0, [r3, #0]
 8001d6c:	f004 f836 	bl	8005ddc <xEventGroupSetBits>
		 vTaskDelay(1);
 8001d70:	2401      	movs	r4, #1
 8001d72:	4620      	mov	r0, r4
 8001d74:	f004 ff82 	bl	8006c7c <vTaskDelay>
		 eMBPoll();
 8001d78:	f002 ffdc 	bl	8004d34 <eMBPoll>
	 while (1)
 8001d7c:	e7f9      	b.n	8001d72 <vMBTask+0x32>
 8001d7e:	bf00      	nop
 8001d80:	200014b4 	.word	0x200014b4

08001d84 <vTimer1sInc>:
	sTimer++;
 8001d84:	4a02      	ldr	r2, [pc, #8]	; (8001d90 <vTimer1sInc+0xc>)
 8001d86:	6813      	ldr	r3, [r2, #0]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	6013      	str	r3, [r2, #0]
}
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	200014a0 	.word	0x200014a0

08001d94 <GetTimer>:
	if ( TimerTriger == 0 )
 8001d94:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <GetTimer+0x2c>)
 8001d96:	881b      	ldrh	r3, [r3, #0]
 8001d98:	b133      	cbz	r3, 8001da8 <GetTimer+0x14>
		if (sTimer < time)
 8001d9a:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <GetTimer+0x30>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
	uint8_t res = 0;
 8001d9e:	4298      	cmp	r0, r3
 8001da0:	bf8c      	ite	hi
 8001da2:	2000      	movhi	r0, #0
 8001da4:	2001      	movls	r0, #1
 }
 8001da6:	4770      	bx	lr
 {
 8001da8:	b510      	push	{r4, lr}
		TimerTriger = 1;
 8001daa:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <GetTimer+0x2c>)
 8001dac:	2201      	movs	r2, #1
 8001dae:	801a      	strh	r2, [r3, #0]
		sTimer = 0;
 8001db0:	2400      	movs	r4, #0
 8001db2:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <GetTimer+0x30>)
 8001db4:	601c      	str	r4, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim4);
 8001db6:	4804      	ldr	r0, [pc, #16]	; (8001dc8 <GetTimer+0x34>)
 8001db8:	f001 fffe 	bl	8003db8 <HAL_TIM_Base_Start_IT>
	uint8_t res = 0;
 8001dbc:	4620      	mov	r0, r4
 }
 8001dbe:	bd10      	pop	{r4, pc}
 8001dc0:	20001482 	.word	0x20001482
 8001dc4:	200014a0 	.word	0x200014a0
 8001dc8:	20001384 	.word	0x20001384

08001dcc <ResetTimer>:
{
 8001dcc:	b508      	push	{r3, lr}
	HAL_TIM_Base_Stop_IT(&htim4);
 8001dce:	4803      	ldr	r0, [pc, #12]	; (8001ddc <ResetTimer+0x10>)
 8001dd0:	f002 f826 	bl	8003e20 <HAL_TIM_Base_Stop_IT>
	TimerTriger = 0;
 8001dd4:	4b02      	ldr	r3, [pc, #8]	; (8001de0 <ResetTimer+0x14>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	801a      	strh	r2, [r3, #0]
}
 8001dda:	bd08      	pop	{r3, pc}
 8001ddc:	20001384 	.word	0x20001384
 8001de0:	20001482 	.word	0x20001482

08001de4 <vDATATask>:
 {
 8001de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001de8:	b089      	sub	sp, #36	; 0x24
	MAIN_FSM_STATE_t InitFSM = STANDBAY_STATE;
 8001dea:	2400      	movs	r4, #0
    	 HAL_GPIO_TogglePin( LED_R_GPIO_Port, LED_R_Pin);
 8001dec:	f8df a264 	ldr.w	sl, [pc, #612]	; 8002054 <vDATATask+0x270>
			  sConfigOC.Pulse = (pwm/100.0)*860;
 8001df0:	f04f 0800 	mov.w	r8, #0
 8001df4:	f8df 9260 	ldr.w	r9, [pc, #608]	; 8002058 <vDATATask+0x274>
 8001df8:	2600      	movs	r6, #0
 8001dfa:	4f98      	ldr	r7, [pc, #608]	; (800205c <vDATATask+0x278>)
 8001dfc:	e00d      	b.n	8001e1a <vDATATask+0x36>
		 		vFDInit();
 8001dfe:	f7ff fc49 	bl	8001694 <vFDInit>
		 			 vSetReg(i,0);
 8001e02:	4625      	mov	r5, r4
 8001e04:	4629      	mov	r1, r5
 8001e06:	b2e0      	uxtb	r0, r4
 8001e08:	f7ff ff86 	bl	8001d18 <vSetReg>
		 		for (int i = 0;i<DEVICE_HOLDING_FLASG;i++)
 8001e0c:	3401      	adds	r4, #1
 8001e0e:	2c05      	cmp	r4, #5
 8001e10:	d1f8      	bne.n	8001e04 <vDATATask+0x20>
		 		 waitFlag( DIN_READY | AIN_READY | MB_READY);
 8001e12:	2007      	movs	r0, #7
 8001e14:	f7ff ff42 	bl	8001c9c <waitFlag>
 {
 8001e18:	2401      	movs	r4, #1
		 vSetRegInput(FSM_STATUS, control_state);
 8001e1a:	4b91      	ldr	r3, [pc, #580]	; (8002060 <vDATATask+0x27c>)
 8001e1c:	781a      	ldrb	r2, [r3, #0]
 8001e1e:	4b91      	ldr	r3, [pc, #580]	; (8002064 <vDATATask+0x280>)
 8001e20:	80da      	strh	r2, [r3, #6]
		 vTaskDelay(10);
 8001e22:	200a      	movs	r0, #10
 8001e24:	f004 ff2a 	bl	8006c7c <vTaskDelay>
		 switch (InitFSM)
 8001e28:	2c00      	cmp	r4, #0
 8001e2a:	d0e8      	beq.n	8001dfe <vDATATask+0x1a>
    usRes = input_regs[reg_addr];
 8001e2c:	4b8d      	ldr	r3, [pc, #564]	; (8002064 <vDATATask+0x280>)
	 if (usGetRegInput(DOOR_STATE) == OPEN)
 8001e2e:	899b      	ldrh	r3, [r3, #12]
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d032      	beq.n	8001e9a <vDATATask+0xb6>
		 		if (mode_restart == 1)
 8001e34:	4b8c      	ldr	r3, [pc, #560]	; (8002068 <vDATATask+0x284>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d037      	beq.n	8001eac <vDATATask+0xc8>

static void vSlaveControlFSM()
 {
		switch(control_state )
 8001e3c:	4b88      	ldr	r3, [pc, #544]	; (8002060 <vDATATask+0x27c>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d053      	beq.n	8001eec <vDATATask+0x108>
 8001e44:	2b03      	cmp	r3, #3
 8001e46:	d07d      	beq.n	8001f44 <vDATATask+0x160>
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d061      	beq.n	8001f10 <vDATATask+0x12c>
		usRes = system_regs[reg_addr];
 8001e4c:	4b87      	ldr	r3, [pc, #540]	; (800206c <vDATATask+0x288>)
 8001e4e:	8918      	ldrh	r0, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001e50:	2300      	movs	r3, #0
 8001e52:	9301      	str	r3, [sp, #4]
 8001e54:	9302      	str	r3, [sp, #8]
 8001e56:	9303      	str	r3, [sp, #12]
 8001e58:	9304      	str	r3, [sp, #16]
 8001e5a:	9305      	str	r3, [sp, #20]
 8001e5c:	9306      	str	r3, [sp, #24]
 8001e5e:	9307      	str	r3, [sp, #28]
	if (pwm <=100)
 8001e60:	2864      	cmp	r0, #100	; 0x64
 8001e62:	d804      	bhi.n	8001e6e <vDATATask+0x8a>
		if (pwm != PWM_STATE)
 8001e64:	4b82      	ldr	r3, [pc, #520]	; (8002070 <vDATATask+0x28c>)
 8001e66:	881b      	ldrh	r3, [r3, #0]
 8001e68:	4283      	cmp	r3, r0
 8001e6a:	f040 81d2 	bne.w	8002212 <vDATATask+0x42e>
    usRes = input_regs[reg_addr];
 8001e6e:	4b7d      	ldr	r3, [pc, #500]	; (8002064 <vDATATask+0x280>)
 8001e70:	8a1b      	ldrh	r3, [r3, #16]
     if ((usGetRegInput(ERROR_STATUS) &  WATER_TEMP_ERROR ) || ( (usGetRegInput(ERROR_STATUS) & AIR_TEMP_ERROR) && (usGetRegInput(TYPE)==HW)))
 8001e72:	f013 0f01 	tst.w	r3, #1
 8001e76:	f040 8202 	bne.w	800227e <vDATATask+0x49a>
 8001e7a:	f013 0f02 	tst.w	r3, #2
 8001e7e:	d004      	beq.n	8001e8a <vDATATask+0xa6>
    usRes = input_regs[reg_addr];
 8001e80:	4b78      	ldr	r3, [pc, #480]	; (8002064 <vDATATask+0x280>)
     if ((usGetRegInput(ERROR_STATUS) &  WATER_TEMP_ERROR ) || ( (usGetRegInput(ERROR_STATUS) & AIR_TEMP_ERROR) && (usGetRegInput(TYPE)==HW)))
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	f000 8226 	beq.w	80022d6 <vDATATask+0x4f2>
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	4b79      	ldr	r3, [pc, #484]	; (8002074 <vDATATask+0x290>)
 8001e8e:	801a      	strh	r2, [r3, #0]
    	 HAL_GPIO_WritePin( LED_R_GPIO_Port, LED_R_Pin,GPIO_PIN_RESET);
 8001e90:	2120      	movs	r1, #32
 8001e92:	4650      	mov	r0, sl
 8001e94:	f001 fb42 	bl	800351c <HAL_GPIO_WritePin>
 8001e98:	e1fc      	b.n	8002294 <vDATATask+0x4b0>
    usRes = input_regs[reg_addr];
 8001e9a:	4b72      	ldr	r3, [pc, #456]	; (8002064 <vDATATask+0x280>)
		if (usGetRegInput(DOOR_STATE_TRIGGER)  == OPEN )
 8001e9c:	89db      	ldrh	r3, [r3, #14]
 8001e9e:	2b02      	cmp	r3, #2
      input_regs[reg_addr] = data;
 8001ea0:	4b70      	ldr	r3, [pc, #448]	; (8002064 <vDATATask+0x280>)
 8001ea2:	bf0c      	ite	eq
 8001ea4:	2203      	moveq	r2, #3
 8001ea6:	2202      	movne	r2, #2
 8001ea8:	81da      	strh	r2, [r3, #14]
}
 8001eaa:	e7c3      	b.n	8001e34 <vDATATask+0x50>
    usRes = input_regs[reg_addr];
 8001eac:	4b6d      	ldr	r3, [pc, #436]	; (8002064 <vDATATask+0x280>)
		 			if (usGetRegInput(TYPE)==NONE)
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	b933      	cbnz	r3, 8001ec0 <vDATATask+0xdc>
		 				control_state = TELEMETRY;
 8001eb2:	4b6b      	ldr	r3, [pc, #428]	; (8002060 <vDATATask+0x27c>)
 8001eb4:	2204      	movs	r2, #4
 8001eb6:	701a      	strb	r2, [r3, #0]
		 			mode_restart = 0;
 8001eb8:	4b6b      	ldr	r3, [pc, #428]	; (8002068 <vDATATask+0x284>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	701a      	strb	r2, [r3, #0]
 8001ebe:	e7bd      	b.n	8001e3c <vDATATask+0x58>
			connection = 1;
 8001ec0:	4b6d      	ldr	r3, [pc, #436]	; (8002078 <vDATATask+0x294>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	701a      	strb	r2, [r3, #0]
		usRes = system_regs[reg_addr];
 8001ec6:	4b69      	ldr	r3, [pc, #420]	; (800206c <vDATATask+0x288>)
 8001ec8:	881b      	ldrh	r3, [r3, #0]
	return  (usRes);
 8001eca:	b13b      	cbz	r3, 8001edc <vDATATask+0xf8>
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d8f1      	bhi.n	8001eb8 <vDATATask+0xd4>
		 				 control_state = PREHEAT;
 8001ed4:	4b62      	ldr	r3, [pc, #392]	; (8002060 <vDATATask+0x27c>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	701a      	strb	r2, [r3, #0]
		 			     break;
 8001eda:	e7ed      	b.n	8001eb8 <vDATATask+0xd4>
		 				  vSetState(FAN_SPEED_OFF, VALVE_ON);
 8001edc:	2101      	movs	r1, #1
 8001ede:	2000      	movs	r0, #0
 8001ee0:	f7ff febe 	bl	8001c60 <vSetState>
		 				  control_state = STANDBY;
 8001ee4:	4b5e      	ldr	r3, [pc, #376]	; (8002060 <vDATATask+0x27c>)
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	701a      	strb	r2, [r3, #0]
		 				  break;
 8001eea:	e7e5      	b.n	8001eb8 <vDATATask+0xd4>
    usRes = input_regs[reg_addr];
 8001eec:	4b5d      	ldr	r3, [pc, #372]	; (8002064 <vDATATask+0x280>)
 8001eee:	885b      	ldrh	r3, [r3, #2]
		{
			case STANDBY: //Дежурный режим
				if ( usGetRegInput(WATER_TEMP) <=  STANDBY_WATER_ON_TEMP )
 8001ef0:	2b14      	cmp	r3, #20
 8001ef2:	d908      	bls.n	8001f06 <vDATATask+0x122>
				{
					vSetState(FAN_SPEED_OFF, VALVE_ON);
					break;
				}
			    if (usGetRegInput(WATER_TEMP) >=   STANDBY_WATER_OFF_TEMP )
 8001ef4:	2b1d      	cmp	r3, #29
				{
			    	vSetState(FAN_SPEED_OFF, VALVE_OFF);
 8001ef6:	bf87      	ittee	hi
 8001ef8:	2100      	movhi	r1, #0
 8001efa:	4608      	movhi	r0, r1
			    	break;
				}
			    vSetState(FAN_SPEED_OFF, VALVE_AUTO);
 8001efc:	2102      	movls	r1, #2
 8001efe:	2000      	movls	r0, #0
 8001f00:	f7ff feae 	bl	8001c60 <vSetState>
				break;
 8001f04:	e7a2      	b.n	8001e4c <vDATATask+0x68>
					vSetState(FAN_SPEED_OFF, VALVE_ON);
 8001f06:	2101      	movs	r1, #1
 8001f08:	2000      	movs	r0, #0
 8001f0a:	f7ff fea9 	bl	8001c60 <vSetState>
					break;
 8001f0e:	e79d      	b.n	8001e4c <vDATATask+0x68>
			case PREHEAT:
					 vSetState(FAN_SPEED_OFF, VALVE_ON);
 8001f10:	2101      	movs	r1, #1
 8001f12:	2000      	movs	r0, #0
 8001f14:	f7ff fea4 	bl	8001c60 <vSetState>
		usRes = vFDGetRegState( reg_addr - DEVICE_HOLDING_FLASG );
 8001f18:	2008      	movs	r0, #8
 8001f1a:	f7ff fbe9 	bl	80016f0 <vFDGetRegState>
					 if (GetTimer(usGetReg(PREHEAT_OFF_TIME)) &&  (usGetRegInput(WATER_TEMP) >= usGetReg(WATER_ON_TEMP)) )
 8001f1e:	b280      	uxth	r0, r0
 8001f20:	f7ff ff38 	bl	8001d94 <GetTimer>
 8001f24:	2800      	cmp	r0, #0
 8001f26:	d091      	beq.n	8001e4c <vDATATask+0x68>
    usRes = input_regs[reg_addr];
 8001f28:	4b4e      	ldr	r3, [pc, #312]	; (8002064 <vDATATask+0x280>)
 8001f2a:	885d      	ldrh	r5, [r3, #2]
		usRes = vFDGetRegState( reg_addr - DEVICE_HOLDING_FLASG );
 8001f2c:	2006      	movs	r0, #6
 8001f2e:	f7ff fbdf 	bl	80016f0 <vFDGetRegState>
					 if (GetTimer(usGetReg(PREHEAT_OFF_TIME)) &&  (usGetRegInput(WATER_TEMP) >= usGetReg(WATER_ON_TEMP)) )
 8001f32:	b283      	uxth	r3, r0
 8001f34:	42ab      	cmp	r3, r5
 8001f36:	d889      	bhi.n	8001e4c <vDATATask+0x68>
					 {
						 ResetTimer();
 8001f38:	f7ff ff48 	bl	8001dcc <ResetTimer>
						 control_state =  WORK;
 8001f3c:	4b48      	ldr	r3, [pc, #288]	; (8002060 <vDATATask+0x27c>)
 8001f3e:	2203      	movs	r2, #3
 8001f40:	701a      	strb	r2, [r3, #0]
 8001f42:	e783      	b.n	8001e4c <vDATATask+0x68>
    usRes = input_regs[reg_addr];
 8001f44:	4b47      	ldr	r3, [pc, #284]	; (8002064 <vDATATask+0x280>)
 8001f46:	885d      	ldrh	r5, [r3, #2]
		usRes = vFDGetRegState( reg_addr - DEVICE_HOLDING_FLASG );
 8001f48:	2009      	movs	r0, #9
 8001f4a:	f7ff fbd1 	bl	80016f0 <vFDGetRegState>
					 }
					 break;
				 case WORK:
					    //Режим разморозки
					    if (usGetRegInput(WATER_TEMP) <= usGetReg(WATER_FREEZE_TEMP))
 8001f4e:	b280      	uxth	r0, r0
 8001f50:	42a8      	cmp	r0, r5
 8001f52:	d22d      	bcs.n	8001fb0 <vDATATask+0x1cc>
    usRes = input_regs[reg_addr];
 8001f54:	4b43      	ldr	r3, [pc, #268]	; (8002064 <vDATATask+0x280>)
 8001f56:	89db      	ldrh	r3, [r3, #14]
					    	vSetRegInput(DOOR_STATE_TRIGGER,CLOSED);
					 		control_state = PREHEAT;
					 		break;
					 	}
					    //Режим срабатывания дверных концевиков
					    if ((usGetRegInput(DOOR_STATE_TRIGGER) !=CLOSED) && (usGetReg(MODE) == DEV_AUTO ))
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d12f      	bne.n	8001fbc <vDATATask+0x1d8>
    usRes = input_regs[reg_addr];
 8001f5c:	4b41      	ldr	r3, [pc, #260]	; (8002064 <vDATATask+0x280>)
							{
								vSetState(FAN_SPEED_MAX, VALVE_ON);
							}
							break;
						}
					    if ((usGetRegInput(TYPE) == HW) && ( usGetReg(MODE) == DEV_AUTO))
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d04e      	beq.n	8002002 <vDATATask+0x21e>
			connection = 1;
 8001f64:	4b44      	ldr	r3, [pc, #272]	; (8002078 <vDATATask+0x294>)
 8001f66:	2201      	movs	r2, #1
 8001f68:	701a      	strb	r2, [r3, #0]
		usRes = system_regs[reg_addr];
 8001f6a:	4b40      	ldr	r3, [pc, #256]	; (800206c <vDATATask+0x288>)
					    	{
					    		vSetState(FAN_SPEED_OFF,VALVE_OFF);
					    		break;
					    	}
					    }
					    if  ( usGetReg(MODE) == DEV_MANUAL)
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	f000 80e8 	beq.w	8002144 <vDATATask+0x360>
    usRes = input_regs[reg_addr];
 8001f74:	4b3b      	ldr	r3, [pc, #236]	; (8002064 <vDATATask+0x280>)
					    		vSetState(usGetReg(FAN_SPEED_CONFIG), VALVE_ON);
					    		break;
					    	}
					    	vSetState(usGetReg(FAN_SPEED_CONFIG), VALVE_AUTO);
					    }
					    if ((usGetRegInput(TYPE) == AW) && ( usGetReg(MODE) == DEV_AUTO))
 8001f76:	881b      	ldrh	r3, [r3, #0]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	f47f af67 	bne.w	8001e4c <vDATATask+0x68>
			connection = 1;
 8001f7e:	4b3e      	ldr	r3, [pc, #248]	; (8002078 <vDATATask+0x294>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	701a      	strb	r2, [r3, #0]
		usRes = system_regs[reg_addr];
 8001f84:	4b39      	ldr	r3, [pc, #228]	; (800206c <vDATATask+0x288>)
					    if ((usGetRegInput(TYPE) == AW) && ( usGetReg(MODE) == DEV_AUTO))
 8001f86:	881b      	ldrh	r3, [r3, #0]
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	f47f af5f 	bne.w	8001e4c <vDATATask+0x68>
		usRes = system_regs[reg_addr];
 8001f8e:	4b37      	ldr	r3, [pc, #220]	; (800206c <vDATATask+0x288>)
					    {
					    	if (usGetReg(AIR_TEMP) < (usGetReg(WORK_TEMP) - usGetReg(VALVE_ON_TEMP) ))
 8001f90:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 8001f94:	889d      	ldrh	r5, [r3, #4]
		usRes = vFDGetRegState( reg_addr - DEVICE_HOLDING_FLASG );
 8001f96:	2004      	movs	r0, #4
 8001f98:	f7ff fbaa 	bl	80016f0 <vFDGetRegState>
					    	if (usGetReg(AIR_TEMP) < (usGetReg(WORK_TEMP) - usGetReg(VALVE_ON_TEMP) ))
 8001f9c:	b283      	uxth	r3, r0
 8001f9e:	1aed      	subs	r5, r5, r3
 8001fa0:	45ab      	cmp	fp, r5
 8001fa2:	f280 80f7 	bge.w	8002194 <vDATATask+0x3b0>
					    	{
					    		vSetState(FAN_SPEED_MID, VALVE_ON);
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	2002      	movs	r0, #2
 8001faa:	f7ff fe59 	bl	8001c60 <vSetState>
					    		break;
 8001fae:	e74d      	b.n	8001e4c <vDATATask+0x68>
      input_regs[reg_addr] = data;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	4a2c      	ldr	r2, [pc, #176]	; (8002064 <vDATATask+0x280>)
 8001fb4:	81d3      	strh	r3, [r2, #14]
					 		control_state = PREHEAT;
 8001fb6:	4a2a      	ldr	r2, [pc, #168]	; (8002060 <vDATATask+0x27c>)
 8001fb8:	7013      	strb	r3, [r2, #0]
					 		break;
 8001fba:	e747      	b.n	8001e4c <vDATATask+0x68>
			connection = 1;
 8001fbc:	4a2e      	ldr	r2, [pc, #184]	; (8002078 <vDATATask+0x294>)
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	7011      	strb	r1, [r2, #0]
		usRes = system_regs[reg_addr];
 8001fc2:	4a2a      	ldr	r2, [pc, #168]	; (800206c <vDATATask+0x288>)
					    if ((usGetRegInput(DOOR_STATE_TRIGGER) !=CLOSED) && (usGetReg(MODE) == DEV_AUTO ))
 8001fc4:	8812      	ldrh	r2, [r2, #0]
 8001fc6:	2a02      	cmp	r2, #2
 8001fc8:	d1c8      	bne.n	8001f5c <vDATATask+0x178>
					    	if (usGetRegInput(DOOR_STATE_TRIGGER) == REOPEN)
 8001fca:	2b03      	cmp	r3, #3
 8001fcc:	d008      	beq.n	8001fe0 <vDATATask+0x1fc>
    usRes = input_regs[reg_addr];
 8001fce:	4b25      	ldr	r3, [pc, #148]	; (8002064 <vDATATask+0x280>)
					    	if (usGetRegInput(DOOR_STATE) == CLOSED)
 8001fd0:	899b      	ldrh	r3, [r3, #12]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d009      	beq.n	8001fea <vDATATask+0x206>
								vSetState(FAN_SPEED_MAX, VALVE_ON);
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	2003      	movs	r0, #3
 8001fda:	f7ff fe41 	bl	8001c60 <vSetState>
 8001fde:	e735      	b.n	8001e4c <vDATATask+0x68>
      input_regs[reg_addr] = data;
 8001fe0:	4b20      	ldr	r3, [pc, #128]	; (8002064 <vDATATask+0x280>)
 8001fe2:	81da      	strh	r2, [r3, #14]
					    		 ResetTimer();
 8001fe4:	f7ff fef2 	bl	8001dcc <ResetTimer>
 8001fe8:	e7f1      	b.n	8001fce <vDATATask+0x1ea>
								if (GetTimer(DOOR_CLOSE_TIME))
 8001fea:	2012      	movs	r0, #18
 8001fec:	f7ff fed2 	bl	8001d94 <GetTimer>
 8001ff0:	2800      	cmp	r0, #0
 8001ff2:	f43f af2b 	beq.w	8001e4c <vDATATask+0x68>
      input_regs[reg_addr] = data;
 8001ff6:	4b1b      	ldr	r3, [pc, #108]	; (8002064 <vDATATask+0x280>)
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	81da      	strh	r2, [r3, #14]
									 ResetTimer();
 8001ffc:	f7ff fee6 	bl	8001dcc <ResetTimer>
 8002000:	e724      	b.n	8001e4c <vDATATask+0x68>
			connection = 1;
 8002002:	4b1d      	ldr	r3, [pc, #116]	; (8002078 <vDATATask+0x294>)
 8002004:	2201      	movs	r2, #1
 8002006:	701a      	strb	r2, [r3, #0]
		usRes = system_regs[reg_addr];
 8002008:	4b18      	ldr	r3, [pc, #96]	; (800206c <vDATATask+0x288>)
					    if ((usGetRegInput(TYPE) == HW) && ( usGetReg(MODE) == DEV_AUTO))
 800200a:	881b      	ldrh	r3, [r3, #0]
 800200c:	2b02      	cmp	r3, #2
 800200e:	d1a9      	bne.n	8001f64 <vDATATask+0x180>
    usRes = input_regs[reg_addr];
 8002010:	4b14      	ldr	r3, [pc, #80]	; (8002064 <vDATATask+0x280>)
					    	if ( usGetRegInput(IN_AIR_TEMP)  < ( usGetReg(WORK_TEMP) - usGetReg(SPEED_3_HW_SWITCH_TEMP)  ) )
 8002012:	f8b3 b004 	ldrh.w	fp, [r3, #4]
		usRes = system_regs[reg_addr];
 8002016:	4b15      	ldr	r3, [pc, #84]	; (800206c <vDATATask+0x288>)
					    	if ( usGetRegInput(IN_AIR_TEMP)  < ( usGetReg(WORK_TEMP) - usGetReg(SPEED_3_HW_SWITCH_TEMP)  ) )
 8002018:	889d      	ldrh	r5, [r3, #4]
		usRes = vFDGetRegState( reg_addr - DEVICE_HOLDING_FLASG );
 800201a:	2000      	movs	r0, #0
 800201c:	f7ff fb68 	bl	80016f0 <vFDGetRegState>
					    	if ( usGetRegInput(IN_AIR_TEMP)  < ( usGetReg(WORK_TEMP) - usGetReg(SPEED_3_HW_SWITCH_TEMP)  ) )
 8002020:	b283      	uxth	r3, r0
 8002022:	1aed      	subs	r5, r5, r3
 8002024:	45ab      	cmp	fp, r5
 8002026:	da04      	bge.n	8002032 <vDATATask+0x24e>
					    		vSetState(FAN_SPEED_MAX, VALVE_ON);
 8002028:	2101      	movs	r1, #1
 800202a:	2003      	movs	r0, #3
 800202c:	f7ff fe18 	bl	8001c60 <vSetState>
					    		break;
 8002030:	e70c      	b.n	8001e4c <vDATATask+0x68>
    usRes = input_regs[reg_addr];
 8002032:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <vDATATask+0x280>)
					    	if ( usGetRegInput(IN_AIR_TEMP) < ( usGetReg(WORK_TEMP) - usGetReg(SPEED_2_HW_SWITCH_TEMP)))
 8002034:	f8b3 b004 	ldrh.w	fp, [r3, #4]
		usRes = system_regs[reg_addr];
 8002038:	4b0c      	ldr	r3, [pc, #48]	; (800206c <vDATATask+0x288>)
					    	if ( usGetRegInput(IN_AIR_TEMP) < ( usGetReg(WORK_TEMP) - usGetReg(SPEED_2_HW_SWITCH_TEMP)))
 800203a:	889d      	ldrh	r5, [r3, #4]
		usRes = vFDGetRegState( reg_addr - DEVICE_HOLDING_FLASG );
 800203c:	2001      	movs	r0, #1
 800203e:	f7ff fb57 	bl	80016f0 <vFDGetRegState>
					    	if ( usGetRegInput(IN_AIR_TEMP) < ( usGetReg(WORK_TEMP) - usGetReg(SPEED_2_HW_SWITCH_TEMP)))
 8002042:	b283      	uxth	r3, r0
 8002044:	1aed      	subs	r5, r5, r3
 8002046:	45ab      	cmp	fp, r5
 8002048:	da18      	bge.n	800207c <vDATATask+0x298>
					    		vSetState(FAN_SPEED_AUTO,  VALVE_AUTO);
 800204a:	2102      	movs	r1, #2
 800204c:	2004      	movs	r0, #4
 800204e:	f7ff fe07 	bl	8001c60 <vSetState>
					    		break;
 8002052:	e6fb      	b.n	8001e4c <vDATATask+0x68>
 8002054:	40010800 	.word	0x40010800
 8002058:	40590000 	.word	0x40590000
 800205c:	408ae000 	.word	0x408ae000
 8002060:	20001485 	.word	0x20001485
 8002064:	20001488 	.word	0x20001488
 8002068:	2000149c 	.word	0x2000149c
 800206c:	200014a4 	.word	0x200014a4
 8002070:	20001480 	.word	0x20001480
 8002074:	200014ae 	.word	0x200014ae
 8002078:	20001484 	.word	0x20001484
    usRes = input_regs[reg_addr];
 800207c:	4b98      	ldr	r3, [pc, #608]	; (80022e0 <vDATATask+0x4fc>)
					    	if ( usGetRegInput(IN_AIR_TEMP) == ( usGetReg(WORK_TEMP) - usGetReg(SPEED_2_HW_SWITCH_TEMP)))
 800207e:	f8b3 b004 	ldrh.w	fp, [r3, #4]
		usRes = system_regs[reg_addr];
 8002082:	4b98      	ldr	r3, [pc, #608]	; (80022e4 <vDATATask+0x500>)
					    	if ( usGetRegInput(IN_AIR_TEMP) == ( usGetReg(WORK_TEMP) - usGetReg(SPEED_2_HW_SWITCH_TEMP)))
 8002084:	889d      	ldrh	r5, [r3, #4]
		usRes = vFDGetRegState( reg_addr - DEVICE_HOLDING_FLASG );
 8002086:	2001      	movs	r0, #1
 8002088:	f7ff fb32 	bl	80016f0 <vFDGetRegState>
					    	if ( usGetRegInput(IN_AIR_TEMP) == ( usGetReg(WORK_TEMP) - usGetReg(SPEED_2_HW_SWITCH_TEMP)))
 800208c:	b283      	uxth	r3, r0
 800208e:	1aed      	subs	r5, r5, r3
 8002090:	45ab      	cmp	fp, r5
 8002092:	d010      	beq.n	80020b6 <vDATATask+0x2d2>
    usRes = input_regs[reg_addr];
 8002094:	4b92      	ldr	r3, [pc, #584]	; (80022e0 <vDATATask+0x4fc>)
					    	if (usGetRegInput(IN_AIR_TEMP) < ( usGetReg(WORK_TEMP) - usGetReg(SPEED_1_HW_SWITCH_TEMP)))
 8002096:	f8b3 b004 	ldrh.w	fp, [r3, #4]
		usRes = system_regs[reg_addr];
 800209a:	4b92      	ldr	r3, [pc, #584]	; (80022e4 <vDATATask+0x500>)
					    	if (usGetRegInput(IN_AIR_TEMP) < ( usGetReg(WORK_TEMP) - usGetReg(SPEED_1_HW_SWITCH_TEMP)))
 800209c:	889d      	ldrh	r5, [r3, #4]
		usRes = vFDGetRegState( reg_addr - DEVICE_HOLDING_FLASG );
 800209e:	2002      	movs	r0, #2
 80020a0:	f7ff fb26 	bl	80016f0 <vFDGetRegState>
					    	if (usGetRegInput(IN_AIR_TEMP) < ( usGetReg(WORK_TEMP) - usGetReg(SPEED_1_HW_SWITCH_TEMP)))
 80020a4:	b283      	uxth	r3, r0
 80020a6:	1aed      	subs	r5, r5, r3
 80020a8:	45ab      	cmp	fp, r5
 80020aa:	da09      	bge.n	80020c0 <vDATATask+0x2dc>
					    		vSetState(FAN_SPEED_AUTO,VALVE_AUTO);
 80020ac:	2102      	movs	r1, #2
 80020ae:	2004      	movs	r0, #4
 80020b0:	f7ff fdd6 	bl	8001c60 <vSetState>
					    		break;
 80020b4:	e6ca      	b.n	8001e4c <vDATATask+0x68>
					    		vSetState(FAN_SPEED_MID, VALVE_AUTO);
 80020b6:	2102      	movs	r1, #2
 80020b8:	4608      	mov	r0, r1
 80020ba:	f7ff fdd1 	bl	8001c60 <vSetState>
					    	    break;
 80020be:	e6c5      	b.n	8001e4c <vDATATask+0x68>
    usRes = input_regs[reg_addr];
 80020c0:	4b87      	ldr	r3, [pc, #540]	; (80022e0 <vDATATask+0x4fc>)
					    	if (usGetRegInput(IN_AIR_TEMP) == ( usGetReg(WORK_TEMP) - usGetReg(SPEED_1_HW_SWITCH_TEMP)))
 80020c2:	f8b3 b004 	ldrh.w	fp, [r3, #4]
		usRes = system_regs[reg_addr];
 80020c6:	4b87      	ldr	r3, [pc, #540]	; (80022e4 <vDATATask+0x500>)
					    	if (usGetRegInput(IN_AIR_TEMP) == ( usGetReg(WORK_TEMP) - usGetReg(SPEED_1_HW_SWITCH_TEMP)))
 80020c8:	889d      	ldrh	r5, [r3, #4]
		usRes = vFDGetRegState( reg_addr - DEVICE_HOLDING_FLASG );
 80020ca:	2002      	movs	r0, #2
 80020cc:	f7ff fb10 	bl	80016f0 <vFDGetRegState>
					    	if (usGetRegInput(IN_AIR_TEMP) == ( usGetReg(WORK_TEMP) - usGetReg(SPEED_1_HW_SWITCH_TEMP)))
 80020d0:	b283      	uxth	r3, r0
 80020d2:	1aed      	subs	r5, r5, r3
 80020d4:	45ab      	cmp	fp, r5
 80020d6:	d00b      	beq.n	80020f0 <vDATATask+0x30c>
    usRes = input_regs[reg_addr];
 80020d8:	4b81      	ldr	r3, [pc, #516]	; (80022e0 <vDATATask+0x4fc>)
 80020da:	889d      	ldrh	r5, [r3, #4]
		usRes = system_regs[reg_addr];
 80020dc:	4b81      	ldr	r3, [pc, #516]	; (80022e4 <vDATATask+0x500>)
 80020de:	f8b3 b004 	ldrh.w	fp, [r3, #4]
					    	if  (usGetRegInput(IN_AIR_TEMP)  <  usGetReg(WORK_TEMP))
 80020e2:	45ab      	cmp	fp, r5
 80020e4:	d909      	bls.n	80020fa <vDATATask+0x316>
					    		vSetState(FAN_SPEED_AUTO ,VALVE_AUTO);
 80020e6:	2102      	movs	r1, #2
 80020e8:	2004      	movs	r0, #4
 80020ea:	f7ff fdb9 	bl	8001c60 <vSetState>
					    		break;
 80020ee:	e6ad      	b.n	8001e4c <vDATATask+0x68>
					    		vSetState(FAN_SPEED_MIN ,VALVE_AUTO);
 80020f0:	2102      	movs	r1, #2
 80020f2:	2001      	movs	r0, #1
 80020f4:	f7ff fdb4 	bl	8001c60 <vSetState>
					    		break;
 80020f8:	e6a8      	b.n	8001e4c <vDATATask+0x68>
					    	if (usGetRegInput(IN_AIR_TEMP) ==  usGetReg(WORK_TEMP) )
 80020fa:	45ab      	cmp	fp, r5
 80020fc:	d00b      	beq.n	8002116 <vDATATask+0x332>
		usRes = vFDGetRegState( reg_addr - DEVICE_HOLDING_FLASG );
 80020fe:	2003      	movs	r0, #3
 8002100:	f7ff faf6 	bl	80016f0 <vFDGetRegState>
					    	if (usGetRegInput(IN_AIR_TEMP)  < ( usGetReg(WORK_TEMP) + usGetReg(FAN_OFF_HW_TEMP)))
 8002104:	b283      	uxth	r3, r0
 8002106:	445b      	add	r3, fp
 8002108:	429d      	cmp	r5, r3
 800210a:	da09      	bge.n	8002120 <vDATATask+0x33c>
					    		vSetState(FAN_SPEED_AUTO ,VALVE_OFF);
 800210c:	2100      	movs	r1, #0
 800210e:	2004      	movs	r0, #4
 8002110:	f7ff fda6 	bl	8001c60 <vSetState>
					    		break;
 8002114:	e69a      	b.n	8001e4c <vDATATask+0x68>
					    		vSetState(FAN_SPEED_AUTO ,VALVE_OFF);
 8002116:	2100      	movs	r1, #0
 8002118:	2004      	movs	r0, #4
 800211a:	f7ff fda1 	bl	8001c60 <vSetState>
					    		break;
 800211e:	e695      	b.n	8001e4c <vDATATask+0x68>
    usRes = input_regs[reg_addr];
 8002120:	4b6f      	ldr	r3, [pc, #444]	; (80022e0 <vDATATask+0x4fc>)
					    	if (usGetRegInput(IN_AIR_TEMP) >= ( usGetReg(WORK_TEMP) + usGetReg(FAN_OFF_HW_TEMP)))
 8002122:	889d      	ldrh	r5, [r3, #4]
		usRes = system_regs[reg_addr];
 8002124:	4b6f      	ldr	r3, [pc, #444]	; (80022e4 <vDATATask+0x500>)
					    	if (usGetRegInput(IN_AIR_TEMP) >= ( usGetReg(WORK_TEMP) + usGetReg(FAN_OFF_HW_TEMP)))
 8002126:	f8b3 b004 	ldrh.w	fp, [r3, #4]
		usRes = vFDGetRegState( reg_addr - DEVICE_HOLDING_FLASG );
 800212a:	2003      	movs	r0, #3
 800212c:	f7ff fae0 	bl	80016f0 <vFDGetRegState>
					    	if (usGetRegInput(IN_AIR_TEMP) >= ( usGetReg(WORK_TEMP) + usGetReg(FAN_OFF_HW_TEMP)))
 8002130:	b283      	uxth	r3, r0
 8002132:	445b      	add	r3, fp
 8002134:	429d      	cmp	r5, r3
 8002136:	f6ff af15 	blt.w	8001f64 <vDATATask+0x180>
					    		vSetState(FAN_SPEED_OFF,VALVE_OFF);
 800213a:	2100      	movs	r1, #0
 800213c:	4608      	mov	r0, r1
 800213e:	f7ff fd8f 	bl	8001c60 <vSetState>
					    		break;
 8002142:	e683      	b.n	8001e4c <vDATATask+0x68>
		usRes = system_regs[reg_addr];
 8002144:	4b67      	ldr	r3, [pc, #412]	; (80022e4 <vDATATask+0x500>)
					    	if (usGetReg(AIR_TEMP) > ( usGetReg(WORK_TEMP) + usGetReg(VALVE_OFF_TEMP)))
 8002146:	88dd      	ldrh	r5, [r3, #6]
 8002148:	f8b3 b004 	ldrh.w	fp, [r3, #4]
		usRes = vFDGetRegState( reg_addr - DEVICE_HOLDING_FLASG );
 800214c:	2007      	movs	r0, #7
 800214e:	f7ff facf 	bl	80016f0 <vFDGetRegState>
					    	if (usGetReg(AIR_TEMP) > ( usGetReg(WORK_TEMP) + usGetReg(VALVE_OFF_TEMP)))
 8002152:	b283      	uxth	r3, r0
 8002154:	445b      	add	r3, fp
 8002156:	429d      	cmp	r5, r3
 8002158:	dd05      	ble.n	8002166 <vDATATask+0x382>
					    		vSetState(usGetReg(FAN_SPEED_CONFIG), VALVE_OFF);
 800215a:	2100      	movs	r1, #0
 800215c:	4b61      	ldr	r3, [pc, #388]	; (80022e4 <vDATATask+0x500>)
 800215e:	7898      	ldrb	r0, [r3, #2]
 8002160:	f7ff fd7e 	bl	8001c60 <vSetState>
					    		break;
 8002164:	e672      	b.n	8001e4c <vDATATask+0x68>
		usRes = system_regs[reg_addr];
 8002166:	4b5f      	ldr	r3, [pc, #380]	; (80022e4 <vDATATask+0x500>)
					    	if (usGetReg(AIR_TEMP) < (usGetReg(WORK_TEMP) - usGetReg(VALVE_ON_TEMP) ))
 8002168:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 800216c:	889d      	ldrh	r5, [r3, #4]
		usRes = vFDGetRegState( reg_addr - DEVICE_HOLDING_FLASG );
 800216e:	2004      	movs	r0, #4
 8002170:	f7ff fabe 	bl	80016f0 <vFDGetRegState>
					    	if (usGetReg(AIR_TEMP) < (usGetReg(WORK_TEMP) - usGetReg(VALVE_ON_TEMP) ))
 8002174:	b283      	uxth	r3, r0
 8002176:	1aed      	subs	r5, r5, r3
 8002178:	45ab      	cmp	fp, r5
 800217a:	da05      	bge.n	8002188 <vDATATask+0x3a4>
					    		vSetState(usGetReg(FAN_SPEED_CONFIG), VALVE_ON);
 800217c:	2101      	movs	r1, #1
 800217e:	4b59      	ldr	r3, [pc, #356]	; (80022e4 <vDATATask+0x500>)
 8002180:	7898      	ldrb	r0, [r3, #2]
 8002182:	f7ff fd6d 	bl	8001c60 <vSetState>
					    		break;
 8002186:	e661      	b.n	8001e4c <vDATATask+0x68>
					    	vSetState(usGetReg(FAN_SPEED_CONFIG), VALVE_AUTO);
 8002188:	2102      	movs	r1, #2
 800218a:	4b56      	ldr	r3, [pc, #344]	; (80022e4 <vDATATask+0x500>)
 800218c:	7898      	ldrb	r0, [r3, #2]
 800218e:	f7ff fd67 	bl	8001c60 <vSetState>
 8002192:	e6ef      	b.n	8001f74 <vDATATask+0x190>
		usRes = system_regs[reg_addr];
 8002194:	4b53      	ldr	r3, [pc, #332]	; (80022e4 <vDATATask+0x500>)
					    	}
					    	if (usGetReg(AIR_TEMP) == ( usGetReg(WORK_TEMP) - usGetReg(VALVE_ON_TEMP)))
 8002196:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 800219a:	889d      	ldrh	r5, [r3, #4]
		usRes = vFDGetRegState( reg_addr - DEVICE_HOLDING_FLASG );
 800219c:	2004      	movs	r0, #4
 800219e:	f7ff faa7 	bl	80016f0 <vFDGetRegState>
					    	if (usGetReg(AIR_TEMP) == ( usGetReg(WORK_TEMP) - usGetReg(VALVE_ON_TEMP)))
 80021a2:	b283      	uxth	r3, r0
 80021a4:	1aed      	subs	r5, r5, r3
 80021a6:	45ab      	cmp	fp, r5
 80021a8:	d00a      	beq.n	80021c0 <vDATATask+0x3dc>
		usRes = system_regs[reg_addr];
 80021aa:	4b4e      	ldr	r3, [pc, #312]	; (80022e4 <vDATATask+0x500>)
 80021ac:	88dd      	ldrh	r5, [r3, #6]
 80021ae:	f8b3 b004 	ldrh.w	fp, [r3, #4]
					    	{
					    		vSetState( FAN_SPEED_MIN, VALVE_AUTO);
					    		break;
					    	}
					    	if (usGetReg(AIR_TEMP) <  usGetReg(WORK_TEMP))
 80021b2:	45ab      	cmp	fp, r5
 80021b4:	d909      	bls.n	80021ca <vDATATask+0x3e6>
					    	{
					    		vSetState( FAN_SPEED_AUTO ,VALVE_AUTO);
 80021b6:	2102      	movs	r1, #2
 80021b8:	2004      	movs	r0, #4
 80021ba:	f7ff fd51 	bl	8001c60 <vSetState>
					    		break;
 80021be:	e645      	b.n	8001e4c <vDATATask+0x68>
					    		vSetState( FAN_SPEED_MIN, VALVE_AUTO);
 80021c0:	2102      	movs	r1, #2
 80021c2:	2001      	movs	r0, #1
 80021c4:	f7ff fd4c 	bl	8001c60 <vSetState>
					    		break;
 80021c8:	e640      	b.n	8001e4c <vDATATask+0x68>
					    	}
					    	if (usGetReg(AIR_TEMP) ==  usGetReg(WORK_TEMP))
 80021ca:	45ab      	cmp	fp, r5
 80021cc:	d00b      	beq.n	80021e6 <vDATATask+0x402>
		usRes = vFDGetRegState( reg_addr - DEVICE_HOLDING_FLASG );
 80021ce:	2005      	movs	r0, #5
 80021d0:	f7ff fa8e 	bl	80016f0 <vFDGetRegState>
					    	{
					    		vSetState( FAN_SPEED_AUTO ,VALVE_OFF );
					    		break;
					    	}
					    	if (usGetReg(AIR_TEMP) < (usGetReg(WORK_TEMP) + usGetReg(SPEED_SWITCH_AW_TEMP )))
 80021d4:	b283      	uxth	r3, r0
 80021d6:	445b      	add	r3, fp
 80021d8:	429d      	cmp	r5, r3
 80021da:	da09      	bge.n	80021f0 <vDATATask+0x40c>
					    	{
					    		vSetState( FAN_SPEED_AUTO ,VALVE_OFF );
 80021dc:	2100      	movs	r1, #0
 80021de:	2004      	movs	r0, #4
 80021e0:	f7ff fd3e 	bl	8001c60 <vSetState>
					    		break;
 80021e4:	e632      	b.n	8001e4c <vDATATask+0x68>
					    		vSetState( FAN_SPEED_AUTO ,VALVE_OFF );
 80021e6:	2100      	movs	r1, #0
 80021e8:	2004      	movs	r0, #4
 80021ea:	f7ff fd39 	bl	8001c60 <vSetState>
					    		break;
 80021ee:	e62d      	b.n	8001e4c <vDATATask+0x68>
		usRes = system_regs[reg_addr];
 80021f0:	4b3c      	ldr	r3, [pc, #240]	; (80022e4 <vDATATask+0x500>)
					        }
					    	if (usGetReg(AIR_TEMP) >= (usGetReg(WORK_TEMP) + usGetReg(SPEED_SWITCH_AW_TEMP )))
 80021f2:	88dd      	ldrh	r5, [r3, #6]
 80021f4:	f8b3 b004 	ldrh.w	fp, [r3, #4]
		usRes = vFDGetRegState( reg_addr - DEVICE_HOLDING_FLASG );
 80021f8:	2005      	movs	r0, #5
 80021fa:	f7ff fa79 	bl	80016f0 <vFDGetRegState>
					    	if (usGetReg(AIR_TEMP) >= (usGetReg(WORK_TEMP) + usGetReg(SPEED_SWITCH_AW_TEMP )))
 80021fe:	b283      	uxth	r3, r0
 8002200:	445b      	add	r3, fp
 8002202:	429d      	cmp	r5, r3
 8002204:	f6ff ae22 	blt.w	8001e4c <vDATATask+0x68>
					    	{
					    		vSetState(FAN_SPEED_OFF,VALVE_OFF );
 8002208:	2100      	movs	r1, #0
 800220a:	4608      	mov	r0, r1
 800220c:	f7ff fd28 	bl	8001c60 <vSetState>
					    		break;
 8002210:	e61c      	b.n	8001e4c <vDATATask+0x68>
			 sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002212:	2360      	movs	r3, #96	; 0x60
 8002214:	9301      	str	r3, [sp, #4]
			  sConfigOC.Pulse = (pwm/100.0)*860;
 8002216:	f7fe f8ed 	bl	80003f4 <__aeabi_i2d>
 800221a:	4642      	mov	r2, r8
 800221c:	464b      	mov	r3, r9
 800221e:	f7fe fa7d 	bl	800071c <__aeabi_ddiv>
 8002222:	4632      	mov	r2, r6
 8002224:	463b      	mov	r3, r7
 8002226:	f7fe f94f 	bl	80004c8 <__aeabi_dmul>
 800222a:	f7fe fb5f 	bl	80008ec <__aeabi_d2uiz>
 800222e:	9002      	str	r0, [sp, #8]
			  HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_1);
 8002230:	4d2d      	ldr	r5, [pc, #180]	; (80022e8 <vDATATask+0x504>)
 8002232:	2100      	movs	r1, #0
 8002234:	4628      	mov	r0, r5
 8002236:	f002 f945 	bl	80044c4 <HAL_TIM_PWM_Stop>
			  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 800223a:	2200      	movs	r2, #0
 800223c:	a901      	add	r1, sp, #4
 800223e:	4628      	mov	r0, r5
 8002240:	f001 ff9e 	bl	8004180 <HAL_TIM_PWM_ConfigChannel>
			  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8002244:	2100      	movs	r1, #0
 8002246:	4628      	mov	r0, r5
 8002248:	f002 f8d8 	bl	80043fc <HAL_TIM_PWM_Start>
 800224c:	e60f      	b.n	8001e6e <vDATATask+0x8a>
    	   timer =0;
 800224e:	4b27      	ldr	r3, [pc, #156]	; (80022ec <vDATATask+0x508>)
 8002250:	2200      	movs	r2, #0
 8002252:	801a      	strh	r2, [r3, #0]
    	 HAL_GPIO_TogglePin( LED_R_GPIO_Port, LED_R_Pin);
 8002254:	2120      	movs	r1, #32
 8002256:	4650      	mov	r0, sl
 8002258:	f001 f966 	bl	8003528 <HAL_GPIO_TogglePin>
 800225c:	e01a      	b.n	8002294 <vDATATask+0x4b0>
		 vUPDATECoils(1);
 800225e:	2001      	movs	r0, #1
 8002260:	f003 fa9c 	bl	800579c <vUPDATECoils>
 8002264:	e5d8      	b.n	8001e18 <vDATATask+0x34>
	     		 if (usGetRegInput(TYPE) != AW)
 8002266:	2b01      	cmp	r3, #1
 8002268:	d003      	beq.n	8002272 <vDATATask+0x48e>
	     		   K1 = 1;
 800226a:	4621      	mov	r1, r4
		 K3 = 0;
 800226c:	2400      	movs	r4, #0
		 K2 = 0;
 800226e:	4625      	mov	r5, r4
 8002270:	e020      	b.n	80022b4 <vDATATask+0x4d0>
		 K1 = 0;
 8002272:	2100      	movs	r1, #0
		 K3 = 0;
 8002274:	460d      	mov	r5, r1
 8002276:	e01d      	b.n	80022b4 <vDATATask+0x4d0>
		 K1 = 0;
 8002278:	2100      	movs	r1, #0
		 K3 = 0;
 800227a:	460d      	mov	r5, r1
 800227c:	e01a      	b.n	80022b4 <vDATATask+0x4d0>
 800227e:	4b1c      	ldr	r3, [pc, #112]	; (80022f0 <vDATATask+0x50c>)
 8002280:	2232      	movs	r2, #50	; 0x32
 8002282:	801a      	strh	r2, [r3, #0]
       timer++;
 8002284:	4b19      	ldr	r3, [pc, #100]	; (80022ec <vDATATask+0x508>)
 8002286:	881b      	ldrh	r3, [r3, #0]
 8002288:	3301      	adds	r3, #1
 800228a:	b29b      	uxth	r3, r3
       if (timer>=timeout)
 800228c:	2b31      	cmp	r3, #49	; 0x31
 800228e:	d8de      	bhi.n	800224e <vDATATask+0x46a>
       timer++;
 8002290:	4a16      	ldr	r2, [pc, #88]	; (80022ec <vDATATask+0x508>)
 8002292:	8013      	strh	r3, [r2, #0]
    usRes = input_regs[reg_addr];
 8002294:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <vDATATask+0x4fc>)
 8002296:	881b      	ldrh	r3, [r3, #0]
	 if (usGetRegInput(TYPE) == NONE)
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0e0      	beq.n	800225e <vDATATask+0x47a>
    usRes = input_regs[reg_addr];
 800229c:	4a10      	ldr	r2, [pc, #64]	; (80022e0 <vDATATask+0x4fc>)
 800229e:	8951      	ldrh	r1, [r2, #10]
		 switch(usGetRegInput(FAN_SPEED))
 80022a0:	2902      	cmp	r1, #2
 80022a2:	d0e9      	beq.n	8002278 <vDATATask+0x494>
 80022a4:	2903      	cmp	r1, #3
 80022a6:	d0de      	beq.n	8002266 <vDATATask+0x482>
		 K3 = 0;
 80022a8:	2901      	cmp	r1, #1
 80022aa:	bf14      	ite	ne
 80022ac:	2500      	movne	r5, #0
 80022ae:	2501      	moveq	r5, #1
 80022b0:	2100      	movs	r1, #0
 80022b2:	460c      	mov	r4, r1
		 vSetOutState( OUT_1, K1 );
 80022b4:	2000      	movs	r0, #0
 80022b6:	f7ff f9a7 	bl	8001608 <vSetOutState>
	     vSetOutState( OUT_2, K2 );
 80022ba:	4621      	mov	r1, r4
 80022bc:	2001      	movs	r0, #1
 80022be:	f7ff f9a3 	bl	8001608 <vSetOutState>
	     vSetOutState( OUT_3, K3 );
 80022c2:	4629      	mov	r1, r5
 80022c4:	2002      	movs	r0, #2
 80022c6:	f7ff f99f 	bl	8001608 <vSetOutState>
	     vSetOutState( OUT_4, usGetRegInput(WATER_VALVE) );
 80022ca:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <vDATATask+0x4fc>)
 80022cc:	7a19      	ldrb	r1, [r3, #8]
 80022ce:	2003      	movs	r0, #3
 80022d0:	f7ff f99a 	bl	8001608 <vSetOutState>
 80022d4:	e5a0      	b.n	8001e18 <vDATATask+0x34>
 80022d6:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <vDATATask+0x50c>)
 80022d8:	2232      	movs	r2, #50	; 0x32
 80022da:	801a      	strh	r2, [r3, #0]
     if (timeout)
 80022dc:	e7d2      	b.n	8002284 <vDATATask+0x4a0>
 80022de:	bf00      	nop
 80022e0:	20001488 	.word	0x20001488
 80022e4:	200014a4 	.word	0x200014a4
 80022e8:	2000133c 	.word	0x2000133c
 80022ec:	200014b0 	.word	0x200014b0
 80022f0:	200014ae 	.word	0x200014ae

080022f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022f4:	b500      	push	{lr}
 80022f6:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80022f8:	4b11      	ldr	r3, [pc, #68]	; (8002340 <HAL_MspInit+0x4c>)
 80022fa:	699a      	ldr	r2, [r3, #24]
 80022fc:	f042 0201 	orr.w	r2, r2, #1
 8002300:	619a      	str	r2, [r3, #24]
 8002302:	699a      	ldr	r2, [r3, #24]
 8002304:	f002 0201 	and.w	r2, r2, #1
 8002308:	9200      	str	r2, [sp, #0]
 800230a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800230c:	69da      	ldr	r2, [r3, #28]
 800230e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002312:	61da      	str	r2, [r3, #28]
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231a:	9301      	str	r3, [sp, #4]
 800231c:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800231e:	2200      	movs	r2, #0
 8002320:	210f      	movs	r1, #15
 8002322:	f06f 0001 	mvn.w	r0, #1
 8002326:	f000 fc93 	bl	8002c50 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800232a:	4a06      	ldr	r2, [pc, #24]	; (8002344 <HAL_MspInit+0x50>)
 800232c:	6853      	ldr	r3, [r2, #4]
 800232e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002332:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002336:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002338:	b003      	add	sp, #12
 800233a:	f85d fb04 	ldr.w	pc, [sp], #4
 800233e:	bf00      	nop
 8002340:	40021000 	.word	0x40021000
 8002344:	40010000 	.word	0x40010000

08002348 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002348:	b510      	push	{r4, lr}
 800234a:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800234c:	2300      	movs	r3, #0
 800234e:	9302      	str	r3, [sp, #8]
 8002350:	9303      	str	r3, [sp, #12]
 8002352:	9304      	str	r3, [sp, #16]
 8002354:	9305      	str	r3, [sp, #20]
  if(hadc->Instance==ADC1)
 8002356:	6802      	ldr	r2, [r0, #0]
 8002358:	4b1d      	ldr	r3, [pc, #116]	; (80023d0 <HAL_ADC_MspInit+0x88>)
 800235a:	429a      	cmp	r2, r3
 800235c:	d001      	beq.n	8002362 <HAL_ADC_MspInit+0x1a>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800235e:	b006      	add	sp, #24
 8002360:	bd10      	pop	{r4, pc}
 8002362:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002364:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8002368:	699a      	ldr	r2, [r3, #24]
 800236a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800236e:	619a      	str	r2, [r3, #24]
 8002370:	699a      	ldr	r2, [r3, #24]
 8002372:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002376:	9200      	str	r2, [sp, #0]
 8002378:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800237a:	699a      	ldr	r2, [r3, #24]
 800237c:	f042 0204 	orr.w	r2, r2, #4
 8002380:	619a      	str	r2, [r3, #24]
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	9301      	str	r3, [sp, #4]
 800238a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800238c:	2307      	movs	r3, #7
 800238e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002390:	2303      	movs	r3, #3
 8002392:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002394:	a902      	add	r1, sp, #8
 8002396:	480f      	ldr	r0, [pc, #60]	; (80023d4 <HAL_ADC_MspInit+0x8c>)
 8002398:	f000 ff80 	bl	800329c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 800239c:	480e      	ldr	r0, [pc, #56]	; (80023d8 <HAL_ADC_MspInit+0x90>)
 800239e:	4b0f      	ldr	r3, [pc, #60]	; (80023dc <HAL_ADC_MspInit+0x94>)
 80023a0:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023a2:	2300      	movs	r3, #0
 80023a4:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80023a6:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80023a8:	2280      	movs	r2, #128	; 0x80
 80023aa:	60c2      	str	r2, [r0, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80023ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023b0:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023b6:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80023b8:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80023ba:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80023bc:	f000 fc8c 	bl	8002cd8 <HAL_DMA_Init>
 80023c0:	b918      	cbnz	r0, 80023ca <HAL_ADC_MspInit+0x82>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80023c2:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <HAL_ADC_MspInit+0x90>)
 80023c4:	6223      	str	r3, [r4, #32]
 80023c6:	625c      	str	r4, [r3, #36]	; 0x24
}
 80023c8:	e7c9      	b.n	800235e <HAL_ADC_MspInit+0x16>
      Error_Handler();
 80023ca:	f7ff fc47 	bl	8001c5c <Error_Handler>
 80023ce:	e7f8      	b.n	80023c2 <HAL_ADC_MspInit+0x7a>
 80023d0:	40012400 	.word	0x40012400
 80023d4:	40010800 	.word	0x40010800
 80023d8:	200012b0 	.word	0x200012b0
 80023dc:	40020008 	.word	0x40020008

080023e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023e0:	b500      	push	{lr}
 80023e2:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM2)
 80023e4:	6803      	ldr	r3, [r0, #0]
 80023e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ea:	d008      	beq.n	80023fe <HAL_TIM_Base_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 80023ec:	4a1d      	ldr	r2, [pc, #116]	; (8002464 <HAL_TIM_Base_MspInit+0x84>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d019      	beq.n	8002426 <HAL_TIM_Base_MspInit+0x46>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 80023f2:	4a1d      	ldr	r2, [pc, #116]	; (8002468 <HAL_TIM_Base_MspInit+0x88>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d021      	beq.n	800243c <HAL_TIM_Base_MspInit+0x5c>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80023f8:	b005      	add	sp, #20
 80023fa:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023fe:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002402:	69da      	ldr	r2, [r3, #28]
 8002404:	f042 0201 	orr.w	r2, r2, #1
 8002408:	61da      	str	r2, [r3, #28]
 800240a:	69db      	ldr	r3, [r3, #28]
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	9301      	str	r3, [sp, #4]
 8002412:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002414:	2200      	movs	r2, #0
 8002416:	2105      	movs	r1, #5
 8002418:	201c      	movs	r0, #28
 800241a:	f000 fc19 	bl	8002c50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800241e:	201c      	movs	r0, #28
 8002420:	f000 fc4c 	bl	8002cbc <HAL_NVIC_EnableIRQ>
 8002424:	e7e8      	b.n	80023f8 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002426:	4b11      	ldr	r3, [pc, #68]	; (800246c <HAL_TIM_Base_MspInit+0x8c>)
 8002428:	69da      	ldr	r2, [r3, #28]
 800242a:	f042 0202 	orr.w	r2, r2, #2
 800242e:	61da      	str	r2, [r3, #28]
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	9302      	str	r3, [sp, #8]
 8002438:	9b02      	ldr	r3, [sp, #8]
 800243a:	e7dd      	b.n	80023f8 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800243c:	4b0b      	ldr	r3, [pc, #44]	; (800246c <HAL_TIM_Base_MspInit+0x8c>)
 800243e:	69da      	ldr	r2, [r3, #28]
 8002440:	f042 0204 	orr.w	r2, r2, #4
 8002444:	61da      	str	r2, [r3, #28]
 8002446:	69db      	ldr	r3, [r3, #28]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	9303      	str	r3, [sp, #12]
 800244e:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002450:	2200      	movs	r2, #0
 8002452:	2105      	movs	r1, #5
 8002454:	201e      	movs	r0, #30
 8002456:	f000 fbfb 	bl	8002c50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800245a:	201e      	movs	r0, #30
 800245c:	f000 fc2e 	bl	8002cbc <HAL_NVIC_EnableIRQ>
}
 8002460:	e7ca      	b.n	80023f8 <HAL_TIM_Base_MspInit+0x18>
 8002462:	bf00      	nop
 8002464:	40000400 	.word	0x40000400
 8002468:	40000800 	.word	0x40000800
 800246c:	40021000 	.word	0x40021000

08002470 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002470:	b500      	push	{lr}
 8002472:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002474:	2300      	movs	r3, #0
 8002476:	9302      	str	r3, [sp, #8]
 8002478:	9303      	str	r3, [sp, #12]
 800247a:	9304      	str	r3, [sp, #16]
 800247c:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM3)
 800247e:	6802      	ldr	r2, [r0, #0]
 8002480:	4b0d      	ldr	r3, [pc, #52]	; (80024b8 <HAL_TIM_MspPostInit+0x48>)
 8002482:	429a      	cmp	r2, r3
 8002484:	d002      	beq.n	800248c <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002486:	b007      	add	sp, #28
 8002488:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800248c:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8002490:	699a      	ldr	r2, [r3, #24]
 8002492:	f042 0204 	orr.w	r2, r2, #4
 8002496:	619a      	str	r2, [r3, #24]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	f003 0304 	and.w	r3, r3, #4
 800249e:	9301      	str	r3, [sp, #4]
 80024a0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024a2:	23c0      	movs	r3, #192	; 0xc0
 80024a4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a6:	2302      	movs	r3, #2
 80024a8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024aa:	2303      	movs	r3, #3
 80024ac:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ae:	a902      	add	r1, sp, #8
 80024b0:	4802      	ldr	r0, [pc, #8]	; (80024bc <HAL_TIM_MspPostInit+0x4c>)
 80024b2:	f000 fef3 	bl	800329c <HAL_GPIO_Init>
}
 80024b6:	e7e6      	b.n	8002486 <HAL_TIM_MspPostInit+0x16>
 80024b8:	40000400 	.word	0x40000400
 80024bc:	40010800 	.word	0x40010800

080024c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024c0:	b530      	push	{r4, r5, lr}
 80024c2:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c4:	2300      	movs	r3, #0
 80024c6:	9302      	str	r3, [sp, #8]
 80024c8:	9303      	str	r3, [sp, #12]
 80024ca:	9304      	str	r3, [sp, #16]
 80024cc:	9305      	str	r3, [sp, #20]
  if(huart->Instance==USART1)
 80024ce:	6802      	ldr	r2, [r0, #0]
 80024d0:	4b1b      	ldr	r3, [pc, #108]	; (8002540 <HAL_UART_MspInit+0x80>)
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d001      	beq.n	80024da <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80024d6:	b007      	add	sp, #28
 80024d8:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80024da:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80024de:	699a      	ldr	r2, [r3, #24]
 80024e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024e4:	619a      	str	r2, [r3, #24]
 80024e6:	699a      	ldr	r2, [r3, #24]
 80024e8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80024ec:	9200      	str	r2, [sp, #0]
 80024ee:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f0:	699a      	ldr	r2, [r3, #24]
 80024f2:	f042 0204 	orr.w	r2, r2, #4
 80024f6:	619a      	str	r2, [r3, #24]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	f003 0304 	and.w	r3, r3, #4
 80024fe:	9301      	str	r3, [sp, #4]
 8002500:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002502:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002506:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002508:	2302      	movs	r3, #2
 800250a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800250c:	2303      	movs	r3, #3
 800250e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002510:	4d0c      	ldr	r5, [pc, #48]	; (8002544 <HAL_UART_MspInit+0x84>)
 8002512:	a902      	add	r1, sp, #8
 8002514:	4628      	mov	r0, r5
 8002516:	f000 fec1 	bl	800329c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800251a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800251e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002520:	2400      	movs	r4, #0
 8002522:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002524:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002526:	a902      	add	r1, sp, #8
 8002528:	4628      	mov	r0, r5
 800252a:	f000 feb7 	bl	800329c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800252e:	4622      	mov	r2, r4
 8002530:	2105      	movs	r1, #5
 8002532:	2025      	movs	r0, #37	; 0x25
 8002534:	f000 fb8c 	bl	8002c50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002538:	2025      	movs	r0, #37	; 0x25
 800253a:	f000 fbbf 	bl	8002cbc <HAL_NVIC_EnableIRQ>
}
 800253e:	e7ca      	b.n	80024d6 <HAL_UART_MspInit+0x16>
 8002540:	40013800 	.word	0x40013800
 8002544:	40010800 	.word	0x40010800

08002548 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002548:	b530      	push	{r4, r5, lr}
 800254a:	b089      	sub	sp, #36	; 0x24
 800254c:	4604      	mov	r4, r0
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800254e:	4b1e      	ldr	r3, [pc, #120]	; (80025c8 <HAL_InitTick+0x80>)
 8002550:	699a      	ldr	r2, [r3, #24]
 8002552:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002556:	619a      	str	r2, [r3, #24]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800255e:	9301      	str	r3, [sp, #4]
 8002560:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002562:	a902      	add	r1, sp, #8
 8002564:	a803      	add	r0, sp, #12
 8002566:	f001 fb01 	bl	8003b6c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800256a:	f001 faef 	bl	8003b4c <HAL_RCC_GetPCLK2Freq>
 800256e:	4603      	mov	r3, r0

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002570:	4816      	ldr	r0, [pc, #88]	; (80025cc <HAL_InitTick+0x84>)
 8002572:	4a17      	ldr	r2, [pc, #92]	; (80025d0 <HAL_InitTick+0x88>)
 8002574:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002576:	f240 32e7 	movw	r2, #999	; 0x3e7
 800257a:	60c2      	str	r2, [r0, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800257c:	4a15      	ldr	r2, [pc, #84]	; (80025d4 <HAL_InitTick+0x8c>)
 800257e:	fba2 2303 	umull	r2, r3, r2, r3
 8002582:	0c9b      	lsrs	r3, r3, #18
 8002584:	3b01      	subs	r3, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8002586:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 8002588:	2300      	movs	r3, #0
 800258a:	6103      	str	r3, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800258c:	6083      	str	r3, [r0, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800258e:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002590:	f001 fd70 	bl	8004074 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8002594:	4605      	mov	r5, r0
 8002596:	b110      	cbz	r0, 800259e <HAL_InitTick+0x56>
    }
  }

 /* Return function status */
  return status;
}
 8002598:	4628      	mov	r0, r5
 800259a:	b009      	add	sp, #36	; 0x24
 800259c:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim1);
 800259e:	480b      	ldr	r0, [pc, #44]	; (80025cc <HAL_InitTick+0x84>)
 80025a0:	f001 fc0a 	bl	8003db8 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80025a4:	4605      	mov	r5, r0
 80025a6:	2800      	cmp	r0, #0
 80025a8:	d1f6      	bne.n	8002598 <HAL_InitTick+0x50>
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80025aa:	2019      	movs	r0, #25
 80025ac:	f000 fb86 	bl	8002cbc <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025b0:	2c0f      	cmp	r4, #15
 80025b2:	d901      	bls.n	80025b8 <HAL_InitTick+0x70>
        status = HAL_ERROR;
 80025b4:	2501      	movs	r5, #1
 80025b6:	e7ef      	b.n	8002598 <HAL_InitTick+0x50>
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80025b8:	2200      	movs	r2, #0
 80025ba:	4621      	mov	r1, r4
 80025bc:	2019      	movs	r0, #25
 80025be:	f000 fb47 	bl	8002c50 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025c2:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <HAL_InitTick+0x90>)
 80025c4:	601c      	str	r4, [r3, #0]
 80025c6:	e7e7      	b.n	8002598 <HAL_InitTick+0x50>
 80025c8:	40021000 	.word	0x40021000
 80025cc:	200014b8 	.word	0x200014b8
 80025d0:	40012c00 	.word	0x40012c00
 80025d4:	431bde83 	.word	0x431bde83
 80025d8:	2000002c 	.word	0x2000002c

080025dc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025dc:	e7fe      	b.n	80025dc <NMI_Handler>

080025de <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025de:	e7fe      	b.n	80025de <HardFault_Handler>

080025e0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025e0:	e7fe      	b.n	80025e0 <MemManage_Handler>

080025e2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025e2:	e7fe      	b.n	80025e2 <BusFault_Handler>

080025e4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025e4:	e7fe      	b.n	80025e4 <UsageFault_Handler>

080025e6 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025e6:	4770      	bx	lr

080025e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80025e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	vADCReady();
 80025ea:	f7fe fde5 	bl	80011b8 <vADCReady>
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80025ee:	4802      	ldr	r0, [pc, #8]	; (80025f8 <DMA1_Channel1_IRQHandler+0x10>)
 80025f0:	f000 fc66 	bl	8002ec0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80025f4:	bd08      	pop	{r3, pc}
 80025f6:	bf00      	nop
 80025f8:	200012b0 	.word	0x200012b0

080025fc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80025fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025fe:	4802      	ldr	r0, [pc, #8]	; (8002608 <TIM1_UP_IRQHandler+0xc>)
 8002600:	f001 fc2c 	bl	8003e5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002604:	bd08      	pop	{r3, pc}
 8002606:	bf00      	nop
 8002608:	200014b8 	.word	0x200014b8

0800260c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800260c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800260e:	4802      	ldr	r0, [pc, #8]	; (8002618 <TIM2_IRQHandler+0xc>)
 8002610:	f001 fc24 	bl	8003e5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002614:	bd08      	pop	{r3, pc}
 8002616:	bf00      	nop
 8002618:	200012f4 	.word	0x200012f4

0800261c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800261c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */
  vTimer1sInc();
 800261e:	f7ff fbb1 	bl	8001d84 <vTimer1sInc>
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002622:	4802      	ldr	r0, [pc, #8]	; (800262c <TIM4_IRQHandler+0x10>)
 8002624:	f001 fc1a 	bl	8003e5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002628:	bd08      	pop	{r3, pc}
 800262a:	bf00      	nop
 800262c:	20001384 	.word	0x20001384

08002630 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002630:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002632:	4802      	ldr	r0, [pc, #8]	; (800263c <USART1_IRQHandler+0xc>)
 8002634:	f002 f962 	bl	80048fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002638:	bd08      	pop	{r3, pc}
 800263a:	bf00      	nop
 800263c:	200013cc 	.word	0x200013cc

08002640 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002640:	4770      	bx	lr
	...

08002644 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002644:	f7ff fffc 	bl	8002640 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002648:	480b      	ldr	r0, [pc, #44]	; (8002678 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800264a:	490c      	ldr	r1, [pc, #48]	; (800267c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800264c:	4a0c      	ldr	r2, [pc, #48]	; (8002680 <LoopFillZerobss+0x16>)
  movs r3, #0
 800264e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002650:	e002      	b.n	8002658 <LoopCopyDataInit>

08002652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002656:	3304      	adds	r3, #4

08002658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800265a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800265c:	d3f9      	bcc.n	8002652 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800265e:	4a09      	ldr	r2, [pc, #36]	; (8002684 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002660:	4c09      	ldr	r4, [pc, #36]	; (8002688 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002664:	e001      	b.n	800266a <LoopFillZerobss>

08002666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002668:	3204      	adds	r2, #4

0800266a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800266a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800266c:	d3fb      	bcc.n	8002666 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800266e:	f005 f9a7 	bl	80079c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002672:	f7ff f8c3 	bl	80017fc <main>
  bx lr
 8002676:	4770      	bx	lr
  ldr r0, =_sdata
 8002678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800267c:	20000124 	.word	0x20000124
  ldr r2, =_sidata
 8002680:	08008078 	.word	0x08008078
  ldr r2, =_sbss
 8002684:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 8002688:	200030a4 	.word	0x200030a4

0800268c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800268c:	e7fe      	b.n	800268c <ADC1_2_IRQHandler>
	...

08002690 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002690:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002692:	4a07      	ldr	r2, [pc, #28]	; (80026b0 <HAL_Init+0x20>)
 8002694:	6813      	ldr	r3, [r2, #0]
 8002696:	f043 0310 	orr.w	r3, r3, #16
 800269a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800269c:	2003      	movs	r0, #3
 800269e:	f000 fac5 	bl	8002c2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026a2:	200f      	movs	r0, #15
 80026a4:	f7ff ff50 	bl	8002548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026a8:	f7ff fe24 	bl	80022f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80026ac:	2000      	movs	r0, #0
 80026ae:	bd08      	pop	{r3, pc}
 80026b0:	40022000 	.word	0x40022000

080026b4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80026b4:	4a03      	ldr	r2, [pc, #12]	; (80026c4 <HAL_IncTick+0x10>)
 80026b6:	6811      	ldr	r1, [r2, #0]
 80026b8:	4b03      	ldr	r3, [pc, #12]	; (80026c8 <HAL_IncTick+0x14>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	440b      	add	r3, r1
 80026be:	6013      	str	r3, [r2, #0]
}
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	20001500 	.word	0x20001500
 80026c8:	20000028 	.word	0x20000028

080026cc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80026cc:	4b01      	ldr	r3, [pc, #4]	; (80026d4 <HAL_GetTick+0x8>)
 80026ce:	6818      	ldr	r0, [r3, #0]
}
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	20001500 	.word	0x20001500

080026d8 <HAL_ADC_ConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80026d8:	4770      	bx	lr

080026da <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80026da:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80026de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026e0:	f012 0f50 	tst.w	r2, #80	; 0x50
 80026e4:	d11e      	bne.n	8002724 <ADC_DMAConvCplt+0x4a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ec:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	6892      	ldr	r2, [r2, #8]
 80026f2:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80026f6:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80026fa:	d003      	beq.n	8002704 <ADC_DMAConvCplt+0x2a>
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff ffeb 	bl	80026d8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002702:	bd08      	pop	{r3, pc}
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002704:	7b1a      	ldrb	r2, [r3, #12]
 8002706:	2a00      	cmp	r2, #0
 8002708:	d1f8      	bne.n	80026fc <ADC_DMAConvCplt+0x22>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800270a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800270c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002710:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002712:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002714:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8002718:	d1f0      	bne.n	80026fc <ADC_DMAConvCplt+0x22>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800271a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800271c:	f042 0201 	orr.w	r2, r2, #1
 8002720:	629a      	str	r2, [r3, #40]	; 0x28
 8002722:	e7eb      	b.n	80026fc <ADC_DMAConvCplt+0x22>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002728:	4798      	blx	r3
}
 800272a:	e7ea      	b.n	8002702 <ADC_DMAConvCplt+0x28>

0800272c <HAL_ADC_ConvHalfCpltCallback>:
}
 800272c:	4770      	bx	lr

0800272e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800272e:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002730:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002732:	f7ff fffb 	bl	800272c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002736:	bd08      	pop	{r3, pc}

08002738 <HAL_ADC_ErrorCallback>:
}
 8002738:	4770      	bx	lr

0800273a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800273a:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800273c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800273e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002744:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002746:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002748:	f043 0304 	orr.w	r3, r3, #4
 800274c:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800274e:	f7ff fff3 	bl	8002738 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002752:	bd08      	pop	{r3, pc}

08002754 <HAL_ADC_ConfigChannel>:
{ 
 8002754:	b430      	push	{r4, r5}
 8002756:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8002758:	2200      	movs	r2, #0
 800275a:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800275c:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8002760:	2a01      	cmp	r2, #1
 8002762:	f000 8095 	beq.w	8002890 <HAL_ADC_ConfigChannel+0x13c>
 8002766:	4603      	mov	r3, r0
 8002768:	2201      	movs	r2, #1
 800276a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800276e:	684a      	ldr	r2, [r1, #4]
 8002770:	2a06      	cmp	r2, #6
 8002772:	d82d      	bhi.n	80027d0 <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002774:	6804      	ldr	r4, [r0, #0]
 8002776:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002778:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800277c:	3a05      	subs	r2, #5
 800277e:	f04f 0c1f 	mov.w	ip, #31
 8002782:	fa0c fc02 	lsl.w	ip, ip, r2
 8002786:	ea20 000c 	bic.w	r0, r0, ip
 800278a:	680d      	ldr	r5, [r1, #0]
 800278c:	fa05 f202 	lsl.w	r2, r5, r2
 8002790:	4302      	orrs	r2, r0
 8002792:	6362      	str	r2, [r4, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002794:	680a      	ldr	r2, [r1, #0]
 8002796:	2a09      	cmp	r2, #9
 8002798:	d93a      	bls.n	8002810 <HAL_ADC_ConfigChannel+0xbc>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800279a:	681c      	ldr	r4, [r3, #0]
 800279c:	68e0      	ldr	r0, [r4, #12]
 800279e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80027a2:	3a1e      	subs	r2, #30
 80027a4:	f04f 0c07 	mov.w	ip, #7
 80027a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80027ac:	ea20 000c 	bic.w	r0, r0, ip
 80027b0:	688d      	ldr	r5, [r1, #8]
 80027b2:	fa05 f202 	lsl.w	r2, r5, r2
 80027b6:	4302      	orrs	r2, r0
 80027b8:	60e2      	str	r2, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80027ba:	680a      	ldr	r2, [r1, #0]
 80027bc:	3a10      	subs	r2, #16
 80027be:	2a01      	cmp	r2, #1
 80027c0:	d936      	bls.n	8002830 <HAL_ADC_ConfigChannel+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027c2:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 80027ca:	b002      	add	sp, #8
 80027cc:	bc30      	pop	{r4, r5}
 80027ce:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 80027d0:	2a0c      	cmp	r2, #12
 80027d2:	d80e      	bhi.n	80027f2 <HAL_ADC_ConfigChannel+0x9e>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80027d4:	6805      	ldr	r5, [r0, #0]
 80027d6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80027d8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80027dc:	3a23      	subs	r2, #35	; 0x23
 80027de:	241f      	movs	r4, #31
 80027e0:	4094      	lsls	r4, r2
 80027e2:	ea20 0004 	bic.w	r0, r0, r4
 80027e6:	680c      	ldr	r4, [r1, #0]
 80027e8:	fa04 f202 	lsl.w	r2, r4, r2
 80027ec:	4302      	orrs	r2, r0
 80027ee:	632a      	str	r2, [r5, #48]	; 0x30
 80027f0:	e7d0      	b.n	8002794 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80027f2:	6805      	ldr	r5, [r0, #0]
 80027f4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80027f6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80027fa:	3a41      	subs	r2, #65	; 0x41
 80027fc:	241f      	movs	r4, #31
 80027fe:	4094      	lsls	r4, r2
 8002800:	ea20 0004 	bic.w	r0, r0, r4
 8002804:	680c      	ldr	r4, [r1, #0]
 8002806:	fa04 f202 	lsl.w	r2, r4, r2
 800280a:	4302      	orrs	r2, r0
 800280c:	62ea      	str	r2, [r5, #44]	; 0x2c
 800280e:	e7c1      	b.n	8002794 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002810:	681c      	ldr	r4, [r3, #0]
 8002812:	6920      	ldr	r0, [r4, #16]
 8002814:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002818:	f04f 0c07 	mov.w	ip, #7
 800281c:	fa0c fc02 	lsl.w	ip, ip, r2
 8002820:	ea20 000c 	bic.w	r0, r0, ip
 8002824:	688d      	ldr	r5, [r1, #8]
 8002826:	fa05 f202 	lsl.w	r2, r5, r2
 800282a:	4302      	orrs	r2, r0
 800282c:	6122      	str	r2, [r4, #16]
 800282e:	e7c4      	b.n	80027ba <HAL_ADC_ConfigChannel+0x66>
    if (hadc->Instance == ADC1)
 8002830:	6818      	ldr	r0, [r3, #0]
 8002832:	4a18      	ldr	r2, [pc, #96]	; (8002894 <HAL_ADC_ConfigChannel+0x140>)
 8002834:	4290      	cmp	r0, r2
 8002836:	d005      	beq.n	8002844 <HAL_ADC_ConfigChannel+0xf0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002838:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800283a:	f042 0220 	orr.w	r2, r2, #32
 800283e:	629a      	str	r2, [r3, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8002840:	2001      	movs	r0, #1
 8002842:	e7bf      	b.n	80027c4 <HAL_ADC_ConfigChannel+0x70>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002844:	6892      	ldr	r2, [r2, #8]
 8002846:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
 800284a:	d11d      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x134>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800284c:	4811      	ldr	r0, [pc, #68]	; (8002894 <HAL_ADC_ConfigChannel+0x140>)
 800284e:	6882      	ldr	r2, [r0, #8]
 8002850:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002854:	6082      	str	r2, [r0, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002856:	680a      	ldr	r2, [r1, #0]
 8002858:	2a10      	cmp	r2, #16
 800285a:	d001      	beq.n	8002860 <HAL_ADC_ConfigChannel+0x10c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800285c:	2000      	movs	r0, #0
 800285e:	e7b1      	b.n	80027c4 <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002860:	4a0d      	ldr	r2, [pc, #52]	; (8002898 <HAL_ADC_ConfigChannel+0x144>)
 8002862:	6812      	ldr	r2, [r2, #0]
 8002864:	490d      	ldr	r1, [pc, #52]	; (800289c <HAL_ADC_ConfigChannel+0x148>)
 8002866:	fba1 1202 	umull	r1, r2, r1, r2
 800286a:	0c92      	lsrs	r2, r2, #18
 800286c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002870:	0052      	lsls	r2, r2, #1
 8002872:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8002874:	9a01      	ldr	r2, [sp, #4]
 8002876:	b14a      	cbz	r2, 800288c <HAL_ADC_ConfigChannel+0x138>
            wait_loop_index--;
 8002878:	9a01      	ldr	r2, [sp, #4]
 800287a:	3a01      	subs	r2, #1
 800287c:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 800287e:	9a01      	ldr	r2, [sp, #4]
 8002880:	2a00      	cmp	r2, #0
 8002882:	d1f9      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x124>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002884:	2000      	movs	r0, #0
 8002886:	e79d      	b.n	80027c4 <HAL_ADC_ConfigChannel+0x70>
 8002888:	2000      	movs	r0, #0
 800288a:	e79b      	b.n	80027c4 <HAL_ADC_ConfigChannel+0x70>
 800288c:	2000      	movs	r0, #0
 800288e:	e799      	b.n	80027c4 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 8002890:	2002      	movs	r0, #2
 8002892:	e79a      	b.n	80027ca <HAL_ADC_ConfigChannel+0x76>
 8002894:	40012400 	.word	0x40012400
 8002898:	20000024 	.word	0x20000024
 800289c:	431bde83 	.word	0x431bde83

080028a0 <ADC_Enable>:
{
 80028a0:	b530      	push	{r4, r5, lr}
 80028a2:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80028a8:	6803      	ldr	r3, [r0, #0]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	f012 0f01 	tst.w	r2, #1
 80028b0:	d13b      	bne.n	800292a <ADC_Enable+0x8a>
 80028b2:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 80028b4:	689a      	ldr	r2, [r3, #8]
 80028b6:	f042 0201 	orr.w	r2, r2, #1
 80028ba:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80028bc:	4b1c      	ldr	r3, [pc, #112]	; (8002930 <ADC_Enable+0x90>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a1c      	ldr	r2, [pc, #112]	; (8002934 <ADC_Enable+0x94>)
 80028c2:	fba2 2303 	umull	r2, r3, r2, r3
 80028c6:	0c9b      	lsrs	r3, r3, #18
 80028c8:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80028ca:	9b01      	ldr	r3, [sp, #4]
 80028cc:	b12b      	cbz	r3, 80028da <ADC_Enable+0x3a>
      wait_loop_index--;
 80028ce:	9b01      	ldr	r3, [sp, #4]
 80028d0:	3b01      	subs	r3, #1
 80028d2:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80028d4:	9b01      	ldr	r3, [sp, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f9      	bne.n	80028ce <ADC_Enable+0x2e>
    tickstart = HAL_GetTick();
 80028da:	f7ff fef7 	bl	80026cc <HAL_GetTick>
 80028de:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80028e0:	6823      	ldr	r3, [r4, #0]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f013 0f01 	tst.w	r3, #1
 80028e8:	d006      	beq.n	80028f8 <ADC_Enable+0x58>
  return HAL_OK;
 80028ea:	2000      	movs	r0, #0
 80028ec:	e01e      	b.n	800292c <ADC_Enable+0x8c>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80028ee:	6823      	ldr	r3, [r4, #0]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f013 0f01 	tst.w	r3, #1
 80028f6:	d116      	bne.n	8002926 <ADC_Enable+0x86>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80028f8:	f7ff fee8 	bl	80026cc <HAL_GetTick>
 80028fc:	1b43      	subs	r3, r0, r5
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d9f5      	bls.n	80028ee <ADC_Enable+0x4e>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002902:	6823      	ldr	r3, [r4, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f013 0f01 	tst.w	r3, #1
 800290a:	d1f0      	bne.n	80028ee <ADC_Enable+0x4e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800290c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800290e:	f043 0310 	orr.w	r3, r3, #16
 8002912:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002914:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002916:	f043 0301 	orr.w	r3, r3, #1
 800291a:	62e3      	str	r3, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 800291c:	2300      	movs	r3, #0
 800291e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          return HAL_ERROR;
 8002922:	2001      	movs	r0, #1
 8002924:	e002      	b.n	800292c <ADC_Enable+0x8c>
  return HAL_OK;
 8002926:	2000      	movs	r0, #0
 8002928:	e000      	b.n	800292c <ADC_Enable+0x8c>
 800292a:	2000      	movs	r0, #0
}
 800292c:	b003      	add	sp, #12
 800292e:	bd30      	pop	{r4, r5, pc}
 8002930:	20000024 	.word	0x20000024
 8002934:	431bde83 	.word	0x431bde83

08002938 <HAL_ADC_Start_DMA>:
{
 8002938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800293a:	4604      	mov	r4, r0
 800293c:	460d      	mov	r5, r1
 800293e:	4616      	mov	r6, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002940:	6801      	ldr	r1, [r0, #0]
 8002942:	4842      	ldr	r0, [pc, #264]	; (8002a4c <HAL_ADC_Start_DMA+0x114>)
 8002944:	4281      	cmp	r1, r0
 8002946:	d05d      	beq.n	8002a04 <HAL_ADC_Start_DMA+0xcc>
 8002948:	4b41      	ldr	r3, [pc, #260]	; (8002a50 <HAL_ADC_Start_DMA+0x118>)
 800294a:	4299      	cmp	r1, r3
 800294c:	d05a      	beq.n	8002a04 <HAL_ADC_Start_DMA+0xcc>
    __HAL_LOCK(hadc);
 800294e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002952:	2b01      	cmp	r3, #1
 8002954:	d077      	beq.n	8002a46 <HAL_ADC_Start_DMA+0x10e>
 8002956:	2301      	movs	r3, #1
 8002958:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 800295c:	4620      	mov	r0, r4
 800295e:	f7ff ff9f 	bl	80028a0 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002962:	4607      	mov	r7, r0
 8002964:	2800      	cmp	r0, #0
 8002966:	d16a      	bne.n	8002a3e <HAL_ADC_Start_DMA+0x106>
      ADC_STATE_CLR_SET(hadc->State,
 8002968:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800296a:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00
 800296e:	f021 0101 	bic.w	r1, r1, #1
 8002972:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002976:	62a1      	str	r1, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002978:	6822      	ldr	r2, [r4, #0]
 800297a:	4b35      	ldr	r3, [pc, #212]	; (8002a50 <HAL_ADC_Start_DMA+0x118>)
 800297c:	429a      	cmp	r2, r3
 800297e:	d048      	beq.n	8002a12 <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002980:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002982:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002986:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002988:	6853      	ldr	r3, [r2, #4]
 800298a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800298e:	d005      	beq.n	800299c <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002990:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002992:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002996:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800299a:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800299c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800299e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80029a2:	bf1a      	itte	ne
 80029a4:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
 80029a6:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 80029aa:	2300      	moveq	r3, #0
 80029ac:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 80029ae:	2300      	movs	r3, #0
 80029b0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80029b4:	6a23      	ldr	r3, [r4, #32]
 80029b6:	4a27      	ldr	r2, [pc, #156]	; (8002a54 <HAL_ADC_Start_DMA+0x11c>)
 80029b8:	629a      	str	r2, [r3, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80029ba:	6a23      	ldr	r3, [r4, #32]
 80029bc:	4a26      	ldr	r2, [pc, #152]	; (8002a58 <HAL_ADC_Start_DMA+0x120>)
 80029be:	62da      	str	r2, [r3, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80029c0:	6a23      	ldr	r3, [r4, #32]
 80029c2:	4a26      	ldr	r2, [pc, #152]	; (8002a5c <HAL_ADC_Start_DMA+0x124>)
 80029c4:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80029c6:	6823      	ldr	r3, [r4, #0]
 80029c8:	f06f 0202 	mvn.w	r2, #2
 80029cc:	601a      	str	r2, [r3, #0]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80029ce:	6822      	ldr	r2, [r4, #0]
 80029d0:	6893      	ldr	r3, [r2, #8]
 80029d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d6:	6093      	str	r3, [r2, #8]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80029d8:	6821      	ldr	r1, [r4, #0]
 80029da:	4633      	mov	r3, r6
 80029dc:	462a      	mov	r2, r5
 80029de:	314c      	adds	r1, #76	; 0x4c
 80029e0:	6a20      	ldr	r0, [r4, #32]
 80029e2:	f000 f9af 	bl	8002d44 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80029e6:	6823      	ldr	r3, [r4, #0]
 80029e8:	689a      	ldr	r2, [r3, #8]
 80029ea:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80029ee:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	bf0c      	ite	eq
 80029f6:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80029fa:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 80029fe:	609a      	str	r2, [r3, #8]
}
 8002a00:	4638      	mov	r0, r7
 8002a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002a04:	4b11      	ldr	r3, [pc, #68]	; (8002a4c <HAL_ADC_Start_DMA+0x114>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8002a0c:	d09f      	beq.n	800294e <HAL_ADC_Start_DMA+0x16>
    tmp_hal_status = HAL_ERROR;
 8002a0e:	2701      	movs	r7, #1
 8002a10:	e7f6      	b.n	8002a00 <HAL_ADC_Start_DMA+0xc8>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002a12:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8002a1c:	d0b0      	beq.n	8002980 <HAL_ADC_Start_DMA+0x48>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002a20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a24:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002a26:	4b09      	ldr	r3, [pc, #36]	; (8002a4c <HAL_ADC_Start_DMA+0x114>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002a2e:	d0b5      	beq.n	800299c <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a30:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002a32:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a3a:	62a3      	str	r3, [r4, #40]	; 0x28
 8002a3c:	e7ae      	b.n	800299c <HAL_ADC_Start_DMA+0x64>
      __HAL_UNLOCK(hadc);
 8002a3e:	2300      	movs	r3, #0
 8002a40:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8002a44:	e7dc      	b.n	8002a00 <HAL_ADC_Start_DMA+0xc8>
    __HAL_LOCK(hadc);
 8002a46:	2702      	movs	r7, #2
 8002a48:	e7da      	b.n	8002a00 <HAL_ADC_Start_DMA+0xc8>
 8002a4a:	bf00      	nop
 8002a4c:	40012400 	.word	0x40012400
 8002a50:	40012800 	.word	0x40012800
 8002a54:	080026db 	.word	0x080026db
 8002a58:	0800272f 	.word	0x0800272f
 8002a5c:	0800273b 	.word	0x0800273b

08002a60 <ADC_ConversionStop_Disable>:
{
 8002a60:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002a62:	6803      	ldr	r3, [r0, #0]
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	f012 0f01 	tst.w	r2, #1
 8002a6a:	d101      	bne.n	8002a70 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8002a6c:	2000      	movs	r0, #0
}
 8002a6e:	bd38      	pop	{r3, r4, r5, pc}
 8002a70:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	f022 0201 	bic.w	r2, r2, #1
 8002a78:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002a7a:	f7ff fe27 	bl	80026cc <HAL_GetTick>
 8002a7e:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a80:	6823      	ldr	r3, [r4, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f013 0f01 	tst.w	r3, #1
 8002a88:	d106      	bne.n	8002a98 <ADC_ConversionStop_Disable+0x38>
  return HAL_OK;
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	e7ef      	b.n	8002a6e <ADC_ConversionStop_Disable+0xe>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a8e:	6823      	ldr	r3, [r4, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f013 0f01 	tst.w	r3, #1
 8002a96:	d013      	beq.n	8002ac0 <ADC_ConversionStop_Disable+0x60>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a98:	f7ff fe18 	bl	80026cc <HAL_GetTick>
 8002a9c:	1b43      	subs	r3, r0, r5
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d9f5      	bls.n	8002a8e <ADC_ConversionStop_Disable+0x2e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002aa2:	6823      	ldr	r3, [r4, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f013 0f01 	tst.w	r3, #1
 8002aaa:	d0f0      	beq.n	8002a8e <ADC_ConversionStop_Disable+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002aae:	f043 0310 	orr.w	r3, r3, #16
 8002ab2:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ab4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002ab6:	f043 0301 	orr.w	r3, r3, #1
 8002aba:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8002abc:	2001      	movs	r0, #1
 8002abe:	e7d6      	b.n	8002a6e <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	e7d4      	b.n	8002a6e <ADC_ConversionStop_Disable+0xe>

08002ac4 <HAL_ADC_Init>:
  if(hadc == NULL)
 8002ac4:	2800      	cmp	r0, #0
 8002ac6:	d07a      	beq.n	8002bbe <HAL_ADC_Init+0xfa>
{
 8002ac8:	b570      	push	{r4, r5, r6, lr}
 8002aca:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002acc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d04f      	beq.n	8002b72 <HAL_ADC_Init+0xae>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002ad2:	4620      	mov	r0, r4
 8002ad4:	f7ff ffc4 	bl	8002a60 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002ad8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002ada:	f013 0310 	ands.w	r3, r3, #16
 8002ade:	d168      	bne.n	8002bb2 <HAL_ADC_Init+0xee>
 8002ae0:	2800      	cmp	r0, #0
 8002ae2:	d166      	bne.n	8002bb2 <HAL_ADC_Init+0xee>
    ADC_STATE_CLR_SET(hadc->State,
 8002ae4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002ae6:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8002aea:	f022 0202 	bic.w	r2, r2, #2
 8002aee:	f042 0202 	orr.w	r2, r2, #2
 8002af2:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002af4:	7b21      	ldrb	r1, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002af6:	6862      	ldr	r2, [r4, #4]
 8002af8:	69e5      	ldr	r5, [r4, #28]
 8002afa:	432a      	orrs	r2, r5
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002afc:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002b00:	68a5      	ldr	r5, [r4, #8]
 8002b02:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8002b06:	d004      	beq.n	8002b12 <HAL_ADC_Init+0x4e>
 8002b08:	2d01      	cmp	r5, #1
 8002b0a:	bf14      	ite	ne
 8002b0c:	461d      	movne	r5, r3
 8002b0e:	f44f 7580 	moveq.w	r5, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b12:	7d26      	ldrb	r6, [r4, #20]
 8002b14:	2e01      	cmp	r6, #1
 8002b16:	d032      	beq.n	8002b7e <HAL_ADC_Init+0xba>
      MODIFY_REG(hadc->Instance->CR1,
 8002b18:	6826      	ldr	r6, [r4, #0]
 8002b1a:	6871      	ldr	r1, [r6, #4]
 8002b1c:	f421 4169 	bic.w	r1, r1, #59648	; 0xe900
 8002b20:	4329      	orrs	r1, r5
 8002b22:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002b24:	6825      	ldr	r5, [r4, #0]
 8002b26:	68ae      	ldr	r6, [r5, #8]
 8002b28:	4926      	ldr	r1, [pc, #152]	; (8002bc4 <HAL_ADC_Init+0x100>)
 8002b2a:	4031      	ands	r1, r6
 8002b2c:	4311      	orrs	r1, r2
 8002b2e:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002b30:	68a1      	ldr	r1, [r4, #8]
 8002b32:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002b36:	d001      	beq.n	8002b3c <HAL_ADC_Init+0x78>
 8002b38:	2901      	cmp	r1, #1
 8002b3a:	d102      	bne.n	8002b42 <HAL_ADC_Init+0x7e>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002b3c:	6923      	ldr	r3, [r4, #16]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8002b42:	6825      	ldr	r5, [r4, #0]
 8002b44:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8002b46:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 8002b4a:	430b      	orrs	r3, r1
 8002b4c:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b4e:	6823      	ldr	r3, [r4, #0]
 8002b50:	6899      	ldr	r1, [r3, #8]
 8002b52:	4b1d      	ldr	r3, [pc, #116]	; (8002bc8 <HAL_ADC_Init+0x104>)
 8002b54:	400b      	ands	r3, r1
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d022      	beq.n	8002ba0 <HAL_ADC_Init+0xdc>
      ADC_STATE_CLR_SET(hadc->State,
 8002b5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002b5c:	f023 0312 	bic.w	r3, r3, #18
 8002b60:	f043 0310 	orr.w	r3, r3, #16
 8002b64:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b66:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 8002b6e:	2001      	movs	r0, #1
 8002b70:	e024      	b.n	8002bbc <HAL_ADC_Init+0xf8>
    ADC_CLEAR_ERRORCODE(hadc);
 8002b72:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8002b74:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8002b78:	f7ff fbe6 	bl	8002348 <HAL_ADC_MspInit>
 8002b7c:	e7a9      	b.n	8002ad2 <HAL_ADC_Init+0xe>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b7e:	b931      	cbnz	r1, 8002b8e <HAL_ADC_Init+0xca>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002b80:	69a1      	ldr	r1, [r4, #24]
 8002b82:	3901      	subs	r1, #1
 8002b84:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 8002b88:	f441 6500 	orr.w	r5, r1, #2048	; 0x800
 8002b8c:	e7c4      	b.n	8002b18 <HAL_ADC_Init+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b8e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002b90:	f041 0120 	orr.w	r1, r1, #32
 8002b94:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b96:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002b98:	f041 0101 	orr.w	r1, r1, #1
 8002b9c:	62e1      	str	r1, [r4, #44]	; 0x2c
 8002b9e:	e7bb      	b.n	8002b18 <HAL_ADC_Init+0x54>
      ADC_CLEAR_ERRORCODE(hadc);
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8002ba4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002ba6:	f023 0303 	bic.w	r3, r3, #3
 8002baa:	f043 0301 	orr.w	r3, r3, #1
 8002bae:	62a3      	str	r3, [r4, #40]	; 0x28
 8002bb0:	e004      	b.n	8002bbc <HAL_ADC_Init+0xf8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002bb4:	f043 0310 	orr.w	r3, r3, #16
 8002bb8:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8002bba:	2001      	movs	r0, #1
}
 8002bbc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002bbe:	2001      	movs	r0, #1
}
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	ffe1f7fd 	.word	0xffe1f7fd
 8002bc8:	ff1f0efe 	.word	0xff1f0efe

08002bcc <HAL_ADC_Stop_DMA>:
  __HAL_LOCK(hadc);
 8002bcc:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d028      	beq.n	8002c26 <HAL_ADC_Stop_DMA+0x5a>
{
 8002bd4:	b510      	push	{r4, lr}
 8002bd6:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8002bd8:	2301      	movs	r3, #1
 8002bda:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002bde:	f7ff ff3f 	bl	8002a60 <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 8002be2:	b950      	cbnz	r0, 8002bfa <HAL_ADC_Stop_DMA+0x2e>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002be4:	6822      	ldr	r2, [r4, #0]
 8002be6:	6893      	ldr	r3, [r2, #8]
 8002be8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bec:	6093      	str	r3, [r2, #8]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002bee:	6a22      	ldr	r2, [r4, #32]
 8002bf0:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d003      	beq.n	8002c02 <HAL_ADC_Stop_DMA+0x36>
  __HAL_UNLOCK(hadc);
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8002c00:	bd10      	pop	{r4, pc}
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002c02:	4610      	mov	r0, r2
 8002c04:	f000 f8ed 	bl	8002de2 <HAL_DMA_Abort>
      if (tmp_hal_status == HAL_OK)
 8002c08:	b940      	cbnz	r0, 8002c1c <HAL_ADC_Stop_DMA+0x50>
        ADC_STATE_CLR_SET(hadc->State,
 8002c0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002c0c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c10:	f023 0301 	bic.w	r3, r3, #1
 8002c14:	f043 0301 	orr.w	r3, r3, #1
 8002c18:	62a3      	str	r3, [r4, #40]	; 0x28
 8002c1a:	e7ee      	b.n	8002bfa <HAL_ADC_Stop_DMA+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002c1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002c1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c22:	62a3      	str	r3, [r4, #40]	; 0x28
 8002c24:	e7e9      	b.n	8002bfa <HAL_ADC_Stop_DMA+0x2e>
  __HAL_LOCK(hadc);
 8002c26:	2002      	movs	r0, #2
}
 8002c28:	4770      	bx	lr
	...

08002c2c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c2c:	4907      	ldr	r1, [pc, #28]	; (8002c4c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002c2e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c30:	0203      	lsls	r3, r0, #8
 8002c32:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c3a:	0412      	lsls	r2, r2, #16
 8002c3c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002c48:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002c4a:	4770      	bx	lr
 8002c4c:	e000ed00 	.word	0xe000ed00

08002c50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c50:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c52:	4b18      	ldr	r3, [pc, #96]	; (8002cb4 <HAL_NVIC_SetPriority+0x64>)
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c5a:	f1c3 0c07 	rsb	ip, r3, #7
 8002c5e:	f1bc 0f04 	cmp.w	ip, #4
 8002c62:	bf28      	it	cs
 8002c64:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c68:	f103 0e04 	add.w	lr, r3, #4
 8002c6c:	f1be 0f06 	cmp.w	lr, #6
 8002c70:	bf8c      	ite	hi
 8002c72:	3b03      	subhi	r3, #3
 8002c74:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c76:	f04f 3eff 	mov.w	lr, #4294967295
 8002c7a:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002c7e:	ea21 010c 	bic.w	r1, r1, ip
 8002c82:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c84:	fa0e f303 	lsl.w	r3, lr, r3
 8002c88:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c8c:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002c8e:	2800      	cmp	r0, #0
 8002c90:	db09      	blt.n	8002ca6 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c92:	0109      	lsls	r1, r1, #4
 8002c94:	b2c9      	uxtb	r1, r1
 8002c96:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002c9a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002c9e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002ca2:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca6:	f000 000f 	and.w	r0, r0, #15
 8002caa:	0109      	lsls	r1, r1, #4
 8002cac:	b2c9      	uxtb	r1, r1
 8002cae:	4b02      	ldr	r3, [pc, #8]	; (8002cb8 <HAL_NVIC_SetPriority+0x68>)
 8002cb0:	5419      	strb	r1, [r3, r0]
 8002cb2:	e7f6      	b.n	8002ca2 <HAL_NVIC_SetPriority+0x52>
 8002cb4:	e000ed00 	.word	0xe000ed00
 8002cb8:	e000ed14 	.word	0xe000ed14

08002cbc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002cbc:	2800      	cmp	r0, #0
 8002cbe:	db08      	blt.n	8002cd2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cc0:	0942      	lsrs	r2, r0, #5
 8002cc2:	f000 001f 	and.w	r0, r0, #31
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	fa03 f000 	lsl.w	r0, r3, r0
 8002ccc:	4b01      	ldr	r3, [pc, #4]	; (8002cd4 <HAL_NVIC_EnableIRQ+0x18>)
 8002cce:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002cd2:	4770      	bx	lr
 8002cd4:	e000e100 	.word	0xe000e100

08002cd8 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002cd8:	b360      	cbz	r0, 8002d34 <HAL_DMA_Init+0x5c>
{
 8002cda:	b410      	push	{r4}
 8002cdc:	4602      	mov	r2, r0
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002cde:	6801      	ldr	r1, [r0, #0]
 8002ce0:	4b15      	ldr	r3, [pc, #84]	; (8002d38 <HAL_DMA_Init+0x60>)
 8002ce2:	440b      	add	r3, r1
 8002ce4:	4815      	ldr	r0, [pc, #84]	; (8002d3c <HAL_DMA_Init+0x64>)
 8002ce6:	fba0 0303 	umull	r0, r3, r0, r3
 8002cea:	091b      	lsrs	r3, r3, #4
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	6413      	str	r3, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002cf0:	4b13      	ldr	r3, [pc, #76]	; (8002d40 <HAL_DMA_Init+0x68>)
 8002cf2:	63d3      	str	r3, [r2, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002cfa:	6808      	ldr	r0, [r1, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002cfc:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
 8002d00:	f020 0030 	bic.w	r0, r0, #48	; 0x30
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d04:	6853      	ldr	r3, [r2, #4]
 8002d06:	6894      	ldr	r4, [r2, #8]
 8002d08:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d0a:	68d4      	ldr	r4, [r2, #12]
 8002d0c:	4323      	orrs	r3, r4
 8002d0e:	6914      	ldr	r4, [r2, #16]
 8002d10:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d12:	6954      	ldr	r4, [r2, #20]
 8002d14:	4323      	orrs	r3, r4
 8002d16:	6994      	ldr	r4, [r2, #24]
 8002d18:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d1a:	69d4      	ldr	r4, [r2, #28]
 8002d1c:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8002d1e:	4303      	orrs	r3, r0

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d20:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d22:	2000      	movs	r0, #0
 8002d24:	6390      	str	r0, [r2, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d26:	2301      	movs	r3, #1
 8002d28:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d2c:	f882 0020 	strb.w	r0, [r2, #32]

  return HAL_OK;
}
 8002d30:	bc10      	pop	{r4}
 8002d32:	4770      	bx	lr
    return HAL_ERROR;
 8002d34:	2001      	movs	r0, #1
}
 8002d36:	4770      	bx	lr
 8002d38:	bffdfff8 	.word	0xbffdfff8
 8002d3c:	cccccccd 	.word	0xcccccccd
 8002d40:	40020000 	.word	0x40020000

08002d44 <HAL_DMA_Start_IT>:

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d44:	f890 c020 	ldrb.w	ip, [r0, #32]
 8002d48:	f1bc 0f01 	cmp.w	ip, #1
 8002d4c:	d047      	beq.n	8002dde <HAL_DMA_Start_IT+0x9a>
 8002d4e:	f04f 0c01 	mov.w	ip, #1
 8002d52:	f880 c020 	strb.w	ip, [r0, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d56:	f890 c021 	ldrb.w	ip, [r0, #33]	; 0x21
 8002d5a:	fa5f fc8c 	uxtb.w	ip, ip
 8002d5e:	f1bc 0f01 	cmp.w	ip, #1
 8002d62:	d004      	beq.n	8002d6e <HAL_DMA_Start_IT+0x2a>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002d64:	2300      	movs	r3, #0
 8002d66:	f880 3020 	strb.w	r3, [r0, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002d6a:	2002      	movs	r0, #2
 8002d6c:	4770      	bx	lr
{
 8002d6e:	b470      	push	{r4, r5, r6}
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d70:	2402      	movs	r4, #2
 8002d72:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d76:	2400      	movs	r4, #0
 8002d78:	6384      	str	r4, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8002d7a:	6805      	ldr	r5, [r0, #0]
 8002d7c:	682c      	ldr	r4, [r5, #0]
 8002d7e:	f024 0401 	bic.w	r4, r4, #1
 8002d82:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d84:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8002d86:	2401      	movs	r4, #1
 8002d88:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8002d8a:	40b4      	lsls	r4, r6
 8002d8c:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d8e:	6804      	ldr	r4, [r0, #0]
 8002d90:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d92:	6843      	ldr	r3, [r0, #4]
 8002d94:	2b10      	cmp	r3, #16
 8002d96:	d012      	beq.n	8002dbe <HAL_DMA_Start_IT+0x7a>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002d98:	6803      	ldr	r3, [r0, #0]
 8002d9a:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002d9c:	6803      	ldr	r3, [r0, #0]
 8002d9e:	60da      	str	r2, [r3, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8002da0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002da2:	b18b      	cbz	r3, 8002dc8 <HAL_DMA_Start_IT+0x84>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002da4:	6802      	ldr	r2, [r0, #0]
 8002da6:	6813      	ldr	r3, [r2, #0]
 8002da8:	f043 030e 	orr.w	r3, r3, #14
 8002dac:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8002dae:	6802      	ldr	r2, [r0, #0]
 8002db0:	6813      	ldr	r3, [r2, #0]
 8002db2:	f043 0301 	orr.w	r3, r3, #1
 8002db6:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002db8:	2000      	movs	r0, #0
}
 8002dba:	bc70      	pop	{r4, r5, r6}
 8002dbc:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8002dbe:	6803      	ldr	r3, [r0, #0]
 8002dc0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002dc2:	6803      	ldr	r3, [r0, #0]
 8002dc4:	60d9      	str	r1, [r3, #12]
 8002dc6:	e7eb      	b.n	8002da0 <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002dc8:	6802      	ldr	r2, [r0, #0]
 8002dca:	6813      	ldr	r3, [r2, #0]
 8002dcc:	f023 0304 	bic.w	r3, r3, #4
 8002dd0:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002dd2:	6802      	ldr	r2, [r0, #0]
 8002dd4:	6813      	ldr	r3, [r2, #0]
 8002dd6:	f043 030a 	orr.w	r3, r3, #10
 8002dda:	6013      	str	r3, [r2, #0]
 8002ddc:	e7e7      	b.n	8002dae <HAL_DMA_Start_IT+0x6a>
  __HAL_LOCK(hdma);
 8002dde:	2002      	movs	r0, #2
}
 8002de0:	4770      	bx	lr

08002de2 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002de2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d006      	beq.n	8002dfa <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dec:	2304      	movs	r3, #4
 8002dee:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8002df0:	2300      	movs	r3, #0
 8002df2:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 8002df6:	2001      	movs	r0, #1
 8002df8:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dfa:	6802      	ldr	r2, [r0, #0]
 8002dfc:	6813      	ldr	r3, [r2, #0]
 8002dfe:	f023 030e 	bic.w	r3, r3, #14
 8002e02:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002e04:	6802      	ldr	r2, [r0, #0]
 8002e06:	6813      	ldr	r3, [r2, #0]
 8002e08:	f023 0301 	bic.w	r3, r3, #1
 8002e0c:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e0e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002e10:	2201      	movs	r2, #1
 8002e12:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	604b      	str	r3, [r1, #4]
  hdma->State = HAL_DMA_STATE_READY;
 8002e1a:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  __HAL_UNLOCK(hdma);      
 8002e1e:	2300      	movs	r3, #0
 8002e20:	f880 3020 	strb.w	r3, [r0, #32]
  return status; 
 8002e24:	4618      	mov	r0, r3
}
 8002e26:	4770      	bx	lr

08002e28 <HAL_DMA_Abort_IT>:
{  
 8002e28:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e2a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d003      	beq.n	8002e3c <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e34:	2304      	movs	r3, #4
 8002e36:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8002e38:	2001      	movs	r0, #1
}
 8002e3a:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e3c:	6802      	ldr	r2, [r0, #0]
 8002e3e:	6813      	ldr	r3, [r2, #0]
 8002e40:	f023 030e 	bic.w	r3, r3, #14
 8002e44:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002e46:	6802      	ldr	r2, [r0, #0]
 8002e48:	6813      	ldr	r3, [r2, #0]
 8002e4a:	f023 0301 	bic.w	r3, r3, #1
 8002e4e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002e50:	6803      	ldr	r3, [r0, #0]
 8002e52:	4a19      	ldr	r2, [pc, #100]	; (8002eb8 <HAL_DMA_Abort_IT+0x90>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d013      	beq.n	8002e80 <HAL_DMA_Abort_IT+0x58>
 8002e58:	3214      	adds	r2, #20
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d01e      	beq.n	8002e9c <HAL_DMA_Abort_IT+0x74>
 8002e5e:	3214      	adds	r2, #20
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d01d      	beq.n	8002ea0 <HAL_DMA_Abort_IT+0x78>
 8002e64:	3214      	adds	r2, #20
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d01d      	beq.n	8002ea6 <HAL_DMA_Abort_IT+0x7e>
 8002e6a:	3214      	adds	r2, #20
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d01d      	beq.n	8002eac <HAL_DMA_Abort_IT+0x84>
 8002e70:	3214      	adds	r2, #20
 8002e72:	4293      	cmp	r3, r2
 8002e74:	bf0c      	ite	eq
 8002e76:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8002e7a:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8002e7e:	e000      	b.n	8002e82 <HAL_DMA_Abort_IT+0x5a>
 8002e80:	2301      	movs	r3, #1
 8002e82:	4a0e      	ldr	r2, [pc, #56]	; (8002ebc <HAL_DMA_Abort_IT+0x94>)
 8002e84:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002e86:	2301      	movs	r3, #1
 8002e88:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002e92:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002e94:	b16b      	cbz	r3, 8002eb2 <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 8002e96:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002e98:	2000      	movs	r0, #0
 8002e9a:	e7ce      	b.n	8002e3a <HAL_DMA_Abort_IT+0x12>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002e9c:	2310      	movs	r3, #16
 8002e9e:	e7f0      	b.n	8002e82 <HAL_DMA_Abort_IT+0x5a>
 8002ea0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ea4:	e7ed      	b.n	8002e82 <HAL_DMA_Abort_IT+0x5a>
 8002ea6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eaa:	e7ea      	b.n	8002e82 <HAL_DMA_Abort_IT+0x5a>
 8002eac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002eb0:	e7e7      	b.n	8002e82 <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 8002eb2:	2000      	movs	r0, #0
 8002eb4:	e7c1      	b.n	8002e3a <HAL_DMA_Abort_IT+0x12>
 8002eb6:	bf00      	nop
 8002eb8:	40020008 	.word	0x40020008
 8002ebc:	40020000 	.word	0x40020000

08002ec0 <HAL_DMA_IRQHandler>:
{
 8002ec0:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ec2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002ec4:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002ec6:	6804      	ldr	r4, [r0, #0]
 8002ec8:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002eca:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002ecc:	2304      	movs	r3, #4
 8002ece:	408b      	lsls	r3, r1
 8002ed0:	4213      	tst	r3, r2
 8002ed2:	d034      	beq.n	8002f3e <HAL_DMA_IRQHandler+0x7e>
 8002ed4:	f015 0f04 	tst.w	r5, #4
 8002ed8:	d031      	beq.n	8002f3e <HAL_DMA_IRQHandler+0x7e>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002eda:	6823      	ldr	r3, [r4, #0]
 8002edc:	f013 0f20 	tst.w	r3, #32
 8002ee0:	d103      	bne.n	8002eea <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ee2:	6823      	ldr	r3, [r4, #0]
 8002ee4:	f023 0304 	bic.w	r3, r3, #4
 8002ee8:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002eea:	6803      	ldr	r3, [r0, #0]
 8002eec:	4a42      	ldr	r2, [pc, #264]	; (8002ff8 <HAL_DMA_IRQHandler+0x138>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d013      	beq.n	8002f1a <HAL_DMA_IRQHandler+0x5a>
 8002ef2:	3214      	adds	r2, #20
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d017      	beq.n	8002f28 <HAL_DMA_IRQHandler+0x68>
 8002ef8:	3214      	adds	r2, #20
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d016      	beq.n	8002f2c <HAL_DMA_IRQHandler+0x6c>
 8002efe:	3214      	adds	r2, #20
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d016      	beq.n	8002f32 <HAL_DMA_IRQHandler+0x72>
 8002f04:	3214      	adds	r2, #20
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d016      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x78>
 8002f0a:	3214      	adds	r2, #20
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	bf0c      	ite	eq
 8002f10:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8002f14:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8002f18:	e000      	b.n	8002f1c <HAL_DMA_IRQHandler+0x5c>
 8002f1a:	2304      	movs	r3, #4
 8002f1c:	4a37      	ldr	r2, [pc, #220]	; (8002ffc <HAL_DMA_IRQHandler+0x13c>)
 8002f1e:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8002f20:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002f22:	b103      	cbz	r3, 8002f26 <HAL_DMA_IRQHandler+0x66>
      hdma->XferHalfCpltCallback(hdma);
 8002f24:	4798      	blx	r3
}
 8002f26:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002f28:	2340      	movs	r3, #64	; 0x40
 8002f2a:	e7f7      	b.n	8002f1c <HAL_DMA_IRQHandler+0x5c>
 8002f2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f30:	e7f4      	b.n	8002f1c <HAL_DMA_IRQHandler+0x5c>
 8002f32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f36:	e7f1      	b.n	8002f1c <HAL_DMA_IRQHandler+0x5c>
 8002f38:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f3c:	e7ee      	b.n	8002f1c <HAL_DMA_IRQHandler+0x5c>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002f3e:	2302      	movs	r3, #2
 8002f40:	408b      	lsls	r3, r1
 8002f42:	4213      	tst	r3, r2
 8002f44:	d03b      	beq.n	8002fbe <HAL_DMA_IRQHandler+0xfe>
 8002f46:	f015 0f02 	tst.w	r5, #2
 8002f4a:	d038      	beq.n	8002fbe <HAL_DMA_IRQHandler+0xfe>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f4c:	6823      	ldr	r3, [r4, #0]
 8002f4e:	f013 0f20 	tst.w	r3, #32
 8002f52:	d106      	bne.n	8002f62 <HAL_DMA_IRQHandler+0xa2>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002f54:	6823      	ldr	r3, [r4, #0]
 8002f56:	f023 030a 	bic.w	r3, r3, #10
 8002f5a:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002f62:	6803      	ldr	r3, [r0, #0]
 8002f64:	4a24      	ldr	r2, [pc, #144]	; (8002ff8 <HAL_DMA_IRQHandler+0x138>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d013      	beq.n	8002f92 <HAL_DMA_IRQHandler+0xd2>
 8002f6a:	3214      	adds	r2, #20
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d01b      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0xe8>
 8002f70:	3214      	adds	r2, #20
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d01a      	beq.n	8002fac <HAL_DMA_IRQHandler+0xec>
 8002f76:	3214      	adds	r2, #20
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d01a      	beq.n	8002fb2 <HAL_DMA_IRQHandler+0xf2>
 8002f7c:	3214      	adds	r2, #20
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d01a      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0xf8>
 8002f82:	3214      	adds	r2, #20
 8002f84:	4293      	cmp	r3, r2
 8002f86:	bf0c      	ite	eq
 8002f88:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8002f8c:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8002f90:	e000      	b.n	8002f94 <HAL_DMA_IRQHandler+0xd4>
 8002f92:	2302      	movs	r3, #2
 8002f94:	4a19      	ldr	r2, [pc, #100]	; (8002ffc <HAL_DMA_IRQHandler+0x13c>)
 8002f96:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8002f98:	2300      	movs	r3, #0
 8002f9a:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8002f9e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0c0      	beq.n	8002f26 <HAL_DMA_IRQHandler+0x66>
      hdma->XferCpltCallback(hdma);
 8002fa4:	4798      	blx	r3
 8002fa6:	e7be      	b.n	8002f26 <HAL_DMA_IRQHandler+0x66>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002fa8:	2320      	movs	r3, #32
 8002faa:	e7f3      	b.n	8002f94 <HAL_DMA_IRQHandler+0xd4>
 8002fac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fb0:	e7f0      	b.n	8002f94 <HAL_DMA_IRQHandler+0xd4>
 8002fb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fb6:	e7ed      	b.n	8002f94 <HAL_DMA_IRQHandler+0xd4>
 8002fb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fbc:	e7ea      	b.n	8002f94 <HAL_DMA_IRQHandler+0xd4>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002fbe:	2308      	movs	r3, #8
 8002fc0:	fa03 f101 	lsl.w	r1, r3, r1
 8002fc4:	4211      	tst	r1, r2
 8002fc6:	d0ae      	beq.n	8002f26 <HAL_DMA_IRQHandler+0x66>
 8002fc8:	f015 0f08 	tst.w	r5, #8
 8002fcc:	d0ab      	beq.n	8002f26 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fce:	6823      	ldr	r3, [r4, #0]
 8002fd0:	f023 030e 	bic.w	r3, r3, #14
 8002fd4:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002fd6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002fd8:	2301      	movs	r3, #1
 8002fda:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002fdc:	fa03 f202 	lsl.w	r2, r3, r2
 8002fe0:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002fe2:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8002fe4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002fe8:	2300      	movs	r3, #0
 8002fea:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8002fee:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d098      	beq.n	8002f26 <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 8002ff4:	4798      	blx	r3
  return;
 8002ff6:	e796      	b.n	8002f26 <HAL_DMA_IRQHandler+0x66>
 8002ff8:	40020008 	.word	0x40020008
 8002ffc:	40020000 	.word	0x40020000

08003000 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003000:	4b14      	ldr	r3, [pc, #80]	; (8003054 <FLASH_SetErrorCode+0x54>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f013 0310 	ands.w	r3, r3, #16
 8003008:	d005      	beq.n	8003016 <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800300a:	4a13      	ldr	r2, [pc, #76]	; (8003058 <FLASH_SetErrorCode+0x58>)
 800300c:	69d3      	ldr	r3, [r2, #28]
 800300e:	f043 0302 	orr.w	r3, r3, #2
 8003012:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003014:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003016:	4a0f      	ldr	r2, [pc, #60]	; (8003054 <FLASH_SetErrorCode+0x54>)
 8003018:	68d2      	ldr	r2, [r2, #12]
 800301a:	f012 0f04 	tst.w	r2, #4
 800301e:	d006      	beq.n	800302e <FLASH_SetErrorCode+0x2e>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003020:	490d      	ldr	r1, [pc, #52]	; (8003058 <FLASH_SetErrorCode+0x58>)
 8003022:	69ca      	ldr	r2, [r1, #28]
 8003024:	f042 0201 	orr.w	r2, r2, #1
 8003028:	61ca      	str	r2, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800302a:	f043 0304 	orr.w	r3, r3, #4
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800302e:	4a09      	ldr	r2, [pc, #36]	; (8003054 <FLASH_SetErrorCode+0x54>)
 8003030:	69d2      	ldr	r2, [r2, #28]
 8003032:	f012 0f01 	tst.w	r2, #1
 8003036:	d009      	beq.n	800304c <FLASH_SetErrorCode+0x4c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003038:	4907      	ldr	r1, [pc, #28]	; (8003058 <FLASH_SetErrorCode+0x58>)
 800303a:	69ca      	ldr	r2, [r1, #28]
 800303c:	f042 0204 	orr.w	r2, r2, #4
 8003040:	61ca      	str	r2, [r1, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003042:	4904      	ldr	r1, [pc, #16]	; (8003054 <FLASH_SetErrorCode+0x54>)
 8003044:	69ca      	ldr	r2, [r1, #28]
 8003046:	f022 0201 	bic.w	r2, r2, #1
 800304a:	61ca      	str	r2, [r1, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800304c:	4a01      	ldr	r2, [pc, #4]	; (8003054 <FLASH_SetErrorCode+0x54>)
 800304e:	60d3      	str	r3, [r2, #12]
}  
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	40022000 	.word	0x40022000
 8003058:	20001508 	.word	0x20001508

0800305c <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800305c:	4b08      	ldr	r3, [pc, #32]	; (8003080 <HAL_FLASH_Unlock+0x24>)
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003064:	d009      	beq.n	800307a <HAL_FLASH_Unlock+0x1e>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003066:	4b06      	ldr	r3, [pc, #24]	; (8003080 <HAL_FLASH_Unlock+0x24>)
 8003068:	4a06      	ldr	r2, [pc, #24]	; (8003084 <HAL_FLASH_Unlock+0x28>)
 800306a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800306c:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8003070:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003072:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8003074:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 8003078:	4770      	bx	lr
 800307a:	2000      	movs	r0, #0
}
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	40022000 	.word	0x40022000
 8003084:	45670123 	.word	0x45670123

08003088 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003088:	4a03      	ldr	r2, [pc, #12]	; (8003098 <HAL_FLASH_Lock+0x10>)
 800308a:	6913      	ldr	r3, [r2, #16]
 800308c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003090:	6113      	str	r3, [r2, #16]
}
 8003092:	2000      	movs	r0, #0
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	40022000 	.word	0x40022000

0800309c <FLASH_WaitForLastOperation>:
{
 800309c:	b570      	push	{r4, r5, r6, lr}
 800309e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80030a0:	f7ff fb14 	bl	80026cc <HAL_GetTick>
 80030a4:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80030a6:	4d17      	ldr	r5, [pc, #92]	; (8003104 <FLASH_WaitForLastOperation+0x68>)
 80030a8:	68eb      	ldr	r3, [r5, #12]
 80030aa:	f013 0f01 	tst.w	r3, #1
 80030ae:	d00a      	beq.n	80030c6 <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 80030b0:	f1b4 3fff 	cmp.w	r4, #4294967295
 80030b4:	d0f8      	beq.n	80030a8 <FLASH_WaitForLastOperation+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80030b6:	b31c      	cbz	r4, 8003100 <FLASH_WaitForLastOperation+0x64>
 80030b8:	f7ff fb08 	bl	80026cc <HAL_GetTick>
 80030bc:	1b80      	subs	r0, r0, r6
 80030be:	42a0      	cmp	r0, r4
 80030c0:	d9f2      	bls.n	80030a8 <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 80030c2:	2003      	movs	r0, #3
 80030c4:	e01b      	b.n	80030fe <FLASH_WaitForLastOperation+0x62>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80030c6:	4b0f      	ldr	r3, [pc, #60]	; (8003104 <FLASH_WaitForLastOperation+0x68>)
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	f013 0f20 	tst.w	r3, #32
 80030ce:	d002      	beq.n	80030d6 <FLASH_WaitForLastOperation+0x3a>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80030d0:	4b0c      	ldr	r3, [pc, #48]	; (8003104 <FLASH_WaitForLastOperation+0x68>)
 80030d2:	2220      	movs	r2, #32
 80030d4:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80030d6:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <FLASH_WaitForLastOperation+0x68>)
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	f013 0f10 	tst.w	r3, #16
 80030de:	d10b      	bne.n	80030f8 <FLASH_WaitForLastOperation+0x5c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80030e0:	4b08      	ldr	r3, [pc, #32]	; (8003104 <FLASH_WaitForLastOperation+0x68>)
 80030e2:	69db      	ldr	r3, [r3, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80030e4:	f013 0f01 	tst.w	r3, #1
 80030e8:	d106      	bne.n	80030f8 <FLASH_WaitForLastOperation+0x5c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80030ea:	4b06      	ldr	r3, [pc, #24]	; (8003104 <FLASH_WaitForLastOperation+0x68>)
 80030ec:	68db      	ldr	r3, [r3, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80030ee:	f013 0f04 	tst.w	r3, #4
 80030f2:	d101      	bne.n	80030f8 <FLASH_WaitForLastOperation+0x5c>
  return HAL_OK;
 80030f4:	2000      	movs	r0, #0
 80030f6:	e002      	b.n	80030fe <FLASH_WaitForLastOperation+0x62>
    FLASH_SetErrorCode();
 80030f8:	f7ff ff82 	bl	8003000 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80030fc:	2001      	movs	r0, #1
}
 80030fe:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_TIMEOUT;
 8003100:	2003      	movs	r0, #3
 8003102:	e7fc      	b.n	80030fe <FLASH_WaitForLastOperation+0x62>
 8003104:	40022000 	.word	0x40022000

08003108 <HAL_FLASH_Program>:
{
 8003108:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800310c:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 800310e:	4b26      	ldr	r3, [pc, #152]	; (80031a8 <HAL_FLASH_Program+0xa0>)
 8003110:	7e1b      	ldrb	r3, [r3, #24]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d045      	beq.n	80031a2 <HAL_FLASH_Program+0x9a>
 8003116:	4604      	mov	r4, r0
 8003118:	460d      	mov	r5, r1
 800311a:	4690      	mov	r8, r2
 800311c:	4b22      	ldr	r3, [pc, #136]	; (80031a8 <HAL_FLASH_Program+0xa0>)
 800311e:	2201      	movs	r2, #1
 8003120:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003122:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003126:	f7ff ffb9 	bl	800309c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800312a:	4603      	mov	r3, r0
 800312c:	bb80      	cbnz	r0, 8003190 <HAL_FLASH_Program+0x88>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800312e:	2c01      	cmp	r4, #1
 8003130:	d034      	beq.n	800319c <HAL_FLASH_Program+0x94>
      nbiterations = 4U;
 8003132:	2c02      	cmp	r4, #2
 8003134:	bf0c      	ite	eq
 8003136:	f04f 0902 	moveq.w	r9, #2
 800313a:	f04f 0904 	movne.w	r9, #4
    for (index = 0U; index < nbiterations; index++)
 800313e:	eb05 0949 	add.w	r9, r5, r9, lsl #1
      nbiterations = 4U;
 8003142:	2400      	movs	r4, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003144:	f8df b060 	ldr.w	fp, [pc, #96]	; 80031a8 <HAL_FLASH_Program+0xa0>
 8003148:	46a2      	mov	sl, r4
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800314a:	4e18      	ldr	r6, [pc, #96]	; (80031ac <HAL_FLASH_Program+0xa4>)
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800314c:	f1c4 0120 	rsb	r1, r4, #32
 8003150:	f1a4 0220 	sub.w	r2, r4, #32
 8003154:	fa28 f304 	lsr.w	r3, r8, r4
 8003158:	fa07 f101 	lsl.w	r1, r7, r1
 800315c:	430b      	orrs	r3, r1
 800315e:	fa27 f202 	lsr.w	r2, r7, r2
 8003162:	4313      	orrs	r3, r2
 8003164:	b29b      	uxth	r3, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003166:	f8cb a01c 	str.w	sl, [fp, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800316a:	6932      	ldr	r2, [r6, #16]
 800316c:	f042 0201 	orr.w	r2, r2, #1
 8003170:	6132      	str	r2, [r6, #16]
  *(__IO uint16_t*)Address = Data;
 8003172:	802b      	strh	r3, [r5, #0]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003174:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003178:	f7ff ff90 	bl	800309c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800317c:	6933      	ldr	r3, [r6, #16]
 800317e:	f023 0301 	bic.w	r3, r3, #1
 8003182:	6133      	str	r3, [r6, #16]
      if (status != HAL_OK)
 8003184:	4603      	mov	r3, r0
 8003186:	b918      	cbnz	r0, 8003190 <HAL_FLASH_Program+0x88>
    for (index = 0U; index < nbiterations; index++)
 8003188:	3410      	adds	r4, #16
 800318a:	3502      	adds	r5, #2
 800318c:	454d      	cmp	r5, r9
 800318e:	d1dd      	bne.n	800314c <HAL_FLASH_Program+0x44>
  __HAL_UNLOCK(&pFlash);
 8003190:	4a05      	ldr	r2, [pc, #20]	; (80031a8 <HAL_FLASH_Program+0xa0>)
 8003192:	2100      	movs	r1, #0
 8003194:	7611      	strb	r1, [r2, #24]
}
 8003196:	4618      	mov	r0, r3
 8003198:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      nbiterations = 1U;
 800319c:	f04f 0901 	mov.w	r9, #1
 80031a0:	e7cd      	b.n	800313e <HAL_FLASH_Program+0x36>
  __HAL_LOCK(&pFlash);
 80031a2:	2302      	movs	r3, #2
 80031a4:	e7f7      	b.n	8003196 <HAL_FLASH_Program+0x8e>
 80031a6:	bf00      	nop
 80031a8:	20001508 	.word	0x20001508
 80031ac:	40022000 	.word	0x40022000

080031b0 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80031b0:	4b06      	ldr	r3, [pc, #24]	; (80031cc <FLASH_PageErase+0x1c>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80031b6:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <FLASH_PageErase+0x20>)
 80031b8:	691a      	ldr	r2, [r3, #16]
 80031ba:	f042 0202 	orr.w	r2, r2, #2
 80031be:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80031c0:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80031c2:	691a      	ldr	r2, [r3, #16]
 80031c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031c8:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80031ca:	4770      	bx	lr
 80031cc:	20001508 	.word	0x20001508
 80031d0:	40022000 	.word	0x40022000

080031d4 <HAL_FLASHEx_Erase>:
  __HAL_LOCK(&pFlash);
 80031d4:	4b2f      	ldr	r3, [pc, #188]	; (8003294 <HAL_FLASHEx_Erase+0xc0>)
 80031d6:	7e1b      	ldrb	r3, [r3, #24]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d058      	beq.n	800328e <HAL_FLASHEx_Erase+0xba>
{
 80031dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031e0:	4605      	mov	r5, r0
 80031e2:	460f      	mov	r7, r1
  __HAL_LOCK(&pFlash);
 80031e4:	4b2b      	ldr	r3, [pc, #172]	; (8003294 <HAL_FLASHEx_Erase+0xc0>)
 80031e6:	2201      	movs	r2, #1
 80031e8:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80031ea:	6803      	ldr	r3, [r0, #0]
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d026      	beq.n	800323e <HAL_FLASHEx_Erase+0x6a>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80031f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80031f4:	f7ff ff52 	bl	800309c <FLASH_WaitForLastOperation>
 80031f8:	2800      	cmp	r0, #0
 80031fa:	d13f      	bne.n	800327c <HAL_FLASHEx_Erase+0xa8>
        *PageError = 0xFFFFFFFFU;
 80031fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003200:	603b      	str	r3, [r7, #0]
        for(address = pEraseInit->PageAddress;
 8003202:	68ac      	ldr	r4, [r5, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003204:	68eb      	ldr	r3, [r5, #12]
 8003206:	eb04 2383 	add.w	r3, r4, r3, lsl #10
        for(address = pEraseInit->PageAddress;
 800320a:	429c      	cmp	r4, r3
 800320c:	d23d      	bcs.n	800328a <HAL_FLASHEx_Erase+0xb6>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800320e:	f24c 3850 	movw	r8, #50000	; 0xc350
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003212:	4e21      	ldr	r6, [pc, #132]	; (8003298 <HAL_FLASHEx_Erase+0xc4>)
          FLASH_PageErase(address);
 8003214:	4620      	mov	r0, r4
 8003216:	f7ff ffcb 	bl	80031b0 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800321a:	4640      	mov	r0, r8
 800321c:	f7ff ff3e 	bl	800309c <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003220:	6933      	ldr	r3, [r6, #16]
 8003222:	f023 0302 	bic.w	r3, r3, #2
 8003226:	6133      	str	r3, [r6, #16]
          if (status != HAL_OK)
 8003228:	4601      	mov	r1, r0
 800322a:	bb28      	cbnz	r0, 8003278 <HAL_FLASHEx_Erase+0xa4>
            address += FLASH_PAGE_SIZE)
 800322c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003230:	68ea      	ldr	r2, [r5, #12]
 8003232:	68ab      	ldr	r3, [r5, #8]
 8003234:	eb03 2382 	add.w	r3, r3, r2, lsl #10
        for(address = pEraseInit->PageAddress;
 8003238:	42a3      	cmp	r3, r4
 800323a:	d8eb      	bhi.n	8003214 <HAL_FLASHEx_Erase+0x40>
 800323c:	e01f      	b.n	800327e <HAL_FLASHEx_Erase+0xaa>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800323e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003242:	f7ff ff2b 	bl	800309c <FLASH_WaitForLastOperation>
 8003246:	b108      	cbz	r0, 800324c <HAL_FLASHEx_Erase+0x78>
  HAL_StatusTypeDef status = HAL_ERROR;
 8003248:	2101      	movs	r1, #1
 800324a:	e018      	b.n	800327e <HAL_FLASHEx_Erase+0xaa>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800324c:	4b11      	ldr	r3, [pc, #68]	; (8003294 <HAL_FLASHEx_Erase+0xc0>)
 800324e:	2200      	movs	r2, #0
 8003250:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003252:	4c11      	ldr	r4, [pc, #68]	; (8003298 <HAL_FLASHEx_Erase+0xc4>)
 8003254:	6923      	ldr	r3, [r4, #16]
 8003256:	f043 0304 	orr.w	r3, r3, #4
 800325a:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800325c:	6923      	ldr	r3, [r4, #16]
 800325e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003262:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003264:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003268:	f7ff ff18 	bl	800309c <FLASH_WaitForLastOperation>
 800326c:	4601      	mov	r1, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800326e:	6923      	ldr	r3, [r4, #16]
 8003270:	f023 0304 	bic.w	r3, r3, #4
 8003274:	6123      	str	r3, [r4, #16]
 8003276:	e002      	b.n	800327e <HAL_FLASHEx_Erase+0xaa>
            *PageError = address;
 8003278:	603c      	str	r4, [r7, #0]
            break;
 800327a:	e000      	b.n	800327e <HAL_FLASHEx_Erase+0xaa>
  HAL_StatusTypeDef status = HAL_ERROR;
 800327c:	2101      	movs	r1, #1
  __HAL_UNLOCK(&pFlash);
 800327e:	4b05      	ldr	r3, [pc, #20]	; (8003294 <HAL_FLASHEx_Erase+0xc0>)
 8003280:	2200      	movs	r2, #0
 8003282:	761a      	strb	r2, [r3, #24]
}
 8003284:	4608      	mov	r0, r1
 8003286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_ERROR;
 800328a:	2101      	movs	r1, #1
 800328c:	e7f7      	b.n	800327e <HAL_FLASHEx_Erase+0xaa>
  __HAL_LOCK(&pFlash);
 800328e:	2102      	movs	r1, #2
}
 8003290:	4608      	mov	r0, r1
 8003292:	4770      	bx	lr
 8003294:	20001508 	.word	0x20001508
 8003298:	40022000 	.word	0x40022000

0800329c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800329c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032a0:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032a2:	f8d1 9000 	ldr.w	r9, [r1]
 80032a6:	f1b9 0f00 	cmp.w	r9, #0
 80032aa:	f000 811f 	beq.w	80034ec <HAL_GPIO_Init+0x250>
 80032ae:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80032b0:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80032b2:	4e90      	ldr	r6, [pc, #576]	; (80034f4 <HAL_GPIO_Init+0x258>)
        {
          SET_BIT(EXTI->IMR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80032b4:	4c90      	ldr	r4, [pc, #576]	; (80034f8 <HAL_GPIO_Init+0x25c>)
      switch (GPIO_Init->Mode)
 80032b6:	4d91      	ldr	r5, [pc, #580]	; (80034fc <HAL_GPIO_Init+0x260>)
 80032b8:	f8df e244 	ldr.w	lr, [pc, #580]	; 8003500 <HAL_GPIO_Init+0x264>
 80032bc:	4694      	mov	ip, r2
 80032be:	e0ba      	b.n	8003436 <HAL_GPIO_Init+0x19a>
 80032c0:	f04f 0c00 	mov.w	ip, #0
 80032c4:	e025      	b.n	8003312 <HAL_GPIO_Init+0x76>
 80032c6:	45a9      	cmp	r9, r5
 80032c8:	d00f      	beq.n	80032ea <HAL_GPIO_Init+0x4e>
 80032ca:	d906      	bls.n	80032da <HAL_GPIO_Init+0x3e>
 80032cc:	45f1      	cmp	r9, lr
 80032ce:	d00c      	beq.n	80032ea <HAL_GPIO_Init+0x4e>
 80032d0:	f8df a230 	ldr.w	sl, [pc, #560]	; 8003504 <HAL_GPIO_Init+0x268>
 80032d4:	45d1      	cmp	r9, sl
 80032d6:	d008      	beq.n	80032ea <HAL_GPIO_Init+0x4e>
 80032d8:	e01b      	b.n	8003312 <HAL_GPIO_Init+0x76>
 80032da:	f8df a22c 	ldr.w	sl, [pc, #556]	; 8003508 <HAL_GPIO_Init+0x26c>
 80032de:	45d1      	cmp	r9, sl
 80032e0:	d003      	beq.n	80032ea <HAL_GPIO_Init+0x4e>
 80032e2:	f50a 2a70 	add.w	sl, sl, #983040	; 0xf0000
 80032e6:	45d1      	cmp	r9, sl
 80032e8:	d10f      	bne.n	800330a <HAL_GPIO_Init+0x6e>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80032ea:	f8d1 c008 	ldr.w	ip, [r1, #8]
 80032ee:	f1bc 0f00 	cmp.w	ip, #0
 80032f2:	f000 80ef 	beq.w	80034d4 <HAL_GPIO_Init+0x238>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80032f6:	f1bc 0f01 	cmp.w	ip, #1
            GPIOx->BSRR = ioposition;
 80032fa:	bf0c      	ite	eq
 80032fc:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8003300:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003304:	f04f 0c08 	mov.w	ip, #8
 8003308:	e003      	b.n	8003312 <HAL_GPIO_Init+0x76>
      switch (GPIO_Init->Mode)
 800330a:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
 800330e:	45d1      	cmp	r9, sl
 8003310:	d0eb      	beq.n	80032ea <HAL_GPIO_Init+0x4e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003312:	2fff      	cmp	r7, #255	; 0xff
 8003314:	bf99      	ittee	ls
 8003316:	4681      	movls	r9, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003318:	4692      	movls	sl, r2
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800331a:	f100 0904 	addhi.w	r9, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800331e:	f1a2 0a20 	subhi.w	sl, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003322:	f8d9 8000 	ldr.w	r8, [r9]
 8003326:	f04f 0b0f 	mov.w	fp, #15
 800332a:	fa0b fb0a 	lsl.w	fp, fp, sl
 800332e:	ea28 080b 	bic.w	r8, r8, fp
 8003332:	fa0c fa0a 	lsl.w	sl, ip, sl
 8003336:	ea48 080a 	orr.w	r8, r8, sl
 800333a:	f8c9 8000 	str.w	r8, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800333e:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8003342:	f018 5f80 	tst.w	r8, #268435456	; 0x10000000
 8003346:	d06f      	beq.n	8003428 <HAL_GPIO_Init+0x18c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003348:	f8d6 8018 	ldr.w	r8, [r6, #24]
 800334c:	f048 0801 	orr.w	r8, r8, #1
 8003350:	f8c6 8018 	str.w	r8, [r6, #24]
 8003354:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8003358:	f008 0801 	and.w	r8, r8, #1
 800335c:	f8cd 8004 	str.w	r8, [sp, #4]
 8003360:	f8dd 8004 	ldr.w	r8, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8003364:	f023 0803 	bic.w	r8, r3, #3
 8003368:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800336c:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8003370:	f8d8 a008 	ldr.w	sl, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003374:	f003 0903 	and.w	r9, r3, #3
 8003378:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 800337c:	f04f 090f 	mov.w	r9, #15
 8003380:	fa09 f90b 	lsl.w	r9, r9, fp
 8003384:	ea2a 0a09 	bic.w	sl, sl, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003388:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800350c <HAL_GPIO_Init+0x270>
 800338c:	4548      	cmp	r0, r9
 800338e:	f000 80a4 	beq.w	80034da <HAL_GPIO_Init+0x23e>
 8003392:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8003396:	4548      	cmp	r0, r9
 8003398:	f000 80a2 	beq.w	80034e0 <HAL_GPIO_Init+0x244>
 800339c:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 80033a0:	4548      	cmp	r0, r9
 80033a2:	f000 80a0 	beq.w	80034e6 <HAL_GPIO_Init+0x24a>
 80033a6:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 80033aa:	4548      	cmp	r0, r9
 80033ac:	bf0c      	ite	eq
 80033ae:	f04f 0903 	moveq.w	r9, #3
 80033b2:	f04f 0904 	movne.w	r9, #4
 80033b6:	fa09 f90b 	lsl.w	r9, r9, fp
 80033ba:	ea49 090a 	orr.w	r9, r9, sl
        AFIO->EXTICR[position >> 2u] = temp;
 80033be:	f8c8 9008 	str.w	r9, [r8, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033c2:	f8d1 8004 	ldr.w	r8, [r1, #4]
 80033c6:	f418 1f80 	tst.w	r8, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80033ca:	f8d4 8008 	ldr.w	r8, [r4, #8]
 80033ce:	bf14      	ite	ne
 80033d0:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80033d4:	ea28 0807 	biceq.w	r8, r8, r7
 80033d8:	f8c4 8008 	str.w	r8, [r4, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033dc:	f8d1 8004 	ldr.w	r8, [r1, #4]
 80033e0:	f418 1f00 	tst.w	r8, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80033e4:	f8d4 800c 	ldr.w	r8, [r4, #12]
 80033e8:	bf14      	ite	ne
 80033ea:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80033ee:	ea28 0807 	biceq.w	r8, r8, r7
 80033f2:	f8c4 800c 	str.w	r8, [r4, #12]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033f6:	f8d1 8004 	ldr.w	r8, [r1, #4]
 80033fa:	f418 3f00 	tst.w	r8, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80033fe:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8003402:	bf14      	ite	ne
 8003404:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003408:	ea28 0807 	biceq.w	r8, r8, r7
 800340c:	f8c4 8004 	str.w	r8, [r4, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003410:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8003414:	f418 3f80 	tst.w	r8, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8003418:	f8d4 8000 	ldr.w	r8, [r4]
 800341c:	bf14      	ite	ne
 800341e:	ea48 0707 	orrne.w	r7, r8, r7
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003422:	ea28 0707 	biceq.w	r7, r8, r7
 8003426:	6027      	str	r7, [r4, #0]
        }
      }
    }

	position++;
 8003428:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800342a:	f8d1 9000 	ldr.w	r9, [r1]
 800342e:	3204      	adds	r2, #4
 8003430:	fa39 f703 	lsrs.w	r7, r9, r3
 8003434:	d05a      	beq.n	80034ec <HAL_GPIO_Init+0x250>
    ioposition = (0x01uL << position);
 8003436:	f04f 0801 	mov.w	r8, #1
 800343a:	fa08 f803 	lsl.w	r8, r8, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800343e:	ea08 0709 	and.w	r7, r8, r9
    if (iocurrent == ioposition)
 8003442:	ea38 0909 	bics.w	r9, r8, r9
 8003446:	d1ef      	bne.n	8003428 <HAL_GPIO_Init+0x18c>
      switch (GPIO_Init->Mode)
 8003448:	f8d1 9004 	ldr.w	r9, [r1, #4]
 800344c:	f1b9 0f12 	cmp.w	r9, #18
 8003450:	f63f af39 	bhi.w	80032c6 <HAL_GPIO_Init+0x2a>
 8003454:	f1b9 0f12 	cmp.w	r9, #18
 8003458:	f63f af5b 	bhi.w	8003312 <HAL_GPIO_Init+0x76>
 800345c:	f20f 0a04 	addw	sl, pc, #4
 8003460:	f85a f029 	ldr.w	pc, [sl, r9, lsl #2]
 8003464:	080032eb 	.word	0x080032eb
 8003468:	080034b1 	.word	0x080034b1
 800346c:	080034c1 	.word	0x080034c1
 8003470:	080032c1 	.word	0x080032c1
 8003474:	08003313 	.word	0x08003313
 8003478:	08003313 	.word	0x08003313
 800347c:	08003313 	.word	0x08003313
 8003480:	08003313 	.word	0x08003313
 8003484:	08003313 	.word	0x08003313
 8003488:	08003313 	.word	0x08003313
 800348c:	08003313 	.word	0x08003313
 8003490:	08003313 	.word	0x08003313
 8003494:	08003313 	.word	0x08003313
 8003498:	08003313 	.word	0x08003313
 800349c:	08003313 	.word	0x08003313
 80034a0:	08003313 	.word	0x08003313
 80034a4:	08003313 	.word	0x08003313
 80034a8:	080034b7 	.word	0x080034b7
 80034ac:	080034cb 	.word	0x080034cb
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80034b0:	f8d1 c00c 	ldr.w	ip, [r1, #12]
          break;
 80034b4:	e72d      	b.n	8003312 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80034b6:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 80034ba:	f10c 0c04 	add.w	ip, ip, #4
          break;
 80034be:	e728      	b.n	8003312 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80034c0:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 80034c4:	f10c 0c08 	add.w	ip, ip, #8
          break;
 80034c8:	e723      	b.n	8003312 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80034ca:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 80034ce:	f10c 0c0c 	add.w	ip, ip, #12
          break;
 80034d2:	e71e      	b.n	8003312 <HAL_GPIO_Init+0x76>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80034d4:	f04f 0c04 	mov.w	ip, #4
 80034d8:	e71b      	b.n	8003312 <HAL_GPIO_Init+0x76>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80034da:	f04f 0900 	mov.w	r9, #0
 80034de:	e76a      	b.n	80033b6 <HAL_GPIO_Init+0x11a>
 80034e0:	f04f 0901 	mov.w	r9, #1
 80034e4:	e767      	b.n	80033b6 <HAL_GPIO_Init+0x11a>
 80034e6:	f04f 0902 	mov.w	r9, #2
 80034ea:	e764      	b.n	80033b6 <HAL_GPIO_Init+0x11a>
  }
}
 80034ec:	b003      	add	sp, #12
 80034ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034f2:	bf00      	nop
 80034f4:	40021000 	.word	0x40021000
 80034f8:	40010400 	.word	0x40010400
 80034fc:	10220000 	.word	0x10220000
 8003500:	10310000 	.word	0x10310000
 8003504:	10320000 	.word	0x10320000
 8003508:	10120000 	.word	0x10120000
 800350c:	40010800 	.word	0x40010800

08003510 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003510:	6883      	ldr	r3, [r0, #8]
 8003512:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003514:	bf14      	ite	ne
 8003516:	2001      	movne	r0, #1
 8003518:	2000      	moveq	r0, #0
 800351a:	4770      	bx	lr

0800351c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800351c:	b10a      	cbz	r2, 8003522 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800351e:	6101      	str	r1, [r0, #16]
 8003520:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003522:	0409      	lsls	r1, r1, #16
 8003524:	6101      	str	r1, [r0, #16]
  }
}
 8003526:	4770      	bx	lr

08003528 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003528:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800352a:	ea01 0203 	and.w	r2, r1, r3
 800352e:	ea21 0103 	bic.w	r1, r1, r3
 8003532:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003536:	6101      	str	r1, [r0, #16]
}
 8003538:	4770      	bx	lr
	...

0800353c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800353c:	2800      	cmp	r0, #0
 800353e:	f000 8201 	beq.w	8003944 <HAL_RCC_OscConfig+0x408>
{
 8003542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800354a:	6803      	ldr	r3, [r0, #0]
 800354c:	f013 0f01 	tst.w	r3, #1
 8003550:	d02c      	beq.n	80035ac <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003552:	4b9f      	ldr	r3, [pc, #636]	; (80037d0 <HAL_RCC_OscConfig+0x294>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f003 030c 	and.w	r3, r3, #12
 800355a:	2b04      	cmp	r3, #4
 800355c:	d01d      	beq.n	800359a <HAL_RCC_OscConfig+0x5e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800355e:	4b9c      	ldr	r3, [pc, #624]	; (80037d0 <HAL_RCC_OscConfig+0x294>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f003 030c 	and.w	r3, r3, #12
 8003566:	2b08      	cmp	r3, #8
 8003568:	d012      	beq.n	8003590 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800356a:	6863      	ldr	r3, [r4, #4]
 800356c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003570:	d041      	beq.n	80035f6 <HAL_RCC_OscConfig+0xba>
 8003572:	2b00      	cmp	r3, #0
 8003574:	d155      	bne.n	8003622 <HAL_RCC_OscConfig+0xe6>
 8003576:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800357a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	e037      	b.n	8003600 <HAL_RCC_OscConfig+0xc4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003590:	4b8f      	ldr	r3, [pc, #572]	; (80037d0 <HAL_RCC_OscConfig+0x294>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003598:	d0e7      	beq.n	800356a <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800359a:	4b8d      	ldr	r3, [pc, #564]	; (80037d0 <HAL_RCC_OscConfig+0x294>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80035a2:	d003      	beq.n	80035ac <HAL_RCC_OscConfig+0x70>
 80035a4:	6863      	ldr	r3, [r4, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 81ce 	beq.w	8003948 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ac:	6823      	ldr	r3, [r4, #0]
 80035ae:	f013 0f02 	tst.w	r3, #2
 80035b2:	d075      	beq.n	80036a0 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035b4:	4b86      	ldr	r3, [pc, #536]	; (80037d0 <HAL_RCC_OscConfig+0x294>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f013 0f0c 	tst.w	r3, #12
 80035bc:	d05f      	beq.n	800367e <HAL_RCC_OscConfig+0x142>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80035be:	4b84      	ldr	r3, [pc, #528]	; (80037d0 <HAL_RCC_OscConfig+0x294>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f003 030c 	and.w	r3, r3, #12
 80035c6:	2b08      	cmp	r3, #8
 80035c8:	d054      	beq.n	8003674 <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035ca:	6923      	ldr	r3, [r4, #16]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 808a 	beq.w	80036e6 <HAL_RCC_OscConfig+0x1aa>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035d2:	4b80      	ldr	r3, [pc, #512]	; (80037d4 <HAL_RCC_OscConfig+0x298>)
 80035d4:	2201      	movs	r2, #1
 80035d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d8:	f7ff f878 	bl	80026cc <HAL_GetTick>
 80035dc:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035de:	4e7c      	ldr	r6, [pc, #496]	; (80037d0 <HAL_RCC_OscConfig+0x294>)
 80035e0:	6833      	ldr	r3, [r6, #0]
 80035e2:	f013 0f02 	tst.w	r3, #2
 80035e6:	d175      	bne.n	80036d4 <HAL_RCC_OscConfig+0x198>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035e8:	f7ff f870 	bl	80026cc <HAL_GetTick>
 80035ec:	1b40      	subs	r0, r0, r5
 80035ee:	2802      	cmp	r0, #2
 80035f0:	d9f6      	bls.n	80035e0 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_TIMEOUT;
 80035f2:	2003      	movs	r0, #3
 80035f4:	e1ad      	b.n	8003952 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035f6:	4a76      	ldr	r2, [pc, #472]	; (80037d0 <HAL_RCC_OscConfig+0x294>)
 80035f8:	6813      	ldr	r3, [r2, #0]
 80035fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035fe:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003600:	6863      	ldr	r3, [r4, #4]
 8003602:	b343      	cbz	r3, 8003656 <HAL_RCC_OscConfig+0x11a>
        tickstart = HAL_GetTick();
 8003604:	f7ff f862 	bl	80026cc <HAL_GetTick>
 8003608:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800360a:	4e71      	ldr	r6, [pc, #452]	; (80037d0 <HAL_RCC_OscConfig+0x294>)
 800360c:	6833      	ldr	r3, [r6, #0]
 800360e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003612:	d1cb      	bne.n	80035ac <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003614:	f7ff f85a 	bl	80026cc <HAL_GetTick>
 8003618:	1b40      	subs	r0, r0, r5
 800361a:	2864      	cmp	r0, #100	; 0x64
 800361c:	d9f6      	bls.n	800360c <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 800361e:	2003      	movs	r0, #3
 8003620:	e197      	b.n	8003952 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003622:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003626:	d009      	beq.n	800363c <HAL_RCC_OscConfig+0x100>
 8003628:	4b69      	ldr	r3, [pc, #420]	; (80037d0 <HAL_RCC_OscConfig+0x294>)
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003638:	601a      	str	r2, [r3, #0]
 800363a:	e7e1      	b.n	8003600 <HAL_RCC_OscConfig+0xc4>
 800363c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003640:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	e7d4      	b.n	8003600 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8003656:	f7ff f839 	bl	80026cc <HAL_GetTick>
 800365a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800365c:	4e5c      	ldr	r6, [pc, #368]	; (80037d0 <HAL_RCC_OscConfig+0x294>)
 800365e:	6833      	ldr	r3, [r6, #0]
 8003660:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003664:	d0a2      	beq.n	80035ac <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003666:	f7ff f831 	bl	80026cc <HAL_GetTick>
 800366a:	1b40      	subs	r0, r0, r5
 800366c:	2864      	cmp	r0, #100	; 0x64
 800366e:	d9f6      	bls.n	800365e <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 8003670:	2003      	movs	r0, #3
 8003672:	e16e      	b.n	8003952 <HAL_RCC_OscConfig+0x416>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003674:	4b56      	ldr	r3, [pc, #344]	; (80037d0 <HAL_RCC_OscConfig+0x294>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800367c:	d1a5      	bne.n	80035ca <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800367e:	4b54      	ldr	r3, [pc, #336]	; (80037d0 <HAL_RCC_OscConfig+0x294>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f013 0f02 	tst.w	r3, #2
 8003686:	d003      	beq.n	8003690 <HAL_RCC_OscConfig+0x154>
 8003688:	6923      	ldr	r3, [r4, #16]
 800368a:	2b01      	cmp	r3, #1
 800368c:	f040 815e 	bne.w	800394c <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003690:	4a4f      	ldr	r2, [pc, #316]	; (80037d0 <HAL_RCC_OscConfig+0x294>)
 8003692:	6813      	ldr	r3, [r2, #0]
 8003694:	6961      	ldr	r1, [r4, #20]
 8003696:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800369a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800369e:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036a0:	6823      	ldr	r3, [r4, #0]
 80036a2:	f013 0f08 	tst.w	r3, #8
 80036a6:	d03d      	beq.n	8003724 <HAL_RCC_OscConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036a8:	69a3      	ldr	r3, [r4, #24]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d066      	beq.n	800377c <HAL_RCC_OscConfig+0x240>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ae:	4b49      	ldr	r3, [pc, #292]	; (80037d4 <HAL_RCC_OscConfig+0x298>)
 80036b0:	2201      	movs	r2, #1
 80036b2:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036b6:	f7ff f809 	bl	80026cc <HAL_GetTick>
 80036ba:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036bc:	4e44      	ldr	r6, [pc, #272]	; (80037d0 <HAL_RCC_OscConfig+0x294>)
 80036be:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80036c0:	f013 0f02 	tst.w	r3, #2
 80036c4:	d121      	bne.n	800370a <HAL_RCC_OscConfig+0x1ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036c6:	f7ff f801 	bl	80026cc <HAL_GetTick>
 80036ca:	1b40      	subs	r0, r0, r5
 80036cc:	2802      	cmp	r0, #2
 80036ce:	d9f6      	bls.n	80036be <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 80036d0:	2003      	movs	r0, #3
 80036d2:	e13e      	b.n	8003952 <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d4:	4a3e      	ldr	r2, [pc, #248]	; (80037d0 <HAL_RCC_OscConfig+0x294>)
 80036d6:	6813      	ldr	r3, [r2, #0]
 80036d8:	6961      	ldr	r1, [r4, #20]
 80036da:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80036de:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80036e2:	6013      	str	r3, [r2, #0]
 80036e4:	e7dc      	b.n	80036a0 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 80036e6:	4b3b      	ldr	r3, [pc, #236]	; (80037d4 <HAL_RCC_OscConfig+0x298>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80036ec:	f7fe ffee 	bl	80026cc <HAL_GetTick>
 80036f0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036f2:	4e37      	ldr	r6, [pc, #220]	; (80037d0 <HAL_RCC_OscConfig+0x294>)
 80036f4:	6833      	ldr	r3, [r6, #0]
 80036f6:	f013 0f02 	tst.w	r3, #2
 80036fa:	d0d1      	beq.n	80036a0 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036fc:	f7fe ffe6 	bl	80026cc <HAL_GetTick>
 8003700:	1b40      	subs	r0, r0, r5
 8003702:	2802      	cmp	r0, #2
 8003704:	d9f6      	bls.n	80036f4 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 8003706:	2003      	movs	r0, #3
 8003708:	e123      	b.n	8003952 <HAL_RCC_OscConfig+0x416>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800370a:	4b33      	ldr	r3, [pc, #204]	; (80037d8 <HAL_RCC_OscConfig+0x29c>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a33      	ldr	r2, [pc, #204]	; (80037dc <HAL_RCC_OscConfig+0x2a0>)
 8003710:	fba2 2303 	umull	r2, r3, r2, r3
 8003714:	0a5b      	lsrs	r3, r3, #9
 8003716:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8003718:	bf00      	nop
  }
  while (Delay --);
 800371a:	9b01      	ldr	r3, [sp, #4]
 800371c:	1e5a      	subs	r2, r3, #1
 800371e:	9201      	str	r2, [sp, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1f9      	bne.n	8003718 <HAL_RCC_OscConfig+0x1dc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003724:	6823      	ldr	r3, [r4, #0]
 8003726:	f013 0f04 	tst.w	r3, #4
 800372a:	f000 809b 	beq.w	8003864 <HAL_RCC_OscConfig+0x328>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800372e:	4b28      	ldr	r3, [pc, #160]	; (80037d0 <HAL_RCC_OscConfig+0x294>)
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003736:	d134      	bne.n	80037a2 <HAL_RCC_OscConfig+0x266>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003738:	4b25      	ldr	r3, [pc, #148]	; (80037d0 <HAL_RCC_OscConfig+0x294>)
 800373a:	69da      	ldr	r2, [r3, #28]
 800373c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003740:	61da      	str	r2, [r3, #28]
 8003742:	69db      	ldr	r3, [r3, #28]
 8003744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 800374c:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800374e:	4b24      	ldr	r3, [pc, #144]	; (80037e0 <HAL_RCC_OscConfig+0x2a4>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003756:	d026      	beq.n	80037a6 <HAL_RCC_OscConfig+0x26a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003758:	68e3      	ldr	r3, [r4, #12]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d042      	beq.n	80037e4 <HAL_RCC_OscConfig+0x2a8>
 800375e:	2b00      	cmp	r3, #0
 8003760:	d158      	bne.n	8003814 <HAL_RCC_OscConfig+0x2d8>
 8003762:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003766:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800376a:	6a1a      	ldr	r2, [r3, #32]
 800376c:	f022 0201 	bic.w	r2, r2, #1
 8003770:	621a      	str	r2, [r3, #32]
 8003772:	6a1a      	ldr	r2, [r3, #32]
 8003774:	f022 0204 	bic.w	r2, r2, #4
 8003778:	621a      	str	r2, [r3, #32]
 800377a:	e038      	b.n	80037ee <HAL_RCC_OscConfig+0x2b2>
      __HAL_RCC_LSI_DISABLE();
 800377c:	4b15      	ldr	r3, [pc, #84]	; (80037d4 <HAL_RCC_OscConfig+0x298>)
 800377e:	2200      	movs	r2, #0
 8003780:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8003784:	f7fe ffa2 	bl	80026cc <HAL_GetTick>
 8003788:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800378a:	4e11      	ldr	r6, [pc, #68]	; (80037d0 <HAL_RCC_OscConfig+0x294>)
 800378c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800378e:	f013 0f02 	tst.w	r3, #2
 8003792:	d0c7      	beq.n	8003724 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003794:	f7fe ff9a 	bl	80026cc <HAL_GetTick>
 8003798:	1b40      	subs	r0, r0, r5
 800379a:	2802      	cmp	r0, #2
 800379c:	d9f6      	bls.n	800378c <HAL_RCC_OscConfig+0x250>
          return HAL_TIMEOUT;
 800379e:	2003      	movs	r0, #3
 80037a0:	e0d7      	b.n	8003952 <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 80037a2:	2500      	movs	r5, #0
 80037a4:	e7d3      	b.n	800374e <HAL_RCC_OscConfig+0x212>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037a6:	4a0e      	ldr	r2, [pc, #56]	; (80037e0 <HAL_RCC_OscConfig+0x2a4>)
 80037a8:	6813      	ldr	r3, [r2, #0]
 80037aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ae:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80037b0:	f7fe ff8c 	bl	80026cc <HAL_GetTick>
 80037b4:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b6:	4f0a      	ldr	r7, [pc, #40]	; (80037e0 <HAL_RCC_OscConfig+0x2a4>)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	f413 7f80 	tst.w	r3, #256	; 0x100
 80037be:	d1cb      	bne.n	8003758 <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037c0:	f7fe ff84 	bl	80026cc <HAL_GetTick>
 80037c4:	1b80      	subs	r0, r0, r6
 80037c6:	2864      	cmp	r0, #100	; 0x64
 80037c8:	d9f6      	bls.n	80037b8 <HAL_RCC_OscConfig+0x27c>
          return HAL_TIMEOUT;
 80037ca:	2003      	movs	r0, #3
 80037cc:	e0c1      	b.n	8003952 <HAL_RCC_OscConfig+0x416>
 80037ce:	bf00      	nop
 80037d0:	40021000 	.word	0x40021000
 80037d4:	42420000 	.word	0x42420000
 80037d8:	20000024 	.word	0x20000024
 80037dc:	10624dd3 	.word	0x10624dd3
 80037e0:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037e4:	4a5e      	ldr	r2, [pc, #376]	; (8003960 <HAL_RCC_OscConfig+0x424>)
 80037e6:	6a13      	ldr	r3, [r2, #32]
 80037e8:	f043 0301 	orr.w	r3, r3, #1
 80037ec:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037ee:	68e3      	ldr	r3, [r4, #12]
 80037f0:	b333      	cbz	r3, 8003840 <HAL_RCC_OscConfig+0x304>
      tickstart = HAL_GetTick();
 80037f2:	f7fe ff6b 	bl	80026cc <HAL_GetTick>
 80037f6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f8:	4f59      	ldr	r7, [pc, #356]	; (8003960 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037fa:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037fe:	6a3b      	ldr	r3, [r7, #32]
 8003800:	f013 0f02 	tst.w	r3, #2
 8003804:	d12d      	bne.n	8003862 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003806:	f7fe ff61 	bl	80026cc <HAL_GetTick>
 800380a:	1b80      	subs	r0, r0, r6
 800380c:	4540      	cmp	r0, r8
 800380e:	d9f6      	bls.n	80037fe <HAL_RCC_OscConfig+0x2c2>
          return HAL_TIMEOUT;
 8003810:	2003      	movs	r0, #3
 8003812:	e09e      	b.n	8003952 <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003814:	2b05      	cmp	r3, #5
 8003816:	d009      	beq.n	800382c <HAL_RCC_OscConfig+0x2f0>
 8003818:	4b51      	ldr	r3, [pc, #324]	; (8003960 <HAL_RCC_OscConfig+0x424>)
 800381a:	6a1a      	ldr	r2, [r3, #32]
 800381c:	f022 0201 	bic.w	r2, r2, #1
 8003820:	621a      	str	r2, [r3, #32]
 8003822:	6a1a      	ldr	r2, [r3, #32]
 8003824:	f022 0204 	bic.w	r2, r2, #4
 8003828:	621a      	str	r2, [r3, #32]
 800382a:	e7e0      	b.n	80037ee <HAL_RCC_OscConfig+0x2b2>
 800382c:	4b4c      	ldr	r3, [pc, #304]	; (8003960 <HAL_RCC_OscConfig+0x424>)
 800382e:	6a1a      	ldr	r2, [r3, #32]
 8003830:	f042 0204 	orr.w	r2, r2, #4
 8003834:	621a      	str	r2, [r3, #32]
 8003836:	6a1a      	ldr	r2, [r3, #32]
 8003838:	f042 0201 	orr.w	r2, r2, #1
 800383c:	621a      	str	r2, [r3, #32]
 800383e:	e7d6      	b.n	80037ee <HAL_RCC_OscConfig+0x2b2>
      tickstart = HAL_GetTick();
 8003840:	f7fe ff44 	bl	80026cc <HAL_GetTick>
 8003844:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003846:	4f46      	ldr	r7, [pc, #280]	; (8003960 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003848:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	f013 0f02 	tst.w	r3, #2
 8003852:	d006      	beq.n	8003862 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003854:	f7fe ff3a 	bl	80026cc <HAL_GetTick>
 8003858:	1b80      	subs	r0, r0, r6
 800385a:	4540      	cmp	r0, r8
 800385c:	d9f6      	bls.n	800384c <HAL_RCC_OscConfig+0x310>
          return HAL_TIMEOUT;
 800385e:	2003      	movs	r0, #3
 8003860:	e077      	b.n	8003952 <HAL_RCC_OscConfig+0x416>
    if (pwrclkchanged == SET)
 8003862:	b9e5      	cbnz	r5, 800389e <HAL_RCC_OscConfig+0x362>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003864:	69e3      	ldr	r3, [r4, #28]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d072      	beq.n	8003950 <HAL_RCC_OscConfig+0x414>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800386a:	4a3d      	ldr	r2, [pc, #244]	; (8003960 <HAL_RCC_OscConfig+0x424>)
 800386c:	6852      	ldr	r2, [r2, #4]
 800386e:	f002 020c 	and.w	r2, r2, #12
 8003872:	2a08      	cmp	r2, #8
 8003874:	d056      	beq.n	8003924 <HAL_RCC_OscConfig+0x3e8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003876:	2b02      	cmp	r3, #2
 8003878:	d017      	beq.n	80038aa <HAL_RCC_OscConfig+0x36e>
        __HAL_RCC_PLL_DISABLE();
 800387a:	4b3a      	ldr	r3, [pc, #232]	; (8003964 <HAL_RCC_OscConfig+0x428>)
 800387c:	2200      	movs	r2, #0
 800387e:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003880:	f7fe ff24 	bl	80026cc <HAL_GetTick>
 8003884:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003886:	4d36      	ldr	r5, [pc, #216]	; (8003960 <HAL_RCC_OscConfig+0x424>)
 8003888:	682b      	ldr	r3, [r5, #0]
 800388a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800388e:	d047      	beq.n	8003920 <HAL_RCC_OscConfig+0x3e4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003890:	f7fe ff1c 	bl	80026cc <HAL_GetTick>
 8003894:	1b00      	subs	r0, r0, r4
 8003896:	2802      	cmp	r0, #2
 8003898:	d9f6      	bls.n	8003888 <HAL_RCC_OscConfig+0x34c>
            return HAL_TIMEOUT;
 800389a:	2003      	movs	r0, #3
 800389c:	e059      	b.n	8003952 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 800389e:	4a30      	ldr	r2, [pc, #192]	; (8003960 <HAL_RCC_OscConfig+0x424>)
 80038a0:	69d3      	ldr	r3, [r2, #28]
 80038a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038a6:	61d3      	str	r3, [r2, #28]
 80038a8:	e7dc      	b.n	8003864 <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_PLL_DISABLE();
 80038aa:	4b2e      	ldr	r3, [pc, #184]	; (8003964 <HAL_RCC_OscConfig+0x428>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80038b0:	f7fe ff0c 	bl	80026cc <HAL_GetTick>
 80038b4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038b6:	4e2a      	ldr	r6, [pc, #168]	; (8003960 <HAL_RCC_OscConfig+0x424>)
 80038b8:	6833      	ldr	r3, [r6, #0]
 80038ba:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80038be:	d006      	beq.n	80038ce <HAL_RCC_OscConfig+0x392>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c0:	f7fe ff04 	bl	80026cc <HAL_GetTick>
 80038c4:	1b40      	subs	r0, r0, r5
 80038c6:	2802      	cmp	r0, #2
 80038c8:	d9f6      	bls.n	80038b8 <HAL_RCC_OscConfig+0x37c>
            return HAL_TIMEOUT;
 80038ca:	2003      	movs	r0, #3
 80038cc:	e041      	b.n	8003952 <HAL_RCC_OscConfig+0x416>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80038ce:	6a23      	ldr	r3, [r4, #32]
 80038d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038d4:	d01a      	beq.n	800390c <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038d6:	4922      	ldr	r1, [pc, #136]	; (8003960 <HAL_RCC_OscConfig+0x424>)
 80038d8:	684a      	ldr	r2, [r1, #4]
 80038da:	6a23      	ldr	r3, [r4, #32]
 80038dc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80038de:	4303      	orrs	r3, r0
 80038e0:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80038e4:	4313      	orrs	r3, r2
 80038e6:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 80038e8:	4b1e      	ldr	r3, [pc, #120]	; (8003964 <HAL_RCC_OscConfig+0x428>)
 80038ea:	2201      	movs	r2, #1
 80038ec:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80038ee:	f7fe feed 	bl	80026cc <HAL_GetTick>
 80038f2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038f4:	4d1a      	ldr	r5, [pc, #104]	; (8003960 <HAL_RCC_OscConfig+0x424>)
 80038f6:	682b      	ldr	r3, [r5, #0]
 80038f8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80038fc:	d10e      	bne.n	800391c <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038fe:	f7fe fee5 	bl	80026cc <HAL_GetTick>
 8003902:	1b00      	subs	r0, r0, r4
 8003904:	2802      	cmp	r0, #2
 8003906:	d9f6      	bls.n	80038f6 <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 8003908:	2003      	movs	r0, #3
 800390a:	e022      	b.n	8003952 <HAL_RCC_OscConfig+0x416>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800390c:	4a14      	ldr	r2, [pc, #80]	; (8003960 <HAL_RCC_OscConfig+0x424>)
 800390e:	6853      	ldr	r3, [r2, #4]
 8003910:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003914:	68a1      	ldr	r1, [r4, #8]
 8003916:	430b      	orrs	r3, r1
 8003918:	6053      	str	r3, [r2, #4]
 800391a:	e7dc      	b.n	80038d6 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 800391c:	2000      	movs	r0, #0
 800391e:	e018      	b.n	8003952 <HAL_RCC_OscConfig+0x416>
 8003920:	2000      	movs	r0, #0
 8003922:	e016      	b.n	8003952 <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003924:	2b01      	cmp	r3, #1
 8003926:	d017      	beq.n	8003958 <HAL_RCC_OscConfig+0x41c>
        pll_config = RCC->CFGR;
 8003928:	4b0d      	ldr	r3, [pc, #52]	; (8003960 <HAL_RCC_OscConfig+0x424>)
 800392a:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800392c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003930:	6a22      	ldr	r2, [r4, #32]
 8003932:	4291      	cmp	r1, r2
 8003934:	d112      	bne.n	800395c <HAL_RCC_OscConfig+0x420>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003936:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800393a:	6a60      	ldr	r0, [r4, #36]	; 0x24
        return HAL_ERROR;
 800393c:	1a18      	subs	r0, r3, r0
 800393e:	bf18      	it	ne
 8003940:	2001      	movne	r0, #1
 8003942:	e006      	b.n	8003952 <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 8003944:	2001      	movs	r0, #1
}
 8003946:	4770      	bx	lr
        return HAL_ERROR;
 8003948:	2001      	movs	r0, #1
 800394a:	e002      	b.n	8003952 <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 800394c:	2001      	movs	r0, #1
 800394e:	e000      	b.n	8003952 <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 8003950:	2000      	movs	r0, #0
}
 8003952:	b002      	add	sp, #8
 8003954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8003958:	2001      	movs	r0, #1
 800395a:	e7fa      	b.n	8003952 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 800395c:	2001      	movs	r0, #1
 800395e:	e7f8      	b.n	8003952 <HAL_RCC_OscConfig+0x416>
 8003960:	40021000 	.word	0x40021000
 8003964:	42420000 	.word	0x42420000

08003968 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8003968:	4b0f      	ldr	r3, [pc, #60]	; (80039a8 <HAL_RCC_GetSysClockFreq+0x40>)
 800396a:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800396c:	f003 020c 	and.w	r2, r3, #12
 8003970:	2a08      	cmp	r2, #8
 8003972:	d001      	beq.n	8003978 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8003974:	480d      	ldr	r0, [pc, #52]	; (80039ac <HAL_RCC_GetSysClockFreq+0x44>)
}
 8003976:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003978:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800397c:	490c      	ldr	r1, [pc, #48]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x48>)
 800397e:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003980:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003984:	d00b      	beq.n	800399e <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003986:	4b08      	ldr	r3, [pc, #32]	; (80039a8 <HAL_RCC_GetSysClockFreq+0x40>)
 8003988:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800398a:	4a08      	ldr	r2, [pc, #32]	; (80039ac <HAL_RCC_GetSysClockFreq+0x44>)
 800398c:	fb02 f000 	mul.w	r0, r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003990:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8003994:	4a07      	ldr	r2, [pc, #28]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x4c>)
 8003996:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003998:	fbb0 f0f3 	udiv	r0, r0, r3
 800399c:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800399e:	4b06      	ldr	r3, [pc, #24]	; (80039b8 <HAL_RCC_GetSysClockFreq+0x50>)
 80039a0:	fb03 f000 	mul.w	r0, r3, r0
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	40021000 	.word	0x40021000
 80039ac:	007a1200 	.word	0x007a1200
 80039b0:	08007de4 	.word	0x08007de4
 80039b4:	08007df4 	.word	0x08007df4
 80039b8:	003d0900 	.word	0x003d0900

080039bc <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80039bc:	2800      	cmp	r0, #0
 80039be:	f000 80a2 	beq.w	8003b06 <HAL_RCC_ClockConfig+0x14a>
{
 80039c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039c6:	460d      	mov	r5, r1
 80039c8:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039ca:	4b53      	ldr	r3, [pc, #332]	; (8003b18 <HAL_RCC_ClockConfig+0x15c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	428b      	cmp	r3, r1
 80039d4:	d20b      	bcs.n	80039ee <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d6:	4a50      	ldr	r2, [pc, #320]	; (8003b18 <HAL_RCC_ClockConfig+0x15c>)
 80039d8:	6813      	ldr	r3, [r2, #0]
 80039da:	f023 0307 	bic.w	r3, r3, #7
 80039de:	430b      	orrs	r3, r1
 80039e0:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e2:	6813      	ldr	r3, [r2, #0]
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	428b      	cmp	r3, r1
 80039ea:	f040 808e 	bne.w	8003b0a <HAL_RCC_ClockConfig+0x14e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039ee:	6823      	ldr	r3, [r4, #0]
 80039f0:	f013 0f02 	tst.w	r3, #2
 80039f4:	d017      	beq.n	8003a26 <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f6:	f013 0f04 	tst.w	r3, #4
 80039fa:	d004      	beq.n	8003a06 <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039fc:	4a47      	ldr	r2, [pc, #284]	; (8003b1c <HAL_RCC_ClockConfig+0x160>)
 80039fe:	6853      	ldr	r3, [r2, #4]
 8003a00:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a04:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a06:	6823      	ldr	r3, [r4, #0]
 8003a08:	f013 0f08 	tst.w	r3, #8
 8003a0c:	d004      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a0e:	4a43      	ldr	r2, [pc, #268]	; (8003b1c <HAL_RCC_ClockConfig+0x160>)
 8003a10:	6853      	ldr	r3, [r2, #4]
 8003a12:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a16:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a18:	4a40      	ldr	r2, [pc, #256]	; (8003b1c <HAL_RCC_ClockConfig+0x160>)
 8003a1a:	6853      	ldr	r3, [r2, #4]
 8003a1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a20:	68a1      	ldr	r1, [r4, #8]
 8003a22:	430b      	orrs	r3, r1
 8003a24:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a26:	6823      	ldr	r3, [r4, #0]
 8003a28:	f013 0f01 	tst.w	r3, #1
 8003a2c:	d031      	beq.n	8003a92 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a2e:	6862      	ldr	r2, [r4, #4]
 8003a30:	2a01      	cmp	r2, #1
 8003a32:	d020      	beq.n	8003a76 <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a34:	2a02      	cmp	r2, #2
 8003a36:	d025      	beq.n	8003a84 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a38:	4b38      	ldr	r3, [pc, #224]	; (8003b1c <HAL_RCC_ClockConfig+0x160>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f013 0f02 	tst.w	r3, #2
 8003a40:	d065      	beq.n	8003b0e <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a42:	4936      	ldr	r1, [pc, #216]	; (8003b1c <HAL_RCC_ClockConfig+0x160>)
 8003a44:	684b      	ldr	r3, [r1, #4]
 8003a46:	f023 0303 	bic.w	r3, r3, #3
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8003a4e:	f7fe fe3d 	bl	80026cc <HAL_GetTick>
 8003a52:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a54:	4f31      	ldr	r7, [pc, #196]	; (8003b1c <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a56:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f003 030c 	and.w	r3, r3, #12
 8003a60:	6862      	ldr	r2, [r4, #4]
 8003a62:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003a66:	d014      	beq.n	8003a92 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a68:	f7fe fe30 	bl	80026cc <HAL_GetTick>
 8003a6c:	1b80      	subs	r0, r0, r6
 8003a6e:	4540      	cmp	r0, r8
 8003a70:	d9f3      	bls.n	8003a5a <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 8003a72:	2003      	movs	r0, #3
 8003a74:	e045      	b.n	8003b02 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a76:	4b29      	ldr	r3, [pc, #164]	; (8003b1c <HAL_RCC_ClockConfig+0x160>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003a7e:	d1e0      	bne.n	8003a42 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8003a80:	2001      	movs	r0, #1
 8003a82:	e03e      	b.n	8003b02 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a84:	4b25      	ldr	r3, [pc, #148]	; (8003b1c <HAL_RCC_ClockConfig+0x160>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003a8c:	d1d9      	bne.n	8003a42 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8003a8e:	2001      	movs	r0, #1
 8003a90:	e037      	b.n	8003b02 <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a92:	4b21      	ldr	r3, [pc, #132]	; (8003b18 <HAL_RCC_ClockConfig+0x15c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0307 	and.w	r3, r3, #7
 8003a9a:	42ab      	cmp	r3, r5
 8003a9c:	d90a      	bls.n	8003ab4 <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a9e:	4a1e      	ldr	r2, [pc, #120]	; (8003b18 <HAL_RCC_ClockConfig+0x15c>)
 8003aa0:	6813      	ldr	r3, [r2, #0]
 8003aa2:	f023 0307 	bic.w	r3, r3, #7
 8003aa6:	432b      	orrs	r3, r5
 8003aa8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aaa:	6813      	ldr	r3, [r2, #0]
 8003aac:	f003 0307 	and.w	r3, r3, #7
 8003ab0:	42ab      	cmp	r3, r5
 8003ab2:	d12e      	bne.n	8003b12 <HAL_RCC_ClockConfig+0x156>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab4:	6823      	ldr	r3, [r4, #0]
 8003ab6:	f013 0f04 	tst.w	r3, #4
 8003aba:	d006      	beq.n	8003aca <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003abc:	4a17      	ldr	r2, [pc, #92]	; (8003b1c <HAL_RCC_ClockConfig+0x160>)
 8003abe:	6853      	ldr	r3, [r2, #4]
 8003ac0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003ac4:	68e1      	ldr	r1, [r4, #12]
 8003ac6:	430b      	orrs	r3, r1
 8003ac8:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aca:	6823      	ldr	r3, [r4, #0]
 8003acc:	f013 0f08 	tst.w	r3, #8
 8003ad0:	d007      	beq.n	8003ae2 <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ad2:	4a12      	ldr	r2, [pc, #72]	; (8003b1c <HAL_RCC_ClockConfig+0x160>)
 8003ad4:	6853      	ldr	r3, [r2, #4]
 8003ad6:	6921      	ldr	r1, [r4, #16]
 8003ad8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003adc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003ae0:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ae2:	f7ff ff41 	bl	8003968 <HAL_RCC_GetSysClockFreq>
 8003ae6:	4b0d      	ldr	r3, [pc, #52]	; (8003b1c <HAL_RCC_ClockConfig+0x160>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003aee:	4a0c      	ldr	r2, [pc, #48]	; (8003b20 <HAL_RCC_ClockConfig+0x164>)
 8003af0:	5cd3      	ldrb	r3, [r2, r3]
 8003af2:	40d8      	lsrs	r0, r3
 8003af4:	4b0b      	ldr	r3, [pc, #44]	; (8003b24 <HAL_RCC_ClockConfig+0x168>)
 8003af6:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003af8:	4b0b      	ldr	r3, [pc, #44]	; (8003b28 <HAL_RCC_ClockConfig+0x16c>)
 8003afa:	6818      	ldr	r0, [r3, #0]
 8003afc:	f7fe fd24 	bl	8002548 <HAL_InitTick>
  return HAL_OK;
 8003b00:	2000      	movs	r0, #0
}
 8003b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8003b06:	2001      	movs	r0, #1
}
 8003b08:	4770      	bx	lr
    return HAL_ERROR;
 8003b0a:	2001      	movs	r0, #1
 8003b0c:	e7f9      	b.n	8003b02 <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 8003b0e:	2001      	movs	r0, #1
 8003b10:	e7f7      	b.n	8003b02 <HAL_RCC_ClockConfig+0x146>
    return HAL_ERROR;
 8003b12:	2001      	movs	r0, #1
 8003b14:	e7f5      	b.n	8003b02 <HAL_RCC_ClockConfig+0x146>
 8003b16:	bf00      	nop
 8003b18:	40022000 	.word	0x40022000
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	08007dcc 	.word	0x08007dcc
 8003b24:	20000024 	.word	0x20000024
 8003b28:	2000002c 	.word	0x2000002c

08003b2c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b2c:	4b04      	ldr	r3, [pc, #16]	; (8003b40 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003b34:	4a03      	ldr	r2, [pc, #12]	; (8003b44 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003b36:	5cd3      	ldrb	r3, [r2, r3]
 8003b38:	4a03      	ldr	r2, [pc, #12]	; (8003b48 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003b3a:	6810      	ldr	r0, [r2, #0]
}
 8003b3c:	40d8      	lsrs	r0, r3
 8003b3e:	4770      	bx	lr
 8003b40:	40021000 	.word	0x40021000
 8003b44:	08007ddc 	.word	0x08007ddc
 8003b48:	20000024 	.word	0x20000024

08003b4c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b4c:	4b04      	ldr	r3, [pc, #16]	; (8003b60 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003b54:	4a03      	ldr	r2, [pc, #12]	; (8003b64 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003b56:	5cd3      	ldrb	r3, [r2, r3]
 8003b58:	4a03      	ldr	r2, [pc, #12]	; (8003b68 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003b5a:	6810      	ldr	r0, [r2, #0]
}
 8003b5c:	40d8      	lsrs	r0, r3
 8003b5e:	4770      	bx	lr
 8003b60:	40021000 	.word	0x40021000
 8003b64:	08007ddc 	.word	0x08007ddc
 8003b68:	20000024 	.word	0x20000024

08003b6c <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b6c:	230f      	movs	r3, #15
 8003b6e:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b70:	4b0b      	ldr	r3, [pc, #44]	; (8003ba0 <HAL_RCC_GetClockConfig+0x34>)
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	f002 0203 	and.w	r2, r2, #3
 8003b78:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003b80:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003b88:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	08db      	lsrs	r3, r3, #3
 8003b8e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b92:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003b94:	4b03      	ldr	r3, [pc, #12]	; (8003ba4 <HAL_RCC_GetClockConfig+0x38>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0307 	and.w	r3, r3, #7
 8003b9c:	600b      	str	r3, [r1, #0]
}
 8003b9e:	4770      	bx	lr
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	40022000 	.word	0x40022000

08003ba8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bac:	b082      	sub	sp, #8
 8003bae:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003bb0:	6803      	ldr	r3, [r0, #0]
 8003bb2:	f013 0f01 	tst.w	r3, #1
 8003bb6:	d036      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bb8:	4b3f      	ldr	r3, [pc, #252]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003bc0:	d149      	bne.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xae>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bc2:	4b3d      	ldr	r3, [pc, #244]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003bc4:	69da      	ldr	r2, [r3, #28]
 8003bc6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003bca:	61da      	str	r2, [r3, #28]
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd2:	9301      	str	r3, [sp, #4]
 8003bd4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003bd6:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd8:	4b38      	ldr	r3, [pc, #224]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003be0:	d03b      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003be2:	4b35      	ldr	r3, [pc, #212]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003be4:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003be6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003bea:	d013      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8003bec:	6862      	ldr	r2, [r4, #4]
 8003bee:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d00e      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bf6:	4a30      	ldr	r2, [pc, #192]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003bf8:	6a13      	ldr	r3, [r2, #32]
 8003bfa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bfe:	4930      	ldr	r1, [pc, #192]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003c00:	2601      	movs	r6, #1
 8003c02:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c06:	2600      	movs	r6, #0
 8003c08:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c0c:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c0e:	f013 0f01 	tst.w	r3, #1
 8003c12:	d136      	bne.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xda>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c14:	4a28      	ldr	r2, [pc, #160]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003c16:	6a13      	ldr	r3, [r2, #32]
 8003c18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c1c:	6861      	ldr	r1, [r4, #4]
 8003c1e:	430b      	orrs	r3, r1
 8003c20:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c22:	2d00      	cmp	r5, #0
 8003c24:	d13e      	bne.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c26:	6823      	ldr	r3, [r4, #0]
 8003c28:	f013 0f02 	tst.w	r3, #2
 8003c2c:	d006      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c2e:	4a22      	ldr	r2, [pc, #136]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003c30:	6853      	ldr	r3, [r2, #4]
 8003c32:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003c36:	68a1      	ldr	r1, [r4, #8]
 8003c38:	430b      	orrs	r3, r1
 8003c3a:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c3c:	6823      	ldr	r3, [r4, #0]
 8003c3e:	f013 0f10 	tst.w	r3, #16
 8003c42:	d034      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c44:	4a1c      	ldr	r2, [pc, #112]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003c46:	6853      	ldr	r3, [r2, #4]
 8003c48:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003c4c:	68e1      	ldr	r1, [r4, #12]
 8003c4e:	430b      	orrs	r3, r1
 8003c50:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003c52:	2000      	movs	r0, #0
 8003c54:	e02c      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x108>
    FlagStatus pwrclkchanged = RESET;
 8003c56:	2500      	movs	r5, #0
 8003c58:	e7be      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c5a:	4a18      	ldr	r2, [pc, #96]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8003c5c:	6813      	ldr	r3, [r2, #0]
 8003c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c62:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003c64:	f7fe fd32 	bl	80026cc <HAL_GetTick>
 8003c68:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c6a:	4f14      	ldr	r7, [pc, #80]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003c72:	d1b6      	bne.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c74:	f7fe fd2a 	bl	80026cc <HAL_GetTick>
 8003c78:	1b80      	subs	r0, r0, r6
 8003c7a:	2864      	cmp	r0, #100	; 0x64
 8003c7c:	d9f6      	bls.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xc4>
          return HAL_TIMEOUT;
 8003c7e:	2003      	movs	r0, #3
 8003c80:	e016      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        tickstart = HAL_GetTick();
 8003c82:	f7fe fd23 	bl	80026cc <HAL_GetTick>
 8003c86:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c88:	4f0b      	ldr	r7, [pc, #44]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c8a:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
 8003c90:	f013 0f02 	tst.w	r3, #2
 8003c94:	d1be      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c96:	f7fe fd19 	bl	80026cc <HAL_GetTick>
 8003c9a:	1b80      	subs	r0, r0, r6
 8003c9c:	4540      	cmp	r0, r8
 8003c9e:	d9f6      	bls.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0xe6>
            return HAL_TIMEOUT;
 8003ca0:	2003      	movs	r0, #3
 8003ca2:	e005      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x108>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ca4:	69d3      	ldr	r3, [r2, #28]
 8003ca6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003caa:	61d3      	str	r3, [r2, #28]
 8003cac:	e7bb      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
  return HAL_OK;
 8003cae:	2000      	movs	r0, #0
}
 8003cb0:	b002      	add	sp, #8
 8003cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cb6:	bf00      	nop
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	40007000 	.word	0x40007000
 8003cc0:	42420000 	.word	0x42420000

08003cc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cc4:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cc6:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cc8:	6a02      	ldr	r2, [r0, #32]
 8003cca:	f022 0201 	bic.w	r2, r2, #1
 8003cce:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cd0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cd2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cd4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cd8:	680d      	ldr	r5, [r1, #0]
 8003cda:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cdc:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ce0:	688d      	ldr	r5, [r1, #8]
 8003ce2:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ce4:	4d0b      	ldr	r5, [pc, #44]	; (8003d14 <TIM_OC1_SetConfig+0x50>)
 8003ce6:	42a8      	cmp	r0, r5
 8003ce8:	d006      	beq.n	8003cf8 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cea:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cec:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cee:	684a      	ldr	r2, [r1, #4]
 8003cf0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cf2:	6203      	str	r3, [r0, #32]
}
 8003cf4:	bc70      	pop	{r4, r5, r6}
 8003cf6:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8003cf8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003cfc:	68cd      	ldr	r5, [r1, #12]
 8003cfe:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d00:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d04:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d08:	694d      	ldr	r5, [r1, #20]
 8003d0a:	698e      	ldr	r6, [r1, #24]
 8003d0c:	4335      	orrs	r5, r6
 8003d0e:	432c      	orrs	r4, r5
 8003d10:	e7eb      	b.n	8003cea <TIM_OC1_SetConfig+0x26>
 8003d12:	bf00      	nop
 8003d14:	40012c00 	.word	0x40012c00

08003d18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d18:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d1a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d1c:	6a02      	ldr	r2, [r0, #32]
 8003d1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d22:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d24:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d26:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d28:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d2c:	680d      	ldr	r5, [r1, #0]
 8003d2e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d34:	688d      	ldr	r5, [r1, #8]
 8003d36:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d3a:	4d0c      	ldr	r5, [pc, #48]	; (8003d6c <TIM_OC3_SetConfig+0x54>)
 8003d3c:	42a8      	cmp	r0, r5
 8003d3e:	d006      	beq.n	8003d4e <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d40:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d42:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d44:	684a      	ldr	r2, [r1, #4]
 8003d46:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d48:	6203      	str	r3, [r0, #32]
}
 8003d4a:	bc70      	pop	{r4, r5, r6}
 8003d4c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d52:	68cd      	ldr	r5, [r1, #12]
 8003d54:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d5c:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d60:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d62:	698e      	ldr	r6, [r1, #24]
 8003d64:	4335      	orrs	r5, r6
 8003d66:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 8003d6a:	e7e9      	b.n	8003d40 <TIM_OC3_SetConfig+0x28>
 8003d6c:	40012c00 	.word	0x40012c00

08003d70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d70:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d72:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d74:	6a02      	ldr	r2, [r0, #32]
 8003d76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d7a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d7c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d7e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d80:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d84:	680d      	ldr	r5, [r1, #0]
 8003d86:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d8e:	688d      	ldr	r5, [r1, #8]
 8003d90:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d94:	4d07      	ldr	r5, [pc, #28]	; (8003db4 <TIM_OC4_SetConfig+0x44>)
 8003d96:	42a8      	cmp	r0, r5
 8003d98:	d006      	beq.n	8003da8 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d9a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d9c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d9e:	684a      	ldr	r2, [r1, #4]
 8003da0:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003da2:	6203      	str	r3, [r0, #32]
}
 8003da4:	bc30      	pop	{r4, r5}
 8003da6:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003da8:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003dac:	694d      	ldr	r5, [r1, #20]
 8003dae:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8003db2:	e7f2      	b.n	8003d9a <TIM_OC4_SetConfig+0x2a>
 8003db4:	40012c00 	.word	0x40012c00

08003db8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003db8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d127      	bne.n	8003e12 <HAL_TIM_Base_Start_IT+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003dc8:	6802      	ldr	r2, [r0, #0]
 8003dca:	68d3      	ldr	r3, [r2, #12]
 8003dcc:	f043 0301 	orr.w	r3, r3, #1
 8003dd0:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dd2:	6803      	ldr	r3, [r0, #0]
 8003dd4:	4a11      	ldr	r2, [pc, #68]	; (8003e1c <HAL_TIM_Base_Start_IT+0x64>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d010      	beq.n	8003dfc <HAL_TIM_Base_Start_IT+0x44>
 8003dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dde:	d00d      	beq.n	8003dfc <HAL_TIM_Base_Start_IT+0x44>
 8003de0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d009      	beq.n	8003dfc <HAL_TIM_Base_Start_IT+0x44>
 8003de8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d005      	beq.n	8003dfc <HAL_TIM_Base_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	f042 0201 	orr.w	r2, r2, #1
 8003df6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003df8:	2000      	movs	r0, #0
 8003dfa:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dfc:	689a      	ldr	r2, [r3, #8]
 8003dfe:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e02:	2a06      	cmp	r2, #6
 8003e04:	d007      	beq.n	8003e16 <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	f042 0201 	orr.w	r2, r2, #1
 8003e0c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003e0e:	2000      	movs	r0, #0
 8003e10:	4770      	bx	lr
    return HAL_ERROR;
 8003e12:	2001      	movs	r0, #1
 8003e14:	4770      	bx	lr
  return HAL_OK;
 8003e16:	2000      	movs	r0, #0
}
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	40012c00 	.word	0x40012c00

08003e20 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003e20:	6802      	ldr	r2, [r0, #0]
 8003e22:	68d3      	ldr	r3, [r2, #12]
 8003e24:	f023 0301 	bic.w	r3, r3, #1
 8003e28:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 8003e2a:	6803      	ldr	r3, [r0, #0]
 8003e2c:	6a19      	ldr	r1, [r3, #32]
 8003e2e:	f241 1211 	movw	r2, #4369	; 0x1111
 8003e32:	4211      	tst	r1, r2
 8003e34:	d108      	bne.n	8003e48 <HAL_TIM_Base_Stop_IT+0x28>
 8003e36:	6a19      	ldr	r1, [r3, #32]
 8003e38:	f240 4244 	movw	r2, #1092	; 0x444
 8003e3c:	4211      	tst	r1, r2
 8003e3e:	d103      	bne.n	8003e48 <HAL_TIM_Base_Stop_IT+0x28>
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	f022 0201 	bic.w	r2, r2, #1
 8003e46:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8003e4e:	2000      	movs	r0, #0
 8003e50:	4770      	bx	lr

08003e52 <HAL_TIM_PWM_MspInit>:
}
 8003e52:	4770      	bx	lr

08003e54 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8003e54:	4770      	bx	lr

08003e56 <HAL_TIM_IC_CaptureCallback>:
}
 8003e56:	4770      	bx	lr

08003e58 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8003e58:	4770      	bx	lr

08003e5a <HAL_TIM_TriggerCallback>:
}
 8003e5a:	4770      	bx	lr

08003e5c <HAL_TIM_IRQHandler>:
{
 8003e5c:	b510      	push	{r4, lr}
 8003e5e:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e60:	6803      	ldr	r3, [r0, #0]
 8003e62:	691a      	ldr	r2, [r3, #16]
 8003e64:	f012 0f02 	tst.w	r2, #2
 8003e68:	d011      	beq.n	8003e8e <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e6a:	68da      	ldr	r2, [r3, #12]
 8003e6c:	f012 0f02 	tst.w	r2, #2
 8003e70:	d00d      	beq.n	8003e8e <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e72:	f06f 0202 	mvn.w	r2, #2
 8003e76:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e7c:	6803      	ldr	r3, [r0, #0]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	f013 0f03 	tst.w	r3, #3
 8003e84:	d070      	beq.n	8003f68 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8003e86:	f7ff ffe6 	bl	8003e56 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e8e:	6823      	ldr	r3, [r4, #0]
 8003e90:	691a      	ldr	r2, [r3, #16]
 8003e92:	f012 0f04 	tst.w	r2, #4
 8003e96:	d012      	beq.n	8003ebe <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e98:	68da      	ldr	r2, [r3, #12]
 8003e9a:	f012 0f04 	tst.w	r2, #4
 8003e9e:	d00e      	beq.n	8003ebe <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ea0:	f06f 0204 	mvn.w	r2, #4
 8003ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003eaa:	6823      	ldr	r3, [r4, #0]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003eb2:	d05f      	beq.n	8003f74 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8003eb4:	4620      	mov	r0, r4
 8003eb6:	f7ff ffce 	bl	8003e56 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ebe:	6823      	ldr	r3, [r4, #0]
 8003ec0:	691a      	ldr	r2, [r3, #16]
 8003ec2:	f012 0f08 	tst.w	r2, #8
 8003ec6:	d012      	beq.n	8003eee <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ec8:	68da      	ldr	r2, [r3, #12]
 8003eca:	f012 0f08 	tst.w	r2, #8
 8003ece:	d00e      	beq.n	8003eee <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ed0:	f06f 0208 	mvn.w	r2, #8
 8003ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ed6:	2304      	movs	r3, #4
 8003ed8:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003eda:	6823      	ldr	r3, [r4, #0]
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	f013 0f03 	tst.w	r3, #3
 8003ee2:	d04e      	beq.n	8003f82 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8003ee4:	4620      	mov	r0, r4
 8003ee6:	f7ff ffb6 	bl	8003e56 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eea:	2300      	movs	r3, #0
 8003eec:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003eee:	6823      	ldr	r3, [r4, #0]
 8003ef0:	691a      	ldr	r2, [r3, #16]
 8003ef2:	f012 0f10 	tst.w	r2, #16
 8003ef6:	d012      	beq.n	8003f1e <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ef8:	68da      	ldr	r2, [r3, #12]
 8003efa:	f012 0f10 	tst.w	r2, #16
 8003efe:	d00e      	beq.n	8003f1e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f00:	f06f 0210 	mvn.w	r2, #16
 8003f04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f06:	2308      	movs	r3, #8
 8003f08:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f0a:	6823      	ldr	r3, [r4, #0]
 8003f0c:	69db      	ldr	r3, [r3, #28]
 8003f0e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003f12:	d03d      	beq.n	8003f90 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8003f14:	4620      	mov	r0, r4
 8003f16:	f7ff ff9e 	bl	8003e56 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f1e:	6823      	ldr	r3, [r4, #0]
 8003f20:	691a      	ldr	r2, [r3, #16]
 8003f22:	f012 0f01 	tst.w	r2, #1
 8003f26:	d003      	beq.n	8003f30 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f28:	68da      	ldr	r2, [r3, #12]
 8003f2a:	f012 0f01 	tst.w	r2, #1
 8003f2e:	d136      	bne.n	8003f9e <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f30:	6823      	ldr	r3, [r4, #0]
 8003f32:	691a      	ldr	r2, [r3, #16]
 8003f34:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003f38:	d003      	beq.n	8003f42 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f3a:	68da      	ldr	r2, [r3, #12]
 8003f3c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003f40:	d134      	bne.n	8003fac <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f42:	6823      	ldr	r3, [r4, #0]
 8003f44:	691a      	ldr	r2, [r3, #16]
 8003f46:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003f4a:	d003      	beq.n	8003f54 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f4c:	68da      	ldr	r2, [r3, #12]
 8003f4e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003f52:	d132      	bne.n	8003fba <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f54:	6823      	ldr	r3, [r4, #0]
 8003f56:	691a      	ldr	r2, [r3, #16]
 8003f58:	f012 0f20 	tst.w	r2, #32
 8003f5c:	d003      	beq.n	8003f66 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f5e:	68da      	ldr	r2, [r3, #12]
 8003f60:	f012 0f20 	tst.w	r2, #32
 8003f64:	d130      	bne.n	8003fc8 <HAL_TIM_IRQHandler+0x16c>
}
 8003f66:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f68:	f7ff ff74 	bl	8003e54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f6c:	4620      	mov	r0, r4
 8003f6e:	f7ff ff73 	bl	8003e58 <HAL_TIM_PWM_PulseFinishedCallback>
 8003f72:	e78a      	b.n	8003e8a <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f74:	4620      	mov	r0, r4
 8003f76:	f7ff ff6d 	bl	8003e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f7a:	4620      	mov	r0, r4
 8003f7c:	f7ff ff6c 	bl	8003e58 <HAL_TIM_PWM_PulseFinishedCallback>
 8003f80:	e79b      	b.n	8003eba <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f82:	4620      	mov	r0, r4
 8003f84:	f7ff ff66 	bl	8003e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f88:	4620      	mov	r0, r4
 8003f8a:	f7ff ff65 	bl	8003e58 <HAL_TIM_PWM_PulseFinishedCallback>
 8003f8e:	e7ac      	b.n	8003eea <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f90:	4620      	mov	r0, r4
 8003f92:	f7ff ff5f 	bl	8003e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f96:	4620      	mov	r0, r4
 8003f98:	f7ff ff5e 	bl	8003e58 <HAL_TIM_PWM_PulseFinishedCallback>
 8003f9c:	e7bd      	b.n	8003f1a <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f9e:	f06f 0201 	mvn.w	r2, #1
 8003fa2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fa4:	4620      	mov	r0, r4
 8003fa6:	f7fd fe45 	bl	8001c34 <HAL_TIM_PeriodElapsedCallback>
 8003faa:	e7c1      	b.n	8003f30 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fb0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003fb2:	4620      	mov	r0, r4
 8003fb4:	f000 fafd 	bl	80045b2 <HAL_TIMEx_BreakCallback>
 8003fb8:	e7c3      	b.n	8003f42 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003fbe:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003fc0:	4620      	mov	r0, r4
 8003fc2:	f7ff ff4a 	bl	8003e5a <HAL_TIM_TriggerCallback>
 8003fc6:	e7c5      	b.n	8003f54 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fc8:	f06f 0220 	mvn.w	r2, #32
 8003fcc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003fce:	4620      	mov	r0, r4
 8003fd0:	f000 faee 	bl	80045b0 <HAL_TIMEx_CommutCallback>
}
 8003fd4:	e7c7      	b.n	8003f66 <HAL_TIM_IRQHandler+0x10a>
	...

08003fd8 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003fd8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fda:	4a25      	ldr	r2, [pc, #148]	; (8004070 <TIM_Base_SetConfig+0x98>)
 8003fdc:	4290      	cmp	r0, r2
 8003fde:	d014      	beq.n	800400a <TIM_Base_SetConfig+0x32>
 8003fe0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003fe4:	d02b      	beq.n	800403e <TIM_Base_SetConfig+0x66>
 8003fe6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003fea:	4290      	cmp	r0, r2
 8003fec:	d022      	beq.n	8004034 <TIM_Base_SetConfig+0x5c>
 8003fee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003ff2:	4290      	cmp	r0, r2
 8003ff4:	d037      	beq.n	8004066 <TIM_Base_SetConfig+0x8e>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ff6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ffa:	694a      	ldr	r2, [r1, #20]
 8003ffc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003ffe:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004000:	688b      	ldr	r3, [r1, #8]
 8004002:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004004:	680b      	ldr	r3, [r1, #0]
 8004006:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004008:	e02a      	b.n	8004060 <TIM_Base_SetConfig+0x88>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800400a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800400e:	684a      	ldr	r2, [r1, #4]
 8004010:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8004012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004016:	68ca      	ldr	r2, [r1, #12]
 8004018:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800401a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800401e:	694a      	ldr	r2, [r1, #20]
 8004020:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004022:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004024:	688b      	ldr	r3, [r1, #8]
 8004026:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004028:	680b      	ldr	r3, [r1, #0]
 800402a:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800402c:	690a      	ldr	r2, [r1, #16]
 800402e:	4b10      	ldr	r3, [pc, #64]	; (8004070 <TIM_Base_SetConfig+0x98>)
 8004030:	631a      	str	r2, [r3, #48]	; 0x30
 8004032:	e015      	b.n	8004060 <TIM_Base_SetConfig+0x88>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004038:	684a      	ldr	r2, [r1, #4]
 800403a:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800403c:	e003      	b.n	8004046 <TIM_Base_SetConfig+0x6e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800403e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004042:	684a      	ldr	r2, [r1, #4]
 8004044:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8004046:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800404a:	68ca      	ldr	r2, [r1, #12]
 800404c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800404e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004052:	694a      	ldr	r2, [r1, #20]
 8004054:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004056:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004058:	688b      	ldr	r3, [r1, #8]
 800405a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800405c:	680b      	ldr	r3, [r1, #0]
 800405e:	6283      	str	r3, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8004060:	2301      	movs	r3, #1
 8004062:	6143      	str	r3, [r0, #20]
}
 8004064:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800406a:	684a      	ldr	r2, [r1, #4]
 800406c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800406e:	e7ea      	b.n	8004046 <TIM_Base_SetConfig+0x6e>
 8004070:	40012c00 	.word	0x40012c00

08004074 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004074:	b340      	cbz	r0, 80040c8 <HAL_TIM_Base_Init+0x54>
{
 8004076:	b510      	push	{r4, lr}
 8004078:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800407a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800407e:	b1f3      	cbz	r3, 80040be <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004080:	2302      	movs	r3, #2
 8004082:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004086:	4621      	mov	r1, r4
 8004088:	f851 0b04 	ldr.w	r0, [r1], #4
 800408c:	f7ff ffa4 	bl	8003fd8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004090:	2301      	movs	r3, #1
 8004092:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004096:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800409a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800409e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80040a2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040ae:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80040b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80040b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80040ba:	2000      	movs	r0, #0
}
 80040bc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80040be:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80040c2:	f7fe f98d 	bl	80023e0 <HAL_TIM_Base_MspInit>
 80040c6:	e7db      	b.n	8004080 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80040c8:	2001      	movs	r0, #1
}
 80040ca:	4770      	bx	lr

080040cc <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80040cc:	b340      	cbz	r0, 8004120 <HAL_TIM_PWM_Init+0x54>
{
 80040ce:	b510      	push	{r4, lr}
 80040d0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80040d2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80040d6:	b1f3      	cbz	r3, 8004116 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80040d8:	2302      	movs	r3, #2
 80040da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040de:	4621      	mov	r1, r4
 80040e0:	f851 0b04 	ldr.w	r0, [r1], #4
 80040e4:	f7ff ff78 	bl	8003fd8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040e8:	2301      	movs	r3, #1
 80040ea:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ee:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80040f2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80040f6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80040fa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004102:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004106:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800410a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800410e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004112:	2000      	movs	r0, #0
}
 8004114:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004116:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800411a:	f7ff fe9a 	bl	8003e52 <HAL_TIM_PWM_MspInit>
 800411e:	e7db      	b.n	80040d8 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8004120:	2001      	movs	r0, #1
}
 8004122:	4770      	bx	lr

08004124 <TIM_OC2_SetConfig>:
{
 8004124:	b470      	push	{r4, r5, r6}
  tmpccer = TIMx->CCER;
 8004126:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004128:	6a02      	ldr	r2, [r0, #32]
 800412a:	f022 0210 	bic.w	r2, r2, #16
 800412e:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004130:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004132:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004134:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004138:	680d      	ldr	r5, [r1, #0]
 800413a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800413e:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004142:	688d      	ldr	r5, [r1, #8]
 8004144:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004148:	4d0c      	ldr	r5, [pc, #48]	; (800417c <TIM_OC2_SetConfig+0x58>)
 800414a:	42a8      	cmp	r0, r5
 800414c:	d006      	beq.n	800415c <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 800414e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004150:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004152:	684a      	ldr	r2, [r1, #4]
 8004154:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004156:	6203      	str	r3, [r0, #32]
}
 8004158:	bc70      	pop	{r4, r5, r6}
 800415a:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 800415c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004160:	68cd      	ldr	r5, [r1, #12]
 8004162:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8004166:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800416a:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800416e:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004170:	698e      	ldr	r6, [r1, #24]
 8004172:	4335      	orrs	r5, r6
 8004174:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8004178:	e7e9      	b.n	800414e <TIM_OC2_SetConfig+0x2a>
 800417a:	bf00      	nop
 800417c:	40012c00 	.word	0x40012c00

08004180 <HAL_TIM_PWM_ConfigChannel>:
{
 8004180:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004182:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004186:	2b01      	cmp	r3, #1
 8004188:	d066      	beq.n	8004258 <HAL_TIM_PWM_ConfigChannel+0xd8>
 800418a:	4604      	mov	r4, r0
 800418c:	460d      	mov	r5, r1
 800418e:	2301      	movs	r3, #1
 8004190:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8004194:	2a0c      	cmp	r2, #12
 8004196:	d85a      	bhi.n	800424e <HAL_TIM_PWM_ConfigChannel+0xce>
 8004198:	e8df f002 	tbb	[pc, r2]
 800419c:	59595907 	.word	0x59595907
 80041a0:	5959591b 	.word	0x5959591b
 80041a4:	59595930 	.word	0x59595930
 80041a8:	44          	.byte	0x44
 80041a9:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041aa:	6800      	ldr	r0, [r0, #0]
 80041ac:	f7ff fd8a 	bl	8003cc4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041b0:	6822      	ldr	r2, [r4, #0]
 80041b2:	6993      	ldr	r3, [r2, #24]
 80041b4:	f043 0308 	orr.w	r3, r3, #8
 80041b8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041ba:	6822      	ldr	r2, [r4, #0]
 80041bc:	6993      	ldr	r3, [r2, #24]
 80041be:	f023 0304 	bic.w	r3, r3, #4
 80041c2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041c4:	6822      	ldr	r2, [r4, #0]
 80041c6:	6993      	ldr	r3, [r2, #24]
 80041c8:	6929      	ldr	r1, [r5, #16]
 80041ca:	430b      	orrs	r3, r1
 80041cc:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80041ce:	2000      	movs	r0, #0
      break;
 80041d0:	e03e      	b.n	8004250 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041d2:	6800      	ldr	r0, [r0, #0]
 80041d4:	f7ff ffa6 	bl	8004124 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041d8:	6822      	ldr	r2, [r4, #0]
 80041da:	6993      	ldr	r3, [r2, #24]
 80041dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80041e0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041e2:	6822      	ldr	r2, [r4, #0]
 80041e4:	6993      	ldr	r3, [r2, #24]
 80041e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041ea:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041ec:	6822      	ldr	r2, [r4, #0]
 80041ee:	6993      	ldr	r3, [r2, #24]
 80041f0:	6929      	ldr	r1, [r5, #16]
 80041f2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80041f6:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80041f8:	2000      	movs	r0, #0
      break;
 80041fa:	e029      	b.n	8004250 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041fc:	6800      	ldr	r0, [r0, #0]
 80041fe:	f7ff fd8b 	bl	8003d18 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004202:	6822      	ldr	r2, [r4, #0]
 8004204:	69d3      	ldr	r3, [r2, #28]
 8004206:	f043 0308 	orr.w	r3, r3, #8
 800420a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800420c:	6822      	ldr	r2, [r4, #0]
 800420e:	69d3      	ldr	r3, [r2, #28]
 8004210:	f023 0304 	bic.w	r3, r3, #4
 8004214:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004216:	6822      	ldr	r2, [r4, #0]
 8004218:	69d3      	ldr	r3, [r2, #28]
 800421a:	6929      	ldr	r1, [r5, #16]
 800421c:	430b      	orrs	r3, r1
 800421e:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004220:	2000      	movs	r0, #0
      break;
 8004222:	e015      	b.n	8004250 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004224:	6800      	ldr	r0, [r0, #0]
 8004226:	f7ff fda3 	bl	8003d70 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800422a:	6822      	ldr	r2, [r4, #0]
 800422c:	69d3      	ldr	r3, [r2, #28]
 800422e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004232:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004234:	6822      	ldr	r2, [r4, #0]
 8004236:	69d3      	ldr	r3, [r2, #28]
 8004238:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800423c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800423e:	6822      	ldr	r2, [r4, #0]
 8004240:	69d3      	ldr	r3, [r2, #28]
 8004242:	6929      	ldr	r1, [r5, #16]
 8004244:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004248:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800424a:	2000      	movs	r0, #0
      break;
 800424c:	e000      	b.n	8004250 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 800424e:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8004250:	2300      	movs	r3, #0
 8004252:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004256:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8004258:	2002      	movs	r0, #2
 800425a:	e7fc      	b.n	8004256 <HAL_TIM_PWM_ConfigChannel+0xd6>

0800425c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800425c:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800425e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004260:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004264:	430a      	orrs	r2, r1
 8004266:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800426a:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800426e:	6082      	str	r2, [r0, #8]
}
 8004270:	bc10      	pop	{r4}
 8004272:	4770      	bx	lr

08004274 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004274:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004278:	2b01      	cmp	r3, #1
 800427a:	f000 80ae 	beq.w	80043da <HAL_TIM_ConfigClockSource+0x166>
{
 800427e:	b570      	push	{r4, r5, r6, lr}
 8004280:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004282:	2301      	movs	r3, #1
 8004284:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004288:	2302      	movs	r3, #2
 800428a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800428e:	6802      	ldr	r2, [r0, #0]
 8004290:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004292:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004296:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800429a:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800429c:	680b      	ldr	r3, [r1, #0]
 800429e:	2b60      	cmp	r3, #96	; 0x60
 80042a0:	d060      	beq.n	8004364 <HAL_TIM_ConfigClockSource+0xf0>
 80042a2:	d83d      	bhi.n	8004320 <HAL_TIM_ConfigClockSource+0xac>
 80042a4:	2b40      	cmp	r3, #64	; 0x40
 80042a6:	d079      	beq.n	800439c <HAL_TIM_ConfigClockSource+0x128>
 80042a8:	d91c      	bls.n	80042e4 <HAL_TIM_ConfigClockSource+0x70>
 80042aa:	2b50      	cmp	r3, #80	; 0x50
 80042ac:	d136      	bne.n	800431c <HAL_TIM_ConfigClockSource+0xa8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ae:	6803      	ldr	r3, [r0, #0]
 80042b0:	6848      	ldr	r0, [r1, #4]
 80042b2:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80042b4:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042b6:	6a1a      	ldr	r2, [r3, #32]
 80042b8:	f022 0201 	bic.w	r2, r2, #1
 80042bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042be:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042c0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042c4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042c8:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80042cc:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80042ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042d0:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042d2:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80042d4:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80042d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042da:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80042de:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80042e0:	2000      	movs	r0, #0
}
 80042e2:	e012      	b.n	800430a <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 80042e4:	2b20      	cmp	r3, #32
 80042e6:	d002      	beq.n	80042ee <HAL_TIM_ConfigClockSource+0x7a>
 80042e8:	d90b      	bls.n	8004302 <HAL_TIM_ConfigClockSource+0x8e>
 80042ea:	2b30      	cmp	r3, #48	; 0x30
 80042ec:	d114      	bne.n	8004318 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042ee:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80042f0:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80042f2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042f6:	4313      	orrs	r3, r2
 80042f8:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 80042fc:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80042fe:	2000      	movs	r0, #0
}
 8004300:	e003      	b.n	800430a <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8004302:	f033 0210 	bics.w	r2, r3, #16
 8004306:	d0f2      	beq.n	80042ee <HAL_TIM_ConfigClockSource+0x7a>
 8004308:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 800430a:	2301      	movs	r3, #1
 800430c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004310:	2300      	movs	r3, #0
 8004312:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004316:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8004318:	2001      	movs	r0, #1
 800431a:	e7f6      	b.n	800430a <HAL_TIM_ConfigClockSource+0x96>
 800431c:	2001      	movs	r0, #1
 800431e:	e7f4      	b.n	800430a <HAL_TIM_ConfigClockSource+0x96>
 8004320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004324:	d055      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0x15e>
 8004326:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800432a:	d10c      	bne.n	8004346 <HAL_TIM_ConfigClockSource+0xd2>
      TIM_ETR_SetConfig(htim->Instance,
 800432c:	68cb      	ldr	r3, [r1, #12]
 800432e:	684a      	ldr	r2, [r1, #4]
 8004330:	6889      	ldr	r1, [r1, #8]
 8004332:	6800      	ldr	r0, [r0, #0]
 8004334:	f7ff ff92 	bl	800425c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004338:	6822      	ldr	r2, [r4, #0]
 800433a:	6893      	ldr	r3, [r2, #8]
 800433c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004340:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004342:	2000      	movs	r0, #0
      break;
 8004344:	e7e1      	b.n	800430a <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8004346:	2b70      	cmp	r3, #112	; 0x70
 8004348:	d145      	bne.n	80043d6 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ETR_SetConfig(htim->Instance,
 800434a:	68cb      	ldr	r3, [r1, #12]
 800434c:	684a      	ldr	r2, [r1, #4]
 800434e:	6889      	ldr	r1, [r1, #8]
 8004350:	6800      	ldr	r0, [r0, #0]
 8004352:	f7ff ff83 	bl	800425c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004356:	6822      	ldr	r2, [r4, #0]
 8004358:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800435a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800435e:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004360:	2000      	movs	r0, #0
      break;
 8004362:	e7d2      	b.n	800430a <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004364:	6803      	ldr	r3, [r0, #0]
 8004366:	684d      	ldr	r5, [r1, #4]
 8004368:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800436a:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800436c:	6a18      	ldr	r0, [r3, #32]
 800436e:	f020 0010 	bic.w	r0, r0, #16
 8004372:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004374:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004376:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800437a:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800437e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004382:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8004386:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8004388:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800438a:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800438c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800438e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004392:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8004396:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004398:	2000      	movs	r0, #0
}
 800439a:	e7b6      	b.n	800430a <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800439c:	6803      	ldr	r3, [r0, #0]
 800439e:	6848      	ldr	r0, [r1, #4]
 80043a0:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80043a2:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043a4:	6a1a      	ldr	r2, [r3, #32]
 80043a6:	f022 0201 	bic.w	r2, r2, #1
 80043aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043ac:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043ae:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043b2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043b6:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80043ba:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80043bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043be:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043c0:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80043c2:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80043c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043c8:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80043cc:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80043ce:	2000      	movs	r0, #0
}
 80043d0:	e79b      	b.n	800430a <HAL_TIM_ConfigClockSource+0x96>
  HAL_StatusTypeDef status = HAL_OK;
 80043d2:	2000      	movs	r0, #0
 80043d4:	e799      	b.n	800430a <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 80043d6:	2001      	movs	r0, #1
 80043d8:	e797      	b.n	800430a <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 80043da:	2002      	movs	r0, #2
}
 80043dc:	4770      	bx	lr

080043de <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043de:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043e2:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043e4:	f04f 0c01 	mov.w	ip, #1
 80043e8:	fa0c fc01 	lsl.w	ip, ip, r1
  TIMx->CCER &= ~tmp;
 80043ec:	ea23 030c 	bic.w	r3, r3, ip
 80043f0:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043f2:	6a03      	ldr	r3, [r0, #32]
 80043f4:	408a      	lsls	r2, r1
 80043f6:	431a      	orrs	r2, r3
 80043f8:	6202      	str	r2, [r0, #32]
}
 80043fa:	4770      	bx	lr

080043fc <HAL_TIM_PWM_Start>:
{
 80043fc:	b510      	push	{r4, lr}
 80043fe:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004400:	4608      	mov	r0, r1
 8004402:	bb01      	cbnz	r1, 8004446 <HAL_TIM_PWM_Start+0x4a>
 8004404:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b01      	cmp	r3, #1
 800440c:	d152      	bne.n	80044b4 <HAL_TIM_PWM_Start+0xb8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800440e:	2302      	movs	r3, #2
 8004410:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004414:	2201      	movs	r2, #1
 8004416:	4601      	mov	r1, r0
 8004418:	6820      	ldr	r0, [r4, #0]
 800441a:	f7ff ffe0 	bl	80043de <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800441e:	6823      	ldr	r3, [r4, #0]
 8004420:	4a26      	ldr	r2, [pc, #152]	; (80044bc <HAL_TIM_PWM_Start+0xc0>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d034      	beq.n	8004490 <HAL_TIM_PWM_Start+0x94>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800442a:	d038      	beq.n	800449e <HAL_TIM_PWM_Start+0xa2>
 800442c:	4a24      	ldr	r2, [pc, #144]	; (80044c0 <HAL_TIM_PWM_Start+0xc4>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d035      	beq.n	800449e <HAL_TIM_PWM_Start+0xa2>
 8004432:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004436:	4293      	cmp	r3, r2
 8004438:	d031      	beq.n	800449e <HAL_TIM_PWM_Start+0xa2>
    __HAL_TIM_ENABLE(htim);
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	f042 0201 	orr.w	r2, r2, #1
 8004440:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004442:	2000      	movs	r0, #0
 8004444:	e035      	b.n	80044b2 <HAL_TIM_PWM_Start+0xb6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004446:	2904      	cmp	r1, #4
 8004448:	d00c      	beq.n	8004464 <HAL_TIM_PWM_Start+0x68>
 800444a:	2908      	cmp	r1, #8
 800444c:	bf0c      	ite	eq
 800444e:	f894 3040 	ldrbeq.w	r3, [r4, #64]	; 0x40
 8004452:	f894 3041 	ldrbne.w	r3, [r4, #65]	; 0x41
 8004456:	b2db      	uxtb	r3, r3
 8004458:	3b01      	subs	r3, #1
 800445a:	bf18      	it	ne
 800445c:	2301      	movne	r3, #1
 800445e:	b143      	cbz	r3, 8004472 <HAL_TIM_PWM_Start+0x76>
    return HAL_ERROR;
 8004460:	2001      	movs	r0, #1
 8004462:	e026      	b.n	80044b2 <HAL_TIM_PWM_Start+0xb6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004464:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8004468:	b2db      	uxtb	r3, r3
 800446a:	3b01      	subs	r3, #1
 800446c:	bf18      	it	ne
 800446e:	2301      	movne	r3, #1
 8004470:	e7f5      	b.n	800445e <HAL_TIM_PWM_Start+0x62>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004472:	2804      	cmp	r0, #4
 8004474:	d008      	beq.n	8004488 <HAL_TIM_PWM_Start+0x8c>
 8004476:	2808      	cmp	r0, #8
 8004478:	f04f 0302 	mov.w	r3, #2
 800447c:	bf0c      	ite	eq
 800447e:	f884 3040 	strbeq.w	r3, [r4, #64]	; 0x40
 8004482:	f884 3041 	strbne.w	r3, [r4, #65]	; 0x41
 8004486:	e7c5      	b.n	8004414 <HAL_TIM_PWM_Start+0x18>
 8004488:	2302      	movs	r3, #2
 800448a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800448e:	e7c1      	b.n	8004414 <HAL_TIM_PWM_Start+0x18>
    __HAL_TIM_MOE_ENABLE(htim);
 8004490:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8004492:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004496:	6453      	str	r3, [r2, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004498:	6823      	ldr	r3, [r4, #0]
 800449a:	4293      	cmp	r3, r2
 800449c:	d1c3      	bne.n	8004426 <HAL_TIM_PWM_Start+0x2a>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800449e:	689a      	ldr	r2, [r3, #8]
 80044a0:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a4:	2a06      	cmp	r2, #6
 80044a6:	d007      	beq.n	80044b8 <HAL_TIM_PWM_Start+0xbc>
      __HAL_TIM_ENABLE(htim);
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	f042 0201 	orr.w	r2, r2, #1
 80044ae:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80044b0:	2000      	movs	r0, #0
}
 80044b2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80044b4:	2001      	movs	r0, #1
 80044b6:	e7fc      	b.n	80044b2 <HAL_TIM_PWM_Start+0xb6>
  return HAL_OK;
 80044b8:	2000      	movs	r0, #0
 80044ba:	e7fa      	b.n	80044b2 <HAL_TIM_PWM_Start+0xb6>
 80044bc:	40012c00 	.word	0x40012c00
 80044c0:	40000400 	.word	0x40000400

080044c4 <HAL_TIM_PWM_Stop>:
{
 80044c4:	b538      	push	{r3, r4, r5, lr}
 80044c6:	4604      	mov	r4, r0
 80044c8:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80044ca:	2200      	movs	r2, #0
 80044cc:	6800      	ldr	r0, [r0, #0]
 80044ce:	f7ff ff86 	bl	80043de <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044d2:	6822      	ldr	r2, [r4, #0]
 80044d4:	4b1b      	ldr	r3, [pc, #108]	; (8004544 <HAL_TIM_PWM_Stop+0x80>)
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d014      	beq.n	8004504 <HAL_TIM_PWM_Stop+0x40>
  __HAL_TIM_DISABLE(htim);
 80044da:	6823      	ldr	r3, [r4, #0]
 80044dc:	6a19      	ldr	r1, [r3, #32]
 80044de:	f241 1211 	movw	r2, #4369	; 0x1111
 80044e2:	4211      	tst	r1, r2
 80044e4:	d108      	bne.n	80044f8 <HAL_TIM_PWM_Stop+0x34>
 80044e6:	6a19      	ldr	r1, [r3, #32]
 80044e8:	f240 4244 	movw	r2, #1092	; 0x444
 80044ec:	4211      	tst	r1, r2
 80044ee:	d103      	bne.n	80044f8 <HAL_TIM_PWM_Stop+0x34>
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	f022 0201 	bic.w	r2, r2, #1
 80044f6:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80044f8:	b9ad      	cbnz	r5, 8004526 <HAL_TIM_PWM_Stop+0x62>
 80044fa:	2301      	movs	r3, #1
 80044fc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8004500:	2000      	movs	r0, #0
 8004502:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 8004504:	6a1a      	ldr	r2, [r3, #32]
 8004506:	f241 1311 	movw	r3, #4369	; 0x1111
 800450a:	421a      	tst	r2, r3
 800450c:	d1e5      	bne.n	80044da <HAL_TIM_PWM_Stop+0x16>
 800450e:	4b0d      	ldr	r3, [pc, #52]	; (8004544 <HAL_TIM_PWM_Stop+0x80>)
 8004510:	6a1a      	ldr	r2, [r3, #32]
 8004512:	f240 4344 	movw	r3, #1092	; 0x444
 8004516:	421a      	tst	r2, r3
 8004518:	d1df      	bne.n	80044da <HAL_TIM_PWM_Stop+0x16>
 800451a:	4a0a      	ldr	r2, [pc, #40]	; (8004544 <HAL_TIM_PWM_Stop+0x80>)
 800451c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800451e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004522:	6453      	str	r3, [r2, #68]	; 0x44
 8004524:	e7d9      	b.n	80044da <HAL_TIM_PWM_Stop+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004526:	2d04      	cmp	r5, #4
 8004528:	d008      	beq.n	800453c <HAL_TIM_PWM_Stop+0x78>
 800452a:	2d08      	cmp	r5, #8
 800452c:	f04f 0301 	mov.w	r3, #1
 8004530:	bf0c      	ite	eq
 8004532:	f884 3040 	strbeq.w	r3, [r4, #64]	; 0x40
 8004536:	f884 3041 	strbne.w	r3, [r4, #65]	; 0x41
 800453a:	e7e1      	b.n	8004500 <HAL_TIM_PWM_Stop+0x3c>
 800453c:	2301      	movs	r3, #1
 800453e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004542:	e7dd      	b.n	8004500 <HAL_TIM_PWM_Stop+0x3c>
 8004544:	40012c00 	.word	0x40012c00

08004548 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004548:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800454c:	2b01      	cmp	r3, #1
 800454e:	d02b      	beq.n	80045a8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 8004550:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8004552:	2301      	movs	r3, #1
 8004554:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004558:	2302      	movs	r3, #2
 800455a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800455e:	6804      	ldr	r4, [r0, #0]
 8004560:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004562:	68a2      	ldr	r2, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004568:	680d      	ldr	r5, [r1, #0]
 800456a:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800456c:	6063      	str	r3, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800456e:	6803      	ldr	r3, [r0, #0]
 8004570:	4c0e      	ldr	r4, [pc, #56]	; (80045ac <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8004572:	42a3      	cmp	r3, r4
 8004574:	d00a      	beq.n	800458c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8004576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800457a:	d007      	beq.n	800458c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 800457c:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8004580:	42a3      	cmp	r3, r4
 8004582:	d003      	beq.n	800458c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8004584:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004588:	42a3      	cmp	r3, r4
 800458a:	d104      	bne.n	8004596 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800458c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004590:	6849      	ldr	r1, [r1, #4]
 8004592:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004594:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004596:	2301      	movs	r3, #1
 8004598:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800459c:	2300      	movs	r3, #0
 800459e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80045a2:	4618      	mov	r0, r3
}
 80045a4:	bc30      	pop	{r4, r5}
 80045a6:	4770      	bx	lr
  __HAL_LOCK(htim);
 80045a8:	2002      	movs	r0, #2
}
 80045aa:	4770      	bx	lr
 80045ac:	40012c00 	.word	0x40012c00

080045b0 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045b0:	4770      	bx	lr

080045b2 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045b2:	4770      	bx	lr

080045b4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045b4:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b6:	f102 030c 	add.w	r3, r2, #12
 80045ba:	e853 3f00 	ldrex	r3, [r3]
 80045be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c2:	320c      	adds	r2, #12
 80045c4:	e842 3100 	strex	r1, r3, [r2]
 80045c8:	2900      	cmp	r1, #0
 80045ca:	d1f3      	bne.n	80045b4 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045cc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ce:	f102 0314 	add.w	r3, r2, #20
 80045d2:	e853 3f00 	ldrex	r3, [r3]
 80045d6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045da:	3214      	adds	r2, #20
 80045dc:	e842 3100 	strex	r1, r3, [r2]
 80045e0:	2900      	cmp	r1, #0
 80045e2:	d1f3      	bne.n	80045cc <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045e4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d005      	beq.n	80045f6 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045ea:	2320      	movs	r3, #32
 80045ec:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045f0:	2300      	movs	r3, #0
 80045f2:	6303      	str	r3, [r0, #48]	; 0x30
}
 80045f4:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045f6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f8:	f102 030c 	add.w	r3, r2, #12
 80045fc:	e853 3f00 	ldrex	r3, [r3]
 8004600:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004604:	320c      	adds	r2, #12
 8004606:	e842 3100 	strex	r1, r3, [r2]
 800460a:	2900      	cmp	r1, #0
 800460c:	d1f3      	bne.n	80045f6 <UART_EndRxTransfer+0x42>
 800460e:	e7ec      	b.n	80045ea <UART_EndRxTransfer+0x36>

08004610 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004610:	b510      	push	{r4, lr}
 8004612:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004614:	6802      	ldr	r2, [r0, #0]
 8004616:	6913      	ldr	r3, [r2, #16]
 8004618:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800461c:	68c1      	ldr	r1, [r0, #12]
 800461e:	430b      	orrs	r3, r1
 8004620:	6113      	str	r3, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
  MODIFY_REG(huart->Instance->CR1,
 8004622:	6801      	ldr	r1, [r0, #0]
 8004624:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004626:	6883      	ldr	r3, [r0, #8]
 8004628:	6900      	ldr	r0, [r0, #16]
 800462a:	4303      	orrs	r3, r0
 800462c:	6960      	ldr	r0, [r4, #20]
 800462e:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8004630:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8004634:	f022 020c 	bic.w	r2, r2, #12
 8004638:	4313      	orrs	r3, r2
 800463a:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800463c:	6822      	ldr	r2, [r4, #0]
 800463e:	6953      	ldr	r3, [r2, #20]
 8004640:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004644:	69a1      	ldr	r1, [r4, #24]
 8004646:	430b      	orrs	r3, r1
 8004648:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 800464a:	6822      	ldr	r2, [r4, #0]
 800464c:	4b11      	ldr	r3, [pc, #68]	; (8004694 <UART_SetConfig+0x84>)
 800464e:	429a      	cmp	r2, r3
 8004650:	d01b      	beq.n	800468a <UART_SetConfig+0x7a>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004652:	f7ff fa6b 	bl	8003b2c <HAL_RCC_GetPCLK1Freq>
 8004656:	4603      	mov	r3, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004658:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800465c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004660:	6862      	ldr	r2, [r4, #4]
 8004662:	0092      	lsls	r2, r2, #2
 8004664:	fbb3 f3f2 	udiv	r3, r3, r2
 8004668:	6820      	ldr	r0, [r4, #0]
 800466a:	490b      	ldr	r1, [pc, #44]	; (8004698 <UART_SetConfig+0x88>)
 800466c:	fba1 4203 	umull	r4, r2, r1, r3
 8004670:	0952      	lsrs	r2, r2, #5
 8004672:	2464      	movs	r4, #100	; 0x64
 8004674:	fb04 3312 	mls	r3, r4, r2, r3
 8004678:	011b      	lsls	r3, r3, #4
 800467a:	3332      	adds	r3, #50	; 0x32
 800467c:	fba1 1303 	umull	r1, r3, r1, r3
 8004680:	0112      	lsls	r2, r2, #4
 8004682:	eb02 1353 	add.w	r3, r2, r3, lsr #5
 8004686:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8004688:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 800468a:	f7ff fa5f 	bl	8003b4c <HAL_RCC_GetPCLK2Freq>
 800468e:	4603      	mov	r3, r0
 8004690:	e7e2      	b.n	8004658 <UART_SetConfig+0x48>
 8004692:	bf00      	nop
 8004694:	40013800 	.word	0x40013800
 8004698:	51eb851f 	.word	0x51eb851f

0800469c <HAL_UART_Init>:
  if (huart == NULL)
 800469c:	b360      	cbz	r0, 80046f8 <HAL_UART_Init+0x5c>
{
 800469e:	b510      	push	{r4, lr}
 80046a0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80046a2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80046a6:	b313      	cbz	r3, 80046ee <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 80046a8:	2324      	movs	r3, #36	; 0x24
 80046aa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 80046ae:	6822      	ldr	r2, [r4, #0]
 80046b0:	68d3      	ldr	r3, [r2, #12]
 80046b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046b6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80046b8:	4620      	mov	r0, r4
 80046ba:	f7ff ffa9 	bl	8004610 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046be:	6822      	ldr	r2, [r4, #0]
 80046c0:	6913      	ldr	r3, [r2, #16]
 80046c2:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80046c6:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046c8:	6822      	ldr	r2, [r4, #0]
 80046ca:	6953      	ldr	r3, [r2, #20]
 80046cc:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80046d0:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80046d2:	6822      	ldr	r2, [r4, #0]
 80046d4:	68d3      	ldr	r3, [r2, #12]
 80046d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80046da:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046dc:	2000      	movs	r0, #0
 80046de:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80046e0:	2320      	movs	r3, #32
 80046e2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80046e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046ea:	6360      	str	r0, [r4, #52]	; 0x34
}
 80046ec:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80046ee:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 80046f2:	f7fd fee5 	bl	80024c0 <HAL_UART_MspInit>
 80046f6:	e7d7      	b.n	80046a8 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80046f8:	2001      	movs	r0, #1
}
 80046fa:	4770      	bx	lr

080046fc <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 80046fc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b20      	cmp	r3, #32
 8004704:	d110      	bne.n	8004728 <HAL_UART_Transmit_IT+0x2c>
    if ((pData == NULL) || (Size == 0U))
 8004706:	b189      	cbz	r1, 800472c <HAL_UART_Transmit_IT+0x30>
 8004708:	b192      	cbz	r2, 8004730 <HAL_UART_Transmit_IT+0x34>
    huart->pTxBuffPtr = pData;
 800470a:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 800470c:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 800470e:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004710:	2300      	movs	r3, #0
 8004712:	6443      	str	r3, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004714:	2221      	movs	r2, #33	; 0x21
 8004716:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800471a:	6801      	ldr	r1, [r0, #0]
 800471c:	68ca      	ldr	r2, [r1, #12]
 800471e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004722:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8004724:	4618      	mov	r0, r3
 8004726:	4770      	bx	lr
    return HAL_BUSY;
 8004728:	2002      	movs	r0, #2
 800472a:	4770      	bx	lr
      return HAL_ERROR;
 800472c:	2001      	movs	r0, #1
 800472e:	4770      	bx	lr
 8004730:	2001      	movs	r0, #1
}
 8004732:	4770      	bx	lr

08004734 <HAL_UART_ErrorCallback>:
}
 8004734:	4770      	bx	lr

08004736 <UART_DMAAbortOnError>:
{
 8004736:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004738:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 800473a:	2300      	movs	r3, #0
 800473c:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800473e:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8004740:	f7ff fff8 	bl	8004734 <HAL_UART_ErrorCallback>
}
 8004744:	bd08      	pop	{r3, pc}

08004746 <HAL_UART_AbortReceiveCpltCallback>:
}
 8004746:	4770      	bx	lr

08004748 <HAL_UART_AbortReceive_IT>:
{
 8004748:	b510      	push	{r4, lr}
 800474a:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800474c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474e:	f102 030c 	add.w	r3, r2, #12
 8004752:	e853 3f00 	ldrex	r3, [r3]
 8004756:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475a:	320c      	adds	r2, #12
 800475c:	e842 3100 	strex	r1, r3, [r2]
 8004760:	2900      	cmp	r1, #0
 8004762:	d1f3      	bne.n	800474c <HAL_UART_AbortReceive_IT+0x4>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004764:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004766:	f102 0314 	add.w	r3, r2, #20
 800476a:	e853 3f00 	ldrex	r3, [r3]
 800476e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004772:	3214      	adds	r2, #20
 8004774:	e842 3100 	strex	r1, r3, [r2]
 8004778:	2900      	cmp	r1, #0
 800477a:	d1f3      	bne.n	8004764 <HAL_UART_AbortReceive_IT+0x1c>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800477c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800477e:	2b01      	cmp	r3, #1
 8004780:	d01c      	beq.n	80047bc <HAL_UART_AbortReceive_IT+0x74>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004782:	6823      	ldr	r3, [r4, #0]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	f013 0f40 	tst.w	r3, #64	; 0x40
 800478a:	d02e      	beq.n	80047ea <HAL_UART_AbortReceive_IT+0xa2>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800478c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478e:	f102 0314 	add.w	r3, r2, #20
 8004792:	e853 3f00 	ldrex	r3, [r3]
 8004796:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479a:	3214      	adds	r2, #20
 800479c:	e842 3100 	strex	r1, r3, [r2]
 80047a0:	2900      	cmp	r1, #0
 80047a2:	d1f3      	bne.n	800478c <HAL_UART_AbortReceive_IT+0x44>
    if (huart->hdmarx != NULL)
 80047a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80047a6:	b1b3      	cbz	r3, 80047d6 <HAL_UART_AbortReceive_IT+0x8e>
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 80047a8:	4a15      	ldr	r2, [pc, #84]	; (8004800 <HAL_UART_AbortReceive_IT+0xb8>)
 80047aa:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047ac:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80047ae:	f7fe fb3b 	bl	8002e28 <HAL_DMA_Abort_IT>
 80047b2:	b318      	cbz	r0, 80047fc <HAL_UART_AbortReceive_IT+0xb4>
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047b4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80047b6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80047b8:	4798      	blx	r3
 80047ba:	e01f      	b.n	80047fc <HAL_UART_AbortReceive_IT+0xb4>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80047bc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047be:	f102 030c 	add.w	r3, r2, #12
 80047c2:	e853 3f00 	ldrex	r3, [r3]
 80047c6:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ca:	320c      	adds	r2, #12
 80047cc:	e842 3100 	strex	r1, r3, [r2]
 80047d0:	2900      	cmp	r1, #0
 80047d2:	d1f3      	bne.n	80047bc <HAL_UART_AbortReceive_IT+0x74>
 80047d4:	e7d5      	b.n	8004782 <HAL_UART_AbortReceive_IT+0x3a>
      huart->RxXferCount = 0x00U;
 80047d6:	2300      	movs	r3, #0
 80047d8:	85e3      	strh	r3, [r4, #46]	; 0x2e
      huart->RxState = HAL_UART_STATE_READY;
 80047da:	2220      	movs	r2, #32
 80047dc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047e0:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_UART_AbortReceiveCpltCallback(huart);
 80047e2:	4620      	mov	r0, r4
 80047e4:	f7ff ffaf 	bl	8004746 <HAL_UART_AbortReceiveCpltCallback>
 80047e8:	e008      	b.n	80047fc <HAL_UART_AbortReceive_IT+0xb4>
    huart->RxXferCount = 0x00U;
 80047ea:	2300      	movs	r3, #0
 80047ec:	85e3      	strh	r3, [r4, #46]	; 0x2e
    huart->RxState = HAL_UART_STATE_READY;
 80047ee:	2220      	movs	r2, #32
 80047f0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047f4:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_UART_AbortReceiveCpltCallback(huart);
 80047f6:	4620      	mov	r0, r4
 80047f8:	f7ff ffa5 	bl	8004746 <HAL_UART_AbortReceiveCpltCallback>
}
 80047fc:	2000      	movs	r0, #0
 80047fe:	bd10      	pop	{r4, pc}
 8004800:	08004805 	.word	0x08004805

08004804 <UART_DMARxOnlyAbortCallback>:
{
 8004804:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004806:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8004808:	2300      	movs	r3, #0
 800480a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->RxState = HAL_UART_STATE_READY;
 800480c:	2220      	movs	r2, #32
 800480e:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004812:	6303      	str	r3, [r0, #48]	; 0x30
  HAL_UART_AbortReceiveCpltCallback(huart);
 8004814:	f7ff ff97 	bl	8004746 <HAL_UART_AbortReceiveCpltCallback>
}
 8004818:	bd08      	pop	{r3, pc}

0800481a <HAL_UARTEx_RxEventCallback>:
}
 800481a:	4770      	bx	lr

0800481c <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800481c:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b22      	cmp	r3, #34	; 0x22
 8004824:	d11e      	bne.n	8004864 <UART_Receive_IT+0x48>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004826:	6883      	ldr	r3, [r0, #8]
 8004828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800482c:	d006      	beq.n	800483c <UART_Receive_IT+0x20>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800482e:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004830:	b183      	cbz	r3, 8004854 <UART_Receive_IT+0x38>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004832:	6803      	ldr	r3, [r0, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800483a:	e01b      	b.n	8004874 <UART_Receive_IT+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800483c:	6903      	ldr	r3, [r0, #16]
 800483e:	b9ab      	cbnz	r3, 800486c <UART_Receive_IT+0x50>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004840:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004842:	6803      	ldr	r3, [r0, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800484a:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 800484c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800484e:	3302      	adds	r3, #2
 8004850:	6283      	str	r3, [r0, #40]	; 0x28
 8004852:	e013      	b.n	800487c <UART_Receive_IT+0x60>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004854:	6903      	ldr	r3, [r0, #16]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1eb      	bne.n	8004832 <UART_Receive_IT+0x16>
 800485a:	e008      	b.n	800486e <UART_Receive_IT+0x52>
        HAL_UART_RxCpltCallback(huart);
 800485c:	f000 ff72 	bl	8005744 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8004860:	2000      	movs	r0, #0
 8004862:	e048      	b.n	80048f6 <UART_Receive_IT+0xda>
    return HAL_BUSY;
 8004864:	2002      	movs	r0, #2
 8004866:	4770      	bx	lr
    return HAL_OK;
 8004868:	2000      	movs	r0, #0
}
 800486a:	4770      	bx	lr
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800486c:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800486e:	6803      	ldr	r3, [r0, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	b2db      	uxtb	r3, r3
 8004874:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8004876:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004878:	3301      	adds	r3, #1
 800487a:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800487c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800487e:	3b01      	subs	r3, #1
 8004880:	b29b      	uxth	r3, r3
 8004882:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1ef      	bne.n	8004868 <UART_Receive_IT+0x4c>
{
 8004888:	b500      	push	{lr}
 800488a:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800488c:	6802      	ldr	r2, [r0, #0]
 800488e:	68d3      	ldr	r3, [r2, #12]
 8004890:	f023 0320 	bic.w	r3, r3, #32
 8004894:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004896:	6802      	ldr	r2, [r0, #0]
 8004898:	68d3      	ldr	r3, [r2, #12]
 800489a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800489e:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80048a0:	6802      	ldr	r2, [r0, #0]
 80048a2:	6953      	ldr	r3, [r2, #20]
 80048a4:	f023 0301 	bic.w	r3, r3, #1
 80048a8:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80048aa:	2320      	movs	r3, #32
 80048ac:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048b0:	2300      	movs	r3, #0
 80048b2:	6343      	str	r3, [r0, #52]	; 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048b4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d1d0      	bne.n	800485c <UART_Receive_IT+0x40>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ba:	2300      	movs	r3, #0
 80048bc:	6303      	str	r3, [r0, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048be:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c0:	f102 030c 	add.w	r3, r2, #12
 80048c4:	e853 3f00 	ldrex	r3, [r3]
 80048c8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048cc:	320c      	adds	r2, #12
 80048ce:	e842 3100 	strex	r1, r3, [r2]
 80048d2:	2900      	cmp	r1, #0
 80048d4:	d1f3      	bne.n	80048be <UART_Receive_IT+0xa2>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80048d6:	6803      	ldr	r3, [r0, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	f012 0f10 	tst.w	r2, #16
 80048de:	d006      	beq.n	80048ee <UART_Receive_IT+0xd2>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048e0:	2200      	movs	r2, #0
 80048e2:	9201      	str	r2, [sp, #4]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	9201      	str	r2, [sp, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	9301      	str	r3, [sp, #4]
 80048ec:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048ee:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80048f0:	f7ff ff93 	bl	800481a <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 80048f4:	2000      	movs	r0, #0
}
 80048f6:	b003      	add	sp, #12
 80048f8:	f85d fb04 	ldr.w	pc, [sp], #4

080048fc <HAL_UART_IRQHandler>:
{
 80048fc:	b510      	push	{r4, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004902:	6802      	ldr	r2, [r0, #0]
 8004904:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004906:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004908:	6950      	ldr	r0, [r2, #20]
  if (errorflags == RESET)
 800490a:	f013 0f0f 	tst.w	r3, #15
 800490e:	d109      	bne.n	8004924 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004910:	f013 0f20 	tst.w	r3, #32
 8004914:	d00d      	beq.n	8004932 <HAL_UART_IRQHandler+0x36>
 8004916:	f011 0f20 	tst.w	r1, #32
 800491a:	d00a      	beq.n	8004932 <HAL_UART_IRQHandler+0x36>
      UART_Receive_IT(huart);
 800491c:	4620      	mov	r0, r4
 800491e:	f7ff ff7d 	bl	800481c <UART_Receive_IT>
      return;
 8004922:	e017      	b.n	8004954 <HAL_UART_IRQHandler+0x58>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004924:	f000 0001 	and.w	r0, r0, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004928:	f401 7c90 	and.w	ip, r1, #288	; 0x120
 800492c:	ea5c 0c00 	orrs.w	ip, ip, r0
 8004930:	d112      	bne.n	8004958 <HAL_UART_IRQHandler+0x5c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004932:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004934:	2801      	cmp	r0, #1
 8004936:	d07f      	beq.n	8004a38 <HAL_UART_IRQHandler+0x13c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004938:	f013 0f80 	tst.w	r3, #128	; 0x80
 800493c:	d003      	beq.n	8004946 <HAL_UART_IRQHandler+0x4a>
 800493e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004942:	f040 8119 	bne.w	8004b78 <HAL_UART_IRQHandler+0x27c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004946:	f013 0f40 	tst.w	r3, #64	; 0x40
 800494a:	d003      	beq.n	8004954 <HAL_UART_IRQHandler+0x58>
 800494c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004950:	f040 813f 	bne.w	8004bd2 <HAL_UART_IRQHandler+0x2d6>
}
 8004954:	b002      	add	sp, #8
 8004956:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004958:	f013 0f01 	tst.w	r3, #1
 800495c:	d006      	beq.n	800496c <HAL_UART_IRQHandler+0x70>
 800495e:	f411 7f80 	tst.w	r1, #256	; 0x100
 8004962:	d003      	beq.n	800496c <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004964:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004966:	f042 0201 	orr.w	r2, r2, #1
 800496a:	6462      	str	r2, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800496c:	f013 0f04 	tst.w	r3, #4
 8004970:	d02f      	beq.n	80049d2 <HAL_UART_IRQHandler+0xd6>
 8004972:	b158      	cbz	r0, 800498c <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004974:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004976:	f042 0202 	orr.w	r2, r2, #2
 800497a:	6462      	str	r2, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800497c:	f013 0f02 	tst.w	r3, #2
 8004980:	f000 8132 	beq.w	8004be8 <HAL_UART_IRQHandler+0x2ec>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004984:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004986:	f042 0204 	orr.w	r2, r2, #4
 800498a:	6462      	str	r2, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800498c:	f013 0f08 	tst.w	r3, #8
 8004990:	d007      	beq.n	80049a2 <HAL_UART_IRQHandler+0xa6>
 8004992:	f001 0220 	and.w	r2, r1, #32
 8004996:	4302      	orrs	r2, r0
 8004998:	d003      	beq.n	80049a2 <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800499a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800499c:	f042 0208 	orr.w	r2, r2, #8
 80049a0:	6462      	str	r2, [r4, #68]	; 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049a2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80049a4:	2a00      	cmp	r2, #0
 80049a6:	d0d5      	beq.n	8004954 <HAL_UART_IRQHandler+0x58>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049a8:	f013 0f20 	tst.w	r3, #32
 80049ac:	d002      	beq.n	80049b4 <HAL_UART_IRQHandler+0xb8>
 80049ae:	f011 0f20 	tst.w	r1, #32
 80049b2:	d114      	bne.n	80049de <HAL_UART_IRQHandler+0xe2>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049b4:	6823      	ldr	r3, [r4, #0]
 80049b6:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80049b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049ba:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80049be:	f003 0308 	and.w	r3, r3, #8
 80049c2:	4313      	orrs	r3, r2
 80049c4:	d10f      	bne.n	80049e6 <HAL_UART_IRQHandler+0xea>
        HAL_UART_ErrorCallback(huart);
 80049c6:	4620      	mov	r0, r4
 80049c8:	f7ff feb4 	bl	8004734 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049cc:	2300      	movs	r3, #0
 80049ce:	6463      	str	r3, [r4, #68]	; 0x44
 80049d0:	e7c0      	b.n	8004954 <HAL_UART_IRQHandler+0x58>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049d2:	f013 0f02 	tst.w	r3, #2
 80049d6:	d0d9      	beq.n	800498c <HAL_UART_IRQHandler+0x90>
 80049d8:	2800      	cmp	r0, #0
 80049da:	d0d7      	beq.n	800498c <HAL_UART_IRQHandler+0x90>
 80049dc:	e7d2      	b.n	8004984 <HAL_UART_IRQHandler+0x88>
        UART_Receive_IT(huart);
 80049de:	4620      	mov	r0, r4
 80049e0:	f7ff ff1c 	bl	800481c <UART_Receive_IT>
 80049e4:	e7e6      	b.n	80049b4 <HAL_UART_IRQHandler+0xb8>
        UART_EndRxTransfer(huart);
 80049e6:	4620      	mov	r0, r4
 80049e8:	f7ff fde4 	bl	80045b4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049ec:	6823      	ldr	r3, [r4, #0]
 80049ee:	695b      	ldr	r3, [r3, #20]
 80049f0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80049f4:	d01c      	beq.n	8004a30 <HAL_UART_IRQHandler+0x134>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049f6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f8:	f102 0314 	add.w	r3, r2, #20
 80049fc:	e853 3f00 	ldrex	r3, [r3]
 8004a00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a04:	3214      	adds	r2, #20
 8004a06:	e842 3100 	strex	r1, r3, [r2]
 8004a0a:	2900      	cmp	r1, #0
 8004a0c:	d1f3      	bne.n	80049f6 <HAL_UART_IRQHandler+0xfa>
          if (huart->hdmarx != NULL)
 8004a0e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004a10:	b153      	cbz	r3, 8004a28 <HAL_UART_IRQHandler+0x12c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a12:	4a78      	ldr	r2, [pc, #480]	; (8004bf4 <HAL_UART_IRQHandler+0x2f8>)
 8004a14:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a16:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004a18:	f7fe fa06 	bl	8002e28 <HAL_DMA_Abort_IT>
 8004a1c:	2800      	cmp	r0, #0
 8004a1e:	d099      	beq.n	8004954 <HAL_UART_IRQHandler+0x58>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a20:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004a22:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004a24:	4798      	blx	r3
 8004a26:	e795      	b.n	8004954 <HAL_UART_IRQHandler+0x58>
            HAL_UART_ErrorCallback(huart);
 8004a28:	4620      	mov	r0, r4
 8004a2a:	f7ff fe83 	bl	8004734 <HAL_UART_ErrorCallback>
 8004a2e:	e791      	b.n	8004954 <HAL_UART_IRQHandler+0x58>
          HAL_UART_ErrorCallback(huart);
 8004a30:	4620      	mov	r0, r4
 8004a32:	f7ff fe7f 	bl	8004734 <HAL_UART_ErrorCallback>
 8004a36:	e78d      	b.n	8004954 <HAL_UART_IRQHandler+0x58>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004a38:	f013 0f10 	tst.w	r3, #16
 8004a3c:	f43f af7c 	beq.w	8004938 <HAL_UART_IRQHandler+0x3c>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004a40:	f011 0f10 	tst.w	r1, #16
 8004a44:	f43f af78 	beq.w	8004938 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a48:	2300      	movs	r3, #0
 8004a4a:	9301      	str	r3, [sp, #4]
 8004a4c:	6813      	ldr	r3, [r2, #0]
 8004a4e:	9301      	str	r3, [sp, #4]
 8004a50:	6853      	ldr	r3, [r2, #4]
 8004a52:	9301      	str	r3, [sp, #4]
 8004a54:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a56:	6953      	ldr	r3, [r2, #20]
 8004a58:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004a5c:	d050      	beq.n	8004b00 <HAL_UART_IRQHandler+0x204>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a5e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004a60:	6813      	ldr	r3, [r2, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f43f af74 	beq.w	8004954 <HAL_UART_IRQHandler+0x58>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a6c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8004a6e:	4299      	cmp	r1, r3
 8004a70:	f67f af70 	bls.w	8004954 <HAL_UART_IRQHandler+0x58>
        huart->RxXferCount = nb_remaining_rx_data;
 8004a74:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a76:	6993      	ldr	r3, [r2, #24]
 8004a78:	2b20      	cmp	r3, #32
 8004a7a:	d037      	beq.n	8004aec <HAL_UART_IRQHandler+0x1f0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a7c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7e:	f102 030c 	add.w	r3, r2, #12
 8004a82:	e853 3f00 	ldrex	r3, [r3]
 8004a86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8a:	320c      	adds	r2, #12
 8004a8c:	e842 3100 	strex	r1, r3, [r2]
 8004a90:	2900      	cmp	r1, #0
 8004a92:	d1f3      	bne.n	8004a7c <HAL_UART_IRQHandler+0x180>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a94:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a96:	f102 0314 	add.w	r3, r2, #20
 8004a9a:	e853 3f00 	ldrex	r3, [r3]
 8004a9e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa2:	3214      	adds	r2, #20
 8004aa4:	e842 3100 	strex	r1, r3, [r2]
 8004aa8:	2900      	cmp	r1, #0
 8004aaa:	d1f3      	bne.n	8004a94 <HAL_UART_IRQHandler+0x198>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004aac:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aae:	f102 0314 	add.w	r3, r2, #20
 8004ab2:	e853 3f00 	ldrex	r3, [r3]
 8004ab6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aba:	3214      	adds	r2, #20
 8004abc:	e842 3100 	strex	r1, r3, [r2]
 8004ac0:	2900      	cmp	r1, #0
 8004ac2:	d1f3      	bne.n	8004aac <HAL_UART_IRQHandler+0x1b0>
          huart->RxState = HAL_UART_STATE_READY;
 8004ac4:	2320      	movs	r3, #32
 8004ac6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aca:	2300      	movs	r3, #0
 8004acc:	6323      	str	r3, [r4, #48]	; 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ace:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad0:	f102 030c 	add.w	r3, r2, #12
 8004ad4:	e853 3f00 	ldrex	r3, [r3]
 8004ad8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004adc:	320c      	adds	r2, #12
 8004ade:	e842 3100 	strex	r1, r3, [r2]
 8004ae2:	2900      	cmp	r1, #0
 8004ae4:	d1f3      	bne.n	8004ace <HAL_UART_IRQHandler+0x1d2>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ae6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004ae8:	f7fe f97b 	bl	8002de2 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004aec:	2302      	movs	r3, #2
 8004aee:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004af0:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8004af2:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8004af4:	1ac9      	subs	r1, r1, r3
 8004af6:	b289      	uxth	r1, r1
 8004af8:	4620      	mov	r0, r4
 8004afa:	f7ff fe8e 	bl	800481a <HAL_UARTEx_RxEventCallback>
 8004afe:	e729      	b.n	8004954 <HAL_UART_IRQHandler+0x58>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b00:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8004b02:	b29a      	uxth	r2, r3
      if ((huart->RxXferCount > 0U)
 8004b04:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f43f af23 	beq.w	8004954 <HAL_UART_IRQHandler+0x58>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b0e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8004b10:	1a9b      	subs	r3, r3, r2
 8004b12:	b299      	uxth	r1, r3
          && (nb_rx_data > 0U))
 8004b14:	2900      	cmp	r1, #0
 8004b16:	f43f af1d 	beq.w	8004954 <HAL_UART_IRQHandler+0x58>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b1a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1c:	f102 030c 	add.w	r3, r2, #12
 8004b20:	e853 3f00 	ldrex	r3, [r3]
 8004b24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b28:	320c      	adds	r2, #12
 8004b2a:	e842 3000 	strex	r0, r3, [r2]
 8004b2e:	2800      	cmp	r0, #0
 8004b30:	d1f3      	bne.n	8004b1a <HAL_UART_IRQHandler+0x21e>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b32:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b34:	f102 0314 	add.w	r3, r2, #20
 8004b38:	e853 3f00 	ldrex	r3, [r3]
 8004b3c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b40:	3214      	adds	r2, #20
 8004b42:	e842 3000 	strex	r0, r3, [r2]
 8004b46:	2800      	cmp	r0, #0
 8004b48:	d1f3      	bne.n	8004b32 <HAL_UART_IRQHandler+0x236>
        huart->RxState = HAL_UART_STATE_READY;
 8004b4a:	2320      	movs	r3, #32
 8004b4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b50:	2300      	movs	r3, #0
 8004b52:	6323      	str	r3, [r4, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b54:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b56:	f102 030c 	add.w	r3, r2, #12
 8004b5a:	e853 3f00 	ldrex	r3, [r3]
 8004b5e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b62:	320c      	adds	r2, #12
 8004b64:	e842 3000 	strex	r0, r3, [r2]
 8004b68:	2800      	cmp	r0, #0
 8004b6a:	d1f3      	bne.n	8004b54 <HAL_UART_IRQHandler+0x258>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b70:	4620      	mov	r0, r4
 8004b72:	f7ff fe52 	bl	800481a <HAL_UARTEx_RxEventCallback>
 8004b76:	e6ed      	b.n	8004954 <HAL_UART_IRQHandler+0x58>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b78:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b21      	cmp	r3, #33	; 0x21
 8004b80:	f47f aee8 	bne.w	8004954 <HAL_UART_IRQHandler+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b84:	68a3      	ldr	r3, [r4, #8]
 8004b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b8a:	d016      	beq.n	8004bba <HAL_UART_IRQHandler+0x2be>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004b8c:	6a23      	ldr	r3, [r4, #32]
 8004b8e:	1c59      	adds	r1, r3, #1
 8004b90:	6221      	str	r1, [r4, #32]
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	6053      	str	r3, [r2, #4]
    if (--huart->TxXferCount == 0U)
 8004b96:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	84e3      	strh	r3, [r4, #38]	; 0x26
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f47f aed8 	bne.w	8004954 <HAL_UART_IRQHandler+0x58>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ba4:	6822      	ldr	r2, [r4, #0]
 8004ba6:	68d3      	ldr	r3, [r2, #12]
 8004ba8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bac:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004bae:	6822      	ldr	r2, [r4, #0]
 8004bb0:	68d3      	ldr	r3, [r2, #12]
 8004bb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bb6:	60d3      	str	r3, [r2, #12]
 8004bb8:	e6cc      	b.n	8004954 <HAL_UART_IRQHandler+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bba:	6923      	ldr	r3, [r4, #16]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1e5      	bne.n	8004b8c <HAL_UART_IRQHandler+0x290>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004bc0:	6a23      	ldr	r3, [r4, #32]
 8004bc2:	881b      	ldrh	r3, [r3, #0]
 8004bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bc8:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8004bca:	6a23      	ldr	r3, [r4, #32]
 8004bcc:	3302      	adds	r3, #2
 8004bce:	6223      	str	r3, [r4, #32]
 8004bd0:	e7e1      	b.n	8004b96 <HAL_UART_IRQHandler+0x29a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004bd2:	68d3      	ldr	r3, [r2, #12]
 8004bd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bd8:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004bda:	2320      	movs	r3, #32
 8004bdc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  HAL_UART_TxCpltCallback(huart);
 8004be0:	4620      	mov	r0, r4
 8004be2:	f000 fd77 	bl	80056d4 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8004be6:	e6b5      	b.n	8004954 <HAL_UART_IRQHandler+0x58>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004be8:	f013 0f08 	tst.w	r3, #8
 8004bec:	f47f aed5 	bne.w	800499a <HAL_UART_IRQHandler+0x9e>
 8004bf0:	e6d7      	b.n	80049a2 <HAL_UART_IRQHandler+0xa6>
 8004bf2:	bf00      	nop
 8004bf4:	08004737 	.word	0x08004737

08004bf8 <UART_Start_Receive_IT>:
  huart->pRxBuffPtr = pData;
 8004bf8:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 8004bfa:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004bfc:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	6443      	str	r3, [r0, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c02:	2322      	movs	r3, #34	; 0x22
 8004c04:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004c08:	6903      	ldr	r3, [r0, #16]
 8004c0a:	b123      	cbz	r3, 8004c16 <UART_Start_Receive_IT+0x1e>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004c0c:	6802      	ldr	r2, [r0, #0]
 8004c0e:	68d3      	ldr	r3, [r2, #12]
 8004c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c14:	60d3      	str	r3, [r2, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004c16:	6802      	ldr	r2, [r0, #0]
 8004c18:	6953      	ldr	r3, [r2, #20]
 8004c1a:	f043 0301 	orr.w	r3, r3, #1
 8004c1e:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004c20:	6802      	ldr	r2, [r0, #0]
 8004c22:	68d3      	ldr	r3, [r2, #12]
 8004c24:	f043 0320 	orr.w	r3, r3, #32
 8004c28:	60d3      	str	r3, [r2, #12]
}
 8004c2a:	2000      	movs	r0, #0
 8004c2c:	4770      	bx	lr

08004c2e <HAL_UART_Receive_IT>:
{
 8004c2e:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c30:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b20      	cmp	r3, #32
 8004c38:	d108      	bne.n	8004c4c <HAL_UART_Receive_IT+0x1e>
    if ((pData == NULL) || (Size == 0U))
 8004c3a:	b149      	cbz	r1, 8004c50 <HAL_UART_Receive_IT+0x22>
 8004c3c:	b90a      	cbnz	r2, 8004c42 <HAL_UART_Receive_IT+0x14>
      return HAL_ERROR;
 8004c3e:	2001      	movs	r0, #1
}
 8004c40:	bd08      	pop	{r3, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c42:	2300      	movs	r3, #0
 8004c44:	6303      	str	r3, [r0, #48]	; 0x30
    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c46:	f7ff ffd7 	bl	8004bf8 <UART_Start_Receive_IT>
 8004c4a:	e7f9      	b.n	8004c40 <HAL_UART_Receive_IT+0x12>
    return HAL_BUSY;
 8004c4c:	2002      	movs	r0, #2
 8004c4e:	e7f7      	b.n	8004c40 <HAL_UART_Receive_IT+0x12>
      return HAL_ERROR;
 8004c50:	2001      	movs	r0, #1
 8004c52:	e7f5      	b.n	8004c40 <HAL_UART_Receive_IT+0x12>

08004c54 <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8004c54:	b510      	push	{r4, lr}
 8004c56:	4604      	mov	r4, r0
 8004c58:	4608      	mov	r0, r1
    eMBErrorCode    eStatus = MB_ENOERR;

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 8004c5a:	f101 3cff 	add.w	ip, r1, #4294967295
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 8004c5e:	fa5f fc8c 	uxtb.w	ip, ip
 8004c62:	f1bc 0ff6 	cmp.w	ip, #246	; 0xf6
 8004c66:	d82b      	bhi.n	8004cc0 <eMBInit+0x6c>
 8004c68:	4611      	mov	r1, r2
 8004c6a:	461a      	mov	r2, r3
    {
        eStatus = MB_EINVAL;
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
 8004c6c:	4b17      	ldr	r3, [pc, #92]	; (8004ccc <eMBInit+0x78>)
 8004c6e:	7018      	strb	r0, [r3, #0]

        switch ( eMode )
 8004c70:	b10c      	cbz	r4, 8004c76 <eMBInit+0x22>

            eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
            break;
#endif
        default:
            eStatus = MB_EINVAL;
 8004c72:	2402      	movs	r4, #2
 8004c74:	e025      	b.n	8004cc2 <eMBInit+0x6e>
            pvMBFrameStartCur = eMBRTUStart;
 8004c76:	4b16      	ldr	r3, [pc, #88]	; (8004cd0 <eMBInit+0x7c>)
 8004c78:	4c16      	ldr	r4, [pc, #88]	; (8004cd4 <eMBInit+0x80>)
 8004c7a:	601c      	str	r4, [r3, #0]
            pvMBFrameStopCur = eMBRTUStop;
 8004c7c:	4b16      	ldr	r3, [pc, #88]	; (8004cd8 <eMBInit+0x84>)
 8004c7e:	4c17      	ldr	r4, [pc, #92]	; (8004cdc <eMBInit+0x88>)
 8004c80:	601c      	str	r4, [r3, #0]
            peMBFrameSendCur = eMBRTUSend;
 8004c82:	4b17      	ldr	r3, [pc, #92]	; (8004ce0 <eMBInit+0x8c>)
 8004c84:	4c17      	ldr	r4, [pc, #92]	; (8004ce4 <eMBInit+0x90>)
 8004c86:	601c      	str	r4, [r3, #0]
            peMBFrameReceiveCur = eMBRTUReceive;
 8004c88:	4b17      	ldr	r3, [pc, #92]	; (8004ce8 <eMBInit+0x94>)
 8004c8a:	4c18      	ldr	r4, [pc, #96]	; (8004cec <eMBInit+0x98>)
 8004c8c:	601c      	str	r4, [r3, #0]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 8004c8e:	4b18      	ldr	r3, [pc, #96]	; (8004cf0 <eMBInit+0x9c>)
 8004c90:	2400      	movs	r4, #0
 8004c92:	601c      	str	r4, [r3, #0]
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
 8004c94:	4b17      	ldr	r3, [pc, #92]	; (8004cf4 <eMBInit+0xa0>)
 8004c96:	4c18      	ldr	r4, [pc, #96]	; (8004cf8 <eMBInit+0xa4>)
 8004c98:	601c      	str	r4, [r3, #0]
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
 8004c9a:	4b18      	ldr	r3, [pc, #96]	; (8004cfc <eMBInit+0xa8>)
 8004c9c:	4c18      	ldr	r4, [pc, #96]	; (8004d00 <eMBInit+0xac>)
 8004c9e:	601c      	str	r4, [r3, #0]
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
 8004ca0:	4b18      	ldr	r3, [pc, #96]	; (8004d04 <eMBInit+0xb0>)
 8004ca2:	4c19      	ldr	r4, [pc, #100]	; (8004d08 <eMBInit+0xb4>)
 8004ca4:	601c      	str	r4, [r3, #0]
            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 8004ca6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004caa:	f000 fab9 	bl	8005220 <eMBRTUInit>
            break;
        }

        if( eStatus == MB_ENOERR )
 8004cae:	4604      	mov	r4, r0
 8004cb0:	b938      	cbnz	r0, 8004cc2 <eMBInit+0x6e>
        {
            if( !xMBPortEventInit(  ) )
 8004cb2:	f000 fc3d 	bl	8005530 <xMBPortEventInit>
 8004cb6:	b130      	cbz	r0, 8004cc6 <eMBInit+0x72>
                eStatus = MB_EPORTERR;
            }
            else
            {
                eMBCurrentMode = eMode;
                eMBState = STATE_DISABLED;
 8004cb8:	4b14      	ldr	r3, [pc, #80]	; (8004d0c <eMBInit+0xb8>)
 8004cba:	2201      	movs	r2, #1
 8004cbc:	701a      	strb	r2, [r3, #0]
 8004cbe:	e000      	b.n	8004cc2 <eMBInit+0x6e>
        eStatus = MB_EINVAL;
 8004cc0:	2402      	movs	r4, #2
            }
        }
    }
    return eStatus;
}
 8004cc2:	4620      	mov	r0, r4
 8004cc4:	bd10      	pop	{r4, pc}
                eStatus = MB_EPORTERR;
 8004cc6:	2403      	movs	r4, #3
 8004cc8:	e7fb      	b.n	8004cc2 <eMBInit+0x6e>
 8004cca:	bf00      	nop
 8004ccc:	2000154d 	.word	0x2000154d
 8004cd0:	20001538 	.word	0x20001538
 8004cd4:	0800526d 	.word	0x0800526d
 8004cd8:	2000153c 	.word	0x2000153c
 8004cdc:	0800528d 	.word	0x0800528d
 8004ce0:	20001530 	.word	0x20001530
 8004ce4:	080052f5 	.word	0x080052f5
 8004ce8:	2000152c 	.word	0x2000152c
 8004cec:	080052a5 	.word	0x080052a5
 8004cf0:	20001534 	.word	0x20001534
 8004cf4:	20001540 	.word	0x20001540
 8004cf8:	0800537d 	.word	0x0800537d
 8004cfc:	20001544 	.word	0x20001544
 8004d00:	08005409 	.word	0x08005409
 8004d04:	20001548 	.word	0x20001548
 8004d08:	08005475 	.word	0x08005475
 8004d0c:	20000030 	.word	0x20000030

08004d10 <eMBEnable>:
}


eMBErrorCode
eMBEnable( void )
{
 8004d10:	b508      	push	{r3, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( eMBState == STATE_DISABLED )
 8004d12:	4b06      	ldr	r3, [pc, #24]	; (8004d2c <eMBEnable+0x1c>)
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d001      	beq.n	8004d1e <eMBEnable+0xe>
        pvMBFrameStartCur(  );
        eMBState = STATE_ENABLED;
    }
    else
    {
        eStatus = MB_EILLSTATE;
 8004d1a:	2006      	movs	r0, #6
    }
    return eStatus;
}
 8004d1c:	bd08      	pop	{r3, pc}
        pvMBFrameStartCur(  );
 8004d1e:	4b04      	ldr	r3, [pc, #16]	; (8004d30 <eMBEnable+0x20>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 8004d24:	2000      	movs	r0, #0
 8004d26:	4b01      	ldr	r3, [pc, #4]	; (8004d2c <eMBEnable+0x1c>)
 8004d28:	7018      	strb	r0, [r3, #0]
 8004d2a:	e7f7      	b.n	8004d1c <eMBEnable+0xc>
 8004d2c:	20000030 	.word	0x20000030
 8004d30:	20001538 	.word	0x20001538

08004d34 <eMBPoll>:
    }
    return eStatus;
}

eMBErrorCode eMBPoll( void )
{
 8004d34:	b570      	push	{r4, r5, r6, lr}
 8004d36:	b082      	sub	sp, #8
    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 8004d38:	4b36      	ldr	r3, [pc, #216]	; (8004e14 <eMBPoll+0xe0>)
 8004d3a:	781c      	ldrb	r4, [r3, #0]
 8004d3c:	2c00      	cmp	r4, #0
 8004d3e:	d165      	bne.n	8004e0c <eMBPoll+0xd8>
        return MB_EILLSTATE;
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 8004d40:	f10d 0007 	add.w	r0, sp, #7
 8004d44:	f000 fc2a 	bl	800559c <xMBPortEventGet>
 8004d48:	2801      	cmp	r0, #1
 8004d4a:	d002      	beq.n	8004d52 <eMBPoll+0x1e>
        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
}
 8004d4c:	4620      	mov	r0, r4
 8004d4e:	b002      	add	sp, #8
 8004d50:	bd70      	pop	{r4, r5, r6, pc}
        switch ( eEvent )
 8004d52:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d019      	beq.n	8004d8e <eMBPoll+0x5a>
 8004d5a:	2b04      	cmp	r3, #4
 8004d5c:	d1f6      	bne.n	8004d4c <eMBPoll+0x18>
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8004d5e:	4b2e      	ldr	r3, [pc, #184]	; (8004e18 <eMBPoll+0xe4>)
 8004d60:	681e      	ldr	r6, [r3, #0]
 8004d62:	7831      	ldrb	r1, [r6, #0]
 8004d64:	4b2d      	ldr	r3, [pc, #180]	; (8004e1c <eMBPoll+0xe8>)
 8004d66:	7019      	strb	r1, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 8004d68:	4b2d      	ldr	r3, [pc, #180]	; (8004e20 <eMBPoll+0xec>)
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8004d6e:	2300      	movs	r3, #0
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 8004d70:	4d2c      	ldr	r5, [pc, #176]	; (8004e24 <eMBPoll+0xf0>)
 8004d72:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
 8004d76:	b122      	cbz	r2, 8004d82 <eMBPoll+0x4e>
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 8004d78:	4291      	cmp	r1, r2
 8004d7a:	d01e      	beq.n	8004dba <eMBPoll+0x86>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	2b10      	cmp	r3, #16
 8004d80:	d1f7      	bne.n	8004d72 <eMBPoll+0x3e>
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 8004d82:	4b29      	ldr	r3, [pc, #164]	; (8004e28 <eMBPoll+0xf4>)
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d130      	bne.n	8004dec <eMBPoll+0xb8>
    return MB_ENOERR;
 8004d8a:	461c      	mov	r4, r3
 8004d8c:	e7de      	b.n	8004d4c <eMBPoll+0x18>
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8004d8e:	4b27      	ldr	r3, [pc, #156]	; (8004e2c <eMBPoll+0xf8>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a27      	ldr	r2, [pc, #156]	; (8004e30 <eMBPoll+0xfc>)
 8004d94:	4920      	ldr	r1, [pc, #128]	; (8004e18 <eMBPoll+0xe4>)
 8004d96:	4824      	ldr	r0, [pc, #144]	; (8004e28 <eMBPoll+0xf4>)
 8004d98:	4798      	blx	r3
            if( eStatus == MB_ENOERR )
 8004d9a:	4605      	mov	r5, r0
 8004d9c:	2800      	cmp	r0, #0
 8004d9e:	d1d5      	bne.n	8004d4c <eMBPoll+0x18>
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 8004da0:	4b21      	ldr	r3, [pc, #132]	; (8004e28 <eMBPoll+0xf4>)
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	4a23      	ldr	r2, [pc, #140]	; (8004e34 <eMBPoll+0x100>)
 8004da6:	7812      	ldrb	r2, [r2, #0]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d001      	beq.n	8004db0 <eMBPoll+0x7c>
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d12f      	bne.n	8004e10 <eMBPoll+0xdc>
                    ( void )xMBPortEventPost( EV_EXECUTE );
 8004db0:	2004      	movs	r0, #4
 8004db2:	f000 fbc7 	bl	8005544 <xMBPortEventPost>
    return MB_ENOERR;
 8004db6:	462c      	mov	r4, r5
 8004db8:	e7c8      	b.n	8004d4c <eMBPoll+0x18>
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 8004dba:	4a1a      	ldr	r2, [pc, #104]	; (8004e24 <eMBPoll+0xf0>)
 8004dbc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	491b      	ldr	r1, [pc, #108]	; (8004e30 <eMBPoll+0xfc>)
 8004dc4:	4630      	mov	r0, r6
 8004dc6:	4798      	blx	r3
 8004dc8:	4b15      	ldr	r3, [pc, #84]	; (8004e20 <eMBPoll+0xec>)
 8004dca:	7018      	strb	r0, [r3, #0]
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 8004dcc:	4b16      	ldr	r3, [pc, #88]	; (8004e28 <eMBPoll+0xf4>)
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	b153      	cbz	r3, 8004de8 <eMBPoll+0xb4>
                if( eException != MB_EX_NONE )
 8004dd2:	b958      	cbnz	r0, 8004dec <eMBPoll+0xb8>
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 8004dd4:	4b18      	ldr	r3, [pc, #96]	; (8004e38 <eMBPoll+0x104>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a15      	ldr	r2, [pc, #84]	; (8004e30 <eMBPoll+0xfc>)
 8004dda:	8812      	ldrh	r2, [r2, #0]
 8004ddc:	490e      	ldr	r1, [pc, #56]	; (8004e18 <eMBPoll+0xe4>)
 8004dde:	6809      	ldr	r1, [r1, #0]
 8004de0:	4814      	ldr	r0, [pc, #80]	; (8004e34 <eMBPoll+0x100>)
 8004de2:	7800      	ldrb	r0, [r0, #0]
 8004de4:	4798      	blx	r3
 8004de6:	e7b1      	b.n	8004d4c <eMBPoll+0x18>
    return MB_ENOERR;
 8004de8:	461c      	mov	r4, r3
 8004dea:	e7af      	b.n	8004d4c <eMBPoll+0x18>
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 8004dec:	4b0b      	ldr	r3, [pc, #44]	; (8004e1c <eMBPoll+0xe8>)
 8004dee:	781a      	ldrb	r2, [r3, #0]
 8004df0:	4909      	ldr	r1, [pc, #36]	; (8004e18 <eMBPoll+0xe4>)
 8004df2:	680d      	ldr	r5, [r1, #0]
 8004df4:	4b0e      	ldr	r3, [pc, #56]	; (8004e30 <eMBPoll+0xfc>)
 8004df6:	2601      	movs	r6, #1
 8004df8:	801e      	strh	r6, [r3, #0]
 8004dfa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dfe:	702a      	strb	r2, [r5, #0]
                    ucMBFrame[usLength++] = eException;
 8004e00:	6809      	ldr	r1, [r1, #0]
 8004e02:	881a      	ldrh	r2, [r3, #0]
 8004e04:	1995      	adds	r5, r2, r6
 8004e06:	801d      	strh	r5, [r3, #0]
 8004e08:	5488      	strb	r0, [r1, r2]
 8004e0a:	e7e3      	b.n	8004dd4 <eMBPoll+0xa0>
        return MB_EILLSTATE;
 8004e0c:	2406      	movs	r4, #6
 8004e0e:	e79d      	b.n	8004d4c <eMBPoll+0x18>
    return MB_ENOERR;
 8004e10:	4604      	mov	r4, r0
 8004e12:	e79b      	b.n	8004d4c <eMBPoll+0x18>
 8004e14:	20000030 	.word	0x20000030
 8004e18:	20001550 	.word	0x20001550
 8004e1c:	2000154c 	.word	0x2000154c
 8004e20:	20001528 	.word	0x20001528
 8004e24:	20000034 	.word	0x20000034
 8004e28:	20001554 	.word	0x20001554
 8004e2c:	2000152c 	.word	0x2000152c
 8004e30:	20001556 	.word	0x20001556
 8004e34:	2000154d 	.word	0x2000154d
 8004e38:	20001530 	.word	0x20001530

08004e3c <usMBCRC16>:
{
    UCHAR           ucCRCHi = 0xFF;
    UCHAR           ucCRCLo = 0xFF;
    int             iIndex;

    while( usLen-- )
 8004e3c:	b1b9      	cbz	r1, 8004e6e <usMBCRC16+0x32>
{
 8004e3e:	b430      	push	{r4, r5}
 8004e40:	f101 3cff 	add.w	ip, r1, #4294967295
 8004e44:	fa1f fc8c 	uxth.w	ip, ip
 8004e48:	f10c 0c01 	add.w	ip, ip, #1
 8004e4c:	4484      	add	ip, r0
    UCHAR           ucCRCLo = 0xFF;
 8004e4e:	22ff      	movs	r2, #255	; 0xff
    UCHAR           ucCRCHi = 0xFF;
 8004e50:	4611      	mov	r1, r2
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 8004e52:	4d09      	ldr	r5, [pc, #36]	; (8004e78 <usMBCRC16+0x3c>)
        ucCRCHi = aucCRCLo[iIndex];
 8004e54:	4c09      	ldr	r4, [pc, #36]	; (8004e7c <usMBCRC16+0x40>)
        iIndex = ucCRCLo ^ *( pucFrame++ );
 8004e56:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004e5a:	4053      	eors	r3, r2
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 8004e5c:	5cea      	ldrb	r2, [r5, r3]
 8004e5e:	404a      	eors	r2, r1
        ucCRCHi = aucCRCLo[iIndex];
 8004e60:	5ce1      	ldrb	r1, [r4, r3]
    while( usLen-- )
 8004e62:	4560      	cmp	r0, ip
 8004e64:	d1f7      	bne.n	8004e56 <usMBCRC16+0x1a>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
}
 8004e66:	ea42 2001 	orr.w	r0, r2, r1, lsl #8
 8004e6a:	bc30      	pop	{r4, r5}
 8004e6c:	4770      	bx	lr
    UCHAR           ucCRCLo = 0xFF;
 8004e6e:	22ff      	movs	r2, #255	; 0xff
}
 8004e70:	ea42 2002 	orr.w	r0, r2, r2, lsl #8
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	08007df8 	.word	0x08007df8
 8004e7c:	08007ef8 	.word	0x08007ef8

08004e80 <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8004e80:	b538      	push	{r3, r4, r5, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8004e82:	880b      	ldrh	r3, [r1, #0]
 8004e84:	2b05      	cmp	r3, #5
 8004e86:	d001      	beq.n	8004e8c <eMBFuncReadCoils+0xc>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004e88:	2003      	movs	r0, #3
    }
    return eStatus;
}
 8004e8a:	bd38      	pop	{r3, r4, r5, pc}
 8004e8c:	460c      	mov	r4, r1
        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 8004e8e:	78c3      	ldrb	r3, [r0, #3]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 8004e90:	7902      	ldrb	r2, [r0, #4]
 8004e92:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
        if( ( usCoilCount >= 1 ) &&
 8004e96:	1e53      	subs	r3, r2, #1
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	f240 71ce 	movw	r1, #1998	; 0x7ce
 8004e9e:	428b      	cmp	r3, r1
 8004ea0:	d825      	bhi.n	8004eee <eMBFuncReadCoils+0x6e>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8004ea2:	f890 c001 	ldrb.w	ip, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8004ea6:	7881      	ldrb	r1, [r0, #2]
            *usLen = MB_PDU_FUNC_OFF;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 8004eac:	2301      	movs	r3, #1
 8004eae:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 8004eb0:	8823      	ldrh	r3, [r4, #0]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	8023      	strh	r3, [r4, #0]
            if( ( usCoilCount & 0x0007 ) != 0 )
 8004eb6:	f012 0f07 	tst.w	r2, #7
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 8004eba:	bf1d      	ittte	ne
 8004ebc:	08d5      	lsrne	r5, r2, #3
 8004ebe:	3501      	addne	r5, #1
 8004ec0:	b2ed      	uxtbne	r5, r5
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 8004ec2:	f3c2 05c7 	ubfxeq	r5, r2, #3, #8
            *pucFrameCur++ = ucNBytes;
 8004ec6:	7045      	strb	r5, [r0, #1]
            *usLen += 1;
 8004ec8:	8823      	ldrh	r3, [r4, #0]
 8004eca:	3301      	adds	r3, #1
 8004ecc:	8023      	strh	r3, [r4, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8004ece:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
        usRegAddress++;
 8004ed2:	3101      	adds	r1, #1
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	b289      	uxth	r1, r1
 8004ed8:	3002      	adds	r0, #2
 8004eda:	f000 fd01 	bl	80058e0 <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 8004ede:	b918      	cbnz	r0, 8004ee8 <eMBFuncReadCoils+0x68>
                *usLen += ucNBytes;;
 8004ee0:	8823      	ldrh	r3, [r4, #0]
 8004ee2:	441d      	add	r5, r3
 8004ee4:	8025      	strh	r5, [r4, #0]
 8004ee6:	e7d0      	b.n	8004e8a <eMBFuncReadCoils+0xa>
                eStatus = prveMBError2Exception( eRegStatus );
 8004ee8:	f000 fb14 	bl	8005514 <prveMBError2Exception>
 8004eec:	e7cd      	b.n	8004e8a <eMBFuncReadCoils+0xa>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004eee:	2003      	movs	r0, #3
 8004ef0:	e7cb      	b.n	8004e8a <eMBFuncReadCoils+0xa>

08004ef2 <eMBFuncWriteCoil>:
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8004ef2:	880b      	ldrh	r3, [r1, #0]
 8004ef4:	2b05      	cmp	r3, #5
 8004ef6:	d001      	beq.n	8004efc <eMBFuncWriteCoil+0xa>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004ef8:	2003      	movs	r0, #3
 8004efa:	4770      	bx	lr
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8004efc:	7903      	ldrb	r3, [r0, #4]
 8004efe:	bb0b      	cbnz	r3, 8004f44 <eMBFuncWriteCoil+0x52>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8004f00:	78c2      	ldrb	r2, [r0, #3]
 8004f02:	1e53      	subs	r3, r2, #1
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2bfd      	cmp	r3, #253	; 0xfd
 8004f08:	d91e      	bls.n	8004f48 <eMBFuncWriteCoil+0x56>
{
 8004f0a:	b500      	push	{lr}
 8004f0c:	b083      	sub	sp, #12
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8004f0e:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8004f10:	7881      	ldrb	r1, [r0, #2]
            ucBuf[1] = 0;
 8004f12:	2000      	movs	r0, #0
 8004f14:	f88d 0005 	strb.w	r0, [sp, #5]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8004f18:	2aff      	cmp	r2, #255	; 0xff
 8004f1a:	bf14      	ite	ne
 8004f1c:	2200      	movne	r2, #0
 8004f1e:	2201      	moveq	r2, #1
 8004f20:	f88d 2004 	strb.w	r2, [sp, #4]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8004f24:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8004f28:	3101      	adds	r1, #1
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	b289      	uxth	r1, r1
 8004f30:	a801      	add	r0, sp, #4
 8004f32:	f000 fcd5 	bl	80058e0 <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 8004f36:	b910      	cbnz	r0, 8004f3e <eMBFuncWriteCoil+0x4c>
    }
    return eStatus;
}
 8004f38:	b003      	add	sp, #12
 8004f3a:	f85d fb04 	ldr.w	pc, [sp], #4
                eStatus = prveMBError2Exception( eRegStatus );
 8004f3e:	f000 fae9 	bl	8005514 <prveMBError2Exception>
 8004f42:	e7f9      	b.n	8004f38 <eMBFuncWriteCoil+0x46>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004f44:	2003      	movs	r0, #3
 8004f46:	4770      	bx	lr
 8004f48:	2003      	movs	r0, #3
}
 8004f4a:	4770      	bx	lr

08004f4c <eMBFuncWriteMultipleCoils>:
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8004f4c:	880b      	ldrh	r3, [r1, #0]
 8004f4e:	2b05      	cmp	r3, #5
 8004f50:	d928      	bls.n	8004fa4 <eMBFuncWriteMultipleCoils+0x58>
{
 8004f52:	b510      	push	{r4, lr}
 8004f54:	460c      	mov	r4, r1
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 8004f56:	78c2      	ldrb	r2, [r0, #3]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 8004f58:	7903      	ldrb	r3, [r0, #4]
 8004f5a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8004f5e:	f013 0f07 	tst.w	r3, #7
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 8004f62:	bf1d      	ittte	ne
 8004f64:	08d1      	lsrne	r1, r2, #3
 8004f66:	3101      	addne	r1, #1
 8004f68:	b2c9      	uxtbne	r1, r1
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 8004f6a:	f3c2 01c7 	ubfxeq	r1, r2, #3, #8
        }

        if( ( usCoilCnt >= 1 ) &&
 8004f6e:	1e53      	subs	r3, r2, #1
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	f5b3 6ff6 	cmp.w	r3, #1968	; 0x7b0
 8004f76:	d217      	bcs.n	8004fa8 <eMBFuncWriteMultipleCoils+0x5c>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 8004f78:	7943      	ldrb	r3, [r0, #5]
 8004f7a:	428b      	cmp	r3, r1
 8004f7c:	d001      	beq.n	8004f82 <eMBFuncWriteMultipleCoils+0x36>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004f7e:	2003      	movs	r0, #3
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8004f80:	bd10      	pop	{r4, pc}
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8004f82:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8004f84:	7881      	ldrb	r1, [r0, #2]
 8004f86:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8004f8a:	3101      	adds	r1, #1
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	b289      	uxth	r1, r1
 8004f90:	3006      	adds	r0, #6
 8004f92:	f000 fca5 	bl	80058e0 <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 8004f96:	b910      	cbnz	r0, 8004f9e <eMBFuncWriteMultipleCoils+0x52>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8004f98:	2305      	movs	r3, #5
 8004f9a:	8023      	strh	r3, [r4, #0]
 8004f9c:	e7f0      	b.n	8004f80 <eMBFuncWriteMultipleCoils+0x34>
                eStatus = prveMBError2Exception( eRegStatus );
 8004f9e:	f000 fab9 	bl	8005514 <prveMBError2Exception>
 8004fa2:	e7ed      	b.n	8004f80 <eMBFuncWriteMultipleCoils+0x34>
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004fa4:	2003      	movs	r0, #3
}
 8004fa6:	4770      	bx	lr
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004fa8:	2003      	movs	r0, #3
 8004faa:	e7e9      	b.n	8004f80 <eMBFuncWriteMultipleCoils+0x34>

08004fac <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_DISCRETE_INPUTS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 8004fac:	b538      	push	{r3, r4, r5, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8004fae:	880b      	ldrh	r3, [r1, #0]
 8004fb0:	2b05      	cmp	r3, #5
 8004fb2:	d001      	beq.n	8004fb8 <eMBFuncReadDiscreteInputs+0xc>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004fb4:	2003      	movs	r0, #3
    }
    return eStatus;
}
 8004fb6:	bd38      	pop	{r3, r4, r5, pc}
 8004fb8:	460c      	mov	r4, r1
        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 8004fba:	78c3      	ldrb	r3, [r0, #3]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 8004fbc:	7902      	ldrb	r2, [r0, #4]
 8004fbe:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
        if( ( usDiscreteCnt >= 1 ) &&
 8004fc2:	1e53      	subs	r3, r2, #1
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	f240 71ce 	movw	r1, #1998	; 0x7ce
 8004fca:	428b      	cmp	r3, r1
 8004fcc:	d824      	bhi.n	8005018 <eMBFuncReadDiscreteInputs+0x6c>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8004fce:	f890 c001 	ldrb.w	ip, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8004fd2:	7881      	ldrb	r1, [r0, #2]
            *usLen = MB_PDU_FUNC_OFF;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 8004fd8:	2302      	movs	r3, #2
 8004fda:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 8004fdc:	8823      	ldrh	r3, [r4, #0]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	8023      	strh	r3, [r4, #0]
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 8004fe2:	f012 0f07 	tst.w	r2, #7
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 8004fe6:	bf1d      	ittte	ne
 8004fe8:	08d5      	lsrne	r5, r2, #3
 8004fea:	3501      	addne	r5, #1
 8004fec:	b2ed      	uxtbne	r5, r5
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 8004fee:	f3c2 05c7 	ubfxeq	r5, r2, #3, #8
            *pucFrameCur++ = ucNBytes;
 8004ff2:	7045      	strb	r5, [r0, #1]
            *usLen += 1;
 8004ff4:	8823      	ldrh	r3, [r4, #0]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	8023      	strh	r3, [r4, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8004ffa:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
        usRegAddress++;
 8004ffe:	3101      	adds	r1, #1
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 8005000:	b289      	uxth	r1, r1
 8005002:	3002      	adds	r0, #2
 8005004:	f000 fcde 	bl	80059c4 <eMBRegDiscreteCB>
            if( eRegStatus != MB_ENOERR )
 8005008:	b918      	cbnz	r0, 8005012 <eMBFuncReadDiscreteInputs+0x66>
                *usLen += ucNBytes;;
 800500a:	8823      	ldrh	r3, [r4, #0]
 800500c:	441d      	add	r5, r3
 800500e:	8025      	strh	r5, [r4, #0]
 8005010:	e7d1      	b.n	8004fb6 <eMBFuncReadDiscreteInputs+0xa>
                eStatus = prveMBError2Exception( eRegStatus );
 8005012:	f000 fa7f 	bl	8005514 <prveMBError2Exception>
 8005016:	e7ce      	b.n	8004fb6 <eMBFuncReadDiscreteInputs+0xa>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8005018:	2003      	movs	r0, #3
 800501a:	e7cc      	b.n	8004fb6 <eMBFuncReadDiscreteInputs+0xa>

0800501c <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800501c:	b508      	push	{r3, lr}
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 800501e:	880b      	ldrh	r3, [r1, #0]
 8005020:	2b05      	cmp	r3, #5
 8005022:	d001      	beq.n	8005028 <eMBFuncWriteHoldingRegister+0xc>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8005024:	2003      	movs	r0, #3
    }
    return eStatus;
}
 8005026:	bd08      	pop	{r3, pc}
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8005028:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 800502a:	7881      	ldrb	r1, [r0, #2]
 800502c:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8005030:	3101      	adds	r1, #1
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8005032:	2301      	movs	r3, #1
 8005034:	461a      	mov	r2, r3
 8005036:	b289      	uxth	r1, r1
 8005038:	3003      	adds	r0, #3
 800503a:	f000 fc07 	bl	800584c <eMBRegHoldingCB>
        if( eRegStatus != MB_ENOERR )
 800503e:	2800      	cmp	r0, #0
 8005040:	d0f1      	beq.n	8005026 <eMBFuncWriteHoldingRegister+0xa>
            eStatus = prveMBError2Exception( eRegStatus );
 8005042:	f000 fa67 	bl	8005514 <prveMBError2Exception>
 8005046:	e7ee      	b.n	8005026 <eMBFuncWriteHoldingRegister+0xa>

08005048 <eMBFuncWriteMultipleHoldingRegister>:
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8005048:	880b      	ldrh	r3, [r1, #0]
 800504a:	2b05      	cmp	r3, #5
 800504c:	d921      	bls.n	8005092 <eMBFuncWriteMultipleHoldingRegister+0x4a>
{
 800504e:	b510      	push	{r4, lr}
 8005050:	460c      	mov	r4, r1
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 8005052:	78c3      	ldrb	r3, [r0, #3]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 8005054:	7902      	ldrb	r2, [r0, #4]
 8005056:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];

        if( ( usRegCount >= 1 ) &&
 800505a:	1e53      	subs	r3, r2, #1
 800505c:	b29b      	uxth	r3, r3
 800505e:	2b77      	cmp	r3, #119	; 0x77
 8005060:	d819      	bhi.n	8005096 <eMBFuncWriteMultipleHoldingRegister+0x4e>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 8005062:	0053      	lsls	r3, r2, #1
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 8005064:	7941      	ldrb	r1, [r0, #5]
 8005066:	b2db      	uxtb	r3, r3
 8005068:	4299      	cmp	r1, r3
 800506a:	d001      	beq.n	8005070 <eMBFuncWriteMultipleHoldingRegister+0x28>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800506c:	2003      	movs	r0, #3
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 800506e:	bd10      	pop	{r4, pc}
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8005070:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8005072:	7881      	ldrb	r1, [r0, #2]
 8005074:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8005078:	3101      	adds	r1, #1
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 800507a:	2301      	movs	r3, #1
 800507c:	b289      	uxth	r1, r1
 800507e:	3006      	adds	r0, #6
 8005080:	f000 fbe4 	bl	800584c <eMBRegHoldingCB>
            if( eRegStatus != MB_ENOERR )
 8005084:	b910      	cbnz	r0, 800508c <eMBFuncWriteMultipleHoldingRegister+0x44>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8005086:	2305      	movs	r3, #5
 8005088:	8023      	strh	r3, [r4, #0]
 800508a:	e7f0      	b.n	800506e <eMBFuncWriteMultipleHoldingRegister+0x26>
                eStatus = prveMBError2Exception( eRegStatus );
 800508c:	f000 fa42 	bl	8005514 <prveMBError2Exception>
 8005090:	e7ed      	b.n	800506e <eMBFuncWriteMultipleHoldingRegister+0x26>
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8005092:	2003      	movs	r0, #3
}
 8005094:	4770      	bx	lr
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8005096:	2003      	movs	r0, #3
 8005098:	e7e9      	b.n	800506e <eMBFuncWriteMultipleHoldingRegister+0x26>

0800509a <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800509a:	b538      	push	{r3, r4, r5, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800509c:	880b      	ldrh	r3, [r1, #0]
 800509e:	2b05      	cmp	r3, #5
 80050a0:	d001      	beq.n	80050a6 <eMBFuncReadHoldingRegister+0xc>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80050a2:	2003      	movs	r0, #3
    }
    return eStatus;
}
 80050a4:	bd38      	pop	{r3, r4, r5, pc}
 80050a6:	460c      	mov	r4, r1
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 80050a8:	78c3      	ldrb	r3, [r0, #3]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 80050aa:	7905      	ldrb	r5, [r0, #4]
 80050ac:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 80050b0:	1e6b      	subs	r3, r5, #1
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	2b7c      	cmp	r3, #124	; 0x7c
 80050b6:	d901      	bls.n	80050bc <eMBFuncReadHoldingRegister+0x22>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80050b8:	2003      	movs	r0, #3
 80050ba:	e7f3      	b.n	80050a4 <eMBFuncReadHoldingRegister+0xa>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80050bc:	f890 c001 	ldrb.w	ip, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80050c0:	7881      	ldrb	r1, [r0, #2]
            *usLen = MB_PDU_FUNC_OFF;
 80050c2:	2300      	movs	r3, #0
 80050c4:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 80050c6:	2203      	movs	r2, #3
 80050c8:	7002      	strb	r2, [r0, #0]
            *usLen += 1;
 80050ca:	8822      	ldrh	r2, [r4, #0]
 80050cc:	3201      	adds	r2, #1
 80050ce:	8022      	strh	r2, [r4, #0]
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 80050d0:	006a      	lsls	r2, r5, #1
 80050d2:	7042      	strb	r2, [r0, #1]
            *usLen += 1;
 80050d4:	8822      	ldrh	r2, [r4, #0]
 80050d6:	3201      	adds	r2, #1
 80050d8:	8022      	strh	r2, [r4, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80050da:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
        usRegAddress++;
 80050de:	3101      	adds	r1, #1
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 80050e0:	462a      	mov	r2, r5
 80050e2:	b289      	uxth	r1, r1
 80050e4:	3002      	adds	r0, #2
 80050e6:	f000 fbb1 	bl	800584c <eMBRegHoldingCB>
            if( eRegStatus != MB_ENOERR )
 80050ea:	b920      	cbnz	r0, 80050f6 <eMBFuncReadHoldingRegister+0x5c>
                *usLen += usRegCount * 2;
 80050ec:	8823      	ldrh	r3, [r4, #0]
 80050ee:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80050f2:	8025      	strh	r5, [r4, #0]
 80050f4:	e7d6      	b.n	80050a4 <eMBFuncReadHoldingRegister+0xa>
                eStatus = prveMBError2Exception( eRegStatus );
 80050f6:	f000 fa0d 	bl	8005514 <prveMBError2Exception>
 80050fa:	e7d3      	b.n	80050a4 <eMBFuncReadHoldingRegister+0xa>

080050fc <eMBFuncReadWriteMultipleHoldingRegister>:
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 80050fc:	880b      	ldrh	r3, [r1, #0]
 80050fe:	2b09      	cmp	r3, #9
 8005100:	d945      	bls.n	800518e <eMBFuncReadWriteMultipleHoldingRegister+0x92>
{
 8005102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005106:	4604      	mov	r4, r0
 8005108:	460d      	mov	r5, r1
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 800510a:	78c3      	ldrb	r3, [r0, #3]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 800510c:	7906      	ldrb	r6, [r0, #4]
 800510e:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8005112:	1e73      	subs	r3, r6, #1
 8005114:	b29b      	uxth	r3, r3
 8005116:	2b7c      	cmp	r3, #124	; 0x7c
 8005118:	d83b      	bhi.n	8005192 <eMBFuncReadWriteMultipleHoldingRegister+0x96>
        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 800511a:	79c3      	ldrb	r3, [r0, #7]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 800511c:	7a02      	ldrb	r2, [r0, #8]
 800511e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8005122:	1e53      	subs	r3, r2, #1
 8005124:	b29b      	uxth	r3, r3
 8005126:	2b78      	cmp	r3, #120	; 0x78
 8005128:	d836      	bhi.n	8005198 <eMBFuncReadWriteMultipleHoldingRegister+0x9c>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 800512a:	7a43      	ldrb	r3, [r0, #9]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 800512c:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8005130:	d001      	beq.n	8005136 <eMBFuncReadWriteMultipleHoldingRegister+0x3a>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8005132:	2003      	movs	r0, #3
 8005134:	e02e      	b.n	8005194 <eMBFuncReadWriteMultipleHoldingRegister+0x98>
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 8005136:	f890 8001 	ldrb.w	r8, [r0, #1]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 800513a:	7887      	ldrb	r7, [r0, #2]
        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 800513c:	7943      	ldrb	r3, [r0, #5]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 800513e:	7981      	ldrb	r1, [r0, #6]
 8005140:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegWriteAddress++;
 8005144:	3101      	adds	r1, #1
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 8005146:	2301      	movs	r3, #1
 8005148:	b289      	uxth	r1, r1
 800514a:	300a      	adds	r0, #10
 800514c:	f000 fb7e 	bl	800584c <eMBRegHoldingCB>
 8005150:	4603      	mov	r3, r0
            if( eRegStatus == MB_ENOERR )
 8005152:	b110      	cbz	r0, 800515a <eMBFuncReadWriteMultipleHoldingRegister+0x5e>
                eStatus = prveMBError2Exception( eRegStatus );
 8005154:	f000 f9de 	bl	8005514 <prveMBError2Exception>
        }
    }
    return eStatus;
 8005158:	e01c      	b.n	8005194 <eMBFuncReadWriteMultipleHoldingRegister+0x98>
                *usLen = MB_PDU_FUNC_OFF;
 800515a:	8028      	strh	r0, [r5, #0]
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 800515c:	2217      	movs	r2, #23
 800515e:	7022      	strb	r2, [r4, #0]
                *usLen += 1;
 8005160:	882a      	ldrh	r2, [r5, #0]
 8005162:	3201      	adds	r2, #1
 8005164:	802a      	strh	r2, [r5, #0]
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8005166:	0072      	lsls	r2, r6, #1
 8005168:	7062      	strb	r2, [r4, #1]
                *usLen += 1;
 800516a:	882a      	ldrh	r2, [r5, #0]
 800516c:	3201      	adds	r2, #1
 800516e:	802a      	strh	r2, [r5, #0]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8005170:	ea47 2108 	orr.w	r1, r7, r8, lsl #8
        usRegReadAddress++;
 8005174:	3101      	adds	r1, #1
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 8005176:	4632      	mov	r2, r6
 8005178:	b289      	uxth	r1, r1
 800517a:	1ca0      	adds	r0, r4, #2
 800517c:	f000 fb66 	bl	800584c <eMBRegHoldingCB>
                if( eRegStatus == MB_ENOERR )
 8005180:	2800      	cmp	r0, #0
 8005182:	d1e7      	bne.n	8005154 <eMBFuncReadWriteMultipleHoldingRegister+0x58>
                    *usLen += 2 * usRegReadCount;
 8005184:	882b      	ldrh	r3, [r5, #0]
 8005186:	eb03 0646 	add.w	r6, r3, r6, lsl #1
 800518a:	802e      	strh	r6, [r5, #0]
            if( eRegStatus != MB_ENOERR )
 800518c:	e002      	b.n	8005194 <eMBFuncReadWriteMultipleHoldingRegister+0x98>
    eMBException    eStatus = MB_EX_NONE;
 800518e:	2000      	movs	r0, #0
}
 8005190:	4770      	bx	lr
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8005192:	2003      	movs	r0, #3
}
 8005194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8005198:	2003      	movs	r0, #3
 800519a:	e7fb      	b.n	8005194 <eMBFuncReadWriteMultipleHoldingRegister+0x98>

0800519c <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800519c:	b538      	push	{r3, r4, r5, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800519e:	880b      	ldrh	r3, [r1, #0]
 80051a0:	2b05      	cmp	r3, #5
 80051a2:	d001      	beq.n	80051a8 <eMBFuncReadInputRegister+0xc>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80051a4:	2003      	movs	r0, #3
    }
    return eStatus;
}
 80051a6:	bd38      	pop	{r3, r4, r5, pc}
 80051a8:	460c      	mov	r4, r1
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 80051aa:	78c3      	ldrb	r3, [r0, #3]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 80051ac:	7905      	ldrb	r5, [r0, #4]
 80051ae:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 80051b2:	1e6b      	subs	r3, r5, #1
        if( ( usRegCount >= 1 )
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	2b7b      	cmp	r3, #123	; 0x7b
 80051b8:	d901      	bls.n	80051be <eMBFuncReadInputRegister+0x22>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80051ba:	2003      	movs	r0, #3
 80051bc:	e7f3      	b.n	80051a6 <eMBFuncReadInputRegister+0xa>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80051be:	7842      	ldrb	r2, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80051c0:	7881      	ldrb	r1, [r0, #2]
            *usLen = MB_PDU_FUNC_OFF;
 80051c2:	2300      	movs	r3, #0
 80051c4:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 80051c6:	2304      	movs	r3, #4
 80051c8:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 80051ca:	8823      	ldrh	r3, [r4, #0]
 80051cc:	3301      	adds	r3, #1
 80051ce:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 80051d0:	006b      	lsls	r3, r5, #1
 80051d2:	7043      	strb	r3, [r0, #1]
            *usLen += 1;
 80051d4:	8823      	ldrh	r3, [r4, #0]
 80051d6:	3301      	adds	r3, #1
 80051d8:	8023      	strh	r3, [r4, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80051da:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
        usRegAddress++;
 80051de:	3101      	adds	r1, #1
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 80051e0:	462a      	mov	r2, r5
 80051e2:	b289      	uxth	r1, r1
 80051e4:	3002      	adds	r0, #2
 80051e6:	f000 fb05 	bl	80057f4 <eMBRegInputCB>
            if( eRegStatus != MB_ENOERR )
 80051ea:	b920      	cbnz	r0, 80051f6 <eMBFuncReadInputRegister+0x5a>
                *usLen += usRegCount * 2;
 80051ec:	8823      	ldrh	r3, [r4, #0]
 80051ee:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80051f2:	8025      	strh	r5, [r4, #0]
 80051f4:	e7d7      	b.n	80051a6 <eMBFuncReadInputRegister+0xa>
                eStatus = prveMBError2Exception( eRegStatus );
 80051f6:	f000 f98d 	bl	8005514 <prveMBError2Exception>
 80051fa:	e7d4      	b.n	80051a6 <eMBFuncReadInputRegister+0xa>

080051fc <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 80051fc:	b538      	push	{r3, r4, r5, lr}
 80051fe:	460d      	mov	r5, r1
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8005200:	4b05      	ldr	r3, [pc, #20]	; (8005218 <eMBFuncReportSlaveID+0x1c>)
 8005202:	881c      	ldrh	r4, [r3, #0]
 8005204:	4622      	mov	r2, r4
 8005206:	4905      	ldr	r1, [pc, #20]	; (800521c <eMBFuncReportSlaveID+0x20>)
 8005208:	3001      	adds	r0, #1
 800520a:	f002 fbff 	bl	8007a0c <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 800520e:	3401      	adds	r4, #1
 8005210:	802c      	strh	r4, [r5, #0]
    return MB_EX_NONE;
}
 8005212:	2000      	movs	r0, #0
 8005214:	bd38      	pop	{r3, r4, r5, pc}
 8005216:	bf00      	nop
 8005218:	20001578 	.word	0x20001578
 800521c:	20001558 	.word	0x20001558

08005220 <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8005220:	b570      	push	{r4, r5, r6, lr}
 8005222:	460d      	mov	r5, r1
 8005224:	4614      	mov	r4, r2
 8005226:	461e      	mov	r6, r3
    eMBErrorCode    eStatus = MB_ENOERR;
    ULONG           usTimerT35_50us;

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );
 8005228:	f000 f980 	bl	800552c <EnterCriticalSection>

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 800522c:	4633      	mov	r3, r6
 800522e:	2208      	movs	r2, #8
 8005230:	4621      	mov	r1, r4
 8005232:	4628      	mov	r0, r5
 8005234:	f000 f9d8 	bl	80055e8 <xMBPortSerialInit>
 8005238:	2801      	cmp	r0, #1
 800523a:	d004      	beq.n	8005246 <eMBRTUInit+0x26>
    {
        eStatus = MB_EPORTERR;
 800523c:	2403      	movs	r4, #3
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
        {
            eStatus = MB_EPORTERR;
        }
    }
    EXIT_CRITICAL_SECTION(  );
 800523e:	f000 f976 	bl	800552e <ExitCriticalSection>

    return eStatus;
}
 8005242:	4620      	mov	r0, r4
 8005244:	bd70      	pop	{r4, r5, r6, pc}
        if( ulBaudRate > 19200 )
 8005246:	f5b4 4f96 	cmp.w	r4, #19200	; 0x4b00
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 800524a:	bf9d      	ittte	ls
 800524c:	0064      	lslls	r4, r4, #1
 800524e:	4806      	ldrls	r0, [pc, #24]	; (8005268 <eMBRTUInit+0x48>)
 8005250:	fbb0 f0f4 	udivls	r0, r0, r4
            usTimerT35_50us = 35;       /* 1800us. */
 8005254:	2023      	movhi	r0, #35	; 0x23
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 8005256:	b280      	uxth	r0, r0
 8005258:	f000 fa8a 	bl	8005770 <xMBPortTimersInit>
            eStatus = MB_EPORTERR;
 800525c:	2801      	cmp	r0, #1
 800525e:	bf0c      	ite	eq
 8005260:	2400      	moveq	r4, #0
 8005262:	2403      	movne	r4, #3
 8005264:	e7eb      	b.n	800523e <eMBRTUInit+0x1e>
 8005266:	bf00      	nop
 8005268:	00177fa0 	.word	0x00177fa0

0800526c <eMBRTUStart>:

void
eMBRTUStart( void )
{
 800526c:	b508      	push	{r3, lr}
    ENTER_CRITICAL_SECTION(  );
 800526e:	f000 f95d 	bl	800552c <EnterCriticalSection>
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 8005272:	2100      	movs	r1, #0
 8005274:	4b04      	ldr	r3, [pc, #16]	; (8005288 <eMBRTUStart+0x1c>)
 8005276:	7019      	strb	r1, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE );
 8005278:	2001      	movs	r0, #1
 800527a:	f000 f9d9 	bl	8005630 <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
 800527e:	f000 fa7c 	bl	800577a <vMBPortTimersEnable>

    EXIT_CRITICAL_SECTION(  );
 8005282:	f000 f954 	bl	800552e <ExitCriticalSection>
}
 8005286:	bd08      	pop	{r3, pc}
 8005288:	2000157a 	.word	0x2000157a

0800528c <eMBRTUStop>:

void
eMBRTUStop( void )
{
 800528c:	b508      	push	{r3, lr}
    ENTER_CRITICAL_SECTION(  );
 800528e:	f000 f94d 	bl	800552c <EnterCriticalSection>
    vMBPortSerialEnable( FALSE, FALSE );
 8005292:	2100      	movs	r1, #0
 8005294:	4608      	mov	r0, r1
 8005296:	f000 f9cb 	bl	8005630 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
 800529a:	f000 fa72 	bl	8005782 <vMBPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
 800529e:	f000 f946 	bl	800552e <ExitCriticalSection>
}
 80052a2:	bd08      	pop	{r3, pc}

080052a4 <eMBRTUReceive>:

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 80052a4:	b570      	push	{r4, r5, r6, lr}
 80052a6:	4606      	mov	r6, r0
 80052a8:	460d      	mov	r5, r1
 80052aa:	4614      	mov	r4, r2
    eMBErrorCode    eStatus = MB_ENOERR;

    ENTER_CRITICAL_SECTION(  );
 80052ac:	f000 f93e 	bl	800552c <EnterCriticalSection>
//    assert_param( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 80052b0:	4b0e      	ldr	r3, [pc, #56]	; (80052ec <eMBRTUReceive+0x48>)
 80052b2:	881b      	ldrh	r3, [r3, #0]
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	2b03      	cmp	r3, #3
 80052b8:	d804      	bhi.n	80052c4 <eMBRTUReceive+0x20>
        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
    }
    else
    {
        eStatus = MB_EIO;
 80052ba:	2405      	movs	r4, #5
    }

    EXIT_CRITICAL_SECTION(  );
 80052bc:	f000 f937 	bl	800552e <ExitCriticalSection>
    return eStatus;
}
 80052c0:	4620      	mov	r0, r4
 80052c2:	bd70      	pop	{r4, r5, r6, pc}
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 80052c4:	4b09      	ldr	r3, [pc, #36]	; (80052ec <eMBRTUReceive+0x48>)
 80052c6:	8819      	ldrh	r1, [r3, #0]
 80052c8:	b289      	uxth	r1, r1
 80052ca:	4809      	ldr	r0, [pc, #36]	; (80052f0 <eMBRTUReceive+0x4c>)
 80052cc:	f7ff fdb6 	bl	8004e3c <usMBCRC16>
 80052d0:	b950      	cbnz	r0, 80052e8 <eMBRTUReceive+0x44>
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 80052d2:	4b07      	ldr	r3, [pc, #28]	; (80052f0 <eMBRTUReceive+0x4c>)
 80052d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052d8:	7032      	strb	r2, [r6, #0]
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 80052da:	4a04      	ldr	r2, [pc, #16]	; (80052ec <eMBRTUReceive+0x48>)
 80052dc:	8812      	ldrh	r2, [r2, #0]
 80052de:	3a03      	subs	r2, #3
 80052e0:	8022      	strh	r2, [r4, #0]
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 80052e2:	602b      	str	r3, [r5, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 80052e4:	2400      	movs	r4, #0
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 80052e6:	e7e9      	b.n	80052bc <eMBRTUReceive+0x18>
        eStatus = MB_EIO;
 80052e8:	2405      	movs	r4, #5
 80052ea:	e7e7      	b.n	80052bc <eMBRTUReceive+0x18>
 80052ec:	20001680 	.word	0x20001680
 80052f0:	20001580 	.word	0x20001580

080052f4 <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 80052f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052f8:	4605      	mov	r5, r0
 80052fa:	460c      	mov	r4, r1
 80052fc:	4690      	mov	r8, r2
    eMBErrorCode    eStatus = MB_ENOERR;
    USHORT          usCRC16;

    ENTER_CRITICAL_SECTION(  );
 80052fe:	f000 f915 	bl	800552c <EnterCriticalSection>

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
 8005302:	4b19      	ldr	r3, [pc, #100]	; (8005368 <eMBRTUSend+0x74>)
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	b2db      	uxtb	r3, r3
 8005308:	2b01      	cmp	r3, #1
 800530a:	d005      	beq.n	8005318 <eMBRTUSend+0x24>
        eSndState = STATE_TX_XMIT;
        vMBPortSerialEnable( FALSE, TRUE );
    }
    else
    {
        eStatus = MB_EIO;
 800530c:	2405      	movs	r4, #5
    }
    EXIT_CRITICAL_SECTION(  );
 800530e:	f000 f90e 	bl	800552e <ExitCriticalSection>
    return eStatus;
}
 8005312:	4620      	mov	r0, r4
 8005314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 8005318:	1e60      	subs	r0, r4, #1
 800531a:	4b14      	ldr	r3, [pc, #80]	; (800536c <eMBRTUSend+0x78>)
 800531c:	6018      	str	r0, [r3, #0]
        usSndBufferCount = 1;
 800531e:	4f14      	ldr	r7, [pc, #80]	; (8005370 <eMBRTUSend+0x7c>)
 8005320:	2601      	movs	r6, #1
 8005322:	803e      	strh	r6, [r7, #0]
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 8005324:	f804 5c01 	strb.w	r5, [r4, #-1]
        usSndBufferCount += usLength;
 8005328:	883a      	ldrh	r2, [r7, #0]
 800532a:	4442      	add	r2, r8
 800532c:	b292      	uxth	r2, r2
 800532e:	803a      	strh	r2, [r7, #0]
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 8005330:	8839      	ldrh	r1, [r7, #0]
 8005332:	b289      	uxth	r1, r1
 8005334:	f7ff fd82 	bl	8004e3c <usMBCRC16>
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 8005338:	883b      	ldrh	r3, [r7, #0]
 800533a:	b29b      	uxth	r3, r3
 800533c:	199a      	adds	r2, r3, r6
 800533e:	b292      	uxth	r2, r2
 8005340:	803a      	strh	r2, [r7, #0]
 8005342:	b2c2      	uxtb	r2, r0
 8005344:	490b      	ldr	r1, [pc, #44]	; (8005374 <eMBRTUSend+0x80>)
 8005346:	54ca      	strb	r2, [r1, r3]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 8005348:	883b      	ldrh	r3, [r7, #0]
 800534a:	b29b      	uxth	r3, r3
 800534c:	199a      	adds	r2, r3, r6
 800534e:	b292      	uxth	r2, r2
 8005350:	803a      	strh	r2, [r7, #0]
 8005352:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8005356:	54c8      	strb	r0, [r1, r3]
        eSndState = STATE_TX_XMIT;
 8005358:	4b07      	ldr	r3, [pc, #28]	; (8005378 <eMBRTUSend+0x84>)
 800535a:	701e      	strb	r6, [r3, #0]
        vMBPortSerialEnable( FALSE, TRUE );
 800535c:	4631      	mov	r1, r6
 800535e:	2000      	movs	r0, #0
 8005360:	f000 f966 	bl	8005630 <vMBPortSerialEnable>
    eMBErrorCode    eStatus = MB_ENOERR;
 8005364:	2400      	movs	r4, #0
 8005366:	e7d2      	b.n	800530e <eMBRTUSend+0x1a>
 8005368:	2000157a 	.word	0x2000157a
 800536c:	2000157c 	.word	0x2000157c
 8005370:	20001682 	.word	0x20001682
 8005374:	20001580 	.word	0x20001580
 8005378:	2000157b 	.word	0x2000157b

0800537c <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )
{
 800537c:	b500      	push	{lr}
 800537e:	b083      	sub	sp, #12
    UCHAR           ucByte;

  //  assert_param( eSndState == STATE_TX_IDLE );

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 8005380:	f10d 0007 	add.w	r0, sp, #7
 8005384:	f000 f99e 	bl	80056c4 <xMBPortSerialGetByte>

    switch ( eRcvState )
 8005388:	4b1c      	ldr	r3, [pc, #112]	; (80053fc <xMBRTUReceiveFSM+0x80>)
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b03      	cmp	r3, #3
 8005390:	d805      	bhi.n	800539e <xMBRTUReceiveFSM+0x22>
 8005392:	e8df f003 	tbb	[pc, r3]
 8005396:	0b02      	.short	0x0b02
 8005398:	081d      	.short	0x081d
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_RX_INIT:
        vMBPortTimersEnable( );
 800539a:	f000 f9ee 	bl	800577a <vMBPortTimersEnable>
        }
        vMBPortTimersEnable();
        break;
    }
    return xTaskNeedSwitch;
}
 800539e:	2000      	movs	r0, #0
 80053a0:	b003      	add	sp, #12
 80053a2:	f85d fb04 	ldr.w	pc, [sp], #4
        vMBPortTimersEnable( );
 80053a6:	f000 f9e8 	bl	800577a <vMBPortTimersEnable>
        break;
 80053aa:	e7f8      	b.n	800539e <xMBRTUReceiveFSM+0x22>
        usRcvBufferPos = 0;
 80053ac:	4a14      	ldr	r2, [pc, #80]	; (8005400 <xMBRTUReceiveFSM+0x84>)
 80053ae:	2300      	movs	r3, #0
 80053b0:	8013      	strh	r3, [r2, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 80053b2:	8813      	ldrh	r3, [r2, #0]
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	1c59      	adds	r1, r3, #1
 80053b8:	b289      	uxth	r1, r1
 80053ba:	8011      	strh	r1, [r2, #0]
 80053bc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80053c0:	4a10      	ldr	r2, [pc, #64]	; (8005404 <xMBRTUReceiveFSM+0x88>)
 80053c2:	54d1      	strb	r1, [r2, r3]
        eRcvState = STATE_RX_RCV;
 80053c4:	4b0d      	ldr	r3, [pc, #52]	; (80053fc <xMBRTUReceiveFSM+0x80>)
 80053c6:	2202      	movs	r2, #2
 80053c8:	701a      	strb	r2, [r3, #0]
        vMBPortTimersEnable( );
 80053ca:	f000 f9d6 	bl	800577a <vMBPortTimersEnable>
        break;
 80053ce:	e7e6      	b.n	800539e <xMBRTUReceiveFSM+0x22>
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 80053d0:	4b0b      	ldr	r3, [pc, #44]	; (8005400 <xMBRTUReceiveFSM+0x84>)
 80053d2:	881b      	ldrh	r3, [r3, #0]
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	2bff      	cmp	r3, #255	; 0xff
 80053d8:	d80c      	bhi.n	80053f4 <xMBRTUReceiveFSM+0x78>
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 80053da:	4909      	ldr	r1, [pc, #36]	; (8005400 <xMBRTUReceiveFSM+0x84>)
 80053dc:	880b      	ldrh	r3, [r1, #0]
 80053de:	b29b      	uxth	r3, r3
 80053e0:	1c5a      	adds	r2, r3, #1
 80053e2:	b292      	uxth	r2, r2
 80053e4:	800a      	strh	r2, [r1, #0]
 80053e6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80053ea:	4a06      	ldr	r2, [pc, #24]	; (8005404 <xMBRTUReceiveFSM+0x88>)
 80053ec:	54d1      	strb	r1, [r2, r3]
        vMBPortTimersEnable();
 80053ee:	f000 f9c4 	bl	800577a <vMBPortTimersEnable>
        break;
 80053f2:	e7d4      	b.n	800539e <xMBRTUReceiveFSM+0x22>
            eRcvState = STATE_RX_ERROR;
 80053f4:	4b01      	ldr	r3, [pc, #4]	; (80053fc <xMBRTUReceiveFSM+0x80>)
 80053f6:	2203      	movs	r2, #3
 80053f8:	701a      	strb	r2, [r3, #0]
 80053fa:	e7f8      	b.n	80053ee <xMBRTUReceiveFSM+0x72>
 80053fc:	2000157a 	.word	0x2000157a
 8005400:	20001680 	.word	0x20001680
 8005404:	20001580 	.word	0x20001580

08005408 <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
 8005408:	b510      	push	{r4, lr}
    BOOL            xNeedPoll = FALSE;

   // assert_param( eRcvState == STATE_RX_IDLE );

    switch ( eSndState )
 800540a:	4b17      	ldr	r3, [pc, #92]	; (8005468 <xMBRTUTransmitFSM+0x60>)
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 8005412:	b123      	cbz	r3, 800541e <xMBRTUTransmitFSM+0x16>
 8005414:	2c01      	cmp	r4, #1
 8005416:	d007      	beq.n	8005428 <xMBRTUTransmitFSM+0x20>
 8005418:	2400      	movs	r4, #0
        }
        break;
    }

    return xNeedPoll;
}
 800541a:	4620      	mov	r0, r4
 800541c:	bd10      	pop	{r4, pc}
        vMBPortSerialEnable( TRUE, FALSE );
 800541e:	2100      	movs	r1, #0
 8005420:	2001      	movs	r0, #1
 8005422:	f000 f905 	bl	8005630 <vMBPortSerialEnable>
        break;
 8005426:	e7f8      	b.n	800541a <xMBRTUTransmitFSM+0x12>
        if( usSndBufferCount != 0 )
 8005428:	4b10      	ldr	r3, [pc, #64]	; (800546c <xMBRTUTransmitFSM+0x64>)
 800542a:	881b      	ldrh	r3, [r3, #0]
 800542c:	b29b      	uxth	r3, r3
 800542e:	b173      	cbz	r3, 800544e <xMBRTUTransmitFSM+0x46>
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 8005430:	4c0f      	ldr	r4, [pc, #60]	; (8005470 <xMBRTUTransmitFSM+0x68>)
 8005432:	6823      	ldr	r3, [r4, #0]
 8005434:	7818      	ldrb	r0, [r3, #0]
 8005436:	f000 f92d 	bl	8005694 <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
 800543a:	6823      	ldr	r3, [r4, #0]
 800543c:	3301      	adds	r3, #1
 800543e:	6023      	str	r3, [r4, #0]
            usSndBufferCount--;
 8005440:	4a0a      	ldr	r2, [pc, #40]	; (800546c <xMBRTUTransmitFSM+0x64>)
 8005442:	8813      	ldrh	r3, [r2, #0]
 8005444:	3b01      	subs	r3, #1
 8005446:	b29b      	uxth	r3, r3
 8005448:	8013      	strh	r3, [r2, #0]
    BOOL            xNeedPoll = FALSE;
 800544a:	2400      	movs	r4, #0
 800544c:	e7e5      	b.n	800541a <xMBRTUTransmitFSM+0x12>
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 800544e:	2008      	movs	r0, #8
 8005450:	f000 f878 	bl	8005544 <xMBPortEventPost>
 8005454:	4604      	mov	r4, r0
            vMBPortSerialEnable( TRUE, FALSE );
 8005456:	2100      	movs	r1, #0
 8005458:	2001      	movs	r0, #1
 800545a:	f000 f8e9 	bl	8005630 <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 800545e:	4b02      	ldr	r3, [pc, #8]	; (8005468 <xMBRTUTransmitFSM+0x60>)
 8005460:	2200      	movs	r2, #0
 8005462:	701a      	strb	r2, [r3, #0]
 8005464:	e7d9      	b.n	800541a <xMBRTUTransmitFSM+0x12>
 8005466:	bf00      	nop
 8005468:	2000157b 	.word	0x2000157b
 800546c:	20001682 	.word	0x20001682
 8005470:	2000157c 	.word	0x2000157c

08005474 <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
 8005474:	b510      	push	{r4, lr}
    BOOL            xNeedPoll = FALSE;

    switch ( eRcvState )
 8005476:	4b0c      	ldr	r3, [pc, #48]	; (80054a8 <xMBRTUTimerT35Expired+0x34>)
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	b15b      	cbz	r3, 8005494 <xMBRTUTimerT35Expired+0x20>
 800547c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005480:	2a02      	cmp	r2, #2
 8005482:	d00c      	beq.n	800549e <xMBRTUTimerT35Expired+0x2a>
 8005484:	2400      	movs	r4, #0
    //    assert_param( ( eRcvState == STATE_RX_INIT ) ||
    //            ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
         break;
    }

    vMBPortTimersDisable(  );
 8005486:	f000 f97c 	bl	8005782 <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
 800548a:	4b07      	ldr	r3, [pc, #28]	; (80054a8 <xMBRTUTimerT35Expired+0x34>)
 800548c:	2201      	movs	r2, #1
 800548e:	701a      	strb	r2, [r3, #0]

    return xNeedPoll;
}
 8005490:	4620      	mov	r0, r4
 8005492:	bd10      	pop	{r4, pc}
        xNeedPoll = xMBPortEventPost( EV_READY );
 8005494:	2001      	movs	r0, #1
 8005496:	f000 f855 	bl	8005544 <xMBPortEventPost>
 800549a:	4604      	mov	r4, r0
        break;
 800549c:	e7f3      	b.n	8005486 <xMBRTUTimerT35Expired+0x12>
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 800549e:	2002      	movs	r0, #2
 80054a0:	f000 f850 	bl	8005544 <xMBPortEventPost>
 80054a4:	4604      	mov	r4, r0
        break;
 80054a6:	e7ee      	b.n	8005486 <xMBRTUTimerT35Expired+0x12>
 80054a8:	2000157a 	.word	0x2000157a

080054ac <xMBUtilSetBits>:

/* ----------------------- Start implementation -----------------------------*/
void
xMBUtilSetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits,
                UCHAR ucValue )
{
 80054ac:	b530      	push	{r4, r5, lr}
  //  assert_param( ucNBits <= 8 );
  //  assert_param( ( size_t )BITS_UCHAR == sizeof( UCHAR ) * 8 );

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 80054ae:	08cc      	lsrs	r4, r1, #3
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 80054b0:	f104 0e01 	add.w	lr, r4, #1
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 80054b4:	f04f 0c01 	mov.w	ip, #1
 80054b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80054bc:	f10c 3cff 	add.w	ip, ip, #4294967295
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;
 80054c0:	fa1f fc8c 	uxth.w	ip, ip
 80054c4:	eba1 02c4 	sub.w	r2, r1, r4, lsl #3
 80054c8:	fa0c fc02 	lsl.w	ip, ip, r2
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 80054cc:	f810 500e 	ldrb.w	r5, [r0, lr]
 80054d0:	5d02      	ldrb	r2, [r0, r4]
 80054d2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 80054d6:	ea22 020c 	bic.w	r2, r2, ip
    usValue <<= usNPreBits;
 80054da:	f001 0107 	and.w	r1, r1, #7
 80054de:	408b      	lsls	r3, r1
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 80054e0:	4313      	orrs	r3, r2
 80054e2:	b21b      	sxth	r3, r3

    /* move bits back into storage */
    ucByteBuf[usByteOffset] = ( UCHAR )( usWordBuf & 0xFF );
 80054e4:	5503      	strb	r3, [r0, r4]
    ucByteBuf[usByteOffset + 1] = ( UCHAR )( usWordBuf >> BITS_UCHAR );
 80054e6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80054ea:	f800 300e 	strb.w	r3, [r0, lr]
}
 80054ee:	bd30      	pop	{r4, r5, pc}

080054f0 <xMBUtilGetBits>:
    USHORT          usByteOffset;
    USHORT          usNPreBits;

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 80054f0:	ea4f 0cd1 	mov.w	ip, r1, lsr #3
    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 80054f4:	f10c 0301 	add.w	r3, ip, #1
 80054f8:	5cc3      	ldrb	r3, [r0, r3]
 80054fa:	f810 000c 	ldrb.w	r0, [r0, ip]

    /* throw away unneeded bits. */
    usWordBuf >>= usNPreBits;
 80054fe:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8005502:	f001 0107 	and.w	r1, r1, #7
 8005506:	4108      	asrs	r0, r1
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8005508:	2301      	movs	r3, #1
 800550a:	4093      	lsls	r3, r2
 800550c:	3b01      	subs	r3, #1

    /* mask away bits above the requested bitfield. */
    usWordBuf &= usMask;
 800550e:	4018      	ands	r0, r3

    return ( UCHAR ) usWordBuf;
}
 8005510:	b2c0      	uxtb	r0, r0
 8005512:	4770      	bx	lr

08005514 <prveMBError2Exception>:
eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
    eMBException    eStatus;

    switch ( eErrorCode )
 8005514:	2801      	cmp	r0, #1
 8005516:	d005      	beq.n	8005524 <prveMBError2Exception+0x10>
 8005518:	2807      	cmp	r0, #7
 800551a:	d005      	beq.n	8005528 <prveMBError2Exception+0x14>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 800551c:	2800      	cmp	r0, #0
 800551e:	bf18      	it	ne
 8005520:	2004      	movne	r0, #4
 8005522:	4770      	bx	lr
    switch ( eErrorCode )
 8005524:	2002      	movs	r0, #2
 8005526:	4770      	bx	lr
        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
            break;

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 8005528:	2006      	movs	r0, #6
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
            break;
    }

    return eStatus;
}
 800552a:	4770      	bx	lr

0800552c <EnterCriticalSection>:

/* ----------------------- Start implementation -----------------------------*/
void EnterCriticalSection(void)
{
  //  rt_enter_critical();
}
 800552c:	4770      	bx	lr

0800552e <ExitCriticalSection>:

void ExitCriticalSection(void)
{
   // rt_exit_critical();
}
 800552e:	4770      	bx	lr

08005530 <xMBPortEventInit>:



BOOL
xMBPortEventInit( void )
{
 8005530:	b508      	push	{r3, lr}
	xSlaveOsEventGroupHandle = xGetOSEvent();
 8005532:	f7fc f8f5 	bl	8001720 <xGetOSEvent>
 8005536:	4b02      	ldr	r3, [pc, #8]	; (8005540 <xMBPortEventInit+0x10>)
 8005538:	6018      	str	r0, [r3, #0]

   // rt_event_init(&xSlaveOsEvent,"slave event",RT_IPC_FLAG_PRIO);
    return TRUE;
}
 800553a:	2001      	movs	r0, #1
 800553c:	bd08      	pop	{r3, pc}
 800553e:	bf00      	nop
 8005540:	20001684 	.word	0x20001684

08005544 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
 8005544:	b500      	push	{lr}
 8005546:	b083      	sub	sp, #12
 8005548:	4601      	mov	r1, r0
	BaseType_t xHigherPriorityTaskWoken, xResult;
	  switch (eEvent)
 800554a:	2804      	cmp	r0, #4
 800554c:	d01f      	beq.n	800558e <xMBPortEventPost+0x4a>
 800554e:	d818      	bhi.n	8005582 <xMBPortEventPost+0x3e>
 8005550:	1e43      	subs	r3, r0, #1
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b01      	cmp	r3, #1
 8005556:	d816      	bhi.n	8005586 <xMBPortEventPost+0x42>
	    {
	    case EV_READY:
	    case EV_FRAME_RECEIVED:

	    		/* xHigherPriorityTaskWoken must be initialised to pdFALSE. */
	    		xHigherPriorityTaskWoken = pdFALSE;
 8005558:	2300      	movs	r3, #0
 800555a:	9301      	str	r3, [sp, #4]

	    		 /* Set bit 0 and bit 4 in xEventGroup. */
	    		 xResult = xEventGroupSetBitsFromISR(
 800555c:	aa01      	add	r2, sp, #4
 800555e:	4b0e      	ldr	r3, [pc, #56]	; (8005598 <xMBPortEventPost+0x54>)
 8005560:	6818      	ldr	r0, [r3, #0]
 8005562:	f000 fc89 	bl	8005e78 <xEventGroupSetBitsFromISR>
	    				 	 	 	 	 	 	 xSlaveOsEventGroupHandle,   /* The event group being updated. */
												 eEvent , /* The bits being set. */
	    		                              &xHigherPriorityTaskWoken );

	    		  /* Was the message posted successfully? */
	    		  if( xResult != pdFAIL )
 8005566:	b170      	cbz	r0, 8005586 <xMBPortEventPost+0x42>
	    		  {
	    		      /* If xHigherPriorityTaskWoken is now set to pdTRUE then a context
	    		      switch should be requested.  The macro used is port specific and will
	    		      be either portYIELD_FROM_ISR() or portEND_SWITCHING_ISR() - refer to
	    		      the documentation page for the port being used. */
	    		      portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8005568:	9b01      	ldr	r3, [sp, #4]
 800556a:	b163      	cbz	r3, 8005586 <xMBPortEventPost+0x42>
 800556c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005570:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005574:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005578:	f3bf 8f4f 	dsb	sy
 800557c:	f3bf 8f6f 	isb	sy
 8005580:	e001      	b.n	8005586 <xMBPortEventPost+0x42>
	  switch (eEvent)
 8005582:	2808      	cmp	r0, #8
 8005584:	d003      	beq.n	800558e <xMBPortEventPost+0x4a>



   // rt_event_send(&xSlaveOsEvent, eEvent);
    return TRUE;
}
 8005586:	2001      	movs	r0, #1
 8005588:	b003      	add	sp, #12
 800558a:	f85d fb04 	ldr.w	pc, [sp], #4
	    	xEventGroupSetBits(xSlaveOsEventGroupHandle,eEvent);
 800558e:	4b02      	ldr	r3, [pc, #8]	; (8005598 <xMBPortEventPost+0x54>)
 8005590:	6818      	ldr	r0, [r3, #0]
 8005592:	f000 fc23 	bl	8005ddc <xEventGroupSetBits>
	        break;
 8005596:	e7f6      	b.n	8005586 <xMBPortEventPost+0x42>
 8005598:	20001684 	.word	0x20001684

0800559c <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
 800559c:	b530      	push	{r4, r5, lr}
 800559e:	b083      	sub	sp, #12
 80055a0:	4605      	mov	r5, r0
   // rt_uint32_t recvedEvent;
    /* waiting forever OS event */
	 EventBits_t recvedEvent;
	 recvedEvent = xEventGroupWaitBits(xSlaveOsEventGroupHandle,    EV_READY | EV_FRAME_RECEIVED | EV_EXECUTE | EV_FRAME_SENT,   pdTRUE, pdFALSE, portMAX_DELAY );
 80055a2:	f04f 33ff 	mov.w	r3, #4294967295
 80055a6:	9300      	str	r3, [sp, #0]
 80055a8:	2300      	movs	r3, #0
 80055aa:	2201      	movs	r2, #1
 80055ac:	210f      	movs	r1, #15
 80055ae:	4c0d      	ldr	r4, [pc, #52]	; (80055e4 <xMBPortEventGet+0x48>)
 80055b0:	6820      	ldr	r0, [r4, #0]
 80055b2:	f000 fb88 	bl	8005cc6 <xEventGroupWaitBits>
   // rt_event_recv(&xSlaveOsEvent,
   //         EV_READY | EV_FRAME_RECEIVED | EV_EXECUTE | EV_FRAME_SENT,
   //         RT_EVENT_FLAG_OR | RT_EVENT_FLAG_CLEAR, RT_WAITING_FOREVER,
   //         &recvedEvent);
    switch (recvedEvent)
 80055b6:	1e43      	subs	r3, r0, #1
 80055b8:	2b07      	cmp	r3, #7
 80055ba:	d807      	bhi.n	80055cc <xMBPortEventGet+0x30>
 80055bc:	e8df f003 	tbb	[pc, r3]
 80055c0:	0c060904 	.word	0x0c060904
 80055c4:	0f060606 	.word	0x0f060606
    {
    case EV_READY:
        *eEvent = EV_READY;
 80055c8:	2301      	movs	r3, #1
 80055ca:	702b      	strb	r3, [r5, #0]
    case EV_FRAME_SENT:
        *eEvent = EV_FRAME_SENT;
        break;
    }
    return TRUE;
}
 80055cc:	2001      	movs	r0, #1
 80055ce:	b003      	add	sp, #12
 80055d0:	bd30      	pop	{r4, r5, pc}
        *eEvent = EV_FRAME_RECEIVED;
 80055d2:	2302      	movs	r3, #2
 80055d4:	702b      	strb	r3, [r5, #0]
        break;
 80055d6:	e7f9      	b.n	80055cc <xMBPortEventGet+0x30>
        *eEvent = EV_EXECUTE;
 80055d8:	2304      	movs	r3, #4
 80055da:	702b      	strb	r3, [r5, #0]
        break;
 80055dc:	e7f6      	b.n	80055cc <xMBPortEventGet+0x30>
        *eEvent = EV_FRAME_SENT;
 80055de:	2308      	movs	r3, #8
 80055e0:	702b      	strb	r3, [r5, #0]
        break;
 80055e2:	e7f3      	b.n	80055cc <xMBPortEventGet+0x30>
 80055e4:	20001684 	.word	0x20001684

080055e8 <xMBPortSerialInit>:
	HAL_GPIO_WritePin(GPIOA,EN_Pin,GPIO_PIN_SET);
}

/* ----------------------- Start implementation -----------------------------*/
BOOL xMBPortSerialInit(UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity)
{
 80055e8:	b508      	push	{r3, lr}
     * @note MODBUS_SLAVE_RT_CONTROL_PIN_INDEX need be defined by user
     */
  //  rt_pin_mode(MODBUS_SLAVE_RT_CONTROL_PIN_INDEX, PIN_MODE_OUTPUT);

    /* set serial configure parameter */
     huart1.Init.BaudRate = ulBaudRate;
 80055ea:	4a10      	ldr	r2, [pc, #64]	; (800562c <xMBPortSerialInit+0x44>)
 80055ec:	6051      	str	r1, [r2, #4]
     huart1.Init.StopBits = UART_STOPBITS_1;
 80055ee:	2100      	movs	r1, #0
 80055f0:	60d1      	str	r1, [r2, #12]

    switch(eParity)
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d00a      	beq.n	800560c <xMBPortSerialInit+0x24>
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d010      	beq.n	800561c <xMBPortSerialInit+0x34>
 80055fa:	b123      	cbz	r3, 8005606 <xMBPortSerialInit+0x1e>
    		huart1.Init.Parity = UART_PARITY_EVEN;
    		break;
    }
    /* set serial configure */

    HAL_UART_Init(&huart1);
 80055fc:	480b      	ldr	r0, [pc, #44]	; (800562c <xMBPortSerialInit+0x44>)
 80055fe:	f7ff f84d 	bl	800469c <HAL_UART_Init>
          //         sizeof(serial_soft_trans_irq_stack),
           //        10, 5);
    //rt_thread_startup(&thread_serial_soft_trans_irq);

    return TRUE;
}
 8005602:	2001      	movs	r0, #1
 8005604:	bd08      	pop	{r3, pc}
    		huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005606:	6091      	str	r1, [r2, #8]
    		huart1.Init.Parity = UART_PARITY_NONE;
 8005608:	6111      	str	r1, [r2, #16]
    		break;
 800560a:	e7f7      	b.n	80055fc <xMBPortSerialInit+0x14>
    		huart1.Init.WordLength = UART_WORDLENGTH_9B;
 800560c:	4b07      	ldr	r3, [pc, #28]	; (800562c <xMBPortSerialInit+0x44>)
 800560e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005612:	609a      	str	r2, [r3, #8]
    	  	huart1.Init.Parity = UART_PARITY_ODD;
 8005614:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005618:	611a      	str	r2, [r3, #16]
    	  	break;
 800561a:	e7ef      	b.n	80055fc <xMBPortSerialInit+0x14>
    		huart1.Init.WordLength = UART_WORDLENGTH_9B;
 800561c:	4b03      	ldr	r3, [pc, #12]	; (800562c <xMBPortSerialInit+0x44>)
 800561e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005622:	609a      	str	r2, [r3, #8]
    		huart1.Init.Parity = UART_PARITY_EVEN;
 8005624:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005628:	611a      	str	r2, [r3, #16]
    		break;
 800562a:	e7e7      	b.n	80055fc <xMBPortSerialInit+0x14>
 800562c:	200013cc 	.word	0x200013cc

08005630 <vMBPortSerialEnable>:

void vMBPortSerialEnable(BOOL xRxEnable, BOOL xTxEnable)
{
 8005630:	b510      	push	{r4, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	460c      	mov	r4, r1
//    rt_uint32_t recved_event;
    if (xRxEnable)
 8005636:	b190      	cbz	r0, 800565e <vMBPortSerialEnable+0x2e>
    {

    	HAL_UART_Receive_IT(&huart1,&rx_data_buf,1);
 8005638:	2201      	movs	r2, #1
 800563a:	4912      	ldr	r1, [pc, #72]	; (8005684 <vMBPortSerialEnable+0x54>)
 800563c:	4812      	ldr	r0, [pc, #72]	; (8005688 <vMBPortSerialEnable+0x58>)
 800563e:	f7ff faf6 	bl	8004c2e <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(GPIOA,EN_Pin,GPIO_PIN_RESET);
 8005642:	2200      	movs	r2, #0
 8005644:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005648:	4810      	ldr	r0, [pc, #64]	; (800568c <vMBPortSerialEnable+0x5c>)
 800564a:	f7fd ff67 	bl	800351c <HAL_GPIO_WritePin>
    	vTransmitEnable();
        /* disable RX interrupt */
    	HAL_UART_AbortReceive_IT(&huart1);
     //   serial->ops->control(serial, RT_DEVICE_CTRL_CLR_INT, (void *)RT_DEVICE_FLAG_INT_RX);
    }
    if (xTxEnable)
 800564e:	b184      	cbz	r4, 8005672 <vMBPortSerialEnable+0x42>
    {
    	//HAL_HalfDuplex_EnableTransmitter(&huart1);

    	xEventGroupSetBits(xSerialEventGroupHandle,EVENT_SERIAL_TRANS_START);
 8005650:	2101      	movs	r1, #1
 8005652:	4b0f      	ldr	r3, [pc, #60]	; (8005690 <vMBPortSerialEnable+0x60>)
 8005654:	6818      	ldr	r0, [r3, #0]
 8005656:	f000 fbc1 	bl	8005ddc <xEventGroupSetBits>
    	xEventGroupWaitBits( xSerialEventGroupHandle,  EVENT_SERIAL_TRANS_START,  pdTRUE, pdFALSE, 0 );
        //rt_event_recv(&event_serial, EVENT_SERIAL_TRANS_START,
        //        RT_EVENT_FLAG_OR | RT_EVENT_FLAG_CLEAR, 0,
         //       &recved_event);
    }
}
 800565a:	b002      	add	sp, #8
 800565c:	bd10      	pop	{r4, pc}
	HAL_GPIO_WritePin(GPIOA,EN_Pin,GPIO_PIN_SET);
 800565e:	2201      	movs	r2, #1
 8005660:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005664:	4809      	ldr	r0, [pc, #36]	; (800568c <vMBPortSerialEnable+0x5c>)
 8005666:	f7fd ff59 	bl	800351c <HAL_GPIO_WritePin>
    	HAL_UART_AbortReceive_IT(&huart1);
 800566a:	4807      	ldr	r0, [pc, #28]	; (8005688 <vMBPortSerialEnable+0x58>)
 800566c:	f7ff f86c 	bl	8004748 <HAL_UART_AbortReceive_IT>
 8005670:	e7ed      	b.n	800564e <vMBPortSerialEnable+0x1e>
    	xEventGroupWaitBits( xSerialEventGroupHandle,  EVENT_SERIAL_TRANS_START,  pdTRUE, pdFALSE, 0 );
 8005672:	2300      	movs	r3, #0
 8005674:	9300      	str	r3, [sp, #0]
 8005676:	2201      	movs	r2, #1
 8005678:	4611      	mov	r1, r2
 800567a:	4805      	ldr	r0, [pc, #20]	; (8005690 <vMBPortSerialEnable+0x60>)
 800567c:	6800      	ldr	r0, [r0, #0]
 800567e:	f000 fb22 	bl	8005cc6 <xEventGroupWaitBits>
}
 8005682:	e7ea      	b.n	800565a <vMBPortSerialEnable+0x2a>
 8005684:	20001689 	.word	0x20001689
 8005688:	200013cc 	.word	0x200013cc
 800568c:	40010800 	.word	0x40010800
 8005690:	2000168c 	.word	0x2000168c

08005694 <xMBPortSerialPutByte>:
    //serial->parent.close(&(serial->parent));
}

BOOL xMBPortSerialPutByte(CHAR ucByte)

{
 8005694:	b500      	push	{lr}
 8005696:	b083      	sub	sp, #12
 8005698:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_GPIO_WritePin(GPIOA,EN_Pin,GPIO_PIN_SET);
 800569c:	2201      	movs	r2, #1
 800569e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80056a2:	4806      	ldr	r0, [pc, #24]	; (80056bc <xMBPortSerialPutByte+0x28>)
 80056a4:	f7fd ff3a 	bl	800351c <HAL_GPIO_WritePin>
	HAL_UART_Transmit_IT(&huart1,(uint8_t *) &ucByte, 1);
 80056a8:	2201      	movs	r2, #1
 80056aa:	f10d 0107 	add.w	r1, sp, #7
 80056ae:	4804      	ldr	r0, [pc, #16]	; (80056c0 <xMBPortSerialPutByte+0x2c>)
 80056b0:	f7ff f824 	bl	80046fc <HAL_UART_Transmit_IT>
    //serial->parent.write(&(serial->parent), 0, ;
    return TRUE;
}
 80056b4:	2001      	movs	r0, #1
 80056b6:	b003      	add	sp, #12
 80056b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80056bc:	40010800 	.word	0x40010800
 80056c0:	200013cc 	.word	0x200013cc

080056c4 <xMBPortSerialGetByte>:

BOOL xMBPortSerialGetByte(CHAR * pucByte)
{
	* pucByte = rx_data;
 80056c4:	4b02      	ldr	r3, [pc, #8]	; (80056d0 <xMBPortSerialGetByte+0xc>)
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	7003      	strb	r3, [r0, #0]
    //serial->parent.read(&(serial->parent), 0, pucByte, 1);
    return TRUE;
}
 80056ca:	2001      	movs	r0, #1
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	20001688 	.word	0x20001688

080056d4 <HAL_UART_TxCpltCallback>:


#ifdef SLAVE_MODE
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056d4:	b500      	push	{lr}
 80056d6:	b083      	sub	sp, #12

	BaseType_t xHigherPriorityTaskWoken, xResult;
	/* xHigherPriorityTaskWoken must be initialised to pdFALSE. */
	xHigherPriorityTaskWoken = pdFALSE;
 80056d8:	2300      	movs	r3, #0
 80056da:	9301      	str	r3, [sp, #4]

	 /* Set bit 0 and bit 4 in xEventGroup. */
	 xResult = xEventGroupSetBitsFromISR(
 80056dc:	aa01      	add	r2, sp, #4
 80056de:	2101      	movs	r1, #1
 80056e0:	4b09      	ldr	r3, [pc, #36]	; (8005708 <HAL_UART_TxCpltCallback+0x34>)
 80056e2:	6818      	ldr	r0, [r3, #0]
 80056e4:	f000 fbc8 	bl	8005e78 <xEventGroupSetBitsFromISR>
			 	 	 	 	 	   xSerialEventGroupHandle,   /* The event group being updated. */
								   EVENT_SERIAL_TRANS_START, /* The bits being set. */
	                              &xHigherPriorityTaskWoken );

	  /* Was the message posted successfully? */
	  if( xResult != pdFAIL )
 80056e8:	b158      	cbz	r0, 8005702 <HAL_UART_TxCpltCallback+0x2e>
	  {
	      /* If xHigherPriorityTaskWoken is now set to pdTRUE then a context
	      switch should be requested.  The macro used is port specific and will
	      be either portYIELD_FROM_ISR() or portEND_SWITCHING_ISR() - refer to
	      the documentation page for the port being used. */
	      portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80056ea:	9b01      	ldr	r3, [sp, #4]
 80056ec:	b14b      	cbz	r3, 8005702 <HAL_UART_TxCpltCallback+0x2e>
 80056ee:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80056f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056f6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	f3bf 8f6f 	isb	sy
	  }
}
 8005702:	b003      	add	sp, #12
 8005704:	f85d fb04 	ldr.w	pc, [sp], #4
 8005708:	2000168c 	.word	0x2000168c

0800570c <StartUARTTask>:



void StartUARTTask(void *argument)
{
 800570c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800570e:	b083      	sub	sp, #12
	  EventBits_t uxBits;
	  /* Attempt to create the event group. */
	  xSerialEventGroupHandle = xGetUARTEvent();
 8005710:	f7fc f80c 	bl	800172c <xGetUARTEvent>
 8005714:	4b09      	ldr	r3, [pc, #36]	; (800573c <StartUARTTask+0x30>)
 8005716:	6018      	str	r0, [r3, #0]
	  while(1)
	  {
		  uxBits = xEventGroupWaitBits( xSerialEventGroupHandle,  EVENT_SERIAL_TRANS_START,  pdTRUE, pdFALSE, portMAX_DELAY );
 8005718:	461e      	mov	r6, r3
 800571a:	f04f 35ff 	mov.w	r5, #4294967295
		  switch (uxBits)
		  {
		  	  	  case EVENT_SERIAL_TRANS_START:
		  	  		  pxMBFrameCBTransmitterEmpty();
 800571e:	4f08      	ldr	r7, [pc, #32]	; (8005740 <StartUARTTask+0x34>)
		  uxBits = xEventGroupWaitBits( xSerialEventGroupHandle,  EVENT_SERIAL_TRANS_START,  pdTRUE, pdFALSE, portMAX_DELAY );
 8005720:	2400      	movs	r4, #0
 8005722:	9500      	str	r5, [sp, #0]
 8005724:	4623      	mov	r3, r4
 8005726:	2201      	movs	r2, #1
 8005728:	4611      	mov	r1, r2
 800572a:	6830      	ldr	r0, [r6, #0]
 800572c:	f000 facb 	bl	8005cc6 <xEventGroupWaitBits>
		  switch (uxBits)
 8005730:	2801      	cmp	r0, #1
 8005732:	d1f6      	bne.n	8005722 <StartUARTTask+0x16>
		  	  		  pxMBFrameCBTransmitterEmpty();
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	4798      	blx	r3
		  	  		  break;
 8005738:	e7f2      	b.n	8005720 <StartUARTTask+0x14>
 800573a:	bf00      	nop
 800573c:	2000168c 	.word	0x2000168c
 8005740:	20001544 	.word	0x20001544

08005744 <HAL_UART_RxCpltCallback>:

}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005744:	b508      	push	{r3, lr}
	rx_data = rx_data_buf;
 8005746:	4906      	ldr	r1, [pc, #24]	; (8005760 <HAL_UART_RxCpltCallback+0x1c>)
 8005748:	780a      	ldrb	r2, [r1, #0]
 800574a:	4b06      	ldr	r3, [pc, #24]	; (8005764 <HAL_UART_RxCpltCallback+0x20>)
 800574c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1,&rx_data_buf,1);
 800574e:	2201      	movs	r2, #1
 8005750:	4805      	ldr	r0, [pc, #20]	; (8005768 <HAL_UART_RxCpltCallback+0x24>)
 8005752:	f7ff fa6c 	bl	8004c2e <HAL_UART_Receive_IT>
	pxMBFrameCBByteReceived();
 8005756:	4b05      	ldr	r3, [pc, #20]	; (800576c <HAL_UART_RxCpltCallback+0x28>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4798      	blx	r3
}
 800575c:	bd08      	pop	{r3, pc}
 800575e:	bf00      	nop
 8005760:	20001689 	.word	0x20001689
 8005764:	20001688 	.word	0x20001688
 8005768:	200013cc 	.word	0x200013cc
 800576c:	20001540 	.word	0x20001540

08005770 <xMBPortTimersInit>:



/* ----------------------- Start implementation -----------------------------*/
BOOL xMBPortTimersInit(USHORT usTim1Timerout50us)
{
 8005770:	b508      	push	{r3, lr}

   vTimerInit(usTim1Timerout50us);
 8005772:	f7fb ffe7 	bl	8001744 <vTimerInit>
   //                timer_timeout_ind, /* bind timeout callback function */
    //               RT_NULL,
     //              (50 * usTim1Timerout50us) / (1000 * 1000 / RT_TICK_PER_SECOND) + 1,
      //             RT_TIMER_FLAG_ONE_SHOT); /* one shot */
    return TRUE;
}
 8005776:	2001      	movs	r0, #1
 8005778:	bd08      	pop	{r3, pc}

0800577a <vMBPortTimersEnable>:

void vMBPortTimersEnable()
{
 800577a:	b508      	push	{r3, lr}
	vStartTimer();
 800577c:	f7fb ffee 	bl	800175c <vStartTimer>
}
 8005780:	bd08      	pop	{r3, pc}

08005782 <vMBPortTimersDisable>:


void vMBPortTimersDisable()
{
 8005782:	b508      	push	{r3, lr}
	vStopTimer();
 8005784:	f7fb fff2 	bl	800176c <vStopTimer>
}
 8005788:	bd08      	pop	{r3, pc}
	...

0800578c <rvvTIMERExpiredISR>:


#ifdef SLAVE_MODE
void rvvTIMERExpiredISR()
{
 800578c:	b508      	push	{r3, lr}
    (void) pxMBPortCBTimerExpired();
 800578e:	4b02      	ldr	r3, [pc, #8]	; (8005798 <rvvTIMERExpiredISR+0xc>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4798      	blx	r3
}
 8005794:	bd08      	pop	{r3, pc}
 8005796:	bf00      	nop
 8005798:	20001548 	.word	0x20001548

0800579c <vUPDATECoils>:
USHORT   usSRegHoldStart                              = S_REG_HOLDING_START;
USHORT   usSRegHoldBuf[S_REG_HOLDING_NREGS]           ;


void vUPDATECoils( uint8_t rw)
{
 800579c:	b570      	push	{r4, r5, r6, lr}
 800579e:	b082      	sub	sp, #8
	volatile uint8_t temp;
	if (rw == 1)
 80057a0:	2801      	cmp	r0, #1
 80057a2:	d011      	beq.n	80057c8 <vUPDATECoils+0x2c>
		{
			temp =xMBUtilGetBits(&ucSCoilBuf[0],i,1);
			vSetOutState( i,temp );
		}
	}
	if (rw == 0)
 80057a4:	b970      	cbnz	r0, 80057c4 <vUPDATECoils+0x28>
 80057a6:	2400      	movs	r4, #0
	{
		for (uint8_t i = 0;i<S_COIL_NCOILS;i++)
		{
			xMBUtilSetBits(&ucSCoilBuf[0],i,1, vGetOutState(i));
 80057a8:	4e11      	ldr	r6, [pc, #68]	; (80057f0 <vUPDATECoils+0x54>)
 80057aa:	2501      	movs	r5, #1
 80057ac:	b2e0      	uxtb	r0, r4
 80057ae:	f7fb ff31 	bl	8001614 <vGetOutState>
 80057b2:	4603      	mov	r3, r0
 80057b4:	462a      	mov	r2, r5
 80057b6:	b2a1      	uxth	r1, r4
 80057b8:	4630      	mov	r0, r6
 80057ba:	f7ff fe77 	bl	80054ac <xMBUtilSetBits>
		for (uint8_t i = 0;i<S_COIL_NCOILS;i++)
 80057be:	3401      	adds	r4, #1
 80057c0:	2c04      	cmp	r4, #4
 80057c2:	d1f3      	bne.n	80057ac <vUPDATECoils+0x10>
		}

	}


}
 80057c4:	b002      	add	sp, #8
 80057c6:	bd70      	pop	{r4, r5, r6, pc}
 80057c8:	2400      	movs	r4, #0
			temp =xMBUtilGetBits(&ucSCoilBuf[0],i,1);
 80057ca:	4e09      	ldr	r6, [pc, #36]	; (80057f0 <vUPDATECoils+0x54>)
 80057cc:	2501      	movs	r5, #1
 80057ce:	462a      	mov	r2, r5
 80057d0:	b2a1      	uxth	r1, r4
 80057d2:	4630      	mov	r0, r6
 80057d4:	f7ff fe8c 	bl	80054f0 <xMBUtilGetBits>
 80057d8:	f88d 0007 	strb.w	r0, [sp, #7]
			vSetOutState( i,temp );
 80057dc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80057e0:	b2e0      	uxtb	r0, r4
 80057e2:	f7fb ff11 	bl	8001608 <vSetOutState>
		for (uint8_t i = 0;i<S_COIL_NCOILS;i++)
 80057e6:	3401      	adds	r4, #1
 80057e8:	2c04      	cmp	r4, #4
 80057ea:	d1f0      	bne.n	80057ce <vUPDATECoils+0x32>
 80057ec:	e7ea      	b.n	80057c4 <vUPDATECoils+0x28>
 80057ee:	bf00      	nop
 80057f0:	20001690 	.word	0x20001690

080057f4 <eMBRegInputCB>:
    REG_INPUT_START = S_REG_INPUT_START;
    REG_INPUT_NREGS = S_REG_INPUT_NREGS;
    usRegInStart = usSRegInStart;

    /* it already plus one in modbus function method. */
    usAddress--;
 80057f4:	3901      	subs	r1, #1
 80057f6:	b289      	uxth	r1, r1

    if ((usAddress >= REG_INPUT_START)
 80057f8:	2904      	cmp	r1, #4
 80057fa:	d91e      	bls.n	800583a <eMBRegInputCB+0x46>
{
 80057fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
            && (usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS))
 80057fe:	188b      	adds	r3, r1, r2
 8005800:	2b0e      	cmp	r3, #14
 8005802:	dc1c      	bgt.n	800583e <eMBRegInputCB+0x4a>
    usRegInStart = usSRegInStart;
 8005804:	4b10      	ldr	r3, [pc, #64]	; (8005848 <eMBRegInputCB+0x54>)
    {
        iRegIndex = usAddress - usRegInStart;
 8005806:	881c      	ldrh	r4, [r3, #0]
 8005808:	1b0c      	subs	r4, r1, r4
 800580a:	b2a4      	uxth	r4, r4
        while (usNRegs > 0)
 800580c:	b1ca      	cbz	r2, 8005842 <eMBRegInputCB+0x4e>
 800580e:	1c85      	adds	r5, r0, #2
 8005810:	4422      	add	r2, r4
 8005812:	b296      	uxth	r6, r2
        {

            *pucRegBuffer++ = (UCHAR) ( usGetRegInput(iRegIndex) >> 8);
 8005814:	b2e7      	uxtb	r7, r4
 8005816:	4638      	mov	r0, r7
 8005818:	f7fc fa66 	bl	8001ce8 <usGetRegInput>
 800581c:	0a00      	lsrs	r0, r0, #8
 800581e:	f805 0c02 	strb.w	r0, [r5, #-2]
            *pucRegBuffer++ = (UCHAR) ( usGetRegInput(iRegIndex) & 0xFF);
 8005822:	4638      	mov	r0, r7
 8005824:	f7fc fa60 	bl	8001ce8 <usGetRegInput>
 8005828:	f805 0c01 	strb.w	r0, [r5, #-1]
            iRegIndex++;
 800582c:	3401      	adds	r4, #1
 800582e:	b2a4      	uxth	r4, r4
        while (usNRegs > 0)
 8005830:	3502      	adds	r5, #2
 8005832:	42b4      	cmp	r4, r6
 8005834:	d1ee      	bne.n	8005814 <eMBRegInputCB+0x20>
    eMBErrorCode    eStatus = MB_ENOERR;
 8005836:	2000      	movs	r0, #0
 8005838:	e002      	b.n	8005840 <eMBRegInputCB+0x4c>
            usNRegs--;
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 800583a:	2001      	movs	r0, #1
    }

    return eStatus;
}
 800583c:	4770      	bx	lr
        eStatus = MB_ENOREG;
 800583e:	2001      	movs	r0, #1
}
 8005840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eMBErrorCode    eStatus = MB_ENOERR;
 8005842:	2000      	movs	r0, #0
 8005844:	e7fc      	b.n	8005840 <eMBRegInputCB+0x4c>
 8005846:	bf00      	nop
 8005848:	200000b8 	.word	0x200000b8

0800584c <eMBRegHoldingCB>:
    REG_HOLDING_START = S_REG_HOLDING_START;
    REG_HOLDING_NREGS = S_REG_HOLDING_NREGS;
    usRegHoldStart = usSRegHoldStart;

    /* it already plus one in modbus function method. */
    usAddress--;
 800584c:	3901      	subs	r1, #1
 800584e:	b289      	uxth	r1, r1

    if ((usAddress >= REG_HOLDING_START)
 8005850:	290d      	cmp	r1, #13
 8005852:	d93a      	bls.n	80058ca <eMBRegHoldingCB+0x7e>
{
 8005854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005858:	4605      	mov	r5, r0
 800585a:	461e      	mov	r6, r3
            && (usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS))
 800585c:	188b      	adds	r3, r1, r2
 800585e:	2b2c      	cmp	r3, #44	; 0x2c
 8005860:	dc35      	bgt.n	80058ce <eMBRegHoldingCB+0x82>
    usRegHoldStart = usSRegHoldStart;
 8005862:	4b1e      	ldr	r3, [pc, #120]	; (80058dc <eMBRegHoldingCB+0x90>)
    {
        iRegIndex = usAddress - usRegHoldStart;
 8005864:	881c      	ldrh	r4, [r3, #0]
 8005866:	1b0c      	subs	r4, r1, r4
 8005868:	b2a4      	uxth	r4, r4
        switch (eMode)
 800586a:	b1b6      	cbz	r6, 800589a <eMBRegHoldingCB+0x4e>
 800586c:	2e01      	cmp	r6, #1
 800586e:	d131      	bne.n	80058d4 <eMBRegHoldingCB+0x88>
    eMBErrorCode    eStatus = MB_ENOERR;
 8005870:	2000      	movs	r0, #0
            }
            break;

        /* write current register values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (usNRegs > 0)
 8005872:	b36a      	cbz	r2, 80058d0 <eMBRegHoldingCB+0x84>
 8005874:	3502      	adds	r5, #2
 8005876:	1916      	adds	r6, r2, r4
 8005878:	b2b6      	uxth	r6, r6
            {
            	vSetReg(iRegIndex, (*pucRegBuffer)<<8 | *(pucRegBuffer + 1) );
 800587a:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800587e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005882:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8005886:	b2e0      	uxtb	r0, r4
 8005888:	f7fc fa46 	bl	8001d18 <vSetReg>
            	pucRegBuffer++;
				pucRegBuffer++;
                //pusRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
                //pusRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
                iRegIndex++;
 800588c:	3401      	adds	r4, #1
 800588e:	b2a4      	uxth	r4, r4
            while (usNRegs > 0)
 8005890:	3502      	adds	r5, #2
 8005892:	42b4      	cmp	r4, r6
 8005894:	d1f1      	bne.n	800587a <eMBRegHoldingCB+0x2e>
    eMBErrorCode    eStatus = MB_ENOERR;
 8005896:	2000      	movs	r0, #0
 8005898:	e01a      	b.n	80058d0 <eMBRegHoldingCB+0x84>
            while (usNRegs > 0)
 800589a:	b1ea      	cbz	r2, 80058d8 <eMBRegHoldingCB+0x8c>
 800589c:	3502      	adds	r5, #2
 800589e:	4422      	add	r2, r4
 80058a0:	fa1f f882 	uxth.w	r8, r2
                *pucRegBuffer++ = (UCHAR) (usGetReg(iRegIndex) >> 8);
 80058a4:	b2e7      	uxtb	r7, r4
 80058a6:	4638      	mov	r0, r7
 80058a8:	f7fc fa0a 	bl	8001cc0 <usGetReg>
 80058ac:	0a00      	lsrs	r0, r0, #8
 80058ae:	f805 0c02 	strb.w	r0, [r5, #-2]
                *pucRegBuffer++ = (UCHAR) (usGetReg(iRegIndex) & 0xFF);
 80058b2:	4638      	mov	r0, r7
 80058b4:	f7fc fa04 	bl	8001cc0 <usGetReg>
 80058b8:	f805 0c01 	strb.w	r0, [r5, #-1]
                iRegIndex++;
 80058bc:	3401      	adds	r4, #1
 80058be:	b2a4      	uxth	r4, r4
            while (usNRegs > 0)
 80058c0:	3502      	adds	r5, #2
 80058c2:	45a0      	cmp	r8, r4
 80058c4:	d1ee      	bne.n	80058a4 <eMBRegHoldingCB+0x58>
    eMBErrorCode    eStatus = MB_ENOERR;
 80058c6:	4630      	mov	r0, r6
 80058c8:	e002      	b.n	80058d0 <eMBRegHoldingCB+0x84>
            break;
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 80058ca:	2001      	movs	r0, #1
    }
    return eStatus;
}
 80058cc:	4770      	bx	lr
        eStatus = MB_ENOREG;
 80058ce:	2001      	movs	r0, #1
}
 80058d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (eMode)
 80058d4:	2000      	movs	r0, #0
 80058d6:	e7fb      	b.n	80058d0 <eMBRegHoldingCB+0x84>
    eMBErrorCode    eStatus = MB_ENOERR;
 80058d8:	4630      	mov	r0, r6
 80058da:	e7f9      	b.n	80058d0 <eMBRegHoldingCB+0x84>
 80058dc:	200000b6 	.word	0x200000b6

080058e0 <eMBRegCoilsCB>:
    COIL_START = S_COIL_START;
    COIL_NCOILS = S_COIL_NCOILS;
    usCoilStart = usSCoilStart;

    /* it already plus one in modbus function method. */
    usAddress--;
 80058e0:	3901      	subs	r1, #1
 80058e2:	b289      	uxth	r1, r1

    if( ( usAddress >= COIL_START ) &&
 80058e4:	2900      	cmp	r1, #0
 80058e6:	d062      	beq.n	80059ae <eMBRegCoilsCB+0xce>
{
 80058e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ec:	4605      	mov	r5, r0
 80058ee:	4616      	mov	r6, r2
 80058f0:	461f      	mov	r7, r3
        ( usAddress + usNCoils <= COIL_START + COIL_NCOILS ) )
 80058f2:	188b      	adds	r3, r1, r2
    if( ( usAddress >= COIL_START ) &&
 80058f4:	2b05      	cmp	r3, #5
 80058f6:	dc5c      	bgt.n	80059b2 <eMBRegCoilsCB+0xd2>
    iNReg =  usNCoils / 8 + 1;
 80058f8:	ea4f 08d2 	mov.w	r8, r2, lsr #3
 80058fc:	f108 0201 	add.w	r2, r8, #1
    usCoilStart = usSCoilStart;
 8005900:	4b2e      	ldr	r3, [pc, #184]	; (80059bc <eMBRegCoilsCB+0xdc>)
    {
        iRegIndex = (USHORT) (usAddress - usCoilStart) / 8;
 8005902:	881c      	ldrh	r4, [r3, #0]
 8005904:	1b0c      	subs	r4, r1, r4
 8005906:	f3c4 0bcc 	ubfx	fp, r4, #3, #13
        iRegBitIndex = (USHORT) (usAddress - usCoilStart) % 8;
 800590a:	f004 0407 	and.w	r4, r4, #7
        switch ( eMode )
 800590e:	b1ff      	cbz	r7, 8005950 <eMBRegCoilsCB+0x70>
 8005910:	2f01      	cmp	r7, #1
 8005912:	d151      	bne.n	80059b8 <eMBRegCoilsCB+0xd8>

            break;

            /* write current coil values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (iNReg > 1)
 8005914:	2a01      	cmp	r2, #1
 8005916:	bf98      	it	ls
 8005918:	4681      	movls	r9, r0
 800591a:	d914      	bls.n	8005946 <eMBRegCoilsCB+0x66>
 800591c:	eb00 0908 	add.w	r9, r0, r8
 8005920:	4607      	mov	r7, r0
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
 8005922:	f8df a09c 	ldr.w	sl, [pc, #156]	; 80059c0 <eMBRegCoilsCB+0xe0>
 8005926:	ebab 0500 	sub.w	r5, fp, r0
 800592a:	1978      	adds	r0, r7, r5
 800592c:	b280      	uxth	r0, r0
 800592e:	f817 3b01 	ldrb.w	r3, [r7], #1
 8005932:	2208      	movs	r2, #8
 8005934:	4621      	mov	r1, r4
 8005936:	4450      	add	r0, sl
 8005938:	f7ff fdb8 	bl	80054ac <xMBUtilSetBits>
            while (iNReg > 1)
 800593c:	454f      	cmp	r7, r9
 800593e:	d1f4      	bne.n	800592a <eMBRegCoilsCB+0x4a>
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
 8005940:	44c3      	add	fp, r8
 8005942:	fa1f fb8b 	uxth.w	fp, fp
                iNReg--;
            }
            /* last coils */
            usNCoils = usNCoils % 8;
            /* xMBUtilSetBits has bug when ucNBits is zero */
            if (usNCoils != 0)
 8005946:	f016 0207 	ands.w	r2, r6, #7
 800594a:	d127      	bne.n	800599c <eMBRegCoilsCB+0xbc>
    eMBErrorCode    eStatus = MB_ENOERR;
 800594c:	2000      	movs	r0, #0
 800594e:	e031      	b.n	80059b4 <eMBRegCoilsCB+0xd4>
        	vUPDATECoils(0);
 8005950:	2000      	movs	r0, #0
 8005952:	f7ff ff23 	bl	800579c <vUPDATECoils>
            while (iNReg > 0)
 8005956:	f108 0801 	add.w	r8, r8, #1
 800595a:	44a8      	add	r8, r5
        	vUPDATECoils(0);
 800595c:	46a9      	mov	r9, r5
                *pucRegBuffer++ = xMBUtilGetBits(&pucCoilBuf[iRegIndex++],
 800595e:	f8df a060 	ldr.w	sl, [pc, #96]	; 80059c0 <eMBRegCoilsCB+0xe0>
 8005962:	ebab 0505 	sub.w	r5, fp, r5
 8005966:	f04f 0b08 	mov.w	fp, #8
 800596a:	eb09 0005 	add.w	r0, r9, r5
 800596e:	b280      	uxth	r0, r0
 8005970:	465a      	mov	r2, fp
 8005972:	4621      	mov	r1, r4
 8005974:	4450      	add	r0, sl
 8005976:	f7ff fdbb 	bl	80054f0 <xMBUtilGetBits>
 800597a:	f809 0b01 	strb.w	r0, [r9], #1
            while (iNReg > 0)
 800597e:	45c1      	cmp	r9, r8
 8005980:	d1f3      	bne.n	800596a <eMBRegCoilsCB+0x8a>
            *pucRegBuffer = *pucRegBuffer << (8 - usNCoils);
 8005982:	f006 0607 	and.w	r6, r6, #7
 8005986:	f1c6 0208 	rsb	r2, r6, #8
 800598a:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 800598e:	4096      	lsls	r6, r2
            *pucRegBuffer = *pucRegBuffer >> (8 - usNCoils);
 8005990:	b2f6      	uxtb	r6, r6
 8005992:	4116      	asrs	r6, r2
 8005994:	f808 6c01 	strb.w	r6, [r8, #-1]
    eMBErrorCode    eStatus = MB_ENOERR;
 8005998:	4638      	mov	r0, r7
            break;
 800599a:	e00b      	b.n	80059b4 <eMBRegCoilsCB+0xd4>
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, usNCoils,
 800599c:	f899 3000 	ldrb.w	r3, [r9]
 80059a0:	4621      	mov	r1, r4
 80059a2:	4807      	ldr	r0, [pc, #28]	; (80059c0 <eMBRegCoilsCB+0xe0>)
 80059a4:	4458      	add	r0, fp
 80059a6:	f7ff fd81 	bl	80054ac <xMBUtilSetBits>
    eMBErrorCode    eStatus = MB_ENOERR;
 80059aa:	2000      	movs	r0, #0
 80059ac:	e002      	b.n	80059b4 <eMBRegCoilsCB+0xd4>
            break;
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 80059ae:	2001      	movs	r0, #1
    }
    return eStatus;
}
 80059b0:	4770      	bx	lr
        eStatus = MB_ENOREG;
 80059b2:	2001      	movs	r0, #1
}
 80059b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch ( eMode )
 80059b8:	2000      	movs	r0, #0
 80059ba:	e7fb      	b.n	80059b4 <eMBRegCoilsCB+0xd4>
 80059bc:	200000b4 	.word	0x200000b4
 80059c0:	20001690 	.word	0x20001690

080059c4 <eMBRegDiscreteCB>:
 * @param usNDiscrete discrete number
 *
 * @return result
 */
eMBErrorCode eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
 80059c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    DISCRETE_INPUT_START = S_DISCRETE_INPUT_START;
    DISCRETE_INPUT_NDISCRETES = S_DISCRETE_INPUT_NDISCRETES;
    usDiscreteInputStart = usSDiscInStart;

    /* it already plus one in modbus function method. */
    usAddress--;
 80059c8:	1e4d      	subs	r5, r1, #1
 80059ca:	b2ad      	uxth	r5, r5

    if ((usAddress >= DISCRETE_INPUT_START)
            && (usAddress + usNDiscrete    <= DISCRETE_INPUT_START + DISCRETE_INPUT_NDISCRETES))
 80059cc:	18ab      	adds	r3, r5, r2
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	dd02      	ble.n	80059d8 <eMBRegDiscreteCB+0x14>
        *pucRegBuffer = *pucRegBuffer << (8 - usNDiscrete);
        *pucRegBuffer = *pucRegBuffer >> (8 - usNDiscrete);
    }
    else
    {
        eStatus = MB_ENOREG;
 80059d2:	2001      	movs	r0, #1
    }

    return eStatus;
}
 80059d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059d8:	4616      	mov	r6, r2
    usDiscreteInputStart = usSDiscInStart;
 80059da:	4b15      	ldr	r3, [pc, #84]	; (8005a30 <eMBRegDiscreteCB+0x6c>)
        iRegIndex = (USHORT) (usAddress - usDiscreteInputStart) / 8;
 80059dc:	881b      	ldrh	r3, [r3, #0]
 80059de:	1aed      	subs	r5, r5, r3
 80059e0:	f3c5 08cc 	ubfx	r8, r5, #3, #13
        iRegBitIndex = (USHORT) (usAddress - usDiscreteInputStart) % 8;
 80059e4:	f005 0507 	and.w	r5, r5, #7
        while (iNReg > 0)
 80059e8:	eb00 07d2 	add.w	r7, r0, r2, lsr #3
 80059ec:	3701      	adds	r7, #1
        iRegBitIndex = (USHORT) (usAddress - usDiscreteInputStart) % 8;
 80059ee:	4604      	mov	r4, r0
            *pucRegBuffer++ = xMBUtilGetBits(&pucDiscreteInputBuf[iRegIndex++],
 80059f0:	f8df a040 	ldr.w	sl, [pc, #64]	; 8005a34 <eMBRegDiscreteCB+0x70>
 80059f4:	eba8 0800 	sub.w	r8, r8, r0
 80059f8:	f04f 0908 	mov.w	r9, #8
 80059fc:	eb04 0008 	add.w	r0, r4, r8
 8005a00:	b280      	uxth	r0, r0
 8005a02:	464a      	mov	r2, r9
 8005a04:	4629      	mov	r1, r5
 8005a06:	4450      	add	r0, sl
 8005a08:	f7ff fd72 	bl	80054f0 <xMBUtilGetBits>
 8005a0c:	f804 0b01 	strb.w	r0, [r4], #1
        while (iNReg > 0)
 8005a10:	42a7      	cmp	r7, r4
 8005a12:	d1f3      	bne.n	80059fc <eMBRegDiscreteCB+0x38>
        *pucRegBuffer = *pucRegBuffer << (8 - usNDiscrete);
 8005a14:	f006 0607 	and.w	r6, r6, #7
 8005a18:	f1c6 0608 	rsb	r6, r6, #8
 8005a1c:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005a20:	40b3      	lsls	r3, r6
        *pucRegBuffer = *pucRegBuffer >> (8 - usNDiscrete);
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	fa43 f606 	asr.w	r6, r3, r6
 8005a28:	f807 6c01 	strb.w	r6, [r7, #-1]
    eMBErrorCode    eStatus = MB_ENOERR;
 8005a2c:	2000      	movs	r0, #0
        *pucRegBuffer = *pucRegBuffer >> (8 - usNDiscrete);
 8005a2e:	e7d1      	b.n	80059d4 <eMBRegDiscreteCB+0x10>
 8005a30:	20001696 	.word	0x20001696
 8005a34:	20001694 	.word	0x20001694

08005a38 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a38:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a3c:	b9a3      	cbnz	r3, 8005a68 <osKernelInitialize+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a3e:	f3ef 8310 	mrs	r3, PRIMASK
 8005a42:	b9a3      	cbnz	r3, 8005a6e <osKernelInitialize+0x36>
 8005a44:	4b0d      	ldr	r3, [pc, #52]	; (8005a7c <osKernelInitialize+0x44>)
 8005a46:	6818      	ldr	r0, [r3, #0]
 8005a48:	2802      	cmp	r0, #2
 8005a4a:	d004      	beq.n	8005a56 <osKernelInitialize+0x1e>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8005a4c:	b990      	cbnz	r0, 8005a74 <osKernelInitialize+0x3c>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005a4e:	4b0b      	ldr	r3, [pc, #44]	; (8005a7c <osKernelInitialize+0x44>)
 8005a50:	2201      	movs	r2, #1
 8005a52:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005a54:	4770      	bx	lr
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005a56:	f3ef 8311 	mrs	r3, BASEPRI
    } else {
      stat = osError;
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	bf14      	ite	ne
 8005a5e:	f06f 0005 	mvnne.w	r0, #5
 8005a62:	f04f 30ff 	moveq.w	r0, #4294967295
 8005a66:	4770      	bx	lr
    stat = osErrorISR;
 8005a68:	f06f 0005 	mvn.w	r0, #5
 8005a6c:	4770      	bx	lr
 8005a6e:	f06f 0005 	mvn.w	r0, #5
 8005a72:	4770      	bx	lr
      stat = osError;
 8005a74:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	20001954 	.word	0x20001954

08005a80 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005a80:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a82:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a86:	b9c3      	cbnz	r3, 8005aba <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a88:	f3ef 8310 	mrs	r3, PRIMASK
 8005a8c:	b9c3      	cbnz	r3, 8005ac0 <osKernelStart+0x40>
 8005a8e:	4b0f      	ldr	r3, [pc, #60]	; (8005acc <osKernelStart+0x4c>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d008      	beq.n	8005aa8 <osKernelStart+0x28>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d115      	bne.n	8005ac6 <osKernelStart+0x46>
      KernelState = osKernelRunning;
 8005a9a:	4b0c      	ldr	r3, [pc, #48]	; (8005acc <osKernelStart+0x4c>)
 8005a9c:	2202      	movs	r2, #2
 8005a9e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005aa0:	f000 ff74 	bl	800698c <vTaskStartScheduler>
      stat = osOK;
 8005aa4:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 8005aa6:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005aa8:	f3ef 8311 	mrs	r3, BASEPRI
      stat = osError;
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	bf14      	ite	ne
 8005ab0:	f06f 0005 	mvnne.w	r0, #5
 8005ab4:	f04f 30ff 	moveq.w	r0, #4294967295
 8005ab8:	e7f5      	b.n	8005aa6 <osKernelStart+0x26>
    stat = osErrorISR;
 8005aba:	f06f 0005 	mvn.w	r0, #5
 8005abe:	e7f2      	b.n	8005aa6 <osKernelStart+0x26>
 8005ac0:	f06f 0005 	mvn.w	r0, #5
 8005ac4:	e7ef      	b.n	8005aa6 <osKernelStart+0x26>
      stat = osError;
 8005ac6:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8005aca:	e7ec      	b.n	8005aa6 <osKernelStart+0x26>
 8005acc:	20001954 	.word	0x20001954

08005ad0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ad2:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005ad4:	2400      	movs	r4, #0
 8005ad6:	9404      	str	r4, [sp, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ad8:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8005adc:	b9d4      	cbnz	r4, 8005b14 <osThreadNew+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ade:	f3ef 8310 	mrs	r3, PRIMASK
 8005ae2:	b9bb      	cbnz	r3, 8005b14 <osThreadNew+0x44>
 8005ae4:	4b2c      	ldr	r3, [pc, #176]	; (8005b98 <osThreadNew+0xc8>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d00f      	beq.n	8005b0c <osThreadNew+0x3c>
 8005aec:	b190      	cbz	r0, 8005b14 <osThreadNew+0x44>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 8005aee:	2300      	movs	r3, #0
 8005af0:	f88d 3017 	strb.w	r3, [sp, #23]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 8005af4:	2a00      	cmp	r2, #0
 8005af6:	d03a      	beq.n	8005b6e <osThreadNew+0x9e>
      if (attr->name != NULL) {
 8005af8:	6814      	ldr	r4, [r2, #0]
 8005afa:	b174      	cbz	r4, 8005b1a <osThreadNew+0x4a>
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8005afc:	6993      	ldr	r3, [r2, #24]
 8005afe:	b17b      	cbz	r3, 8005b20 <osThreadNew+0x50>
        prio = (UBaseType_t)attr->priority;
 8005b00:	461d      	mov	r5, r3
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005b02:	3b01      	subs	r3, #1
 8005b04:	2b37      	cmp	r3, #55	; 0x37
 8005b06:	d90c      	bls.n	8005b22 <osThreadNew+0x52>
        return (NULL);
 8005b08:	2000      	movs	r0, #0
 8005b0a:	e004      	b.n	8005b16 <osThreadNew+0x46>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b0c:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (func != NULL)) {
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d0eb      	beq.n	8005aec <osThreadNew+0x1c>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005b14:	9804      	ldr	r0, [sp, #16]
}
 8005b16:	b007      	add	sp, #28
 8005b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    name  = &empty;
 8005b1a:	f10d 0417 	add.w	r4, sp, #23
 8005b1e:	e7ed      	b.n	8005afc <osThreadNew+0x2c>
 8005b20:	2518      	movs	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005b22:	6853      	ldr	r3, [r2, #4]
 8005b24:	f013 0f01 	tst.w	r3, #1
 8005b28:	d134      	bne.n	8005b94 <osThreadNew+0xc4>
      if (attr->stack_size > 0U) {
 8005b2a:	6953      	ldr	r3, [r2, #20]
 8005b2c:	b113      	cbz	r3, 8005b34 <osThreadNew+0x64>
        stack = attr->stack_size / sizeof(StackType_t);
 8005b2e:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8005b32:	e001      	b.n	8005b38 <osThreadNew+0x68>
    stack = configMINIMAL_STACK_SIZE;
 8005b34:	f04f 0c80 	mov.w	ip, #128	; 0x80
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005b38:	6896      	ldr	r6, [r2, #8]
 8005b3a:	b18e      	cbz	r6, 8005b60 <osThreadNew+0x90>
 8005b3c:	68d7      	ldr	r7, [r2, #12]
 8005b3e:	2fbb      	cmp	r7, #187	; 0xbb
 8005b40:	d9e8      	bls.n	8005b14 <osThreadNew+0x44>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005b42:	6912      	ldr	r2, [r2, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005b44:	2a00      	cmp	r2, #0
 8005b46:	d0e5      	beq.n	8005b14 <osThreadNew+0x44>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d0e3      	beq.n	8005b14 <osThreadNew+0x44>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b4c:	9602      	str	r6, [sp, #8]
 8005b4e:	9201      	str	r2, [sp, #4]
 8005b50:	9500      	str	r5, [sp, #0]
 8005b52:	460b      	mov	r3, r1
 8005b54:	4662      	mov	r2, ip
 8005b56:	4621      	mov	r1, r4
 8005b58:	f000 feac 	bl	80068b4 <xTaskCreateStatic>
 8005b5c:	9004      	str	r0, [sp, #16]
 8005b5e:	e7d9      	b.n	8005b14 <osThreadNew+0x44>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005b60:	68d3      	ldr	r3, [r2, #12]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1d6      	bne.n	8005b14 <osThreadNew+0x44>
      if (mem == 0) {
 8005b66:	6913      	ldr	r3, [r2, #16]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1d3      	bne.n	8005b14 <osThreadNew+0x44>
 8005b6c:	e004      	b.n	8005b78 <osThreadNew+0xa8>
    prio  = (UBaseType_t)osPriorityNormal;
 8005b6e:	2518      	movs	r5, #24
    stack = configMINIMAL_STACK_SIZE;
 8005b70:	f04f 0c80 	mov.w	ip, #128	; 0x80
    name  = &empty;
 8005b74:	f10d 0417 	add.w	r4, sp, #23
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005b78:	ab04      	add	r3, sp, #16
 8005b7a:	9301      	str	r3, [sp, #4]
 8005b7c:	9500      	str	r5, [sp, #0]
 8005b7e:	460b      	mov	r3, r1
 8005b80:	fa1f f28c 	uxth.w	r2, ip
 8005b84:	4621      	mov	r1, r4
 8005b86:	f000 fecf 	bl	8006928 <xTaskCreate>
 8005b8a:	2801      	cmp	r0, #1
          hTask = NULL;
 8005b8c:	bf1c      	itt	ne
 8005b8e:	2300      	movne	r3, #0
 8005b90:	9304      	strne	r3, [sp, #16]
 8005b92:	e7bf      	b.n	8005b14 <osThreadNew+0x44>
        return (NULL);
 8005b94:	2000      	movs	r0, #0
 8005b96:	e7be      	b.n	8005b16 <osThreadNew+0x46>
 8005b98:	20001954 	.word	0x20001954

08005b9c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005b9c:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b9e:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ba2:	b9a3      	cbnz	r3, 8005bce <osDelay+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ba4:	f3ef 8310 	mrs	r3, PRIMASK
 8005ba8:	b9a3      	cbnz	r3, 8005bd4 <osDelay+0x38>
 8005baa:	4b0c      	ldr	r3, [pc, #48]	; (8005bdc <osDelay+0x40>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d002      	beq.n	8005bb8 <osDelay+0x1c>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8005bb2:	b940      	cbnz	r0, 8005bc6 <osDelay+0x2a>
    stat = osOK;
 8005bb4:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8005bb6:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005bb8:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d0f8      	beq.n	8005bb2 <osDelay+0x16>
    stat = osErrorISR;
 8005bc0:	f06f 0005 	mvn.w	r0, #5
 8005bc4:	e7f7      	b.n	8005bb6 <osDelay+0x1a>
      vTaskDelay(ticks);
 8005bc6:	f001 f859 	bl	8006c7c <vTaskDelay>
    stat = osOK;
 8005bca:	2000      	movs	r0, #0
 8005bcc:	e7f3      	b.n	8005bb6 <osDelay+0x1a>
    stat = osErrorISR;
 8005bce:	f06f 0005 	mvn.w	r0, #5
 8005bd2:	e7f0      	b.n	8005bb6 <osDelay+0x1a>
 8005bd4:	f06f 0005 	mvn.w	r0, #5
 8005bd8:	e7ed      	b.n	8005bb6 <osDelay+0x1a>
 8005bda:	bf00      	nop
 8005bdc:	20001954 	.word	0x20001954

08005be0 <osEventFlagsNew>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005be0:	f3ef 8205 	mrs	r2, IPSR
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;

  if (!IS_IRQ()) {
 8005be4:	b9f2      	cbnz	r2, 8005c24 <osEventFlagsNew+0x44>
osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8005be6:	b508      	push	{r3, lr}
 8005be8:	4603      	mov	r3, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bea:	f3ef 8210 	mrs	r2, PRIMASK
  if (!IS_IRQ()) {
 8005bee:	b9da      	cbnz	r2, 8005c28 <osEventFlagsNew+0x48>
 8005bf0:	4a0e      	ldr	r2, [pc, #56]	; (8005c2c <osEventFlagsNew+0x4c>)
 8005bf2:	6812      	ldr	r2, [r2, #0]
 8005bf4:	2a02      	cmp	r2, #2
 8005bf6:	d007      	beq.n	8005c08 <osEventFlagsNew+0x28>
    mem = -1;

    if (attr != NULL) {
 8005bf8:	b173      	cbz	r3, 8005c18 <osEventFlagsNew+0x38>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8005bfa:	6898      	ldr	r0, [r3, #8]
 8005bfc:	b150      	cbz	r0, 8005c14 <osEventFlagsNew+0x34>
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	2b1f      	cmp	r3, #31
 8005c02:	d80c      	bhi.n	8005c1e <osEventFlagsNew+0x3e>
  hEventGroup = NULL;
 8005c04:	2000      	movs	r0, #0
 8005c06:	e009      	b.n	8005c1c <osEventFlagsNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c08:	f3ef 8211 	mrs	r2, BASEPRI
  if (!IS_IRQ()) {
 8005c0c:	2a00      	cmp	r2, #0
 8005c0e:	d0f3      	beq.n	8005bf8 <osEventFlagsNew+0x18>
  hEventGroup = NULL;
 8005c10:	2000      	movs	r0, #0
        hEventGroup = xEventGroupCreate();
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8005c12:	e003      	b.n	8005c1c <osEventFlagsNew+0x3c>
      if (mem == 0) {
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	b90b      	cbnz	r3, 8005c1c <osEventFlagsNew+0x3c>
        hEventGroup = xEventGroupCreate();
 8005c18:	f000 f847 	bl	8005caa <xEventGroupCreate>
}
 8005c1c:	bd08      	pop	{r3, pc}
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8005c1e:	f000 f81f 	bl	8005c60 <xEventGroupCreateStatic>
 8005c22:	e7fb      	b.n	8005c1c <osEventFlagsNew+0x3c>
  hEventGroup = NULL;
 8005c24:	2000      	movs	r0, #0
}
 8005c26:	4770      	bx	lr
  hEventGroup = NULL;
 8005c28:	2000      	movs	r0, #0
 8005c2a:	e7f7      	b.n	8005c1c <osEventFlagsNew+0x3c>
 8005c2c:	20001954 	.word	0x20001954

08005c30 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005c30:	4b03      	ldr	r3, [pc, #12]	; (8005c40 <vApplicationGetIdleTaskMemory+0x10>)
 8005c32:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005c34:	4b03      	ldr	r3, [pc, #12]	; (8005c44 <vApplicationGetIdleTaskMemory+0x14>)
 8005c36:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005c38:	2380      	movs	r3, #128	; 0x80
 8005c3a:	6013      	str	r3, [r2, #0]
}
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	20001898 	.word	0x20001898
 8005c44:	20001698 	.word	0x20001698

08005c48 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005c48:	4b03      	ldr	r3, [pc, #12]	; (8005c58 <vApplicationGetTimerTaskMemory+0x10>)
 8005c4a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005c4c:	4b03      	ldr	r3, [pc, #12]	; (8005c5c <vApplicationGetTimerTaskMemory+0x14>)
 8005c4e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005c50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c54:	6013      	str	r3, [r2, #0]
}
 8005c56:	4770      	bx	lr
 8005c58:	20001d58 	.word	0x20001d58
 8005c5c:	20001958 	.word	0x20001958

08005c60 <xEventGroupCreateStatic>:
	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8005c60:	b180      	cbz	r0, 8005c84 <xEventGroupCreateStatic+0x24>
	{
 8005c62:	b510      	push	{r4, lr}
 8005c64:	b082      	sub	sp, #8
 8005c66:	4604      	mov	r4, r0
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8005c68:	2320      	movs	r3, #32
 8005c6a:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8005c6c:	9b01      	ldr	r3, [sp, #4]
 8005c6e:	2b20      	cmp	r3, #32
 8005c70:	d011      	beq.n	8005c96 <xEventGroupCreateStatic+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c76:	f383 8811 	msr	BASEPRI, r3
 8005c7a:	f3bf 8f6f 	isb	sy
 8005c7e:	f3bf 8f4f 	dsb	sy
 8005c82:	e7fe      	b.n	8005c82 <xEventGroupCreateStatic+0x22>
 8005c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c88:	f383 8811 	msr	BASEPRI, r3
 8005c8c:	f3bf 8f6f 	isb	sy
 8005c90:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventGroupBuffer );
 8005c94:	e7fe      	b.n	8005c94 <xEventGroupCreateStatic+0x34>
		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */

		if( pxEventBits != NULL )
		{
			pxEventBits->uxEventBits = 0;
 8005c96:	2300      	movs	r3, #0
 8005c98:	f840 3b04 	str.w	r3, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005c9c:	f000 f8f6 	bl	8005e8c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	7723      	strb	r3, [r4, #28]
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
	}
 8005ca4:	4620      	mov	r0, r4
 8005ca6:	b002      	add	sp, #8
 8005ca8:	bd10      	pop	{r4, pc}

08005caa <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8005caa:	b538      	push	{r3, r4, r5, lr}
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8005cac:	2020      	movs	r0, #32
 8005cae:	f001 fdbb 	bl	8007828 <pvPortMalloc>

		if( pxEventBits != NULL )
 8005cb2:	4604      	mov	r4, r0
 8005cb4:	b128      	cbz	r0, 8005cc2 <xEventGroupCreate+0x18>
		{
			pxEventBits->uxEventBits = 0;
 8005cb6:	2500      	movs	r5, #0
 8005cb8:	f840 5b04 	str.w	r5, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005cbc:	f000 f8e6 	bl	8005e8c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8005cc0:	7725      	strb	r5, [r4, #28]
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
	}
 8005cc2:	4620      	mov	r0, r4
 8005cc4:	bd38      	pop	{r3, r4, r5, pc}

08005cc6 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8005cc6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8005cca:	b178      	cbz	r0, 8005cec <xEventGroupWaitBits+0x26>
 8005ccc:	460c      	mov	r4, r1
 8005cce:	4616      	mov	r6, r2
 8005cd0:	461d      	mov	r5, r3
 8005cd2:	4607      	mov	r7, r0
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005cd4:	f011 487f 	ands.w	r8, r1, #4278190080	; 0xff000000
 8005cd8:	d011      	beq.n	8005cfe <xEventGroupWaitBits+0x38>
 8005cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cde:	f383 8811 	msr	BASEPRI, r3
 8005ce2:	f3bf 8f6f 	isb	sy
 8005ce6:	f3bf 8f4f 	dsb	sy
 8005cea:	e7fe      	b.n	8005cea <xEventGroupWaitBits+0x24>
 8005cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf0:	f383 8811 	msr	BASEPRI, r3
 8005cf4:	f3bf 8f6f 	isb	sy
 8005cf8:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 8005cfc:	e7fe      	b.n	8005cfc <xEventGroupWaitBits+0x36>
	configASSERT( uxBitsToWaitFor != 0 );
 8005cfe:	b941      	cbnz	r1, 8005d12 <xEventGroupWaitBits+0x4c>
 8005d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d04:	f383 8811 	msr	BASEPRI, r3
 8005d08:	f3bf 8f6f 	isb	sy
 8005d0c:	f3bf 8f4f 	dsb	sy
 8005d10:	e7fe      	b.n	8005d10 <xEventGroupWaitBits+0x4a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d12:	f001 f96d 	bl	8006ff0 <xTaskGetSchedulerState>
 8005d16:	b950      	cbnz	r0, 8005d2e <xEventGroupWaitBits+0x68>
 8005d18:	9b08      	ldr	r3, [sp, #32]
 8005d1a:	b143      	cbz	r3, 8005d2e <xEventGroupWaitBits+0x68>
 8005d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d20:	f383 8811 	msr	BASEPRI, r3
 8005d24:	f3bf 8f6f 	isb	sy
 8005d28:	f3bf 8f4f 	dsb	sy
 8005d2c:	e7fe      	b.n	8005d2c <xEventGroupWaitBits+0x66>
	}
	#endif

	vTaskSuspendAll();
 8005d2e:	f000 fe7b 	bl	8006a28 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8005d32:	f8d7 9000 	ldr.w	r9, [r7]

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
 8005d36:	bb55      	cbnz	r5, 8005d8e <xEventGroupWaitBits+0xc8>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8005d38:	ea14 0f09 	tst.w	r4, r9
 8005d3c:	bf14      	ite	ne
 8005d3e:	2001      	movne	r0, #1
 8005d40:	2000      	moveq	r0, #0
		if( xWaitConditionMet != pdFALSE )
 8005d42:	bb50      	cbnz	r0, 8005d9a <xEventGroupWaitBits+0xd4>
		else if( xTicksToWait == ( TickType_t ) 0 )
 8005d44:	9b08      	ldr	r3, [sp, #32]
 8005d46:	b363      	cbz	r3, 8005da2 <xEventGroupWaitBits+0xdc>
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8005d48:	2e00      	cmp	r6, #0
 8005d4a:	bf18      	it	ne
 8005d4c:	f04f 7880 	movne.w	r8, #16777216	; 0x1000000
			if( xWaitForAllBits != pdFALSE )
 8005d50:	b10d      	cbz	r5, 8005d56 <xEventGroupWaitBits+0x90>
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8005d52:	f048 6880 	orr.w	r8, r8, #67108864	; 0x4000000
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8005d56:	9a08      	ldr	r2, [sp, #32]
 8005d58:	ea48 0104 	orr.w	r1, r8, r4
 8005d5c:	1d38      	adds	r0, r7, #4
 8005d5e:	f001 f821 	bl	8006da4 <vTaskPlaceOnUnorderedEventList>
	xAlreadyYielded = xTaskResumeAll();
 8005d62:	f000 ff09 	bl	8006b78 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8005d66:	b948      	cbnz	r0, 8005d7c <xEventGroupWaitBits+0xb6>
			portYIELD_WITHIN_API();
 8005d68:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005d6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d70:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005d74:	f3bf 8f4f 	dsb	sy
 8005d78:	f3bf 8f6f 	isb	sy
		uxReturn = uxTaskResetEventItemValue();
 8005d7c:	f001 f990 	bl	80070a0 <uxTaskResetEventItemValue>
 8005d80:	4681      	mov	r9, r0
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8005d82:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8005d86:	d011      	beq.n	8005dac <xEventGroupWaitBits+0xe6>
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005d88:	f029 497f 	bic.w	r9, r9, #4278190080	; 0xff000000
	return uxReturn;
 8005d8c:	e00b      	b.n	8005da6 <xEventGroupWaitBits+0xe0>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8005d8e:	ea34 0309 	bics.w	r3, r4, r9
 8005d92:	bf0c      	ite	eq
 8005d94:	2001      	moveq	r0, #1
 8005d96:	2000      	movne	r0, #0
 8005d98:	e7d3      	b.n	8005d42 <xEventGroupWaitBits+0x7c>
			if( xClearOnExit != pdFALSE )
 8005d9a:	b116      	cbz	r6, 8005da2 <xEventGroupWaitBits+0xdc>
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005d9c:	ea29 0404 	bic.w	r4, r9, r4
 8005da0:	603c      	str	r4, [r7, #0]
	xAlreadyYielded = xTaskResumeAll();
 8005da2:	f000 fee9 	bl	8006b78 <xTaskResumeAll>
}
 8005da6:	4648      	mov	r0, r9
 8005da8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			taskENTER_CRITICAL();
 8005dac:	f001 fbf2 	bl	8007594 <vPortEnterCritical>
				uxReturn = pxEventBits->uxEventBits;
 8005db0:	f8d7 9000 	ldr.w	r9, [r7]
	if( xWaitForAllBits == pdFALSE )
 8005db4:	b965      	cbnz	r5, 8005dd0 <xEventGroupWaitBits+0x10a>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8005db6:	ea14 0f09 	tst.w	r4, r9
 8005dba:	bf14      	ite	ne
 8005dbc:	2301      	movne	r3, #1
 8005dbe:	2300      	moveq	r3, #0
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8005dc0:	b11b      	cbz	r3, 8005dca <xEventGroupWaitBits+0x104>
					if( xClearOnExit != pdFALSE )
 8005dc2:	b116      	cbz	r6, 8005dca <xEventGroupWaitBits+0x104>
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005dc4:	ea29 0404 	bic.w	r4, r9, r4
 8005dc8:	603c      	str	r4, [r7, #0]
			taskEXIT_CRITICAL();
 8005dca:	f001 fc05 	bl	80075d8 <vPortExitCritical>
 8005dce:	e7db      	b.n	8005d88 <xEventGroupWaitBits+0xc2>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8005dd0:	ea34 0309 	bics.w	r3, r4, r9
 8005dd4:	bf0c      	ite	eq
 8005dd6:	2301      	moveq	r3, #1
 8005dd8:	2300      	movne	r3, #0
 8005dda:	e7f1      	b.n	8005dc0 <xEventGroupWaitBits+0xfa>

08005ddc <xEventGroupSetBits>:
	configASSERT( xEventGroup );
 8005ddc:	b178      	cbz	r0, 8005dfe <xEventGroupSetBits+0x22>
{
 8005dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005de2:	460e      	mov	r6, r1
 8005de4:	4605      	mov	r5, r0
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005de6:	f011 487f 	ands.w	r8, r1, #4278190080	; 0xff000000
 8005dea:	d011      	beq.n	8005e10 <xEventGroupSetBits+0x34>
 8005dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df0:	f383 8811 	msr	BASEPRI, r3
 8005df4:	f3bf 8f6f 	isb	sy
 8005df8:	f3bf 8f4f 	dsb	sy
 8005dfc:	e7fe      	b.n	8005dfc <xEventGroupSetBits+0x20>
 8005dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e02:	f383 8811 	msr	BASEPRI, r3
 8005e06:	f3bf 8f6f 	isb	sy
 8005e0a:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 8005e0e:	e7fe      	b.n	8005e0e <xEventGroupSetBits+0x32>
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e10:	f100 070c 	add.w	r7, r0, #12
	vTaskSuspendAll();
 8005e14:	f000 fe08 	bl	8006a28 <vTaskSuspendAll>
		pxListItem = listGET_HEAD_ENTRY( pxList );
 8005e18:	692c      	ldr	r4, [r5, #16]
		pxEventBits->uxEventBits |= uxBitsToSet;
 8005e1a:	682b      	ldr	r3, [r5, #0]
 8005e1c:	4333      	orrs	r3, r6
 8005e1e:	602b      	str	r3, [r5, #0]
		while( pxListItem != pxListEnd )
 8005e20:	42a7      	cmp	r7, r4
 8005e22:	d118      	bne.n	8005e56 <xEventGroupSetBits+0x7a>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005e24:	682b      	ldr	r3, [r5, #0]
 8005e26:	ea23 0308 	bic.w	r3, r3, r8
 8005e2a:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8005e2c:	f000 fea4 	bl	8006b78 <xTaskResumeAll>
}
 8005e30:	6828      	ldr	r0, [r5, #0]
 8005e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8005e36:	6829      	ldr	r1, [r5, #0]
 8005e38:	ea32 0101 	bics.w	r1, r2, r1
 8005e3c:	d109      	bne.n	8005e52 <xEventGroupSetBits+0x76>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8005e3e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
					uxBitsToClear |= uxBitsWaitedFor;
 8005e42:	bf18      	it	ne
 8005e44:	ea48 0802 	orrne.w	r8, r8, r2
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8005e48:	6829      	ldr	r1, [r5, #0]
 8005e4a:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8005e4e:	f001 f837 	bl	8006ec0 <vTaskRemoveFromUnorderedEventList>
		while( pxListItem != pxListEnd )
 8005e52:	42a7      	cmp	r7, r4
 8005e54:	d0e6      	beq.n	8005e24 <xEventGroupSetBits+0x48>
			pxNext = listGET_NEXT( pxListItem );
 8005e56:	4620      	mov	r0, r4
 8005e58:	6864      	ldr	r4, [r4, #4]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8005e5a:	6803      	ldr	r3, [r0, #0]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005e5c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8005e60:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8005e64:	d1e7      	bne.n	8005e36 <xEventGroupSetBits+0x5a>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8005e66:	6829      	ldr	r1, [r5, #0]
 8005e68:	420a      	tst	r2, r1
 8005e6a:	d1e8      	bne.n	8005e3e <xEventGroupSetBits+0x62>
 8005e6c:	e7f1      	b.n	8005e52 <xEventGroupSetBits+0x76>

08005e6e <vEventGroupSetBitsCallback>:
{
 8005e6e:	b508      	push	{r3, lr}
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8005e70:	f7ff ffb4 	bl	8005ddc <xEventGroupSetBits>
}
 8005e74:	bd08      	pop	{r3, pc}
	...

08005e78 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005e78:	b508      	push	{r3, lr}
 8005e7a:	4613      	mov	r3, r2
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8005e7c:	460a      	mov	r2, r1
 8005e7e:	4601      	mov	r1, r0
 8005e80:	4801      	ldr	r0, [pc, #4]	; (8005e88 <xEventGroupSetBitsFromISR+0x10>)
 8005e82:	f001 fb1f 	bl	80074c4 <xTimerPendFunctionCallFromISR>

		return xReturn;
	}
 8005e86:	bd08      	pop	{r3, pc}
 8005e88:	08005e6f 	.word	0x08005e6f

08005e8c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e8c:	f100 0308 	add.w	r3, r0, #8
 8005e90:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e92:	f04f 32ff 	mov.w	r2, #4294967295
 8005e96:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e98:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e9a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005ea0:	4770      	bx	lr

08005ea2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ea6:	4770      	bx	lr

08005ea8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ea8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005eaa:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005eac:	689a      	ldr	r2, [r3, #8]
 8005eae:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005eb0:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005eb2:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005eb4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8005eb6:	6803      	ldr	r3, [r0, #0]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	6003      	str	r3, [r0, #0]
}
 8005ebc:	4770      	bx	lr

08005ebe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ebe:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005ec0:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005ec2:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005ec6:	d011      	beq.n	8005eec <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ec8:	f100 0308 	add.w	r3, r0, #8
 8005ecc:	461c      	mov	r4, r3
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	42aa      	cmp	r2, r5
 8005ed4:	d9fa      	bls.n	8005ecc <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005ed6:	6863      	ldr	r3, [r4, #4]
 8005ed8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005eda:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005edc:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8005ede:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005ee0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8005ee2:	6803      	ldr	r3, [r0, #0]
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	6003      	str	r3, [r0, #0]
}
 8005ee8:	bc30      	pop	{r4, r5}
 8005eea:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8005eec:	6904      	ldr	r4, [r0, #16]
 8005eee:	e7f2      	b.n	8005ed6 <vListInsert+0x18>

08005ef0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005ef0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ef2:	6841      	ldr	r1, [r0, #4]
 8005ef4:	6882      	ldr	r2, [r0, #8]
 8005ef6:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ef8:	6841      	ldr	r1, [r0, #4]
 8005efa:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005efc:	685a      	ldr	r2, [r3, #4]
 8005efe:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f00:	bf04      	itt	eq
 8005f02:	6882      	ldreq	r2, [r0, #8]
 8005f04:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005f06:	2200      	movs	r2, #0
 8005f08:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	3a01      	subs	r2, #1
 8005f0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005f10:	6818      	ldr	r0, [r3, #0]
}
 8005f12:	4770      	bx	lr

08005f14 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005f14:	b510      	push	{r4, lr}
 8005f16:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f18:	f001 fb3c 	bl	8007594 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005f1c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8005f1e:	f001 fb5b 	bl	80075d8 <vPortExitCritical>

	return xReturn;
}
 8005f22:	fab4 f084 	clz	r0, r4
 8005f26:	0940      	lsrs	r0, r0, #5
 8005f28:	bd10      	pop	{r4, pc}

08005f2a <prvCopyDataToQueue>:
{
 8005f2a:	b570      	push	{r4, r5, r6, lr}
 8005f2c:	4604      	mov	r4, r0
 8005f2e:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f30:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005f32:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005f34:	b95a      	cbnz	r2, 8005f4e <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f36:	6803      	ldr	r3, [r0, #0]
 8005f38:	b11b      	cbz	r3, 8005f42 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8005f3a:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f3c:	3601      	adds	r6, #1
 8005f3e:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8005f40:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005f42:	6840      	ldr	r0, [r0, #4]
 8005f44:	f001 f864 	bl	8007010 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	6063      	str	r3, [r4, #4]
 8005f4c:	e7f6      	b.n	8005f3c <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8005f4e:	b96d      	cbnz	r5, 8005f6c <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005f50:	6880      	ldr	r0, [r0, #8]
 8005f52:	f001 fd5b 	bl	8007a0c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005f56:	68a3      	ldr	r3, [r4, #8]
 8005f58:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005f5a:	4413      	add	r3, r2
 8005f5c:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f5e:	6862      	ldr	r2, [r4, #4]
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d319      	bcc.n	8005f98 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f64:	6823      	ldr	r3, [r4, #0]
 8005f66:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8005f68:	4628      	mov	r0, r5
 8005f6a:	e7e7      	b.n	8005f3c <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f6c:	68c0      	ldr	r0, [r0, #12]
 8005f6e:	f001 fd4d 	bl	8007a0c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005f72:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005f74:	4251      	negs	r1, r2
 8005f76:	68e3      	ldr	r3, [r4, #12]
 8005f78:	1a9b      	subs	r3, r3, r2
 8005f7a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f7c:	6822      	ldr	r2, [r4, #0]
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d202      	bcs.n	8005f88 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005f82:	6863      	ldr	r3, [r4, #4]
 8005f84:	440b      	add	r3, r1
 8005f86:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8005f88:	2d02      	cmp	r5, #2
 8005f8a:	d001      	beq.n	8005f90 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8005f8c:	2000      	movs	r0, #0
 8005f8e:	e7d5      	b.n	8005f3c <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f90:	b126      	cbz	r6, 8005f9c <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8005f92:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8005f94:	2000      	movs	r0, #0
 8005f96:	e7d1      	b.n	8005f3c <prvCopyDataToQueue+0x12>
 8005f98:	4628      	mov	r0, r5
 8005f9a:	e7cf      	b.n	8005f3c <prvCopyDataToQueue+0x12>
 8005f9c:	2000      	movs	r0, #0
 8005f9e:	e7cd      	b.n	8005f3c <prvCopyDataToQueue+0x12>

08005fa0 <prvCopyDataFromQueue>:
{
 8005fa0:	b508      	push	{r3, lr}
 8005fa2:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005fa4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005fa6:	b162      	cbz	r2, 8005fc2 <prvCopyDataFromQueue+0x22>
 8005fa8:	4608      	mov	r0, r1
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005faa:	68d9      	ldr	r1, [r3, #12]
 8005fac:	4411      	add	r1, r2
 8005fae:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005fb0:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8005fb4:	4561      	cmp	r1, ip
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005fb6:	bf24      	itt	cs
 8005fb8:	6819      	ldrcs	r1, [r3, #0]
 8005fba:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005fbc:	68d9      	ldr	r1, [r3, #12]
 8005fbe:	f001 fd25 	bl	8007a0c <memcpy>
}
 8005fc2:	bd08      	pop	{r3, pc}

08005fc4 <prvUnlockQueue>:
{
 8005fc4:	b570      	push	{r4, r5, r6, lr}
 8005fc6:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8005fc8:	f001 fae4 	bl	8007594 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005fcc:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8005fd0:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fd2:	2c00      	cmp	r4, #0
 8005fd4:	dd0f      	ble.n	8005ff6 <prvUnlockQueue+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fd6:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8005fda:	e002      	b.n	8005fe2 <prvUnlockQueue+0x1e>
			--cTxLock;
 8005fdc:	3c01      	subs	r4, #1
 8005fde:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fe0:	b14c      	cbz	r4, 8005ff6 <prvUnlockQueue+0x32>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fe2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005fe4:	b13b      	cbz	r3, 8005ff6 <prvUnlockQueue+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fe6:	4630      	mov	r0, r6
 8005fe8:	f000 ff26 	bl	8006e38 <xTaskRemoveFromEventList>
 8005fec:	2800      	cmp	r0, #0
 8005fee:	d0f5      	beq.n	8005fdc <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8005ff0:	f000 fff8 	bl	8006fe4 <vTaskMissedYield>
 8005ff4:	e7f2      	b.n	8005fdc <prvUnlockQueue+0x18>
		pxQueue->cTxLock = queueUNLOCKED;
 8005ff6:	23ff      	movs	r3, #255	; 0xff
 8005ff8:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8005ffc:	f001 faec 	bl	80075d8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8006000:	f001 fac8 	bl	8007594 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8006004:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8006008:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800600a:	2c00      	cmp	r4, #0
 800600c:	dd0f      	ble.n	800602e <prvUnlockQueue+0x6a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800600e:	f105 0610 	add.w	r6, r5, #16
 8006012:	e002      	b.n	800601a <prvUnlockQueue+0x56>
				--cRxLock;
 8006014:	3c01      	subs	r4, #1
 8006016:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006018:	b14c      	cbz	r4, 800602e <prvUnlockQueue+0x6a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800601a:	692b      	ldr	r3, [r5, #16]
 800601c:	b13b      	cbz	r3, 800602e <prvUnlockQueue+0x6a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800601e:	4630      	mov	r0, r6
 8006020:	f000 ff0a 	bl	8006e38 <xTaskRemoveFromEventList>
 8006024:	2800      	cmp	r0, #0
 8006026:	d0f5      	beq.n	8006014 <prvUnlockQueue+0x50>
					vTaskMissedYield();
 8006028:	f000 ffdc 	bl	8006fe4 <vTaskMissedYield>
 800602c:	e7f2      	b.n	8006014 <prvUnlockQueue+0x50>
		pxQueue->cRxLock = queueUNLOCKED;
 800602e:	23ff      	movs	r3, #255	; 0xff
 8006030:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8006034:	f001 fad0 	bl	80075d8 <vPortExitCritical>
}
 8006038:	bd70      	pop	{r4, r5, r6, pc}

0800603a <xQueueGenericReset>:
{
 800603a:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800603c:	b1e0      	cbz	r0, 8006078 <xQueueGenericReset+0x3e>
 800603e:	460d      	mov	r5, r1
 8006040:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8006042:	f001 faa7 	bl	8007594 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006046:	6822      	ldr	r2, [r4, #0]
 8006048:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800604a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800604c:	fb01 f303 	mul.w	r3, r1, r3
 8006050:	18d0      	adds	r0, r2, r3
 8006052:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006054:	2000      	movs	r0, #0
 8006056:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006058:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800605a:	1a5b      	subs	r3, r3, r1
 800605c:	4413      	add	r3, r2
 800605e:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006060:	23ff      	movs	r3, #255	; 0xff
 8006062:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006066:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800606a:	b9fd      	cbnz	r5, 80060ac <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800606c:	6923      	ldr	r3, [r4, #16]
 800606e:	b963      	cbnz	r3, 800608a <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8006070:	f001 fab2 	bl	80075d8 <vPortExitCritical>
}
 8006074:	2001      	movs	r0, #1
 8006076:	bd38      	pop	{r3, r4, r5, pc}
 8006078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607c:	f383 8811 	msr	BASEPRI, r3
 8006080:	f3bf 8f6f 	isb	sy
 8006084:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8006088:	e7fe      	b.n	8006088 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800608a:	f104 0010 	add.w	r0, r4, #16
 800608e:	f000 fed3 	bl	8006e38 <xTaskRemoveFromEventList>
 8006092:	2800      	cmp	r0, #0
 8006094:	d0ec      	beq.n	8006070 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8006096:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800609a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800609e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80060a2:	f3bf 8f4f 	dsb	sy
 80060a6:	f3bf 8f6f 	isb	sy
 80060aa:	e7e1      	b.n	8006070 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80060ac:	f104 0010 	add.w	r0, r4, #16
 80060b0:	f7ff feec 	bl	8005e8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80060b4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80060b8:	f7ff fee8 	bl	8005e8c <vListInitialise>
 80060bc:	e7d8      	b.n	8006070 <xQueueGenericReset+0x36>

080060be <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80060be:	b940      	cbnz	r0, 80060d2 <xQueueGenericCreateStatic+0x14>
 80060c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c4:	f383 8811 	msr	BASEPRI, r3
 80060c8:	f3bf 8f6f 	isb	sy
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	e7fe      	b.n	80060d0 <xQueueGenericCreateStatic+0x12>
	{
 80060d2:	b510      	push	{r4, lr}
 80060d4:	b082      	sub	sp, #8
 80060d6:	461c      	mov	r4, r3
 80060d8:	4603      	mov	r3, r0
		configASSERT( pxStaticQueue != NULL );
 80060da:	b154      	cbz	r4, 80060f2 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80060dc:	b192      	cbz	r2, 8006104 <xQueueGenericCreateStatic+0x46>
 80060de:	b9d9      	cbnz	r1, 8006118 <xQueueGenericCreateStatic+0x5a>
 80060e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	e7fe      	b.n	80060f0 <xQueueGenericCreateStatic+0x32>
 80060f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f6:	f383 8811 	msr	BASEPRI, r3
 80060fa:	f3bf 8f6f 	isb	sy
 80060fe:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8006102:	e7fe      	b.n	8006102 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006104:	b339      	cbz	r1, 8006156 <xQueueGenericCreateStatic+0x98>
 8006106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610a:	f383 8811 	msr	BASEPRI, r3
 800610e:	f3bf 8f6f 	isb	sy
 8006112:	f3bf 8f4f 	dsb	sy
 8006116:	e7fe      	b.n	8006116 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006118:	2050      	movs	r0, #80	; 0x50
 800611a:	9001      	str	r0, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800611c:	9801      	ldr	r0, [sp, #4]
 800611e:	2850      	cmp	r0, #80	; 0x50
 8006120:	d008      	beq.n	8006134 <xQueueGenericCreateStatic+0x76>
 8006122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006126:	f383 8811 	msr	BASEPRI, r3
 800612a:	f3bf 8f6f 	isb	sy
 800612e:	f3bf 8f4f 	dsb	sy
 8006132:	e7fe      	b.n	8006132 <xQueueGenericCreateStatic+0x74>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006134:	2001      	movs	r0, #1
 8006136:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800613a:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800613c:	63e3      	str	r3, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800613e:	6421      	str	r1, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006140:	2101      	movs	r1, #1
 8006142:	4620      	mov	r0, r4
 8006144:	f7ff ff79 	bl	800603a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8006148:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800614c:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8006150:	4620      	mov	r0, r4
 8006152:	b002      	add	sp, #8
 8006154:	bd10      	pop	{r4, pc}
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006156:	2250      	movs	r2, #80	; 0x50
 8006158:	9201      	str	r2, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800615a:	9a01      	ldr	r2, [sp, #4]
 800615c:	2a50      	cmp	r2, #80	; 0x50
 800615e:	d1e0      	bne.n	8006122 <xQueueGenericCreateStatic+0x64>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006160:	2201      	movs	r2, #1
 8006162:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006166:	4622      	mov	r2, r4
 8006168:	e7e7      	b.n	800613a <xQueueGenericCreateStatic+0x7c>

0800616a <xQueueGenericSend>:
{
 800616a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800616e:	b085      	sub	sp, #20
 8006170:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8006172:	b188      	cbz	r0, 8006198 <xQueueGenericSend+0x2e>
 8006174:	460e      	mov	r6, r1
 8006176:	461d      	mov	r5, r3
 8006178:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800617a:	b1b1      	cbz	r1, 80061aa <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800617c:	2d02      	cmp	r5, #2
 800617e:	d120      	bne.n	80061c2 <xQueueGenericSend+0x58>
 8006180:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006182:	2b01      	cmp	r3, #1
 8006184:	d01d      	beq.n	80061c2 <xQueueGenericSend+0x58>
 8006186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618a:	f383 8811 	msr	BASEPRI, r3
 800618e:	f3bf 8f6f 	isb	sy
 8006192:	f3bf 8f4f 	dsb	sy
 8006196:	e7fe      	b.n	8006196 <xQueueGenericSend+0x2c>
 8006198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619c:	f383 8811 	msr	BASEPRI, r3
 80061a0:	f3bf 8f6f 	isb	sy
 80061a4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80061a8:	e7fe      	b.n	80061a8 <xQueueGenericSend+0x3e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061aa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d0e5      	beq.n	800617c <xQueueGenericSend+0x12>
 80061b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b4:	f383 8811 	msr	BASEPRI, r3
 80061b8:	f3bf 8f6f 	isb	sy
 80061bc:	f3bf 8f4f 	dsb	sy
 80061c0:	e7fe      	b.n	80061c0 <xQueueGenericSend+0x56>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061c2:	f000 ff15 	bl	8006ff0 <xTaskGetSchedulerState>
 80061c6:	b950      	cbnz	r0, 80061de <xQueueGenericSend+0x74>
 80061c8:	9b01      	ldr	r3, [sp, #4]
 80061ca:	b163      	cbz	r3, 80061e6 <xQueueGenericSend+0x7c>
 80061cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d0:	f383 8811 	msr	BASEPRI, r3
 80061d4:	f3bf 8f6f 	isb	sy
 80061d8:	f3bf 8f4f 	dsb	sy
 80061dc:	e7fe      	b.n	80061dc <xQueueGenericSend+0x72>
 80061de:	f04f 0800 	mov.w	r8, #0
		prvLockQueue( pxQueue );
 80061e2:	2700      	movs	r7, #0
 80061e4:	e03a      	b.n	800625c <xQueueGenericSend+0xf2>
 80061e6:	f04f 0800 	mov.w	r8, #0
 80061ea:	e7fa      	b.n	80061e2 <xQueueGenericSend+0x78>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80061ec:	462a      	mov	r2, r5
 80061ee:	4631      	mov	r1, r6
 80061f0:	4620      	mov	r0, r4
 80061f2:	f7ff fe9a 	bl	8005f2a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061f8:	b983      	cbnz	r3, 800621c <xQueueGenericSend+0xb2>
					else if( xYieldRequired != pdFALSE )
 80061fa:	b148      	cbz	r0, 8006210 <xQueueGenericSend+0xa6>
						queueYIELD_IF_USING_PREEMPTION();
 80061fc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006204:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8006210:	f001 f9e2 	bl	80075d8 <vPortExitCritical>
				return pdPASS;
 8006214:	2001      	movs	r0, #1
}
 8006216:	b005      	add	sp, #20
 8006218:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800621c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006220:	f000 fe0a 	bl	8006e38 <xTaskRemoveFromEventList>
 8006224:	2800      	cmp	r0, #0
 8006226:	d0f3      	beq.n	8006210 <xQueueGenericSend+0xa6>
							queueYIELD_IF_USING_PREEMPTION();
 8006228:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800622c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006230:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006234:	f3bf 8f4f 	dsb	sy
 8006238:	f3bf 8f6f 	isb	sy
 800623c:	e7e8      	b.n	8006210 <xQueueGenericSend+0xa6>
					taskEXIT_CRITICAL();
 800623e:	f001 f9cb 	bl	80075d8 <vPortExitCritical>
					return errQUEUE_FULL;
 8006242:	2000      	movs	r0, #0
 8006244:	e7e7      	b.n	8006216 <xQueueGenericSend+0xac>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006246:	a802      	add	r0, sp, #8
 8006248:	f000 fe7e 	bl	8006f48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800624c:	e014      	b.n	8006278 <xQueueGenericSend+0x10e>
				prvUnlockQueue( pxQueue );
 800624e:	4620      	mov	r0, r4
 8006250:	f7ff feb8 	bl	8005fc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006254:	f000 fc90 	bl	8006b78 <xTaskResumeAll>
 8006258:	f04f 0801 	mov.w	r8, #1
		taskENTER_CRITICAL();
 800625c:	f001 f99a 	bl	8007594 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006260:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006262:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006264:	429a      	cmp	r2, r3
 8006266:	d3c1      	bcc.n	80061ec <xQueueGenericSend+0x82>
 8006268:	2d02      	cmp	r5, #2
 800626a:	d0bf      	beq.n	80061ec <xQueueGenericSend+0x82>
				if( xTicksToWait == ( TickType_t ) 0 )
 800626c:	9b01      	ldr	r3, [sp, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d0e5      	beq.n	800623e <xQueueGenericSend+0xd4>
				else if( xEntryTimeSet == pdFALSE )
 8006272:	f1b8 0f00 	cmp.w	r8, #0
 8006276:	d0e6      	beq.n	8006246 <xQueueGenericSend+0xdc>
		taskEXIT_CRITICAL();
 8006278:	f001 f9ae 	bl	80075d8 <vPortExitCritical>
		vTaskSuspendAll();
 800627c:	f000 fbd4 	bl	8006a28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006280:	f001 f988 	bl	8007594 <vPortEnterCritical>
 8006284:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8006288:	b252      	sxtb	r2, r2
 800628a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800628e:	bf08      	it	eq
 8006290:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8006294:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8006298:	b252      	sxtb	r2, r2
 800629a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800629e:	bf08      	it	eq
 80062a0:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 80062a4:	f001 f998 	bl	80075d8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062a8:	a901      	add	r1, sp, #4
 80062aa:	a802      	add	r0, sp, #8
 80062ac:	f000 fe58 	bl	8006f60 <xTaskCheckForTimeOut>
 80062b0:	bb00      	cbnz	r0, 80062f4 <xQueueGenericSend+0x18a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80062b2:	f001 f96f 	bl	8007594 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80062b6:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
 80062ba:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80062be:	f001 f98b 	bl	80075d8 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80062c2:	45c1      	cmp	r9, r8
 80062c4:	d1c3      	bne.n	800624e <xQueueGenericSend+0xe4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80062c6:	9901      	ldr	r1, [sp, #4]
 80062c8:	f104 0010 	add.w	r0, r4, #16
 80062cc:	f000 fd52 	bl	8006d74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80062d0:	4620      	mov	r0, r4
 80062d2:	f7ff fe77 	bl	8005fc4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80062d6:	f000 fc4f 	bl	8006b78 <xTaskResumeAll>
 80062da:	2800      	cmp	r0, #0
 80062dc:	d1bc      	bne.n	8006258 <xQueueGenericSend+0xee>
					portYIELD_WITHIN_API();
 80062de:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80062e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062e6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80062ea:	f3bf 8f4f 	dsb	sy
 80062ee:	f3bf 8f6f 	isb	sy
 80062f2:	e7b1      	b.n	8006258 <xQueueGenericSend+0xee>
			prvUnlockQueue( pxQueue );
 80062f4:	4620      	mov	r0, r4
 80062f6:	f7ff fe65 	bl	8005fc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062fa:	f000 fc3d 	bl	8006b78 <xTaskResumeAll>
			return errQUEUE_FULL;
 80062fe:	2000      	movs	r0, #0
 8006300:	e789      	b.n	8006216 <xQueueGenericSend+0xac>

08006302 <xQueueGenericSendFromISR>:
{
 8006302:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8006306:	b190      	cbz	r0, 800632e <xQueueGenericSendFromISR+0x2c>
 8006308:	460f      	mov	r7, r1
 800630a:	4616      	mov	r6, r2
 800630c:	461c      	mov	r4, r3
 800630e:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006310:	b1b1      	cbz	r1, 8006340 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006312:	2c02      	cmp	r4, #2
 8006314:	d120      	bne.n	8006358 <xQueueGenericSendFromISR+0x56>
 8006316:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8006318:	2b01      	cmp	r3, #1
 800631a:	d01d      	beq.n	8006358 <xQueueGenericSendFromISR+0x56>
 800631c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006320:	f383 8811 	msr	BASEPRI, r3
 8006324:	f3bf 8f6f 	isb	sy
 8006328:	f3bf 8f4f 	dsb	sy
 800632c:	e7fe      	b.n	800632c <xQueueGenericSendFromISR+0x2a>
 800632e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006332:	f383 8811 	msr	BASEPRI, r3
 8006336:	f3bf 8f6f 	isb	sy
 800633a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800633e:	e7fe      	b.n	800633e <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006340:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006342:	2b00      	cmp	r3, #0
 8006344:	d0e5      	beq.n	8006312 <xQueueGenericSendFromISR+0x10>
 8006346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634a:	f383 8811 	msr	BASEPRI, r3
 800634e:	f3bf 8f6f 	isb	sy
 8006352:	f3bf 8f4f 	dsb	sy
 8006356:	e7fe      	b.n	8006356 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006358:	f001 fa08 	bl	800776c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800635c:	f3ef 8911 	mrs	r9, BASEPRI
 8006360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006364:	f383 8811 	msr	BASEPRI, r3
 8006368:	f3bf 8f6f 	isb	sy
 800636c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006370:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8006372:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8006374:	429a      	cmp	r2, r3
 8006376:	d306      	bcc.n	8006386 <xQueueGenericSendFromISR+0x84>
 8006378:	2c02      	cmp	r4, #2
 800637a:	d004      	beq.n	8006386 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 800637c:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800637e:	f389 8811 	msr	BASEPRI, r9
}
 8006382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8006386:	f895 8045 	ldrb.w	r8, [r5, #69]	; 0x45
 800638a:	fa4f f888 	sxtb.w	r8, r8
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800638e:	4622      	mov	r2, r4
 8006390:	4639      	mov	r1, r7
 8006392:	4628      	mov	r0, r5
 8006394:	f7ff fdc9 	bl	8005f2a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8006398:	f1b8 3fff 	cmp.w	r8, #4294967295
 800639c:	d006      	beq.n	80063ac <xQueueGenericSendFromISR+0xaa>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800639e:	f108 0301 	add.w	r3, r8, #1
 80063a2:	b25b      	sxtb	r3, r3
 80063a4:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 80063a8:	2001      	movs	r0, #1
 80063aa:	e7e8      	b.n	800637e <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063ac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80063ae:	b90b      	cbnz	r3, 80063b4 <xQueueGenericSendFromISR+0xb2>
			xReturn = pdPASS;
 80063b0:	2001      	movs	r0, #1
 80063b2:	e7e4      	b.n	800637e <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063b4:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80063b8:	f000 fd3e 	bl	8006e38 <xTaskRemoveFromEventList>
 80063bc:	b118      	cbz	r0, 80063c6 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 80063be:	b126      	cbz	r6, 80063ca <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80063c0:	2001      	movs	r0, #1
 80063c2:	6030      	str	r0, [r6, #0]
 80063c4:	e7db      	b.n	800637e <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 80063c6:	2001      	movs	r0, #1
 80063c8:	e7d9      	b.n	800637e <xQueueGenericSendFromISR+0x7c>
 80063ca:	2001      	movs	r0, #1
 80063cc:	e7d7      	b.n	800637e <xQueueGenericSendFromISR+0x7c>

080063ce <xQueueReceive>:
{
 80063ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80063d6:	b180      	cbz	r0, 80063fa <xQueueReceive+0x2c>
 80063d8:	460e      	mov	r6, r1
 80063da:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063dc:	b1b1      	cbz	r1, 800640c <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063de:	f000 fe07 	bl	8006ff0 <xTaskGetSchedulerState>
 80063e2:	b9f8      	cbnz	r0, 8006424 <xQueueReceive+0x56>
 80063e4:	9b01      	ldr	r3, [sp, #4]
 80063e6:	b30b      	cbz	r3, 800642c <xQueueReceive+0x5e>
	__asm volatile
 80063e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ec:	f383 8811 	msr	BASEPRI, r3
 80063f0:	f3bf 8f6f 	isb	sy
 80063f4:	f3bf 8f4f 	dsb	sy
 80063f8:	e7fe      	b.n	80063f8 <xQueueReceive+0x2a>
 80063fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fe:	f383 8811 	msr	BASEPRI, r3
 8006402:	f3bf 8f6f 	isb	sy
 8006406:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800640a:	e7fe      	b.n	800640a <xQueueReceive+0x3c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800640c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800640e:	2b00      	cmp	r3, #0
 8006410:	d0e5      	beq.n	80063de <xQueueReceive+0x10>
 8006412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006416:	f383 8811 	msr	BASEPRI, r3
 800641a:	f3bf 8f6f 	isb	sy
 800641e:	f3bf 8f4f 	dsb	sy
 8006422:	e7fe      	b.n	8006422 <xQueueReceive+0x54>
 8006424:	f04f 0800 	mov.w	r8, #0
		prvLockQueue( pxQueue );
 8006428:	2700      	movs	r7, #0
 800642a:	e03b      	b.n	80064a4 <xQueueReceive+0xd6>
 800642c:	f04f 0800 	mov.w	r8, #0
 8006430:	e7fa      	b.n	8006428 <xQueueReceive+0x5a>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006432:	4631      	mov	r1, r6
 8006434:	4620      	mov	r0, r4
 8006436:	f7ff fdb3 	bl	8005fa0 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800643a:	3d01      	subs	r5, #1
 800643c:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800643e:	6923      	ldr	r3, [r4, #16]
 8006440:	b92b      	cbnz	r3, 800644e <xQueueReceive+0x80>
				taskEXIT_CRITICAL();
 8006442:	f001 f8c9 	bl	80075d8 <vPortExitCritical>
				return pdPASS;
 8006446:	2001      	movs	r0, #1
}
 8006448:	b004      	add	sp, #16
 800644a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800644e:	f104 0010 	add.w	r0, r4, #16
 8006452:	f000 fcf1 	bl	8006e38 <xTaskRemoveFromEventList>
 8006456:	2800      	cmp	r0, #0
 8006458:	d0f3      	beq.n	8006442 <xQueueReceive+0x74>
						queueYIELD_IF_USING_PREEMPTION();
 800645a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800645e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006462:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006466:	f3bf 8f4f 	dsb	sy
 800646a:	f3bf 8f6f 	isb	sy
 800646e:	e7e8      	b.n	8006442 <xQueueReceive+0x74>
					taskEXIT_CRITICAL();
 8006470:	f001 f8b2 	bl	80075d8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8006474:	2000      	movs	r0, #0
 8006476:	e7e7      	b.n	8006448 <xQueueReceive+0x7a>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006478:	a802      	add	r0, sp, #8
 800647a:	f000 fd65 	bl	8006f48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800647e:	e01c      	b.n	80064ba <xQueueReceive+0xec>
				prvUnlockQueue( pxQueue );
 8006480:	4620      	mov	r0, r4
 8006482:	f7ff fd9f 	bl	8005fc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006486:	f000 fb77 	bl	8006b78 <xTaskResumeAll>
 800648a:	e009      	b.n	80064a0 <xQueueReceive+0xd2>
			prvUnlockQueue( pxQueue );
 800648c:	4620      	mov	r0, r4
 800648e:	f7ff fd99 	bl	8005fc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006492:	f000 fb71 	bl	8006b78 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006496:	4620      	mov	r0, r4
 8006498:	f7ff fd3c 	bl	8005f14 <prvIsQueueEmpty>
 800649c:	2800      	cmp	r0, #0
 800649e:	d146      	bne.n	800652e <xQueueReceive+0x160>
 80064a0:	f04f 0801 	mov.w	r8, #1
		taskENTER_CRITICAL();
 80064a4:	f001 f876 	bl	8007594 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064a8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064aa:	2d00      	cmp	r5, #0
 80064ac:	d1c1      	bne.n	8006432 <xQueueReceive+0x64>
				if( xTicksToWait == ( TickType_t ) 0 )
 80064ae:	9b01      	ldr	r3, [sp, #4]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d0dd      	beq.n	8006470 <xQueueReceive+0xa2>
				else if( xEntryTimeSet == pdFALSE )
 80064b4:	f1b8 0f00 	cmp.w	r8, #0
 80064b8:	d0de      	beq.n	8006478 <xQueueReceive+0xaa>
		taskEXIT_CRITICAL();
 80064ba:	f001 f88d 	bl	80075d8 <vPortExitCritical>
		vTaskSuspendAll();
 80064be:	f000 fab3 	bl	8006a28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064c2:	f001 f867 	bl	8007594 <vPortEnterCritical>
 80064c6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80064ca:	b25b      	sxtb	r3, r3
 80064cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d0:	bf08      	it	eq
 80064d2:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 80064d6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80064da:	b25b      	sxtb	r3, r3
 80064dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e0:	bf08      	it	eq
 80064e2:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 80064e6:	f001 f877 	bl	80075d8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064ea:	a901      	add	r1, sp, #4
 80064ec:	a802      	add	r0, sp, #8
 80064ee:	f000 fd37 	bl	8006f60 <xTaskCheckForTimeOut>
 80064f2:	2800      	cmp	r0, #0
 80064f4:	d1ca      	bne.n	800648c <xQueueReceive+0xbe>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064f6:	4620      	mov	r0, r4
 80064f8:	f7ff fd0c 	bl	8005f14 <prvIsQueueEmpty>
 80064fc:	2800      	cmp	r0, #0
 80064fe:	d0bf      	beq.n	8006480 <xQueueReceive+0xb2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006500:	9901      	ldr	r1, [sp, #4]
 8006502:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006506:	f000 fc35 	bl	8006d74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800650a:	4620      	mov	r0, r4
 800650c:	f7ff fd5a 	bl	8005fc4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006510:	f000 fb32 	bl	8006b78 <xTaskResumeAll>
 8006514:	2800      	cmp	r0, #0
 8006516:	d1c3      	bne.n	80064a0 <xQueueReceive+0xd2>
					portYIELD_WITHIN_API();
 8006518:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800651c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006520:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006524:	f3bf 8f4f 	dsb	sy
 8006528:	f3bf 8f6f 	isb	sy
 800652c:	e7b8      	b.n	80064a0 <xQueueReceive+0xd2>
				return errQUEUE_EMPTY;
 800652e:	2000      	movs	r0, #0
 8006530:	e78a      	b.n	8006448 <xQueueReceive+0x7a>
	...

08006534 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006534:	b410      	push	{r4}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006536:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006538:	4c07      	ldr	r4, [pc, #28]	; (8006558 <vQueueAddToRegistry+0x24>)
 800653a:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
 800653e:	b122      	cbz	r2, 800654a <vQueueAddToRegistry+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006540:	3301      	adds	r3, #1
 8006542:	2b08      	cmp	r3, #8
 8006544:	d1f9      	bne.n	800653a <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006546:	bc10      	pop	{r4}
 8006548:	4770      	bx	lr
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800654a:	4a03      	ldr	r2, [pc, #12]	; (8006558 <vQueueAddToRegistry+0x24>)
 800654c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006550:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006554:	6058      	str	r0, [r3, #4]
				break;
 8006556:	e7f6      	b.n	8006546 <vQueueAddToRegistry+0x12>
 8006558:	20001e14 	.word	0x20001e14

0800655c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800655c:	b570      	push	{r4, r5, r6, lr}
 800655e:	4604      	mov	r4, r0
 8006560:	460d      	mov	r5, r1
 8006562:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006564:	f001 f816 	bl	8007594 <vPortEnterCritical>
 8006568:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800656c:	b25b      	sxtb	r3, r3
 800656e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006572:	bf04      	itt	eq
 8006574:	2300      	moveq	r3, #0
 8006576:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 800657a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800657e:	b25b      	sxtb	r3, r3
 8006580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006584:	bf04      	itt	eq
 8006586:	2300      	moveq	r3, #0
 8006588:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 800658c:	f001 f824 	bl	80075d8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006590:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006592:	b11b      	cbz	r3, 800659c <vQueueWaitForMessageRestricted+0x40>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006594:	4620      	mov	r0, r4
 8006596:	f7ff fd15 	bl	8005fc4 <prvUnlockQueue>
	}
 800659a:	bd70      	pop	{r4, r5, r6, pc}
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800659c:	4632      	mov	r2, r6
 800659e:	4629      	mov	r1, r5
 80065a0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80065a4:	f000 fc2a 	bl	8006dfc <vTaskPlaceOnEventListRestricted>
 80065a8:	e7f4      	b.n	8006594 <vQueueWaitForMessageRestricted+0x38>
	...

080065ac <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065ac:	4b08      	ldr	r3, [pc, #32]	; (80065d0 <prvResetNextTaskUnblockTime+0x24>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	b923      	cbnz	r3, 80065be <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80065b4:	4b07      	ldr	r3, [pc, #28]	; (80065d4 <prvResetNextTaskUnblockTime+0x28>)
 80065b6:	f04f 32ff 	mov.w	r2, #4294967295
 80065ba:	601a      	str	r2, [r3, #0]
 80065bc:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80065be:	4b04      	ldr	r3, [pc, #16]	; (80065d0 <prvResetNextTaskUnblockTime+0x24>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	685a      	ldr	r2, [r3, #4]
 80065c8:	4b02      	ldr	r3, [pc, #8]	; (80065d4 <prvResetNextTaskUnblockTime+0x28>)
 80065ca:	601a      	str	r2, [r3, #0]
	}
}
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	20001e58 	.word	0x20001e58
 80065d4:	20002300 	.word	0x20002300

080065d8 <prvInitialiseNewTask>:
{
 80065d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065dc:	4606      	mov	r6, r0
 80065de:	4689      	mov	r9, r1
 80065e0:	461f      	mov	r7, r3
 80065e2:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80065e6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80065e8:	0095      	lsls	r5, r2, #2
 80065ea:	462a      	mov	r2, r5
 80065ec:	21a5      	movs	r1, #165	; 0xa5
 80065ee:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80065f0:	f001 fa1a 	bl	8007a28 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80065f4:	3d04      	subs	r5, #4
 80065f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80065f8:	441d      	add	r5, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80065fa:	f025 0507 	bic.w	r5, r5, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065fe:	f109 3cff 	add.w	ip, r9, #4294967295
 8006602:	f104 0e33 	add.w	lr, r4, #51	; 0x33
 8006606:	f109 010f 	add.w	r1, r9, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800660a:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 800660e:	f80e 2f01 	strb.w	r2, [lr, #1]!
		if( pcName[ x ] == 0x00 )
 8006612:	b10a      	cbz	r2, 8006618 <prvInitialiseNewTask+0x40>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006614:	458c      	cmp	ip, r1
 8006616:	d1f8      	bne.n	800660a <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006618:	f04f 0a00 	mov.w	sl, #0
 800661c:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006620:	9b08      	ldr	r3, [sp, #32]
 8006622:	2b37      	cmp	r3, #55	; 0x37
 8006624:	bf28      	it	cs
 8006626:	2337      	movcs	r3, #55	; 0x37
 8006628:	4699      	mov	r9, r3
	pxNewTCB->uxPriority = uxPriority;
 800662a:	62e3      	str	r3, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800662c:	64e3      	str	r3, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800662e:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006632:	1d20      	adds	r0, r4, #4
 8006634:	f7ff fc35 	bl	8005ea2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006638:	f104 0018 	add.w	r0, r4, #24
 800663c:	f7ff fc31 	bl	8005ea2 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006640:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006642:	f1c9 0338 	rsb	r3, r9, #56	; 0x38
 8006646:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006648:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800664a:	f8c4 a0b4 	str.w	sl, [r4, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800664e:	f884 a0b8 	strb.w	sl, [r4, #184]	; 0xb8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006652:	2260      	movs	r2, #96	; 0x60
 8006654:	4651      	mov	r1, sl
 8006656:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800665a:	f001 f9e5 	bl	8007a28 <memset>
 800665e:	4b09      	ldr	r3, [pc, #36]	; (8006684 <prvInitialiseNewTask+0xac>)
 8006660:	65a3      	str	r3, [r4, #88]	; 0x58
 8006662:	4b09      	ldr	r3, [pc, #36]	; (8006688 <prvInitialiseNewTask+0xb0>)
 8006664:	65e3      	str	r3, [r4, #92]	; 0x5c
 8006666:	4b09      	ldr	r3, [pc, #36]	; (800668c <prvInitialiseNewTask+0xb4>)
 8006668:	6623      	str	r3, [r4, #96]	; 0x60
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800666a:	463a      	mov	r2, r7
 800666c:	4631      	mov	r1, r6
 800666e:	4628      	mov	r0, r5
 8006670:	f000 ff6c 	bl	800754c <pxPortInitialiseStack>
 8006674:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8006676:	f1b8 0f00 	cmp.w	r8, #0
 800667a:	d001      	beq.n	8006680 <prvInitialiseNewTask+0xa8>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800667c:	f8c8 4000 	str.w	r4, [r8]
}
 8006680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006684:	08008030 	.word	0x08008030
 8006688:	08008050 	.word	0x08008050
 800668c:	08008010 	.word	0x08008010

08006690 <prvAddNewTaskToReadyList>:
{
 8006690:	b570      	push	{r4, r5, r6, lr}
 8006692:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8006694:	f000 ff7e 	bl	8007594 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8006698:	4a30      	ldr	r2, [pc, #192]	; (800675c <prvAddNewTaskToReadyList+0xcc>)
 800669a:	6813      	ldr	r3, [r2, #0]
 800669c:	3301      	adds	r3, #1
 800669e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80066a0:	4b2f      	ldr	r3, [pc, #188]	; (8006760 <prvAddNewTaskToReadyList+0xd0>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d034      	beq.n	8006712 <prvAddNewTaskToReadyList+0x82>
			if( xSchedulerRunning == pdFALSE )
 80066a8:	4b2e      	ldr	r3, [pc, #184]	; (8006764 <prvAddNewTaskToReadyList+0xd4>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	b93b      	cbnz	r3, 80066be <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80066ae:	4b2c      	ldr	r3, [pc, #176]	; (8006760 <prvAddNewTaskToReadyList+0xd0>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80066b6:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80066b8:	bf9c      	itt	ls
 80066ba:	4b29      	ldrls	r3, [pc, #164]	; (8006760 <prvAddNewTaskToReadyList+0xd0>)
 80066bc:	601d      	strls	r5, [r3, #0]
		uxTaskNumber++;
 80066be:	4a2a      	ldr	r2, [pc, #168]	; (8006768 <prvAddNewTaskToReadyList+0xd8>)
 80066c0:	6813      	ldr	r3, [r2, #0]
 80066c2:	3301      	adds	r3, #1
 80066c4:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80066c6:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80066c8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80066ca:	4b28      	ldr	r3, [pc, #160]	; (800676c <prvAddNewTaskToReadyList+0xdc>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4298      	cmp	r0, r3
 80066d0:	bf84      	itt	hi
 80066d2:	4b26      	ldrhi	r3, [pc, #152]	; (800676c <prvAddNewTaskToReadyList+0xdc>)
 80066d4:	6018      	strhi	r0, [r3, #0]
 80066d6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80066da:	1d29      	adds	r1, r5, #4
 80066dc:	4b24      	ldr	r3, [pc, #144]	; (8006770 <prvAddNewTaskToReadyList+0xe0>)
 80066de:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80066e2:	f7ff fbe1 	bl	8005ea8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80066e6:	f000 ff77 	bl	80075d8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80066ea:	4b1e      	ldr	r3, [pc, #120]	; (8006764 <prvAddNewTaskToReadyList+0xd4>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	b17b      	cbz	r3, 8006710 <prvAddNewTaskToReadyList+0x80>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80066f0:	4b1b      	ldr	r3, [pc, #108]	; (8006760 <prvAddNewTaskToReadyList+0xd0>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066f6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d209      	bcs.n	8006710 <prvAddNewTaskToReadyList+0x80>
			taskYIELD_IF_USING_PREEMPTION();
 80066fc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006704:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	f3bf 8f6f 	isb	sy
}
 8006710:	bd70      	pop	{r4, r5, r6, pc}
			pxCurrentTCB = pxNewTCB;
 8006712:	4b13      	ldr	r3, [pc, #76]	; (8006760 <prvAddNewTaskToReadyList+0xd0>)
 8006714:	601d      	str	r5, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006716:	6813      	ldr	r3, [r2, #0]
 8006718:	2b01      	cmp	r3, #1
 800671a:	d1d0      	bne.n	80066be <prvAddNewTaskToReadyList+0x2e>
 800671c:	4c14      	ldr	r4, [pc, #80]	; (8006770 <prvAddNewTaskToReadyList+0xe0>)
 800671e:	f504 668c 	add.w	r6, r4, #1120	; 0x460
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006722:	4620      	mov	r0, r4
 8006724:	f7ff fbb2 	bl	8005e8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006728:	3414      	adds	r4, #20
 800672a:	42b4      	cmp	r4, r6
 800672c:	d1f9      	bne.n	8006722 <prvAddNewTaskToReadyList+0x92>
	vListInitialise( &xDelayedTaskList1 );
 800672e:	4e11      	ldr	r6, [pc, #68]	; (8006774 <prvAddNewTaskToReadyList+0xe4>)
 8006730:	4630      	mov	r0, r6
 8006732:	f7ff fbab 	bl	8005e8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006736:	4c10      	ldr	r4, [pc, #64]	; (8006778 <prvAddNewTaskToReadyList+0xe8>)
 8006738:	4620      	mov	r0, r4
 800673a:	f7ff fba7 	bl	8005e8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800673e:	480f      	ldr	r0, [pc, #60]	; (800677c <prvAddNewTaskToReadyList+0xec>)
 8006740:	f7ff fba4 	bl	8005e8c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8006744:	480e      	ldr	r0, [pc, #56]	; (8006780 <prvAddNewTaskToReadyList+0xf0>)
 8006746:	f7ff fba1 	bl	8005e8c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800674a:	480e      	ldr	r0, [pc, #56]	; (8006784 <prvAddNewTaskToReadyList+0xf4>)
 800674c:	f7ff fb9e 	bl	8005e8c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8006750:	4b0d      	ldr	r3, [pc, #52]	; (8006788 <prvAddNewTaskToReadyList+0xf8>)
 8006752:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006754:	4b0d      	ldr	r3, [pc, #52]	; (800678c <prvAddNewTaskToReadyList+0xfc>)
 8006756:	601c      	str	r4, [r3, #0]
}
 8006758:	e7b1      	b.n	80066be <prvAddNewTaskToReadyList+0x2e>
 800675a:	bf00      	nop
 800675c:	200022c0 	.word	0x200022c0
 8006760:	20001e54 	.word	0x20001e54
 8006764:	2000231c 	.word	0x2000231c
 8006768:	200022d0 	.word	0x200022d0
 800676c:	200022d4 	.word	0x200022d4
 8006770:	20001e60 	.word	0x20001e60
 8006774:	200022d8 	.word	0x200022d8
 8006778:	200022ec 	.word	0x200022ec
 800677c:	20002308 	.word	0x20002308
 8006780:	20002334 	.word	0x20002334
 8006784:	20002320 	.word	0x20002320
 8006788:	20001e58 	.word	0x20001e58
 800678c:	20001e5c 	.word	0x20001e5c

08006790 <prvDeleteTCB>:
	{
 8006790:	b510      	push	{r4, lr}
 8006792:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006794:	3054      	adds	r0, #84	; 0x54
 8006796:	f001 f95d 	bl	8007a54 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800679a:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 800679e:	b163      	cbz	r3, 80067ba <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d011      	beq.n	80067c8 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d00e      	beq.n	80067c6 <prvDeleteTCB+0x36>
 80067a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ac:	f383 8811 	msr	BASEPRI, r3
 80067b0:	f3bf 8f6f 	isb	sy
 80067b4:	f3bf 8f4f 	dsb	sy
 80067b8:	e7fe      	b.n	80067b8 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 80067ba:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80067bc:	f001 f8ca 	bl	8007954 <vPortFree>
				vPortFree( pxTCB );
 80067c0:	4620      	mov	r0, r4
 80067c2:	f001 f8c7 	bl	8007954 <vPortFree>
	}
 80067c6:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 80067c8:	4620      	mov	r0, r4
 80067ca:	f001 f8c3 	bl	8007954 <vPortFree>
 80067ce:	e7fa      	b.n	80067c6 <prvDeleteTCB+0x36>

080067d0 <prvIdleTask>:
{
 80067d0:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067d2:	4c15      	ldr	r4, [pc, #84]	; (8006828 <prvIdleTask+0x58>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80067d4:	4f15      	ldr	r7, [pc, #84]	; (800682c <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 80067d6:	4e16      	ldr	r6, [pc, #88]	; (8006830 <prvIdleTask+0x60>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80067d8:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8006834 <prvIdleTask+0x64>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067dc:	6823      	ldr	r3, [r4, #0]
 80067de:	b1a3      	cbz	r3, 800680a <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 80067e0:	f000 fed8 	bl	8007594 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067e8:	1d28      	adds	r0, r5, #4
 80067ea:	f7ff fb81 	bl	8005ef0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80067ee:	6833      	ldr	r3, [r6, #0]
 80067f0:	3b01      	subs	r3, #1
 80067f2:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 80067f4:	6823      	ldr	r3, [r4, #0]
 80067f6:	3b01      	subs	r3, #1
 80067f8:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80067fa:	f000 feed 	bl	80075d8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80067fe:	4628      	mov	r0, r5
 8006800:	f7ff ffc6 	bl	8006790 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006804:	6823      	ldr	r3, [r4, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1ea      	bne.n	80067e0 <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800680a:	f8d8 3000 	ldr.w	r3, [r8]
 800680e:	2b01      	cmp	r3, #1
 8006810:	d9e4      	bls.n	80067dc <prvIdleTask+0xc>
				taskYIELD();
 8006812:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800681a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800681e:	f3bf 8f4f 	dsb	sy
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	e7d9      	b.n	80067dc <prvIdleTask+0xc>
 8006828:	200022c4 	.word	0x200022c4
 800682c:	20002334 	.word	0x20002334
 8006830:	200022c0 	.word	0x200022c0
 8006834:	20001e60 	.word	0x20001e60

08006838 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006838:	b570      	push	{r4, r5, r6, lr}
 800683a:	4604      	mov	r4, r0
 800683c:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800683e:	4b17      	ldr	r3, [pc, #92]	; (800689c <prvAddCurrentTaskToDelayedList+0x64>)
 8006840:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006842:	4b17      	ldr	r3, [pc, #92]	; (80068a0 <prvAddCurrentTaskToDelayedList+0x68>)
 8006844:	6818      	ldr	r0, [r3, #0]
 8006846:	3004      	adds	r0, #4
 8006848:	f7ff fb52 	bl	8005ef0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800684c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006850:	d00d      	beq.n	800686e <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006852:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006854:	4b12      	ldr	r3, [pc, #72]	; (80068a0 <prvAddCurrentTaskToDelayedList+0x68>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800685a:	42a6      	cmp	r6, r4
 800685c:	d910      	bls.n	8006880 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800685e:	4b11      	ldr	r3, [pc, #68]	; (80068a4 <prvAddCurrentTaskToDelayedList+0x6c>)
 8006860:	6818      	ldr	r0, [r3, #0]
 8006862:	4b0f      	ldr	r3, [pc, #60]	; (80068a0 <prvAddCurrentTaskToDelayedList+0x68>)
 8006864:	6819      	ldr	r1, [r3, #0]
 8006866:	3104      	adds	r1, #4
 8006868:	f7ff fb29 	bl	8005ebe <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800686c:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800686e:	2d00      	cmp	r5, #0
 8006870:	d0ef      	beq.n	8006852 <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006872:	4b0b      	ldr	r3, [pc, #44]	; (80068a0 <prvAddCurrentTaskToDelayedList+0x68>)
 8006874:	6819      	ldr	r1, [r3, #0]
 8006876:	3104      	adds	r1, #4
 8006878:	480b      	ldr	r0, [pc, #44]	; (80068a8 <prvAddCurrentTaskToDelayedList+0x70>)
 800687a:	f7ff fb15 	bl	8005ea8 <vListInsertEnd>
 800687e:	e7f5      	b.n	800686c <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006880:	4b0a      	ldr	r3, [pc, #40]	; (80068ac <prvAddCurrentTaskToDelayedList+0x74>)
 8006882:	6818      	ldr	r0, [r3, #0]
 8006884:	4b06      	ldr	r3, [pc, #24]	; (80068a0 <prvAddCurrentTaskToDelayedList+0x68>)
 8006886:	6819      	ldr	r1, [r3, #0]
 8006888:	3104      	adds	r1, #4
 800688a:	f7ff fb18 	bl	8005ebe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800688e:	4b08      	ldr	r3, [pc, #32]	; (80068b0 <prvAddCurrentTaskToDelayedList+0x78>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	42a3      	cmp	r3, r4
					xNextTaskUnblockTime = xTimeToWake;
 8006894:	bf84      	itt	hi
 8006896:	4b06      	ldrhi	r3, [pc, #24]	; (80068b0 <prvAddCurrentTaskToDelayedList+0x78>)
 8006898:	601c      	strhi	r4, [r3, #0]
}
 800689a:	e7e7      	b.n	800686c <prvAddCurrentTaskToDelayedList+0x34>
 800689c:	20002348 	.word	0x20002348
 80068a0:	20001e54 	.word	0x20001e54
 80068a4:	20001e5c 	.word	0x20001e5c
 80068a8:	20002320 	.word	0x20002320
 80068ac:	20001e58 	.word	0x20001e58
 80068b0:	20002300 	.word	0x20002300

080068b4 <xTaskCreateStatic>:
	{
 80068b4:	b530      	push	{r4, r5, lr}
 80068b6:	b087      	sub	sp, #28
 80068b8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 80068ba:	b17c      	cbz	r4, 80068dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80068bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80068be:	b1b5      	cbz	r5, 80068ee <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 80068c0:	25bc      	movs	r5, #188	; 0xbc
 80068c2:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80068c4:	9d04      	ldr	r5, [sp, #16]
 80068c6:	2dbc      	cmp	r5, #188	; 0xbc
 80068c8:	d01a      	beq.n	8006900 <xTaskCreateStatic+0x4c>
 80068ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ce:	f383 8811 	msr	BASEPRI, r3
 80068d2:	f3bf 8f6f 	isb	sy
 80068d6:	f3bf 8f4f 	dsb	sy
 80068da:	e7fe      	b.n	80068da <xTaskCreateStatic+0x26>
 80068dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e0:	f383 8811 	msr	BASEPRI, r3
 80068e4:	f3bf 8f6f 	isb	sy
 80068e8:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 80068ec:	e7fe      	b.n	80068ec <xTaskCreateStatic+0x38>
 80068ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f2:	f383 8811 	msr	BASEPRI, r3
 80068f6:	f3bf 8f6f 	isb	sy
 80068fa:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 80068fe:	e7fe      	b.n	80068fe <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006900:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006902:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006904:	2402      	movs	r4, #2
 8006906:	f885 40b9 	strb.w	r4, [r5, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800690a:	2400      	movs	r4, #0
 800690c:	9403      	str	r4, [sp, #12]
 800690e:	9502      	str	r5, [sp, #8]
 8006910:	ac05      	add	r4, sp, #20
 8006912:	9401      	str	r4, [sp, #4]
 8006914:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006916:	9400      	str	r4, [sp, #0]
 8006918:	f7ff fe5e 	bl	80065d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800691c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800691e:	f7ff feb7 	bl	8006690 <prvAddNewTaskToReadyList>
	}
 8006922:	9805      	ldr	r0, [sp, #20]
 8006924:	b007      	add	sp, #28
 8006926:	bd30      	pop	{r4, r5, pc}

08006928 <xTaskCreate>:
	{
 8006928:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800692c:	b085      	sub	sp, #20
 800692e:	4607      	mov	r7, r0
 8006930:	4688      	mov	r8, r1
 8006932:	4614      	mov	r4, r2
 8006934:	461e      	mov	r6, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006936:	0090      	lsls	r0, r2, #2
 8006938:	f000 ff76 	bl	8007828 <pvPortMalloc>
			if( pxStack != NULL )
 800693c:	b308      	cbz	r0, 8006982 <xTaskCreate+0x5a>
 800693e:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006940:	20bc      	movs	r0, #188	; 0xbc
 8006942:	f000 ff71 	bl	8007828 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8006946:	4605      	mov	r5, r0
 8006948:	b1a8      	cbz	r0, 8006976 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 800694a:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800694e:	2300      	movs	r3, #0
 8006950:	f880 30b9 	strb.w	r3, [r0, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006954:	9303      	str	r3, [sp, #12]
 8006956:	9002      	str	r0, [sp, #8]
 8006958:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800695a:	9301      	str	r3, [sp, #4]
 800695c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800695e:	9300      	str	r3, [sp, #0]
 8006960:	4633      	mov	r3, r6
 8006962:	4622      	mov	r2, r4
 8006964:	4641      	mov	r1, r8
 8006966:	4638      	mov	r0, r7
 8006968:	f7ff fe36 	bl	80065d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800696c:	4628      	mov	r0, r5
 800696e:	f7ff fe8f 	bl	8006690 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006972:	2001      	movs	r0, #1
 8006974:	e007      	b.n	8006986 <xTaskCreate+0x5e>
					vPortFree( pxStack );
 8006976:	4648      	mov	r0, r9
 8006978:	f000 ffec 	bl	8007954 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800697c:	f04f 30ff 	mov.w	r0, #4294967295
 8006980:	e001      	b.n	8006986 <xTaskCreate+0x5e>
 8006982:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8006986:	b005      	add	sp, #20
 8006988:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800698c <vTaskStartScheduler>:
{
 800698c:	b510      	push	{r4, lr}
 800698e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006990:	2400      	movs	r4, #0
 8006992:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006994:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006996:	aa07      	add	r2, sp, #28
 8006998:	a906      	add	r1, sp, #24
 800699a:	a805      	add	r0, sp, #20
 800699c:	f7ff f948 	bl	8005c30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80069a0:	9b05      	ldr	r3, [sp, #20]
 80069a2:	9302      	str	r3, [sp, #8]
 80069a4:	9b06      	ldr	r3, [sp, #24]
 80069a6:	9301      	str	r3, [sp, #4]
 80069a8:	9400      	str	r4, [sp, #0]
 80069aa:	4623      	mov	r3, r4
 80069ac:	9a07      	ldr	r2, [sp, #28]
 80069ae:	4917      	ldr	r1, [pc, #92]	; (8006a0c <vTaskStartScheduler+0x80>)
 80069b0:	4817      	ldr	r0, [pc, #92]	; (8006a10 <vTaskStartScheduler+0x84>)
 80069b2:	f7ff ff7f 	bl	80068b4 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80069b6:	b338      	cbz	r0, 8006a08 <vTaskStartScheduler+0x7c>
			xReturn = xTimerCreateTimerTask();
 80069b8:	f000 fbda 	bl	8007170 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80069bc:	2801      	cmp	r0, #1
 80069be:	d00b      	beq.n	80069d8 <vTaskStartScheduler+0x4c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80069c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80069c4:	d120      	bne.n	8006a08 <vTaskStartScheduler+0x7c>
 80069c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ca:	f383 8811 	msr	BASEPRI, r3
 80069ce:	f3bf 8f6f 	isb	sy
 80069d2:	f3bf 8f4f 	dsb	sy
 80069d6:	e7fe      	b.n	80069d6 <vTaskStartScheduler+0x4a>
 80069d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069dc:	f383 8811 	msr	BASEPRI, r3
 80069e0:	f3bf 8f6f 	isb	sy
 80069e4:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80069e8:	4b0a      	ldr	r3, [pc, #40]	; (8006a14 <vTaskStartScheduler+0x88>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	3354      	adds	r3, #84	; 0x54
 80069ee:	4a0a      	ldr	r2, [pc, #40]	; (8006a18 <vTaskStartScheduler+0x8c>)
 80069f0:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 80069f2:	4b0a      	ldr	r3, [pc, #40]	; (8006a1c <vTaskStartScheduler+0x90>)
 80069f4:	f04f 32ff 	mov.w	r2, #4294967295
 80069f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80069fa:	4b09      	ldr	r3, [pc, #36]	; (8006a20 <vTaskStartScheduler+0x94>)
 80069fc:	2201      	movs	r2, #1
 80069fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006a00:	4b08      	ldr	r3, [pc, #32]	; (8006a24 <vTaskStartScheduler+0x98>)
 8006a02:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8006a04:	f000 fe50 	bl	80076a8 <xPortStartScheduler>
}
 8006a08:	b008      	add	sp, #32
 8006a0a:	bd10      	pop	{r4, pc}
 8006a0c:	08007ff8 	.word	0x08007ff8
 8006a10:	080067d1 	.word	0x080067d1
 8006a14:	20001e54 	.word	0x20001e54
 8006a18:	200000c0 	.word	0x200000c0
 8006a1c:	20002300 	.word	0x20002300
 8006a20:	2000231c 	.word	0x2000231c
 8006a24:	20002348 	.word	0x20002348

08006a28 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006a28:	4a02      	ldr	r2, [pc, #8]	; (8006a34 <vTaskSuspendAll+0xc>)
 8006a2a:	6813      	ldr	r3, [r2, #0]
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	6013      	str	r3, [r2, #0]
}
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	200022cc 	.word	0x200022cc

08006a38 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8006a38:	4b01      	ldr	r3, [pc, #4]	; (8006a40 <xTaskGetTickCount+0x8>)
 8006a3a:	6818      	ldr	r0, [r3, #0]
}
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	20002348 	.word	0x20002348

08006a44 <xTaskIncrementTick>:
{
 8006a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a48:	4b40      	ldr	r3, [pc, #256]	; (8006b4c <xTaskIncrementTick+0x108>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d170      	bne.n	8006b32 <xTaskIncrementTick+0xee>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006a50:	4b3f      	ldr	r3, [pc, #252]	; (8006b50 <xTaskIncrementTick+0x10c>)
 8006a52:	681e      	ldr	r6, [r3, #0]
 8006a54:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8006a56:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006a58:	b9c6      	cbnz	r6, 8006a8c <xTaskIncrementTick+0x48>
			taskSWITCH_DELAYED_LISTS();
 8006a5a:	4b3e      	ldr	r3, [pc, #248]	; (8006b54 <xTaskIncrementTick+0x110>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	b143      	cbz	r3, 8006a74 <xTaskIncrementTick+0x30>
 8006a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a66:	f383 8811 	msr	BASEPRI, r3
 8006a6a:	f3bf 8f6f 	isb	sy
 8006a6e:	f3bf 8f4f 	dsb	sy
 8006a72:	e7fe      	b.n	8006a72 <xTaskIncrementTick+0x2e>
 8006a74:	4a37      	ldr	r2, [pc, #220]	; (8006b54 <xTaskIncrementTick+0x110>)
 8006a76:	6811      	ldr	r1, [r2, #0]
 8006a78:	4b37      	ldr	r3, [pc, #220]	; (8006b58 <xTaskIncrementTick+0x114>)
 8006a7a:	6818      	ldr	r0, [r3, #0]
 8006a7c:	6010      	str	r0, [r2, #0]
 8006a7e:	6019      	str	r1, [r3, #0]
 8006a80:	4a36      	ldr	r2, [pc, #216]	; (8006b5c <xTaskIncrementTick+0x118>)
 8006a82:	6813      	ldr	r3, [r2, #0]
 8006a84:	3301      	adds	r3, #1
 8006a86:	6013      	str	r3, [r2, #0]
 8006a88:	f7ff fd90 	bl	80065ac <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006a8c:	4b34      	ldr	r3, [pc, #208]	; (8006b60 <xTaskIncrementTick+0x11c>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	42b3      	cmp	r3, r6
 8006a92:	d841      	bhi.n	8006b18 <xTaskIncrementTick+0xd4>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a94:	4b2f      	ldr	r3, [pc, #188]	; (8006b54 <xTaskIncrementTick+0x110>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	b13b      	cbz	r3, 8006aac <xTaskIncrementTick+0x68>
BaseType_t xSwitchRequired = pdFALSE;
 8006a9c:	2500      	movs	r5, #0
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006a9e:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8006b54 <xTaskIncrementTick+0x110>
					prvAddTaskToReadyList( pxTCB );
 8006aa2:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8006b64 <xTaskIncrementTick+0x120>
 8006aa6:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8006b68 <xTaskIncrementTick+0x124>
 8006aaa:	e022      	b.n	8006af2 <xTaskIncrementTick+0xae>
BaseType_t xSwitchRequired = pdFALSE;
 8006aac:	2500      	movs	r5, #0
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006aae:	4b2c      	ldr	r3, [pc, #176]	; (8006b60 <xTaskIncrementTick+0x11c>)
 8006ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ab4:	601a      	str	r2, [r3, #0]
					break;
 8006ab6:	e030      	b.n	8006b1a <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = xItemValue;
 8006ab8:	4a29      	ldr	r2, [pc, #164]	; (8006b60 <xTaskIncrementTick+0x11c>)
 8006aba:	6013      	str	r3, [r2, #0]
						break;
 8006abc:	e02d      	b.n	8006b1a <xTaskIncrementTick+0xd6>
					prvAddTaskToReadyList( pxTCB );
 8006abe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006ac0:	f8d9 3000 	ldr.w	r3, [r9]
 8006ac4:	4298      	cmp	r0, r3
 8006ac6:	bf88      	it	hi
 8006ac8:	f8c9 0000 	strhi.w	r0, [r9]
 8006acc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006ad0:	4639      	mov	r1, r7
 8006ad2:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 8006ad6:	f7ff f9e7 	bl	8005ea8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ada:	4b24      	ldr	r3, [pc, #144]	; (8006b6c <xTaskIncrementTick+0x128>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	bf28      	it	cs
 8006ae6:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ae8:	f8d8 3000 	ldr.w	r3, [r8]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d0dd      	beq.n	8006aae <xTaskIncrementTick+0x6a>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006af2:	f8d8 3000 	ldr.w	r3, [r8]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006afa:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8006afc:	429e      	cmp	r6, r3
 8006afe:	d3db      	bcc.n	8006ab8 <xTaskIncrementTick+0x74>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b00:	1d27      	adds	r7, r4, #4
 8006b02:	4638      	mov	r0, r7
 8006b04:	f7ff f9f4 	bl	8005ef0 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d0d7      	beq.n	8006abe <xTaskIncrementTick+0x7a>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b0e:	f104 0018 	add.w	r0, r4, #24
 8006b12:	f7ff f9ed 	bl	8005ef0 <uxListRemove>
 8006b16:	e7d2      	b.n	8006abe <xTaskIncrementTick+0x7a>
BaseType_t xSwitchRequired = pdFALSE;
 8006b18:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006b1a:	4b14      	ldr	r3, [pc, #80]	; (8006b6c <xTaskIncrementTick+0x128>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b20:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	4a10      	ldr	r2, [pc, #64]	; (8006b68 <xTaskIncrementTick+0x124>)
 8006b28:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
 8006b2a:	2b02      	cmp	r3, #2
 8006b2c:	bf28      	it	cs
 8006b2e:	2501      	movcs	r5, #1
 8006b30:	e004      	b.n	8006b3c <xTaskIncrementTick+0xf8>
		++uxPendedTicks;
 8006b32:	4a0f      	ldr	r2, [pc, #60]	; (8006b70 <xTaskIncrementTick+0x12c>)
 8006b34:	6813      	ldr	r3, [r2, #0]
 8006b36:	3301      	adds	r3, #1
 8006b38:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8006b3a:	2500      	movs	r5, #0
		if( xYieldPending != pdFALSE )
 8006b3c:	4b0d      	ldr	r3, [pc, #52]	; (8006b74 <xTaskIncrementTick+0x130>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8006b40:	2b00      	cmp	r3, #0
}
 8006b42:	bf0c      	ite	eq
 8006b44:	4628      	moveq	r0, r5
 8006b46:	2001      	movne	r0, #1
 8006b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b4c:	200022cc 	.word	0x200022cc
 8006b50:	20002348 	.word	0x20002348
 8006b54:	20001e58 	.word	0x20001e58
 8006b58:	20001e5c 	.word	0x20001e5c
 8006b5c:	20002304 	.word	0x20002304
 8006b60:	20002300 	.word	0x20002300
 8006b64:	200022d4 	.word	0x200022d4
 8006b68:	20001e60 	.word	0x20001e60
 8006b6c:	20001e54 	.word	0x20001e54
 8006b70:	200022c8 	.word	0x200022c8
 8006b74:	2000234c 	.word	0x2000234c

08006b78 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8006b78:	4b38      	ldr	r3, [pc, #224]	; (8006c5c <xTaskResumeAll+0xe4>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	b943      	cbnz	r3, 8006b90 <xTaskResumeAll+0x18>
 8006b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b82:	f383 8811 	msr	BASEPRI, r3
 8006b86:	f3bf 8f6f 	isb	sy
 8006b8a:	f3bf 8f4f 	dsb	sy
 8006b8e:	e7fe      	b.n	8006b8e <xTaskResumeAll+0x16>
{
 8006b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
 8006b94:	f000 fcfe 	bl	8007594 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8006b98:	4b30      	ldr	r3, [pc, #192]	; (8006c5c <xTaskResumeAll+0xe4>)
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	3a01      	subs	r2, #1
 8006b9e:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d149      	bne.n	8006c3a <xTaskResumeAll+0xc2>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ba6:	4b2e      	ldr	r3, [pc, #184]	; (8006c60 <xTaskResumeAll+0xe8>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d04b      	beq.n	8006c46 <xTaskResumeAll+0xce>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006bae:	4b2d      	ldr	r3, [pc, #180]	; (8006c64 <xTaskResumeAll+0xec>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d04b      	beq.n	8006c4e <xTaskResumeAll+0xd6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006bb6:	4e2b      	ldr	r6, [pc, #172]	; (8006c64 <xTaskResumeAll+0xec>)
					prvAddTaskToReadyList( pxTCB );
 8006bb8:	4f2b      	ldr	r7, [pc, #172]	; (8006c68 <xTaskResumeAll+0xf0>)
 8006bba:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8006c6c <xTaskResumeAll+0xf4>
 8006bbe:	e002      	b.n	8006bc6 <xTaskResumeAll+0x4e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006bc0:	6833      	ldr	r3, [r6, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d041      	beq.n	8006c4a <xTaskResumeAll+0xd2>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006bc6:	68f3      	ldr	r3, [r6, #12]
 8006bc8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006bca:	f104 0018 	add.w	r0, r4, #24
 8006bce:	f7ff f98f 	bl	8005ef0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bd2:	1d25      	adds	r5, r4, #4
 8006bd4:	4628      	mov	r0, r5
 8006bd6:	f7ff f98b 	bl	8005ef0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006bda:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	4298      	cmp	r0, r3
 8006be0:	bf88      	it	hi
 8006be2:	6038      	strhi	r0, [r7, #0]
 8006be4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006be8:	4629      	mov	r1, r5
 8006bea:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8006bee:	f7ff f95b 	bl	8005ea8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bf2:	4b1f      	ldr	r3, [pc, #124]	; (8006c70 <xTaskResumeAll+0xf8>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d3e0      	bcc.n	8006bc0 <xTaskResumeAll+0x48>
						xYieldPending = pdTRUE;
 8006bfe:	4b1d      	ldr	r3, [pc, #116]	; (8006c74 <xTaskResumeAll+0xfc>)
 8006c00:	2201      	movs	r2, #1
 8006c02:	601a      	str	r2, [r3, #0]
 8006c04:	e7dc      	b.n	8006bc0 <xTaskResumeAll+0x48>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006c06:	3c01      	subs	r4, #1
 8006c08:	d005      	beq.n	8006c16 <xTaskResumeAll+0x9e>
							if( xTaskIncrementTick() != pdFALSE )
 8006c0a:	f7ff ff1b 	bl	8006a44 <xTaskIncrementTick>
 8006c0e:	2800      	cmp	r0, #0
 8006c10:	d0f9      	beq.n	8006c06 <xTaskResumeAll+0x8e>
								xYieldPending = pdTRUE;
 8006c12:	6035      	str	r5, [r6, #0]
 8006c14:	e7f7      	b.n	8006c06 <xTaskResumeAll+0x8e>
						uxPendedTicks = 0;
 8006c16:	4b18      	ldr	r3, [pc, #96]	; (8006c78 <xTaskResumeAll+0x100>)
 8006c18:	2200      	movs	r2, #0
 8006c1a:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 8006c1c:	4b15      	ldr	r3, [pc, #84]	; (8006c74 <xTaskResumeAll+0xfc>)
 8006c1e:	681c      	ldr	r4, [r3, #0]
 8006c20:	b164      	cbz	r4, 8006c3c <xTaskResumeAll+0xc4>
					taskYIELD_IF_USING_PREEMPTION();
 8006c22:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c2a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8006c36:	2401      	movs	r4, #1
 8006c38:	e000      	b.n	8006c3c <xTaskResumeAll+0xc4>
BaseType_t xAlreadyYielded = pdFALSE;
 8006c3a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006c3c:	f000 fccc 	bl	80075d8 <vPortExitCritical>
}
 8006c40:	4620      	mov	r0, r4
 8006c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 8006c46:	2400      	movs	r4, #0
 8006c48:	e7f8      	b.n	8006c3c <xTaskResumeAll+0xc4>
					prvResetNextTaskUnblockTime();
 8006c4a:	f7ff fcaf 	bl	80065ac <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006c4e:	4b0a      	ldr	r3, [pc, #40]	; (8006c78 <xTaskResumeAll+0x100>)
 8006c50:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006c52:	2c00      	cmp	r4, #0
 8006c54:	d0e2      	beq.n	8006c1c <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 8006c56:	4e07      	ldr	r6, [pc, #28]	; (8006c74 <xTaskResumeAll+0xfc>)
 8006c58:	2501      	movs	r5, #1
 8006c5a:	e7d6      	b.n	8006c0a <xTaskResumeAll+0x92>
 8006c5c:	200022cc 	.word	0x200022cc
 8006c60:	200022c0 	.word	0x200022c0
 8006c64:	20002308 	.word	0x20002308
 8006c68:	200022d4 	.word	0x200022d4
 8006c6c:	20001e60 	.word	0x20001e60
 8006c70:	20001e54 	.word	0x20001e54
 8006c74:	2000234c 	.word	0x2000234c
 8006c78:	200022c8 	.word	0x200022c8

08006c7c <vTaskDelay>:
	{
 8006c7c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006c7e:	b1a8      	cbz	r0, 8006cac <vTaskDelay+0x30>
 8006c80:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8006c82:	4b10      	ldr	r3, [pc, #64]	; (8006cc4 <vTaskDelay+0x48>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	b143      	cbz	r3, 8006c9a <vTaskDelay+0x1e>
 8006c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8c:	f383 8811 	msr	BASEPRI, r3
 8006c90:	f3bf 8f6f 	isb	sy
 8006c94:	f3bf 8f4f 	dsb	sy
 8006c98:	e7fe      	b.n	8006c98 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8006c9a:	f7ff fec5 	bl	8006a28 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006c9e:	2100      	movs	r1, #0
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	f7ff fdc9 	bl	8006838 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8006ca6:	f7ff ff67 	bl	8006b78 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8006caa:	b948      	cbnz	r0, 8006cc0 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8006cac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006cb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cb4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	f3bf 8f6f 	isb	sy
	}
 8006cc0:	bd10      	pop	{r4, pc}
 8006cc2:	bf00      	nop
 8006cc4:	200022cc 	.word	0x200022cc

08006cc8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006cc8:	4b24      	ldr	r3, [pc, #144]	; (8006d5c <vTaskSwitchContext+0x94>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	b11b      	cbz	r3, 8006cd6 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8006cce:	4b24      	ldr	r3, [pc, #144]	; (8006d60 <vTaskSwitchContext+0x98>)
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	601a      	str	r2, [r3, #0]
 8006cd4:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8006cd6:	4b22      	ldr	r3, [pc, #136]	; (8006d60 <vTaskSwitchContext+0x98>)
 8006cd8:	2200      	movs	r2, #0
 8006cda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006cdc:	4b21      	ldr	r3, [pc, #132]	; (8006d64 <vTaskSwitchContext+0x9c>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006ce4:	0092      	lsls	r2, r2, #2
 8006ce6:	4920      	ldr	r1, [pc, #128]	; (8006d68 <vTaskSwitchContext+0xa0>)
 8006ce8:	588a      	ldr	r2, [r1, r2]
 8006cea:	b98a      	cbnz	r2, 8006d10 <vTaskSwitchContext+0x48>
 8006cec:	b13b      	cbz	r3, 8006cfe <vTaskSwitchContext+0x36>
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006cf4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006cf8:	b952      	cbnz	r2, 8006d10 <vTaskSwitchContext+0x48>
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1f7      	bne.n	8006cee <vTaskSwitchContext+0x26>
 8006cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d02:	f383 8811 	msr	BASEPRI, r3
 8006d06:	f3bf 8f6f 	isb	sy
 8006d0a:	f3bf 8f4f 	dsb	sy
 8006d0e:	e7fe      	b.n	8006d0e <vTaskSwitchContext+0x46>
 8006d10:	4a15      	ldr	r2, [pc, #84]	; (8006d68 <vTaskSwitchContext+0xa0>)
 8006d12:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006d16:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8006d1a:	6848      	ldr	r0, [r1, #4]
 8006d1c:	6840      	ldr	r0, [r0, #4]
 8006d1e:	6048      	str	r0, [r1, #4]
 8006d20:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006d24:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006d28:	3208      	adds	r2, #8
 8006d2a:	4290      	cmp	r0, r2
 8006d2c:	d00f      	beq.n	8006d4e <vTaskSwitchContext+0x86>
 8006d2e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006d32:	4a0d      	ldr	r2, [pc, #52]	; (8006d68 <vTaskSwitchContext+0xa0>)
 8006d34:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006d38:	6852      	ldr	r2, [r2, #4]
 8006d3a:	68d1      	ldr	r1, [r2, #12]
 8006d3c:	4a0b      	ldr	r2, [pc, #44]	; (8006d6c <vTaskSwitchContext+0xa4>)
 8006d3e:	6011      	str	r1, [r2, #0]
 8006d40:	4908      	ldr	r1, [pc, #32]	; (8006d64 <vTaskSwitchContext+0x9c>)
 8006d42:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006d44:	6813      	ldr	r3, [r2, #0]
 8006d46:	3354      	adds	r3, #84	; 0x54
 8006d48:	4a09      	ldr	r2, [pc, #36]	; (8006d70 <vTaskSwitchContext+0xa8>)
 8006d4a:	6013      	str	r3, [r2, #0]
}
 8006d4c:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006d4e:	6840      	ldr	r0, [r0, #4]
 8006d50:	4a05      	ldr	r2, [pc, #20]	; (8006d68 <vTaskSwitchContext+0xa0>)
 8006d52:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006d56:	6050      	str	r0, [r2, #4]
 8006d58:	e7e9      	b.n	8006d2e <vTaskSwitchContext+0x66>
 8006d5a:	bf00      	nop
 8006d5c:	200022cc 	.word	0x200022cc
 8006d60:	2000234c 	.word	0x2000234c
 8006d64:	200022d4 	.word	0x200022d4
 8006d68:	20001e60 	.word	0x20001e60
 8006d6c:	20001e54 	.word	0x20001e54
 8006d70:	200000c0 	.word	0x200000c0

08006d74 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8006d74:	b158      	cbz	r0, 8006d8e <vTaskPlaceOnEventList+0x1a>
{
 8006d76:	b510      	push	{r4, lr}
 8006d78:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d7a:	4a09      	ldr	r2, [pc, #36]	; (8006da0 <vTaskPlaceOnEventList+0x2c>)
 8006d7c:	6811      	ldr	r1, [r2, #0]
 8006d7e:	3118      	adds	r1, #24
 8006d80:	f7ff f89d 	bl	8005ebe <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d84:	2101      	movs	r1, #1
 8006d86:	4620      	mov	r0, r4
 8006d88:	f7ff fd56 	bl	8006838 <prvAddCurrentTaskToDelayedList>
}
 8006d8c:	bd10      	pop	{r4, pc}
 8006d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d92:	f383 8811 	msr	BASEPRI, r3
 8006d96:	f3bf 8f6f 	isb	sy
 8006d9a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8006d9e:	e7fe      	b.n	8006d9e <vTaskPlaceOnEventList+0x2a>
 8006da0:	20001e54 	.word	0x20001e54

08006da4 <vTaskPlaceOnUnorderedEventList>:
	configASSERT( pxEventList );
 8006da4:	b170      	cbz	r0, 8006dc4 <vTaskPlaceOnUnorderedEventList+0x20>
{
 8006da6:	b510      	push	{r4, lr}
 8006da8:	4614      	mov	r4, r2
 8006daa:	4602      	mov	r2, r0
	configASSERT( uxSchedulerSuspended != 0 );
 8006dac:	4b11      	ldr	r3, [pc, #68]	; (8006df4 <vTaskPlaceOnUnorderedEventList+0x50>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	b98b      	cbnz	r3, 8006dd6 <vTaskPlaceOnUnorderedEventList+0x32>
 8006db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db6:	f383 8811 	msr	BASEPRI, r3
 8006dba:	f3bf 8f6f 	isb	sy
 8006dbe:	f3bf 8f4f 	dsb	sy
 8006dc2:	e7fe      	b.n	8006dc2 <vTaskPlaceOnUnorderedEventList+0x1e>
 8006dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc8:	f383 8811 	msr	BASEPRI, r3
 8006dcc:	f3bf 8f6f 	isb	sy
 8006dd0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8006dd4:	e7fe      	b.n	8006dd4 <vTaskPlaceOnUnorderedEventList+0x30>
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006dd6:	4b08      	ldr	r3, [pc, #32]	; (8006df8 <vTaskPlaceOnUnorderedEventList+0x54>)
 8006dd8:	6818      	ldr	r0, [r3, #0]
 8006dda:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8006dde:	6181      	str	r1, [r0, #24]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006de0:	6819      	ldr	r1, [r3, #0]
 8006de2:	3118      	adds	r1, #24
 8006de4:	4610      	mov	r0, r2
 8006de6:	f7ff f85f 	bl	8005ea8 <vListInsertEnd>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006dea:	2101      	movs	r1, #1
 8006dec:	4620      	mov	r0, r4
 8006dee:	f7ff fd23 	bl	8006838 <prvAddCurrentTaskToDelayedList>
}
 8006df2:	bd10      	pop	{r4, pc}
 8006df4:	200022cc 	.word	0x200022cc
 8006df8:	20001e54 	.word	0x20001e54

08006dfc <vTaskPlaceOnEventListRestricted>:
	{
 8006dfc:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8006dfe:	b178      	cbz	r0, 8006e20 <vTaskPlaceOnEventListRestricted+0x24>
 8006e00:	460d      	mov	r5, r1
 8006e02:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e04:	4a0b      	ldr	r2, [pc, #44]	; (8006e34 <vTaskPlaceOnEventListRestricted+0x38>)
 8006e06:	6811      	ldr	r1, [r2, #0]
 8006e08:	3118      	adds	r1, #24
 8006e0a:	f7ff f84d 	bl	8005ea8 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8006e0e:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006e10:	4621      	mov	r1, r4
 8006e12:	bf0c      	ite	eq
 8006e14:	4628      	moveq	r0, r5
 8006e16:	f04f 30ff 	movne.w	r0, #4294967295
 8006e1a:	f7ff fd0d 	bl	8006838 <prvAddCurrentTaskToDelayedList>
	}
 8006e1e:	bd38      	pop	{r3, r4, r5, pc}
 8006e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e24:	f383 8811 	msr	BASEPRI, r3
 8006e28:	f3bf 8f6f 	isb	sy
 8006e2c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8006e30:	e7fe      	b.n	8006e30 <vTaskPlaceOnEventListRestricted+0x34>
 8006e32:	bf00      	nop
 8006e34:	20001e54 	.word	0x20001e54

08006e38 <xTaskRemoveFromEventList>:
{
 8006e38:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006e3a:	68c3      	ldr	r3, [r0, #12]
 8006e3c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8006e3e:	b32c      	cbz	r4, 8006e8c <xTaskRemoveFromEventList+0x54>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006e40:	f104 0518 	add.w	r5, r4, #24
 8006e44:	4628      	mov	r0, r5
 8006e46:	f7ff f853 	bl	8005ef0 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e4a:	4b17      	ldr	r3, [pc, #92]	; (8006ea8 <xTaskRemoveFromEventList+0x70>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	bb33      	cbnz	r3, 8006e9e <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006e50:	1d25      	adds	r5, r4, #4
 8006e52:	4628      	mov	r0, r5
 8006e54:	f7ff f84c 	bl	8005ef0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006e58:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006e5a:	4b14      	ldr	r3, [pc, #80]	; (8006eac <xTaskRemoveFromEventList+0x74>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4298      	cmp	r0, r3
 8006e60:	bf84      	itt	hi
 8006e62:	4b12      	ldrhi	r3, [pc, #72]	; (8006eac <xTaskRemoveFromEventList+0x74>)
 8006e64:	6018      	strhi	r0, [r3, #0]
 8006e66:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006e6a:	4629      	mov	r1, r5
 8006e6c:	4b10      	ldr	r3, [pc, #64]	; (8006eb0 <xTaskRemoveFromEventList+0x78>)
 8006e6e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006e72:	f7ff f819 	bl	8005ea8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e76:	4b0f      	ldr	r3, [pc, #60]	; (8006eb4 <xTaskRemoveFromEventList+0x7c>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7e:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8006e80:	bf83      	ittte	hi
 8006e82:	2001      	movhi	r0, #1
 8006e84:	4b0c      	ldrhi	r3, [pc, #48]	; (8006eb8 <xTaskRemoveFromEventList+0x80>)
 8006e86:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8006e88:	2000      	movls	r0, #0
}
 8006e8a:	bd38      	pop	{r3, r4, r5, pc}
 8006e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e90:	f383 8811 	msr	BASEPRI, r3
 8006e94:	f3bf 8f6f 	isb	sy
 8006e98:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8006e9c:	e7fe      	b.n	8006e9c <xTaskRemoveFromEventList+0x64>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006e9e:	4629      	mov	r1, r5
 8006ea0:	4806      	ldr	r0, [pc, #24]	; (8006ebc <xTaskRemoveFromEventList+0x84>)
 8006ea2:	f7ff f801 	bl	8005ea8 <vListInsertEnd>
 8006ea6:	e7e6      	b.n	8006e76 <xTaskRemoveFromEventList+0x3e>
 8006ea8:	200022cc 	.word	0x200022cc
 8006eac:	200022d4 	.word	0x200022d4
 8006eb0:	20001e60 	.word	0x20001e60
 8006eb4:	20001e54 	.word	0x20001e54
 8006eb8:	2000234c 	.word	0x2000234c
 8006ebc:	20002308 	.word	0x20002308

08006ec0 <vTaskRemoveFromUnorderedEventList>:
{
 8006ec0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8006ec2:	4b1c      	ldr	r3, [pc, #112]	; (8006f34 <vTaskRemoveFromUnorderedEventList+0x74>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	b943      	cbnz	r3, 8006eda <vTaskRemoveFromUnorderedEventList+0x1a>
 8006ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ecc:	f383 8811 	msr	BASEPRI, r3
 8006ed0:	f3bf 8f6f 	isb	sy
 8006ed4:	f3bf 8f4f 	dsb	sy
 8006ed8:	e7fe      	b.n	8006ed8 <vTaskRemoveFromUnorderedEventList+0x18>
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006eda:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8006ede:	6001      	str	r1, [r0, #0]
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8006ee0:	68c4      	ldr	r4, [r0, #12]
	configASSERT( pxUnblockedTCB );
 8006ee2:	b1f4      	cbz	r4, 8006f22 <vTaskRemoveFromUnorderedEventList+0x62>
	( void ) uxListRemove( pxEventListItem );
 8006ee4:	f7ff f804 	bl	8005ef0 <uxListRemove>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006ee8:	1d25      	adds	r5, r4, #4
 8006eea:	4628      	mov	r0, r5
 8006eec:	f7ff f800 	bl	8005ef0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006ef0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006ef2:	4b11      	ldr	r3, [pc, #68]	; (8006f38 <vTaskRemoveFromUnorderedEventList+0x78>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4298      	cmp	r0, r3
 8006ef8:	bf84      	itt	hi
 8006efa:	4b0f      	ldrhi	r3, [pc, #60]	; (8006f38 <vTaskRemoveFromUnorderedEventList+0x78>)
 8006efc:	6018      	strhi	r0, [r3, #0]
 8006efe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006f02:	4629      	mov	r1, r5
 8006f04:	4b0d      	ldr	r3, [pc, #52]	; (8006f3c <vTaskRemoveFromUnorderedEventList+0x7c>)
 8006f06:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006f0a:	f7fe ffcd 	bl	8005ea8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f0e:	4b0c      	ldr	r3, [pc, #48]	; (8006f40 <vTaskRemoveFromUnorderedEventList+0x80>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d902      	bls.n	8006f20 <vTaskRemoveFromUnorderedEventList+0x60>
		xYieldPending = pdTRUE;
 8006f1a:	4b0a      	ldr	r3, [pc, #40]	; (8006f44 <vTaskRemoveFromUnorderedEventList+0x84>)
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	601a      	str	r2, [r3, #0]
}
 8006f20:	bd38      	pop	{r3, r4, r5, pc}
 8006f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f26:	f383 8811 	msr	BASEPRI, r3
 8006f2a:	f3bf 8f6f 	isb	sy
 8006f2e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8006f32:	e7fe      	b.n	8006f32 <vTaskRemoveFromUnorderedEventList+0x72>
 8006f34:	200022cc 	.word	0x200022cc
 8006f38:	200022d4 	.word	0x200022d4
 8006f3c:	20001e60 	.word	0x20001e60
 8006f40:	20001e54 	.word	0x20001e54
 8006f44:	2000234c 	.word	0x2000234c

08006f48 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006f48:	4b03      	ldr	r3, [pc, #12]	; (8006f58 <vTaskInternalSetTimeOutState+0x10>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006f4e:	4b03      	ldr	r3, [pc, #12]	; (8006f5c <vTaskInternalSetTimeOutState+0x14>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	6043      	str	r3, [r0, #4]
}
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	20002304 	.word	0x20002304
 8006f5c:	20002348 	.word	0x20002348

08006f60 <xTaskCheckForTimeOut>:
{
 8006f60:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
 8006f62:	b1d0      	cbz	r0, 8006f9a <xTaskCheckForTimeOut+0x3a>
 8006f64:	460c      	mov	r4, r1
 8006f66:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8006f68:	b301      	cbz	r1, 8006fac <xTaskCheckForTimeOut+0x4c>
	taskENTER_CRITICAL();
 8006f6a:	f000 fb13 	bl	8007594 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8006f6e:	4b1b      	ldr	r3, [pc, #108]	; (8006fdc <xTaskCheckForTimeOut+0x7c>)
 8006f70:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8006f72:	6823      	ldr	r3, [r4, #0]
 8006f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f78:	d029      	beq.n	8006fce <xTaskCheckForTimeOut+0x6e>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006f7a:	6869      	ldr	r1, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006f7c:	4818      	ldr	r0, [pc, #96]	; (8006fe0 <xTaskCheckForTimeOut+0x80>)
 8006f7e:	6800      	ldr	r0, [r0, #0]
 8006f80:	f8d5 c000 	ldr.w	ip, [r5]
 8006f84:	4584      	cmp	ip, r0
 8006f86:	d001      	beq.n	8006f8c <xTaskCheckForTimeOut+0x2c>
 8006f88:	4291      	cmp	r1, r2
 8006f8a:	d925      	bls.n	8006fd8 <xTaskCheckForTimeOut+0x78>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006f8c:	1a50      	subs	r0, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006f8e:	4283      	cmp	r3, r0
 8006f90:	d815      	bhi.n	8006fbe <xTaskCheckForTimeOut+0x5e>
			*pxTicksToWait = 0;
 8006f92:	2300      	movs	r3, #0
 8006f94:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8006f96:	2401      	movs	r4, #1
 8006f98:	e01a      	b.n	8006fd0 <xTaskCheckForTimeOut+0x70>
 8006f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9e:	f383 8811 	msr	BASEPRI, r3
 8006fa2:	f3bf 8f6f 	isb	sy
 8006fa6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8006faa:	e7fe      	b.n	8006faa <xTaskCheckForTimeOut+0x4a>
 8006fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb0:	f383 8811 	msr	BASEPRI, r3
 8006fb4:	f3bf 8f6f 	isb	sy
 8006fb8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8006fbc:	e7fe      	b.n	8006fbc <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait -= xElapsedTime;
 8006fbe:	1a9b      	subs	r3, r3, r2
 8006fc0:	440b      	add	r3, r1
 8006fc2:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006fc4:	4628      	mov	r0, r5
 8006fc6:	f7ff ffbf 	bl	8006f48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006fca:	2400      	movs	r4, #0
 8006fcc:	e000      	b.n	8006fd0 <xTaskCheckForTimeOut+0x70>
				xReturn = pdFALSE;
 8006fce:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006fd0:	f000 fb02 	bl	80075d8 <vPortExitCritical>
}
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 8006fd8:	2401      	movs	r4, #1
 8006fda:	e7f9      	b.n	8006fd0 <xTaskCheckForTimeOut+0x70>
 8006fdc:	20002348 	.word	0x20002348
 8006fe0:	20002304 	.word	0x20002304

08006fe4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8006fe4:	4b01      	ldr	r3, [pc, #4]	; (8006fec <vTaskMissedYield+0x8>)
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	601a      	str	r2, [r3, #0]
}
 8006fea:	4770      	bx	lr
 8006fec:	2000234c 	.word	0x2000234c

08006ff0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8006ff0:	4b05      	ldr	r3, [pc, #20]	; (8007008 <xTaskGetSchedulerState+0x18>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	b133      	cbz	r3, 8007004 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ff6:	4b05      	ldr	r3, [pc, #20]	; (800700c <xTaskGetSchedulerState+0x1c>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	bf0c      	ite	eq
 8006ffe:	2002      	moveq	r0, #2
 8007000:	2000      	movne	r0, #0
 8007002:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007004:	2001      	movs	r0, #1
	}
 8007006:	4770      	bx	lr
 8007008:	2000231c 	.word	0x2000231c
 800700c:	200022cc 	.word	0x200022cc

08007010 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8007010:	2800      	cmp	r0, #0
 8007012:	d03b      	beq.n	800708c <xTaskPriorityDisinherit+0x7c>
	{
 8007014:	b538      	push	{r3, r4, r5, lr}
 8007016:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8007018:	4b1e      	ldr	r3, [pc, #120]	; (8007094 <xTaskPriorityDisinherit+0x84>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4283      	cmp	r3, r0
 800701e:	d008      	beq.n	8007032 <xTaskPriorityDisinherit+0x22>
 8007020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007024:	f383 8811 	msr	BASEPRI, r3
 8007028:	f3bf 8f6f 	isb	sy
 800702c:	f3bf 8f4f 	dsb	sy
 8007030:	e7fe      	b.n	8007030 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8007032:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007034:	b943      	cbnz	r3, 8007048 <xTaskPriorityDisinherit+0x38>
 8007036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703a:	f383 8811 	msr	BASEPRI, r3
 800703e:	f3bf 8f6f 	isb	sy
 8007042:	f3bf 8f4f 	dsb	sy
 8007046:	e7fe      	b.n	8007046 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8007048:	3b01      	subs	r3, #1
 800704a:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800704c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800704e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8007050:	4291      	cmp	r1, r2
 8007052:	d01d      	beq.n	8007090 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007054:	b10b      	cbz	r3, 800705a <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8007056:	2000      	movs	r0, #0
	}
 8007058:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800705a:	1d05      	adds	r5, r0, #4
 800705c:	4628      	mov	r0, r5
 800705e:	f7fe ff47 	bl	8005ef0 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007062:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8007064:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007066:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 800706a:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800706c:	4b0a      	ldr	r3, [pc, #40]	; (8007098 <xTaskPriorityDisinherit+0x88>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4298      	cmp	r0, r3
 8007072:	bf84      	itt	hi
 8007074:	4b08      	ldrhi	r3, [pc, #32]	; (8007098 <xTaskPriorityDisinherit+0x88>)
 8007076:	6018      	strhi	r0, [r3, #0]
 8007078:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800707c:	4629      	mov	r1, r5
 800707e:	4b07      	ldr	r3, [pc, #28]	; (800709c <xTaskPriorityDisinherit+0x8c>)
 8007080:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007084:	f7fe ff10 	bl	8005ea8 <vListInsertEnd>
					xReturn = pdTRUE;
 8007088:	2001      	movs	r0, #1
 800708a:	e7e5      	b.n	8007058 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 800708c:	2000      	movs	r0, #0
	}
 800708e:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8007090:	2000      	movs	r0, #0
 8007092:	e7e1      	b.n	8007058 <xTaskPriorityDisinherit+0x48>
 8007094:	20001e54 	.word	0x20001e54
 8007098:	200022d4 	.word	0x200022d4
 800709c:	20001e60 	.word	0x20001e60

080070a0 <uxTaskResetEventItemValue>:
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80070a0:	4b04      	ldr	r3, [pc, #16]	; (80070b4 <uxTaskResetEventItemValue+0x14>)
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	6990      	ldr	r0, [r2, #24]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070a6:	6819      	ldr	r1, [r3, #0]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80070ac:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80070b0:	6193      	str	r3, [r2, #24]
}
 80070b2:	4770      	bx	lr
 80070b4:	20001e54 	.word	0x20001e54

080070b8 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80070b8:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80070ba:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80070bc:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 80070be:	4291      	cmp	r1, r2
 80070c0:	d80c      	bhi.n	80070dc <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070c2:	1ad2      	subs	r2, r2, r3
 80070c4:	6983      	ldr	r3, [r0, #24]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d301      	bcc.n	80070ce <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80070ca:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 80070cc:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80070ce:	1d01      	adds	r1, r0, #4
 80070d0:	4b09      	ldr	r3, [pc, #36]	; (80070f8 <prvInsertTimerInActiveList+0x40>)
 80070d2:	6818      	ldr	r0, [r3, #0]
 80070d4:	f7fe fef3 	bl	8005ebe <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80070d8:	2000      	movs	r0, #0
 80070da:	e7f7      	b.n	80070cc <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80070dc:	429a      	cmp	r2, r3
 80070de:	d201      	bcs.n	80070e4 <prvInsertTimerInActiveList+0x2c>
 80070e0:	4299      	cmp	r1, r3
 80070e2:	d206      	bcs.n	80070f2 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80070e4:	1d01      	adds	r1, r0, #4
 80070e6:	4b05      	ldr	r3, [pc, #20]	; (80070fc <prvInsertTimerInActiveList+0x44>)
 80070e8:	6818      	ldr	r0, [r3, #0]
 80070ea:	f7fe fee8 	bl	8005ebe <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80070ee:	2000      	movs	r0, #0
 80070f0:	e7ec      	b.n	80070cc <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 80070f2:	2001      	movs	r0, #1
	return xProcessTimerNow;
 80070f4:	e7ea      	b.n	80070cc <prvInsertTimerInActiveList+0x14>
 80070f6:	bf00      	nop
 80070f8:	20002354 	.word	0x20002354
 80070fc:	20002350 	.word	0x20002350

08007100 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007100:	b530      	push	{r4, r5, lr}
 8007102:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007104:	f000 fa46 	bl	8007594 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007108:	4b11      	ldr	r3, [pc, #68]	; (8007150 <prvCheckForValidListAndQueue+0x50>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	b11b      	cbz	r3, 8007116 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800710e:	f000 fa63 	bl	80075d8 <vPortExitCritical>
}
 8007112:	b003      	add	sp, #12
 8007114:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 8007116:	4d0f      	ldr	r5, [pc, #60]	; (8007154 <prvCheckForValidListAndQueue+0x54>)
 8007118:	4628      	mov	r0, r5
 800711a:	f7fe feb7 	bl	8005e8c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800711e:	4c0e      	ldr	r4, [pc, #56]	; (8007158 <prvCheckForValidListAndQueue+0x58>)
 8007120:	4620      	mov	r0, r4
 8007122:	f7fe feb3 	bl	8005e8c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007126:	4b0d      	ldr	r3, [pc, #52]	; (800715c <prvCheckForValidListAndQueue+0x5c>)
 8007128:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800712a:	4b0d      	ldr	r3, [pc, #52]	; (8007160 <prvCheckForValidListAndQueue+0x60>)
 800712c:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800712e:	2300      	movs	r3, #0
 8007130:	9300      	str	r3, [sp, #0]
 8007132:	4b0c      	ldr	r3, [pc, #48]	; (8007164 <prvCheckForValidListAndQueue+0x64>)
 8007134:	4a0c      	ldr	r2, [pc, #48]	; (8007168 <prvCheckForValidListAndQueue+0x68>)
 8007136:	2110      	movs	r1, #16
 8007138:	200a      	movs	r0, #10
 800713a:	f7fe ffc0 	bl	80060be <xQueueGenericCreateStatic>
 800713e:	4b04      	ldr	r3, [pc, #16]	; (8007150 <prvCheckForValidListAndQueue+0x50>)
 8007140:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 8007142:	2800      	cmp	r0, #0
 8007144:	d0e3      	beq.n	800710e <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007146:	4909      	ldr	r1, [pc, #36]	; (800716c <prvCheckForValidListAndQueue+0x6c>)
 8007148:	f7ff f9f4 	bl	8006534 <vQueueAddToRegistry>
 800714c:	e7df      	b.n	800710e <prvCheckForValidListAndQueue+0xe>
 800714e:	bf00      	nop
 8007150:	20002474 	.word	0x20002474
 8007154:	200023f8 	.word	0x200023f8
 8007158:	2000240c 	.word	0x2000240c
 800715c:	20002350 	.word	0x20002350
 8007160:	20002354 	.word	0x20002354
 8007164:	20002424 	.word	0x20002424
 8007168:	20002358 	.word	0x20002358
 800716c:	08008000 	.word	0x08008000

08007170 <xTimerCreateTimerTask>:
{
 8007170:	b510      	push	{r4, lr}
 8007172:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8007174:	f7ff ffc4 	bl	8007100 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8007178:	4b12      	ldr	r3, [pc, #72]	; (80071c4 <xTimerCreateTimerTask+0x54>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	b1cb      	cbz	r3, 80071b2 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800717e:	2400      	movs	r4, #0
 8007180:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007182:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007184:	aa07      	add	r2, sp, #28
 8007186:	a906      	add	r1, sp, #24
 8007188:	a805      	add	r0, sp, #20
 800718a:	f7fe fd5d 	bl	8005c48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800718e:	9b05      	ldr	r3, [sp, #20]
 8007190:	9302      	str	r3, [sp, #8]
 8007192:	9b06      	ldr	r3, [sp, #24]
 8007194:	9301      	str	r3, [sp, #4]
 8007196:	2302      	movs	r3, #2
 8007198:	9300      	str	r3, [sp, #0]
 800719a:	4623      	mov	r3, r4
 800719c:	9a07      	ldr	r2, [sp, #28]
 800719e:	490a      	ldr	r1, [pc, #40]	; (80071c8 <xTimerCreateTimerTask+0x58>)
 80071a0:	480a      	ldr	r0, [pc, #40]	; (80071cc <xTimerCreateTimerTask+0x5c>)
 80071a2:	f7ff fb87 	bl	80068b4 <xTaskCreateStatic>
 80071a6:	4b0a      	ldr	r3, [pc, #40]	; (80071d0 <xTimerCreateTimerTask+0x60>)
 80071a8:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80071aa:	b110      	cbz	r0, 80071b2 <xTimerCreateTimerTask+0x42>
}
 80071ac:	2001      	movs	r0, #1
 80071ae:	b008      	add	sp, #32
 80071b0:	bd10      	pop	{r4, pc}
 80071b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b6:	f383 8811 	msr	BASEPRI, r3
 80071ba:	f3bf 8f6f 	isb	sy
 80071be:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 80071c2:	e7fe      	b.n	80071c2 <xTimerCreateTimerTask+0x52>
 80071c4:	20002474 	.word	0x20002474
 80071c8:	08008008 	.word	0x08008008
 80071cc:	080072e1 	.word	0x080072e1
 80071d0:	20002478 	.word	0x20002478

080071d4 <xTimerGenericCommand>:
	configASSERT( xTimer );
 80071d4:	b1d8      	cbz	r0, 800720e <xTimerGenericCommand+0x3a>
 80071d6:	469c      	mov	ip, r3
 80071d8:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 80071da:	4815      	ldr	r0, [pc, #84]	; (8007230 <xTimerGenericCommand+0x5c>)
 80071dc:	6800      	ldr	r0, [r0, #0]
 80071de:	b328      	cbz	r0, 800722c <xTimerGenericCommand+0x58>
{
 80071e0:	b500      	push	{lr}
 80071e2:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 80071e4:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80071e6:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80071e8:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80071ea:	2905      	cmp	r1, #5
 80071ec:	dc18      	bgt.n	8007220 <xTimerGenericCommand+0x4c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80071ee:	f7ff feff 	bl	8006ff0 <xTaskGetSchedulerState>
 80071f2:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80071f4:	f04f 0300 	mov.w	r3, #0
 80071f8:	bf0c      	ite	eq
 80071fa:	9a06      	ldreq	r2, [sp, #24]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80071fc:	461a      	movne	r2, r3
 80071fe:	4669      	mov	r1, sp
 8007200:	480b      	ldr	r0, [pc, #44]	; (8007230 <xTimerGenericCommand+0x5c>)
 8007202:	6800      	ldr	r0, [r0, #0]
 8007204:	f7fe ffb1 	bl	800616a <xQueueGenericSend>
}
 8007208:	b005      	add	sp, #20
 800720a:	f85d fb04 	ldr.w	pc, [sp], #4
 800720e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007212:	f383 8811 	msr	BASEPRI, r3
 8007216:	f3bf 8f6f 	isb	sy
 800721a:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 800721e:	e7fe      	b.n	800721e <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007220:	2300      	movs	r3, #0
 8007222:	4662      	mov	r2, ip
 8007224:	4669      	mov	r1, sp
 8007226:	f7ff f86c 	bl	8006302 <xQueueGenericSendFromISR>
 800722a:	e7ed      	b.n	8007208 <xTimerGenericCommand+0x34>
BaseType_t xReturn = pdFAIL;
 800722c:	2000      	movs	r0, #0
}
 800722e:	4770      	bx	lr
 8007230:	20002474 	.word	0x20002474

08007234 <prvSampleTimeNow>:
{
 8007234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007238:	b082      	sub	sp, #8
 800723a:	4682      	mov	sl, r0
	xTimeNow = xTaskGetTickCount();
 800723c:	f7ff fbfc 	bl	8006a38 <xTaskGetTickCount>
 8007240:	4606      	mov	r6, r0
	if( xTimeNow < xLastTime )
 8007242:	4b24      	ldr	r3, [pc, #144]	; (80072d4 <prvSampleTimeNow+0xa0>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4283      	cmp	r3, r0
 8007248:	d808      	bhi.n	800725c <prvSampleTimeNow+0x28>
		*pxTimerListsWereSwitched = pdFALSE;
 800724a:	2300      	movs	r3, #0
 800724c:	f8ca 3000 	str.w	r3, [sl]
	xLastTime = xTimeNow;
 8007250:	4b20      	ldr	r3, [pc, #128]	; (80072d4 <prvSampleTimeNow+0xa0>)
 8007252:	601e      	str	r6, [r3, #0]
}
 8007254:	4630      	mov	r0, r6
 8007256:	b002      	add	sp, #8
 8007258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800725c:	4d1e      	ldr	r5, [pc, #120]	; (80072d8 <prvSampleTimeNow+0xa4>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800725e:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007262:	682b      	ldr	r3, [r5, #0]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	b35a      	cbz	r2, 80072c0 <prvSampleTimeNow+0x8c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	681f      	ldr	r7, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800726c:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800726e:	f104 0904 	add.w	r9, r4, #4
 8007272:	4648      	mov	r0, r9
 8007274:	f7fe fe3c 	bl	8005ef0 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007278:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800727a:	4620      	mov	r0, r4
 800727c:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800727e:	69e3      	ldr	r3, [r4, #28]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d1ee      	bne.n	8007262 <prvSampleTimeNow+0x2e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007284:	69a3      	ldr	r3, [r4, #24]
 8007286:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 8007288:	429f      	cmp	r7, r3
 800728a:	d206      	bcs.n	800729a <prvSampleTimeNow+0x66>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800728c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800728e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007290:	4649      	mov	r1, r9
 8007292:	6828      	ldr	r0, [r5, #0]
 8007294:	f7fe fe13 	bl	8005ebe <vListInsert>
 8007298:	e7e3      	b.n	8007262 <prvSampleTimeNow+0x2e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800729a:	f8cd 8000 	str.w	r8, [sp]
 800729e:	4643      	mov	r3, r8
 80072a0:	463a      	mov	r2, r7
 80072a2:	4641      	mov	r1, r8
 80072a4:	4620      	mov	r0, r4
 80072a6:	f7ff ff95 	bl	80071d4 <xTimerGenericCommand>
				configASSERT( xResult );
 80072aa:	2800      	cmp	r0, #0
 80072ac:	d1d9      	bne.n	8007262 <prvSampleTimeNow+0x2e>
 80072ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b2:	f383 8811 	msr	BASEPRI, r3
 80072b6:	f3bf 8f6f 	isb	sy
 80072ba:	f3bf 8f4f 	dsb	sy
 80072be:	e7fe      	b.n	80072be <prvSampleTimeNow+0x8a>
	pxCurrentTimerList = pxOverflowTimerList;
 80072c0:	4a06      	ldr	r2, [pc, #24]	; (80072dc <prvSampleTimeNow+0xa8>)
 80072c2:	6810      	ldr	r0, [r2, #0]
 80072c4:	4904      	ldr	r1, [pc, #16]	; (80072d8 <prvSampleTimeNow+0xa4>)
 80072c6:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 80072c8:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 80072ca:	2301      	movs	r3, #1
 80072cc:	f8ca 3000 	str.w	r3, [sl]
 80072d0:	e7be      	b.n	8007250 <prvSampleTimeNow+0x1c>
 80072d2:	bf00      	nop
 80072d4:	20002420 	.word	0x20002420
 80072d8:	20002350 	.word	0x20002350
 80072dc:	20002354 	.word	0x20002354

080072e0 <prvTimerTask>:
{
 80072e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80072e4:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80072e6:	4e74      	ldr	r6, [pc, #464]	; (80074b8 <prvTimerTask+0x1d8>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80072e8:	4d74      	ldr	r5, [pc, #464]	; (80074bc <prvTimerTask+0x1dc>)
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80072ea:	4f75      	ldr	r7, [pc, #468]	; (80074c0 <prvTimerTask+0x1e0>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80072ec:	6833      	ldr	r3, [r6, #0]
 80072ee:	f8d3 8000 	ldr.w	r8, [r3]
	if( *pxListWasEmpty == pdFALSE )
 80072f2:	f1b8 0f00 	cmp.w	r8, #0
 80072f6:	d00f      	beq.n	8007318 <prvTimerTask+0x38>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 80072fe:	f7ff fb93 	bl	8006a28 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007302:	a804      	add	r0, sp, #16
 8007304:	f7ff ff96 	bl	8007234 <prvSampleTimeNow>
 8007308:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800730a:	9b04      	ldr	r3, [sp, #16]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d154      	bne.n	80073ba <prvTimerTask+0xda>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007310:	4580      	cmp	r8, r0
 8007312:	d923      	bls.n	800735c <prvTimerTask+0x7c>
 8007314:	2200      	movs	r2, #0
 8007316:	e00d      	b.n	8007334 <prvTimerTask+0x54>
	vTaskSuspendAll();
 8007318:	f7ff fb86 	bl	8006a28 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800731c:	a804      	add	r0, sp, #16
 800731e:	f7ff ff89 	bl	8007234 <prvSampleTimeNow>
 8007322:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8007324:	9b04      	ldr	r3, [sp, #16]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d147      	bne.n	80073ba <prvTimerTask+0xda>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	fab2 f282 	clz	r2, r2
 8007332:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007334:	eba8 0104 	sub.w	r1, r8, r4
 8007338:	6828      	ldr	r0, [r5, #0]
 800733a:	f7ff f90f 	bl	800655c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800733e:	f7ff fc1b 	bl	8006b78 <xTaskResumeAll>
 8007342:	2800      	cmp	r0, #0
 8007344:	d13b      	bne.n	80073be <prvTimerTask+0xde>
					portYIELD_WITHIN_API();
 8007346:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800734a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800734e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007352:	f3bf 8f4f 	dsb	sy
 8007356:	f3bf 8f6f 	isb	sy
 800735a:	e030      	b.n	80073be <prvTimerTask+0xde>
				( void ) xTaskResumeAll();
 800735c:	f7ff fc0c 	bl	8006b78 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007360:	6833      	ldr	r3, [r6, #0]
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	f8d3 900c 	ldr.w	r9, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007368:	f109 0004 	add.w	r0, r9, #4
 800736c:	f7fe fdc0 	bl	8005ef0 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007370:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007374:	2b01      	cmp	r3, #1
 8007376:	d004      	beq.n	8007382 <prvTimerTask+0xa2>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007378:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 800737c:	4648      	mov	r0, r9
 800737e:	4798      	blx	r3
}
 8007380:	e01d      	b.n	80073be <prvTimerTask+0xde>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007382:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8007386:	4643      	mov	r3, r8
 8007388:	4622      	mov	r2, r4
 800738a:	4441      	add	r1, r8
 800738c:	4648      	mov	r0, r9
 800738e:	f7ff fe93 	bl	80070b8 <prvInsertTimerInActiveList>
 8007392:	2800      	cmp	r0, #0
 8007394:	d0f0      	beq.n	8007378 <prvTimerTask+0x98>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007396:	2100      	movs	r1, #0
 8007398:	9100      	str	r1, [sp, #0]
 800739a:	460b      	mov	r3, r1
 800739c:	4642      	mov	r2, r8
 800739e:	4648      	mov	r0, r9
 80073a0:	f7ff ff18 	bl	80071d4 <xTimerGenericCommand>
			configASSERT( xResult );
 80073a4:	2800      	cmp	r0, #0
 80073a6:	d1e7      	bne.n	8007378 <prvTimerTask+0x98>
 80073a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ac:	f383 8811 	msr	BASEPRI, r3
 80073b0:	f3bf 8f6f 	isb	sy
 80073b4:	f3bf 8f4f 	dsb	sy
 80073b8:	e7fe      	b.n	80073b8 <prvTimerTask+0xd8>
			( void ) xTaskResumeAll();
 80073ba:	f7ff fbdd 	bl	8006b78 <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80073be:	2400      	movs	r4, #0
}
 80073c0:	e006      	b.n	80073d0 <prvTimerTask+0xf0>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80073c2:	9907      	ldr	r1, [sp, #28]
 80073c4:	9806      	ldr	r0, [sp, #24]
 80073c6:	9b05      	ldr	r3, [sp, #20]
 80073c8:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80073ca:	9b04      	ldr	r3, [sp, #16]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	da09      	bge.n	80073e4 <prvTimerTask+0x104>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80073d0:	4622      	mov	r2, r4
 80073d2:	a904      	add	r1, sp, #16
 80073d4:	6828      	ldr	r0, [r5, #0]
 80073d6:	f7fe fffa 	bl	80063ce <xQueueReceive>
 80073da:	2800      	cmp	r0, #0
 80073dc:	d086      	beq.n	80072ec <prvTimerTask+0xc>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80073de:	9b04      	ldr	r3, [sp, #16]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	dbee      	blt.n	80073c2 <prvTimerTask+0xe2>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80073e4:	f8dd 8018 	ldr.w	r8, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80073e8:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80073ec:	b11b      	cbz	r3, 80073f6 <prvTimerTask+0x116>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80073ee:	f108 0004 	add.w	r0, r8, #4
 80073f2:	f7fe fd7d 	bl	8005ef0 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80073f6:	a803      	add	r0, sp, #12
 80073f8:	f7ff ff1c 	bl	8007234 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 80073fc:	9b04      	ldr	r3, [sp, #16]
 80073fe:	2b09      	cmp	r3, #9
 8007400:	d8e6      	bhi.n	80073d0 <prvTimerTask+0xf0>
 8007402:	a201      	add	r2, pc, #4	; (adr r2, 8007408 <prvTimerTask+0x128>)
 8007404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007408:	08007431 	.word	0x08007431
 800740c:	08007431 	.word	0x08007431
 8007410:	08007431 	.word	0x08007431
 8007414:	080073d1 	.word	0x080073d1
 8007418:	0800747f 	.word	0x0800747f
 800741c:	080074a7 	.word	0x080074a7
 8007420:	08007431 	.word	0x08007431
 8007424:	08007431 	.word	0x08007431
 8007428:	080073d1 	.word	0x080073d1
 800742c:	0800747f 	.word	0x0800747f
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007430:	9b05      	ldr	r3, [sp, #20]
 8007432:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8007436:	4602      	mov	r2, r0
 8007438:	4419      	add	r1, r3
 800743a:	4640      	mov	r0, r8
 800743c:	f7ff fe3c 	bl	80070b8 <prvInsertTimerInActiveList>
 8007440:	2800      	cmp	r0, #0
 8007442:	d0c5      	beq.n	80073d0 <prvTimerTask+0xf0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007444:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8007448:	4640      	mov	r0, r8
 800744a:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800744c:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d1bd      	bne.n	80073d0 <prvTimerTask+0xf0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007454:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8007458:	9400      	str	r4, [sp, #0]
 800745a:	4623      	mov	r3, r4
 800745c:	9905      	ldr	r1, [sp, #20]
 800745e:	440a      	add	r2, r1
 8007460:	4621      	mov	r1, r4
 8007462:	4640      	mov	r0, r8
 8007464:	f7ff feb6 	bl	80071d4 <xTimerGenericCommand>
							configASSERT( xResult );
 8007468:	2800      	cmp	r0, #0
 800746a:	d1b1      	bne.n	80073d0 <prvTimerTask+0xf0>
 800746c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007470:	f383 8811 	msr	BASEPRI, r3
 8007474:	f3bf 8f6f 	isb	sy
 8007478:	f3bf 8f4f 	dsb	sy
 800747c:	e7fe      	b.n	800747c <prvTimerTask+0x19c>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800747e:	9905      	ldr	r1, [sp, #20]
 8007480:	f8c8 1018 	str.w	r1, [r8, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007484:	b131      	cbz	r1, 8007494 <prvTimerTask+0x1b4>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007486:	4603      	mov	r3, r0
 8007488:	4602      	mov	r2, r0
 800748a:	4401      	add	r1, r0
 800748c:	4640      	mov	r0, r8
 800748e:	f7ff fe13 	bl	80070b8 <prvInsertTimerInActiveList>
					break;
 8007492:	e79d      	b.n	80073d0 <prvTimerTask+0xf0>
 8007494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007498:	f383 8811 	msr	BASEPRI, r3
 800749c:	f3bf 8f6f 	isb	sy
 80074a0:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80074a4:	e7fe      	b.n	80074a4 <prvTimerTask+0x1c4>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80074a6:	f898 302c 	ldrb.w	r3, [r8, #44]	; 0x2c
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d190      	bne.n	80073d0 <prvTimerTask+0xf0>
							vPortFree( pxTimer );
 80074ae:	4640      	mov	r0, r8
 80074b0:	f000 fa50 	bl	8007954 <vPortFree>
 80074b4:	e78c      	b.n	80073d0 <prvTimerTask+0xf0>
 80074b6:	bf00      	nop
 80074b8:	20002350 	.word	0x20002350
 80074bc:	20002474 	.word	0x20002474
 80074c0:	20002354 	.word	0x20002354

080074c4 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80074c4:	b510      	push	{r4, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	4614      	mov	r4, r2
 80074ca:	461a      	mov	r2, r3
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80074cc:	f06f 0301 	mvn.w	r3, #1
 80074d0:	9300      	str	r3, [sp, #0]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80074d2:	9001      	str	r0, [sp, #4]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80074d4:	9102      	str	r1, [sp, #8]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80074d6:	9403      	str	r4, [sp, #12]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80074d8:	2300      	movs	r3, #0
 80074da:	4669      	mov	r1, sp
 80074dc:	4802      	ldr	r0, [pc, #8]	; (80074e8 <xTimerPendFunctionCallFromISR+0x24>)
 80074de:	6800      	ldr	r0, [r0, #0]
 80074e0:	f7fe ff0f 	bl	8006302 <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
 80074e4:	b004      	add	sp, #16
 80074e6:	bd10      	pop	{r4, pc}
 80074e8:	20002474 	.word	0x20002474

080074ec <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80074ec:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 80074ee:	2300      	movs	r3, #0
 80074f0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80074f2:	4b0d      	ldr	r3, [pc, #52]	; (8007528 <prvTaskExitError+0x3c>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074fa:	d008      	beq.n	800750e <prvTaskExitError+0x22>
 80074fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007500:	f383 8811 	msr	BASEPRI, r3
 8007504:	f3bf 8f6f 	isb	sy
 8007508:	f3bf 8f4f 	dsb	sy
 800750c:	e7fe      	b.n	800750c <prvTaskExitError+0x20>
 800750e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007512:	f383 8811 	msr	BASEPRI, r3
 8007516:	f3bf 8f6f 	isb	sy
 800751a:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800751e:	9b01      	ldr	r3, [sp, #4]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d0fc      	beq.n	800751e <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007524:	b002      	add	sp, #8
 8007526:	4770      	bx	lr
 8007528:	200000bc 	.word	0x200000bc

0800752c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800752c:	4806      	ldr	r0, [pc, #24]	; (8007548 <prvPortStartFirstTask+0x1c>)
 800752e:	6800      	ldr	r0, [r0, #0]
 8007530:	6800      	ldr	r0, [r0, #0]
 8007532:	f380 8808 	msr	MSP, r0
 8007536:	b662      	cpsie	i
 8007538:	b661      	cpsie	f
 800753a:	f3bf 8f4f 	dsb	sy
 800753e:	f3bf 8f6f 	isb	sy
 8007542:	df00      	svc	0
 8007544:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007546:	0000      	.short	0x0000
 8007548:	e000ed08 	.word	0xe000ed08

0800754c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800754c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007550:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007554:	f021 0101 	bic.w	r1, r1, #1
 8007558:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800755c:	4b03      	ldr	r3, [pc, #12]	; (800756c <pxPortInitialiseStack+0x20>)
 800755e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007562:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8007566:	3840      	subs	r0, #64	; 0x40
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	080074ed 	.word	0x080074ed

08007570 <SVC_Handler>:
	__asm volatile (
 8007570:	4b07      	ldr	r3, [pc, #28]	; (8007590 <pxCurrentTCBConst2>)
 8007572:	6819      	ldr	r1, [r3, #0]
 8007574:	6808      	ldr	r0, [r1, #0]
 8007576:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800757a:	f380 8809 	msr	PSP, r0
 800757e:	f3bf 8f6f 	isb	sy
 8007582:	f04f 0000 	mov.w	r0, #0
 8007586:	f380 8811 	msr	BASEPRI, r0
 800758a:	f04e 0e0d 	orr.w	lr, lr, #13
 800758e:	4770      	bx	lr

08007590 <pxCurrentTCBConst2>:
 8007590:	20001e54 	.word	0x20001e54

08007594 <vPortEnterCritical>:
 8007594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007598:	f383 8811 	msr	BASEPRI, r3
 800759c:	f3bf 8f6f 	isb	sy
 80075a0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80075a4:	4a0b      	ldr	r2, [pc, #44]	; (80075d4 <vPortEnterCritical+0x40>)
 80075a6:	6813      	ldr	r3, [r2, #0]
 80075a8:	3301      	adds	r3, #1
 80075aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d000      	beq.n	80075b2 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 80075b0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80075b2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80075b6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 80075ba:	f013 0fff 	tst.w	r3, #255	; 0xff
 80075be:	d0f7      	beq.n	80075b0 <vPortEnterCritical+0x1c>
 80075c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c4:	f383 8811 	msr	BASEPRI, r3
 80075c8:	f3bf 8f6f 	isb	sy
 80075cc:	f3bf 8f4f 	dsb	sy
 80075d0:	e7fe      	b.n	80075d0 <vPortEnterCritical+0x3c>
 80075d2:	bf00      	nop
 80075d4:	200000bc 	.word	0x200000bc

080075d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 80075d8:	4b09      	ldr	r3, [pc, #36]	; (8007600 <vPortExitCritical+0x28>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	b943      	cbnz	r3, 80075f0 <vPortExitCritical+0x18>
 80075de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e2:	f383 8811 	msr	BASEPRI, r3
 80075e6:	f3bf 8f6f 	isb	sy
 80075ea:	f3bf 8f4f 	dsb	sy
 80075ee:	e7fe      	b.n	80075ee <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80075f0:	3b01      	subs	r3, #1
 80075f2:	4a03      	ldr	r2, [pc, #12]	; (8007600 <vPortExitCritical+0x28>)
 80075f4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80075f6:	b90b      	cbnz	r3, 80075fc <vPortExitCritical+0x24>
	__asm volatile
 80075f8:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80075fc:	4770      	bx	lr
 80075fe:	bf00      	nop
 8007600:	200000bc 	.word	0x200000bc
	...

08007610 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007610:	f3ef 8009 	mrs	r0, PSP
 8007614:	f3bf 8f6f 	isb	sy
 8007618:	4b0d      	ldr	r3, [pc, #52]	; (8007650 <pxCurrentTCBConst>)
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007620:	6010      	str	r0, [r2, #0]
 8007622:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007626:	f04f 0050 	mov.w	r0, #80	; 0x50
 800762a:	f380 8811 	msr	BASEPRI, r0
 800762e:	f7ff fb4b 	bl	8006cc8 <vTaskSwitchContext>
 8007632:	f04f 0000 	mov.w	r0, #0
 8007636:	f380 8811 	msr	BASEPRI, r0
 800763a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800763e:	6819      	ldr	r1, [r3, #0]
 8007640:	6808      	ldr	r0, [r1, #0]
 8007642:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007646:	f380 8809 	msr	PSP, r0
 800764a:	f3bf 8f6f 	isb	sy
 800764e:	4770      	bx	lr

08007650 <pxCurrentTCBConst>:
 8007650:	20001e54 	.word	0x20001e54

08007654 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007654:	b508      	push	{r3, lr}
	__asm volatile
 8007656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765a:	f383 8811 	msr	BASEPRI, r3
 800765e:	f3bf 8f6f 	isb	sy
 8007662:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007666:	f7ff f9ed 	bl	8006a44 <xTaskIncrementTick>
 800766a:	b128      	cbz	r0, 8007678 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800766c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007670:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007674:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8007678:	2300      	movs	r3, #0
 800767a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800767e:	bd08      	pop	{r3, pc}

08007680 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007680:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8007684:	2300      	movs	r3, #0
 8007686:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007688:	6193      	str	r3, [r2, #24]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800768a:	4b05      	ldr	r3, [pc, #20]	; (80076a0 <vPortSetupTimerInterrupt+0x20>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4905      	ldr	r1, [pc, #20]	; (80076a4 <vPortSetupTimerInterrupt+0x24>)
 8007690:	fba1 1303 	umull	r1, r3, r1, r3
 8007694:	099b      	lsrs	r3, r3, #6
 8007696:	3b01      	subs	r3, #1
 8007698:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800769a:	2307      	movs	r3, #7
 800769c:	6113      	str	r3, [r2, #16]
}
 800769e:	4770      	bx	lr
 80076a0:	20000024 	.word	0x20000024
 80076a4:	10624dd3 	.word	0x10624dd3

080076a8 <xPortStartScheduler>:
{
 80076a8:	b510      	push	{r4, lr}
 80076aa:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80076ac:	4b2b      	ldr	r3, [pc, #172]	; (800775c <xPortStartScheduler+0xb4>)
 80076ae:	781a      	ldrb	r2, [r3, #0]
 80076b0:	b2d2      	uxtb	r2, r2
 80076b2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80076b4:	22ff      	movs	r2, #255	; 0xff
 80076b6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80076c0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80076c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80076c8:	4a25      	ldr	r2, [pc, #148]	; (8007760 <xPortStartScheduler+0xb8>)
 80076ca:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80076cc:	4b25      	ldr	r3, [pc, #148]	; (8007764 <xPortStartScheduler+0xbc>)
 80076ce:	2207      	movs	r2, #7
 80076d0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80076d2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80076d6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80076da:	d011      	beq.n	8007700 <xPortStartScheduler+0x58>
 80076dc:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80076de:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80076e2:	005b      	lsls	r3, r3, #1
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80076ea:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80076ee:	4611      	mov	r1, r2
 80076f0:	3a01      	subs	r2, #1
 80076f2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80076f6:	d1f2      	bne.n	80076de <xPortStartScheduler+0x36>
 80076f8:	4b1a      	ldr	r3, [pc, #104]	; (8007764 <xPortStartScheduler+0xbc>)
 80076fa:	6019      	str	r1, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80076fc:	2903      	cmp	r1, #3
 80076fe:	d008      	beq.n	8007712 <xPortStartScheduler+0x6a>
	__asm volatile
 8007700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007704:	f383 8811 	msr	BASEPRI, r3
 8007708:	f3bf 8f6f 	isb	sy
 800770c:	f3bf 8f4f 	dsb	sy
 8007710:	e7fe      	b.n	8007710 <xPortStartScheduler+0x68>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007712:	4b14      	ldr	r3, [pc, #80]	; (8007764 <xPortStartScheduler+0xbc>)
 8007714:	f44f 7240 	mov.w	r2, #768	; 0x300
 8007718:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800771a:	9b01      	ldr	r3, [sp, #4]
 800771c:	b2db      	uxtb	r3, r3
 800771e:	4a0f      	ldr	r2, [pc, #60]	; (800775c <xPortStartScheduler+0xb4>)
 8007720:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007722:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007726:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 800772a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800772e:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007732:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8007736:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800773a:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800773e:	f7ff ff9f 	bl	8007680 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8007742:	2400      	movs	r4, #0
 8007744:	4b08      	ldr	r3, [pc, #32]	; (8007768 <xPortStartScheduler+0xc0>)
 8007746:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8007748:	f7ff fef0 	bl	800752c <prvPortStartFirstTask>
	vTaskSwitchContext();
 800774c:	f7ff fabc 	bl	8006cc8 <vTaskSwitchContext>
	prvTaskExitError();
 8007750:	f7ff fecc 	bl	80074ec <prvTaskExitError>
}
 8007754:	4620      	mov	r0, r4
 8007756:	b002      	add	sp, #8
 8007758:	bd10      	pop	{r4, pc}
 800775a:	bf00      	nop
 800775c:	e000e400 	.word	0xe000e400
 8007760:	2000247c 	.word	0x2000247c
 8007764:	20002480 	.word	0x20002480
 8007768:	200000bc 	.word	0x200000bc

0800776c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800776c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007770:	2b0f      	cmp	r3, #15
 8007772:	d90f      	bls.n	8007794 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007774:	4a11      	ldr	r2, [pc, #68]	; (80077bc <vPortValidateInterruptPriority+0x50>)
 8007776:	5c9b      	ldrb	r3, [r3, r2]
 8007778:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800777a:	4a11      	ldr	r2, [pc, #68]	; (80077c0 <vPortValidateInterruptPriority+0x54>)
 800777c:	7812      	ldrb	r2, [r2, #0]
 800777e:	429a      	cmp	r2, r3
 8007780:	d908      	bls.n	8007794 <vPortValidateInterruptPriority+0x28>
 8007782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007786:	f383 8811 	msr	BASEPRI, r3
 800778a:	f3bf 8f6f 	isb	sy
 800778e:	f3bf 8f4f 	dsb	sy
 8007792:	e7fe      	b.n	8007792 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007794:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007798:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800779c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80077a0:	4a08      	ldr	r2, [pc, #32]	; (80077c4 <vPortValidateInterruptPriority+0x58>)
 80077a2:	6812      	ldr	r2, [r2, #0]
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d908      	bls.n	80077ba <vPortValidateInterruptPriority+0x4e>
 80077a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ac:	f383 8811 	msr	BASEPRI, r3
 80077b0:	f3bf 8f6f 	isb	sy
 80077b4:	f3bf 8f4f 	dsb	sy
 80077b8:	e7fe      	b.n	80077b8 <vPortValidateInterruptPriority+0x4c>
	}
 80077ba:	4770      	bx	lr
 80077bc:	e000e3f0 	.word	0xe000e3f0
 80077c0:	2000247c 	.word	0x2000247c
 80077c4:	20002480 	.word	0x20002480

080077c8 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80077c8:	4b15      	ldr	r3, [pc, #84]	; (8007820 <prvInsertBlockIntoFreeList+0x58>)
 80077ca:	461a      	mov	r2, r3
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4283      	cmp	r3, r0
 80077d0:	d3fb      	bcc.n	80077ca <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80077d2:	6851      	ldr	r1, [r2, #4]
 80077d4:	eb02 0c01 	add.w	ip, r2, r1
 80077d8:	4560      	cmp	r0, ip
 80077da:	d009      	beq.n	80077f0 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80077dc:	6841      	ldr	r1, [r0, #4]
 80077de:	eb00 0c01 	add.w	ip, r0, r1
 80077e2:	4563      	cmp	r3, ip
 80077e4:	d009      	beq.n	80077fa <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80077e6:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80077e8:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80077ea:	bf18      	it	ne
 80077ec:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 80077ee:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80077f0:	6840      	ldr	r0, [r0, #4]
 80077f2:	4401      	add	r1, r0
 80077f4:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 80077f6:	4610      	mov	r0, r2
 80077f8:	e7f0      	b.n	80077dc <prvInsertBlockIntoFreeList+0x14>
{
 80077fa:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80077fc:	4c09      	ldr	r4, [pc, #36]	; (8007824 <prvInsertBlockIntoFreeList+0x5c>)
 80077fe:	6824      	ldr	r4, [r4, #0]
 8007800:	42a3      	cmp	r3, r4
 8007802:	d00a      	beq.n	800781a <prvInsertBlockIntoFreeList+0x52>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	4419      	add	r1, r3
 8007808:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800780a:	6813      	ldr	r3, [r2, #0]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8007810:	4290      	cmp	r0, r2
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007812:	bf18      	it	ne
 8007814:	6010      	strne	r0, [r2, #0]
	}
}
 8007816:	bc10      	pop	{r4}
 8007818:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800781a:	6004      	str	r4, [r0, #0]
 800781c:	e7f8      	b.n	8007810 <prvInsertBlockIntoFreeList+0x48>
 800781e:	bf00      	nop
 8007820:	20003094 	.word	0x20003094
 8007824:	20002484 	.word	0x20002484

08007828 <pvPortMalloc>:
{
 8007828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800782a:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800782c:	f7ff f8fc 	bl	8006a28 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8007830:	4b42      	ldr	r3, [pc, #264]	; (800793c <pvPortMalloc+0x114>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	b1b3      	cbz	r3, 8007864 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007836:	4b42      	ldr	r3, [pc, #264]	; (8007940 <pvPortMalloc+0x118>)
 8007838:	681d      	ldr	r5, [r3, #0]
 800783a:	4225      	tst	r5, r4
 800783c:	d179      	bne.n	8007932 <pvPortMalloc+0x10a>
			if( xWantedSize > 0 )
 800783e:	2c00      	cmp	r4, #0
 8007840:	d077      	beq.n	8007932 <pvPortMalloc+0x10a>
				xWantedSize += xHeapStructSize;
 8007842:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007846:	f014 0f07 	tst.w	r4, #7
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800784a:	bf1c      	itt	ne
 800784c:	f022 0207 	bicne.w	r2, r2, #7
 8007850:	3208      	addne	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007852:	2a00      	cmp	r2, #0
 8007854:	d06d      	beq.n	8007932 <pvPortMalloc+0x10a>
 8007856:	4b3b      	ldr	r3, [pc, #236]	; (8007944 <pvPortMalloc+0x11c>)
 8007858:	681e      	ldr	r6, [r3, #0]
 800785a:	4296      	cmp	r6, r2
 800785c:	d369      	bcc.n	8007932 <pvPortMalloc+0x10a>
				pxBlock = xStart.pxNextFreeBlock;
 800785e:	493a      	ldr	r1, [pc, #232]	; (8007948 <pvPortMalloc+0x120>)
 8007860:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007862:	e027      	b.n	80078b4 <pvPortMalloc+0x8c>
	uxAddress = ( size_t ) ucHeap;
 8007864:	4a39      	ldr	r2, [pc, #228]	; (800794c <pvPortMalloc+0x124>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007866:	f012 0f07 	tst.w	r2, #7
 800786a:	d007      	beq.n	800787c <pvPortMalloc+0x54>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800786c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800786e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007872:	f502 6340 	add.w	r3, r2, #3072	; 0xc00
 8007876:	1a5b      	subs	r3, r3, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007878:	460a      	mov	r2, r1
 800787a:	e001      	b.n	8007880 <pvPortMalloc+0x58>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800787c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007880:	4831      	ldr	r0, [pc, #196]	; (8007948 <pvPortMalloc+0x120>)
 8007882:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007884:	2100      	movs	r1, #0
 8007886:	6041      	str	r1, [r0, #4]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007888:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800788a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800788c:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8007890:	482a      	ldr	r0, [pc, #168]	; (800793c <pvPortMalloc+0x114>)
 8007892:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8007894:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007896:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007898:	1a99      	subs	r1, r3, r2
 800789a:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800789c:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800789e:	4b2c      	ldr	r3, [pc, #176]	; (8007950 <pvPortMalloc+0x128>)
 80078a0:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078a2:	4b28      	ldr	r3, [pc, #160]	; (8007944 <pvPortMalloc+0x11c>)
 80078a4:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80078a6:	4b26      	ldr	r3, [pc, #152]	; (8007940 <pvPortMalloc+0x118>)
 80078a8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80078ac:	601a      	str	r2, [r3, #0]
}
 80078ae:	e7c2      	b.n	8007836 <pvPortMalloc+0xe>
 80078b0:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 80078b2:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078b4:	6863      	ldr	r3, [r4, #4]
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d202      	bcs.n	80078c0 <pvPortMalloc+0x98>
 80078ba:	6823      	ldr	r3, [r4, #0]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d1f7      	bne.n	80078b0 <pvPortMalloc+0x88>
				if( pxBlock != pxEnd )
 80078c0:	4b1e      	ldr	r3, [pc, #120]	; (800793c <pvPortMalloc+0x114>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	42a3      	cmp	r3, r4
 80078c6:	d034      	beq.n	8007932 <pvPortMalloc+0x10a>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80078c8:	680f      	ldr	r7, [r1, #0]
 80078ca:	3708      	adds	r7, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80078cc:	6823      	ldr	r3, [r4, #0]
 80078ce:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80078d0:	6863      	ldr	r3, [r4, #4]
 80078d2:	1a9b      	subs	r3, r3, r2
 80078d4:	2b10      	cmp	r3, #16
 80078d6:	d910      	bls.n	80078fa <pvPortMalloc+0xd2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80078d8:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078da:	f010 0f07 	tst.w	r0, #7
 80078de:	d008      	beq.n	80078f2 <pvPortMalloc+0xca>
 80078e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e4:	f383 8811 	msr	BASEPRI, r3
 80078e8:	f3bf 8f6f 	isb	sy
 80078ec:	f3bf 8f4f 	dsb	sy
 80078f0:	e7fe      	b.n	80078f0 <pvPortMalloc+0xc8>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80078f2:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80078f4:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80078f6:	f7ff ff67 	bl	80077c8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80078fa:	6863      	ldr	r3, [r4, #4]
 80078fc:	1af6      	subs	r6, r6, r3
 80078fe:	4a11      	ldr	r2, [pc, #68]	; (8007944 <pvPortMalloc+0x11c>)
 8007900:	6016      	str	r6, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007902:	4a13      	ldr	r2, [pc, #76]	; (8007950 <pvPortMalloc+0x128>)
 8007904:	6812      	ldr	r2, [r2, #0]
 8007906:	4296      	cmp	r6, r2
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007908:	bf3c      	itt	cc
 800790a:	4a11      	ldrcc	r2, [pc, #68]	; (8007950 <pvPortMalloc+0x128>)
 800790c:	6016      	strcc	r6, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800790e:	431d      	orrs	r5, r3
 8007910:	6065      	str	r5, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007912:	2300      	movs	r3, #0
 8007914:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 8007916:	f7ff f92f 	bl	8006b78 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800791a:	f017 0f07 	tst.w	r7, #7
 800791e:	d00b      	beq.n	8007938 <pvPortMalloc+0x110>
 8007920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007924:	f383 8811 	msr	BASEPRI, r3
 8007928:	f3bf 8f6f 	isb	sy
 800792c:	f3bf 8f4f 	dsb	sy
 8007930:	e7fe      	b.n	8007930 <pvPortMalloc+0x108>
	( void ) xTaskResumeAll();
 8007932:	f7ff f921 	bl	8006b78 <xTaskResumeAll>
 8007936:	2700      	movs	r7, #0
}
 8007938:	4638      	mov	r0, r7
 800793a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800793c:	20002484 	.word	0x20002484
 8007940:	20003088 	.word	0x20003088
 8007944:	2000308c 	.word	0x2000308c
 8007948:	20003094 	.word	0x20003094
 800794c:	20002488 	.word	0x20002488
 8007950:	20003090 	.word	0x20003090

08007954 <vPortFree>:
	if( pv != NULL )
 8007954:	b378      	cbz	r0, 80079b6 <vPortFree+0x62>
{
 8007956:	b510      	push	{r4, lr}
 8007958:	4604      	mov	r4, r0
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800795a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800795e:	4a16      	ldr	r2, [pc, #88]	; (80079b8 <vPortFree+0x64>)
 8007960:	6812      	ldr	r2, [r2, #0]
 8007962:	4213      	tst	r3, r2
 8007964:	d108      	bne.n	8007978 <vPortFree+0x24>
 8007966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796a:	f383 8811 	msr	BASEPRI, r3
 800796e:	f3bf 8f6f 	isb	sy
 8007972:	f3bf 8f4f 	dsb	sy
 8007976:	e7fe      	b.n	8007976 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007978:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800797c:	b141      	cbz	r1, 8007990 <vPortFree+0x3c>
 800797e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007982:	f383 8811 	msr	BASEPRI, r3
 8007986:	f3bf 8f6f 	isb	sy
 800798a:	f3bf 8f4f 	dsb	sy
 800798e:	e7fe      	b.n	800798e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007990:	ea23 0302 	bic.w	r3, r3, r2
 8007994:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8007998:	f7ff f846 	bl	8006a28 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800799c:	4a07      	ldr	r2, [pc, #28]	; (80079bc <vPortFree+0x68>)
 800799e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80079a2:	6811      	ldr	r1, [r2, #0]
 80079a4:	440b      	add	r3, r1
 80079a6:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80079a8:	f1a4 0008 	sub.w	r0, r4, #8
 80079ac:	f7ff ff0c 	bl	80077c8 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 80079b0:	f7ff f8e2 	bl	8006b78 <xTaskResumeAll>
}
 80079b4:	bd10      	pop	{r4, pc}
 80079b6:	4770      	bx	lr
 80079b8:	20003088 	.word	0x20003088
 80079bc:	2000308c 	.word	0x2000308c

080079c0 <__libc_init_array>:
 80079c0:	b570      	push	{r4, r5, r6, lr}
 80079c2:	2600      	movs	r6, #0
 80079c4:	4d0c      	ldr	r5, [pc, #48]	; (80079f8 <__libc_init_array+0x38>)
 80079c6:	4c0d      	ldr	r4, [pc, #52]	; (80079fc <__libc_init_array+0x3c>)
 80079c8:	1b64      	subs	r4, r4, r5
 80079ca:	10a4      	asrs	r4, r4, #2
 80079cc:	42a6      	cmp	r6, r4
 80079ce:	d109      	bne.n	80079e4 <__libc_init_array+0x24>
 80079d0:	f000 f8f0 	bl	8007bb4 <_init>
 80079d4:	2600      	movs	r6, #0
 80079d6:	4d0a      	ldr	r5, [pc, #40]	; (8007a00 <__libc_init_array+0x40>)
 80079d8:	4c0a      	ldr	r4, [pc, #40]	; (8007a04 <__libc_init_array+0x44>)
 80079da:	1b64      	subs	r4, r4, r5
 80079dc:	10a4      	asrs	r4, r4, #2
 80079de:	42a6      	cmp	r6, r4
 80079e0:	d105      	bne.n	80079ee <__libc_init_array+0x2e>
 80079e2:	bd70      	pop	{r4, r5, r6, pc}
 80079e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80079e8:	4798      	blx	r3
 80079ea:	3601      	adds	r6, #1
 80079ec:	e7ee      	b.n	80079cc <__libc_init_array+0xc>
 80079ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80079f2:	4798      	blx	r3
 80079f4:	3601      	adds	r6, #1
 80079f6:	e7f2      	b.n	80079de <__libc_init_array+0x1e>
 80079f8:	08008070 	.word	0x08008070
 80079fc:	08008070 	.word	0x08008070
 8007a00:	08008070 	.word	0x08008070
 8007a04:	08008074 	.word	0x08008074

08007a08 <__retarget_lock_acquire_recursive>:
 8007a08:	4770      	bx	lr

08007a0a <__retarget_lock_release_recursive>:
 8007a0a:	4770      	bx	lr

08007a0c <memcpy>:
 8007a0c:	440a      	add	r2, r1
 8007a0e:	4291      	cmp	r1, r2
 8007a10:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a14:	d100      	bne.n	8007a18 <memcpy+0xc>
 8007a16:	4770      	bx	lr
 8007a18:	b510      	push	{r4, lr}
 8007a1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a1e:	4291      	cmp	r1, r2
 8007a20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a24:	d1f9      	bne.n	8007a1a <memcpy+0xe>
 8007a26:	bd10      	pop	{r4, pc}

08007a28 <memset>:
 8007a28:	4603      	mov	r3, r0
 8007a2a:	4402      	add	r2, r0
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d100      	bne.n	8007a32 <memset+0xa>
 8007a30:	4770      	bx	lr
 8007a32:	f803 1b01 	strb.w	r1, [r3], #1
 8007a36:	e7f9      	b.n	8007a2c <memset+0x4>

08007a38 <cleanup_glue>:
 8007a38:	b538      	push	{r3, r4, r5, lr}
 8007a3a:	460c      	mov	r4, r1
 8007a3c:	6809      	ldr	r1, [r1, #0]
 8007a3e:	4605      	mov	r5, r0
 8007a40:	b109      	cbz	r1, 8007a46 <cleanup_glue+0xe>
 8007a42:	f7ff fff9 	bl	8007a38 <cleanup_glue>
 8007a46:	4621      	mov	r1, r4
 8007a48:	4628      	mov	r0, r5
 8007a4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a4e:	f000 b869 	b.w	8007b24 <_free_r>
	...

08007a54 <_reclaim_reent>:
 8007a54:	4b2c      	ldr	r3, [pc, #176]	; (8007b08 <_reclaim_reent+0xb4>)
 8007a56:	b570      	push	{r4, r5, r6, lr}
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4604      	mov	r4, r0
 8007a5c:	4283      	cmp	r3, r0
 8007a5e:	d051      	beq.n	8007b04 <_reclaim_reent+0xb0>
 8007a60:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007a62:	b143      	cbz	r3, 8007a76 <_reclaim_reent+0x22>
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d14a      	bne.n	8007b00 <_reclaim_reent+0xac>
 8007a6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a6c:	6819      	ldr	r1, [r3, #0]
 8007a6e:	b111      	cbz	r1, 8007a76 <_reclaim_reent+0x22>
 8007a70:	4620      	mov	r0, r4
 8007a72:	f000 f857 	bl	8007b24 <_free_r>
 8007a76:	6961      	ldr	r1, [r4, #20]
 8007a78:	b111      	cbz	r1, 8007a80 <_reclaim_reent+0x2c>
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	f000 f852 	bl	8007b24 <_free_r>
 8007a80:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007a82:	b111      	cbz	r1, 8007a8a <_reclaim_reent+0x36>
 8007a84:	4620      	mov	r0, r4
 8007a86:	f000 f84d 	bl	8007b24 <_free_r>
 8007a8a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007a8c:	b111      	cbz	r1, 8007a94 <_reclaim_reent+0x40>
 8007a8e:	4620      	mov	r0, r4
 8007a90:	f000 f848 	bl	8007b24 <_free_r>
 8007a94:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007a96:	b111      	cbz	r1, 8007a9e <_reclaim_reent+0x4a>
 8007a98:	4620      	mov	r0, r4
 8007a9a:	f000 f843 	bl	8007b24 <_free_r>
 8007a9e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007aa0:	b111      	cbz	r1, 8007aa8 <_reclaim_reent+0x54>
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	f000 f83e 	bl	8007b24 <_free_r>
 8007aa8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007aaa:	b111      	cbz	r1, 8007ab2 <_reclaim_reent+0x5e>
 8007aac:	4620      	mov	r0, r4
 8007aae:	f000 f839 	bl	8007b24 <_free_r>
 8007ab2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007ab4:	b111      	cbz	r1, 8007abc <_reclaim_reent+0x68>
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	f000 f834 	bl	8007b24 <_free_r>
 8007abc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007abe:	b111      	cbz	r1, 8007ac6 <_reclaim_reent+0x72>
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	f000 f82f 	bl	8007b24 <_free_r>
 8007ac6:	69a3      	ldr	r3, [r4, #24]
 8007ac8:	b1e3      	cbz	r3, 8007b04 <_reclaim_reent+0xb0>
 8007aca:	4620      	mov	r0, r4
 8007acc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007ace:	4798      	blx	r3
 8007ad0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007ad2:	b1b9      	cbz	r1, 8007b04 <_reclaim_reent+0xb0>
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007ada:	f7ff bfad 	b.w	8007a38 <cleanup_glue>
 8007ade:	5949      	ldr	r1, [r1, r5]
 8007ae0:	b941      	cbnz	r1, 8007af4 <_reclaim_reent+0xa0>
 8007ae2:	3504      	adds	r5, #4
 8007ae4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ae6:	2d80      	cmp	r5, #128	; 0x80
 8007ae8:	68d9      	ldr	r1, [r3, #12]
 8007aea:	d1f8      	bne.n	8007ade <_reclaim_reent+0x8a>
 8007aec:	4620      	mov	r0, r4
 8007aee:	f000 f819 	bl	8007b24 <_free_r>
 8007af2:	e7ba      	b.n	8007a6a <_reclaim_reent+0x16>
 8007af4:	680e      	ldr	r6, [r1, #0]
 8007af6:	4620      	mov	r0, r4
 8007af8:	f000 f814 	bl	8007b24 <_free_r>
 8007afc:	4631      	mov	r1, r6
 8007afe:	e7ef      	b.n	8007ae0 <_reclaim_reent+0x8c>
 8007b00:	2500      	movs	r5, #0
 8007b02:	e7ef      	b.n	8007ae4 <_reclaim_reent+0x90>
 8007b04:	bd70      	pop	{r4, r5, r6, pc}
 8007b06:	bf00      	nop
 8007b08:	200000c0 	.word	0x200000c0

08007b0c <__malloc_lock>:
 8007b0c:	4801      	ldr	r0, [pc, #4]	; (8007b14 <__malloc_lock+0x8>)
 8007b0e:	f7ff bf7b 	b.w	8007a08 <__retarget_lock_acquire_recursive>
 8007b12:	bf00      	nop
 8007b14:	2000309c 	.word	0x2000309c

08007b18 <__malloc_unlock>:
 8007b18:	4801      	ldr	r0, [pc, #4]	; (8007b20 <__malloc_unlock+0x8>)
 8007b1a:	f7ff bf76 	b.w	8007a0a <__retarget_lock_release_recursive>
 8007b1e:	bf00      	nop
 8007b20:	2000309c 	.word	0x2000309c

08007b24 <_free_r>:
 8007b24:	b538      	push	{r3, r4, r5, lr}
 8007b26:	4605      	mov	r5, r0
 8007b28:	2900      	cmp	r1, #0
 8007b2a:	d040      	beq.n	8007bae <_free_r+0x8a>
 8007b2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b30:	1f0c      	subs	r4, r1, #4
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	bfb8      	it	lt
 8007b36:	18e4      	addlt	r4, r4, r3
 8007b38:	f7ff ffe8 	bl	8007b0c <__malloc_lock>
 8007b3c:	4a1c      	ldr	r2, [pc, #112]	; (8007bb0 <_free_r+0x8c>)
 8007b3e:	6813      	ldr	r3, [r2, #0]
 8007b40:	b933      	cbnz	r3, 8007b50 <_free_r+0x2c>
 8007b42:	6063      	str	r3, [r4, #4]
 8007b44:	6014      	str	r4, [r2, #0]
 8007b46:	4628      	mov	r0, r5
 8007b48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b4c:	f7ff bfe4 	b.w	8007b18 <__malloc_unlock>
 8007b50:	42a3      	cmp	r3, r4
 8007b52:	d908      	bls.n	8007b66 <_free_r+0x42>
 8007b54:	6820      	ldr	r0, [r4, #0]
 8007b56:	1821      	adds	r1, r4, r0
 8007b58:	428b      	cmp	r3, r1
 8007b5a:	bf01      	itttt	eq
 8007b5c:	6819      	ldreq	r1, [r3, #0]
 8007b5e:	685b      	ldreq	r3, [r3, #4]
 8007b60:	1809      	addeq	r1, r1, r0
 8007b62:	6021      	streq	r1, [r4, #0]
 8007b64:	e7ed      	b.n	8007b42 <_free_r+0x1e>
 8007b66:	461a      	mov	r2, r3
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	b10b      	cbz	r3, 8007b70 <_free_r+0x4c>
 8007b6c:	42a3      	cmp	r3, r4
 8007b6e:	d9fa      	bls.n	8007b66 <_free_r+0x42>
 8007b70:	6811      	ldr	r1, [r2, #0]
 8007b72:	1850      	adds	r0, r2, r1
 8007b74:	42a0      	cmp	r0, r4
 8007b76:	d10b      	bne.n	8007b90 <_free_r+0x6c>
 8007b78:	6820      	ldr	r0, [r4, #0]
 8007b7a:	4401      	add	r1, r0
 8007b7c:	1850      	adds	r0, r2, r1
 8007b7e:	4283      	cmp	r3, r0
 8007b80:	6011      	str	r1, [r2, #0]
 8007b82:	d1e0      	bne.n	8007b46 <_free_r+0x22>
 8007b84:	6818      	ldr	r0, [r3, #0]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	4401      	add	r1, r0
 8007b8a:	6011      	str	r1, [r2, #0]
 8007b8c:	6053      	str	r3, [r2, #4]
 8007b8e:	e7da      	b.n	8007b46 <_free_r+0x22>
 8007b90:	d902      	bls.n	8007b98 <_free_r+0x74>
 8007b92:	230c      	movs	r3, #12
 8007b94:	602b      	str	r3, [r5, #0]
 8007b96:	e7d6      	b.n	8007b46 <_free_r+0x22>
 8007b98:	6820      	ldr	r0, [r4, #0]
 8007b9a:	1821      	adds	r1, r4, r0
 8007b9c:	428b      	cmp	r3, r1
 8007b9e:	bf01      	itttt	eq
 8007ba0:	6819      	ldreq	r1, [r3, #0]
 8007ba2:	685b      	ldreq	r3, [r3, #4]
 8007ba4:	1809      	addeq	r1, r1, r0
 8007ba6:	6021      	streq	r1, [r4, #0]
 8007ba8:	6063      	str	r3, [r4, #4]
 8007baa:	6054      	str	r4, [r2, #4]
 8007bac:	e7cb      	b.n	8007b46 <_free_r+0x22>
 8007bae:	bd38      	pop	{r3, r4, r5, pc}
 8007bb0:	200030a0 	.word	0x200030a0

08007bb4 <_init>:
 8007bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bb6:	bf00      	nop
 8007bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bba:	bc08      	pop	{r3}
 8007bbc:	469e      	mov	lr, r3
 8007bbe:	4770      	bx	lr

08007bc0 <_fini>:
 8007bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bc2:	bf00      	nop
 8007bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bc6:	bc08      	pop	{r3}
 8007bc8:	469e      	mov	lr, r3
 8007bca:	4770      	bx	lr

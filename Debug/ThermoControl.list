
ThermoControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072ec  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000548  080073fc  080073fc  000173fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007944  08007944  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08007944  08007944  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007944  08007944  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007944  08007944  00017944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007948  08007948  00017948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800794c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003cd8  2000007c  080079c8  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003d54  080079c8  00023d54  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bd5f  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000619a  00000000  00000000  0004be04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001ecf9  00000000  00000000  00051f9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001908  00000000  00000000  00070c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001f38  00000000  00000000  000725a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d266  00000000  00000000  000744d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a95f  00000000  00000000  0009173e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009d820  00000000  00000000  000bc09d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001598bd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b10  00000000  00000000  00159910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	080073e4 	.word	0x080073e4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	080073e4 	.word	0x080073e4

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2f>:
 800071c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000720:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000724:	bf24      	itt	cs
 8000726:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800072a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800072e:	d90d      	bls.n	800074c <__aeabi_d2f+0x30>
 8000730:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000734:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000738:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800073c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000740:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000744:	bf08      	it	eq
 8000746:	f020 0001 	biceq.w	r0, r0, #1
 800074a:	4770      	bx	lr
 800074c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000750:	d121      	bne.n	8000796 <__aeabi_d2f+0x7a>
 8000752:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000756:	bfbc      	itt	lt
 8000758:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800075c:	4770      	bxlt	lr
 800075e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000762:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000766:	f1c2 0218 	rsb	r2, r2, #24
 800076a:	f1c2 0c20 	rsb	ip, r2, #32
 800076e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000772:	fa20 f002 	lsr.w	r0, r0, r2
 8000776:	bf18      	it	ne
 8000778:	f040 0001 	orrne.w	r0, r0, #1
 800077c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000780:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000784:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000788:	ea40 000c 	orr.w	r0, r0, ip
 800078c:	fa23 f302 	lsr.w	r3, r3, r2
 8000790:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000794:	e7cc      	b.n	8000730 <__aeabi_d2f+0x14>
 8000796:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800079a:	d107      	bne.n	80007ac <__aeabi_d2f+0x90>
 800079c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007a0:	bf1e      	ittt	ne
 80007a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007aa:	4770      	bxne	lr
 80007ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop

080007bc <__aeabi_frsub>:
 80007bc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80007c0:	e002      	b.n	80007c8 <__addsf3>
 80007c2:	bf00      	nop

080007c4 <__aeabi_fsub>:
 80007c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080007c8 <__addsf3>:
 80007c8:	0042      	lsls	r2, r0, #1
 80007ca:	bf1f      	itttt	ne
 80007cc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80007d0:	ea92 0f03 	teqne	r2, r3
 80007d4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80007d8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007dc:	d06a      	beq.n	80008b4 <__addsf3+0xec>
 80007de:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80007e2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80007e6:	bfc1      	itttt	gt
 80007e8:	18d2      	addgt	r2, r2, r3
 80007ea:	4041      	eorgt	r1, r0
 80007ec:	4048      	eorgt	r0, r1
 80007ee:	4041      	eorgt	r1, r0
 80007f0:	bfb8      	it	lt
 80007f2:	425b      	neglt	r3, r3
 80007f4:	2b19      	cmp	r3, #25
 80007f6:	bf88      	it	hi
 80007f8:	4770      	bxhi	lr
 80007fa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80007fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000802:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000806:	bf18      	it	ne
 8000808:	4240      	negne	r0, r0
 800080a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800080e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000812:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000816:	bf18      	it	ne
 8000818:	4249      	negne	r1, r1
 800081a:	ea92 0f03 	teq	r2, r3
 800081e:	d03f      	beq.n	80008a0 <__addsf3+0xd8>
 8000820:	f1a2 0201 	sub.w	r2, r2, #1
 8000824:	fa41 fc03 	asr.w	ip, r1, r3
 8000828:	eb10 000c 	adds.w	r0, r0, ip
 800082c:	f1c3 0320 	rsb	r3, r3, #32
 8000830:	fa01 f103 	lsl.w	r1, r1, r3
 8000834:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000838:	d502      	bpl.n	8000840 <__addsf3+0x78>
 800083a:	4249      	negs	r1, r1
 800083c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000840:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000844:	d313      	bcc.n	800086e <__addsf3+0xa6>
 8000846:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800084a:	d306      	bcc.n	800085a <__addsf3+0x92>
 800084c:	0840      	lsrs	r0, r0, #1
 800084e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000852:	f102 0201 	add.w	r2, r2, #1
 8000856:	2afe      	cmp	r2, #254	; 0xfe
 8000858:	d251      	bcs.n	80008fe <__addsf3+0x136>
 800085a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800085e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000862:	bf08      	it	eq
 8000864:	f020 0001 	biceq.w	r0, r0, #1
 8000868:	ea40 0003 	orr.w	r0, r0, r3
 800086c:	4770      	bx	lr
 800086e:	0049      	lsls	r1, r1, #1
 8000870:	eb40 0000 	adc.w	r0, r0, r0
 8000874:	3a01      	subs	r2, #1
 8000876:	bf28      	it	cs
 8000878:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800087c:	d2ed      	bcs.n	800085a <__addsf3+0x92>
 800087e:	fab0 fc80 	clz	ip, r0
 8000882:	f1ac 0c08 	sub.w	ip, ip, #8
 8000886:	ebb2 020c 	subs.w	r2, r2, ip
 800088a:	fa00 f00c 	lsl.w	r0, r0, ip
 800088e:	bfaa      	itet	ge
 8000890:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000894:	4252      	neglt	r2, r2
 8000896:	4318      	orrge	r0, r3
 8000898:	bfbc      	itt	lt
 800089a:	40d0      	lsrlt	r0, r2
 800089c:	4318      	orrlt	r0, r3
 800089e:	4770      	bx	lr
 80008a0:	f092 0f00 	teq	r2, #0
 80008a4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80008a8:	bf06      	itte	eq
 80008aa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80008ae:	3201      	addeq	r2, #1
 80008b0:	3b01      	subne	r3, #1
 80008b2:	e7b5      	b.n	8000820 <__addsf3+0x58>
 80008b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008bc:	bf18      	it	ne
 80008be:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008c2:	d021      	beq.n	8000908 <__addsf3+0x140>
 80008c4:	ea92 0f03 	teq	r2, r3
 80008c8:	d004      	beq.n	80008d4 <__addsf3+0x10c>
 80008ca:	f092 0f00 	teq	r2, #0
 80008ce:	bf08      	it	eq
 80008d0:	4608      	moveq	r0, r1
 80008d2:	4770      	bx	lr
 80008d4:	ea90 0f01 	teq	r0, r1
 80008d8:	bf1c      	itt	ne
 80008da:	2000      	movne	r0, #0
 80008dc:	4770      	bxne	lr
 80008de:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80008e2:	d104      	bne.n	80008ee <__addsf3+0x126>
 80008e4:	0040      	lsls	r0, r0, #1
 80008e6:	bf28      	it	cs
 80008e8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80008ec:	4770      	bx	lr
 80008ee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80008f2:	bf3c      	itt	cc
 80008f4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80008f8:	4770      	bxcc	lr
 80008fa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80008fe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000902:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000906:	4770      	bx	lr
 8000908:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800090c:	bf16      	itet	ne
 800090e:	4608      	movne	r0, r1
 8000910:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000914:	4601      	movne	r1, r0
 8000916:	0242      	lsls	r2, r0, #9
 8000918:	bf06      	itte	eq
 800091a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800091e:	ea90 0f01 	teqeq	r0, r1
 8000922:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000926:	4770      	bx	lr

08000928 <__aeabi_ui2f>:
 8000928:	f04f 0300 	mov.w	r3, #0
 800092c:	e004      	b.n	8000938 <__aeabi_i2f+0x8>
 800092e:	bf00      	nop

08000930 <__aeabi_i2f>:
 8000930:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000934:	bf48      	it	mi
 8000936:	4240      	negmi	r0, r0
 8000938:	ea5f 0c00 	movs.w	ip, r0
 800093c:	bf08      	it	eq
 800093e:	4770      	bxeq	lr
 8000940:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000944:	4601      	mov	r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	e01c      	b.n	8000986 <__aeabi_l2f+0x2a>

0800094c <__aeabi_ul2f>:
 800094c:	ea50 0201 	orrs.w	r2, r0, r1
 8000950:	bf08      	it	eq
 8000952:	4770      	bxeq	lr
 8000954:	f04f 0300 	mov.w	r3, #0
 8000958:	e00a      	b.n	8000970 <__aeabi_l2f+0x14>
 800095a:	bf00      	nop

0800095c <__aeabi_l2f>:
 800095c:	ea50 0201 	orrs.w	r2, r0, r1
 8000960:	bf08      	it	eq
 8000962:	4770      	bxeq	lr
 8000964:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000968:	d502      	bpl.n	8000970 <__aeabi_l2f+0x14>
 800096a:	4240      	negs	r0, r0
 800096c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000970:	ea5f 0c01 	movs.w	ip, r1
 8000974:	bf02      	ittt	eq
 8000976:	4684      	moveq	ip, r0
 8000978:	4601      	moveq	r1, r0
 800097a:	2000      	moveq	r0, #0
 800097c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000980:	bf08      	it	eq
 8000982:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000986:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800098a:	fabc f28c 	clz	r2, ip
 800098e:	3a08      	subs	r2, #8
 8000990:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000994:	db10      	blt.n	80009b8 <__aeabi_l2f+0x5c>
 8000996:	fa01 fc02 	lsl.w	ip, r1, r2
 800099a:	4463      	add	r3, ip
 800099c:	fa00 fc02 	lsl.w	ip, r0, r2
 80009a0:	f1c2 0220 	rsb	r2, r2, #32
 80009a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80009a8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ac:	eb43 0002 	adc.w	r0, r3, r2
 80009b0:	bf08      	it	eq
 80009b2:	f020 0001 	biceq.w	r0, r0, #1
 80009b6:	4770      	bx	lr
 80009b8:	f102 0220 	add.w	r2, r2, #32
 80009bc:	fa01 fc02 	lsl.w	ip, r1, r2
 80009c0:	f1c2 0220 	rsb	r2, r2, #32
 80009c4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80009c8:	fa21 f202 	lsr.w	r2, r1, r2
 80009cc:	eb43 0002 	adc.w	r0, r3, r2
 80009d0:	bf08      	it	eq
 80009d2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009d6:	4770      	bx	lr

080009d8 <__aeabi_fmul>:
 80009d8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009e0:	bf1e      	ittt	ne
 80009e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009e6:	ea92 0f0c 	teqne	r2, ip
 80009ea:	ea93 0f0c 	teqne	r3, ip
 80009ee:	d06f      	beq.n	8000ad0 <__aeabi_fmul+0xf8>
 80009f0:	441a      	add	r2, r3
 80009f2:	ea80 0c01 	eor.w	ip, r0, r1
 80009f6:	0240      	lsls	r0, r0, #9
 80009f8:	bf18      	it	ne
 80009fa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80009fe:	d01e      	beq.n	8000a3e <__aeabi_fmul+0x66>
 8000a00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a04:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000a08:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000a0c:	fba0 3101 	umull	r3, r1, r0, r1
 8000a10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a14:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000a18:	bf3e      	ittt	cc
 8000a1a:	0049      	lslcc	r1, r1, #1
 8000a1c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	ea40 0001 	orr.w	r0, r0, r1
 8000a26:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000a2a:	2afd      	cmp	r2, #253	; 0xfd
 8000a2c:	d81d      	bhi.n	8000a6a <__aeabi_fmul+0x92>
 8000a2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000a32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a36:	bf08      	it	eq
 8000a38:	f020 0001 	biceq.w	r0, r0, #1
 8000a3c:	4770      	bx	lr
 8000a3e:	f090 0f00 	teq	r0, #0
 8000a42:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a46:	bf08      	it	eq
 8000a48:	0249      	lsleq	r1, r1, #9
 8000a4a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a4e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a52:	3a7f      	subs	r2, #127	; 0x7f
 8000a54:	bfc2      	ittt	gt
 8000a56:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a5a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a5e:	4770      	bxgt	lr
 8000a60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a64:	f04f 0300 	mov.w	r3, #0
 8000a68:	3a01      	subs	r2, #1
 8000a6a:	dc5d      	bgt.n	8000b28 <__aeabi_fmul+0x150>
 8000a6c:	f112 0f19 	cmn.w	r2, #25
 8000a70:	bfdc      	itt	le
 8000a72:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000a76:	4770      	bxle	lr
 8000a78:	f1c2 0200 	rsb	r2, r2, #0
 8000a7c:	0041      	lsls	r1, r0, #1
 8000a7e:	fa21 f102 	lsr.w	r1, r1, r2
 8000a82:	f1c2 0220 	rsb	r2, r2, #32
 8000a86:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a8a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a8e:	f140 0000 	adc.w	r0, r0, #0
 8000a92:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a96:	bf08      	it	eq
 8000a98:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a9c:	4770      	bx	lr
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fmul+0xce>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fmul+0xe6>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e78f      	b.n	80009f0 <__aeabi_fmul+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	bf18      	it	ne
 8000ada:	ea93 0f0c 	teqne	r3, ip
 8000ade:	d00a      	beq.n	8000af6 <__aeabi_fmul+0x11e>
 8000ae0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ae4:	bf18      	it	ne
 8000ae6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000aea:	d1d8      	bne.n	8000a9e <__aeabi_fmul+0xc6>
 8000aec:	ea80 0001 	eor.w	r0, r0, r1
 8000af0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000af4:	4770      	bx	lr
 8000af6:	f090 0f00 	teq	r0, #0
 8000afa:	bf17      	itett	ne
 8000afc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000b00:	4608      	moveq	r0, r1
 8000b02:	f091 0f00 	teqne	r1, #0
 8000b06:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000b0a:	d014      	beq.n	8000b36 <__aeabi_fmul+0x15e>
 8000b0c:	ea92 0f0c 	teq	r2, ip
 8000b10:	d101      	bne.n	8000b16 <__aeabi_fmul+0x13e>
 8000b12:	0242      	lsls	r2, r0, #9
 8000b14:	d10f      	bne.n	8000b36 <__aeabi_fmul+0x15e>
 8000b16:	ea93 0f0c 	teq	r3, ip
 8000b1a:	d103      	bne.n	8000b24 <__aeabi_fmul+0x14c>
 8000b1c:	024b      	lsls	r3, r1, #9
 8000b1e:	bf18      	it	ne
 8000b20:	4608      	movne	r0, r1
 8000b22:	d108      	bne.n	8000b36 <__aeabi_fmul+0x15e>
 8000b24:	ea80 0001 	eor.w	r0, r0, r1
 8000b28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b34:	4770      	bx	lr
 8000b36:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_fdiv>:
 8000b40:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b48:	bf1e      	ittt	ne
 8000b4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b4e:	ea92 0f0c 	teqne	r2, ip
 8000b52:	ea93 0f0c 	teqne	r3, ip
 8000b56:	d069      	beq.n	8000c2c <__aeabi_fdiv+0xec>
 8000b58:	eba2 0203 	sub.w	r2, r2, r3
 8000b5c:	ea80 0c01 	eor.w	ip, r0, r1
 8000b60:	0249      	lsls	r1, r1, #9
 8000b62:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b66:	d037      	beq.n	8000bd8 <__aeabi_fdiv+0x98>
 8000b68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b6c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b70:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b74:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b78:	428b      	cmp	r3, r1
 8000b7a:	bf38      	it	cc
 8000b7c:	005b      	lslcc	r3, r3, #1
 8000b7e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000b82:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000b86:	428b      	cmp	r3, r1
 8000b88:	bf24      	itt	cs
 8000b8a:	1a5b      	subcs	r3, r3, r1
 8000b8c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b90:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b94:	bf24      	itt	cs
 8000b96:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b9a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b9e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ba2:	bf24      	itt	cs
 8000ba4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ba8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000bac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000bb0:	bf24      	itt	cs
 8000bb2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000bb6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bba:	011b      	lsls	r3, r3, #4
 8000bbc:	bf18      	it	ne
 8000bbe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000bc2:	d1e0      	bne.n	8000b86 <__aeabi_fdiv+0x46>
 8000bc4:	2afd      	cmp	r2, #253	; 0xfd
 8000bc6:	f63f af50 	bhi.w	8000a6a <__aeabi_fmul+0x92>
 8000bca:	428b      	cmp	r3, r1
 8000bcc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bdc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000be0:	327f      	adds	r2, #127	; 0x7f
 8000be2:	bfc2      	ittt	gt
 8000be4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000be8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bec:	4770      	bxgt	lr
 8000bee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf2:	f04f 0300 	mov.w	r3, #0
 8000bf6:	3a01      	subs	r2, #1
 8000bf8:	e737      	b.n	8000a6a <__aeabi_fmul+0x92>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c02:	bf02      	ittt	eq
 8000c04:	0040      	lsleq	r0, r0, #1
 8000c06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c0a:	3a01      	subeq	r2, #1
 8000c0c:	d0f9      	beq.n	8000c02 <__aeabi_fdiv+0xc2>
 8000c0e:	ea40 000c 	orr.w	r0, r0, ip
 8000c12:	f093 0f00 	teq	r3, #0
 8000c16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c1a:	bf02      	ittt	eq
 8000c1c:	0049      	lsleq	r1, r1, #1
 8000c1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c22:	3b01      	subeq	r3, #1
 8000c24:	d0f9      	beq.n	8000c1a <__aeabi_fdiv+0xda>
 8000c26:	ea41 010c 	orr.w	r1, r1, ip
 8000c2a:	e795      	b.n	8000b58 <__aeabi_fdiv+0x18>
 8000c2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c30:	ea92 0f0c 	teq	r2, ip
 8000c34:	d108      	bne.n	8000c48 <__aeabi_fdiv+0x108>
 8000c36:	0242      	lsls	r2, r0, #9
 8000c38:	f47f af7d 	bne.w	8000b36 <__aeabi_fmul+0x15e>
 8000c3c:	ea93 0f0c 	teq	r3, ip
 8000c40:	f47f af70 	bne.w	8000b24 <__aeabi_fmul+0x14c>
 8000c44:	4608      	mov	r0, r1
 8000c46:	e776      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c48:	ea93 0f0c 	teq	r3, ip
 8000c4c:	d104      	bne.n	8000c58 <__aeabi_fdiv+0x118>
 8000c4e:	024b      	lsls	r3, r1, #9
 8000c50:	f43f af4c 	beq.w	8000aec <__aeabi_fmul+0x114>
 8000c54:	4608      	mov	r0, r1
 8000c56:	e76e      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c58:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c5c:	bf18      	it	ne
 8000c5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c62:	d1ca      	bne.n	8000bfa <__aeabi_fdiv+0xba>
 8000c64:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000c68:	f47f af5c 	bne.w	8000b24 <__aeabi_fmul+0x14c>
 8000c6c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000c70:	f47f af3c 	bne.w	8000aec <__aeabi_fmul+0x114>
 8000c74:	e75f      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c76:	bf00      	nop

08000c78 <__gesf2>:
 8000c78:	f04f 3cff 	mov.w	ip, #4294967295
 8000c7c:	e006      	b.n	8000c8c <__cmpsf2+0x4>
 8000c7e:	bf00      	nop

08000c80 <__lesf2>:
 8000c80:	f04f 0c01 	mov.w	ip, #1
 8000c84:	e002      	b.n	8000c8c <__cmpsf2+0x4>
 8000c86:	bf00      	nop

08000c88 <__cmpsf2>:
 8000c88:	f04f 0c01 	mov.w	ip, #1
 8000c8c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c90:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c9c:	bf18      	it	ne
 8000c9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca2:	d011      	beq.n	8000cc8 <__cmpsf2+0x40>
 8000ca4:	b001      	add	sp, #4
 8000ca6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000caa:	bf18      	it	ne
 8000cac:	ea90 0f01 	teqne	r0, r1
 8000cb0:	bf58      	it	pl
 8000cb2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000cb6:	bf88      	it	hi
 8000cb8:	17c8      	asrhi	r0, r1, #31
 8000cba:	bf38      	it	cc
 8000cbc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000cc0:	bf18      	it	ne
 8000cc2:	f040 0001 	orrne.w	r0, r0, #1
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ccc:	d102      	bne.n	8000cd4 <__cmpsf2+0x4c>
 8000cce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000cd2:	d105      	bne.n	8000ce0 <__cmpsf2+0x58>
 8000cd4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000cd8:	d1e4      	bne.n	8000ca4 <__cmpsf2+0x1c>
 8000cda:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000cde:	d0e1      	beq.n	8000ca4 <__cmpsf2+0x1c>
 8000ce0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_cfrcmple>:
 8000ce8:	4684      	mov	ip, r0
 8000cea:	4608      	mov	r0, r1
 8000cec:	4661      	mov	r1, ip
 8000cee:	e7ff      	b.n	8000cf0 <__aeabi_cfcmpeq>

08000cf0 <__aeabi_cfcmpeq>:
 8000cf0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000cf2:	f7ff ffc9 	bl	8000c88 <__cmpsf2>
 8000cf6:	2800      	cmp	r0, #0
 8000cf8:	bf48      	it	mi
 8000cfa:	f110 0f00 	cmnmi.w	r0, #0
 8000cfe:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d00 <__aeabi_fcmpeq>:
 8000d00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d04:	f7ff fff4 	bl	8000cf0 <__aeabi_cfcmpeq>
 8000d08:	bf0c      	ite	eq
 8000d0a:	2001      	moveq	r0, #1
 8000d0c:	2000      	movne	r0, #0
 8000d0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d12:	bf00      	nop

08000d14 <__aeabi_fcmplt>:
 8000d14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d18:	f7ff ffea 	bl	8000cf0 <__aeabi_cfcmpeq>
 8000d1c:	bf34      	ite	cc
 8000d1e:	2001      	movcc	r0, #1
 8000d20:	2000      	movcs	r0, #0
 8000d22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d26:	bf00      	nop

08000d28 <__aeabi_fcmple>:
 8000d28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d2c:	f7ff ffe0 	bl	8000cf0 <__aeabi_cfcmpeq>
 8000d30:	bf94      	ite	ls
 8000d32:	2001      	movls	r0, #1
 8000d34:	2000      	movhi	r0, #0
 8000d36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d3a:	bf00      	nop

08000d3c <__aeabi_fcmpge>:
 8000d3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d40:	f7ff ffd2 	bl	8000ce8 <__aeabi_cfrcmple>
 8000d44:	bf94      	ite	ls
 8000d46:	2001      	movls	r0, #1
 8000d48:	2000      	movhi	r0, #0
 8000d4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d4e:	bf00      	nop

08000d50 <__aeabi_fcmpgt>:
 8000d50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d54:	f7ff ffc8 	bl	8000ce8 <__aeabi_cfrcmple>
 8000d58:	bf34      	ite	cc
 8000d5a:	2001      	movcc	r0, #1
 8000d5c:	2000      	movcs	r0, #0
 8000d5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d62:	bf00      	nop

08000d64 <__aeabi_f2uiz>:
 8000d64:	0042      	lsls	r2, r0, #1
 8000d66:	d20e      	bcs.n	8000d86 <__aeabi_f2uiz+0x22>
 8000d68:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d6c:	d30b      	bcc.n	8000d86 <__aeabi_f2uiz+0x22>
 8000d6e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d72:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d76:	d409      	bmi.n	8000d8c <__aeabi_f2uiz+0x28>
 8000d78:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d80:	fa23 f002 	lsr.w	r0, r3, r2
 8000d84:	4770      	bx	lr
 8000d86:	f04f 0000 	mov.w	r0, #0
 8000d8a:	4770      	bx	lr
 8000d8c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d90:	d101      	bne.n	8000d96 <__aeabi_f2uiz+0x32>
 8000d92:	0242      	lsls	r2, r0, #9
 8000d94:	d102      	bne.n	8000d9c <__aeabi_f2uiz+0x38>
 8000d96:	f04f 30ff 	mov.w	r0, #4294967295
 8000d9a:	4770      	bx	lr
 8000d9c:	f04f 0000 	mov.w	r0, #0
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop

08000da4 <fGetAinCalData>:
}
/*
 *
 */
float fGetAinCalData( AIN_NAME_t name, float raw_data)
{
 8000da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     float out_data = 0U;
      if ( name < AIN_NUMBER )
 8000da8:	2802      	cmp	r0, #2
 8000daa:	d833      	bhi.n	8000e14 <fGetAinCalData+0x70>
 8000dac:	460e      	mov	r6, r1
     {
          if ( xAinData[ name ].coof_count == 0 )
 8000dae:	4b1c      	ldr	r3, [pc, #112]	; (8000e20 <fGetAinCalData+0x7c>)
 8000db0:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 8000db4:	b90b      	cbnz	r3, 8000dba <fGetAinCalData+0x16>
           {
               out_data = raw_data;
 8000db6:	460f      	mov	r7, r1
 8000db8:	e02d      	b.n	8000e16 <fGetAinCalData+0x72>
    for (uint16_t i =  xAinData[ name ].index; i < (xAinData[ name ].index + xAinData[ name ].coof_count ); i++ )
 8000dba:	4a19      	ldr	r2, [pc, #100]	; (8000e20 <fGetAinCalData+0x7c>)
 8000dbc:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8000dc0:	7842      	ldrb	r2, [r0, #1]
 8000dc2:	b294      	uxth	r4, r2
 8000dc4:	4615      	mov	r5, r2
 8000dc6:	eb03 0802 	add.w	r8, r3, r2
 8000dca:	4542      	cmp	r2, r8
 8000dcc:	da26      	bge.n	8000e1c <fGetAinCalData+0x78>
    float out_data = 0;
 8000dce:	2700      	movs	r7, #0
        if ( (i ==  (xAinData[ name ].index + xAinData[ name ].coof_count)) || (in_data <= xKoofData[i].data ) )
 8000dd0:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8000e24 <fGetAinCalData+0x80>
 8000dd4:	e004      	b.n	8000de0 <fGetAinCalData+0x3c>
    for (uint16_t i =  xAinData[ name ].index; i < (xAinData[ name ].index + xAinData[ name ].coof_count ); i++ )
 8000dd6:	3401      	adds	r4, #1
 8000dd8:	b2a4      	uxth	r4, r4
 8000dda:	4625      	mov	r5, r4
 8000ddc:	4544      	cmp	r4, r8
 8000dde:	da1a      	bge.n	8000e16 <fGetAinCalData+0x72>
        if ( (i ==  (xAinData[ name ].index + xAinData[ name ].coof_count)) || (in_data <= xKoofData[i].data ) )
 8000de0:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000de4:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 8000de8:	4630      	mov	r0, r6
 8000dea:	f7ff ff9d 	bl	8000d28 <__aeabi_fcmple>
 8000dee:	2800      	cmp	r0, #0
 8000df0:	d0f1      	beq.n	8000dd6 <fGetAinCalData+0x32>
            out_data = xKoofData[i].k * in_data + xKoofData[i].b;
 8000df2:	006f      	lsls	r7, r5, #1
 8000df4:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000df8:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8000dfc:	6859      	ldr	r1, [r3, #4]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	f7ff fdea 	bl	80009d8 <__aeabi_fmul>
 8000e04:	442f      	add	r7, r5
 8000e06:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8000e0a:	68b9      	ldr	r1, [r7, #8]
 8000e0c:	f7ff fcdc 	bl	80007c8 <__addsf3>
 8000e10:	4607      	mov	r7, r0
 8000e12:	e7e0      	b.n	8000dd6 <fGetAinCalData+0x32>
     float out_data = 0U;
 8000e14:	2700      	movs	r7, #0
           {
               out_data = fConvertCalData( name, raw_data);
           }
      }
      return ( out_data );
}
 8000e16:	4638      	mov	r0, r7
 8000e18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    float out_data = 0;
 8000e1c:	2700      	movs	r7, #0
      return ( out_data );
 8000e1e:	e7fa      	b.n	8000e16 <fGetAinCalData+0x72>
 8000e20:	2000009c 	.word	0x2000009c
 8000e24:	200000a4 	.word	0x200000a4

08000e28 <eAinCalDataConfig>:

CAL_ERROR_CODE  eAinCalDataConfig(AIN_NAME_t name, uint8_t cal_point_count )
{
    CAL_ERROR_CODE res = CAL_SUCCESS;
    if (cal_point_count == 1)
 8000e28:	2901      	cmp	r1, #1
 8000e2a:	d01e      	beq.n	8000e6a <eAinCalDataConfig+0x42>
 8000e2c:	4603      	mov	r3, r0
    {
        res = CAL_POINT_COUNT_ERROR;
    }
    else
    {
        if (  xAinData[ name ].coof_count == 0 )
 8000e2e:	4a11      	ldr	r2, [pc, #68]	; (8000e74 <eAinCalDataConfig+0x4c>)
 8000e30:	f812 0010 	ldrb.w	r0, [r2, r0, lsl #1]
 8000e34:	b998      	cbnz	r0, 8000e5e <eAinCalDataConfig+0x36>
{
 8000e36:	b410      	push	{r4}
        {
            if  ( (cal_point_count +  usCurMaxIndex) > MAX_TOTAL_CAL_POINT )
 8000e38:	4a0f      	ldr	r2, [pc, #60]	; (8000e78 <eAinCalDataConfig+0x50>)
 8000e3a:	8812      	ldrh	r2, [r2, #0]
 8000e3c:	188c      	adds	r4, r1, r2
 8000e3e:	2c3c      	cmp	r4, #60	; 0x3c
 8000e40:	d815      	bhi.n	8000e6e <eAinCalDataConfig+0x46>
            {
                res = CAL_MEMORY_FULL;
            }
            else
            {
                xAinData[ name ].coof_count = cal_point_count - 1;
 8000e42:	4c0c      	ldr	r4, [pc, #48]	; (8000e74 <eAinCalDataConfig+0x4c>)
 8000e44:	f101 3cff 	add.w	ip, r1, #4294967295
 8000e48:	f804 c013 	strb.w	ip, [r4, r3, lsl #1]
                xAinData[ name ].index = usCurMaxIndex;
 8000e4c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8000e50:	705a      	strb	r2, [r3, #1]
                usCurMaxIndex += cal_point_count - 1;
 8000e52:	3a01      	subs	r2, #1
 8000e54:	4411      	add	r1, r2
 8000e56:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <eAinCalDataConfig+0x50>)
 8000e58:	8019      	strh	r1, [r3, #0]
                    res = CAL_OVERWRITE_ERROR;
                }
        }
    }
    return ( res );
}
 8000e5a:	bc10      	pop	{r4}
 8000e5c:	4770      	bx	lr
                if ( xAinData[ name ].coof_count != ( cal_point_count- 1))
 8000e5e:	3901      	subs	r1, #1
                    res = CAL_OVERWRITE_ERROR;
 8000e60:	4288      	cmp	r0, r1
 8000e62:	bf14      	ite	ne
 8000e64:	2002      	movne	r0, #2
 8000e66:	2000      	moveq	r0, #0
 8000e68:	4770      	bx	lr
        res = CAL_POINT_COUNT_ERROR;
 8000e6a:	2003      	movs	r0, #3
}
 8000e6c:	4770      	bx	lr
                res = CAL_MEMORY_FULL;
 8000e6e:	2001      	movs	r0, #1
 8000e70:	e7f3      	b.n	8000e5a <eAinCalDataConfig+0x32>
 8000e72:	bf00      	nop
 8000e74:	2000009c 	.word	0x2000009c
 8000e78:	20000098 	.word	0x20000098

08000e7c <vABLineKoofFinde>:

/*
 *
 */
void vABLineKoofFinde(float * k, float * b,  float x1, float x2, float y1, float y2)
{
 8000e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e80:	4607      	mov	r7, r0
 8000e82:	460e      	mov	r6, r1
 8000e84:	4615      	mov	r5, r2
 8000e86:	461c      	mov	r4, r3
 8000e88:	f8dd a020 	ldr.w	sl, [sp, #32]
 8000e8c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
		 *k = (float)( y1 - y2 ) /(float) (x1 - x2);
 8000e90:	4649      	mov	r1, r9
 8000e92:	4650      	mov	r0, sl
 8000e94:	f7ff fc96 	bl	80007c4 <__aeabi_fsub>
 8000e98:	4680      	mov	r8, r0
 8000e9a:	4621      	mov	r1, r4
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	f7ff fc91 	bl	80007c4 <__aeabi_fsub>
 8000ea2:	4601      	mov	r1, r0
 8000ea4:	4640      	mov	r0, r8
 8000ea6:	f7ff fe4b 	bl	8000b40 <__aeabi_fdiv>
 8000eaa:	6038      	str	r0, [r7, #0]
		 *b = (float)(y1*x2 - y2*x1) / (float) (x2-x1);
 8000eac:	4621      	mov	r1, r4
 8000eae:	4650      	mov	r0, sl
 8000eb0:	f7ff fd92 	bl	80009d8 <__aeabi_fmul>
 8000eb4:	4607      	mov	r7, r0
 8000eb6:	4629      	mov	r1, r5
 8000eb8:	4648      	mov	r0, r9
 8000eba:	f7ff fd8d 	bl	80009d8 <__aeabi_fmul>
 8000ebe:	4601      	mov	r1, r0
 8000ec0:	4638      	mov	r0, r7
 8000ec2:	f7ff fc7f 	bl	80007c4 <__aeabi_fsub>
 8000ec6:	4607      	mov	r7, r0
 8000ec8:	4629      	mov	r1, r5
 8000eca:	4620      	mov	r0, r4
 8000ecc:	f7ff fc7a 	bl	80007c4 <__aeabi_fsub>
 8000ed0:	4601      	mov	r1, r0
 8000ed2:	4638      	mov	r0, r7
 8000ed4:	f7ff fe34 	bl	8000b40 <__aeabi_fdiv>
 8000ed8:	6030      	str	r0, [r6, #0]
		 return;
}
 8000eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08000ee0 <eSetAinCalPoint>:
	if ( PointNumber < xAinData[ name ].coof_count)
 8000ee0:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <eSetAinCalPoint+0x54>)
 8000ee2:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d801      	bhi.n	8000eee <eSetAinCalPoint+0xe>
		res = CAL_OVERWRITE_ERROR;
 8000eea:	2002      	movs	r0, #2
}
 8000eec:	4770      	bx	lr
{
 8000eee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ef0:	b083      	sub	sp, #12
 8000ef2:	460d      	mov	r5, r1
		uint16_t index = PointNumber + xAinData[ name ].index;
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <eSetAinCalPoint+0x54>)
 8000ef6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8000efa:	7844      	ldrb	r4, [r0, #1]
 8000efc:	4422      	add	r2, r4
 8000efe:	b294      	uxth	r4, r2
		vABLineKoofFinde ( &xKoofData[index].k, &xKoofData[index].b,
 8000f00:	0067      	lsls	r7, r4, #1
 8000f02:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8000f06:	0080      	lsls	r0, r0, #2
 8000f08:	4e0b      	ldr	r6, [pc, #44]	; (8000f38 <eSetAinCalPoint+0x58>)
 8000f0a:	f100 0108 	add.w	r1, r0, #8
 8000f0e:	3004      	adds	r0, #4
 8000f10:	68ab      	ldr	r3, [r5, #8]
 8000f12:	9301      	str	r3, [sp, #4]
 8000f14:	682b      	ldr	r3, [r5, #0]
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	68eb      	ldr	r3, [r5, #12]
 8000f1a:	686a      	ldr	r2, [r5, #4]
 8000f1c:	4431      	add	r1, r6
 8000f1e:	4430      	add	r0, r6
 8000f20:	f7ff ffac 	bl	8000e7c <vABLineKoofFinde>
		xKoofData[index].data = cal_point[ 1 ].X;
 8000f24:	68eb      	ldr	r3, [r5, #12]
 8000f26:	443c      	add	r4, r7
 8000f28:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
	CAL_ERROR_CODE res = CAL_SUCCESS;
 8000f2c:	2000      	movs	r0, #0
}
 8000f2e:	b003      	add	sp, #12
 8000f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f32:	bf00      	nop
 8000f34:	2000009c 	.word	0x2000009c
 8000f38:	200000a4 	.word	0x200000a4

08000f3c <eDinConfig>:
#endif
/*
 *
 */
DIN_FUNCTION_ERROR_t eDinConfig( uint8_t ucCh, DIN_INPUT_TYPE inType, uint32_t ulHFront, uint32_t ulLFront)
{
 8000f3c:	b570      	push	{r4, r5, r6, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	461d      	mov	r5, r3
	DIN_FUNCTION_ERROR_t eRes = DIN_WRONG_CHANNEL_NUMBER ;
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f42:	2300      	movs	r3, #0
 8000f44:	9301      	str	r3, [sp, #4]
 8000f46:	9303      	str	r3, [sp, #12]
	if ( ucCh < DIN_CHANNEL)
 8000f48:	280b      	cmp	r0, #11
 8000f4a:	d827      	bhi.n	8000f9c <eDinConfig+0x60>
 8000f4c:	4604      	mov	r4, r0
 8000f4e:	4616      	mov	r6, r2
	{
		xDinConfig[ucCh].eInputType = inType;
 8000f50:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <eDinConfig+0x64>)
 8000f52:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8000f56:	7399      	strb	r1, [r3, #14]
		xDinConfig[ucCh].ucValue 	= (xDinConfig[ucCh].eInputType == DIN_CONFIG_POSITIVE ) ? 0U : 1U;
 8000f58:	1e4a      	subs	r2, r1, #1
 8000f5a:	bf18      	it	ne
 8000f5c:	2201      	movne	r2, #1
 8000f5e:	731a      	strb	r2, [r3, #12]
		GPIO_InitStruct.Pin 		= xDinPortConfig[ucCh].Pin;
 8000f60:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <eDinConfig+0x68>)
 8000f62:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 8000f66:	9300      	str	r3, [sp, #0]

		if ( xDinConfig[ucCh].eInputType == RPM_CONFIG )
 8000f68:	2902      	cmp	r1, #2
 8000f6a:	d011      	beq.n	8000f90 <eDinConfig+0x54>
		{
			xDinConfig[ucCh].eInputType = DIN_CONFIG_POSITIVE;
		}
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	9302      	str	r3, [sp, #8]
		HAL_GPIO_Init(xDinPortConfig[ucCh].GPIOx,&GPIO_InitStruct);
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <eDinConfig+0x68>)
 8000f72:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8000f76:	4669      	mov	r1, sp
 8000f78:	6858      	ldr	r0, [r3, #4]
 8000f7a:	f001 fcaf 	bl	80028dc <HAL_GPIO_Init>
		xDinConfig[ucCh].ulHighCounter = ulHFront;
 8000f7e:	4808      	ldr	r0, [pc, #32]	; (8000fa0 <eDinConfig+0x64>)
 8000f80:	eb00 1404 	add.w	r4, r0, r4, lsl #4
 8000f84:	60a6      	str	r6, [r4, #8]
		xDinConfig[ucCh].ulLowCounter = ulLFront;
 8000f86:	6065      	str	r5, [r4, #4]
		xDinConfig[ucCh].ucTempValue = 0U;
 8000f88:	2000      	movs	r0, #0
 8000f8a:	7360      	strb	r0, [r4, #13]
		eRes = DIN_CONFIG_OK;
	}
	return ( eRes );
}
 8000f8c:	b004      	add	sp, #16
 8000f8e:	bd70      	pop	{r4, r5, r6, pc}
			xDinConfig[ucCh].eInputType = DIN_CONFIG_POSITIVE;
 8000f90:	4b03      	ldr	r3, [pc, #12]	; (8000fa0 <eDinConfig+0x64>)
 8000f92:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8000f96:	2201      	movs	r2, #1
 8000f98:	739a      	strb	r2, [r3, #14]
 8000f9a:	e7e7      	b.n	8000f6c <eDinConfig+0x30>
	DIN_FUNCTION_ERROR_t eRes = DIN_WRONG_CHANNEL_NUMBER ;
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	e7f5      	b.n	8000f8c <eDinConfig+0x50>
 8000fa0:	20000374 	.word	0x20000374
 8000fa4:	08007478 	.word	0x08007478

08000fa8 <vADCReady>:
	{
		 ADC_OLD_RAW[i] = 0x00;
	}
}
void vADCReady()
{
 8000fa8:	b510      	push	{r4, lr}
	 static portBASE_TYPE xHigherPriorityTaskWoken;
	 xHigherPriorityTaskWoken = pdFALSE;
 8000faa:	4c0b      	ldr	r4, [pc, #44]	; (8000fd8 <vADCReady+0x30>)
 8000fac:	2300      	movs	r3, #0
 8000fae:	6023      	str	r3, [r4, #0]
	 xEventGroupSetBitsFromISR(xSystemEventGroupHandle, AIN_READY, &xHigherPriorityTaskWoken );
 8000fb0:	4622      	mov	r2, r4
 8000fb2:	2102      	movs	r1, #2
 8000fb4:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <vADCReady+0x34>)
 8000fb6:	6818      	ldr	r0, [r3, #0]
 8000fb8:	f004 fb70 	bl	800569c <xEventGroupSetBitsFromISR>
	 portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 8000fbc:	6823      	ldr	r3, [r4, #0]
 8000fbe:	b14b      	cbz	r3, 8000fd4 <vADCReady+0x2c>
 8000fc0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000fc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fc8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000fcc:	f3bf 8f4f 	dsb	sy
 8000fd0:	f3bf 8f6f 	isb	sy
	 return;
}
 8000fd4:	bd10      	pop	{r4, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000434 	.word	0x20000434
 8000fdc:	20000438 	.word	0x20000438

08000fe0 <vGetAverDataFromRAW>:
 /*
  * Функция вытаскивает из входного буфера Indata  (размером FrameSize*BufferSize) со смещением InIndex FrameSize отсчетов,
  * счетает среднее арефмитическое и записывает в буффер OutData со смещением OutIndex
  */
  void vGetAverDataFromRAW(uint16_t * InData, uint16_t *OutData, uint8_t InIndex, uint8_t OutIndex, uint8_t Size, uint16_t BufferSize)
 {
 8000fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	f89d 5020 	ldrb.w	r5, [sp, #32]
 	volatile uint32_t temp;
 	for (uint8_t i=0; i<Size; i++ )
 8000fea:	b345      	cbz	r5, 800103e <vGetAverDataFromRAW+0x5e>
 8000fec:	eb01 0e43 	add.w	lr, r1, r3, lsl #1
 8000ff0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8000ff4:	3d01      	subs	r5, #1
 8000ff6:	b2ec      	uxtb	r4, r5
 8000ff8:	4423      	add	r3, r4
 8000ffa:	3102      	adds	r1, #2
 8000ffc:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 8001000:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
 8001004:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 	{
 		temp = 0;
 8001008:	2700      	movs	r7, #0
 800100a:	f04f 0803 	mov.w	r8, #3
 		for (uint8_t j=0;j < ADC_FRAME_SIZE; j++ )
 		{
 		  temp += (InData[ InIndex + i + j * BufferSize ]);
 		}
 		OutData[ OutIndex + i ] = temp / ADC_FRAME_SIZE;
 800100e:	4d0d      	ldr	r5, [pc, #52]	; (8001044 <vGetAverDataFromRAW+0x64>)
 8001010:	e008      	b.n	8001024 <vGetAverDataFromRAW+0x44>
 8001012:	9b01      	ldr	r3, [sp, #4]
 8001014:	fba5 2303 	umull	r2, r3, r5, r3
 8001018:	085b      	lsrs	r3, r3, #1
 800101a:	f82e 3b02 	strh.w	r3, [lr], #2
 	for (uint8_t i=0; i<Size; i++ )
 800101e:	3002      	adds	r0, #2
 8001020:	45a6      	cmp	lr, r4
 8001022:	d00c      	beq.n	800103e <vGetAverDataFromRAW+0x5e>
 		temp = 0;
 8001024:	9701      	str	r7, [sp, #4]
 8001026:	4601      	mov	r1, r0
 8001028:	4643      	mov	r3, r8
 		  temp += (InData[ InIndex + i + j * BufferSize ]);
 800102a:	9e01      	ldr	r6, [sp, #4]
 800102c:	880a      	ldrh	r2, [r1, #0]
 800102e:	4432      	add	r2, r6
 8001030:	9201      	str	r2, [sp, #4]
 		for (uint8_t j=0;j < ADC_FRAME_SIZE; j++ )
 8001032:	3b01      	subs	r3, #1
 8001034:	4461      	add	r1, ip
 8001036:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800103a:	d1f6      	bne.n	800102a <vGetAverDataFromRAW+0x4a>
 800103c:	e7e9      	b.n	8001012 <vGetAverDataFromRAW+0x32>
 	}
 	return;
 }
 800103e:	b002      	add	sp, #8
 8001040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001044:	aaaaaaab 	.word	0xaaaaaaab

08001048 <vAinGetData>:
	*old_output = output;
	return output;
}

uint16_t vAinGetData(AIN_INPUT_NAME channel)
 {
 8001048:	b530      	push	{r4, r5, lr}
 800104a:	b085      	sub	sp, #20
	 float temp;
	 ADC_RAW[channel] = vRCFilter(ADC_RAW[channel], &ADC_OLD_RAW[channel]);
 800104c:	4a22      	ldr	r2, [pc, #136]	; (80010d8 <vAinGetData+0x90>)
	volatile uint32_t new = input;
 800104e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
 8001052:	9302      	str	r3, [sp, #8]
	volatile uint32_t old = *old_output;
 8001054:	4921      	ldr	r1, [pc, #132]	; (80010dc <vAinGetData+0x94>)
 8001056:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
 800105a:	9303      	str	r3, [sp, #12]
	volatile uint16_t  output =  ( A * old + (256-A)*new )>>8;
 800105c:	9c03      	ldr	r4, [sp, #12]
 800105e:	9b02      	ldr	r3, [sp, #8]
 8001060:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	25dc      	movs	r5, #220	; 0xdc
 8001068:	fb05 3304 	mla	r3, r5, r4, r3
 800106c:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8001070:	f8ad 3006 	strh.w	r3, [sp, #6]
	*old_output = output;
 8001074:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001078:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
	return output;
 800107c:	f8bd 4006 	ldrh.w	r4, [sp, #6]
 8001080:	b2a4      	uxth	r4, r4
	 ADC_RAW[channel] = vRCFilter(ADC_RAW[channel], &ADC_OLD_RAW[channel]);
 8001082:	f822 4010 	strh.w	r4, [r2, r0, lsl #1]
	 temp =  (float)(ADC_RAW[channel]*RA)/(4095- ADC_RAW[channel]);
 8001086:	4620      	mov	r0, r4
 8001088:	f7ff fade 	bl	8000648 <__aeabi_i2d>
 800108c:	a310      	add	r3, pc, #64	; (adr r3, 80010d0 <vAinGetData+0x88>)
 800108e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001092:	f7ff f85d 	bl	8000150 <__aeabi_dmul>
 8001096:	f7ff fb41 	bl	800071c <__aeabi_d2f>
 800109a:	4605      	mov	r5, r0
 800109c:	f5c4 607f 	rsb	r0, r4, #4080	; 0xff0
 80010a0:	300f      	adds	r0, #15
 80010a2:	f7ff fc45 	bl	8000930 <__aeabi_i2f>
 80010a6:	4601      	mov	r1, r0
 80010a8:	4628      	mov	r0, r5
 80010aa:	f7ff fd49 	bl	8000b40 <__aeabi_fdiv>
 80010ae:	4604      	mov	r4, r0
	 if (temp > 35000)
 80010b0:	490b      	ldr	r1, [pc, #44]	; (80010e0 <vAinGetData+0x98>)
 80010b2:	f7ff fe4d 	bl	8000d50 <__aeabi_fcmpgt>
 80010b6:	b928      	cbnz	r0, 80010c4 <vAinGetData+0x7c>
		 return 35000;
	 else
	 return (uint16_t)temp;
 80010b8:	4620      	mov	r0, r4
 80010ba:	f7ff fe53 	bl	8000d64 <__aeabi_f2uiz>
 80010be:	b280      	uxth	r0, r0
 }
 80010c0:	b005      	add	sp, #20
 80010c2:	bd30      	pop	{r4, r5, pc}
		 return 35000;
 80010c4:	f648 00b8 	movw	r0, #35000	; 0x88b8
 80010c8:	e7fa      	b.n	80010c0 <vAinGetData+0x78>
 80010ca:	bf00      	nop
 80010cc:	f3af 8000 	nop.w
 80010d0:	00000000 	.word	0x00000000
 80010d4:	40c38800 	.word	0x40c38800
 80010d8:	2000036c 	.word	0x2000036c
 80010dc:	20000364 	.word	0x20000364
 80010e0:	4708b800 	.word	0x4708b800

080010e4 <uiGetDinMask>:
 }
 /*
  *
  */
 uint32_t uiGetDinMask()
 {
 80010e4:	b082      	sub	sp, #8
 	volatile uint32_t uiMask = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	9301      	str	r3, [sp, #4]
 	for (int8_t i = (DIN_CHANNEL -1);  i > -1 ; i--)
 80010ea:	4a09      	ldr	r2, [pc, #36]	; (8001110 <uiGetDinMask+0x2c>)
 80010ec:	f1a2 00c0 	sub.w	r0, r2, #192	; 0xc0
 	{
 		uiMask <<=1;
 80010f0:	9b01      	ldr	r3, [sp, #4]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	9301      	str	r3, [sp, #4]
 		uiMask |= ( xDinConfig[ i ].ucValue & 0x01 );
 80010f6:	9901      	ldr	r1, [sp, #4]
 80010f8:	f892 30bc 	ldrb.w	r3, [r2, #188]	; 0xbc
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	430b      	orrs	r3, r1
 8001102:	9301      	str	r3, [sp, #4]
 	for (int8_t i = (DIN_CHANNEL -1);  i > -1 ; i--)
 8001104:	3a10      	subs	r2, #16
 8001106:	4282      	cmp	r2, r0
 8001108:	d1f2      	bne.n	80010f0 <uiGetDinMask+0xc>
 	}
 	return ( uiMask );
 800110a:	9801      	ldr	r0, [sp, #4]
 }
 800110c:	b002      	add	sp, #8
 800110e:	4770      	bx	lr
 8001110:	20000374 	.word	0x20000374

08001114 <vDTask>:
 {
 8001114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001118:	b089      	sub	sp, #36	; 0x24
	  xSystemEventGroupHandle =  xGetSystemControlEvent();
 800111a:	f000 f99d 	bl	8001458 <xGetSystemControlEvent>
 800111e:	4bba      	ldr	r3, [pc, #744]	; (8001408 <vDTask+0x2f4>)
 8001120:	6018      	str	r0, [r3, #0]
	eDinConfig( INPUT_1, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 8001122:	230a      	movs	r3, #10
 8001124:	461a      	mov	r2, r3
 8001126:	2100      	movs	r1, #0
 8001128:	4608      	mov	r0, r1
 800112a:	f7ff ff07 	bl	8000f3c <eDinConfig>
	eDinConfig( INPUT_2, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 800112e:	230a      	movs	r3, #10
 8001130:	461a      	mov	r2, r3
 8001132:	2100      	movs	r1, #0
 8001134:	2001      	movs	r0, #1
 8001136:	f7ff ff01 	bl	8000f3c <eDinConfig>
	eDinConfig( INPUT_3, DIN_CONFIG_NEGATIVE, DEF_H_FRONT, DEF_L_FRONT );
 800113a:	230a      	movs	r3, #10
 800113c:	461a      	mov	r2, r3
 800113e:	2100      	movs	r1, #0
 8001140:	2002      	movs	r0, #2
 8001142:	f7ff fefb 	bl	8000f3c <eDinConfig>
	eDinConfig( INPUT_4, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 8001146:	230a      	movs	r3, #10
 8001148:	461a      	mov	r2, r3
 800114a:	2100      	movs	r1, #0
 800114c:	2003      	movs	r0, #3
 800114e:	f7ff fef5 	bl	8000f3c <eDinConfig>
	eDinConfig( INPUT_5, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 8001152:	230a      	movs	r3, #10
 8001154:	461a      	mov	r2, r3
 8001156:	2100      	movs	r1, #0
 8001158:	2004      	movs	r0, #4
 800115a:	f7ff feef 	bl	8000f3c <eDinConfig>
	eDinConfig( INPUT_6, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 800115e:	230a      	movs	r3, #10
 8001160:	461a      	mov	r2, r3
 8001162:	2100      	movs	r1, #0
 8001164:	2005      	movs	r0, #5
 8001166:	f7ff fee9 	bl	8000f3c <eDinConfig>
	eDinConfig( INPUT_7, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 800116a:	230a      	movs	r3, #10
 800116c:	461a      	mov	r2, r3
 800116e:	2100      	movs	r1, #0
 8001170:	2006      	movs	r0, #6
 8001172:	f7ff fee3 	bl	8000f3c <eDinConfig>
	eDinConfig( INPUT_8, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 8001176:	230a      	movs	r3, #10
 8001178:	461a      	mov	r2, r3
 800117a:	2100      	movs	r1, #0
 800117c:	2007      	movs	r0, #7
 800117e:	f7ff fedd 	bl	8000f3c <eDinConfig>
	eDinConfig( INPUT_9, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 8001182:	230a      	movs	r3, #10
 8001184:	461a      	mov	r2, r3
 8001186:	2100      	movs	r1, #0
 8001188:	2008      	movs	r0, #8
 800118a:	f7ff fed7 	bl	8000f3c <eDinConfig>
	eDinConfig( INPUT_10, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 800118e:	230a      	movs	r3, #10
 8001190:	461a      	mov	r2, r3
 8001192:	2100      	movs	r1, #0
 8001194:	2009      	movs	r0, #9
 8001196:	f7ff fed1 	bl	8000f3c <eDinConfig>
	eDinConfig( INPUT_11, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 800119a:	230a      	movs	r3, #10
 800119c:	461a      	mov	r2, r3
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fecb 	bl	8000f3c <eDinConfig>
	eDinConfig( INPUT_12, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 80011a6:	230a      	movs	r3, #10
 80011a8:	461a      	mov	r2, r3
 80011aa:	2100      	movs	r1, #0
 80011ac:	200b      	movs	r0, #11
 80011ae:	f7ff fec5 	bl	8000f3c <eDinConfig>
	eAinCalDataConfig(AIN_2,11);
 80011b2:	210b      	movs	r1, #11
 80011b4:	2001      	movs	r0, #1
 80011b6:	f7ff fe37 	bl	8000e28 <eAinCalDataConfig>
		for (int i = 0;i<11;i++)
 80011ba:	4c94      	ldr	r4, [pc, #592]	; (800140c <vDTask+0x2f8>)
	eAinCalDataConfig(AIN_2,11);
 80011bc:	2500      	movs	r5, #0
			eSetAinCalPoint(AIN_2,&d[0],i);
 80011be:	2601      	movs	r6, #1
			d[0].X = B57164CalPoint[i][1];
 80011c0:	8860      	ldrh	r0, [r4, #2]
 80011c2:	f7ff fbb1 	bl	8000928 <__aeabi_ui2f>
 80011c6:	9005      	str	r0, [sp, #20]
			d[0].Y = B57164CalPoint[i][0];
 80011c8:	8820      	ldrh	r0, [r4, #0]
 80011ca:	f7ff fbad 	bl	8000928 <__aeabi_ui2f>
 80011ce:	9004      	str	r0, [sp, #16]
			d[1].X = B57164CalPoint[i+1][1];
 80011d0:	88e0      	ldrh	r0, [r4, #6]
 80011d2:	f7ff fba9 	bl	8000928 <__aeabi_ui2f>
 80011d6:	9007      	str	r0, [sp, #28]
			d[1].Y = B57164CalPoint[i+1][0];
 80011d8:	f834 0f04 	ldrh.w	r0, [r4, #4]!
 80011dc:	f7ff fba4 	bl	8000928 <__aeabi_ui2f>
 80011e0:	9006      	str	r0, [sp, #24]
			eSetAinCalPoint(AIN_2,&d[0],i);
 80011e2:	b2aa      	uxth	r2, r5
 80011e4:	a904      	add	r1, sp, #16
 80011e6:	4630      	mov	r0, r6
 80011e8:	f7ff fe7a 	bl	8000ee0 <eSetAinCalPoint>
		for (int i = 0;i<11;i++)
 80011ec:	3501      	adds	r5, #1
 80011ee:	2d0b      	cmp	r5, #11
 80011f0:	d1e6      	bne.n	80011c0 <vDTask+0xac>
		eAinCalDataConfig(AIN_3,20);
 80011f2:	2114      	movs	r1, #20
 80011f4:	2002      	movs	r0, #2
 80011f6:	f7ff fe17 	bl	8000e28 <eAinCalDataConfig>
		for (int i = 0;i<19;i++)
 80011fa:	4c85      	ldr	r4, [pc, #532]	; (8001410 <vDTask+0x2fc>)
		eAinCalDataConfig(AIN_3,20);
 80011fc:	2500      	movs	r5, #0
			eSetAinCalPoint(AIN_3,&d[0],i);
 80011fe:	2602      	movs	r6, #2
			d[0].X = CalPoint[i][1];
 8001200:	8860      	ldrh	r0, [r4, #2]
 8001202:	f7ff fb91 	bl	8000928 <__aeabi_ui2f>
 8001206:	9005      	str	r0, [sp, #20]
			d[0].Y = CalPoint[i][0];
 8001208:	8820      	ldrh	r0, [r4, #0]
 800120a:	f7ff fb8d 	bl	8000928 <__aeabi_ui2f>
 800120e:	9004      	str	r0, [sp, #16]
			d[1].X = CalPoint[i+1][1];
 8001210:	88e0      	ldrh	r0, [r4, #6]
 8001212:	f7ff fb89 	bl	8000928 <__aeabi_ui2f>
 8001216:	9007      	str	r0, [sp, #28]
			d[1].Y = CalPoint[i+1][0];
 8001218:	f834 0f04 	ldrh.w	r0, [r4, #4]!
 800121c:	f7ff fb84 	bl	8000928 <__aeabi_ui2f>
 8001220:	9006      	str	r0, [sp, #24]
			eSetAinCalPoint(AIN_3,&d[0],i);
 8001222:	b2aa      	uxth	r2, r5
 8001224:	a904      	add	r1, sp, #16
 8001226:	4630      	mov	r0, r6
 8001228:	f7ff fe5a 	bl	8000ee0 <eSetAinCalPoint>
		for (int i = 0;i<19;i++)
 800122c:	3501      	adds	r5, #1
 800122e:	2d13      	cmp	r5, #19
 8001230:	d1e6      	bne.n	8001200 <vDTask+0xec>
		 ADC_OLD_RAW[i] = 0x00;
 8001232:	4a78      	ldr	r2, [pc, #480]	; (8001414 <vDTask+0x300>)
 8001234:	2300      	movs	r3, #0
 8001236:	8013      	strh	r3, [r2, #0]
 8001238:	8053      	strh	r3, [r2, #2]
 800123a:	8093      	strh	r3, [r2, #4]
	  uint8_t init_timer = 0;
 800123c:	9303      	str	r3, [sp, #12]
		    HAL_ADC_Start_DMA(&hadc1,&ADC1_DMABuffer[0], 9);
 800123e:	f8df b1d8 	ldr.w	fp, [pc, #472]	; 8001418 <vDTask+0x304>
 8001242:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 800141c <vDTask+0x308>
		  	vTaskDelay(1);
 8001246:	f04f 0901 	mov.w	r9, #1
									xDinConfig[i].ulCounter = 0U;
 800124a:	4698      	mov	r8, r3
}
 800124c:	e09f      	b.n	800138e <vDTask+0x27a>
				   DataReadyFlag = 1;
 800124e:	4b74      	ldr	r3, [pc, #464]	; (8001420 <vDTask+0x30c>)
 8001250:	f883 9000 	strb.w	r9, [r3]
				   xEventGroupSetBits(xSystemEventGroupHandle, DIN_READY );
 8001254:	4649      	mov	r1, r9
 8001256:	4b6c      	ldr	r3, [pc, #432]	; (8001408 <vDTask+0x2f4>)
 8001258:	6818      	ldr	r0, [r3, #0]
 800125a:	f004 f9d1 	bl	8005600 <xEventGroupSetBits>
 800125e:	e0a8      	b.n	80013b2 <vDTask+0x29e>
									if (xDinConfig[i].ulCounter > ( (xDinConfig[i].ucTempValue == GPIO_PIN_RESET) ? xDinConfig[i].ulHighCounter : xDinConfig[i].ulLowCounter ) )
 8001260:	6862      	ldr	r2, [r4, #4]
 8001262:	e016      	b.n	8001292 <vDTask+0x17e>
									xDinConfig[i].ulCounter = 0U;
 8001264:	f8c4 8000 	str.w	r8, [r4]
			for (uint8_t i = 0U; i < DIN_CHANNEL; i++)
 8001268:	3410      	adds	r4, #16
 800126a:	3508      	adds	r5, #8
 800126c:	42bc      	cmp	r4, r7
 800126e:	d01b      	beq.n	80012a8 <vDTask+0x194>
						if ( xDinConfig[i].eInputType != RPM_CONFIG )
 8001270:	4626      	mov	r6, r4
 8001272:	7ba3      	ldrb	r3, [r4, #14]
 8001274:	2b02      	cmp	r3, #2
 8001276:	d0f7      	beq.n	8001268 <vDTask+0x154>
							uint8_t uсDinState = HAL_GPIO_ReadPin( xDinPortConfig[i].GPIOx, xDinPortConfig[i].Pin);
 8001278:	8829      	ldrh	r1, [r5, #0]
 800127a:	6868      	ldr	r0, [r5, #4]
 800127c:	f001 fc68 	bl	8002b50 <HAL_GPIO_ReadPin>
							if (uсDinState != xDinConfig[i].ucTempValue )
 8001280:	7b62      	ldrb	r2, [r4, #13]
 8001282:	4282      	cmp	r2, r0
 8001284:	d0ee      	beq.n	8001264 <vDTask+0x150>
									xDinConfig[i].ulCounter ++ ;
 8001286:	6823      	ldr	r3, [r4, #0]
 8001288:	3301      	adds	r3, #1
 800128a:	6023      	str	r3, [r4, #0]
									if (xDinConfig[i].ulCounter > ( (xDinConfig[i].ucTempValue == GPIO_PIN_RESET) ? xDinConfig[i].ulHighCounter : xDinConfig[i].ulLowCounter ) )
 800128c:	2a00      	cmp	r2, #0
 800128e:	d1e7      	bne.n	8001260 <vDTask+0x14c>
 8001290:	68a2      	ldr	r2, [r4, #8]
 8001292:	4293      	cmp	r3, r2
 8001294:	d9e8      	bls.n	8001268 <vDTask+0x154>
												xDinConfig[i].ucValue = uсDinState  ^ ( (~xDinConfig[i].eInputType) & 0x1);
 8001296:	7bb3      	ldrb	r3, [r6, #14]
 8001298:	f083 0301 	eor.w	r3, r3, #1
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	4043      	eors	r3, r0
 80012a2:	7333      	strb	r3, [r6, #12]
												xDinConfig[i].ucTempValue = uсDinState ;
 80012a4:	7370      	strb	r0, [r6, #13]
 80012a6:	e7df      	b.n	8001268 <vDTask+0x154>
			xEventGroupWaitBits(xSystemEventGroupHandle,  AIN_READY,  pdFALSE, pdTRUE, portMAX_DELAY );
 80012a8:	f04f 33ff 	mov.w	r3, #4294967295
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	464b      	mov	r3, r9
 80012b0:	4642      	mov	r2, r8
 80012b2:	2102      	movs	r1, #2
 80012b4:	4854      	ldr	r0, [pc, #336]	; (8001408 <vDTask+0x2f4>)
 80012b6:	6800      	ldr	r0, [r0, #0]
 80012b8:	f004 f917 	bl	80054ea <xEventGroupWaitBits>
			HAL_ADC_Stop_DMA(&hadc1);
 80012bc:	4650      	mov	r0, sl
 80012be:	f001 f8f3 	bl	80024a8 <HAL_ADC_Stop_DMA>
			vGetAverDataFromRAW(&ADC1_DMABuffer[0],&ADC_RAW[0],0,0,3,3);
 80012c2:	4c58      	ldr	r4, [pc, #352]	; (8001424 <vDTask+0x310>)
 80012c4:	2303      	movs	r3, #3
 80012c6:	9301      	str	r3, [sp, #4]
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	4643      	mov	r3, r8
 80012cc:	4642      	mov	r2, r8
 80012ce:	4621      	mov	r1, r4
 80012d0:	4658      	mov	r0, fp
 80012d2:	f7ff fe85 	bl	8000fe0 <vGetAverDataFromRAW>
			vSetReg(DEVICE_TYPE,  (uiGetDinMask() & DEVICE_MODE_MASK)>>DEVICE_MODE_OFFSET );
 80012d6:	f7ff ff05 	bl	80010e4 <uiGetDinMask>
 80012da:	f3c0 1101 	ubfx	r1, r0, #4, #2
 80012de:	2006      	movs	r0, #6
 80012e0:	f000 fb72 	bl	80019c8 <vSetReg>
			vSetReg(DEVICE_COUNT, (uiGetDinMask() & DEVICE_ADDR_MASK)>>DEVICE_ADDR_OFFSET);
 80012e4:	f7ff fefe 	bl	80010e4 <uiGetDinMask>
 80012e8:	f000 010f 	and.w	r1, r0, #15
 80012ec:	2005      	movs	r0, #5
 80012ee:	f000 fb6b 	bl	80019c8 <vSetReg>
			vSetReg(CONTROL_MODE, (uiGetDinMask() & DEVICE_MASTER_CONTROL_MASK)>>DEVICE_MASTER_CONTROL_OFFSET);
 80012f2:	f7ff fef7 	bl	80010e4 <uiGetDinMask>
 80012f6:	f3c0 11c0 	ubfx	r1, r0, #7, #1
 80012fa:	2004      	movs	r0, #4
 80012fc:	f000 fb64 	bl	80019c8 <vSetReg>
			vSetReg(WORK_TEMP , ADC_RAW[0]/136 +5);
 8001300:	8821      	ldrh	r1, [r4, #0]
 8001302:	4b49      	ldr	r3, [pc, #292]	; (8001428 <vDTask+0x314>)
 8001304:	fba3 3101 	umull	r3, r1, r3, r1
 8001308:	09c9      	lsrs	r1, r1, #7
 800130a:	3105      	adds	r1, #5
 800130c:	2002      	movs	r0, #2
 800130e:	f000 fb5b 	bl	80019c8 <vSetReg>
			vSetReg(MODE,(uiGetDinMask() & DEVICE_TYPE_MASK)>>DEVICE_TYPE_OFFSET);
 8001312:	f7ff fee7 	bl	80010e4 <uiGetDinMask>
 8001316:	f3c0 2181 	ubfx	r1, r0, #10, #2
 800131a:	4640      	mov	r0, r8
 800131c:	f000 fb54 	bl	80019c8 <vSetReg>
			vSetReg(FAN_SPEED_CONFIG,(uiGetDinMask() & DEVICE_FAN_MASK)>>DEVICE_FAN_OFFSET);
 8001320:	f7ff fee0 	bl	80010e4 <uiGetDinMask>
 8001324:	f3c0 2101 	ubfx	r1, r0, #8, #2
 8001328:	4648      	mov	r0, r9
 800132a:	f000 fb4d 	bl	80019c8 <vSetReg>
			temp = vAinGetData(AIN_3);
 800132e:	2002      	movs	r0, #2
 8001330:	f7ff fe8a 	bl	8001048 <vAinGetData>
			if  ((temp>=35000) || (temp <3500))
 8001334:	f6a0 53ac 	subw	r3, r0, #3500	; 0xdac
 8001338:	b29b      	uxth	r3, r3
 800133a:	f647 320b 	movw	r2, #31499	; 0x7b0b
 800133e:	4293      	cmp	r3, r2
 8001340:	d94b      	bls.n	80013da <vDTask+0x2c6>
				temp = vAinGetData(AIN_2);
 8001342:	4648      	mov	r0, r9
 8001344:	f7ff fe80 	bl	8001048 <vAinGetData>
				if  ((temp<35000) && (temp >3500))
 8001348:	f6a0 53ad 	subw	r3, r0, #3501	; 0xdad
 800134c:	b29b      	uxth	r3, r3
 800134e:	f647 320a 	movw	r2, #31498	; 0x7b0a
 8001352:	4293      	cmp	r3, r2
 8001354:	d832      	bhi.n	80013bc <vDTask+0x2a8>
					vSetReg(AIR_TEMP, (uint16_t)fGetAinCalData(AIN_2,temp));
 8001356:	f7ff fae7 	bl	8000928 <__aeabi_ui2f>
 800135a:	4601      	mov	r1, r0
 800135c:	4648      	mov	r0, r9
 800135e:	f7ff fd21 	bl	8000da4 <fGetAinCalData>
 8001362:	f7ff fcff 	bl	8000d64 <__aeabi_f2uiz>
 8001366:	b281      	uxth	r1, r0
 8001368:	2003      	movs	r0, #3
 800136a:	f000 fb2d 	bl	80019c8 <vSetReg>
					vSetRegInput(ERROR_STATUS,usGetRegInput(ERROR_STATUS) & ~AIR_TEMP_ERROR);
 800136e:	2007      	movs	r0, #7
 8001370:	f000 fb1e 	bl	80019b0 <usGetRegInput>
 8001374:	f020 0102 	bic.w	r1, r0, #2
 8001378:	b289      	uxth	r1, r1
 800137a:	2007      	movs	r0, #7
 800137c:	f000 fb1e 	bl	80019bc <vSetRegInput>
			vSetRegInput(TYPE, (uiGetDinMask() & DEVICE_MODE_MASK)>>DEVICE_MODE_OFFSET );
 8001380:	f7ff feb0 	bl	80010e4 <uiGetDinMask>
 8001384:	f3c0 1101 	ubfx	r1, r0, #4, #2
 8001388:	4640      	mov	r0, r8
 800138a:	f000 fb17 	bl	80019bc <vSetRegInput>
		    HAL_ADC_Start_DMA(&hadc1,&ADC1_DMABuffer[0], 9);
 800138e:	2209      	movs	r2, #9
 8001390:	4659      	mov	r1, fp
 8001392:	4650      	mov	r0, sl
 8001394:	f000 ff3e 	bl	8002214 <HAL_ADC_Start_DMA>
		  	vTaskDelay(1);
 8001398:	4648      	mov	r0, r9
 800139a:	f005 f881 	bl	80064a0 <vTaskDelay>
			if (DataReadyFlag == 0)
 800139e:	4b20      	ldr	r3, [pc, #128]	; (8001420 <vDTask+0x30c>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	b933      	cbnz	r3, 80013b2 <vDTask+0x29e>
			   init_timer++;
 80013a4:	9b03      	ldr	r3, [sp, #12]
 80013a6:	3301      	adds	r3, #1
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	9303      	str	r3, [sp, #12]
			   if (init_timer == 50)
 80013ac:	2b32      	cmp	r3, #50	; 0x32
 80013ae:	f43f af4e 	beq.w	800124e <vDTask+0x13a>
			for (uint8_t i = 0U; i < DIN_CHANNEL; i++)
 80013b2:	4c1e      	ldr	r4, [pc, #120]	; (800142c <vDTask+0x318>)
 80013b4:	4d1e      	ldr	r5, [pc, #120]	; (8001430 <vDTask+0x31c>)
 80013b6:	f104 07c0 	add.w	r7, r4, #192	; 0xc0
 80013ba:	e759      	b.n	8001270 <vDTask+0x15c>
					vSetReg(AIR_TEMP, -1);
 80013bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80013c0:	2003      	movs	r0, #3
 80013c2:	f000 fb01 	bl	80019c8 <vSetReg>
					vSetRegInput(ERROR_STATUS,usGetRegInput(ERROR_STATUS) | AIR_TEMP_ERROR);
 80013c6:	2007      	movs	r0, #7
 80013c8:	f000 faf2 	bl	80019b0 <usGetRegInput>
 80013cc:	f040 0102 	orr.w	r1, r0, #2
 80013d0:	b289      	uxth	r1, r1
 80013d2:	2007      	movs	r0, #7
 80013d4:	f000 faf2 	bl	80019bc <vSetRegInput>
 80013d8:	e7d2      	b.n	8001380 <vDTask+0x26c>
					vSetReg(AIR_TEMP, (uint16_t)fGetAinCalData(AIN_3,temp));
 80013da:	f7ff faa5 	bl	8000928 <__aeabi_ui2f>
 80013de:	4601      	mov	r1, r0
 80013e0:	2002      	movs	r0, #2
 80013e2:	f7ff fcdf 	bl	8000da4 <fGetAinCalData>
 80013e6:	f7ff fcbd 	bl	8000d64 <__aeabi_f2uiz>
 80013ea:	b281      	uxth	r1, r0
 80013ec:	2003      	movs	r0, #3
 80013ee:	f000 faeb 	bl	80019c8 <vSetReg>
					vSetRegInput(ERROR_STATUS,usGetRegInput(ERROR_STATUS) & ~AIR_TEMP_ERROR);
 80013f2:	2007      	movs	r0, #7
 80013f4:	f000 fadc 	bl	80019b0 <usGetRegInput>
 80013f8:	f020 0102 	bic.w	r1, r0, #2
 80013fc:	b289      	uxth	r1, r1
 80013fe:	2007      	movs	r0, #7
 8001400:	f000 fadc 	bl	80019bc <vSetRegInput>
 8001404:	e7bc      	b.n	8001380 <vDTask+0x26c>
 8001406:	bf00      	nop
 8001408:	20000438 	.word	0x20000438
 800140c:	080073fc 	.word	0x080073fc
 8001410:	08007428 	.word	0x08007428
 8001414:	20000364 	.word	0x20000364
 8001418:	20000350 	.word	0x20000350
 800141c:	20001484 	.word	0x20001484
 8001420:	20000372 	.word	0x20000372
 8001424:	2000036c 	.word	0x2000036c
 8001428:	f0f0f0f1 	.word	0xf0f0f0f1
 800142c:	20000374 	.word	0x20000374
 8001430:	08007478 	.word	0x08007478

08001434 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001434:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  for(;;)
  {
    osDelay(10);
 8001436:	240a      	movs	r4, #10
 8001438:	4620      	mov	r0, r4
 800143a:	f003 ffc1 	bl	80053c0 <osDelay>
  for(;;)
 800143e:	e7fb      	b.n	8001438 <StartDefaultTask+0x4>

08001440 <xGetOSEvent>:
}
 8001440:	4b01      	ldr	r3, [pc, #4]	; (8001448 <xGetOSEvent+0x8>)
 8001442:	6818      	ldr	r0, [r3, #0]
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	20001638 	.word	0x20001638

0800144c <xGetUARTEvent>:
 }
 800144c:	4b01      	ldr	r3, [pc, #4]	; (8001454 <xGetUARTEvent+0x8>)
 800144e:	6818      	ldr	r0, [r3, #0]
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	20001680 	.word	0x20001680

08001458 <xGetSystemControlEvent>:
 }
 8001458:	4b01      	ldr	r3, [pc, #4]	; (8001460 <xGetSystemControlEvent+0x8>)
 800145a:	6818      	ldr	r0, [r3, #0]
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	2000165c 	.word	0x2000165c

08001464 <vTimerInit>:
{
 8001464:	b508      	push	{r3, lr}
	htim2.Init.Period = timeout;
 8001466:	4b04      	ldr	r3, [pc, #16]	; (8001478 <vTimerInit+0x14>)
 8001468:	60d8      	str	r0, [r3, #12]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800146a:	4618      	mov	r0, r3
 800146c:	f002 f922 	bl	80036b4 <HAL_TIM_Base_Init>
 8001470:	b900      	cbnz	r0, 8001474 <vTimerInit+0x10>
}
 8001472:	bd08      	pop	{r3, pc}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001474:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001476:	e7fe      	b.n	8001476 <vTimerInit+0x12>
 8001478:	200014f8 	.word	0x200014f8

0800147c <vStartTimer>:
{
 800147c:	b508      	push	{r3, lr}
	HAL_TIM_Base_Start_IT(&htim2);
 800147e:	4802      	ldr	r0, [pc, #8]	; (8001488 <vStartTimer+0xc>)
 8001480:	f001 ffba 	bl	80033f8 <HAL_TIM_Base_Start_IT>
}
 8001484:	bd08      	pop	{r3, pc}
 8001486:	bf00      	nop
 8001488:	200014f8 	.word	0x200014f8

0800148c <vStopTimer>:
{
 800148c:	b508      	push	{r3, lr}
	HAL_TIM_Base_Stop_IT(&htim2);
 800148e:	4802      	ldr	r0, [pc, #8]	; (8001498 <vStopTimer+0xc>)
 8001490:	f001 ffe6 	bl	8003460 <HAL_TIM_Base_Stop_IT>
}
 8001494:	bd08      	pop	{r3, pc}
 8001496:	bf00      	nop
 8001498:	200014f8 	.word	0x200014f8

0800149c <SystemClock_Config>:
{
 800149c:	b500      	push	{lr}
 800149e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a0:	2220      	movs	r2, #32
 80014a2:	2100      	movs	r1, #0
 80014a4:	a80b      	add	r0, sp, #44	; 0x2c
 80014a6:	f005 fed7 	bl	8007258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014aa:	2300      	movs	r3, #0
 80014ac:	9305      	str	r3, [sp, #20]
 80014ae:	9306      	str	r3, [sp, #24]
 80014b0:	9307      	str	r3, [sp, #28]
 80014b2:	9308      	str	r3, [sp, #32]
 80014b4:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014b6:	9301      	str	r3, [sp, #4]
 80014b8:	9302      	str	r3, [sp, #8]
 80014ba:	9303      	str	r3, [sp, #12]
 80014bc:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014be:	2302      	movs	r3, #2
 80014c0:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014c2:	2201      	movs	r2, #1
 80014c4:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014c6:	2210      	movs	r2, #16
 80014c8:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ca:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80014cc:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80014d0:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d2:	a80a      	add	r0, sp, #40	; 0x28
 80014d4:	f001 fb52 	bl	8002b7c <HAL_RCC_OscConfig>
 80014d8:	b9c8      	cbnz	r0, 800150e <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014da:	230f      	movs	r3, #15
 80014dc:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014de:	2102      	movs	r1, #2
 80014e0:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014e2:	2300      	movs	r3, #0
 80014e4:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014ea:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ec:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014ee:	a805      	add	r0, sp, #20
 80014f0:	f001 fd84 	bl	8002ffc <HAL_RCC_ClockConfig>
 80014f4:	b968      	cbnz	r0, 8001512 <SystemClock_Config+0x76>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014f6:	2302      	movs	r3, #2
 80014f8:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80014fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014fe:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001500:	a801      	add	r0, sp, #4
 8001502:	f001 fe71 	bl	80031e8 <HAL_RCCEx_PeriphCLKConfig>
 8001506:	b930      	cbnz	r0, 8001516 <SystemClock_Config+0x7a>
}
 8001508:	b015      	add	sp, #84	; 0x54
 800150a:	f85d fb04 	ldr.w	pc, [sp], #4
 800150e:	b672      	cpsid	i
  while (1)
 8001510:	e7fe      	b.n	8001510 <SystemClock_Config+0x74>
 8001512:	b672      	cpsid	i
 8001514:	e7fe      	b.n	8001514 <SystemClock_Config+0x78>
 8001516:	b672      	cpsid	i
 8001518:	e7fe      	b.n	8001518 <SystemClock_Config+0x7c>
	...

0800151c <main>:
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b092      	sub	sp, #72	; 0x48
  HAL_Init();
 8001520:	f000 fd24 	bl	8001f6c <HAL_Init>
  SystemClock_Config();
 8001524:	f7ff ffba 	bl	800149c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	2400      	movs	r4, #0
 800152a:	940b      	str	r4, [sp, #44]	; 0x2c
 800152c:	940c      	str	r4, [sp, #48]	; 0x30
 800152e:	940d      	str	r4, [sp, #52]	; 0x34
 8001530:	940e      	str	r4, [sp, #56]	; 0x38
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001532:	4dad      	ldr	r5, [pc, #692]	; (80017e8 <main+0x2cc>)
 8001534:	69ab      	ldr	r3, [r5, #24]
 8001536:	f043 0310 	orr.w	r3, r3, #16
 800153a:	61ab      	str	r3, [r5, #24]
 800153c:	69ab      	ldr	r3, [r5, #24]
 800153e:	f003 0310 	and.w	r3, r3, #16
 8001542:	9301      	str	r3, [sp, #4]
 8001544:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001546:	69ab      	ldr	r3, [r5, #24]
 8001548:	f043 0320 	orr.w	r3, r3, #32
 800154c:	61ab      	str	r3, [r5, #24]
 800154e:	69ab      	ldr	r3, [r5, #24]
 8001550:	f003 0320 	and.w	r3, r3, #32
 8001554:	9302      	str	r3, [sp, #8]
 8001556:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001558:	69ab      	ldr	r3, [r5, #24]
 800155a:	f043 0304 	orr.w	r3, r3, #4
 800155e:	61ab      	str	r3, [r5, #24]
 8001560:	69ab      	ldr	r3, [r5, #24]
 8001562:	f003 0304 	and.w	r3, r3, #4
 8001566:	9303      	str	r3, [sp, #12]
 8001568:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800156a:	69ab      	ldr	r3, [r5, #24]
 800156c:	f043 0308 	orr.w	r3, r3, #8
 8001570:	61ab      	str	r3, [r5, #24]
 8001572:	69ab      	ldr	r3, [r5, #24]
 8001574:	f003 0308 	and.w	r3, r3, #8
 8001578:	9304      	str	r3, [sp, #16]
 800157a:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, LED_G_Pin|LED_R_Pin|EN_Pin, GPIO_PIN_RESET);
 800157c:	4e9b      	ldr	r6, [pc, #620]	; (80017ec <main+0x2d0>)
 800157e:	4622      	mov	r2, r4
 8001580:	f44f 7198 	mov.w	r1, #304	; 0x130
 8001584:	4630      	mov	r0, r6
 8001586:	f001 fae9 	bl	8002b5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, K2_Pin|K4_Pin|K6_Pin|K8_Pin, GPIO_PIN_RESET);
 800158a:	4f99      	ldr	r7, [pc, #612]	; (80017f0 <main+0x2d4>)
 800158c:	4622      	mov	r2, r4
 800158e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001592:	4638      	mov	r0, r7
 8001594:	f001 fae2 	bl	8002b5c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin|EN_Pin;
 8001598:	f44f 7398 	mov.w	r3, #304	; 0x130
 800159c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159e:	f04f 0901 	mov.w	r9, #1
 80015a2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	f04f 0802 	mov.w	r8, #2
 80015ac:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b0:	a90b      	add	r1, sp, #44	; 0x2c
 80015b2:	4630      	mov	r0, r6
 80015b4:	f001 f992 	bl	80028dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = S1_Pin|S2_Pin|S3_Pin|S4_Pin
 80015b8:	f640 73ff 	movw	r3, #4095	; 0xfff
 80015bc:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015be:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c2:	a90b      	add	r1, sp, #44	; 0x2c
 80015c4:	4638      	mov	r0, r7
 80015c6:	f001 f989 	bl	80028dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = K2_Pin|K4_Pin|K6_Pin|K8_Pin;
 80015ca:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80015ce:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d0:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015da:	a90b      	add	r1, sp, #44	; 0x2c
 80015dc:	4638      	mov	r0, r7
 80015de:	f001 f97d 	bl	80028dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SW8_Pin;
 80015e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015e6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e8:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(SW8_GPIO_Port, &GPIO_InitStruct);
 80015ec:	a90b      	add	r1, sp, #44	; 0x2c
 80015ee:	4630      	mov	r0, r6
 80015f0:	f001 f974 	bl	80028dc <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015f4:	696b      	ldr	r3, [r5, #20]
 80015f6:	ea43 0309 	orr.w	r3, r3, r9
 80015fa:	616b      	str	r3, [r5, #20]
 80015fc:	696b      	ldr	r3, [r5, #20]
 80015fe:	ea03 0309 	and.w	r3, r3, r9
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001606:	4622      	mov	r2, r4
 8001608:	2105      	movs	r1, #5
 800160a:	200b      	movs	r0, #11
 800160c:	f000 ff8e 	bl	800252c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001610:	200b      	movs	r0, #11
 8001612:	f000 ffc1 	bl	8002598 <HAL_NVIC_EnableIRQ>
  huart1.Instance = USART1;
 8001616:	4877      	ldr	r0, [pc, #476]	; (80017f4 <main+0x2d8>)
 8001618:	4b77      	ldr	r3, [pc, #476]	; (80017f8 <main+0x2dc>)
 800161a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 800161c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001620:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8001622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001626:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001628:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 800162a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800162e:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001630:	230c      	movs	r3, #12
 8001632:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001634:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001636:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001638:	f002 fa9c 	bl	8003b74 <HAL_UART_Init>
 800163c:	2800      	cmp	r0, #0
 800163e:	f040 813a 	bne.w	80018b6 <main+0x39a>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001642:	2300      	movs	r3, #0
 8001644:	930b      	str	r3, [sp, #44]	; 0x2c
 8001646:	930c      	str	r3, [sp, #48]	; 0x30
 8001648:	930d      	str	r3, [sp, #52]	; 0x34
 800164a:	930e      	str	r3, [sp, #56]	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800164c:	9307      	str	r3, [sp, #28]
 800164e:	9308      	str	r3, [sp, #32]
  htim2.Instance = TIM2;
 8001650:	486a      	ldr	r0, [pc, #424]	; (80017fc <main+0x2e0>)
 8001652:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001656:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 3264;
 8001658:	f44f 624c 	mov.w	r2, #3264	; 0xcc0
 800165c:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800165e:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 1000;
 8001660:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001664:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001666:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001668:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800166a:	f002 f823 	bl	80036b4 <HAL_TIM_Base_Init>
 800166e:	2800      	cmp	r0, #0
 8001670:	f040 8123 	bne.w	80018ba <main+0x39e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001678:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800167a:	a90b      	add	r1, sp, #44	; 0x2c
 800167c:	485f      	ldr	r0, [pc, #380]	; (80017fc <main+0x2e0>)
 800167e:	f002 f919 	bl	80038b4 <HAL_TIM_ConfigClockSource>
 8001682:	2800      	cmp	r0, #0
 8001684:	f040 811b 	bne.w	80018be <main+0x3a2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001688:	2320      	movs	r3, #32
 800168a:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800168c:	2300      	movs	r3, #0
 800168e:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001690:	a907      	add	r1, sp, #28
 8001692:	485a      	ldr	r0, [pc, #360]	; (80017fc <main+0x2e0>)
 8001694:	f002 f9c4 	bl	8003a20 <HAL_TIMEx_MasterConfigSynchronization>
 8001698:	2800      	cmp	r0, #0
 800169a:	f040 8112 	bne.w	80018c2 <main+0x3a6>
  ADC_ChannelConfTypeDef sConfig = {0};
 800169e:	2300      	movs	r3, #0
 80016a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80016a2:	930c      	str	r3, [sp, #48]	; 0x30
 80016a4:	930d      	str	r3, [sp, #52]	; 0x34
  hadc1.Instance = ADC1;
 80016a6:	4856      	ldr	r0, [pc, #344]	; (8001800 <main+0x2e4>)
 80016a8:	4a56      	ldr	r2, [pc, #344]	; (8001804 <main+0x2e8>)
 80016aa:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80016ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016b0:	6082      	str	r2, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80016b2:	2201      	movs	r2, #1
 80016b4:	7302      	strb	r2, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016b6:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016b8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80016bc:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016be:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 3;
 80016c0:	2303      	movs	r3, #3
 80016c2:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016c4:	f000 fe6c 	bl	80023a0 <HAL_ADC_Init>
 80016c8:	2800      	cmp	r0, #0
 80016ca:	f040 80fc 	bne.w	80018c6 <main+0x3aa>
  sConfig.Channel = ADC_CHANNEL_0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016d2:	2301      	movs	r3, #1
 80016d4:	930c      	str	r3, [sp, #48]	; 0x30
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 80016d6:	2304      	movs	r3, #4
 80016d8:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016da:	a90b      	add	r1, sp, #44	; 0x2c
 80016dc:	4848      	ldr	r0, [pc, #288]	; (8001800 <main+0x2e4>)
 80016de:	f000 fca7 	bl	8002030 <HAL_ADC_ConfigChannel>
 80016e2:	2800      	cmp	r0, #0
 80016e4:	f040 80f1 	bne.w	80018ca <main+0x3ae>
  sConfig.Channel = ADC_CHANNEL_1;
 80016e8:	2301      	movs	r3, #1
 80016ea:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80016ec:	2302      	movs	r3, #2
 80016ee:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016f0:	a90b      	add	r1, sp, #44	; 0x2c
 80016f2:	4843      	ldr	r0, [pc, #268]	; (8001800 <main+0x2e4>)
 80016f4:	f000 fc9c 	bl	8002030 <HAL_ADC_ConfigChannel>
 80016f8:	2800      	cmp	r0, #0
 80016fa:	f040 80e8 	bne.w	80018ce <main+0x3b2>
  sConfig.Channel = ADC_CHANNEL_2;
 80016fe:	2302      	movs	r3, #2
 8001700:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001702:	2303      	movs	r3, #3
 8001704:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001706:	a90b      	add	r1, sp, #44	; 0x2c
 8001708:	483d      	ldr	r0, [pc, #244]	; (8001800 <main+0x2e4>)
 800170a:	f000 fc91 	bl	8002030 <HAL_ADC_ConfigChannel>
 800170e:	2800      	cmp	r0, #0
 8001710:	f040 80df 	bne.w	80018d2 <main+0x3b6>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001714:	2300      	movs	r3, #0
 8001716:	9307      	str	r3, [sp, #28]
 8001718:	9308      	str	r3, [sp, #32]
 800171a:	9309      	str	r3, [sp, #36]	; 0x24
 800171c:	930a      	str	r3, [sp, #40]	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800171e:	9305      	str	r3, [sp, #20]
 8001720:	9306      	str	r3, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001722:	930b      	str	r3, [sp, #44]	; 0x2c
 8001724:	930c      	str	r3, [sp, #48]	; 0x30
 8001726:	930d      	str	r3, [sp, #52]	; 0x34
 8001728:	930e      	str	r3, [sp, #56]	; 0x38
 800172a:	930f      	str	r3, [sp, #60]	; 0x3c
 800172c:	9310      	str	r3, [sp, #64]	; 0x40
 800172e:	9311      	str	r3, [sp, #68]	; 0x44
  htim3.Instance = TIM3;
 8001730:	4835      	ldr	r0, [pc, #212]	; (8001808 <main+0x2ec>)
 8001732:	4a36      	ldr	r2, [pc, #216]	; (800180c <main+0x2f0>)
 8001734:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 2;
 8001736:	2202      	movs	r2, #2
 8001738:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173a:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 1000;
 800173c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001740:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001742:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001744:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001746:	f001 ffb5 	bl	80036b4 <HAL_TIM_Base_Init>
 800174a:	2800      	cmp	r0, #0
 800174c:	f040 80c3 	bne.w	80018d6 <main+0x3ba>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001750:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001754:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001756:	a907      	add	r1, sp, #28
 8001758:	482b      	ldr	r0, [pc, #172]	; (8001808 <main+0x2ec>)
 800175a:	f002 f8ab 	bl	80038b4 <HAL_TIM_ConfigClockSource>
 800175e:	2800      	cmp	r0, #0
 8001760:	f040 80bb 	bne.w	80018da <main+0x3be>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001764:	4828      	ldr	r0, [pc, #160]	; (8001808 <main+0x2ec>)
 8001766:	f001 ffd1 	bl	800370c <HAL_TIM_PWM_Init>
 800176a:	2800      	cmp	r0, #0
 800176c:	f040 80b7 	bne.w	80018de <main+0x3c2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001770:	2300      	movs	r3, #0
 8001772:	9305      	str	r3, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001774:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001776:	a905      	add	r1, sp, #20
 8001778:	4823      	ldr	r0, [pc, #140]	; (8001808 <main+0x2ec>)
 800177a:	f002 f951 	bl	8003a20 <HAL_TIMEx_MasterConfigSynchronization>
 800177e:	2800      	cmp	r0, #0
 8001780:	f040 80af 	bne.w	80018e2 <main+0x3c6>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001784:	2360      	movs	r3, #96	; 0x60
 8001786:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8001788:	2200      	movs	r2, #0
 800178a:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800178c:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800178e:	2304      	movs	r3, #4
 8001790:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001792:	a90b      	add	r1, sp, #44	; 0x2c
 8001794:	481c      	ldr	r0, [pc, #112]	; (8001808 <main+0x2ec>)
 8001796:	f002 f813 	bl	80037c0 <HAL_TIM_PWM_ConfigChannel>
 800179a:	2800      	cmp	r0, #0
 800179c:	f040 80a3 	bne.w	80018e6 <main+0x3ca>
  sConfigOC.Pulse = 500;
 80017a0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017a4:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017a6:	2204      	movs	r2, #4
 80017a8:	a90b      	add	r1, sp, #44	; 0x2c
 80017aa:	4817      	ldr	r0, [pc, #92]	; (8001808 <main+0x2ec>)
 80017ac:	f002 f808 	bl	80037c0 <HAL_TIM_PWM_ConfigChannel>
 80017b0:	2800      	cmp	r0, #0
 80017b2:	f040 809a 	bne.w	80018ea <main+0x3ce>
  HAL_TIM_MspPostInit(&htim3);
 80017b6:	4814      	ldr	r0, [pc, #80]	; (8001808 <main+0x2ec>)
 80017b8:	f000 fac8 	bl	8001d4c <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017bc:	2300      	movs	r3, #0
 80017be:	930b      	str	r3, [sp, #44]	; 0x2c
 80017c0:	930c      	str	r3, [sp, #48]	; 0x30
 80017c2:	930d      	str	r3, [sp, #52]	; 0x34
 80017c4:	930e      	str	r3, [sp, #56]	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c6:	9307      	str	r3, [sp, #28]
 80017c8:	9308      	str	r3, [sp, #32]
  htim4.Instance = TIM4;
 80017ca:	4811      	ldr	r0, [pc, #68]	; (8001810 <main+0x2f4>)
 80017cc:	4a11      	ldr	r2, [pc, #68]	; (8001814 <main+0x2f8>)
 80017ce:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 32000;
 80017d0:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80017d4:	6042      	str	r2, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d6:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 2000;
 80017d8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80017dc:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017de:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017e0:	2380      	movs	r3, #128	; 0x80
 80017e2:	6183      	str	r3, [r0, #24]
 80017e4:	e018      	b.n	8001818 <main+0x2fc>
 80017e6:	bf00      	nop
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40010800 	.word	0x40010800
 80017f0:	40010c00 	.word	0x40010c00
 80017f4:	200015d0 	.word	0x200015d0
 80017f8:	40013800 	.word	0x40013800
 80017fc:	200014f8 	.word	0x200014f8
 8001800:	20001484 	.word	0x20001484
 8001804:	40012400 	.word	0x40012400
 8001808:	20001540 	.word	0x20001540
 800180c:	40000400 	.word	0x40000400
 8001810:	20001588 	.word	0x20001588
 8001814:	40000800 	.word	0x40000800
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001818:	f001 ff4c 	bl	80036b4 <HAL_TIM_Base_Init>
 800181c:	2800      	cmp	r0, #0
 800181e:	d166      	bne.n	80018ee <main+0x3d2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001820:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001824:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001826:	a90b      	add	r1, sp, #44	; 0x2c
 8001828:	4834      	ldr	r0, [pc, #208]	; (80018fc <main+0x3e0>)
 800182a:	f002 f843 	bl	80038b4 <HAL_TIM_ConfigClockSource>
 800182e:	2800      	cmp	r0, #0
 8001830:	d15f      	bne.n	80018f2 <main+0x3d6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001832:	2300      	movs	r3, #0
 8001834:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001836:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001838:	a907      	add	r1, sp, #28
 800183a:	4830      	ldr	r0, [pc, #192]	; (80018fc <main+0x3e0>)
 800183c:	f002 f8f0 	bl	8003a20 <HAL_TIMEx_MasterConfigSynchronization>
 8001840:	2800      	cmp	r0, #0
 8001842:	d158      	bne.n	80018f6 <main+0x3da>
  osKernelInitialize();
 8001844:	f003 fd0a 	bl	800525c <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001848:	4a2d      	ldr	r2, [pc, #180]	; (8001900 <main+0x3e4>)
 800184a:	2100      	movs	r1, #0
 800184c:	482d      	ldr	r0, [pc, #180]	; (8001904 <main+0x3e8>)
 800184e:	f003 fd51 	bl	80052f4 <osThreadNew>
 8001852:	4b2d      	ldr	r3, [pc, #180]	; (8001908 <main+0x3ec>)
 8001854:	6018      	str	r0, [r3, #0]
  DIN_DOUTHandle = osThreadNew(vDTask, NULL, &DIN_DOUT_attributes);
 8001856:	4a2d      	ldr	r2, [pc, #180]	; (800190c <main+0x3f0>)
 8001858:	2100      	movs	r1, #0
 800185a:	482d      	ldr	r0, [pc, #180]	; (8001910 <main+0x3f4>)
 800185c:	f003 fd4a 	bl	80052f4 <osThreadNew>
 8001860:	4b2c      	ldr	r3, [pc, #176]	; (8001914 <main+0x3f8>)
 8001862:	6018      	str	r0, [r3, #0]
  UARTTaskHandle = osThreadNew(StartUARTTask, NULL, &UARTTask_attributes);
 8001864:	4a2c      	ldr	r2, [pc, #176]	; (8001918 <main+0x3fc>)
 8001866:	2100      	movs	r1, #0
 8001868:	482c      	ldr	r0, [pc, #176]	; (800191c <main+0x400>)
 800186a:	f003 fd43 	bl	80052f4 <osThreadNew>
 800186e:	4b2c      	ldr	r3, [pc, #176]	; (8001920 <main+0x404>)
 8001870:	6018      	str	r0, [r3, #0]
  DataTaskHandle = osThreadNew(vDATATask, NULL, &DataTask_attributes);
 8001872:	4a2c      	ldr	r2, [pc, #176]	; (8001924 <main+0x408>)
 8001874:	2100      	movs	r1, #0
 8001876:	482c      	ldr	r0, [pc, #176]	; (8001928 <main+0x40c>)
 8001878:	f003 fd3c 	bl	80052f4 <osThreadNew>
 800187c:	4b2b      	ldr	r3, [pc, #172]	; (800192c <main+0x410>)
 800187e:	6018      	str	r0, [r3, #0]
  MBTaskHandle = osThreadNew(vMBTask, NULL, &MBTask_attributes);
 8001880:	4a2b      	ldr	r2, [pc, #172]	; (8001930 <main+0x414>)
 8001882:	2100      	movs	r1, #0
 8001884:	482b      	ldr	r0, [pc, #172]	; (8001934 <main+0x418>)
 8001886:	f003 fd35 	bl	80052f4 <osThreadNew>
 800188a:	4b2b      	ldr	r3, [pc, #172]	; (8001938 <main+0x41c>)
 800188c:	6018      	str	r0, [r3, #0]
  xOSEventHandle = osEventFlagsNew(&xOSEvent_attributes);
 800188e:	482b      	ldr	r0, [pc, #172]	; (800193c <main+0x420>)
 8001890:	f003 fdb8 	bl	8005404 <osEventFlagsNew>
 8001894:	4b2a      	ldr	r3, [pc, #168]	; (8001940 <main+0x424>)
 8001896:	6018      	str	r0, [r3, #0]
  xUARTEvnetHandle = osEventFlagsNew(&xUARTEvnet_attributes);
 8001898:	482a      	ldr	r0, [pc, #168]	; (8001944 <main+0x428>)
 800189a:	f003 fdb3 	bl	8005404 <osEventFlagsNew>
 800189e:	4b2a      	ldr	r3, [pc, #168]	; (8001948 <main+0x42c>)
 80018a0:	6018      	str	r0, [r3, #0]
  xSystemControlEventHandle = osEventFlagsNew(&xSystemControlEvent_attributes);
 80018a2:	482a      	ldr	r0, [pc, #168]	; (800194c <main+0x430>)
 80018a4:	f003 fdae 	bl	8005404 <osEventFlagsNew>
 80018a8:	4b29      	ldr	r3, [pc, #164]	; (8001950 <main+0x434>)
 80018aa:	6018      	str	r0, [r3, #0]
  InitSystemEnvet(xSystemControlEventHandle);
 80018ac:	f000 f868 	bl	8001980 <InitSystemEnvet>
  osKernelStart();
 80018b0:	f003 fcf8 	bl	80052a4 <osKernelStart>
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <main+0x398>
 80018b6:	b672      	cpsid	i
  while (1)
 80018b8:	e7fe      	b.n	80018b8 <main+0x39c>
 80018ba:	b672      	cpsid	i
 80018bc:	e7fe      	b.n	80018bc <main+0x3a0>
 80018be:	b672      	cpsid	i
 80018c0:	e7fe      	b.n	80018c0 <main+0x3a4>
 80018c2:	b672      	cpsid	i
 80018c4:	e7fe      	b.n	80018c4 <main+0x3a8>
 80018c6:	b672      	cpsid	i
 80018c8:	e7fe      	b.n	80018c8 <main+0x3ac>
 80018ca:	b672      	cpsid	i
 80018cc:	e7fe      	b.n	80018cc <main+0x3b0>
 80018ce:	b672      	cpsid	i
 80018d0:	e7fe      	b.n	80018d0 <main+0x3b4>
 80018d2:	b672      	cpsid	i
 80018d4:	e7fe      	b.n	80018d4 <main+0x3b8>
 80018d6:	b672      	cpsid	i
 80018d8:	e7fe      	b.n	80018d8 <main+0x3bc>
 80018da:	b672      	cpsid	i
 80018dc:	e7fe      	b.n	80018dc <main+0x3c0>
 80018de:	b672      	cpsid	i
 80018e0:	e7fe      	b.n	80018e0 <main+0x3c4>
 80018e2:	b672      	cpsid	i
 80018e4:	e7fe      	b.n	80018e4 <main+0x3c8>
 80018e6:	b672      	cpsid	i
 80018e8:	e7fe      	b.n	80018e8 <main+0x3cc>
 80018ea:	b672      	cpsid	i
 80018ec:	e7fe      	b.n	80018ec <main+0x3d0>
 80018ee:	b672      	cpsid	i
 80018f0:	e7fe      	b.n	80018f0 <main+0x3d4>
 80018f2:	b672      	cpsid	i
 80018f4:	e7fe      	b.n	80018f4 <main+0x3d8>
 80018f6:	b672      	cpsid	i
 80018f8:	e7fe      	b.n	80018f8 <main+0x3dc>
 80018fa:	bf00      	nop
 80018fc:	20001588 	.word	0x20001588
 8001900:	080075cc 	.word	0x080075cc
 8001904:	08001435 	.word	0x08001435
 8001908:	20001480 	.word	0x20001480
 800190c:	0800753c 	.word	0x0800753c
 8001910:	08001115 	.word	0x08001115
 8001914:	20000778 	.word	0x20000778
 8001918:	080075a8 	.word	0x080075a8
 800191c:	08004f7d 	.word	0x08004f7d
 8001920:	200011c0 	.word	0x200011c0
 8001924:	08007560 	.word	0x08007560
 8001928:	08001a0d 	.word	0x08001a0d
 800192c:	20000a38 	.word	0x20000a38
 8001930:	08007584 	.word	0x08007584
 8001934:	080019d5 	.word	0x080019d5
 8001938:	20000f00 	.word	0x20000f00
 800193c:	080075f0 	.word	0x080075f0
 8001940:	20001638 	.word	0x20001638
 8001944:	08007610 	.word	0x08007610
 8001948:	20001680 	.word	0x20001680
 800194c:	08007600 	.word	0x08007600
 8001950:	2000165c 	.word	0x2000165c

08001954 <HAL_TIM_PeriodElapsedCallback>:
{
 8001954:	b510      	push	{r4, lr}
 8001956:	4604      	mov	r4, r0
	 if (htim->Instance == TIM2) {
 8001958:	6803      	ldr	r3, [r0, #0]
 800195a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800195e:	d004      	beq.n	800196a <HAL_TIM_PeriodElapsedCallback+0x16>
  if (htim->Instance == TIM1) {
 8001960:	6822      	ldr	r2, [r4, #0]
 8001962:	4b05      	ldr	r3, [pc, #20]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001964:	429a      	cmp	r2, r3
 8001966:	d003      	beq.n	8001970 <HAL_TIM_PeriodElapsedCallback+0x1c>
}
 8001968:	bd10      	pop	{r4, pc}
	 prvvTIMERExpiredISR();
 800196a:	f003 fb6b 	bl	8005044 <prvvTIMERExpiredISR>
 800196e:	e7f7      	b.n	8001960 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001970:	f000 fb0e 	bl	8001f90 <HAL_IncTick>
}
 8001974:	e7f8      	b.n	8001968 <HAL_TIM_PeriodElapsedCallback+0x14>
 8001976:	bf00      	nop
 8001978:	40012c00 	.word	0x40012c00

0800197c <Error_Handler>:
 800197c:	b672      	cpsid	i
  while (1)
 800197e:	e7fe      	b.n	800197e <Error_Handler+0x2>

08001980 <InitSystemEnvet>:
extern TIM_HandleTypeDef htim4;
extern TIM_HandleTypeDef htim3;

void InitSystemEnvet(EventGroupHandle_t event)
{
	 xSystemEventGroupHandle = event;
 8001980:	4b01      	ldr	r3, [pc, #4]	; (8001988 <InitSystemEnvet+0x8>)
 8001982:	6018      	str	r0, [r3, #0]
}
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	200016c0 	.word	0x200016c0

0800198c <waitFlag>:
void waitFlag( uint32_t flag)
{
 800198c:	b500      	push	{lr}
 800198e:	b083      	sub	sp, #12
 8001990:	4601      	mov	r1, r0
	xEventGroupWaitBits(xSystemEventGroupHandle,   flag ,  pdFALSE, pdTRUE, portMAX_DELAY );
 8001992:	f04f 33ff 	mov.w	r3, #4294967295
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	2301      	movs	r3, #1
 800199a:	2200      	movs	r2, #0
 800199c:	4803      	ldr	r0, [pc, #12]	; (80019ac <waitFlag+0x20>)
 800199e:	6800      	ldr	r0, [r0, #0]
 80019a0:	f003 fda3 	bl	80054ea <xEventGroupWaitBits>
}
 80019a4:	b003      	add	sp, #12
 80019a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80019aa:	bf00      	nop
 80019ac:	200016c0 	.word	0x200016c0

080019b0 <usGetRegInput>:
uint16_t usGetRegInput( REGS_t reg_addr)
{
	uint16_t usRes;
    usRes = input_regs[reg_addr];
	return  (usRes);
}
 80019b0:	4b01      	ldr	r3, [pc, #4]	; (80019b8 <usGetRegInput+0x8>)
 80019b2:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80019b6:	4770      	bx	lr
 80019b8:	20001688 	.word	0x20001688

080019bc <vSetRegInput>:
		  if (input_regs[reg_addr] != data)
		  {
			  mode_restart = 1;
		  }
	  }
      input_regs[reg_addr] = data;
 80019bc:	4b01      	ldr	r3, [pc, #4]	; (80019c4 <vSetRegInput+0x8>)
 80019be:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
}
 80019c2:	4770      	bx	lr
 80019c4:	20001688 	.word	0x20001688

080019c8 <vSetReg>:
{
			  if (reg_addr == MODE)
			  {
				  mode_restart = 1;
			  }
			  system_regs[reg_addr] = data;
 80019c8:	4b01      	ldr	r3, [pc, #4]	; (80019d0 <vSetReg+0x8>)
 80019ca:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
}
 80019ce:	4770      	bx	lr
 80019d0:	200016a4 	.word	0x200016a4

080019d4 <vMBTask>:


 void vMBTask(void *argument)
 {
 80019d4:	b510      	push	{r4, lr}
	 uint16_t addres = 0;
	 waitFlag( DIN_READY );
 80019d6:	2001      	movs	r0, #1
 80019d8:	f7ff ffd8 	bl	800198c <waitFlag>
	 addres = (uiGetDinMask() & DEVICE_ADDR_MASK)>>DEVICE_ADDR_OFFSET;
	 eMBInit(MB_RTU,addres,0,115200,MB_PAR_ODD );
	 eMBEnable(  );
#endif
#ifdef MASTER_MODE
	 eMBMasterInit(MB_RTU,0,115200,MB_PAR_ODD );
 80019dc:	2301      	movs	r3, #1
 80019de:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019e2:	2100      	movs	r1, #0
 80019e4:	4608      	mov	r0, r1
 80019e6:	f002 fba1 	bl	800412c <eMBMasterInit>
	 eMBMasterEnable();
 80019ea:	f002 fbf1 	bl	80041d0 <eMBMasterEnable>
#endif
	 xEventGroupSetBits(xSystemEventGroupHandle,  MB_READY );
 80019ee:	2104      	movs	r1, #4
 80019f0:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <vMBTask+0x34>)
 80019f2:	6818      	ldr	r0, [r3, #0]
 80019f4:	f003 fe04 	bl	8005600 <xEventGroupSetBits>
	 while (1)
	 {
		 vTaskDelay(1);
 80019f8:	2401      	movs	r4, #1
 80019fa:	4620      	mov	r0, r4
 80019fc:	f004 fd50 	bl	80064a0 <vTaskDelay>
#ifdef SLAVE_MODE
		 eMBPoll();
#endif
#ifdef MASTER_MODE
	eMBMasterPoll(  );
 8001a00:	f002 fbf8 	bl	80041f4 <eMBMasterPoll>
	 while (1)
 8001a04:	e7f9      	b.n	80019fa <vMBTask+0x26>
 8001a06:	bf00      	nop
 8001a08:	200016c0 	.word	0x200016c0

08001a0c <vDATATask>:
 }


void vDATATask(void *argument)

 {
 8001a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a10:	b084      	sub	sp, #16
   //Инициализация типа системы
#ifdef MASTER_MODE
	uint16_t master_delay = 0;
#endif
	MAIN_FSM_STATE_t InitFSM = STANDBAY_STATE;
 8001a12:	f04f 0a00 	mov.w	sl, #0
	uint16_t master_delay = 0;
 8001a16:	4654      	mov	r4, sl
      input_regs[reg_addr] = data;
 8001a18:	4d5f      	ldr	r5, [pc, #380]	; (8001b98 <vDATATask+0x18c>)
 8001a1a:	4657      	mov	r7, sl
 8001a1c:	4656      	mov	r6, sl
	     	timer++;
 8001a1e:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8001b9c <vDATATask+0x190>
	     		HAL_GPIO_TogglePin( LED_G_GPIO_Port, LED_G_Pin);
 8001a22:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8001ba0 <vDATATask+0x194>
 8001a26:	e004      	b.n	8001a32 <vDATATask+0x26>
		 vTaskDelay(10);
		 switch (InitFSM)
		 {
		 	 case STANDBAY_STATE:
		 		 //Дожидаемся пока отработают все остальные процессы
		 		 waitFlag( DIN_READY | AIN_READY | MB_READY);
 8001a28:	2007      	movs	r0, #7
 8001a2a:	f7ff ffaf 	bl	800198c <waitFlag>
 {
 8001a2e:	f04f 0a01 	mov.w	sl, #1
      input_regs[reg_addr] = data;
 8001a32:	80ee      	strh	r6, [r5, #6]
		 vTaskDelay(10);
 8001a34:	200a      	movs	r0, #10
 8001a36:	f004 fd33 	bl	80064a0 <vTaskDelay>
		 switch (InitFSM)
 8001a3a:	f1ba 0f00 	cmp.w	sl, #0
 8001a3e:	d0f3      	beq.n	8001a28 <vDATATask+0x1c>
	 if ((uiGetDinMask() & DEVICE_DOOR_MASK)>>DEVICE_DOOR_OFFSET)
 8001a40:	f7ff fb50 	bl	80010e4 <uiGetDinMask>
 8001a44:	f410 7f80 	tst.w	r0, #256	; 0x100
 8001a48:	d005      	beq.n	8001a56 <vDATATask+0x4a>
		if (usGetRegInput(DOOR_STATE_TRIGGER)  == OPEN )
 8001a4a:	89ab      	ldrh	r3, [r5, #12]
 8001a4c:	2b02      	cmp	r3, #2
      input_regs[reg_addr] = data;
 8001a4e:	bf0c      	ite	eq
 8001a50:	2303      	moveq	r3, #3
 8001a52:	2302      	movne	r3, #2
 8001a54:	81ab      	strh	r3, [r5, #12]
		 		{
		 			vSlaveControlFSM();
		 		}
#endif
#ifdef MASTER_MODE
		 		if ( ++master_delay == 7)
 8001a56:	3401      	adds	r4, #1
 8001a58:	b2a4      	uxth	r4, r4
 8001a5a:	2c07      	cmp	r4, #7
 8001a5c:	d020      	beq.n	8001aa0 <vDATATask+0x94>
	 if (usGetRegInput(ERROR_STATUS) &  AIR_TEMP_ERROR )
 8001a5e:	89eb      	ldrh	r3, [r5, #14]
 8001a60:	f013 0f02 	tst.w	r3, #2
 8001a64:	d055      	beq.n	8001b12 <vDATATask+0x106>
	 		timeout = 50;
 8001a66:	4b4f      	ldr	r3, [pc, #316]	; (8001ba4 <vDATATask+0x198>)
 8001a68:	2232      	movs	r2, #50	; 0x32
 8001a6a:	801a      	strh	r2, [r3, #0]
	     	timer++;
 8001a6c:	f8b8 3000 	ldrh.w	r3, [r8]
 8001a70:	3301      	adds	r3, #1
 8001a72:	b29b      	uxth	r3, r3
	 if ( timeout )
 8001a74:	4a4b      	ldr	r2, [pc, #300]	; (8001ba4 <vDATATask+0x198>)
	     	if ( timer >= timeout )
 8001a76:	8812      	ldrh	r2, [r2, #0]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d960      	bls.n	8001b3e <vDATATask+0x132>
	     	timer++;
 8001a7c:	f8a8 3000 	strh.w	r3, [r8]
			connection = 1;
 8001a80:	4b49      	ldr	r3, [pc, #292]	; (8001ba8 <vDATATask+0x19c>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	701a      	strb	r2, [r3, #0]
		usRes = system_regs[reg_addr];
 8001a86:	4b49      	ldr	r3, [pc, #292]	; (8001bac <vDATATask+0x1a0>)
 8001a88:	881b      	ldrh	r3, [r3, #0]
	     switch ( usGetReg(MODE)  )
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d05e      	beq.n	8001b4c <vDATATask+0x140>
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d071      	beq.n	8001b76 <vDATATask+0x16a>
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1cb      	bne.n	8001a2e <vDATATask+0x22>
	     		HAL_GPIO_WritePin( LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET );
 8001a96:	2120      	movs	r1, #32
 8001a98:	4648      	mov	r0, r9
 8001a9a:	f001 f85f 	bl	8002b5c <HAL_GPIO_WritePin>
	     		break;
 8001a9e:	e7c6      	b.n	8001a2e <vDATATask+0x22>
			connection = 1;
 8001aa0:	4b41      	ldr	r3, [pc, #260]	; (8001ba8 <vDATATask+0x19c>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	701a      	strb	r2, [r3, #0]
		usRes = system_regs[reg_addr];
 8001aa6:	4c41      	ldr	r4, [pc, #260]	; (8001bac <vDATATask+0x1a0>)
eMBMasterReqErrCode    errorCode = MB_MRE_NO_ERR;
void vMasterControlFSM()
{
	uint16_t data[4];

	data[0]=usGetReg(MODE) ;
 8001aa8:	8823      	ldrh	r3, [r4, #0]
 8001aaa:	f8ad 3008 	strh.w	r3, [sp, #8]
	data[1]=usGetReg(FAN_SPEED_CONFIG);
 8001aae:	8863      	ldrh	r3, [r4, #2]
 8001ab0:	f8ad 300a 	strh.w	r3, [sp, #10]
	data[2]=usGetReg(WORK_TEMP);
 8001ab4:	88a3      	ldrh	r3, [r4, #4]
 8001ab6:	f8ad 300c 	strh.w	r3, [sp, #12]
	data[3]=usGetReg(AIR_TEMP);
 8001aba:	88e3      	ldrh	r3, [r4, #6]
 8001abc:	f8ad 300e 	strh.w	r3, [sp, #14]

    errorCode = eMBMasterReqWriteMultipleHoldingRegister( 0, 13, 4, &data[0], 0);
 8001ac0:	9700      	str	r7, [sp, #0]
 8001ac2:	ab02      	add	r3, sp, #8
 8001ac4:	2204      	movs	r2, #4
 8001ac6:	210d      	movs	r1, #13
 8001ac8:	4638      	mov	r0, r7
 8001aca:	f002 fd99 	bl	8004600 <eMBMasterReqWriteMultipleHoldingRegister>
 8001ace:	4b38      	ldr	r3, [pc, #224]	; (8001bb0 <vDATATask+0x1a4>)
 8001ad0:	7018      	strb	r0, [r3, #0]


	if ( usGetReg( CONTROL_MODE ) )
 8001ad2:	8923      	ldrh	r3, [r4, #8]
 8001ad4:	b90b      	cbnz	r3, 8001ada <vDATATask+0xce>
		 			master_delay = 0;
 8001ad6:	463c      	mov	r4, r7
		if ( errorCode == MB_MRE_TIMEDOUT )
		{
			connection_error = 1;
		}
	}
}
 8001ad8:	e7c1      	b.n	8001a5e <vDATATask+0x52>
		mster_control_addres++;
 8001ada:	4a36      	ldr	r2, [pc, #216]	; (8001bb4 <vDATATask+0x1a8>)
 8001adc:	7813      	ldrb	r3, [r2, #0]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	7013      	strb	r3, [r2, #0]
		if ( mster_control_addres > usGetReg( DEVICE_COUNT ) )
 8001ae4:	8962      	ldrh	r2, [r4, #10]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d204      	bcs.n	8001af4 <vDATATask+0xe8>
			mster_control_addres = 1;
 8001aea:	4b32      	ldr	r3, [pc, #200]	; (8001bb4 <vDATATask+0x1a8>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	701a      	strb	r2, [r3, #0]
			connection_error = 0;
 8001af0:	4b31      	ldr	r3, [pc, #196]	; (8001bb8 <vDATATask+0x1ac>)
 8001af2:	701f      	strb	r7, [r3, #0]
		errorCode = eMBMasterReqReadHoldingRegister( mster_control_addres, 5, 5, 0 );
 8001af4:	463b      	mov	r3, r7
 8001af6:	2205      	movs	r2, #5
 8001af8:	4611      	mov	r1, r2
 8001afa:	482e      	ldr	r0, [pc, #184]	; (8001bb4 <vDATATask+0x1a8>)
 8001afc:	7800      	ldrb	r0, [r0, #0]
 8001afe:	f002 fdf0 	bl	80046e2 <eMBMasterReqReadHoldingRegister>
 8001b02:	4b2b      	ldr	r3, [pc, #172]	; (8001bb0 <vDATATask+0x1a4>)
 8001b04:	7018      	strb	r0, [r3, #0]
		if ( errorCode == MB_MRE_TIMEDOUT )
 8001b06:	2804      	cmp	r0, #4
 8001b08:	d1e5      	bne.n	8001ad6 <vDATATask+0xca>
			connection_error = 1;
 8001b0a:	4b2b      	ldr	r3, [pc, #172]	; (8001bb8 <vDATATask+0x1ac>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	701a      	strb	r2, [r3, #0]
 8001b10:	e7e1      	b.n	8001ad6 <vDATATask+0xca>
	    if ( connection_error )
 8001b12:	4b29      	ldr	r3, [pc, #164]	; (8001bb8 <vDATATask+0x1ac>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	b11b      	cbz	r3, 8001b20 <vDATATask+0x114>
	    	timeout = 25;
 8001b18:	4b22      	ldr	r3, [pc, #136]	; (8001ba4 <vDATATask+0x198>)
 8001b1a:	2219      	movs	r2, #25
 8001b1c:	801a      	strh	r2, [r3, #0]
 8001b1e:	e7a5      	b.n	8001a6c <vDATATask+0x60>
	     		timeout = 0;
 8001b20:	4b20      	ldr	r3, [pc, #128]	; (8001ba4 <vDATATask+0x198>)
 8001b22:	801f      	strh	r7, [r3, #0]
			connection = 1;
 8001b24:	4b20      	ldr	r3, [pc, #128]	; (8001ba8 <vDATATask+0x19c>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	701a      	strb	r2, [r3, #0]
		usRes = system_regs[reg_addr];
 8001b2a:	4b20      	ldr	r3, [pc, #128]	; (8001bac <vDATATask+0x1a0>)
	    	 HAL_GPIO_WritePin( LED_G_GPIO_Port, LED_G_Pin, (usGetReg(MODE) != OFF_MODE) ? GPIO_PIN_RESET: GPIO_PIN_SET);
 8001b2c:	881a      	ldrh	r2, [r3, #0]
 8001b2e:	fab2 f282 	clz	r2, r2
 8001b32:	0952      	lsrs	r2, r2, #5
 8001b34:	2110      	movs	r1, #16
 8001b36:	4648      	mov	r0, r9
 8001b38:	f001 f810 	bl	8002b5c <HAL_GPIO_WritePin>
 8001b3c:	e7a0      	b.n	8001a80 <vDATATask+0x74>
	     		timer = 0U;
 8001b3e:	f8a8 7000 	strh.w	r7, [r8]
	     		HAL_GPIO_TogglePin( LED_G_GPIO_Port, LED_G_Pin);
 8001b42:	2110      	movs	r1, #16
 8001b44:	4648      	mov	r0, r9
 8001b46:	f001 f80f 	bl	8002b68 <HAL_GPIO_TogglePin>
 8001b4a:	e799      	b.n	8001a80 <vDATATask+0x74>
	     		if (usGetRegInput(TYPE) == HWC)
 8001b4c:	882b      	ldrh	r3, [r5, #0]
 8001b4e:	2b03      	cmp	r3, #3
 8001b50:	d00b      	beq.n	8001b6a <vDATATask+0x15e>
		usRes = system_regs[reg_addr];
 8001b52:	4b16      	ldr	r3, [pc, #88]	; (8001bac <vDATATask+0x1a0>)
	     			if (usGetReg(WORK_TEMP) < usGetReg(AIR_TEMP))
 8001b54:	88da      	ldrh	r2, [r3, #6]
 8001b56:	889b      	ldrh	r3, [r3, #4]
 8001b58:	429a      	cmp	r2, r3
	     				HAL_GPIO_WritePin( LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET );
 8001b5a:	bf8c      	ite	hi
 8001b5c:	463a      	movhi	r2, r7
	     				HAL_GPIO_WritePin( LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET );
 8001b5e:	2201      	movls	r2, #1
 8001b60:	2120      	movs	r1, #32
 8001b62:	4648      	mov	r0, r9
 8001b64:	f000 fffa 	bl	8002b5c <HAL_GPIO_WritePin>
 8001b68:	e761      	b.n	8001a2e <vDATATask+0x22>
	     			HAL_GPIO_WritePin( LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET );
 8001b6a:	463a      	mov	r2, r7
 8001b6c:	2120      	movs	r1, #32
 8001b6e:	4648      	mov	r0, r9
 8001b70:	f000 fff4 	bl	8002b5c <HAL_GPIO_WritePin>
 8001b74:	e75b      	b.n	8001a2e <vDATATask+0x22>
	     		timerR++;
 8001b76:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <vDATATask+0x1b0>)
 8001b78:	881b      	ldrh	r3, [r3, #0]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	b29b      	uxth	r3, r3
	     		if (timerR>=50)
 8001b7e:	2b31      	cmp	r3, #49	; 0x31
 8001b80:	d802      	bhi.n	8001b88 <vDATATask+0x17c>
	     		timerR++;
 8001b82:	4a0e      	ldr	r2, [pc, #56]	; (8001bbc <vDATATask+0x1b0>)
 8001b84:	8013      	strh	r3, [r2, #0]
 8001b86:	e752      	b.n	8001a2e <vDATATask+0x22>
	     		    timerR =0;
 8001b88:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <vDATATask+0x1b0>)
 8001b8a:	801f      	strh	r7, [r3, #0]
	     		    HAL_GPIO_TogglePin( LED_R_GPIO_Port, LED_R_Pin);
 8001b8c:	2120      	movs	r1, #32
 8001b8e:	4648      	mov	r0, r9
 8001b90:	f000 ffea 	bl	8002b68 <HAL_GPIO_TogglePin>
 8001b94:	e74b      	b.n	8001a2e <vDATATask+0x22>
 8001b96:	bf00      	nop
 8001b98:	20001688 	.word	0x20001688
 8001b9c:	200016ba 	.word	0x200016ba
 8001ba0:	40010800 	.word	0x40010800
 8001ba4:	200016b8 	.word	0x200016b8
 8001ba8:	20001684 	.word	0x20001684
 8001bac:	200016a4 	.word	0x200016a4
 8001bb0:	20001686 	.word	0x20001686
 8001bb4:	2000169c 	.word	0x2000169c
 8001bb8:	20001685 	.word	0x20001685
 8001bbc:	200016bc 	.word	0x200016bc

08001bc0 <vTimer1sInc>:
	sTimer++;
 8001bc0:	4a02      	ldr	r2, [pc, #8]	; (8001bcc <vTimer1sInc+0xc>)
 8001bc2:	6813      	ldr	r3, [r2, #0]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	6013      	str	r3, [r2, #0]
}
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	200016a0 	.word	0x200016a0

08001bd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bd0:	b500      	push	{lr}
 8001bd2:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bd4:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <HAL_MspInit+0x4c>)
 8001bd6:	699a      	ldr	r2, [r3, #24]
 8001bd8:	f042 0201 	orr.w	r2, r2, #1
 8001bdc:	619a      	str	r2, [r3, #24]
 8001bde:	699a      	ldr	r2, [r3, #24]
 8001be0:	f002 0201 	and.w	r2, r2, #1
 8001be4:	9200      	str	r2, [sp, #0]
 8001be6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001be8:	69da      	ldr	r2, [r3, #28]
 8001bea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001bee:	61da      	str	r2, [r3, #28]
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf6:	9301      	str	r3, [sp, #4]
 8001bf8:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	210f      	movs	r1, #15
 8001bfe:	f06f 0001 	mvn.w	r0, #1
 8001c02:	f000 fc93 	bl	800252c <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c06:	4a06      	ldr	r2, [pc, #24]	; (8001c20 <HAL_MspInit+0x50>)
 8001c08:	6853      	ldr	r3, [r2, #4]
 8001c0a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c12:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c14:	b003      	add	sp, #12
 8001c16:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c1a:	bf00      	nop
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	40010000 	.word	0x40010000

08001c24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c24:	b510      	push	{r4, lr}
 8001c26:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	2300      	movs	r3, #0
 8001c2a:	9302      	str	r3, [sp, #8]
 8001c2c:	9303      	str	r3, [sp, #12]
 8001c2e:	9304      	str	r3, [sp, #16]
 8001c30:	9305      	str	r3, [sp, #20]
  if(hadc->Instance==ADC1)
 8001c32:	6802      	ldr	r2, [r0, #0]
 8001c34:	4b1d      	ldr	r3, [pc, #116]	; (8001cac <HAL_ADC_MspInit+0x88>)
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d001      	beq.n	8001c3e <HAL_ADC_MspInit+0x1a>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c3a:	b006      	add	sp, #24
 8001c3c:	bd10      	pop	{r4, pc}
 8001c3e:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c40:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8001c44:	699a      	ldr	r2, [r3, #24]
 8001c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c4a:	619a      	str	r2, [r3, #24]
 8001c4c:	699a      	ldr	r2, [r3, #24]
 8001c4e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001c52:	9200      	str	r2, [sp, #0]
 8001c54:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c56:	699a      	ldr	r2, [r3, #24]
 8001c58:	f042 0204 	orr.w	r2, r2, #4
 8001c5c:	619a      	str	r2, [r3, #24]
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	9301      	str	r3, [sp, #4]
 8001c66:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001c68:	2307      	movs	r3, #7
 8001c6a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c70:	a902      	add	r1, sp, #8
 8001c72:	480f      	ldr	r0, [pc, #60]	; (8001cb0 <HAL_ADC_MspInit+0x8c>)
 8001c74:	f000 fe32 	bl	80028dc <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8001c78:	480e      	ldr	r0, [pc, #56]	; (8001cb4 <HAL_ADC_MspInit+0x90>)
 8001c7a:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <HAL_ADC_MspInit+0x94>)
 8001c7c:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c82:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c84:	2280      	movs	r2, #128	; 0x80
 8001c86:	60c2      	str	r2, [r0, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c8c:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c92:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001c94:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001c96:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c98:	f000 fc8c 	bl	80025b4 <HAL_DMA_Init>
 8001c9c:	b918      	cbnz	r0, 8001ca6 <HAL_ADC_MspInit+0x82>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c9e:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <HAL_ADC_MspInit+0x90>)
 8001ca0:	6223      	str	r3, [r4, #32]
 8001ca2:	625c      	str	r4, [r3, #36]	; 0x24
}
 8001ca4:	e7c9      	b.n	8001c3a <HAL_ADC_MspInit+0x16>
      Error_Handler();
 8001ca6:	f7ff fe69 	bl	800197c <Error_Handler>
 8001caa:	e7f8      	b.n	8001c9e <HAL_ADC_MspInit+0x7a>
 8001cac:	40012400 	.word	0x40012400
 8001cb0:	40010800 	.word	0x40010800
 8001cb4:	200014b4 	.word	0x200014b4
 8001cb8:	40020008 	.word	0x40020008

08001cbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cbc:	b500      	push	{lr}
 8001cbe:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM2)
 8001cc0:	6803      	ldr	r3, [r0, #0]
 8001cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cc6:	d008      	beq.n	8001cda <HAL_TIM_Base_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8001cc8:	4a1d      	ldr	r2, [pc, #116]	; (8001d40 <HAL_TIM_Base_MspInit+0x84>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d019      	beq.n	8001d02 <HAL_TIM_Base_MspInit+0x46>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8001cce:	4a1d      	ldr	r2, [pc, #116]	; (8001d44 <HAL_TIM_Base_MspInit+0x88>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d021      	beq.n	8001d18 <HAL_TIM_Base_MspInit+0x5c>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001cd4:	b005      	add	sp, #20
 8001cd6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cda:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001cde:	69da      	ldr	r2, [r3, #28]
 8001ce0:	f042 0201 	orr.w	r2, r2, #1
 8001ce4:	61da      	str	r2, [r3, #28]
 8001ce6:	69db      	ldr	r3, [r3, #28]
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	9301      	str	r3, [sp, #4]
 8001cee:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	2105      	movs	r1, #5
 8001cf4:	201c      	movs	r0, #28
 8001cf6:	f000 fc19 	bl	800252c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001cfa:	201c      	movs	r0, #28
 8001cfc:	f000 fc4c 	bl	8002598 <HAL_NVIC_EnableIRQ>
 8001d00:	e7e8      	b.n	8001cd4 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d02:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <HAL_TIM_Base_MspInit+0x8c>)
 8001d04:	69da      	ldr	r2, [r3, #28]
 8001d06:	f042 0202 	orr.w	r2, r2, #2
 8001d0a:	61da      	str	r2, [r3, #28]
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	9302      	str	r3, [sp, #8]
 8001d14:	9b02      	ldr	r3, [sp, #8]
 8001d16:	e7dd      	b.n	8001cd4 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d18:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <HAL_TIM_Base_MspInit+0x8c>)
 8001d1a:	69da      	ldr	r2, [r3, #28]
 8001d1c:	f042 0204 	orr.w	r2, r2, #4
 8001d20:	61da      	str	r2, [r3, #28]
 8001d22:	69db      	ldr	r3, [r3, #28]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	9303      	str	r3, [sp, #12]
 8001d2a:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2105      	movs	r1, #5
 8001d30:	201e      	movs	r0, #30
 8001d32:	f000 fbfb 	bl	800252c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d36:	201e      	movs	r0, #30
 8001d38:	f000 fc2e 	bl	8002598 <HAL_NVIC_EnableIRQ>
}
 8001d3c:	e7ca      	b.n	8001cd4 <HAL_TIM_Base_MspInit+0x18>
 8001d3e:	bf00      	nop
 8001d40:	40000400 	.word	0x40000400
 8001d44:	40000800 	.word	0x40000800
 8001d48:	40021000 	.word	0x40021000

08001d4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d4c:	b500      	push	{lr}
 8001d4e:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d50:	2300      	movs	r3, #0
 8001d52:	9302      	str	r3, [sp, #8]
 8001d54:	9303      	str	r3, [sp, #12]
 8001d56:	9304      	str	r3, [sp, #16]
 8001d58:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM3)
 8001d5a:	6802      	ldr	r2, [r0, #0]
 8001d5c:	4b0d      	ldr	r3, [pc, #52]	; (8001d94 <HAL_TIM_MspPostInit+0x48>)
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d002      	beq.n	8001d68 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d62:	b007      	add	sp, #28
 8001d64:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d68:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8001d6c:	699a      	ldr	r2, [r3, #24]
 8001d6e:	f042 0204 	orr.w	r2, r2, #4
 8001d72:	619a      	str	r2, [r3, #24]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	f003 0304 	and.w	r3, r3, #4
 8001d7a:	9301      	str	r3, [sp, #4]
 8001d7c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d7e:	23c0      	movs	r3, #192	; 0xc0
 8001d80:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d82:	2302      	movs	r3, #2
 8001d84:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d86:	2303      	movs	r3, #3
 8001d88:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8a:	a902      	add	r1, sp, #8
 8001d8c:	4802      	ldr	r0, [pc, #8]	; (8001d98 <HAL_TIM_MspPostInit+0x4c>)
 8001d8e:	f000 fda5 	bl	80028dc <HAL_GPIO_Init>
}
 8001d92:	e7e6      	b.n	8001d62 <HAL_TIM_MspPostInit+0x16>
 8001d94:	40000400 	.word	0x40000400
 8001d98:	40010800 	.word	0x40010800

08001d9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d9c:	b530      	push	{r4, r5, lr}
 8001d9e:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	2300      	movs	r3, #0
 8001da2:	9302      	str	r3, [sp, #8]
 8001da4:	9303      	str	r3, [sp, #12]
 8001da6:	9304      	str	r3, [sp, #16]
 8001da8:	9305      	str	r3, [sp, #20]
  if(huart->Instance==USART1)
 8001daa:	6802      	ldr	r2, [r0, #0]
 8001dac:	4b1b      	ldr	r3, [pc, #108]	; (8001e1c <HAL_UART_MspInit+0x80>)
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d001      	beq.n	8001db6 <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001db2:	b007      	add	sp, #28
 8001db4:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8001db6:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001dba:	699a      	ldr	r2, [r3, #24]
 8001dbc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001dc0:	619a      	str	r2, [r3, #24]
 8001dc2:	699a      	ldr	r2, [r3, #24]
 8001dc4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001dc8:	9200      	str	r2, [sp, #0]
 8001dca:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dcc:	699a      	ldr	r2, [r3, #24]
 8001dce:	f042 0204 	orr.w	r2, r2, #4
 8001dd2:	619a      	str	r2, [r3, #24]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	9301      	str	r3, [sp, #4]
 8001ddc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001dde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001de2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de4:	2302      	movs	r3, #2
 8001de6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001de8:	2303      	movs	r3, #3
 8001dea:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dec:	4d0c      	ldr	r5, [pc, #48]	; (8001e20 <HAL_UART_MspInit+0x84>)
 8001dee:	a902      	add	r1, sp, #8
 8001df0:	4628      	mov	r0, r5
 8001df2:	f000 fd73 	bl	80028dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001df6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dfa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dfc:	2400      	movs	r4, #0
 8001dfe:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e02:	a902      	add	r1, sp, #8
 8001e04:	4628      	mov	r0, r5
 8001e06:	f000 fd69 	bl	80028dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001e0a:	4622      	mov	r2, r4
 8001e0c:	2105      	movs	r1, #5
 8001e0e:	2025      	movs	r0, #37	; 0x25
 8001e10:	f000 fb8c 	bl	800252c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e14:	2025      	movs	r0, #37	; 0x25
 8001e16:	f000 fbbf 	bl	8002598 <HAL_NVIC_EnableIRQ>
}
 8001e1a:	e7ca      	b.n	8001db2 <HAL_UART_MspInit+0x16>
 8001e1c:	40013800 	.word	0x40013800
 8001e20:	40010800 	.word	0x40010800

08001e24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e24:	b530      	push	{r4, r5, lr}
 8001e26:	b089      	sub	sp, #36	; 0x24
 8001e28:	4604      	mov	r4, r0
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001e2a:	4b1e      	ldr	r3, [pc, #120]	; (8001ea4 <HAL_InitTick+0x80>)
 8001e2c:	699a      	ldr	r2, [r3, #24]
 8001e2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e32:	619a      	str	r2, [r3, #24]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e3a:	9301      	str	r3, [sp, #4]
 8001e3c:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e3e:	a902      	add	r1, sp, #8
 8001e40:	a803      	add	r0, sp, #12
 8001e42:	f001 f9b3 	bl	80031ac <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001e46:	f001 f9a1 	bl	800318c <HAL_RCC_GetPCLK2Freq>
 8001e4a:	4603      	mov	r3, r0

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001e4c:	4816      	ldr	r0, [pc, #88]	; (8001ea8 <HAL_InitTick+0x84>)
 8001e4e:	4a17      	ldr	r2, [pc, #92]	; (8001eac <HAL_InitTick+0x88>)
 8001e50:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001e52:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e56:	60c2      	str	r2, [r0, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e58:	4a15      	ldr	r2, [pc, #84]	; (8001eb0 <HAL_InitTick+0x8c>)
 8001e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5e:	0c9b      	lsrs	r3, r3, #18
 8001e60:	3b01      	subs	r3, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8001e62:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	6103      	str	r3, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e68:	6083      	str	r3, [r0, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e6a:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001e6c:	f001 fc22 	bl	80036b4 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8001e70:	4605      	mov	r5, r0
 8001e72:	b110      	cbz	r0, 8001e7a <HAL_InitTick+0x56>
    }
  }

 /* Return function status */
  return status;
}
 8001e74:	4628      	mov	r0, r5
 8001e76:	b009      	add	sp, #36	; 0x24
 8001e78:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001e7a:	480b      	ldr	r0, [pc, #44]	; (8001ea8 <HAL_InitTick+0x84>)
 8001e7c:	f001 fabc 	bl	80033f8 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8001e80:	4605      	mov	r5, r0
 8001e82:	2800      	cmp	r0, #0
 8001e84:	d1f6      	bne.n	8001e74 <HAL_InitTick+0x50>
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001e86:	2019      	movs	r0, #25
 8001e88:	f000 fb86 	bl	8002598 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e8c:	2c0f      	cmp	r4, #15
 8001e8e:	d901      	bls.n	8001e94 <HAL_InitTick+0x70>
        status = HAL_ERROR;
 8001e90:	2501      	movs	r5, #1
 8001e92:	e7ef      	b.n	8001e74 <HAL_InitTick+0x50>
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001e94:	2200      	movs	r2, #0
 8001e96:	4621      	mov	r1, r4
 8001e98:	2019      	movs	r0, #25
 8001e9a:	f000 fb47 	bl	800252c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e9e:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <HAL_InitTick+0x90>)
 8001ea0:	601c      	str	r4, [r3, #0]
 8001ea2:	e7e7      	b.n	8001e74 <HAL_InitTick+0x50>
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	200016c4 	.word	0x200016c4
 8001eac:	40012c00 	.word	0x40012c00
 8001eb0:	431bde83 	.word	0x431bde83
 8001eb4:	20000008 	.word	0x20000008

08001eb8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001eb8:	e7fe      	b.n	8001eb8 <NMI_Handler>

08001eba <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eba:	e7fe      	b.n	8001eba <HardFault_Handler>

08001ebc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ebc:	e7fe      	b.n	8001ebc <MemManage_Handler>

08001ebe <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ebe:	e7fe      	b.n	8001ebe <BusFault_Handler>

08001ec0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ec0:	e7fe      	b.n	8001ec0 <UsageFault_Handler>

08001ec2 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ec2:	4770      	bx	lr

08001ec4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ec4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	vADCReady();
 8001ec6:	f7ff f86f 	bl	8000fa8 <vADCReady>
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001eca:	4802      	ldr	r0, [pc, #8]	; (8001ed4 <DMA1_Channel1_IRQHandler+0x10>)
 8001ecc:	f000 fc66 	bl	800279c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001ed0:	bd08      	pop	{r3, pc}
 8001ed2:	bf00      	nop
 8001ed4:	200014b4 	.word	0x200014b4

08001ed8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001ed8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001eda:	4802      	ldr	r0, [pc, #8]	; (8001ee4 <TIM1_UP_IRQHandler+0xc>)
 8001edc:	f001 fade 	bl	800349c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001ee0:	bd08      	pop	{r3, pc}
 8001ee2:	bf00      	nop
 8001ee4:	200016c4 	.word	0x200016c4

08001ee8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ee8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001eea:	4802      	ldr	r0, [pc, #8]	; (8001ef4 <TIM2_IRQHandler+0xc>)
 8001eec:	f001 fad6 	bl	800349c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ef0:	bd08      	pop	{r3, pc}
 8001ef2:	bf00      	nop
 8001ef4:	200014f8 	.word	0x200014f8

08001ef8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001ef8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */
  vTimer1sInc();
 8001efa:	f7ff fe61 	bl	8001bc0 <vTimer1sInc>
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001efe:	4802      	ldr	r0, [pc, #8]	; (8001f08 <TIM4_IRQHandler+0x10>)
 8001f00:	f001 facc 	bl	800349c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001f04:	bd08      	pop	{r3, pc}
 8001f06:	bf00      	nop
 8001f08:	20001588 	.word	0x20001588

08001f0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f0c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f0e:	4802      	ldr	r0, [pc, #8]	; (8001f18 <USART1_IRQHandler+0xc>)
 8001f10:	f001 ff60 	bl	8003dd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f14:	bd08      	pop	{r3, pc}
 8001f16:	bf00      	nop
 8001f18:	200015d0 	.word	0x200015d0

08001f1c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f1c:	4770      	bx	lr
	...

08001f20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f20:	f7ff fffc 	bl	8001f1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f24:	480b      	ldr	r0, [pc, #44]	; (8001f54 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f26:	490c      	ldr	r1, [pc, #48]	; (8001f58 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f28:	4a0c      	ldr	r2, [pc, #48]	; (8001f5c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f2c:	e002      	b.n	8001f34 <LoopCopyDataInit>

08001f2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f32:	3304      	adds	r3, #4

08001f34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f38:	d3f9      	bcc.n	8001f2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f3a:	4a09      	ldr	r2, [pc, #36]	; (8001f60 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f3c:	4c09      	ldr	r4, [pc, #36]	; (8001f64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f40:	e001      	b.n	8001f46 <LoopFillZerobss>

08001f42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f44:	3204      	adds	r2, #4

08001f46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f48:	d3fb      	bcc.n	8001f42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f4a:	f005 f951 	bl	80071f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f4e:	f7ff fae5 	bl	800151c <main>
  bx lr
 8001f52:	4770      	bx	lr
  ldr r0, =_sdata
 8001f54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f58:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001f5c:	0800794c 	.word	0x0800794c
  ldr r2, =_sbss
 8001f60:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001f64:	20003d54 	.word	0x20003d54

08001f68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f68:	e7fe      	b.n	8001f68 <ADC1_2_IRQHandler>
	...

08001f6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f6c:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f6e:	4a07      	ldr	r2, [pc, #28]	; (8001f8c <HAL_Init+0x20>)
 8001f70:	6813      	ldr	r3, [r2, #0]
 8001f72:	f043 0310 	orr.w	r3, r3, #16
 8001f76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f78:	2003      	movs	r0, #3
 8001f7a:	f000 fac5 	bl	8002508 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f7e:	200f      	movs	r0, #15
 8001f80:	f7ff ff50 	bl	8001e24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f84:	f7ff fe24 	bl	8001bd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001f88:	2000      	movs	r0, #0
 8001f8a:	bd08      	pop	{r3, pc}
 8001f8c:	40022000 	.word	0x40022000

08001f90 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001f90:	4a03      	ldr	r2, [pc, #12]	; (8001fa0 <HAL_IncTick+0x10>)
 8001f92:	6811      	ldr	r1, [r2, #0]
 8001f94:	4b03      	ldr	r3, [pc, #12]	; (8001fa4 <HAL_IncTick+0x14>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	440b      	add	r3, r1
 8001f9a:	6013      	str	r3, [r2, #0]
}
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	2000170c 	.word	0x2000170c
 8001fa4:	20000004 	.word	0x20000004

08001fa8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001fa8:	4b01      	ldr	r3, [pc, #4]	; (8001fb0 <HAL_GetTick+0x8>)
 8001faa:	6818      	ldr	r0, [r3, #0]
}
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	2000170c 	.word	0x2000170c

08001fb4 <HAL_ADC_ConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001fb4:	4770      	bx	lr

08001fb6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001fb6:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fb8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001fba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fbc:	f012 0f50 	tst.w	r2, #80	; 0x50
 8001fc0:	d11e      	bne.n	8002000 <ADC_DMAConvCplt+0x4a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fc8:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	6892      	ldr	r2, [r2, #8]
 8001fce:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001fd2:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001fd6:	d003      	beq.n	8001fe0 <ADC_DMAConvCplt+0x2a>
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff ffeb 	bl	8001fb4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001fde:	bd08      	pop	{r3, pc}
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001fe0:	7b1a      	ldrb	r2, [r3, #12]
 8001fe2:	2a00      	cmp	r2, #0
 8001fe4:	d1f8      	bne.n	8001fd8 <ADC_DMAConvCplt+0x22>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001fe6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fe8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fec:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ff0:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8001ff4:	d1f0      	bne.n	8001fd8 <ADC_DMAConvCplt+0x22>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ff6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ff8:	f042 0201 	orr.w	r2, r2, #1
 8001ffc:	629a      	str	r2, [r3, #40]	; 0x28
 8001ffe:	e7eb      	b.n	8001fd8 <ADC_DMAConvCplt+0x22>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002004:	4798      	blx	r3
}
 8002006:	e7ea      	b.n	8001fde <ADC_DMAConvCplt+0x28>

08002008 <HAL_ADC_ConvHalfCpltCallback>:
}
 8002008:	4770      	bx	lr

0800200a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800200a:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800200c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800200e:	f7ff fffb 	bl	8002008 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002012:	bd08      	pop	{r3, pc}

08002014 <HAL_ADC_ErrorCallback>:
}
 8002014:	4770      	bx	lr

08002016 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002016:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002018:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800201a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800201c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002020:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002022:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002024:	f043 0304 	orr.w	r3, r3, #4
 8002028:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800202a:	f7ff fff3 	bl	8002014 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800202e:	bd08      	pop	{r3, pc}

08002030 <HAL_ADC_ConfigChannel>:
{ 
 8002030:	b430      	push	{r4, r5}
 8002032:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8002034:	2200      	movs	r2, #0
 8002036:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8002038:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 800203c:	2a01      	cmp	r2, #1
 800203e:	f000 8095 	beq.w	800216c <HAL_ADC_ConfigChannel+0x13c>
 8002042:	4603      	mov	r3, r0
 8002044:	2201      	movs	r2, #1
 8002046:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800204a:	684a      	ldr	r2, [r1, #4]
 800204c:	2a06      	cmp	r2, #6
 800204e:	d82d      	bhi.n	80020ac <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002050:	6804      	ldr	r4, [r0, #0]
 8002052:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002054:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002058:	3a05      	subs	r2, #5
 800205a:	f04f 0c1f 	mov.w	ip, #31
 800205e:	fa0c fc02 	lsl.w	ip, ip, r2
 8002062:	ea20 000c 	bic.w	r0, r0, ip
 8002066:	680d      	ldr	r5, [r1, #0]
 8002068:	fa05 f202 	lsl.w	r2, r5, r2
 800206c:	4302      	orrs	r2, r0
 800206e:	6362      	str	r2, [r4, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002070:	680a      	ldr	r2, [r1, #0]
 8002072:	2a09      	cmp	r2, #9
 8002074:	d93a      	bls.n	80020ec <HAL_ADC_ConfigChannel+0xbc>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002076:	681c      	ldr	r4, [r3, #0]
 8002078:	68e0      	ldr	r0, [r4, #12]
 800207a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800207e:	3a1e      	subs	r2, #30
 8002080:	f04f 0c07 	mov.w	ip, #7
 8002084:	fa0c fc02 	lsl.w	ip, ip, r2
 8002088:	ea20 000c 	bic.w	r0, r0, ip
 800208c:	688d      	ldr	r5, [r1, #8]
 800208e:	fa05 f202 	lsl.w	r2, r5, r2
 8002092:	4302      	orrs	r2, r0
 8002094:	60e2      	str	r2, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002096:	680a      	ldr	r2, [r1, #0]
 8002098:	3a10      	subs	r2, #16
 800209a:	2a01      	cmp	r2, #1
 800209c:	d936      	bls.n	800210c <HAL_ADC_ConfigChannel+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800209e:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 80020a6:	b002      	add	sp, #8
 80020a8:	bc30      	pop	{r4, r5}
 80020aa:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 80020ac:	2a0c      	cmp	r2, #12
 80020ae:	d80e      	bhi.n	80020ce <HAL_ADC_ConfigChannel+0x9e>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80020b0:	6805      	ldr	r5, [r0, #0]
 80020b2:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80020b4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80020b8:	3a23      	subs	r2, #35	; 0x23
 80020ba:	241f      	movs	r4, #31
 80020bc:	4094      	lsls	r4, r2
 80020be:	ea20 0004 	bic.w	r0, r0, r4
 80020c2:	680c      	ldr	r4, [r1, #0]
 80020c4:	fa04 f202 	lsl.w	r2, r4, r2
 80020c8:	4302      	orrs	r2, r0
 80020ca:	632a      	str	r2, [r5, #48]	; 0x30
 80020cc:	e7d0      	b.n	8002070 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80020ce:	6805      	ldr	r5, [r0, #0]
 80020d0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80020d2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80020d6:	3a41      	subs	r2, #65	; 0x41
 80020d8:	241f      	movs	r4, #31
 80020da:	4094      	lsls	r4, r2
 80020dc:	ea20 0004 	bic.w	r0, r0, r4
 80020e0:	680c      	ldr	r4, [r1, #0]
 80020e2:	fa04 f202 	lsl.w	r2, r4, r2
 80020e6:	4302      	orrs	r2, r0
 80020e8:	62ea      	str	r2, [r5, #44]	; 0x2c
 80020ea:	e7c1      	b.n	8002070 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80020ec:	681c      	ldr	r4, [r3, #0]
 80020ee:	6920      	ldr	r0, [r4, #16]
 80020f0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80020f4:	f04f 0c07 	mov.w	ip, #7
 80020f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80020fc:	ea20 000c 	bic.w	r0, r0, ip
 8002100:	688d      	ldr	r5, [r1, #8]
 8002102:	fa05 f202 	lsl.w	r2, r5, r2
 8002106:	4302      	orrs	r2, r0
 8002108:	6122      	str	r2, [r4, #16]
 800210a:	e7c4      	b.n	8002096 <HAL_ADC_ConfigChannel+0x66>
    if (hadc->Instance == ADC1)
 800210c:	6818      	ldr	r0, [r3, #0]
 800210e:	4a18      	ldr	r2, [pc, #96]	; (8002170 <HAL_ADC_ConfigChannel+0x140>)
 8002110:	4290      	cmp	r0, r2
 8002112:	d005      	beq.n	8002120 <HAL_ADC_ConfigChannel+0xf0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002114:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002116:	f042 0220 	orr.w	r2, r2, #32
 800211a:	629a      	str	r2, [r3, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 800211c:	2001      	movs	r0, #1
 800211e:	e7bf      	b.n	80020a0 <HAL_ADC_ConfigChannel+0x70>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002120:	6892      	ldr	r2, [r2, #8]
 8002122:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
 8002126:	d11d      	bne.n	8002164 <HAL_ADC_ConfigChannel+0x134>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002128:	4811      	ldr	r0, [pc, #68]	; (8002170 <HAL_ADC_ConfigChannel+0x140>)
 800212a:	6882      	ldr	r2, [r0, #8]
 800212c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002130:	6082      	str	r2, [r0, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002132:	680a      	ldr	r2, [r1, #0]
 8002134:	2a10      	cmp	r2, #16
 8002136:	d001      	beq.n	800213c <HAL_ADC_ConfigChannel+0x10c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002138:	2000      	movs	r0, #0
 800213a:	e7b1      	b.n	80020a0 <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800213c:	4a0d      	ldr	r2, [pc, #52]	; (8002174 <HAL_ADC_ConfigChannel+0x144>)
 800213e:	6812      	ldr	r2, [r2, #0]
 8002140:	490d      	ldr	r1, [pc, #52]	; (8002178 <HAL_ADC_ConfigChannel+0x148>)
 8002142:	fba1 1202 	umull	r1, r2, r1, r2
 8002146:	0c92      	lsrs	r2, r2, #18
 8002148:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800214c:	0052      	lsls	r2, r2, #1
 800214e:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8002150:	9a01      	ldr	r2, [sp, #4]
 8002152:	b14a      	cbz	r2, 8002168 <HAL_ADC_ConfigChannel+0x138>
            wait_loop_index--;
 8002154:	9a01      	ldr	r2, [sp, #4]
 8002156:	3a01      	subs	r2, #1
 8002158:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 800215a:	9a01      	ldr	r2, [sp, #4]
 800215c:	2a00      	cmp	r2, #0
 800215e:	d1f9      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x124>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002160:	2000      	movs	r0, #0
 8002162:	e79d      	b.n	80020a0 <HAL_ADC_ConfigChannel+0x70>
 8002164:	2000      	movs	r0, #0
 8002166:	e79b      	b.n	80020a0 <HAL_ADC_ConfigChannel+0x70>
 8002168:	2000      	movs	r0, #0
 800216a:	e799      	b.n	80020a0 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 800216c:	2002      	movs	r0, #2
 800216e:	e79a      	b.n	80020a6 <HAL_ADC_ConfigChannel+0x76>
 8002170:	40012400 	.word	0x40012400
 8002174:	20000000 	.word	0x20000000
 8002178:	431bde83 	.word	0x431bde83

0800217c <ADC_Enable>:
{
 800217c:	b530      	push	{r4, r5, lr}
 800217e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8002180:	2300      	movs	r3, #0
 8002182:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002184:	6803      	ldr	r3, [r0, #0]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	f012 0f01 	tst.w	r2, #1
 800218c:	d13b      	bne.n	8002206 <ADC_Enable+0x8a>
 800218e:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 8002190:	689a      	ldr	r2, [r3, #8]
 8002192:	f042 0201 	orr.w	r2, r2, #1
 8002196:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002198:	4b1c      	ldr	r3, [pc, #112]	; (800220c <ADC_Enable+0x90>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a1c      	ldr	r2, [pc, #112]	; (8002210 <ADC_Enable+0x94>)
 800219e:	fba2 2303 	umull	r2, r3, r2, r3
 80021a2:	0c9b      	lsrs	r3, r3, #18
 80021a4:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80021a6:	9b01      	ldr	r3, [sp, #4]
 80021a8:	b12b      	cbz	r3, 80021b6 <ADC_Enable+0x3a>
      wait_loop_index--;
 80021aa:	9b01      	ldr	r3, [sp, #4]
 80021ac:	3b01      	subs	r3, #1
 80021ae:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80021b0:	9b01      	ldr	r3, [sp, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f9      	bne.n	80021aa <ADC_Enable+0x2e>
    tickstart = HAL_GetTick();
 80021b6:	f7ff fef7 	bl	8001fa8 <HAL_GetTick>
 80021ba:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80021bc:	6823      	ldr	r3, [r4, #0]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f013 0f01 	tst.w	r3, #1
 80021c4:	d006      	beq.n	80021d4 <ADC_Enable+0x58>
  return HAL_OK;
 80021c6:	2000      	movs	r0, #0
 80021c8:	e01e      	b.n	8002208 <ADC_Enable+0x8c>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80021ca:	6823      	ldr	r3, [r4, #0]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f013 0f01 	tst.w	r3, #1
 80021d2:	d116      	bne.n	8002202 <ADC_Enable+0x86>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021d4:	f7ff fee8 	bl	8001fa8 <HAL_GetTick>
 80021d8:	1b43      	subs	r3, r0, r5
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d9f5      	bls.n	80021ca <ADC_Enable+0x4e>
        if(ADC_IS_ENABLE(hadc) == RESET)
 80021de:	6823      	ldr	r3, [r4, #0]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f013 0f01 	tst.w	r3, #1
 80021e6:	d1f0      	bne.n	80021ca <ADC_Enable+0x4e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80021ea:	f043 0310 	orr.w	r3, r3, #16
 80021ee:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	62e3      	str	r3, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 80021f8:	2300      	movs	r3, #0
 80021fa:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          return HAL_ERROR;
 80021fe:	2001      	movs	r0, #1
 8002200:	e002      	b.n	8002208 <ADC_Enable+0x8c>
  return HAL_OK;
 8002202:	2000      	movs	r0, #0
 8002204:	e000      	b.n	8002208 <ADC_Enable+0x8c>
 8002206:	2000      	movs	r0, #0
}
 8002208:	b003      	add	sp, #12
 800220a:	bd30      	pop	{r4, r5, pc}
 800220c:	20000000 	.word	0x20000000
 8002210:	431bde83 	.word	0x431bde83

08002214 <HAL_ADC_Start_DMA>:
{
 8002214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002216:	4604      	mov	r4, r0
 8002218:	460d      	mov	r5, r1
 800221a:	4616      	mov	r6, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800221c:	6801      	ldr	r1, [r0, #0]
 800221e:	4842      	ldr	r0, [pc, #264]	; (8002328 <HAL_ADC_Start_DMA+0x114>)
 8002220:	4281      	cmp	r1, r0
 8002222:	d05d      	beq.n	80022e0 <HAL_ADC_Start_DMA+0xcc>
 8002224:	4b41      	ldr	r3, [pc, #260]	; (800232c <HAL_ADC_Start_DMA+0x118>)
 8002226:	4299      	cmp	r1, r3
 8002228:	d05a      	beq.n	80022e0 <HAL_ADC_Start_DMA+0xcc>
    __HAL_LOCK(hadc);
 800222a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800222e:	2b01      	cmp	r3, #1
 8002230:	d077      	beq.n	8002322 <HAL_ADC_Start_DMA+0x10e>
 8002232:	2301      	movs	r3, #1
 8002234:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8002238:	4620      	mov	r0, r4
 800223a:	f7ff ff9f 	bl	800217c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800223e:	4607      	mov	r7, r0
 8002240:	2800      	cmp	r0, #0
 8002242:	d16a      	bne.n	800231a <HAL_ADC_Start_DMA+0x106>
      ADC_STATE_CLR_SET(hadc->State,
 8002244:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002246:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00
 800224a:	f021 0101 	bic.w	r1, r1, #1
 800224e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002252:	62a1      	str	r1, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002254:	6822      	ldr	r2, [r4, #0]
 8002256:	4b35      	ldr	r3, [pc, #212]	; (800232c <HAL_ADC_Start_DMA+0x118>)
 8002258:	429a      	cmp	r2, r3
 800225a:	d048      	beq.n	80022ee <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800225c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800225e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002262:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002264:	6853      	ldr	r3, [r2, #4]
 8002266:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800226a:	d005      	beq.n	8002278 <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800226c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800226e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002272:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002276:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002278:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800227a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800227e:	bf1a      	itte	ne
 8002280:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
 8002282:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8002286:	2300      	moveq	r3, #0
 8002288:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 800228a:	2300      	movs	r3, #0
 800228c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002290:	6a23      	ldr	r3, [r4, #32]
 8002292:	4a27      	ldr	r2, [pc, #156]	; (8002330 <HAL_ADC_Start_DMA+0x11c>)
 8002294:	629a      	str	r2, [r3, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002296:	6a23      	ldr	r3, [r4, #32]
 8002298:	4a26      	ldr	r2, [pc, #152]	; (8002334 <HAL_ADC_Start_DMA+0x120>)
 800229a:	62da      	str	r2, [r3, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800229c:	6a23      	ldr	r3, [r4, #32]
 800229e:	4a26      	ldr	r2, [pc, #152]	; (8002338 <HAL_ADC_Start_DMA+0x124>)
 80022a0:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80022a2:	6823      	ldr	r3, [r4, #0]
 80022a4:	f06f 0202 	mvn.w	r2, #2
 80022a8:	601a      	str	r2, [r3, #0]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80022aa:	6822      	ldr	r2, [r4, #0]
 80022ac:	6893      	ldr	r3, [r2, #8]
 80022ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b2:	6093      	str	r3, [r2, #8]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80022b4:	6821      	ldr	r1, [r4, #0]
 80022b6:	4633      	mov	r3, r6
 80022b8:	462a      	mov	r2, r5
 80022ba:	314c      	adds	r1, #76	; 0x4c
 80022bc:	6a20      	ldr	r0, [r4, #32]
 80022be:	f000 f9af 	bl	8002620 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80022c2:	6823      	ldr	r3, [r4, #0]
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80022ca:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	bf0c      	ite	eq
 80022d2:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80022d6:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 80022da:	609a      	str	r2, [r3, #8]
}
 80022dc:	4638      	mov	r0, r7
 80022de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80022e0:	4b11      	ldr	r3, [pc, #68]	; (8002328 <HAL_ADC_Start_DMA+0x114>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80022e8:	d09f      	beq.n	800222a <HAL_ADC_Start_DMA+0x16>
    tmp_hal_status = HAL_ERROR;
 80022ea:	2701      	movs	r7, #1
 80022ec:	e7f6      	b.n	80022dc <HAL_ADC_Start_DMA+0xc8>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80022ee:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80022f8:	d0b0      	beq.n	800225c <HAL_ADC_Start_DMA+0x48>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80022fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002300:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002302:	4b09      	ldr	r3, [pc, #36]	; (8002328 <HAL_ADC_Start_DMA+0x114>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800230a:	d0b5      	beq.n	8002278 <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800230c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800230e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002312:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002316:	62a3      	str	r3, [r4, #40]	; 0x28
 8002318:	e7ae      	b.n	8002278 <HAL_ADC_Start_DMA+0x64>
      __HAL_UNLOCK(hadc);
 800231a:	2300      	movs	r3, #0
 800231c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8002320:	e7dc      	b.n	80022dc <HAL_ADC_Start_DMA+0xc8>
    __HAL_LOCK(hadc);
 8002322:	2702      	movs	r7, #2
 8002324:	e7da      	b.n	80022dc <HAL_ADC_Start_DMA+0xc8>
 8002326:	bf00      	nop
 8002328:	40012400 	.word	0x40012400
 800232c:	40012800 	.word	0x40012800
 8002330:	08001fb7 	.word	0x08001fb7
 8002334:	0800200b 	.word	0x0800200b
 8002338:	08002017 	.word	0x08002017

0800233c <ADC_ConversionStop_Disable>:
{
 800233c:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800233e:	6803      	ldr	r3, [r0, #0]
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	f012 0f01 	tst.w	r2, #1
 8002346:	d101      	bne.n	800234c <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8002348:	2000      	movs	r0, #0
}
 800234a:	bd38      	pop	{r3, r4, r5, pc}
 800234c:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	f022 0201 	bic.w	r2, r2, #1
 8002354:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002356:	f7ff fe27 	bl	8001fa8 <HAL_GetTick>
 800235a:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800235c:	6823      	ldr	r3, [r4, #0]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f013 0f01 	tst.w	r3, #1
 8002364:	d106      	bne.n	8002374 <ADC_ConversionStop_Disable+0x38>
  return HAL_OK;
 8002366:	2000      	movs	r0, #0
 8002368:	e7ef      	b.n	800234a <ADC_ConversionStop_Disable+0xe>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800236a:	6823      	ldr	r3, [r4, #0]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f013 0f01 	tst.w	r3, #1
 8002372:	d013      	beq.n	800239c <ADC_ConversionStop_Disable+0x60>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002374:	f7ff fe18 	bl	8001fa8 <HAL_GetTick>
 8002378:	1b43      	subs	r3, r0, r5
 800237a:	2b02      	cmp	r3, #2
 800237c:	d9f5      	bls.n	800236a <ADC_ConversionStop_Disable+0x2e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 800237e:	6823      	ldr	r3, [r4, #0]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f013 0f01 	tst.w	r3, #1
 8002386:	d0f0      	beq.n	800236a <ADC_ConversionStop_Disable+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002388:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800238a:	f043 0310 	orr.w	r3, r3, #16
 800238e:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002390:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002392:	f043 0301 	orr.w	r3, r3, #1
 8002396:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8002398:	2001      	movs	r0, #1
 800239a:	e7d6      	b.n	800234a <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 800239c:	2000      	movs	r0, #0
 800239e:	e7d4      	b.n	800234a <ADC_ConversionStop_Disable+0xe>

080023a0 <HAL_ADC_Init>:
  if(hadc == NULL)
 80023a0:	2800      	cmp	r0, #0
 80023a2:	d07a      	beq.n	800249a <HAL_ADC_Init+0xfa>
{
 80023a4:	b570      	push	{r4, r5, r6, lr}
 80023a6:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023a8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d04f      	beq.n	800244e <HAL_ADC_Init+0xae>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80023ae:	4620      	mov	r0, r4
 80023b0:	f7ff ffc4 	bl	800233c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80023b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80023b6:	f013 0310 	ands.w	r3, r3, #16
 80023ba:	d168      	bne.n	800248e <HAL_ADC_Init+0xee>
 80023bc:	2800      	cmp	r0, #0
 80023be:	d166      	bne.n	800248e <HAL_ADC_Init+0xee>
    ADC_STATE_CLR_SET(hadc->State,
 80023c0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80023c2:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80023c6:	f022 0202 	bic.w	r2, r2, #2
 80023ca:	f042 0202 	orr.w	r2, r2, #2
 80023ce:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80023d0:	7b21      	ldrb	r1, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80023d2:	6862      	ldr	r2, [r4, #4]
 80023d4:	69e5      	ldr	r5, [r4, #28]
 80023d6:	432a      	orrs	r2, r5
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80023d8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80023dc:	68a5      	ldr	r5, [r4, #8]
 80023de:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80023e2:	d004      	beq.n	80023ee <HAL_ADC_Init+0x4e>
 80023e4:	2d01      	cmp	r5, #1
 80023e6:	bf14      	ite	ne
 80023e8:	461d      	movne	r5, r3
 80023ea:	f44f 7580 	moveq.w	r5, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023ee:	7d26      	ldrb	r6, [r4, #20]
 80023f0:	2e01      	cmp	r6, #1
 80023f2:	d032      	beq.n	800245a <HAL_ADC_Init+0xba>
      MODIFY_REG(hadc->Instance->CR1,
 80023f4:	6826      	ldr	r6, [r4, #0]
 80023f6:	6871      	ldr	r1, [r6, #4]
 80023f8:	f421 4169 	bic.w	r1, r1, #59648	; 0xe900
 80023fc:	4329      	orrs	r1, r5
 80023fe:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002400:	6825      	ldr	r5, [r4, #0]
 8002402:	68ae      	ldr	r6, [r5, #8]
 8002404:	4926      	ldr	r1, [pc, #152]	; (80024a0 <HAL_ADC_Init+0x100>)
 8002406:	4031      	ands	r1, r6
 8002408:	4311      	orrs	r1, r2
 800240a:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800240c:	68a1      	ldr	r1, [r4, #8]
 800240e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002412:	d001      	beq.n	8002418 <HAL_ADC_Init+0x78>
 8002414:	2901      	cmp	r1, #1
 8002416:	d102      	bne.n	800241e <HAL_ADC_Init+0x7e>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002418:	6923      	ldr	r3, [r4, #16]
 800241a:	3b01      	subs	r3, #1
 800241c:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 800241e:	6825      	ldr	r5, [r4, #0]
 8002420:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8002422:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 8002426:	430b      	orrs	r3, r1
 8002428:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800242a:	6823      	ldr	r3, [r4, #0]
 800242c:	6899      	ldr	r1, [r3, #8]
 800242e:	4b1d      	ldr	r3, [pc, #116]	; (80024a4 <HAL_ADC_Init+0x104>)
 8002430:	400b      	ands	r3, r1
 8002432:	429a      	cmp	r2, r3
 8002434:	d022      	beq.n	800247c <HAL_ADC_Init+0xdc>
      ADC_STATE_CLR_SET(hadc->State,
 8002436:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002438:	f023 0312 	bic.w	r3, r3, #18
 800243c:	f043 0310 	orr.w	r3, r3, #16
 8002440:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002442:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 800244a:	2001      	movs	r0, #1
 800244c:	e024      	b.n	8002498 <HAL_ADC_Init+0xf8>
    ADC_CLEAR_ERRORCODE(hadc);
 800244e:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8002450:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8002454:	f7ff fbe6 	bl	8001c24 <HAL_ADC_MspInit>
 8002458:	e7a9      	b.n	80023ae <HAL_ADC_Init+0xe>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800245a:	b931      	cbnz	r1, 800246a <HAL_ADC_Init+0xca>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800245c:	69a1      	ldr	r1, [r4, #24]
 800245e:	3901      	subs	r1, #1
 8002460:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 8002464:	f441 6500 	orr.w	r5, r1, #2048	; 0x800
 8002468:	e7c4      	b.n	80023f4 <HAL_ADC_Init+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800246a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800246c:	f041 0120 	orr.w	r1, r1, #32
 8002470:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002472:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002474:	f041 0101 	orr.w	r1, r1, #1
 8002478:	62e1      	str	r1, [r4, #44]	; 0x2c
 800247a:	e7bb      	b.n	80023f4 <HAL_ADC_Init+0x54>
      ADC_CLEAR_ERRORCODE(hadc);
 800247c:	2300      	movs	r3, #0
 800247e:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8002480:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002482:	f023 0303 	bic.w	r3, r3, #3
 8002486:	f043 0301 	orr.w	r3, r3, #1
 800248a:	62a3      	str	r3, [r4, #40]	; 0x28
 800248c:	e004      	b.n	8002498 <HAL_ADC_Init+0xf8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800248e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002490:	f043 0310 	orr.w	r3, r3, #16
 8002494:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8002496:	2001      	movs	r0, #1
}
 8002498:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800249a:	2001      	movs	r0, #1
}
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	ffe1f7fd 	.word	0xffe1f7fd
 80024a4:	ff1f0efe 	.word	0xff1f0efe

080024a8 <HAL_ADC_Stop_DMA>:
  __HAL_LOCK(hadc);
 80024a8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d028      	beq.n	8002502 <HAL_ADC_Stop_DMA+0x5a>
{
 80024b0:	b510      	push	{r4, lr}
 80024b2:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80024b4:	2301      	movs	r3, #1
 80024b6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80024ba:	f7ff ff3f 	bl	800233c <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 80024be:	b950      	cbnz	r0, 80024d6 <HAL_ADC_Stop_DMA+0x2e>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80024c0:	6822      	ldr	r2, [r4, #0]
 80024c2:	6893      	ldr	r3, [r2, #8]
 80024c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024c8:	6093      	str	r3, [r2, #8]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80024ca:	6a22      	ldr	r2, [r4, #32]
 80024cc:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d003      	beq.n	80024de <HAL_ADC_Stop_DMA+0x36>
  __HAL_UNLOCK(hadc);
 80024d6:	2300      	movs	r3, #0
 80024d8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80024dc:	bd10      	pop	{r4, pc}
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80024de:	4610      	mov	r0, r2
 80024e0:	f000 f8ed 	bl	80026be <HAL_DMA_Abort>
      if (tmp_hal_status == HAL_OK)
 80024e4:	b940      	cbnz	r0, 80024f8 <HAL_ADC_Stop_DMA+0x50>
        ADC_STATE_CLR_SET(hadc->State,
 80024e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80024e8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024ec:	f023 0301 	bic.w	r3, r3, #1
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80024f6:	e7ee      	b.n	80024d6 <HAL_ADC_Stop_DMA+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80024f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80024fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024fe:	62a3      	str	r3, [r4, #40]	; 0x28
 8002500:	e7e9      	b.n	80024d6 <HAL_ADC_Stop_DMA+0x2e>
  __HAL_LOCK(hadc);
 8002502:	2002      	movs	r0, #2
}
 8002504:	4770      	bx	lr
	...

08002508 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002508:	4907      	ldr	r1, [pc, #28]	; (8002528 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800250a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800250c:	0203      	lsls	r3, r0, #8
 800250e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002512:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002516:	0412      	lsls	r2, r2, #16
 8002518:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800251a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800251c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002524:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002526:	4770      	bx	lr
 8002528:	e000ed00 	.word	0xe000ed00

0800252c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800252c:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800252e:	4b18      	ldr	r3, [pc, #96]	; (8002590 <HAL_NVIC_SetPriority+0x64>)
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002536:	f1c3 0c07 	rsb	ip, r3, #7
 800253a:	f1bc 0f04 	cmp.w	ip, #4
 800253e:	bf28      	it	cs
 8002540:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002544:	f103 0e04 	add.w	lr, r3, #4
 8002548:	f1be 0f06 	cmp.w	lr, #6
 800254c:	bf8c      	ite	hi
 800254e:	3b03      	subhi	r3, #3
 8002550:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002552:	f04f 3eff 	mov.w	lr, #4294967295
 8002556:	fa0e fc0c 	lsl.w	ip, lr, ip
 800255a:	ea21 010c 	bic.w	r1, r1, ip
 800255e:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002560:	fa0e f303 	lsl.w	r3, lr, r3
 8002564:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002568:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 800256a:	2800      	cmp	r0, #0
 800256c:	db09      	blt.n	8002582 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800256e:	0109      	lsls	r1, r1, #4
 8002570:	b2c9      	uxtb	r1, r1
 8002572:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002576:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800257a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800257e:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002582:	f000 000f 	and.w	r0, r0, #15
 8002586:	0109      	lsls	r1, r1, #4
 8002588:	b2c9      	uxtb	r1, r1
 800258a:	4b02      	ldr	r3, [pc, #8]	; (8002594 <HAL_NVIC_SetPriority+0x68>)
 800258c:	5419      	strb	r1, [r3, r0]
 800258e:	e7f6      	b.n	800257e <HAL_NVIC_SetPriority+0x52>
 8002590:	e000ed00 	.word	0xe000ed00
 8002594:	e000ed14 	.word	0xe000ed14

08002598 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002598:	2800      	cmp	r0, #0
 800259a:	db08      	blt.n	80025ae <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800259c:	0942      	lsrs	r2, r0, #5
 800259e:	f000 001f 	and.w	r0, r0, #31
 80025a2:	2301      	movs	r3, #1
 80025a4:	fa03 f000 	lsl.w	r0, r3, r0
 80025a8:	4b01      	ldr	r3, [pc, #4]	; (80025b0 <HAL_NVIC_EnableIRQ+0x18>)
 80025aa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80025ae:	4770      	bx	lr
 80025b0:	e000e100 	.word	0xe000e100

080025b4 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80025b4:	b360      	cbz	r0, 8002610 <HAL_DMA_Init+0x5c>
{
 80025b6:	b410      	push	{r4}
 80025b8:	4602      	mov	r2, r0
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80025ba:	6801      	ldr	r1, [r0, #0]
 80025bc:	4b15      	ldr	r3, [pc, #84]	; (8002614 <HAL_DMA_Init+0x60>)
 80025be:	440b      	add	r3, r1
 80025c0:	4815      	ldr	r0, [pc, #84]	; (8002618 <HAL_DMA_Init+0x64>)
 80025c2:	fba0 0303 	umull	r0, r3, r0, r3
 80025c6:	091b      	lsrs	r3, r3, #4
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	6413      	str	r3, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80025cc:	4b13      	ldr	r3, [pc, #76]	; (800261c <HAL_DMA_Init+0x68>)
 80025ce:	63d3      	str	r3, [r2, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025d0:	2302      	movs	r3, #2
 80025d2:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80025d6:	6808      	ldr	r0, [r1, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80025d8:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
 80025dc:	f020 0030 	bic.w	r0, r0, #48	; 0x30
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80025e0:	6853      	ldr	r3, [r2, #4]
 80025e2:	6894      	ldr	r4, [r2, #8]
 80025e4:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025e6:	68d4      	ldr	r4, [r2, #12]
 80025e8:	4323      	orrs	r3, r4
 80025ea:	6914      	ldr	r4, [r2, #16]
 80025ec:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ee:	6954      	ldr	r4, [r2, #20]
 80025f0:	4323      	orrs	r3, r4
 80025f2:	6994      	ldr	r4, [r2, #24]
 80025f4:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80025f6:	69d4      	ldr	r4, [r2, #28]
 80025f8:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80025fa:	4303      	orrs	r3, r0

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80025fc:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025fe:	2000      	movs	r0, #0
 8002600:	6390      	str	r0, [r2, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002602:	2301      	movs	r3, #1
 8002604:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002608:	f882 0020 	strb.w	r0, [r2, #32]

  return HAL_OK;
}
 800260c:	bc10      	pop	{r4}
 800260e:	4770      	bx	lr
    return HAL_ERROR;
 8002610:	2001      	movs	r0, #1
}
 8002612:	4770      	bx	lr
 8002614:	bffdfff8 	.word	0xbffdfff8
 8002618:	cccccccd 	.word	0xcccccccd
 800261c:	40020000 	.word	0x40020000

08002620 <HAL_DMA_Start_IT>:

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002620:	f890 c020 	ldrb.w	ip, [r0, #32]
 8002624:	f1bc 0f01 	cmp.w	ip, #1
 8002628:	d047      	beq.n	80026ba <HAL_DMA_Start_IT+0x9a>
 800262a:	f04f 0c01 	mov.w	ip, #1
 800262e:	f880 c020 	strb.w	ip, [r0, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002632:	f890 c021 	ldrb.w	ip, [r0, #33]	; 0x21
 8002636:	fa5f fc8c 	uxtb.w	ip, ip
 800263a:	f1bc 0f01 	cmp.w	ip, #1
 800263e:	d004      	beq.n	800264a <HAL_DMA_Start_IT+0x2a>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002640:	2300      	movs	r3, #0
 8002642:	f880 3020 	strb.w	r3, [r0, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002646:	2002      	movs	r0, #2
 8002648:	4770      	bx	lr
{
 800264a:	b470      	push	{r4, r5, r6}
    hdma->State = HAL_DMA_STATE_BUSY;
 800264c:	2402      	movs	r4, #2
 800264e:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002652:	2400      	movs	r4, #0
 8002654:	6384      	str	r4, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8002656:	6805      	ldr	r5, [r0, #0]
 8002658:	682c      	ldr	r4, [r5, #0]
 800265a:	f024 0401 	bic.w	r4, r4, #1
 800265e:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002660:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8002662:	2401      	movs	r4, #1
 8002664:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8002666:	40b4      	lsls	r4, r6
 8002668:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800266a:	6804      	ldr	r4, [r0, #0]
 800266c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800266e:	6843      	ldr	r3, [r0, #4]
 8002670:	2b10      	cmp	r3, #16
 8002672:	d012      	beq.n	800269a <HAL_DMA_Start_IT+0x7a>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002674:	6803      	ldr	r3, [r0, #0]
 8002676:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002678:	6803      	ldr	r3, [r0, #0]
 800267a:	60da      	str	r2, [r3, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 800267c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800267e:	b18b      	cbz	r3, 80026a4 <HAL_DMA_Start_IT+0x84>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002680:	6802      	ldr	r2, [r0, #0]
 8002682:	6813      	ldr	r3, [r2, #0]
 8002684:	f043 030e 	orr.w	r3, r3, #14
 8002688:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 800268a:	6802      	ldr	r2, [r0, #0]
 800268c:	6813      	ldr	r3, [r2, #0]
 800268e:	f043 0301 	orr.w	r3, r3, #1
 8002692:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002694:	2000      	movs	r0, #0
}
 8002696:	bc70      	pop	{r4, r5, r6}
 8002698:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 800269a:	6803      	ldr	r3, [r0, #0]
 800269c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 800269e:	6803      	ldr	r3, [r0, #0]
 80026a0:	60d9      	str	r1, [r3, #12]
 80026a2:	e7eb      	b.n	800267c <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026a4:	6802      	ldr	r2, [r0, #0]
 80026a6:	6813      	ldr	r3, [r2, #0]
 80026a8:	f023 0304 	bic.w	r3, r3, #4
 80026ac:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80026ae:	6802      	ldr	r2, [r0, #0]
 80026b0:	6813      	ldr	r3, [r2, #0]
 80026b2:	f043 030a 	orr.w	r3, r3, #10
 80026b6:	6013      	str	r3, [r2, #0]
 80026b8:	e7e7      	b.n	800268a <HAL_DMA_Start_IT+0x6a>
  __HAL_LOCK(hdma);
 80026ba:	2002      	movs	r0, #2
}
 80026bc:	4770      	bx	lr

080026be <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026be:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d006      	beq.n	80026d6 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026c8:	2304      	movs	r3, #4
 80026ca:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80026cc:	2300      	movs	r3, #0
 80026ce:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 80026d2:	2001      	movs	r0, #1
 80026d4:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026d6:	6802      	ldr	r2, [r0, #0]
 80026d8:	6813      	ldr	r3, [r2, #0]
 80026da:	f023 030e 	bic.w	r3, r3, #14
 80026de:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80026e0:	6802      	ldr	r2, [r0, #0]
 80026e2:	6813      	ldr	r3, [r2, #0]
 80026e4:	f023 0301 	bic.w	r3, r3, #1
 80026e8:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80026ea:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80026ec:	2201      	movs	r2, #1
 80026ee:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	604b      	str	r3, [r1, #4]
  hdma->State = HAL_DMA_STATE_READY;
 80026f6:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  __HAL_UNLOCK(hdma);      
 80026fa:	2300      	movs	r3, #0
 80026fc:	f880 3020 	strb.w	r3, [r0, #32]
  return status; 
 8002700:	4618      	mov	r0, r3
}
 8002702:	4770      	bx	lr

08002704 <HAL_DMA_Abort_IT>:
{  
 8002704:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002706:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d003      	beq.n	8002718 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002710:	2304      	movs	r3, #4
 8002712:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8002714:	2001      	movs	r0, #1
}
 8002716:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002718:	6802      	ldr	r2, [r0, #0]
 800271a:	6813      	ldr	r3, [r2, #0]
 800271c:	f023 030e 	bic.w	r3, r3, #14
 8002720:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002722:	6802      	ldr	r2, [r0, #0]
 8002724:	6813      	ldr	r3, [r2, #0]
 8002726:	f023 0301 	bic.w	r3, r3, #1
 800272a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800272c:	6803      	ldr	r3, [r0, #0]
 800272e:	4a19      	ldr	r2, [pc, #100]	; (8002794 <HAL_DMA_Abort_IT+0x90>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d013      	beq.n	800275c <HAL_DMA_Abort_IT+0x58>
 8002734:	3214      	adds	r2, #20
 8002736:	4293      	cmp	r3, r2
 8002738:	d01e      	beq.n	8002778 <HAL_DMA_Abort_IT+0x74>
 800273a:	3214      	adds	r2, #20
 800273c:	4293      	cmp	r3, r2
 800273e:	d01d      	beq.n	800277c <HAL_DMA_Abort_IT+0x78>
 8002740:	3214      	adds	r2, #20
 8002742:	4293      	cmp	r3, r2
 8002744:	d01d      	beq.n	8002782 <HAL_DMA_Abort_IT+0x7e>
 8002746:	3214      	adds	r2, #20
 8002748:	4293      	cmp	r3, r2
 800274a:	d01d      	beq.n	8002788 <HAL_DMA_Abort_IT+0x84>
 800274c:	3214      	adds	r2, #20
 800274e:	4293      	cmp	r3, r2
 8002750:	bf0c      	ite	eq
 8002752:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8002756:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 800275a:	e000      	b.n	800275e <HAL_DMA_Abort_IT+0x5a>
 800275c:	2301      	movs	r3, #1
 800275e:	4a0e      	ldr	r2, [pc, #56]	; (8002798 <HAL_DMA_Abort_IT+0x94>)
 8002760:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002762:	2301      	movs	r3, #1
 8002764:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002768:	2300      	movs	r3, #0
 800276a:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800276e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002770:	b16b      	cbz	r3, 800278e <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 8002772:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002774:	2000      	movs	r0, #0
 8002776:	e7ce      	b.n	8002716 <HAL_DMA_Abort_IT+0x12>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002778:	2310      	movs	r3, #16
 800277a:	e7f0      	b.n	800275e <HAL_DMA_Abort_IT+0x5a>
 800277c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002780:	e7ed      	b.n	800275e <HAL_DMA_Abort_IT+0x5a>
 8002782:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002786:	e7ea      	b.n	800275e <HAL_DMA_Abort_IT+0x5a>
 8002788:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800278c:	e7e7      	b.n	800275e <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 800278e:	2000      	movs	r0, #0
 8002790:	e7c1      	b.n	8002716 <HAL_DMA_Abort_IT+0x12>
 8002792:	bf00      	nop
 8002794:	40020008 	.word	0x40020008
 8002798:	40020000 	.word	0x40020000

0800279c <HAL_DMA_IRQHandler>:
{
 800279c:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800279e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80027a0:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80027a2:	6804      	ldr	r4, [r0, #0]
 80027a4:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80027a6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80027a8:	2304      	movs	r3, #4
 80027aa:	408b      	lsls	r3, r1
 80027ac:	4213      	tst	r3, r2
 80027ae:	d034      	beq.n	800281a <HAL_DMA_IRQHandler+0x7e>
 80027b0:	f015 0f04 	tst.w	r5, #4
 80027b4:	d031      	beq.n	800281a <HAL_DMA_IRQHandler+0x7e>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027b6:	6823      	ldr	r3, [r4, #0]
 80027b8:	f013 0f20 	tst.w	r3, #32
 80027bc:	d103      	bne.n	80027c6 <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027be:	6823      	ldr	r3, [r4, #0]
 80027c0:	f023 0304 	bic.w	r3, r3, #4
 80027c4:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80027c6:	6803      	ldr	r3, [r0, #0]
 80027c8:	4a42      	ldr	r2, [pc, #264]	; (80028d4 <HAL_DMA_IRQHandler+0x138>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d013      	beq.n	80027f6 <HAL_DMA_IRQHandler+0x5a>
 80027ce:	3214      	adds	r2, #20
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d017      	beq.n	8002804 <HAL_DMA_IRQHandler+0x68>
 80027d4:	3214      	adds	r2, #20
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d016      	beq.n	8002808 <HAL_DMA_IRQHandler+0x6c>
 80027da:	3214      	adds	r2, #20
 80027dc:	4293      	cmp	r3, r2
 80027de:	d016      	beq.n	800280e <HAL_DMA_IRQHandler+0x72>
 80027e0:	3214      	adds	r2, #20
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d016      	beq.n	8002814 <HAL_DMA_IRQHandler+0x78>
 80027e6:	3214      	adds	r2, #20
 80027e8:	4293      	cmp	r3, r2
 80027ea:	bf0c      	ite	eq
 80027ec:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80027f0:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80027f4:	e000      	b.n	80027f8 <HAL_DMA_IRQHandler+0x5c>
 80027f6:	2304      	movs	r3, #4
 80027f8:	4a37      	ldr	r2, [pc, #220]	; (80028d8 <HAL_DMA_IRQHandler+0x13c>)
 80027fa:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80027fc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80027fe:	b103      	cbz	r3, 8002802 <HAL_DMA_IRQHandler+0x66>
      hdma->XferHalfCpltCallback(hdma);
 8002800:	4798      	blx	r3
}
 8002802:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002804:	2340      	movs	r3, #64	; 0x40
 8002806:	e7f7      	b.n	80027f8 <HAL_DMA_IRQHandler+0x5c>
 8002808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800280c:	e7f4      	b.n	80027f8 <HAL_DMA_IRQHandler+0x5c>
 800280e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002812:	e7f1      	b.n	80027f8 <HAL_DMA_IRQHandler+0x5c>
 8002814:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002818:	e7ee      	b.n	80027f8 <HAL_DMA_IRQHandler+0x5c>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800281a:	2302      	movs	r3, #2
 800281c:	408b      	lsls	r3, r1
 800281e:	4213      	tst	r3, r2
 8002820:	d03b      	beq.n	800289a <HAL_DMA_IRQHandler+0xfe>
 8002822:	f015 0f02 	tst.w	r5, #2
 8002826:	d038      	beq.n	800289a <HAL_DMA_IRQHandler+0xfe>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002828:	6823      	ldr	r3, [r4, #0]
 800282a:	f013 0f20 	tst.w	r3, #32
 800282e:	d106      	bne.n	800283e <HAL_DMA_IRQHandler+0xa2>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002830:	6823      	ldr	r3, [r4, #0]
 8002832:	f023 030a 	bic.w	r3, r3, #10
 8002836:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002838:	2301      	movs	r3, #1
 800283a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800283e:	6803      	ldr	r3, [r0, #0]
 8002840:	4a24      	ldr	r2, [pc, #144]	; (80028d4 <HAL_DMA_IRQHandler+0x138>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d013      	beq.n	800286e <HAL_DMA_IRQHandler+0xd2>
 8002846:	3214      	adds	r2, #20
 8002848:	4293      	cmp	r3, r2
 800284a:	d01b      	beq.n	8002884 <HAL_DMA_IRQHandler+0xe8>
 800284c:	3214      	adds	r2, #20
 800284e:	4293      	cmp	r3, r2
 8002850:	d01a      	beq.n	8002888 <HAL_DMA_IRQHandler+0xec>
 8002852:	3214      	adds	r2, #20
 8002854:	4293      	cmp	r3, r2
 8002856:	d01a      	beq.n	800288e <HAL_DMA_IRQHandler+0xf2>
 8002858:	3214      	adds	r2, #20
 800285a:	4293      	cmp	r3, r2
 800285c:	d01a      	beq.n	8002894 <HAL_DMA_IRQHandler+0xf8>
 800285e:	3214      	adds	r2, #20
 8002860:	4293      	cmp	r3, r2
 8002862:	bf0c      	ite	eq
 8002864:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8002868:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 800286c:	e000      	b.n	8002870 <HAL_DMA_IRQHandler+0xd4>
 800286e:	2302      	movs	r3, #2
 8002870:	4a19      	ldr	r2, [pc, #100]	; (80028d8 <HAL_DMA_IRQHandler+0x13c>)
 8002872:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8002874:	2300      	movs	r3, #0
 8002876:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 800287a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0c0      	beq.n	8002802 <HAL_DMA_IRQHandler+0x66>
      hdma->XferCpltCallback(hdma);
 8002880:	4798      	blx	r3
 8002882:	e7be      	b.n	8002802 <HAL_DMA_IRQHandler+0x66>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002884:	2320      	movs	r3, #32
 8002886:	e7f3      	b.n	8002870 <HAL_DMA_IRQHandler+0xd4>
 8002888:	f44f 7300 	mov.w	r3, #512	; 0x200
 800288c:	e7f0      	b.n	8002870 <HAL_DMA_IRQHandler+0xd4>
 800288e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002892:	e7ed      	b.n	8002870 <HAL_DMA_IRQHandler+0xd4>
 8002894:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002898:	e7ea      	b.n	8002870 <HAL_DMA_IRQHandler+0xd4>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800289a:	2308      	movs	r3, #8
 800289c:	fa03 f101 	lsl.w	r1, r3, r1
 80028a0:	4211      	tst	r1, r2
 80028a2:	d0ae      	beq.n	8002802 <HAL_DMA_IRQHandler+0x66>
 80028a4:	f015 0f08 	tst.w	r5, #8
 80028a8:	d0ab      	beq.n	8002802 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028aa:	6823      	ldr	r3, [r4, #0]
 80028ac:	f023 030e 	bic.w	r3, r3, #14
 80028b0:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80028b2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80028b4:	2301      	movs	r3, #1
 80028b6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80028b8:	fa03 f202 	lsl.w	r2, r3, r2
 80028bc:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80028be:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80028c0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80028c4:	2300      	movs	r3, #0
 80028c6:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80028ca:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d098      	beq.n	8002802 <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 80028d0:	4798      	blx	r3
  return;
 80028d2:	e796      	b.n	8002802 <HAL_DMA_IRQHandler+0x66>
 80028d4:	40020008 	.word	0x40020008
 80028d8:	40020000 	.word	0x40020000

080028dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028e0:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028e2:	f8d1 9000 	ldr.w	r9, [r1]
 80028e6:	f1b9 0f00 	cmp.w	r9, #0
 80028ea:	f000 811f 	beq.w	8002b2c <HAL_GPIO_Init+0x250>
 80028ee:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80028f0:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028f2:	4e90      	ldr	r6, [pc, #576]	; (8002b34 <HAL_GPIO_Init+0x258>)
        {
          SET_BIT(EXTI->IMR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028f4:	4c90      	ldr	r4, [pc, #576]	; (8002b38 <HAL_GPIO_Init+0x25c>)
      switch (GPIO_Init->Mode)
 80028f6:	4d91      	ldr	r5, [pc, #580]	; (8002b3c <HAL_GPIO_Init+0x260>)
 80028f8:	f8df e244 	ldr.w	lr, [pc, #580]	; 8002b40 <HAL_GPIO_Init+0x264>
 80028fc:	4694      	mov	ip, r2
 80028fe:	e0ba      	b.n	8002a76 <HAL_GPIO_Init+0x19a>
 8002900:	f04f 0c00 	mov.w	ip, #0
 8002904:	e025      	b.n	8002952 <HAL_GPIO_Init+0x76>
 8002906:	45a9      	cmp	r9, r5
 8002908:	d00f      	beq.n	800292a <HAL_GPIO_Init+0x4e>
 800290a:	d906      	bls.n	800291a <HAL_GPIO_Init+0x3e>
 800290c:	45f1      	cmp	r9, lr
 800290e:	d00c      	beq.n	800292a <HAL_GPIO_Init+0x4e>
 8002910:	f8df a230 	ldr.w	sl, [pc, #560]	; 8002b44 <HAL_GPIO_Init+0x268>
 8002914:	45d1      	cmp	r9, sl
 8002916:	d008      	beq.n	800292a <HAL_GPIO_Init+0x4e>
 8002918:	e01b      	b.n	8002952 <HAL_GPIO_Init+0x76>
 800291a:	f8df a22c 	ldr.w	sl, [pc, #556]	; 8002b48 <HAL_GPIO_Init+0x26c>
 800291e:	45d1      	cmp	r9, sl
 8002920:	d003      	beq.n	800292a <HAL_GPIO_Init+0x4e>
 8002922:	f50a 2a70 	add.w	sl, sl, #983040	; 0xf0000
 8002926:	45d1      	cmp	r9, sl
 8002928:	d10f      	bne.n	800294a <HAL_GPIO_Init+0x6e>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800292a:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800292e:	f1bc 0f00 	cmp.w	ip, #0
 8002932:	f000 80ef 	beq.w	8002b14 <HAL_GPIO_Init+0x238>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002936:	f1bc 0f01 	cmp.w	ip, #1
            GPIOx->BSRR = ioposition;
 800293a:	bf0c      	ite	eq
 800293c:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8002940:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002944:	f04f 0c08 	mov.w	ip, #8
 8002948:	e003      	b.n	8002952 <HAL_GPIO_Init+0x76>
      switch (GPIO_Init->Mode)
 800294a:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
 800294e:	45d1      	cmp	r9, sl
 8002950:	d0eb      	beq.n	800292a <HAL_GPIO_Init+0x4e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002952:	2fff      	cmp	r7, #255	; 0xff
 8002954:	bf99      	ittee	ls
 8002956:	4681      	movls	r9, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002958:	4692      	movls	sl, r2
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800295a:	f100 0904 	addhi.w	r9, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800295e:	f1a2 0a20 	subhi.w	sl, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002962:	f8d9 8000 	ldr.w	r8, [r9]
 8002966:	f04f 0b0f 	mov.w	fp, #15
 800296a:	fa0b fb0a 	lsl.w	fp, fp, sl
 800296e:	ea28 080b 	bic.w	r8, r8, fp
 8002972:	fa0c fa0a 	lsl.w	sl, ip, sl
 8002976:	ea48 080a 	orr.w	r8, r8, sl
 800297a:	f8c9 8000 	str.w	r8, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800297e:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002982:	f018 5f80 	tst.w	r8, #268435456	; 0x10000000
 8002986:	d06f      	beq.n	8002a68 <HAL_GPIO_Init+0x18c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002988:	f8d6 8018 	ldr.w	r8, [r6, #24]
 800298c:	f048 0801 	orr.w	r8, r8, #1
 8002990:	f8c6 8018 	str.w	r8, [r6, #24]
 8002994:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8002998:	f008 0801 	and.w	r8, r8, #1
 800299c:	f8cd 8004 	str.w	r8, [sp, #4]
 80029a0:	f8dd 8004 	ldr.w	r8, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 80029a4:	f023 0803 	bic.w	r8, r3, #3
 80029a8:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80029ac:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 80029b0:	f8d8 a008 	ldr.w	sl, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029b4:	f003 0903 	and.w	r9, r3, #3
 80029b8:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 80029bc:	f04f 090f 	mov.w	r9, #15
 80029c0:	fa09 f90b 	lsl.w	r9, r9, fp
 80029c4:	ea2a 0a09 	bic.w	sl, sl, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029c8:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8002b4c <HAL_GPIO_Init+0x270>
 80029cc:	4548      	cmp	r0, r9
 80029ce:	f000 80a4 	beq.w	8002b1a <HAL_GPIO_Init+0x23e>
 80029d2:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 80029d6:	4548      	cmp	r0, r9
 80029d8:	f000 80a2 	beq.w	8002b20 <HAL_GPIO_Init+0x244>
 80029dc:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 80029e0:	4548      	cmp	r0, r9
 80029e2:	f000 80a0 	beq.w	8002b26 <HAL_GPIO_Init+0x24a>
 80029e6:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 80029ea:	4548      	cmp	r0, r9
 80029ec:	bf0c      	ite	eq
 80029ee:	f04f 0903 	moveq.w	r9, #3
 80029f2:	f04f 0904 	movne.w	r9, #4
 80029f6:	fa09 f90b 	lsl.w	r9, r9, fp
 80029fa:	ea49 090a 	orr.w	r9, r9, sl
        AFIO->EXTICR[position >> 2u] = temp;
 80029fe:	f8c8 9008 	str.w	r9, [r8, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a02:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002a06:	f418 1f80 	tst.w	r8, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a0a:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8002a0e:	bf14      	ite	ne
 8002a10:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a14:	ea28 0807 	biceq.w	r8, r8, r7
 8002a18:	f8c4 8008 	str.w	r8, [r4, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a1c:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002a20:	f418 1f00 	tst.w	r8, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a24:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8002a28:	bf14      	ite	ne
 8002a2a:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a2e:	ea28 0807 	biceq.w	r8, r8, r7
 8002a32:	f8c4 800c 	str.w	r8, [r4, #12]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a36:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002a3a:	f418 3f00 	tst.w	r8, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002a3e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8002a42:	bf14      	ite	ne
 8002a44:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a48:	ea28 0807 	biceq.w	r8, r8, r7
 8002a4c:	f8c4 8004 	str.w	r8, [r4, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a50:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002a54:	f418 3f80 	tst.w	r8, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002a58:	f8d4 8000 	ldr.w	r8, [r4]
 8002a5c:	bf14      	ite	ne
 8002a5e:	ea48 0707 	orrne.w	r7, r8, r7
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a62:	ea28 0707 	biceq.w	r7, r8, r7
 8002a66:	6027      	str	r7, [r4, #0]
        }
      }
    }

	position++;
 8002a68:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a6a:	f8d1 9000 	ldr.w	r9, [r1]
 8002a6e:	3204      	adds	r2, #4
 8002a70:	fa39 f703 	lsrs.w	r7, r9, r3
 8002a74:	d05a      	beq.n	8002b2c <HAL_GPIO_Init+0x250>
    ioposition = (0x01uL << position);
 8002a76:	f04f 0801 	mov.w	r8, #1
 8002a7a:	fa08 f803 	lsl.w	r8, r8, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a7e:	ea08 0709 	and.w	r7, r8, r9
    if (iocurrent == ioposition)
 8002a82:	ea38 0909 	bics.w	r9, r8, r9
 8002a86:	d1ef      	bne.n	8002a68 <HAL_GPIO_Init+0x18c>
      switch (GPIO_Init->Mode)
 8002a88:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8002a8c:	f1b9 0f12 	cmp.w	r9, #18
 8002a90:	f63f af39 	bhi.w	8002906 <HAL_GPIO_Init+0x2a>
 8002a94:	f1b9 0f12 	cmp.w	r9, #18
 8002a98:	f63f af5b 	bhi.w	8002952 <HAL_GPIO_Init+0x76>
 8002a9c:	f20f 0a04 	addw	sl, pc, #4
 8002aa0:	f85a f029 	ldr.w	pc, [sl, r9, lsl #2]
 8002aa4:	0800292b 	.word	0x0800292b
 8002aa8:	08002af1 	.word	0x08002af1
 8002aac:	08002b01 	.word	0x08002b01
 8002ab0:	08002901 	.word	0x08002901
 8002ab4:	08002953 	.word	0x08002953
 8002ab8:	08002953 	.word	0x08002953
 8002abc:	08002953 	.word	0x08002953
 8002ac0:	08002953 	.word	0x08002953
 8002ac4:	08002953 	.word	0x08002953
 8002ac8:	08002953 	.word	0x08002953
 8002acc:	08002953 	.word	0x08002953
 8002ad0:	08002953 	.word	0x08002953
 8002ad4:	08002953 	.word	0x08002953
 8002ad8:	08002953 	.word	0x08002953
 8002adc:	08002953 	.word	0x08002953
 8002ae0:	08002953 	.word	0x08002953
 8002ae4:	08002953 	.word	0x08002953
 8002ae8:	08002af7 	.word	0x08002af7
 8002aec:	08002b0b 	.word	0x08002b0b
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002af0:	f8d1 c00c 	ldr.w	ip, [r1, #12]
          break;
 8002af4:	e72d      	b.n	8002952 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002af6:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8002afa:	f10c 0c04 	add.w	ip, ip, #4
          break;
 8002afe:	e728      	b.n	8002952 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b00:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8002b04:	f10c 0c08 	add.w	ip, ip, #8
          break;
 8002b08:	e723      	b.n	8002952 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b0a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8002b0e:	f10c 0c0c 	add.w	ip, ip, #12
          break;
 8002b12:	e71e      	b.n	8002952 <HAL_GPIO_Init+0x76>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b14:	f04f 0c04 	mov.w	ip, #4
 8002b18:	e71b      	b.n	8002952 <HAL_GPIO_Init+0x76>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b1a:	f04f 0900 	mov.w	r9, #0
 8002b1e:	e76a      	b.n	80029f6 <HAL_GPIO_Init+0x11a>
 8002b20:	f04f 0901 	mov.w	r9, #1
 8002b24:	e767      	b.n	80029f6 <HAL_GPIO_Init+0x11a>
 8002b26:	f04f 0902 	mov.w	r9, #2
 8002b2a:	e764      	b.n	80029f6 <HAL_GPIO_Init+0x11a>
  }
}
 8002b2c:	b003      	add	sp, #12
 8002b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b32:	bf00      	nop
 8002b34:	40021000 	.word	0x40021000
 8002b38:	40010400 	.word	0x40010400
 8002b3c:	10220000 	.word	0x10220000
 8002b40:	10310000 	.word	0x10310000
 8002b44:	10320000 	.word	0x10320000
 8002b48:	10120000 	.word	0x10120000
 8002b4c:	40010800 	.word	0x40010800

08002b50 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b50:	6883      	ldr	r3, [r0, #8]
 8002b52:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002b54:	bf14      	ite	ne
 8002b56:	2001      	movne	r0, #1
 8002b58:	2000      	moveq	r0, #0
 8002b5a:	4770      	bx	lr

08002b5c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b5c:	b10a      	cbz	r2, 8002b62 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b5e:	6101      	str	r1, [r0, #16]
 8002b60:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b62:	0409      	lsls	r1, r1, #16
 8002b64:	6101      	str	r1, [r0, #16]
  }
}
 8002b66:	4770      	bx	lr

08002b68 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b68:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b6a:	ea01 0203 	and.w	r2, r1, r3
 8002b6e:	ea21 0103 	bic.w	r1, r1, r3
 8002b72:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002b76:	6101      	str	r1, [r0, #16]
}
 8002b78:	4770      	bx	lr
	...

08002b7c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b7c:	2800      	cmp	r0, #0
 8002b7e:	f000 8201 	beq.w	8002f84 <HAL_RCC_OscConfig+0x408>
{
 8002b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b8a:	6803      	ldr	r3, [r0, #0]
 8002b8c:	f013 0f01 	tst.w	r3, #1
 8002b90:	d02c      	beq.n	8002bec <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b92:	4b9f      	ldr	r3, [pc, #636]	; (8002e10 <HAL_RCC_OscConfig+0x294>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f003 030c 	and.w	r3, r3, #12
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d01d      	beq.n	8002bda <HAL_RCC_OscConfig+0x5e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b9e:	4b9c      	ldr	r3, [pc, #624]	; (8002e10 <HAL_RCC_OscConfig+0x294>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f003 030c 	and.w	r3, r3, #12
 8002ba6:	2b08      	cmp	r3, #8
 8002ba8:	d012      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002baa:	6863      	ldr	r3, [r4, #4]
 8002bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb0:	d041      	beq.n	8002c36 <HAL_RCC_OscConfig+0xba>
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d155      	bne.n	8002c62 <HAL_RCC_OscConfig+0xe6>
 8002bb6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002bba:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	e037      	b.n	8002c40 <HAL_RCC_OscConfig+0xc4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bd0:	4b8f      	ldr	r3, [pc, #572]	; (8002e10 <HAL_RCC_OscConfig+0x294>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002bd8:	d0e7      	beq.n	8002baa <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bda:	4b8d      	ldr	r3, [pc, #564]	; (8002e10 <HAL_RCC_OscConfig+0x294>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002be2:	d003      	beq.n	8002bec <HAL_RCC_OscConfig+0x70>
 8002be4:	6863      	ldr	r3, [r4, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 81ce 	beq.w	8002f88 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bec:	6823      	ldr	r3, [r4, #0]
 8002bee:	f013 0f02 	tst.w	r3, #2
 8002bf2:	d075      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bf4:	4b86      	ldr	r3, [pc, #536]	; (8002e10 <HAL_RCC_OscConfig+0x294>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f013 0f0c 	tst.w	r3, #12
 8002bfc:	d05f      	beq.n	8002cbe <HAL_RCC_OscConfig+0x142>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002bfe:	4b84      	ldr	r3, [pc, #528]	; (8002e10 <HAL_RCC_OscConfig+0x294>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f003 030c 	and.w	r3, r3, #12
 8002c06:	2b08      	cmp	r3, #8
 8002c08:	d054      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c0a:	6923      	ldr	r3, [r4, #16]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 808a 	beq.w	8002d26 <HAL_RCC_OscConfig+0x1aa>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c12:	4b80      	ldr	r3, [pc, #512]	; (8002e14 <HAL_RCC_OscConfig+0x298>)
 8002c14:	2201      	movs	r2, #1
 8002c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c18:	f7ff f9c6 	bl	8001fa8 <HAL_GetTick>
 8002c1c:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c1e:	4e7c      	ldr	r6, [pc, #496]	; (8002e10 <HAL_RCC_OscConfig+0x294>)
 8002c20:	6833      	ldr	r3, [r6, #0]
 8002c22:	f013 0f02 	tst.w	r3, #2
 8002c26:	d175      	bne.n	8002d14 <HAL_RCC_OscConfig+0x198>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c28:	f7ff f9be 	bl	8001fa8 <HAL_GetTick>
 8002c2c:	1b40      	subs	r0, r0, r5
 8002c2e:	2802      	cmp	r0, #2
 8002c30:	d9f6      	bls.n	8002c20 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_TIMEOUT;
 8002c32:	2003      	movs	r0, #3
 8002c34:	e1ad      	b.n	8002f92 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c36:	4a76      	ldr	r2, [pc, #472]	; (8002e10 <HAL_RCC_OscConfig+0x294>)
 8002c38:	6813      	ldr	r3, [r2, #0]
 8002c3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c3e:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c40:	6863      	ldr	r3, [r4, #4]
 8002c42:	b343      	cbz	r3, 8002c96 <HAL_RCC_OscConfig+0x11a>
        tickstart = HAL_GetTick();
 8002c44:	f7ff f9b0 	bl	8001fa8 <HAL_GetTick>
 8002c48:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c4a:	4e71      	ldr	r6, [pc, #452]	; (8002e10 <HAL_RCC_OscConfig+0x294>)
 8002c4c:	6833      	ldr	r3, [r6, #0]
 8002c4e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002c52:	d1cb      	bne.n	8002bec <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c54:	f7ff f9a8 	bl	8001fa8 <HAL_GetTick>
 8002c58:	1b40      	subs	r0, r0, r5
 8002c5a:	2864      	cmp	r0, #100	; 0x64
 8002c5c:	d9f6      	bls.n	8002c4c <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 8002c5e:	2003      	movs	r0, #3
 8002c60:	e197      	b.n	8002f92 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c66:	d009      	beq.n	8002c7c <HAL_RCC_OscConfig+0x100>
 8002c68:	4b69      	ldr	r3, [pc, #420]	; (8002e10 <HAL_RCC_OscConfig+0x294>)
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c78:	601a      	str	r2, [r3, #0]
 8002c7a:	e7e1      	b.n	8002c40 <HAL_RCC_OscConfig+0xc4>
 8002c7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c80:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	e7d4      	b.n	8002c40 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8002c96:	f7ff f987 	bl	8001fa8 <HAL_GetTick>
 8002c9a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c9c:	4e5c      	ldr	r6, [pc, #368]	; (8002e10 <HAL_RCC_OscConfig+0x294>)
 8002c9e:	6833      	ldr	r3, [r6, #0]
 8002ca0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002ca4:	d0a2      	beq.n	8002bec <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca6:	f7ff f97f 	bl	8001fa8 <HAL_GetTick>
 8002caa:	1b40      	subs	r0, r0, r5
 8002cac:	2864      	cmp	r0, #100	; 0x64
 8002cae:	d9f6      	bls.n	8002c9e <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 8002cb0:	2003      	movs	r0, #3
 8002cb2:	e16e      	b.n	8002f92 <HAL_RCC_OscConfig+0x416>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cb4:	4b56      	ldr	r3, [pc, #344]	; (8002e10 <HAL_RCC_OscConfig+0x294>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002cbc:	d1a5      	bne.n	8002c0a <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cbe:	4b54      	ldr	r3, [pc, #336]	; (8002e10 <HAL_RCC_OscConfig+0x294>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f013 0f02 	tst.w	r3, #2
 8002cc6:	d003      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x154>
 8002cc8:	6923      	ldr	r3, [r4, #16]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	f040 815e 	bne.w	8002f8c <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd0:	4a4f      	ldr	r2, [pc, #316]	; (8002e10 <HAL_RCC_OscConfig+0x294>)
 8002cd2:	6813      	ldr	r3, [r2, #0]
 8002cd4:	6961      	ldr	r1, [r4, #20]
 8002cd6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002cda:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002cde:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ce0:	6823      	ldr	r3, [r4, #0]
 8002ce2:	f013 0f08 	tst.w	r3, #8
 8002ce6:	d03d      	beq.n	8002d64 <HAL_RCC_OscConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ce8:	69a3      	ldr	r3, [r4, #24]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d066      	beq.n	8002dbc <HAL_RCC_OscConfig+0x240>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cee:	4b49      	ldr	r3, [pc, #292]	; (8002e14 <HAL_RCC_OscConfig+0x298>)
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cf6:	f7ff f957 	bl	8001fa8 <HAL_GetTick>
 8002cfa:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cfc:	4e44      	ldr	r6, [pc, #272]	; (8002e10 <HAL_RCC_OscConfig+0x294>)
 8002cfe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002d00:	f013 0f02 	tst.w	r3, #2
 8002d04:	d121      	bne.n	8002d4a <HAL_RCC_OscConfig+0x1ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d06:	f7ff f94f 	bl	8001fa8 <HAL_GetTick>
 8002d0a:	1b40      	subs	r0, r0, r5
 8002d0c:	2802      	cmp	r0, #2
 8002d0e:	d9f6      	bls.n	8002cfe <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 8002d10:	2003      	movs	r0, #3
 8002d12:	e13e      	b.n	8002f92 <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d14:	4a3e      	ldr	r2, [pc, #248]	; (8002e10 <HAL_RCC_OscConfig+0x294>)
 8002d16:	6813      	ldr	r3, [r2, #0]
 8002d18:	6961      	ldr	r1, [r4, #20]
 8002d1a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002d1e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002d22:	6013      	str	r3, [r2, #0]
 8002d24:	e7dc      	b.n	8002ce0 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8002d26:	4b3b      	ldr	r3, [pc, #236]	; (8002e14 <HAL_RCC_OscConfig+0x298>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002d2c:	f7ff f93c 	bl	8001fa8 <HAL_GetTick>
 8002d30:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d32:	4e37      	ldr	r6, [pc, #220]	; (8002e10 <HAL_RCC_OscConfig+0x294>)
 8002d34:	6833      	ldr	r3, [r6, #0]
 8002d36:	f013 0f02 	tst.w	r3, #2
 8002d3a:	d0d1      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d3c:	f7ff f934 	bl	8001fa8 <HAL_GetTick>
 8002d40:	1b40      	subs	r0, r0, r5
 8002d42:	2802      	cmp	r0, #2
 8002d44:	d9f6      	bls.n	8002d34 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 8002d46:	2003      	movs	r0, #3
 8002d48:	e123      	b.n	8002f92 <HAL_RCC_OscConfig+0x416>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d4a:	4b33      	ldr	r3, [pc, #204]	; (8002e18 <HAL_RCC_OscConfig+0x29c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a33      	ldr	r2, [pc, #204]	; (8002e1c <HAL_RCC_OscConfig+0x2a0>)
 8002d50:	fba2 2303 	umull	r2, r3, r2, r3
 8002d54:	0a5b      	lsrs	r3, r3, #9
 8002d56:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8002d58:	bf00      	nop
  }
  while (Delay --);
 8002d5a:	9b01      	ldr	r3, [sp, #4]
 8002d5c:	1e5a      	subs	r2, r3, #1
 8002d5e:	9201      	str	r2, [sp, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1f9      	bne.n	8002d58 <HAL_RCC_OscConfig+0x1dc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d64:	6823      	ldr	r3, [r4, #0]
 8002d66:	f013 0f04 	tst.w	r3, #4
 8002d6a:	f000 809b 	beq.w	8002ea4 <HAL_RCC_OscConfig+0x328>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d6e:	4b28      	ldr	r3, [pc, #160]	; (8002e10 <HAL_RCC_OscConfig+0x294>)
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002d76:	d134      	bne.n	8002de2 <HAL_RCC_OscConfig+0x266>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d78:	4b25      	ldr	r3, [pc, #148]	; (8002e10 <HAL_RCC_OscConfig+0x294>)
 8002d7a:	69da      	ldr	r2, [r3, #28]
 8002d7c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002d80:	61da      	str	r2, [r3, #28]
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8002d8c:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8e:	4b24      	ldr	r3, [pc, #144]	; (8002e20 <HAL_RCC_OscConfig+0x2a4>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002d96:	d026      	beq.n	8002de6 <HAL_RCC_OscConfig+0x26a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d98:	68e3      	ldr	r3, [r4, #12]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d042      	beq.n	8002e24 <HAL_RCC_OscConfig+0x2a8>
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d158      	bne.n	8002e54 <HAL_RCC_OscConfig+0x2d8>
 8002da2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002da6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002daa:	6a1a      	ldr	r2, [r3, #32]
 8002dac:	f022 0201 	bic.w	r2, r2, #1
 8002db0:	621a      	str	r2, [r3, #32]
 8002db2:	6a1a      	ldr	r2, [r3, #32]
 8002db4:	f022 0204 	bic.w	r2, r2, #4
 8002db8:	621a      	str	r2, [r3, #32]
 8002dba:	e038      	b.n	8002e2e <HAL_RCC_OscConfig+0x2b2>
      __HAL_RCC_LSI_DISABLE();
 8002dbc:	4b15      	ldr	r3, [pc, #84]	; (8002e14 <HAL_RCC_OscConfig+0x298>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8002dc4:	f7ff f8f0 	bl	8001fa8 <HAL_GetTick>
 8002dc8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dca:	4e11      	ldr	r6, [pc, #68]	; (8002e10 <HAL_RCC_OscConfig+0x294>)
 8002dcc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002dce:	f013 0f02 	tst.w	r3, #2
 8002dd2:	d0c7      	beq.n	8002d64 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd4:	f7ff f8e8 	bl	8001fa8 <HAL_GetTick>
 8002dd8:	1b40      	subs	r0, r0, r5
 8002dda:	2802      	cmp	r0, #2
 8002ddc:	d9f6      	bls.n	8002dcc <HAL_RCC_OscConfig+0x250>
          return HAL_TIMEOUT;
 8002dde:	2003      	movs	r0, #3
 8002de0:	e0d7      	b.n	8002f92 <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 8002de2:	2500      	movs	r5, #0
 8002de4:	e7d3      	b.n	8002d8e <HAL_RCC_OscConfig+0x212>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002de6:	4a0e      	ldr	r2, [pc, #56]	; (8002e20 <HAL_RCC_OscConfig+0x2a4>)
 8002de8:	6813      	ldr	r3, [r2, #0]
 8002dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dee:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002df0:	f7ff f8da 	bl	8001fa8 <HAL_GetTick>
 8002df4:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df6:	4f0a      	ldr	r7, [pc, #40]	; (8002e20 <HAL_RCC_OscConfig+0x2a4>)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002dfe:	d1cb      	bne.n	8002d98 <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e00:	f7ff f8d2 	bl	8001fa8 <HAL_GetTick>
 8002e04:	1b80      	subs	r0, r0, r6
 8002e06:	2864      	cmp	r0, #100	; 0x64
 8002e08:	d9f6      	bls.n	8002df8 <HAL_RCC_OscConfig+0x27c>
          return HAL_TIMEOUT;
 8002e0a:	2003      	movs	r0, #3
 8002e0c:	e0c1      	b.n	8002f92 <HAL_RCC_OscConfig+0x416>
 8002e0e:	bf00      	nop
 8002e10:	40021000 	.word	0x40021000
 8002e14:	42420000 	.word	0x42420000
 8002e18:	20000000 	.word	0x20000000
 8002e1c:	10624dd3 	.word	0x10624dd3
 8002e20:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e24:	4a5e      	ldr	r2, [pc, #376]	; (8002fa0 <HAL_RCC_OscConfig+0x424>)
 8002e26:	6a13      	ldr	r3, [r2, #32]
 8002e28:	f043 0301 	orr.w	r3, r3, #1
 8002e2c:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e2e:	68e3      	ldr	r3, [r4, #12]
 8002e30:	b333      	cbz	r3, 8002e80 <HAL_RCC_OscConfig+0x304>
      tickstart = HAL_GetTick();
 8002e32:	f7ff f8b9 	bl	8001fa8 <HAL_GetTick>
 8002e36:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e38:	4f59      	ldr	r7, [pc, #356]	; (8002fa0 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e3a:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e3e:	6a3b      	ldr	r3, [r7, #32]
 8002e40:	f013 0f02 	tst.w	r3, #2
 8002e44:	d12d      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e46:	f7ff f8af 	bl	8001fa8 <HAL_GetTick>
 8002e4a:	1b80      	subs	r0, r0, r6
 8002e4c:	4540      	cmp	r0, r8
 8002e4e:	d9f6      	bls.n	8002e3e <HAL_RCC_OscConfig+0x2c2>
          return HAL_TIMEOUT;
 8002e50:	2003      	movs	r0, #3
 8002e52:	e09e      	b.n	8002f92 <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e54:	2b05      	cmp	r3, #5
 8002e56:	d009      	beq.n	8002e6c <HAL_RCC_OscConfig+0x2f0>
 8002e58:	4b51      	ldr	r3, [pc, #324]	; (8002fa0 <HAL_RCC_OscConfig+0x424>)
 8002e5a:	6a1a      	ldr	r2, [r3, #32]
 8002e5c:	f022 0201 	bic.w	r2, r2, #1
 8002e60:	621a      	str	r2, [r3, #32]
 8002e62:	6a1a      	ldr	r2, [r3, #32]
 8002e64:	f022 0204 	bic.w	r2, r2, #4
 8002e68:	621a      	str	r2, [r3, #32]
 8002e6a:	e7e0      	b.n	8002e2e <HAL_RCC_OscConfig+0x2b2>
 8002e6c:	4b4c      	ldr	r3, [pc, #304]	; (8002fa0 <HAL_RCC_OscConfig+0x424>)
 8002e6e:	6a1a      	ldr	r2, [r3, #32]
 8002e70:	f042 0204 	orr.w	r2, r2, #4
 8002e74:	621a      	str	r2, [r3, #32]
 8002e76:	6a1a      	ldr	r2, [r3, #32]
 8002e78:	f042 0201 	orr.w	r2, r2, #1
 8002e7c:	621a      	str	r2, [r3, #32]
 8002e7e:	e7d6      	b.n	8002e2e <HAL_RCC_OscConfig+0x2b2>
      tickstart = HAL_GetTick();
 8002e80:	f7ff f892 	bl	8001fa8 <HAL_GetTick>
 8002e84:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e86:	4f46      	ldr	r7, [pc, #280]	; (8002fa0 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e88:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
 8002e8e:	f013 0f02 	tst.w	r3, #2
 8002e92:	d006      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e94:	f7ff f888 	bl	8001fa8 <HAL_GetTick>
 8002e98:	1b80      	subs	r0, r0, r6
 8002e9a:	4540      	cmp	r0, r8
 8002e9c:	d9f6      	bls.n	8002e8c <HAL_RCC_OscConfig+0x310>
          return HAL_TIMEOUT;
 8002e9e:	2003      	movs	r0, #3
 8002ea0:	e077      	b.n	8002f92 <HAL_RCC_OscConfig+0x416>
    if (pwrclkchanged == SET)
 8002ea2:	b9e5      	cbnz	r5, 8002ede <HAL_RCC_OscConfig+0x362>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ea4:	69e3      	ldr	r3, [r4, #28]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d072      	beq.n	8002f90 <HAL_RCC_OscConfig+0x414>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002eaa:	4a3d      	ldr	r2, [pc, #244]	; (8002fa0 <HAL_RCC_OscConfig+0x424>)
 8002eac:	6852      	ldr	r2, [r2, #4]
 8002eae:	f002 020c 	and.w	r2, r2, #12
 8002eb2:	2a08      	cmp	r2, #8
 8002eb4:	d056      	beq.n	8002f64 <HAL_RCC_OscConfig+0x3e8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d017      	beq.n	8002eea <HAL_RCC_OscConfig+0x36e>
        __HAL_RCC_PLL_DISABLE();
 8002eba:	4b3a      	ldr	r3, [pc, #232]	; (8002fa4 <HAL_RCC_OscConfig+0x428>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002ec0:	f7ff f872 	bl	8001fa8 <HAL_GetTick>
 8002ec4:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ec6:	4d36      	ldr	r5, [pc, #216]	; (8002fa0 <HAL_RCC_OscConfig+0x424>)
 8002ec8:	682b      	ldr	r3, [r5, #0]
 8002eca:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002ece:	d047      	beq.n	8002f60 <HAL_RCC_OscConfig+0x3e4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed0:	f7ff f86a 	bl	8001fa8 <HAL_GetTick>
 8002ed4:	1b00      	subs	r0, r0, r4
 8002ed6:	2802      	cmp	r0, #2
 8002ed8:	d9f6      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x34c>
            return HAL_TIMEOUT;
 8002eda:	2003      	movs	r0, #3
 8002edc:	e059      	b.n	8002f92 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ede:	4a30      	ldr	r2, [pc, #192]	; (8002fa0 <HAL_RCC_OscConfig+0x424>)
 8002ee0:	69d3      	ldr	r3, [r2, #28]
 8002ee2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ee6:	61d3      	str	r3, [r2, #28]
 8002ee8:	e7dc      	b.n	8002ea4 <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_PLL_DISABLE();
 8002eea:	4b2e      	ldr	r3, [pc, #184]	; (8002fa4 <HAL_RCC_OscConfig+0x428>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002ef0:	f7ff f85a 	bl	8001fa8 <HAL_GetTick>
 8002ef4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ef6:	4e2a      	ldr	r6, [pc, #168]	; (8002fa0 <HAL_RCC_OscConfig+0x424>)
 8002ef8:	6833      	ldr	r3, [r6, #0]
 8002efa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002efe:	d006      	beq.n	8002f0e <HAL_RCC_OscConfig+0x392>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f00:	f7ff f852 	bl	8001fa8 <HAL_GetTick>
 8002f04:	1b40      	subs	r0, r0, r5
 8002f06:	2802      	cmp	r0, #2
 8002f08:	d9f6      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x37c>
            return HAL_TIMEOUT;
 8002f0a:	2003      	movs	r0, #3
 8002f0c:	e041      	b.n	8002f92 <HAL_RCC_OscConfig+0x416>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f0e:	6a23      	ldr	r3, [r4, #32]
 8002f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f14:	d01a      	beq.n	8002f4c <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f16:	4922      	ldr	r1, [pc, #136]	; (8002fa0 <HAL_RCC_OscConfig+0x424>)
 8002f18:	684a      	ldr	r2, [r1, #4]
 8002f1a:	6a23      	ldr	r3, [r4, #32]
 8002f1c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002f1e:	4303      	orrs	r3, r0
 8002f20:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8002f24:	4313      	orrs	r3, r2
 8002f26:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8002f28:	4b1e      	ldr	r3, [pc, #120]	; (8002fa4 <HAL_RCC_OscConfig+0x428>)
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002f2e:	f7ff f83b 	bl	8001fa8 <HAL_GetTick>
 8002f32:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f34:	4d1a      	ldr	r5, [pc, #104]	; (8002fa0 <HAL_RCC_OscConfig+0x424>)
 8002f36:	682b      	ldr	r3, [r5, #0]
 8002f38:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002f3c:	d10e      	bne.n	8002f5c <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f3e:	f7ff f833 	bl	8001fa8 <HAL_GetTick>
 8002f42:	1b00      	subs	r0, r0, r4
 8002f44:	2802      	cmp	r0, #2
 8002f46:	d9f6      	bls.n	8002f36 <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 8002f48:	2003      	movs	r0, #3
 8002f4a:	e022      	b.n	8002f92 <HAL_RCC_OscConfig+0x416>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f4c:	4a14      	ldr	r2, [pc, #80]	; (8002fa0 <HAL_RCC_OscConfig+0x424>)
 8002f4e:	6853      	ldr	r3, [r2, #4]
 8002f50:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002f54:	68a1      	ldr	r1, [r4, #8]
 8002f56:	430b      	orrs	r3, r1
 8002f58:	6053      	str	r3, [r2, #4]
 8002f5a:	e7dc      	b.n	8002f16 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	e018      	b.n	8002f92 <HAL_RCC_OscConfig+0x416>
 8002f60:	2000      	movs	r0, #0
 8002f62:	e016      	b.n	8002f92 <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d017      	beq.n	8002f98 <HAL_RCC_OscConfig+0x41c>
        pll_config = RCC->CFGR;
 8002f68:	4b0d      	ldr	r3, [pc, #52]	; (8002fa0 <HAL_RCC_OscConfig+0x424>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f6c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8002f70:	6a22      	ldr	r2, [r4, #32]
 8002f72:	4291      	cmp	r1, r2
 8002f74:	d112      	bne.n	8002f9c <HAL_RCC_OscConfig+0x420>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f76:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7a:	6a60      	ldr	r0, [r4, #36]	; 0x24
        return HAL_ERROR;
 8002f7c:	1a18      	subs	r0, r3, r0
 8002f7e:	bf18      	it	ne
 8002f80:	2001      	movne	r0, #1
 8002f82:	e006      	b.n	8002f92 <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 8002f84:	2001      	movs	r0, #1
}
 8002f86:	4770      	bx	lr
        return HAL_ERROR;
 8002f88:	2001      	movs	r0, #1
 8002f8a:	e002      	b.n	8002f92 <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 8002f8c:	2001      	movs	r0, #1
 8002f8e:	e000      	b.n	8002f92 <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 8002f90:	2000      	movs	r0, #0
}
 8002f92:	b002      	add	sp, #8
 8002f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8002f98:	2001      	movs	r0, #1
 8002f9a:	e7fa      	b.n	8002f92 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 8002f9c:	2001      	movs	r0, #1
 8002f9e:	e7f8      	b.n	8002f92 <HAL_RCC_OscConfig+0x416>
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	42420000 	.word	0x42420000

08002fa8 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8002fa8:	4b0f      	ldr	r3, [pc, #60]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x40>)
 8002faa:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002fac:	f003 020c 	and.w	r2, r3, #12
 8002fb0:	2a08      	cmp	r2, #8
 8002fb2:	d001      	beq.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8002fb4:	480d      	ldr	r0, [pc, #52]	; (8002fec <HAL_RCC_GetSysClockFreq+0x44>)
}
 8002fb6:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fb8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002fbc:	490c      	ldr	r1, [pc, #48]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x48>)
 8002fbe:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fc0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002fc4:	d00b      	beq.n	8002fde <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fc6:	4b08      	ldr	r3, [pc, #32]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x40>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002fca:	4a08      	ldr	r2, [pc, #32]	; (8002fec <HAL_RCC_GetSysClockFreq+0x44>)
 8002fcc:	fb02 f000 	mul.w	r0, r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fd0:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8002fd4:	4a07      	ldr	r2, [pc, #28]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x4c>)
 8002fd6:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002fd8:	fbb0 f0f3 	udiv	r0, r0, r3
 8002fdc:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002fde:	4b06      	ldr	r3, [pc, #24]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x50>)
 8002fe0:	fb03 f000 	mul.w	r0, r3, r0
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	007a1200 	.word	0x007a1200
 8002ff0:	08007638 	.word	0x08007638
 8002ff4:	08007648 	.word	0x08007648
 8002ff8:	003d0900 	.word	0x003d0900

08002ffc <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002ffc:	2800      	cmp	r0, #0
 8002ffe:	f000 80a2 	beq.w	8003146 <HAL_RCC_ClockConfig+0x14a>
{
 8003002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003006:	460d      	mov	r5, r1
 8003008:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800300a:	4b53      	ldr	r3, [pc, #332]	; (8003158 <HAL_RCC_ClockConfig+0x15c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	428b      	cmp	r3, r1
 8003014:	d20b      	bcs.n	800302e <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003016:	4a50      	ldr	r2, [pc, #320]	; (8003158 <HAL_RCC_ClockConfig+0x15c>)
 8003018:	6813      	ldr	r3, [r2, #0]
 800301a:	f023 0307 	bic.w	r3, r3, #7
 800301e:	430b      	orrs	r3, r1
 8003020:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003022:	6813      	ldr	r3, [r2, #0]
 8003024:	f003 0307 	and.w	r3, r3, #7
 8003028:	428b      	cmp	r3, r1
 800302a:	f040 808e 	bne.w	800314a <HAL_RCC_ClockConfig+0x14e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800302e:	6823      	ldr	r3, [r4, #0]
 8003030:	f013 0f02 	tst.w	r3, #2
 8003034:	d017      	beq.n	8003066 <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003036:	f013 0f04 	tst.w	r3, #4
 800303a:	d004      	beq.n	8003046 <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800303c:	4a47      	ldr	r2, [pc, #284]	; (800315c <HAL_RCC_ClockConfig+0x160>)
 800303e:	6853      	ldr	r3, [r2, #4]
 8003040:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003044:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003046:	6823      	ldr	r3, [r4, #0]
 8003048:	f013 0f08 	tst.w	r3, #8
 800304c:	d004      	beq.n	8003058 <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800304e:	4a43      	ldr	r2, [pc, #268]	; (800315c <HAL_RCC_ClockConfig+0x160>)
 8003050:	6853      	ldr	r3, [r2, #4]
 8003052:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003056:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003058:	4a40      	ldr	r2, [pc, #256]	; (800315c <HAL_RCC_ClockConfig+0x160>)
 800305a:	6853      	ldr	r3, [r2, #4]
 800305c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003060:	68a1      	ldr	r1, [r4, #8]
 8003062:	430b      	orrs	r3, r1
 8003064:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003066:	6823      	ldr	r3, [r4, #0]
 8003068:	f013 0f01 	tst.w	r3, #1
 800306c:	d031      	beq.n	80030d2 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800306e:	6862      	ldr	r2, [r4, #4]
 8003070:	2a01      	cmp	r2, #1
 8003072:	d020      	beq.n	80030b6 <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003074:	2a02      	cmp	r2, #2
 8003076:	d025      	beq.n	80030c4 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003078:	4b38      	ldr	r3, [pc, #224]	; (800315c <HAL_RCC_ClockConfig+0x160>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f013 0f02 	tst.w	r3, #2
 8003080:	d065      	beq.n	800314e <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003082:	4936      	ldr	r1, [pc, #216]	; (800315c <HAL_RCC_ClockConfig+0x160>)
 8003084:	684b      	ldr	r3, [r1, #4]
 8003086:	f023 0303 	bic.w	r3, r3, #3
 800308a:	4313      	orrs	r3, r2
 800308c:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800308e:	f7fe ff8b 	bl	8001fa8 <HAL_GetTick>
 8003092:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003094:	4f31      	ldr	r7, [pc, #196]	; (800315c <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003096:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f003 030c 	and.w	r3, r3, #12
 80030a0:	6862      	ldr	r2, [r4, #4]
 80030a2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80030a6:	d014      	beq.n	80030d2 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030a8:	f7fe ff7e 	bl	8001fa8 <HAL_GetTick>
 80030ac:	1b80      	subs	r0, r0, r6
 80030ae:	4540      	cmp	r0, r8
 80030b0:	d9f3      	bls.n	800309a <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 80030b2:	2003      	movs	r0, #3
 80030b4:	e045      	b.n	8003142 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b6:	4b29      	ldr	r3, [pc, #164]	; (800315c <HAL_RCC_ClockConfig+0x160>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80030be:	d1e0      	bne.n	8003082 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80030c0:	2001      	movs	r0, #1
 80030c2:	e03e      	b.n	8003142 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c4:	4b25      	ldr	r3, [pc, #148]	; (800315c <HAL_RCC_ClockConfig+0x160>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80030cc:	d1d9      	bne.n	8003082 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80030ce:	2001      	movs	r0, #1
 80030d0:	e037      	b.n	8003142 <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030d2:	4b21      	ldr	r3, [pc, #132]	; (8003158 <HAL_RCC_ClockConfig+0x15c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	42ab      	cmp	r3, r5
 80030dc:	d90a      	bls.n	80030f4 <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030de:	4a1e      	ldr	r2, [pc, #120]	; (8003158 <HAL_RCC_ClockConfig+0x15c>)
 80030e0:	6813      	ldr	r3, [r2, #0]
 80030e2:	f023 0307 	bic.w	r3, r3, #7
 80030e6:	432b      	orrs	r3, r5
 80030e8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ea:	6813      	ldr	r3, [r2, #0]
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	42ab      	cmp	r3, r5
 80030f2:	d12e      	bne.n	8003152 <HAL_RCC_ClockConfig+0x156>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f4:	6823      	ldr	r3, [r4, #0]
 80030f6:	f013 0f04 	tst.w	r3, #4
 80030fa:	d006      	beq.n	800310a <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030fc:	4a17      	ldr	r2, [pc, #92]	; (800315c <HAL_RCC_ClockConfig+0x160>)
 80030fe:	6853      	ldr	r3, [r2, #4]
 8003100:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003104:	68e1      	ldr	r1, [r4, #12]
 8003106:	430b      	orrs	r3, r1
 8003108:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800310a:	6823      	ldr	r3, [r4, #0]
 800310c:	f013 0f08 	tst.w	r3, #8
 8003110:	d007      	beq.n	8003122 <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003112:	4a12      	ldr	r2, [pc, #72]	; (800315c <HAL_RCC_ClockConfig+0x160>)
 8003114:	6853      	ldr	r3, [r2, #4]
 8003116:	6921      	ldr	r1, [r4, #16]
 8003118:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800311c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003120:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003122:	f7ff ff41 	bl	8002fa8 <HAL_RCC_GetSysClockFreq>
 8003126:	4b0d      	ldr	r3, [pc, #52]	; (800315c <HAL_RCC_ClockConfig+0x160>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800312e:	4a0c      	ldr	r2, [pc, #48]	; (8003160 <HAL_RCC_ClockConfig+0x164>)
 8003130:	5cd3      	ldrb	r3, [r2, r3]
 8003132:	40d8      	lsrs	r0, r3
 8003134:	4b0b      	ldr	r3, [pc, #44]	; (8003164 <HAL_RCC_ClockConfig+0x168>)
 8003136:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003138:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <HAL_RCC_ClockConfig+0x16c>)
 800313a:	6818      	ldr	r0, [r3, #0]
 800313c:	f7fe fe72 	bl	8001e24 <HAL_InitTick>
  return HAL_OK;
 8003140:	2000      	movs	r0, #0
}
 8003142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8003146:	2001      	movs	r0, #1
}
 8003148:	4770      	bx	lr
    return HAL_ERROR;
 800314a:	2001      	movs	r0, #1
 800314c:	e7f9      	b.n	8003142 <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 800314e:	2001      	movs	r0, #1
 8003150:	e7f7      	b.n	8003142 <HAL_RCC_ClockConfig+0x146>
    return HAL_ERROR;
 8003152:	2001      	movs	r0, #1
 8003154:	e7f5      	b.n	8003142 <HAL_RCC_ClockConfig+0x146>
 8003156:	bf00      	nop
 8003158:	40022000 	.word	0x40022000
 800315c:	40021000 	.word	0x40021000
 8003160:	08007620 	.word	0x08007620
 8003164:	20000000 	.word	0x20000000
 8003168:	20000008 	.word	0x20000008

0800316c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800316c:	4b04      	ldr	r3, [pc, #16]	; (8003180 <HAL_RCC_GetPCLK1Freq+0x14>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003174:	4a03      	ldr	r2, [pc, #12]	; (8003184 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003176:	5cd3      	ldrb	r3, [r2, r3]
 8003178:	4a03      	ldr	r2, [pc, #12]	; (8003188 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800317a:	6810      	ldr	r0, [r2, #0]
}
 800317c:	40d8      	lsrs	r0, r3
 800317e:	4770      	bx	lr
 8003180:	40021000 	.word	0x40021000
 8003184:	08007630 	.word	0x08007630
 8003188:	20000000 	.word	0x20000000

0800318c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800318c:	4b04      	ldr	r3, [pc, #16]	; (80031a0 <HAL_RCC_GetPCLK2Freq+0x14>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003194:	4a03      	ldr	r2, [pc, #12]	; (80031a4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003196:	5cd3      	ldrb	r3, [r2, r3]
 8003198:	4a03      	ldr	r2, [pc, #12]	; (80031a8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800319a:	6810      	ldr	r0, [r2, #0]
}
 800319c:	40d8      	lsrs	r0, r3
 800319e:	4770      	bx	lr
 80031a0:	40021000 	.word	0x40021000
 80031a4:	08007630 	.word	0x08007630
 80031a8:	20000000 	.word	0x20000000

080031ac <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80031ac:	230f      	movs	r3, #15
 80031ae:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80031b0:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <HAL_RCC_GetClockConfig+0x34>)
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	f002 0203 	and.w	r2, r2, #3
 80031b8:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80031c0:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80031c8:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	08db      	lsrs	r3, r3, #3
 80031ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031d2:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80031d4:	4b03      	ldr	r3, [pc, #12]	; (80031e4 <HAL_RCC_GetClockConfig+0x38>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	600b      	str	r3, [r1, #0]
}
 80031de:	4770      	bx	lr
 80031e0:	40021000 	.word	0x40021000
 80031e4:	40022000 	.word	0x40022000

080031e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031ec:	b082      	sub	sp, #8
 80031ee:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80031f0:	6803      	ldr	r3, [r0, #0]
 80031f2:	f013 0f01 	tst.w	r3, #1
 80031f6:	d036      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031f8:	4b3f      	ldr	r3, [pc, #252]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80031fa:	69db      	ldr	r3, [r3, #28]
 80031fc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003200:	d149      	bne.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0xae>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003202:	4b3d      	ldr	r3, [pc, #244]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003204:	69da      	ldr	r2, [r3, #28]
 8003206:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800320a:	61da      	str	r2, [r3, #28]
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003212:	9301      	str	r3, [sp, #4]
 8003214:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003216:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003218:	4b38      	ldr	r3, [pc, #224]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x114>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003220:	d03b      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003222:	4b35      	ldr	r3, [pc, #212]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003224:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003226:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800322a:	d013      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800322c:	6862      	ldr	r2, [r4, #4]
 800322e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003232:	429a      	cmp	r2, r3
 8003234:	d00e      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003236:	4a30      	ldr	r2, [pc, #192]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003238:	6a13      	ldr	r3, [r2, #32]
 800323a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800323e:	4930      	ldr	r1, [pc, #192]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003240:	2601      	movs	r6, #1
 8003242:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003246:	2600      	movs	r6, #0
 8003248:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800324c:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800324e:	f013 0f01 	tst.w	r3, #1
 8003252:	d136      	bne.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xda>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003254:	4a28      	ldr	r2, [pc, #160]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003256:	6a13      	ldr	r3, [r2, #32]
 8003258:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800325c:	6861      	ldr	r1, [r4, #4]
 800325e:	430b      	orrs	r3, r1
 8003260:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003262:	2d00      	cmp	r5, #0
 8003264:	d13e      	bne.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003266:	6823      	ldr	r3, [r4, #0]
 8003268:	f013 0f02 	tst.w	r3, #2
 800326c:	d006      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800326e:	4a22      	ldr	r2, [pc, #136]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003270:	6853      	ldr	r3, [r2, #4]
 8003272:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003276:	68a1      	ldr	r1, [r4, #8]
 8003278:	430b      	orrs	r3, r1
 800327a:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800327c:	6823      	ldr	r3, [r4, #0]
 800327e:	f013 0f10 	tst.w	r3, #16
 8003282:	d034      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003284:	4a1c      	ldr	r2, [pc, #112]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003286:	6853      	ldr	r3, [r2, #4]
 8003288:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800328c:	68e1      	ldr	r1, [r4, #12]
 800328e:	430b      	orrs	r3, r1
 8003290:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003292:	2000      	movs	r0, #0
 8003294:	e02c      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x108>
    FlagStatus pwrclkchanged = RESET;
 8003296:	2500      	movs	r5, #0
 8003298:	e7be      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800329a:	4a18      	ldr	r2, [pc, #96]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x114>)
 800329c:	6813      	ldr	r3, [r2, #0]
 800329e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80032a4:	f7fe fe80 	bl	8001fa8 <HAL_GetTick>
 80032a8:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032aa:	4f14      	ldr	r7, [pc, #80]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	f413 7f80 	tst.w	r3, #256	; 0x100
 80032b2:	d1b6      	bne.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032b4:	f7fe fe78 	bl	8001fa8 <HAL_GetTick>
 80032b8:	1b80      	subs	r0, r0, r6
 80032ba:	2864      	cmp	r0, #100	; 0x64
 80032bc:	d9f6      	bls.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xc4>
          return HAL_TIMEOUT;
 80032be:	2003      	movs	r0, #3
 80032c0:	e016      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        tickstart = HAL_GetTick();
 80032c2:	f7fe fe71 	bl	8001fa8 <HAL_GetTick>
 80032c6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c8:	4f0b      	ldr	r7, [pc, #44]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ca:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ce:	6a3b      	ldr	r3, [r7, #32]
 80032d0:	f013 0f02 	tst.w	r3, #2
 80032d4:	d1be      	bne.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d6:	f7fe fe67 	bl	8001fa8 <HAL_GetTick>
 80032da:	1b80      	subs	r0, r0, r6
 80032dc:	4540      	cmp	r0, r8
 80032de:	d9f6      	bls.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xe6>
            return HAL_TIMEOUT;
 80032e0:	2003      	movs	r0, #3
 80032e2:	e005      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x108>
      __HAL_RCC_PWR_CLK_DISABLE();
 80032e4:	69d3      	ldr	r3, [r2, #28]
 80032e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ea:	61d3      	str	r3, [r2, #28]
 80032ec:	e7bb      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x7e>
  return HAL_OK;
 80032ee:	2000      	movs	r0, #0
}
 80032f0:	b002      	add	sp, #8
 80032f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032f6:	bf00      	nop
 80032f8:	40021000 	.word	0x40021000
 80032fc:	40007000 	.word	0x40007000
 8003300:	42420000 	.word	0x42420000

08003304 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003304:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003306:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003308:	6a02      	ldr	r2, [r0, #32]
 800330a:	f022 0201 	bic.w	r2, r2, #1
 800330e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003310:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003312:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003314:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003318:	680d      	ldr	r5, [r1, #0]
 800331a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800331c:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003320:	688d      	ldr	r5, [r1, #8]
 8003322:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003324:	4d0b      	ldr	r5, [pc, #44]	; (8003354 <TIM_OC1_SetConfig+0x50>)
 8003326:	42a8      	cmp	r0, r5
 8003328:	d006      	beq.n	8003338 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800332a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800332c:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800332e:	684a      	ldr	r2, [r1, #4]
 8003330:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003332:	6203      	str	r3, [r0, #32]
}
 8003334:	bc70      	pop	{r4, r5, r6}
 8003336:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8003338:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800333c:	68cd      	ldr	r5, [r1, #12]
 800333e:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8003340:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003344:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8003348:	694d      	ldr	r5, [r1, #20]
 800334a:	698e      	ldr	r6, [r1, #24]
 800334c:	4335      	orrs	r5, r6
 800334e:	432c      	orrs	r4, r5
 8003350:	e7eb      	b.n	800332a <TIM_OC1_SetConfig+0x26>
 8003352:	bf00      	nop
 8003354:	40012c00 	.word	0x40012c00

08003358 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003358:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800335a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800335c:	6a02      	ldr	r2, [r0, #32]
 800335e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003362:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003364:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003366:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003368:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800336c:	680d      	ldr	r5, [r1, #0]
 800336e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003370:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003374:	688d      	ldr	r5, [r1, #8]
 8003376:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800337a:	4d0c      	ldr	r5, [pc, #48]	; (80033ac <TIM_OC3_SetConfig+0x54>)
 800337c:	42a8      	cmp	r0, r5
 800337e:	d006      	beq.n	800338e <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003380:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003382:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003384:	684a      	ldr	r2, [r1, #4]
 8003386:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003388:	6203      	str	r3, [r0, #32]
}
 800338a:	bc70      	pop	{r4, r5, r6}
 800338c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 800338e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003392:	68cd      	ldr	r5, [r1, #12]
 8003394:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8003398:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800339c:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80033a0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80033a2:	698e      	ldr	r6, [r1, #24]
 80033a4:	4335      	orrs	r5, r6
 80033a6:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 80033aa:	e7e9      	b.n	8003380 <TIM_OC3_SetConfig+0x28>
 80033ac:	40012c00 	.word	0x40012c00

080033b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033b0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033b2:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033b4:	6a02      	ldr	r2, [r0, #32]
 80033b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033ba:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033bc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033be:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033c0:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033c4:	680d      	ldr	r5, [r1, #0]
 80033c6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033ce:	688d      	ldr	r5, [r1, #8]
 80033d0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033d4:	4d07      	ldr	r5, [pc, #28]	; (80033f4 <TIM_OC4_SetConfig+0x44>)
 80033d6:	42a8      	cmp	r0, r5
 80033d8:	d006      	beq.n	80033e8 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033da:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033dc:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033de:	684a      	ldr	r2, [r1, #4]
 80033e0:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033e2:	6203      	str	r3, [r0, #32]
}
 80033e4:	bc30      	pop	{r4, r5}
 80033e6:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033e8:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033ec:	694d      	ldr	r5, [r1, #20]
 80033ee:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80033f2:	e7f2      	b.n	80033da <TIM_OC4_SetConfig+0x2a>
 80033f4:	40012c00 	.word	0x40012c00

080033f8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80033f8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d127      	bne.n	8003452 <HAL_TIM_Base_Start_IT+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003402:	2302      	movs	r3, #2
 8003404:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003408:	6802      	ldr	r2, [r0, #0]
 800340a:	68d3      	ldr	r3, [r2, #12]
 800340c:	f043 0301 	orr.w	r3, r3, #1
 8003410:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003412:	6803      	ldr	r3, [r0, #0]
 8003414:	4a11      	ldr	r2, [pc, #68]	; (800345c <HAL_TIM_Base_Start_IT+0x64>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d010      	beq.n	800343c <HAL_TIM_Base_Start_IT+0x44>
 800341a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800341e:	d00d      	beq.n	800343c <HAL_TIM_Base_Start_IT+0x44>
 8003420:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003424:	4293      	cmp	r3, r2
 8003426:	d009      	beq.n	800343c <HAL_TIM_Base_Start_IT+0x44>
 8003428:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800342c:	4293      	cmp	r3, r2
 800342e:	d005      	beq.n	800343c <HAL_TIM_Base_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	f042 0201 	orr.w	r2, r2, #1
 8003436:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003438:	2000      	movs	r0, #0
 800343a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800343c:	689a      	ldr	r2, [r3, #8]
 800343e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003442:	2a06      	cmp	r2, #6
 8003444:	d007      	beq.n	8003456 <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	f042 0201 	orr.w	r2, r2, #1
 800344c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800344e:	2000      	movs	r0, #0
 8003450:	4770      	bx	lr
    return HAL_ERROR;
 8003452:	2001      	movs	r0, #1
 8003454:	4770      	bx	lr
  return HAL_OK;
 8003456:	2000      	movs	r0, #0
}
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	40012c00 	.word	0x40012c00

08003460 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003460:	6802      	ldr	r2, [r0, #0]
 8003462:	68d3      	ldr	r3, [r2, #12]
 8003464:	f023 0301 	bic.w	r3, r3, #1
 8003468:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 800346a:	6803      	ldr	r3, [r0, #0]
 800346c:	6a19      	ldr	r1, [r3, #32]
 800346e:	f241 1211 	movw	r2, #4369	; 0x1111
 8003472:	4211      	tst	r1, r2
 8003474:	d108      	bne.n	8003488 <HAL_TIM_Base_Stop_IT+0x28>
 8003476:	6a19      	ldr	r1, [r3, #32]
 8003478:	f240 4244 	movw	r2, #1092	; 0x444
 800347c:	4211      	tst	r1, r2
 800347e:	d103      	bne.n	8003488 <HAL_TIM_Base_Stop_IT+0x28>
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	f022 0201 	bic.w	r2, r2, #1
 8003486:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8003488:	2301      	movs	r3, #1
 800348a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 800348e:	2000      	movs	r0, #0
 8003490:	4770      	bx	lr

08003492 <HAL_TIM_PWM_MspInit>:
}
 8003492:	4770      	bx	lr

08003494 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8003494:	4770      	bx	lr

08003496 <HAL_TIM_IC_CaptureCallback>:
}
 8003496:	4770      	bx	lr

08003498 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8003498:	4770      	bx	lr

0800349a <HAL_TIM_TriggerCallback>:
}
 800349a:	4770      	bx	lr

0800349c <HAL_TIM_IRQHandler>:
{
 800349c:	b510      	push	{r4, lr}
 800349e:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034a0:	6803      	ldr	r3, [r0, #0]
 80034a2:	691a      	ldr	r2, [r3, #16]
 80034a4:	f012 0f02 	tst.w	r2, #2
 80034a8:	d011      	beq.n	80034ce <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034aa:	68da      	ldr	r2, [r3, #12]
 80034ac:	f012 0f02 	tst.w	r2, #2
 80034b0:	d00d      	beq.n	80034ce <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034b2:	f06f 0202 	mvn.w	r2, #2
 80034b6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034b8:	2301      	movs	r3, #1
 80034ba:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034bc:	6803      	ldr	r3, [r0, #0]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	f013 0f03 	tst.w	r3, #3
 80034c4:	d070      	beq.n	80035a8 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80034c6:	f7ff ffe6 	bl	8003496 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ca:	2300      	movs	r3, #0
 80034cc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034ce:	6823      	ldr	r3, [r4, #0]
 80034d0:	691a      	ldr	r2, [r3, #16]
 80034d2:	f012 0f04 	tst.w	r2, #4
 80034d6:	d012      	beq.n	80034fe <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	f012 0f04 	tst.w	r2, #4
 80034de:	d00e      	beq.n	80034fe <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034e0:	f06f 0204 	mvn.w	r2, #4
 80034e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034e6:	2302      	movs	r3, #2
 80034e8:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034ea:	6823      	ldr	r3, [r4, #0]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	f413 7f40 	tst.w	r3, #768	; 0x300
 80034f2:	d05f      	beq.n	80035b4 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80034f4:	4620      	mov	r0, r4
 80034f6:	f7ff ffce 	bl	8003496 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034fa:	2300      	movs	r3, #0
 80034fc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034fe:	6823      	ldr	r3, [r4, #0]
 8003500:	691a      	ldr	r2, [r3, #16]
 8003502:	f012 0f08 	tst.w	r2, #8
 8003506:	d012      	beq.n	800352e <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	f012 0f08 	tst.w	r2, #8
 800350e:	d00e      	beq.n	800352e <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003510:	f06f 0208 	mvn.w	r2, #8
 8003514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003516:	2304      	movs	r3, #4
 8003518:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800351a:	6823      	ldr	r3, [r4, #0]
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	f013 0f03 	tst.w	r3, #3
 8003522:	d04e      	beq.n	80035c2 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8003524:	4620      	mov	r0, r4
 8003526:	f7ff ffb6 	bl	8003496 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800352a:	2300      	movs	r3, #0
 800352c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800352e:	6823      	ldr	r3, [r4, #0]
 8003530:	691a      	ldr	r2, [r3, #16]
 8003532:	f012 0f10 	tst.w	r2, #16
 8003536:	d012      	beq.n	800355e <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003538:	68da      	ldr	r2, [r3, #12]
 800353a:	f012 0f10 	tst.w	r2, #16
 800353e:	d00e      	beq.n	800355e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003540:	f06f 0210 	mvn.w	r2, #16
 8003544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003546:	2308      	movs	r3, #8
 8003548:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800354a:	6823      	ldr	r3, [r4, #0]
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003552:	d03d      	beq.n	80035d0 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8003554:	4620      	mov	r0, r4
 8003556:	f7ff ff9e 	bl	8003496 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800355a:	2300      	movs	r3, #0
 800355c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800355e:	6823      	ldr	r3, [r4, #0]
 8003560:	691a      	ldr	r2, [r3, #16]
 8003562:	f012 0f01 	tst.w	r2, #1
 8003566:	d003      	beq.n	8003570 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003568:	68da      	ldr	r2, [r3, #12]
 800356a:	f012 0f01 	tst.w	r2, #1
 800356e:	d136      	bne.n	80035de <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003570:	6823      	ldr	r3, [r4, #0]
 8003572:	691a      	ldr	r2, [r3, #16]
 8003574:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003578:	d003      	beq.n	8003582 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800357a:	68da      	ldr	r2, [r3, #12]
 800357c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003580:	d134      	bne.n	80035ec <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003582:	6823      	ldr	r3, [r4, #0]
 8003584:	691a      	ldr	r2, [r3, #16]
 8003586:	f012 0f40 	tst.w	r2, #64	; 0x40
 800358a:	d003      	beq.n	8003594 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800358c:	68da      	ldr	r2, [r3, #12]
 800358e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003592:	d132      	bne.n	80035fa <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003594:	6823      	ldr	r3, [r4, #0]
 8003596:	691a      	ldr	r2, [r3, #16]
 8003598:	f012 0f20 	tst.w	r2, #32
 800359c:	d003      	beq.n	80035a6 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800359e:	68da      	ldr	r2, [r3, #12]
 80035a0:	f012 0f20 	tst.w	r2, #32
 80035a4:	d130      	bne.n	8003608 <HAL_TIM_IRQHandler+0x16c>
}
 80035a6:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035a8:	f7ff ff74 	bl	8003494 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ac:	4620      	mov	r0, r4
 80035ae:	f7ff ff73 	bl	8003498 <HAL_TIM_PWM_PulseFinishedCallback>
 80035b2:	e78a      	b.n	80034ca <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035b4:	4620      	mov	r0, r4
 80035b6:	f7ff ff6d 	bl	8003494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ba:	4620      	mov	r0, r4
 80035bc:	f7ff ff6c 	bl	8003498 <HAL_TIM_PWM_PulseFinishedCallback>
 80035c0:	e79b      	b.n	80034fa <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035c2:	4620      	mov	r0, r4
 80035c4:	f7ff ff66 	bl	8003494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035c8:	4620      	mov	r0, r4
 80035ca:	f7ff ff65 	bl	8003498 <HAL_TIM_PWM_PulseFinishedCallback>
 80035ce:	e7ac      	b.n	800352a <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035d0:	4620      	mov	r0, r4
 80035d2:	f7ff ff5f 	bl	8003494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d6:	4620      	mov	r0, r4
 80035d8:	f7ff ff5e 	bl	8003498 <HAL_TIM_PWM_PulseFinishedCallback>
 80035dc:	e7bd      	b.n	800355a <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035de:	f06f 0201 	mvn.w	r2, #1
 80035e2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80035e4:	4620      	mov	r0, r4
 80035e6:	f7fe f9b5 	bl	8001954 <HAL_TIM_PeriodElapsedCallback>
 80035ea:	e7c1      	b.n	8003570 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035f0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80035f2:	4620      	mov	r0, r4
 80035f4:	f000 fa49 	bl	8003a8a <HAL_TIMEx_BreakCallback>
 80035f8:	e7c3      	b.n	8003582 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035fe:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003600:	4620      	mov	r0, r4
 8003602:	f7ff ff4a 	bl	800349a <HAL_TIM_TriggerCallback>
 8003606:	e7c5      	b.n	8003594 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003608:	f06f 0220 	mvn.w	r2, #32
 800360c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800360e:	4620      	mov	r0, r4
 8003610:	f000 fa3a 	bl	8003a88 <HAL_TIMEx_CommutCallback>
}
 8003614:	e7c7      	b.n	80035a6 <HAL_TIM_IRQHandler+0x10a>
	...

08003618 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003618:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800361a:	4a25      	ldr	r2, [pc, #148]	; (80036b0 <TIM_Base_SetConfig+0x98>)
 800361c:	4290      	cmp	r0, r2
 800361e:	d014      	beq.n	800364a <TIM_Base_SetConfig+0x32>
 8003620:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003624:	d02b      	beq.n	800367e <TIM_Base_SetConfig+0x66>
 8003626:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800362a:	4290      	cmp	r0, r2
 800362c:	d022      	beq.n	8003674 <TIM_Base_SetConfig+0x5c>
 800362e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003632:	4290      	cmp	r0, r2
 8003634:	d037      	beq.n	80036a6 <TIM_Base_SetConfig+0x8e>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003636:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800363a:	694a      	ldr	r2, [r1, #20]
 800363c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800363e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003640:	688b      	ldr	r3, [r1, #8]
 8003642:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003644:	680b      	ldr	r3, [r1, #0]
 8003646:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003648:	e02a      	b.n	80036a0 <TIM_Base_SetConfig+0x88>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800364a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800364e:	684a      	ldr	r2, [r1, #4]
 8003650:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8003652:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003656:	68ca      	ldr	r2, [r1, #12]
 8003658:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800365a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800365e:	694a      	ldr	r2, [r1, #20]
 8003660:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003662:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003664:	688b      	ldr	r3, [r1, #8]
 8003666:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003668:	680b      	ldr	r3, [r1, #0]
 800366a:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800366c:	690a      	ldr	r2, [r1, #16]
 800366e:	4b10      	ldr	r3, [pc, #64]	; (80036b0 <TIM_Base_SetConfig+0x98>)
 8003670:	631a      	str	r2, [r3, #48]	; 0x30
 8003672:	e015      	b.n	80036a0 <TIM_Base_SetConfig+0x88>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003678:	684a      	ldr	r2, [r1, #4]
 800367a:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800367c:	e003      	b.n	8003686 <TIM_Base_SetConfig+0x6e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800367e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003682:	684a      	ldr	r2, [r1, #4]
 8003684:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8003686:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800368a:	68ca      	ldr	r2, [r1, #12]
 800368c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800368e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003692:	694a      	ldr	r2, [r1, #20]
 8003694:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003696:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003698:	688b      	ldr	r3, [r1, #8]
 800369a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800369c:	680b      	ldr	r3, [r1, #0]
 800369e:	6283      	str	r3, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80036a0:	2301      	movs	r3, #1
 80036a2:	6143      	str	r3, [r0, #20]
}
 80036a4:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80036aa:	684a      	ldr	r2, [r1, #4]
 80036ac:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036ae:	e7ea      	b.n	8003686 <TIM_Base_SetConfig+0x6e>
 80036b0:	40012c00 	.word	0x40012c00

080036b4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80036b4:	b340      	cbz	r0, 8003708 <HAL_TIM_Base_Init+0x54>
{
 80036b6:	b510      	push	{r4, lr}
 80036b8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80036ba:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80036be:	b1f3      	cbz	r3, 80036fe <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80036c0:	2302      	movs	r3, #2
 80036c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036c6:	4621      	mov	r1, r4
 80036c8:	f851 0b04 	ldr.w	r0, [r1], #4
 80036cc:	f7ff ffa4 	bl	8003618 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036d0:	2301      	movs	r3, #1
 80036d2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036d6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80036da:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80036de:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80036e2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036ee:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80036f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80036f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80036fa:	2000      	movs	r0, #0
}
 80036fc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80036fe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003702:	f7fe fadb 	bl	8001cbc <HAL_TIM_Base_MspInit>
 8003706:	e7db      	b.n	80036c0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003708:	2001      	movs	r0, #1
}
 800370a:	4770      	bx	lr

0800370c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800370c:	b340      	cbz	r0, 8003760 <HAL_TIM_PWM_Init+0x54>
{
 800370e:	b510      	push	{r4, lr}
 8003710:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003712:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003716:	b1f3      	cbz	r3, 8003756 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003718:	2302      	movs	r3, #2
 800371a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800371e:	4621      	mov	r1, r4
 8003720:	f851 0b04 	ldr.w	r0, [r1], #4
 8003724:	f7ff ff78 	bl	8003618 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003728:	2301      	movs	r3, #1
 800372a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800372e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003732:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003736:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800373a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800373e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003742:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003746:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800374a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800374e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003752:	2000      	movs	r0, #0
}
 8003754:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003756:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800375a:	f7ff fe9a 	bl	8003492 <HAL_TIM_PWM_MspInit>
 800375e:	e7db      	b.n	8003718 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8003760:	2001      	movs	r0, #1
}
 8003762:	4770      	bx	lr

08003764 <TIM_OC2_SetConfig>:
{
 8003764:	b470      	push	{r4, r5, r6}
  tmpccer = TIMx->CCER;
 8003766:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003768:	6a02      	ldr	r2, [r0, #32]
 800376a:	f022 0210 	bic.w	r2, r2, #16
 800376e:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003770:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003772:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003774:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003778:	680d      	ldr	r5, [r1, #0]
 800377a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800377e:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003782:	688d      	ldr	r5, [r1, #8]
 8003784:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003788:	4d0c      	ldr	r5, [pc, #48]	; (80037bc <TIM_OC2_SetConfig+0x58>)
 800378a:	42a8      	cmp	r0, r5
 800378c:	d006      	beq.n	800379c <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 800378e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003790:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003792:	684a      	ldr	r2, [r1, #4]
 8003794:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003796:	6203      	str	r3, [r0, #32]
}
 8003798:	bc70      	pop	{r4, r5, r6}
 800379a:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 800379c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037a0:	68cd      	ldr	r5, [r1, #12]
 80037a2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80037a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037aa:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037ae:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037b0:	698e      	ldr	r6, [r1, #24]
 80037b2:	4335      	orrs	r5, r6
 80037b4:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 80037b8:	e7e9      	b.n	800378e <TIM_OC2_SetConfig+0x2a>
 80037ba:	bf00      	nop
 80037bc:	40012c00 	.word	0x40012c00

080037c0 <HAL_TIM_PWM_ConfigChannel>:
{
 80037c0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80037c2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d066      	beq.n	8003898 <HAL_TIM_PWM_ConfigChannel+0xd8>
 80037ca:	4604      	mov	r4, r0
 80037cc:	460d      	mov	r5, r1
 80037ce:	2301      	movs	r3, #1
 80037d0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80037d4:	2a0c      	cmp	r2, #12
 80037d6:	d85a      	bhi.n	800388e <HAL_TIM_PWM_ConfigChannel+0xce>
 80037d8:	e8df f002 	tbb	[pc, r2]
 80037dc:	59595907 	.word	0x59595907
 80037e0:	5959591b 	.word	0x5959591b
 80037e4:	59595930 	.word	0x59595930
 80037e8:	44          	.byte	0x44
 80037e9:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037ea:	6800      	ldr	r0, [r0, #0]
 80037ec:	f7ff fd8a 	bl	8003304 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037f0:	6822      	ldr	r2, [r4, #0]
 80037f2:	6993      	ldr	r3, [r2, #24]
 80037f4:	f043 0308 	orr.w	r3, r3, #8
 80037f8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037fa:	6822      	ldr	r2, [r4, #0]
 80037fc:	6993      	ldr	r3, [r2, #24]
 80037fe:	f023 0304 	bic.w	r3, r3, #4
 8003802:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003804:	6822      	ldr	r2, [r4, #0]
 8003806:	6993      	ldr	r3, [r2, #24]
 8003808:	6929      	ldr	r1, [r5, #16]
 800380a:	430b      	orrs	r3, r1
 800380c:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800380e:	2000      	movs	r0, #0
      break;
 8003810:	e03e      	b.n	8003890 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003812:	6800      	ldr	r0, [r0, #0]
 8003814:	f7ff ffa6 	bl	8003764 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003818:	6822      	ldr	r2, [r4, #0]
 800381a:	6993      	ldr	r3, [r2, #24]
 800381c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003820:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003822:	6822      	ldr	r2, [r4, #0]
 8003824:	6993      	ldr	r3, [r2, #24]
 8003826:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800382a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800382c:	6822      	ldr	r2, [r4, #0]
 800382e:	6993      	ldr	r3, [r2, #24]
 8003830:	6929      	ldr	r1, [r5, #16]
 8003832:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003836:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003838:	2000      	movs	r0, #0
      break;
 800383a:	e029      	b.n	8003890 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800383c:	6800      	ldr	r0, [r0, #0]
 800383e:	f7ff fd8b 	bl	8003358 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003842:	6822      	ldr	r2, [r4, #0]
 8003844:	69d3      	ldr	r3, [r2, #28]
 8003846:	f043 0308 	orr.w	r3, r3, #8
 800384a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800384c:	6822      	ldr	r2, [r4, #0]
 800384e:	69d3      	ldr	r3, [r2, #28]
 8003850:	f023 0304 	bic.w	r3, r3, #4
 8003854:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003856:	6822      	ldr	r2, [r4, #0]
 8003858:	69d3      	ldr	r3, [r2, #28]
 800385a:	6929      	ldr	r1, [r5, #16]
 800385c:	430b      	orrs	r3, r1
 800385e:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003860:	2000      	movs	r0, #0
      break;
 8003862:	e015      	b.n	8003890 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003864:	6800      	ldr	r0, [r0, #0]
 8003866:	f7ff fda3 	bl	80033b0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800386a:	6822      	ldr	r2, [r4, #0]
 800386c:	69d3      	ldr	r3, [r2, #28]
 800386e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003872:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003874:	6822      	ldr	r2, [r4, #0]
 8003876:	69d3      	ldr	r3, [r2, #28]
 8003878:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800387c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800387e:	6822      	ldr	r2, [r4, #0]
 8003880:	69d3      	ldr	r3, [r2, #28]
 8003882:	6929      	ldr	r1, [r5, #16]
 8003884:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003888:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800388a:	2000      	movs	r0, #0
      break;
 800388c:	e000      	b.n	8003890 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 800388e:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8003890:	2300      	movs	r3, #0
 8003892:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003896:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8003898:	2002      	movs	r0, #2
 800389a:	e7fc      	b.n	8003896 <HAL_TIM_PWM_ConfigChannel+0xd6>

0800389c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800389c:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800389e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038a0:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038a4:	430a      	orrs	r2, r1
 80038a6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80038aa:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038ae:	6082      	str	r2, [r0, #8]
}
 80038b0:	bc10      	pop	{r4}
 80038b2:	4770      	bx	lr

080038b4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80038b4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	f000 80ae 	beq.w	8003a1a <HAL_TIM_ConfigClockSource+0x166>
{
 80038be:	b570      	push	{r4, r5, r6, lr}
 80038c0:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80038c2:	2301      	movs	r3, #1
 80038c4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80038c8:	2302      	movs	r3, #2
 80038ca:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80038ce:	6802      	ldr	r2, [r0, #0]
 80038d0:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80038da:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80038dc:	680b      	ldr	r3, [r1, #0]
 80038de:	2b60      	cmp	r3, #96	; 0x60
 80038e0:	d060      	beq.n	80039a4 <HAL_TIM_ConfigClockSource+0xf0>
 80038e2:	d83d      	bhi.n	8003960 <HAL_TIM_ConfigClockSource+0xac>
 80038e4:	2b40      	cmp	r3, #64	; 0x40
 80038e6:	d079      	beq.n	80039dc <HAL_TIM_ConfigClockSource+0x128>
 80038e8:	d91c      	bls.n	8003924 <HAL_TIM_ConfigClockSource+0x70>
 80038ea:	2b50      	cmp	r3, #80	; 0x50
 80038ec:	d136      	bne.n	800395c <HAL_TIM_ConfigClockSource+0xa8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ee:	6803      	ldr	r3, [r0, #0]
 80038f0:	6848      	ldr	r0, [r1, #4]
 80038f2:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80038f4:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038f6:	6a1a      	ldr	r2, [r3, #32]
 80038f8:	f022 0201 	bic.w	r2, r2, #1
 80038fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038fe:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003900:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003904:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003908:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800390c:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800390e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003910:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003912:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8003914:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800391a:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800391e:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003920:	2000      	movs	r0, #0
}
 8003922:	e012      	b.n	800394a <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8003924:	2b20      	cmp	r3, #32
 8003926:	d002      	beq.n	800392e <HAL_TIM_ConfigClockSource+0x7a>
 8003928:	d90b      	bls.n	8003942 <HAL_TIM_ConfigClockSource+0x8e>
 800392a:	2b30      	cmp	r3, #48	; 0x30
 800392c:	d114      	bne.n	8003958 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800392e:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8003930:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003932:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003936:	4313      	orrs	r3, r2
 8003938:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 800393c:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800393e:	2000      	movs	r0, #0
}
 8003940:	e003      	b.n	800394a <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8003942:	f033 0210 	bics.w	r2, r3, #16
 8003946:	d0f2      	beq.n	800392e <HAL_TIM_ConfigClockSource+0x7a>
 8003948:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 800394a:	2301      	movs	r3, #1
 800394c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003950:	2300      	movs	r3, #0
 8003952:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003956:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8003958:	2001      	movs	r0, #1
 800395a:	e7f6      	b.n	800394a <HAL_TIM_ConfigClockSource+0x96>
 800395c:	2001      	movs	r0, #1
 800395e:	e7f4      	b.n	800394a <HAL_TIM_ConfigClockSource+0x96>
 8003960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003964:	d055      	beq.n	8003a12 <HAL_TIM_ConfigClockSource+0x15e>
 8003966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800396a:	d10c      	bne.n	8003986 <HAL_TIM_ConfigClockSource+0xd2>
      TIM_ETR_SetConfig(htim->Instance,
 800396c:	68cb      	ldr	r3, [r1, #12]
 800396e:	684a      	ldr	r2, [r1, #4]
 8003970:	6889      	ldr	r1, [r1, #8]
 8003972:	6800      	ldr	r0, [r0, #0]
 8003974:	f7ff ff92 	bl	800389c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003978:	6822      	ldr	r2, [r4, #0]
 800397a:	6893      	ldr	r3, [r2, #8]
 800397c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003980:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003982:	2000      	movs	r0, #0
      break;
 8003984:	e7e1      	b.n	800394a <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8003986:	2b70      	cmp	r3, #112	; 0x70
 8003988:	d145      	bne.n	8003a16 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ETR_SetConfig(htim->Instance,
 800398a:	68cb      	ldr	r3, [r1, #12]
 800398c:	684a      	ldr	r2, [r1, #4]
 800398e:	6889      	ldr	r1, [r1, #8]
 8003990:	6800      	ldr	r0, [r0, #0]
 8003992:	f7ff ff83 	bl	800389c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003996:	6822      	ldr	r2, [r4, #0]
 8003998:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800399a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800399e:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80039a0:	2000      	movs	r0, #0
      break;
 80039a2:	e7d2      	b.n	800394a <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039a4:	6803      	ldr	r3, [r0, #0]
 80039a6:	684d      	ldr	r5, [r1, #4]
 80039a8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80039aa:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039ac:	6a18      	ldr	r0, [r3, #32]
 80039ae:	f020 0010 	bic.w	r0, r0, #16
 80039b2:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039b4:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039b6:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039ba:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039be:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80039c2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80039c6:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80039c8:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039ca:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80039cc:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80039ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039d2:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 80039d6:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80039d8:	2000      	movs	r0, #0
}
 80039da:	e7b6      	b.n	800394a <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039dc:	6803      	ldr	r3, [r0, #0]
 80039de:	6848      	ldr	r0, [r1, #4]
 80039e0:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80039e2:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039e4:	6a1a      	ldr	r2, [r3, #32]
 80039e6:	f022 0201 	bic.w	r2, r2, #1
 80039ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039ec:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039ee:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039f2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039f6:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80039fa:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80039fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039fe:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a00:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8003a02:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a08:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8003a0c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003a0e:	2000      	movs	r0, #0
}
 8003a10:	e79b      	b.n	800394a <HAL_TIM_ConfigClockSource+0x96>
  HAL_StatusTypeDef status = HAL_OK;
 8003a12:	2000      	movs	r0, #0
 8003a14:	e799      	b.n	800394a <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8003a16:	2001      	movs	r0, #1
 8003a18:	e797      	b.n	800394a <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 8003a1a:	2002      	movs	r0, #2
}
 8003a1c:	4770      	bx	lr
	...

08003a20 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a20:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d02b      	beq.n	8003a80 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 8003a28:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a30:	2302      	movs	r3, #2
 8003a32:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a36:	6804      	ldr	r4, [r0, #0]
 8003a38:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a3a:	68a2      	ldr	r2, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a40:	680d      	ldr	r5, [r1, #0]
 8003a42:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a44:	6063      	str	r3, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a46:	6803      	ldr	r3, [r0, #0]
 8003a48:	4c0e      	ldr	r4, [pc, #56]	; (8003a84 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8003a4a:	42a3      	cmp	r3, r4
 8003a4c:	d00a      	beq.n	8003a64 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8003a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a52:	d007      	beq.n	8003a64 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8003a54:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8003a58:	42a3      	cmp	r3, r4
 8003a5a:	d003      	beq.n	8003a64 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8003a5c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003a60:	42a3      	cmp	r3, r4
 8003a62:	d104      	bne.n	8003a6e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a68:	6849      	ldr	r1, [r1, #4]
 8003a6a:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a74:	2300      	movs	r3, #0
 8003a76:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003a7a:	4618      	mov	r0, r3
}
 8003a7c:	bc30      	pop	{r4, r5}
 8003a7e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003a80:	2002      	movs	r0, #2
}
 8003a82:	4770      	bx	lr
 8003a84:	40012c00 	.word	0x40012c00

08003a88 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a88:	4770      	bx	lr

08003a8a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a8a:	4770      	bx	lr

08003a8c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a8c:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8e:	f102 030c 	add.w	r3, r2, #12
 8003a92:	e853 3f00 	ldrex	r3, [r3]
 8003a96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9a:	320c      	adds	r2, #12
 8003a9c:	e842 3100 	strex	r1, r3, [r2]
 8003aa0:	2900      	cmp	r1, #0
 8003aa2:	d1f3      	bne.n	8003a8c <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aa4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa6:	f102 0314 	add.w	r3, r2, #20
 8003aaa:	e853 3f00 	ldrex	r3, [r3]
 8003aae:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab2:	3214      	adds	r2, #20
 8003ab4:	e842 3100 	strex	r1, r3, [r2]
 8003ab8:	2900      	cmp	r1, #0
 8003aba:	d1f3      	bne.n	8003aa4 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003abc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d005      	beq.n	8003ace <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ac2:	2320      	movs	r3, #32
 8003ac4:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	6303      	str	r3, [r0, #48]	; 0x30
}
 8003acc:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ace:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad0:	f102 030c 	add.w	r3, r2, #12
 8003ad4:	e853 3f00 	ldrex	r3, [r3]
 8003ad8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003adc:	320c      	adds	r2, #12
 8003ade:	e842 3100 	strex	r1, r3, [r2]
 8003ae2:	2900      	cmp	r1, #0
 8003ae4:	d1f3      	bne.n	8003ace <UART_EndRxTransfer+0x42>
 8003ae6:	e7ec      	b.n	8003ac2 <UART_EndRxTransfer+0x36>

08003ae8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ae8:	b510      	push	{r4, lr}
 8003aea:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003aec:	6802      	ldr	r2, [r0, #0]
 8003aee:	6913      	ldr	r3, [r2, #16]
 8003af0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003af4:	68c1      	ldr	r1, [r0, #12]
 8003af6:	430b      	orrs	r3, r1
 8003af8:	6113      	str	r3, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
  MODIFY_REG(huart->Instance->CR1,
 8003afa:	6801      	ldr	r1, [r0, #0]
 8003afc:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003afe:	6883      	ldr	r3, [r0, #8]
 8003b00:	6900      	ldr	r0, [r0, #16]
 8003b02:	4303      	orrs	r3, r0
 8003b04:	6960      	ldr	r0, [r4, #20]
 8003b06:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8003b08:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8003b0c:	f022 020c 	bic.w	r2, r2, #12
 8003b10:	4313      	orrs	r3, r2
 8003b12:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b14:	6822      	ldr	r2, [r4, #0]
 8003b16:	6953      	ldr	r3, [r2, #20]
 8003b18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b1c:	69a1      	ldr	r1, [r4, #24]
 8003b1e:	430b      	orrs	r3, r1
 8003b20:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8003b22:	6822      	ldr	r2, [r4, #0]
 8003b24:	4b11      	ldr	r3, [pc, #68]	; (8003b6c <UART_SetConfig+0x84>)
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d01b      	beq.n	8003b62 <UART_SetConfig+0x7a>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b2a:	f7ff fb1f 	bl	800316c <HAL_RCC_GetPCLK1Freq>
 8003b2e:	4603      	mov	r3, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b30:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003b34:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003b38:	6862      	ldr	r2, [r4, #4]
 8003b3a:	0092      	lsls	r2, r2, #2
 8003b3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b40:	6820      	ldr	r0, [r4, #0]
 8003b42:	490b      	ldr	r1, [pc, #44]	; (8003b70 <UART_SetConfig+0x88>)
 8003b44:	fba1 4203 	umull	r4, r2, r1, r3
 8003b48:	0952      	lsrs	r2, r2, #5
 8003b4a:	2464      	movs	r4, #100	; 0x64
 8003b4c:	fb04 3312 	mls	r3, r4, r2, r3
 8003b50:	011b      	lsls	r3, r3, #4
 8003b52:	3332      	adds	r3, #50	; 0x32
 8003b54:	fba1 1303 	umull	r1, r3, r1, r3
 8003b58:	0112      	lsls	r2, r2, #4
 8003b5a:	eb02 1353 	add.w	r3, r2, r3, lsr #5
 8003b5e:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8003b60:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b62:	f7ff fb13 	bl	800318c <HAL_RCC_GetPCLK2Freq>
 8003b66:	4603      	mov	r3, r0
 8003b68:	e7e2      	b.n	8003b30 <UART_SetConfig+0x48>
 8003b6a:	bf00      	nop
 8003b6c:	40013800 	.word	0x40013800
 8003b70:	51eb851f 	.word	0x51eb851f

08003b74 <HAL_UART_Init>:
  if (huart == NULL)
 8003b74:	b360      	cbz	r0, 8003bd0 <HAL_UART_Init+0x5c>
{
 8003b76:	b510      	push	{r4, lr}
 8003b78:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8003b7a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003b7e:	b313      	cbz	r3, 8003bc6 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8003b80:	2324      	movs	r3, #36	; 0x24
 8003b82:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8003b86:	6822      	ldr	r2, [r4, #0]
 8003b88:	68d3      	ldr	r3, [r2, #12]
 8003b8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b8e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003b90:	4620      	mov	r0, r4
 8003b92:	f7ff ffa9 	bl	8003ae8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b96:	6822      	ldr	r2, [r4, #0]
 8003b98:	6913      	ldr	r3, [r2, #16]
 8003b9a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003b9e:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ba0:	6822      	ldr	r2, [r4, #0]
 8003ba2:	6953      	ldr	r3, [r2, #20]
 8003ba4:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8003ba8:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8003baa:	6822      	ldr	r2, [r4, #0]
 8003bac:	68d3      	ldr	r3, [r2, #12]
 8003bae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003bb2:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bb4:	2000      	movs	r0, #0
 8003bb6:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003bb8:	2320      	movs	r3, #32
 8003bba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003bbe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bc2:	6360      	str	r0, [r4, #52]	; 0x34
}
 8003bc4:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003bc6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 8003bca:	f7fe f8e7 	bl	8001d9c <HAL_UART_MspInit>
 8003bce:	e7d7      	b.n	8003b80 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8003bd0:	2001      	movs	r0, #1
}
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8003bd4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b20      	cmp	r3, #32
 8003bdc:	d110      	bne.n	8003c00 <HAL_UART_Transmit_IT+0x2c>
    if ((pData == NULL) || (Size == 0U))
 8003bde:	b189      	cbz	r1, 8003c04 <HAL_UART_Transmit_IT+0x30>
 8003be0:	b192      	cbz	r2, 8003c08 <HAL_UART_Transmit_IT+0x34>
    huart->pTxBuffPtr = pData;
 8003be2:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8003be4:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8003be6:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be8:	2300      	movs	r3, #0
 8003bea:	6443      	str	r3, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bec:	2221      	movs	r2, #33	; 0x21
 8003bee:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003bf2:	6801      	ldr	r1, [r0, #0]
 8003bf4:	68ca      	ldr	r2, [r1, #12]
 8003bf6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003bfa:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	4770      	bx	lr
    return HAL_BUSY;
 8003c00:	2002      	movs	r0, #2
 8003c02:	4770      	bx	lr
      return HAL_ERROR;
 8003c04:	2001      	movs	r0, #1
 8003c06:	4770      	bx	lr
 8003c08:	2001      	movs	r0, #1
}
 8003c0a:	4770      	bx	lr

08003c0c <HAL_UART_ErrorCallback>:
}
 8003c0c:	4770      	bx	lr

08003c0e <UART_DMAAbortOnError>:
{
 8003c0e:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c10:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8003c12:	2300      	movs	r3, #0
 8003c14:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c16:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8003c18:	f7ff fff8 	bl	8003c0c <HAL_UART_ErrorCallback>
}
 8003c1c:	bd08      	pop	{r3, pc}

08003c1e <HAL_UART_AbortReceiveCpltCallback>:
}
 8003c1e:	4770      	bx	lr

08003c20 <HAL_UART_AbortReceive_IT>:
{
 8003c20:	b510      	push	{r4, lr}
 8003c22:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c24:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c26:	f102 030c 	add.w	r3, r2, #12
 8003c2a:	e853 3f00 	ldrex	r3, [r3]
 8003c2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c32:	320c      	adds	r2, #12
 8003c34:	e842 3100 	strex	r1, r3, [r2]
 8003c38:	2900      	cmp	r1, #0
 8003c3a:	d1f3      	bne.n	8003c24 <HAL_UART_AbortReceive_IT+0x4>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c3c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3e:	f102 0314 	add.w	r3, r2, #20
 8003c42:	e853 3f00 	ldrex	r3, [r3]
 8003c46:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4a:	3214      	adds	r2, #20
 8003c4c:	e842 3100 	strex	r1, r3, [r2]
 8003c50:	2900      	cmp	r1, #0
 8003c52:	d1f3      	bne.n	8003c3c <HAL_UART_AbortReceive_IT+0x1c>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c54:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d01c      	beq.n	8003c94 <HAL_UART_AbortReceive_IT+0x74>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c5a:	6823      	ldr	r3, [r4, #0]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003c62:	d02e      	beq.n	8003cc2 <HAL_UART_AbortReceive_IT+0xa2>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c64:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c66:	f102 0314 	add.w	r3, r2, #20
 8003c6a:	e853 3f00 	ldrex	r3, [r3]
 8003c6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c72:	3214      	adds	r2, #20
 8003c74:	e842 3100 	strex	r1, r3, [r2]
 8003c78:	2900      	cmp	r1, #0
 8003c7a:	d1f3      	bne.n	8003c64 <HAL_UART_AbortReceive_IT+0x44>
    if (huart->hdmarx != NULL)
 8003c7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003c7e:	b1b3      	cbz	r3, 8003cae <HAL_UART_AbortReceive_IT+0x8e>
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8003c80:	4a15      	ldr	r2, [pc, #84]	; (8003cd8 <HAL_UART_AbortReceive_IT+0xb8>)
 8003c82:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c84:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003c86:	f7fe fd3d 	bl	8002704 <HAL_DMA_Abort_IT>
 8003c8a:	b318      	cbz	r0, 8003cd4 <HAL_UART_AbortReceive_IT+0xb4>
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c8c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003c8e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003c90:	4798      	blx	r3
 8003c92:	e01f      	b.n	8003cd4 <HAL_UART_AbortReceive_IT+0xb4>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8003c94:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c96:	f102 030c 	add.w	r3, r2, #12
 8003c9a:	e853 3f00 	ldrex	r3, [r3]
 8003c9e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca2:	320c      	adds	r2, #12
 8003ca4:	e842 3100 	strex	r1, r3, [r2]
 8003ca8:	2900      	cmp	r1, #0
 8003caa:	d1f3      	bne.n	8003c94 <HAL_UART_AbortReceive_IT+0x74>
 8003cac:	e7d5      	b.n	8003c5a <HAL_UART_AbortReceive_IT+0x3a>
      huart->RxXferCount = 0x00U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	85e3      	strh	r3, [r4, #46]	; 0x2e
      huart->RxState = HAL_UART_STATE_READY;
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cb8:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_UART_AbortReceiveCpltCallback(huart);
 8003cba:	4620      	mov	r0, r4
 8003cbc:	f7ff ffaf 	bl	8003c1e <HAL_UART_AbortReceiveCpltCallback>
 8003cc0:	e008      	b.n	8003cd4 <HAL_UART_AbortReceive_IT+0xb4>
    huart->RxXferCount = 0x00U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	85e3      	strh	r3, [r4, #46]	; 0x2e
    huart->RxState = HAL_UART_STATE_READY;
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ccc:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_UART_AbortReceiveCpltCallback(huart);
 8003cce:	4620      	mov	r0, r4
 8003cd0:	f7ff ffa5 	bl	8003c1e <HAL_UART_AbortReceiveCpltCallback>
}
 8003cd4:	2000      	movs	r0, #0
 8003cd6:	bd10      	pop	{r4, pc}
 8003cd8:	08003cdd 	.word	0x08003cdd

08003cdc <UART_DMARxOnlyAbortCallback>:
{
 8003cdc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cde:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->RxState = HAL_UART_STATE_READY;
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cea:	6303      	str	r3, [r0, #48]	; 0x30
  HAL_UART_AbortReceiveCpltCallback(huart);
 8003cec:	f7ff ff97 	bl	8003c1e <HAL_UART_AbortReceiveCpltCallback>
}
 8003cf0:	bd08      	pop	{r3, pc}

08003cf2 <HAL_UARTEx_RxEventCallback>:
}
 8003cf2:	4770      	bx	lr

08003cf4 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cf4:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b22      	cmp	r3, #34	; 0x22
 8003cfc:	d11e      	bne.n	8003d3c <UART_Receive_IT+0x48>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cfe:	6883      	ldr	r3, [r0, #8]
 8003d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d04:	d006      	beq.n	8003d14 <UART_Receive_IT+0x20>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d06:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d08:	b183      	cbz	r3, 8003d2c <UART_Receive_IT+0x38>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d0a:	6803      	ldr	r3, [r0, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d12:	e01b      	b.n	8003d4c <UART_Receive_IT+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d14:	6903      	ldr	r3, [r0, #16]
 8003d16:	b9ab      	cbnz	r3, 8003d44 <UART_Receive_IT+0x50>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d18:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d1a:	6803      	ldr	r3, [r0, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d22:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8003d24:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003d26:	3302      	adds	r3, #2
 8003d28:	6283      	str	r3, [r0, #40]	; 0x28
 8003d2a:	e013      	b.n	8003d54 <UART_Receive_IT+0x60>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d2c:	6903      	ldr	r3, [r0, #16]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1eb      	bne.n	8003d0a <UART_Receive_IT+0x16>
 8003d32:	e008      	b.n	8003d46 <UART_Receive_IT+0x52>
        HAL_UART_RxCpltCallback(huart);
 8003d34:	f001 f93e 	bl	8004fb4 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8003d38:	2000      	movs	r0, #0
 8003d3a:	e048      	b.n	8003dce <UART_Receive_IT+0xda>
    return HAL_BUSY;
 8003d3c:	2002      	movs	r0, #2
 8003d3e:	4770      	bx	lr
    return HAL_OK;
 8003d40:	2000      	movs	r0, #0
}
 8003d42:	4770      	bx	lr
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d44:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d46:	6803      	ldr	r3, [r0, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8003d4e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003d50:	3301      	adds	r3, #1
 8003d52:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8003d54:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8003d56:	3b01      	subs	r3, #1
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1ef      	bne.n	8003d40 <UART_Receive_IT+0x4c>
{
 8003d60:	b500      	push	{lr}
 8003d62:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d64:	6802      	ldr	r2, [r0, #0]
 8003d66:	68d3      	ldr	r3, [r2, #12]
 8003d68:	f023 0320 	bic.w	r3, r3, #32
 8003d6c:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d6e:	6802      	ldr	r2, [r0, #0]
 8003d70:	68d3      	ldr	r3, [r2, #12]
 8003d72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d76:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d78:	6802      	ldr	r2, [r0, #0]
 8003d7a:	6953      	ldr	r3, [r2, #20]
 8003d7c:	f023 0301 	bic.w	r3, r3, #1
 8003d80:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003d82:	2320      	movs	r3, #32
 8003d84:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	6343      	str	r3, [r0, #52]	; 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d8c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d1d0      	bne.n	8003d34 <UART_Receive_IT+0x40>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d92:	2300      	movs	r3, #0
 8003d94:	6303      	str	r3, [r0, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d96:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d98:	f102 030c 	add.w	r3, r2, #12
 8003d9c:	e853 3f00 	ldrex	r3, [r3]
 8003da0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da4:	320c      	adds	r2, #12
 8003da6:	e842 3100 	strex	r1, r3, [r2]
 8003daa:	2900      	cmp	r1, #0
 8003dac:	d1f3      	bne.n	8003d96 <UART_Receive_IT+0xa2>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003dae:	6803      	ldr	r3, [r0, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	f012 0f10 	tst.w	r2, #16
 8003db6:	d006      	beq.n	8003dc6 <UART_Receive_IT+0xd2>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003db8:	2200      	movs	r2, #0
 8003dba:	9201      	str	r2, [sp, #4]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	9201      	str	r2, [sp, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	9301      	str	r3, [sp, #4]
 8003dc4:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003dc6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8003dc8:	f7ff ff93 	bl	8003cf2 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8003dcc:	2000      	movs	r0, #0
}
 8003dce:	b003      	add	sp, #12
 8003dd0:	f85d fb04 	ldr.w	pc, [sp], #4

08003dd4 <HAL_UART_IRQHandler>:
{
 8003dd4:	b510      	push	{r4, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003dda:	6802      	ldr	r2, [r0, #0]
 8003ddc:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003dde:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003de0:	6950      	ldr	r0, [r2, #20]
  if (errorflags == RESET)
 8003de2:	f013 0f0f 	tst.w	r3, #15
 8003de6:	d109      	bne.n	8003dfc <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003de8:	f013 0f20 	tst.w	r3, #32
 8003dec:	d00d      	beq.n	8003e0a <HAL_UART_IRQHandler+0x36>
 8003dee:	f011 0f20 	tst.w	r1, #32
 8003df2:	d00a      	beq.n	8003e0a <HAL_UART_IRQHandler+0x36>
      UART_Receive_IT(huart);
 8003df4:	4620      	mov	r0, r4
 8003df6:	f7ff ff7d 	bl	8003cf4 <UART_Receive_IT>
      return;
 8003dfa:	e017      	b.n	8003e2c <HAL_UART_IRQHandler+0x58>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003dfc:	f000 0001 	and.w	r0, r0, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e00:	f401 7c90 	and.w	ip, r1, #288	; 0x120
 8003e04:	ea5c 0c00 	orrs.w	ip, ip, r0
 8003e08:	d112      	bne.n	8003e30 <HAL_UART_IRQHandler+0x5c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e0a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003e0c:	2801      	cmp	r0, #1
 8003e0e:	d07f      	beq.n	8003f10 <HAL_UART_IRQHandler+0x13c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e10:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003e14:	d003      	beq.n	8003e1e <HAL_UART_IRQHandler+0x4a>
 8003e16:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003e1a:	f040 8119 	bne.w	8004050 <HAL_UART_IRQHandler+0x27c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e1e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003e22:	d003      	beq.n	8003e2c <HAL_UART_IRQHandler+0x58>
 8003e24:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003e28:	f040 813f 	bne.w	80040aa <HAL_UART_IRQHandler+0x2d6>
}
 8003e2c:	b002      	add	sp, #8
 8003e2e:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e30:	f013 0f01 	tst.w	r3, #1
 8003e34:	d006      	beq.n	8003e44 <HAL_UART_IRQHandler+0x70>
 8003e36:	f411 7f80 	tst.w	r1, #256	; 0x100
 8003e3a:	d003      	beq.n	8003e44 <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e3c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003e3e:	f042 0201 	orr.w	r2, r2, #1
 8003e42:	6462      	str	r2, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e44:	f013 0f04 	tst.w	r3, #4
 8003e48:	d02f      	beq.n	8003eaa <HAL_UART_IRQHandler+0xd6>
 8003e4a:	b158      	cbz	r0, 8003e64 <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e4c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003e4e:	f042 0202 	orr.w	r2, r2, #2
 8003e52:	6462      	str	r2, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e54:	f013 0f02 	tst.w	r3, #2
 8003e58:	f000 8132 	beq.w	80040c0 <HAL_UART_IRQHandler+0x2ec>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e5c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003e5e:	f042 0204 	orr.w	r2, r2, #4
 8003e62:	6462      	str	r2, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e64:	f013 0f08 	tst.w	r3, #8
 8003e68:	d007      	beq.n	8003e7a <HAL_UART_IRQHandler+0xa6>
 8003e6a:	f001 0220 	and.w	r2, r1, #32
 8003e6e:	4302      	orrs	r2, r0
 8003e70:	d003      	beq.n	8003e7a <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e72:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003e74:	f042 0208 	orr.w	r2, r2, #8
 8003e78:	6462      	str	r2, [r4, #68]	; 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e7a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003e7c:	2a00      	cmp	r2, #0
 8003e7e:	d0d5      	beq.n	8003e2c <HAL_UART_IRQHandler+0x58>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e80:	f013 0f20 	tst.w	r3, #32
 8003e84:	d002      	beq.n	8003e8c <HAL_UART_IRQHandler+0xb8>
 8003e86:	f011 0f20 	tst.w	r1, #32
 8003e8a:	d114      	bne.n	8003eb6 <HAL_UART_IRQHandler+0xe2>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e8c:	6823      	ldr	r3, [r4, #0]
 8003e8e:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e90:	6c63      	ldr	r3, [r4, #68]	; 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e92:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e96:	f003 0308 	and.w	r3, r3, #8
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	d10f      	bne.n	8003ebe <HAL_UART_IRQHandler+0xea>
        HAL_UART_ErrorCallback(huart);
 8003e9e:	4620      	mov	r0, r4
 8003ea0:	f7ff feb4 	bl	8003c0c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	6463      	str	r3, [r4, #68]	; 0x44
 8003ea8:	e7c0      	b.n	8003e2c <HAL_UART_IRQHandler+0x58>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003eaa:	f013 0f02 	tst.w	r3, #2
 8003eae:	d0d9      	beq.n	8003e64 <HAL_UART_IRQHandler+0x90>
 8003eb0:	2800      	cmp	r0, #0
 8003eb2:	d0d7      	beq.n	8003e64 <HAL_UART_IRQHandler+0x90>
 8003eb4:	e7d2      	b.n	8003e5c <HAL_UART_IRQHandler+0x88>
        UART_Receive_IT(huart);
 8003eb6:	4620      	mov	r0, r4
 8003eb8:	f7ff ff1c 	bl	8003cf4 <UART_Receive_IT>
 8003ebc:	e7e6      	b.n	8003e8c <HAL_UART_IRQHandler+0xb8>
        UART_EndRxTransfer(huart);
 8003ebe:	4620      	mov	r0, r4
 8003ec0:	f7ff fde4 	bl	8003a8c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec4:	6823      	ldr	r3, [r4, #0]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003ecc:	d01c      	beq.n	8003f08 <HAL_UART_IRQHandler+0x134>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ece:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed0:	f102 0314 	add.w	r3, r2, #20
 8003ed4:	e853 3f00 	ldrex	r3, [r3]
 8003ed8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003edc:	3214      	adds	r2, #20
 8003ede:	e842 3100 	strex	r1, r3, [r2]
 8003ee2:	2900      	cmp	r1, #0
 8003ee4:	d1f3      	bne.n	8003ece <HAL_UART_IRQHandler+0xfa>
          if (huart->hdmarx != NULL)
 8003ee6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003ee8:	b153      	cbz	r3, 8003f00 <HAL_UART_IRQHandler+0x12c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003eea:	4a78      	ldr	r2, [pc, #480]	; (80040cc <HAL_UART_IRQHandler+0x2f8>)
 8003eec:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003eee:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003ef0:	f7fe fc08 	bl	8002704 <HAL_DMA_Abort_IT>
 8003ef4:	2800      	cmp	r0, #0
 8003ef6:	d099      	beq.n	8003e2c <HAL_UART_IRQHandler+0x58>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ef8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003efa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003efc:	4798      	blx	r3
 8003efe:	e795      	b.n	8003e2c <HAL_UART_IRQHandler+0x58>
            HAL_UART_ErrorCallback(huart);
 8003f00:	4620      	mov	r0, r4
 8003f02:	f7ff fe83 	bl	8003c0c <HAL_UART_ErrorCallback>
 8003f06:	e791      	b.n	8003e2c <HAL_UART_IRQHandler+0x58>
          HAL_UART_ErrorCallback(huart);
 8003f08:	4620      	mov	r0, r4
 8003f0a:	f7ff fe7f 	bl	8003c0c <HAL_UART_ErrorCallback>
 8003f0e:	e78d      	b.n	8003e2c <HAL_UART_IRQHandler+0x58>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003f10:	f013 0f10 	tst.w	r3, #16
 8003f14:	f43f af7c 	beq.w	8003e10 <HAL_UART_IRQHandler+0x3c>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003f18:	f011 0f10 	tst.w	r1, #16
 8003f1c:	f43f af78 	beq.w	8003e10 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f20:	2300      	movs	r3, #0
 8003f22:	9301      	str	r3, [sp, #4]
 8003f24:	6813      	ldr	r3, [r2, #0]
 8003f26:	9301      	str	r3, [sp, #4]
 8003f28:	6853      	ldr	r3, [r2, #4]
 8003f2a:	9301      	str	r3, [sp, #4]
 8003f2c:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f2e:	6953      	ldr	r3, [r2, #20]
 8003f30:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003f34:	d050      	beq.n	8003fd8 <HAL_UART_IRQHandler+0x204>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f36:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003f38:	6813      	ldr	r3, [r2, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f43f af74 	beq.w	8003e2c <HAL_UART_IRQHandler+0x58>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f44:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8003f46:	4299      	cmp	r1, r3
 8003f48:	f67f af70 	bls.w	8003e2c <HAL_UART_IRQHandler+0x58>
        huart->RxXferCount = nb_remaining_rx_data;
 8003f4c:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f4e:	6993      	ldr	r3, [r2, #24]
 8003f50:	2b20      	cmp	r3, #32
 8003f52:	d037      	beq.n	8003fc4 <HAL_UART_IRQHandler+0x1f0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f54:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f56:	f102 030c 	add.w	r3, r2, #12
 8003f5a:	e853 3f00 	ldrex	r3, [r3]
 8003f5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f62:	320c      	adds	r2, #12
 8003f64:	e842 3100 	strex	r1, r3, [r2]
 8003f68:	2900      	cmp	r1, #0
 8003f6a:	d1f3      	bne.n	8003f54 <HAL_UART_IRQHandler+0x180>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f6c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6e:	f102 0314 	add.w	r3, r2, #20
 8003f72:	e853 3f00 	ldrex	r3, [r3]
 8003f76:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7a:	3214      	adds	r2, #20
 8003f7c:	e842 3100 	strex	r1, r3, [r2]
 8003f80:	2900      	cmp	r1, #0
 8003f82:	d1f3      	bne.n	8003f6c <HAL_UART_IRQHandler+0x198>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f84:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f86:	f102 0314 	add.w	r3, r2, #20
 8003f8a:	e853 3f00 	ldrex	r3, [r3]
 8003f8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f92:	3214      	adds	r2, #20
 8003f94:	e842 3100 	strex	r1, r3, [r2]
 8003f98:	2900      	cmp	r1, #0
 8003f9a:	d1f3      	bne.n	8003f84 <HAL_UART_IRQHandler+0x1b0>
          huart->RxState = HAL_UART_STATE_READY;
 8003f9c:	2320      	movs	r3, #32
 8003f9e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	6323      	str	r3, [r4, #48]	; 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fa6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa8:	f102 030c 	add.w	r3, r2, #12
 8003fac:	e853 3f00 	ldrex	r3, [r3]
 8003fb0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb4:	320c      	adds	r2, #12
 8003fb6:	e842 3100 	strex	r1, r3, [r2]
 8003fba:	2900      	cmp	r1, #0
 8003fbc:	d1f3      	bne.n	8003fa6 <HAL_UART_IRQHandler+0x1d2>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fbe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003fc0:	f7fe fb7d 	bl	80026be <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fc8:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8003fca:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8003fcc:	1ac9      	subs	r1, r1, r3
 8003fce:	b289      	uxth	r1, r1
 8003fd0:	4620      	mov	r0, r4
 8003fd2:	f7ff fe8e 	bl	8003cf2 <HAL_UARTEx_RxEventCallback>
 8003fd6:	e729      	b.n	8003e2c <HAL_UART_IRQHandler+0x58>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fd8:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8003fda:	b29a      	uxth	r2, r3
      if ((huart->RxXferCount > 0U)
 8003fdc:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f43f af23 	beq.w	8003e2c <HAL_UART_IRQHandler+0x58>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fe6:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8003fe8:	1a9b      	subs	r3, r3, r2
 8003fea:	b299      	uxth	r1, r3
          && (nb_rx_data > 0U))
 8003fec:	2900      	cmp	r1, #0
 8003fee:	f43f af1d 	beq.w	8003e2c <HAL_UART_IRQHandler+0x58>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ff2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff4:	f102 030c 	add.w	r3, r2, #12
 8003ff8:	e853 3f00 	ldrex	r3, [r3]
 8003ffc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004000:	320c      	adds	r2, #12
 8004002:	e842 3000 	strex	r0, r3, [r2]
 8004006:	2800      	cmp	r0, #0
 8004008:	d1f3      	bne.n	8003ff2 <HAL_UART_IRQHandler+0x21e>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800400a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400c:	f102 0314 	add.w	r3, r2, #20
 8004010:	e853 3f00 	ldrex	r3, [r3]
 8004014:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004018:	3214      	adds	r2, #20
 800401a:	e842 3000 	strex	r0, r3, [r2]
 800401e:	2800      	cmp	r0, #0
 8004020:	d1f3      	bne.n	800400a <HAL_UART_IRQHandler+0x236>
        huart->RxState = HAL_UART_STATE_READY;
 8004022:	2320      	movs	r3, #32
 8004024:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004028:	2300      	movs	r3, #0
 800402a:	6323      	str	r3, [r4, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800402c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402e:	f102 030c 	add.w	r3, r2, #12
 8004032:	e853 3f00 	ldrex	r3, [r3]
 8004036:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403a:	320c      	adds	r2, #12
 800403c:	e842 3000 	strex	r0, r3, [r2]
 8004040:	2800      	cmp	r0, #0
 8004042:	d1f3      	bne.n	800402c <HAL_UART_IRQHandler+0x258>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004044:	2302      	movs	r3, #2
 8004046:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004048:	4620      	mov	r0, r4
 800404a:	f7ff fe52 	bl	8003cf2 <HAL_UARTEx_RxEventCallback>
 800404e:	e6ed      	b.n	8003e2c <HAL_UART_IRQHandler+0x58>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004050:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b21      	cmp	r3, #33	; 0x21
 8004058:	f47f aee8 	bne.w	8003e2c <HAL_UART_IRQHandler+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800405c:	68a3      	ldr	r3, [r4, #8]
 800405e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004062:	d016      	beq.n	8004092 <HAL_UART_IRQHandler+0x2be>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004064:	6a23      	ldr	r3, [r4, #32]
 8004066:	1c59      	adds	r1, r3, #1
 8004068:	6221      	str	r1, [r4, #32]
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	6053      	str	r3, [r2, #4]
    if (--huart->TxXferCount == 0U)
 800406e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004070:	3b01      	subs	r3, #1
 8004072:	b29b      	uxth	r3, r3
 8004074:	84e3      	strh	r3, [r4, #38]	; 0x26
 8004076:	2b00      	cmp	r3, #0
 8004078:	f47f aed8 	bne.w	8003e2c <HAL_UART_IRQHandler+0x58>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800407c:	6822      	ldr	r2, [r4, #0]
 800407e:	68d3      	ldr	r3, [r2, #12]
 8004080:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004084:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004086:	6822      	ldr	r2, [r4, #0]
 8004088:	68d3      	ldr	r3, [r2, #12]
 800408a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800408e:	60d3      	str	r3, [r2, #12]
 8004090:	e6cc      	b.n	8003e2c <HAL_UART_IRQHandler+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004092:	6923      	ldr	r3, [r4, #16]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1e5      	bne.n	8004064 <HAL_UART_IRQHandler+0x290>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004098:	6a23      	ldr	r3, [r4, #32]
 800409a:	881b      	ldrh	r3, [r3, #0]
 800409c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040a0:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 80040a2:	6a23      	ldr	r3, [r4, #32]
 80040a4:	3302      	adds	r3, #2
 80040a6:	6223      	str	r3, [r4, #32]
 80040a8:	e7e1      	b.n	800406e <HAL_UART_IRQHandler+0x29a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80040aa:	68d3      	ldr	r3, [r2, #12]
 80040ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040b0:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 80040b2:	2320      	movs	r3, #32
 80040b4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  HAL_UART_TxCpltCallback(huart);
 80040b8:	4620      	mov	r0, r4
 80040ba:	f000 ff43 	bl	8004f44 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 80040be:	e6b5      	b.n	8003e2c <HAL_UART_IRQHandler+0x58>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80040c0:	f013 0f08 	tst.w	r3, #8
 80040c4:	f47f aed5 	bne.w	8003e72 <HAL_UART_IRQHandler+0x9e>
 80040c8:	e6d7      	b.n	8003e7a <HAL_UART_IRQHandler+0xa6>
 80040ca:	bf00      	nop
 80040cc:	08003c0f 	.word	0x08003c0f

080040d0 <UART_Start_Receive_IT>:
  huart->pRxBuffPtr = pData;
 80040d0:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 80040d2:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxXferCount = Size;
 80040d4:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d6:	2300      	movs	r3, #0
 80040d8:	6443      	str	r3, [r0, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040da:	2322      	movs	r3, #34	; 0x22
 80040dc:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (huart->Init.Parity != UART_PARITY_NONE)
 80040e0:	6903      	ldr	r3, [r0, #16]
 80040e2:	b123      	cbz	r3, 80040ee <UART_Start_Receive_IT+0x1e>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80040e4:	6802      	ldr	r2, [r0, #0]
 80040e6:	68d3      	ldr	r3, [r2, #12]
 80040e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ec:	60d3      	str	r3, [r2, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80040ee:	6802      	ldr	r2, [r0, #0]
 80040f0:	6953      	ldr	r3, [r2, #20]
 80040f2:	f043 0301 	orr.w	r3, r3, #1
 80040f6:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80040f8:	6802      	ldr	r2, [r0, #0]
 80040fa:	68d3      	ldr	r3, [r2, #12]
 80040fc:	f043 0320 	orr.w	r3, r3, #32
 8004100:	60d3      	str	r3, [r2, #12]
}
 8004102:	2000      	movs	r0, #0
 8004104:	4770      	bx	lr

08004106 <HAL_UART_Receive_IT>:
{
 8004106:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8004108:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b20      	cmp	r3, #32
 8004110:	d108      	bne.n	8004124 <HAL_UART_Receive_IT+0x1e>
    if ((pData == NULL) || (Size == 0U))
 8004112:	b149      	cbz	r1, 8004128 <HAL_UART_Receive_IT+0x22>
 8004114:	b90a      	cbnz	r2, 800411a <HAL_UART_Receive_IT+0x14>
      return HAL_ERROR;
 8004116:	2001      	movs	r0, #1
}
 8004118:	bd08      	pop	{r3, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800411a:	2300      	movs	r3, #0
 800411c:	6303      	str	r3, [r0, #48]	; 0x30
    return (UART_Start_Receive_IT(huart, pData, Size));
 800411e:	f7ff ffd7 	bl	80040d0 <UART_Start_Receive_IT>
 8004122:	e7f9      	b.n	8004118 <HAL_UART_Receive_IT+0x12>
    return HAL_BUSY;
 8004124:	2002      	movs	r0, #2
 8004126:	e7f7      	b.n	8004118 <HAL_UART_Receive_IT+0x12>
      return HAL_ERROR;
 8004128:	2001      	movs	r0, #1
 800412a:	e7f5      	b.n	8004118 <HAL_UART_Receive_IT+0x12>

0800412c <eMBMasterInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBMasterInit( eMBMode eMode, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 800412c:	b510      	push	{r4, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    switch (eMode)
 800412e:	b110      	cbz	r0, 8004136 <eMBMasterInit+0xa>

        eStatus = eMBMasterASCIIInit(ucPort, ulBaudRate, eParity );
        break;
#endif
    default:
        eStatus = MB_EINVAL;
 8004130:	2402      	movs	r4, #2
        }
        /* initialize the OS resource for modbus master. */
        vMBMasterOsResInit();
    }
    return eStatus;
}
 8004132:	4620      	mov	r0, r4
 8004134:	bd10      	pop	{r4, pc}
 8004136:	460c      	mov	r4, r1
 8004138:	4611      	mov	r1, r2
        pvMBMasterFrameStartCur = eMBMasterRTUStart;
 800413a:	4a15      	ldr	r2, [pc, #84]	; (8004190 <eMBMasterInit+0x64>)
 800413c:	4815      	ldr	r0, [pc, #84]	; (8004194 <eMBMasterInit+0x68>)
 800413e:	6010      	str	r0, [r2, #0]
        pvMBMasterFrameStopCur = eMBMasterRTUStop;
 8004140:	4a15      	ldr	r2, [pc, #84]	; (8004198 <eMBMasterInit+0x6c>)
 8004142:	4816      	ldr	r0, [pc, #88]	; (800419c <eMBMasterInit+0x70>)
 8004144:	6010      	str	r0, [r2, #0]
        peMBMasterFrameSendCur = eMBMasterRTUSend;
 8004146:	4a16      	ldr	r2, [pc, #88]	; (80041a0 <eMBMasterInit+0x74>)
 8004148:	4816      	ldr	r0, [pc, #88]	; (80041a4 <eMBMasterInit+0x78>)
 800414a:	6010      	str	r0, [r2, #0]
        peMBMasterFrameReceiveCur = eMBMasterRTUReceive;
 800414c:	4a16      	ldr	r2, [pc, #88]	; (80041a8 <eMBMasterInit+0x7c>)
 800414e:	4817      	ldr	r0, [pc, #92]	; (80041ac <eMBMasterInit+0x80>)
 8004150:	6010      	str	r0, [r2, #0]
        pvMBMasterFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBMasterPortClose : NULL;
 8004152:	4a17      	ldr	r2, [pc, #92]	; (80041b0 <eMBMasterInit+0x84>)
 8004154:	2000      	movs	r0, #0
 8004156:	6010      	str	r0, [r2, #0]
        pxMBMasterFrameCBByteReceived = xMBMasterRTUReceiveFSM;
 8004158:	4a16      	ldr	r2, [pc, #88]	; (80041b4 <eMBMasterInit+0x88>)
 800415a:	4817      	ldr	r0, [pc, #92]	; (80041b8 <eMBMasterInit+0x8c>)
 800415c:	6010      	str	r0, [r2, #0]
        pxMBMasterFrameCBTransmitterEmpty = xMBMasterRTUTransmitFSM;
 800415e:	4a17      	ldr	r2, [pc, #92]	; (80041bc <eMBMasterInit+0x90>)
 8004160:	4817      	ldr	r0, [pc, #92]	; (80041c0 <eMBMasterInit+0x94>)
 8004162:	6010      	str	r0, [r2, #0]
        pxMBMasterPortCBTimerExpired = xMBMasterRTUTimerExpired;
 8004164:	4a17      	ldr	r2, [pc, #92]	; (80041c4 <eMBMasterInit+0x98>)
 8004166:	4818      	ldr	r0, [pc, #96]	; (80041c8 <eMBMasterInit+0x9c>)
 8004168:	6010      	str	r0, [r2, #0]
        eStatus = eMBMasterRTUInit(ucPort, ulBaudRate, eParity);
 800416a:	461a      	mov	r2, r3
 800416c:	4620      	mov	r0, r4
 800416e:	f000 fb8d 	bl	800488c <eMBMasterRTUInit>
    if (eStatus == MB_ENOERR)
 8004172:	4604      	mov	r4, r0
 8004174:	2800      	cmp	r0, #0
 8004176:	d1dc      	bne.n	8004132 <eMBMasterInit+0x6>
        if (!xMBMasterPortEventInit())
 8004178:	f000 fd68 	bl	8004c4c <xMBMasterPortEventInit>
 800417c:	b118      	cbz	r0, 8004186 <eMBMasterInit+0x5a>
            eMBState = STATE_DISABLED;
 800417e:	4b13      	ldr	r3, [pc, #76]	; (80041cc <eMBMasterInit+0xa0>)
 8004180:	2201      	movs	r2, #1
 8004182:	701a      	strb	r2, [r3, #0]
 8004184:	e000      	b.n	8004188 <eMBMasterInit+0x5c>
            eStatus = MB_EPORTERR;
 8004186:	2403      	movs	r4, #3
        vMBMasterOsResInit();
 8004188:	f000 fe1a 	bl	8004dc0 <vMBMasterOsResInit>
 800418c:	e7d1      	b.n	8004132 <eMBMasterInit+0x6>
 800418e:	bf00      	nop
 8004190:	20001720 	.word	0x20001720
 8004194:	080048d9 	.word	0x080048d9
 8004198:	20001724 	.word	0x20001724
 800419c:	080048f9 	.word	0x080048f9
 80041a0:	20001718 	.word	0x20001718
 80041a4:	08004961 	.word	0x08004961
 80041a8:	20001714 	.word	0x20001714
 80041ac:	08004911 	.word	0x08004911
 80041b0:	2000171c 	.word	0x2000171c
 80041b4:	20001728 	.word	0x20001728
 80041b8:	080049fd 	.word	0x080049fd
 80041bc:	2000172c 	.word	0x2000172c
 80041c0:	08004a95 	.word	0x08004a95
 80041c4:	20001730 	.word	0x20001730
 80041c8:	08004b1d 	.word	0x08004b1d
 80041cc:	2000000c 	.word	0x2000000c

080041d0 <eMBMasterEnable>:
    return eStatus;
}

eMBErrorCode
eMBMasterEnable( void )
{
 80041d0:	b508      	push	{r3, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( eMBState == STATE_DISABLED )
 80041d2:	4b06      	ldr	r3, [pc, #24]	; (80041ec <eMBMasterEnable+0x1c>)
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d001      	beq.n	80041de <eMBMasterEnable+0xe>
        pvMBMasterFrameStartCur(  );
        eMBState = STATE_ENABLED;
    }
    else
    {
        eStatus = MB_EILLSTATE;
 80041da:	2006      	movs	r0, #6
    }
    return eStatus;
}
 80041dc:	bd08      	pop	{r3, pc}
        pvMBMasterFrameStartCur(  );
 80041de:	4b04      	ldr	r3, [pc, #16]	; (80041f0 <eMBMasterEnable+0x20>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 80041e4:	2000      	movs	r0, #0
 80041e6:	4b01      	ldr	r3, [pc, #4]	; (80041ec <eMBMasterEnable+0x1c>)
 80041e8:	7018      	strb	r0, [r3, #0]
 80041ea:	e7f7      	b.n	80041dc <eMBMasterEnable+0xc>
 80041ec:	2000000c 	.word	0x2000000c
 80041f0:	20001720 	.word	0x20001720

080041f4 <eMBMasterPoll>:
}


eMBErrorCode
eMBMasterPoll( void )
{
 80041f4:	b570      	push	{r4, r5, r6, lr}
 80041f6:	b082      	sub	sp, #8
    eMBErrorCode    eStatus = MB_ENOERR;
    eMBMasterEventType    eEvent;
    eMBMasterErrorEventType errorType;

    /* Check if the protocol stack is ready. */
    if(( eMBState != STATE_ENABLED ) && ( eMBState != STATE_ESTABLISHED))
 80041f8:	4b6b      	ldr	r3, [pc, #428]	; (80043a8 <eMBMasterPoll+0x1b4>)
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	b113      	cbz	r3, 8004204 <eMBMasterPoll+0x10>
 80041fe:	2b03      	cmp	r3, #3
 8004200:	f040 80cd 	bne.w	800439e <eMBMasterPoll+0x1aa>
        return MB_EILLSTATE;
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBMasterPortEventGet( &eEvent ) == TRUE )
 8004204:	f10d 0006 	add.w	r0, sp, #6
 8004208:	f000 fdac 	bl	8004d64 <xMBMasterPortEventGet>
 800420c:	2801      	cmp	r0, #1
 800420e:	d003      	beq.n	8004218 <eMBMasterPoll+0x24>
        default:
            break;
        }

    }
    return MB_ENOERR;
 8004210:	2400      	movs	r4, #0
}
 8004212:	4620      	mov	r0, r4
 8004214:	b002      	add	sp, #8
 8004216:	bd70      	pop	{r4, r5, r6, pc}
        switch ( eEvent )
 8004218:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800421c:	3b01      	subs	r3, #1
 800421e:	2b0f      	cmp	r3, #15
 8004220:	f200 80bf 	bhi.w	80043a2 <eMBMasterPoll+0x1ae>
 8004224:	e8df f003 	tbb	[pc, r3]
 8004228:	27bd0d08 	.word	0x27bd0d08
 800422c:	78bdbdbd 	.word	0x78bdbdbd
 8004230:	bdbdbdbd 	.word	0xbdbdbdbd
 8004234:	89bdbdbd 	.word	0x89bdbdbd
            eMBState = STATE_ESTABLISHED;
 8004238:	4b5b      	ldr	r3, [pc, #364]	; (80043a8 <eMBMasterPoll+0x1b4>)
 800423a:	2203      	movs	r2, #3
 800423c:	701a      	strb	r2, [r3, #0]
    return MB_ENOERR;
 800423e:	2400      	movs	r4, #0
            break;
 8004240:	e7e7      	b.n	8004212 <eMBMasterPoll+0x1e>
            eStatus = peMBMasterFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8004242:	4b5a      	ldr	r3, [pc, #360]	; (80043ac <eMBMasterPoll+0x1b8>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a5a      	ldr	r2, [pc, #360]	; (80043b0 <eMBMasterPoll+0x1bc>)
 8004248:	495a      	ldr	r1, [pc, #360]	; (80043b4 <eMBMasterPoll+0x1c0>)
 800424a:	485b      	ldr	r0, [pc, #364]	; (80043b8 <eMBMasterPoll+0x1c4>)
 800424c:	4798      	blx	r3
            if ( ( eStatus == MB_ENOERR ) && ( ucRcvAddress == ucMBMasterGetDestAddress() ) )
 800424e:	4604      	mov	r4, r0
 8004250:	b928      	cbnz	r0, 800425e <eMBMasterPoll+0x6a>
 8004252:	4b59      	ldr	r3, [pc, #356]	; (80043b8 <eMBMasterPoll+0x1c4>)
 8004254:	781a      	ldrb	r2, [r3, #0]
 8004256:	4b59      	ldr	r3, [pc, #356]	; (80043bc <eMBMasterPoll+0x1c8>)
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	429a      	cmp	r2, r3
 800425c:	d007      	beq.n	800426e <eMBMasterPoll+0x7a>
    return eMBMasterCurErrorType;
}
/* Set Modbus Master current error event type. */
void vMBMasterSetErrorType( eMBMasterErrorEventType errorType )
{
    eMBMasterCurErrorType = errorType;
 800425e:	4b58      	ldr	r3, [pc, #352]	; (80043c0 <eMBMasterPoll+0x1cc>)
 8004260:	2201      	movs	r2, #1
 8004262:	701a      	strb	r2, [r3, #0]
                ( void ) xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
 8004264:	2010      	movs	r0, #16
 8004266:	f000 fcfb 	bl	8004c60 <xMBMasterPortEventPost>
    return MB_ENOERR;
 800426a:	2400      	movs	r4, #0
 800426c:	e7d1      	b.n	8004212 <eMBMasterPoll+0x1e>
                ( void ) xMBMasterPortEventPost( EV_MASTER_EXECUTE );
 800426e:	2004      	movs	r0, #4
 8004270:	f000 fcf6 	bl	8004c60 <xMBMasterPortEventPost>
 8004274:	e7cd      	b.n	8004212 <eMBMasterPoll+0x1e>
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8004276:	4b4f      	ldr	r3, [pc, #316]	; (80043b4 <eMBMasterPoll+0x1c0>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	781a      	ldrb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 800427c:	4951      	ldr	r1, [pc, #324]	; (80043c4 <eMBMasterPoll+0x1d0>)
 800427e:	2001      	movs	r0, #1
 8004280:	7008      	strb	r0, [r1, #0]
            if(ucFunctionCode >> 7) {
 8004282:	f993 1000 	ldrsb.w	r1, [r3]
 8004286:	2900      	cmp	r1, #0
 8004288:	db11      	blt.n	80042ae <eMBMasterPoll+0xba>
                for (i = 0; i < MB_FUNC_HANDLERS_MAX; i++)
 800428a:	2400      	movs	r4, #0
                    if (xMasterFuncHandlers[i].ucFunctionCode == 0) {
 800428c:	494e      	ldr	r1, [pc, #312]	; (80043c8 <eMBMasterPoll+0x1d4>)
 800428e:	f811 3034 	ldrb.w	r3, [r1, r4, lsl #3]
 8004292:	b123      	cbz	r3, 800429e <eMBMasterPoll+0xaa>
                    else if (xMasterFuncHandlers[i].ucFunctionCode == ucFunctionCode) {
 8004294:	429a      	cmp	r2, r3
 8004296:	d016      	beq.n	80042c6 <eMBMasterPoll+0xd2>
                for (i = 0; i < MB_FUNC_HANDLERS_MAX; i++)
 8004298:	3401      	adds	r4, #1
 800429a:	2c10      	cmp	r4, #16
 800429c:	d1f7      	bne.n	800428e <eMBMasterPoll+0x9a>
    eMBMasterCurErrorType = errorType;
 800429e:	4b48      	ldr	r3, [pc, #288]	; (80043c0 <eMBMasterPoll+0x1cc>)
 80042a0:	2202      	movs	r2, #2
 80042a2:	701a      	strb	r2, [r3, #0]
                ( void ) xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
 80042a4:	2010      	movs	r0, #16
 80042a6:	f000 fcdb 	bl	8004c60 <xMBMasterPortEventPost>
    return MB_ENOERR;
 80042aa:	2400      	movs	r4, #0
 80042ac:	e7b1      	b.n	8004212 <eMBMasterPoll+0x1e>
                eException = (eMBException)ucMBFrame[MB_PDU_DATA_OFF];
 80042ae:	785a      	ldrb	r2, [r3, #1]
 80042b0:	4b44      	ldr	r3, [pc, #272]	; (80043c4 <eMBMasterPoll+0x1d0>)
 80042b2:	701a      	strb	r2, [r3, #0]
            if (eException != MB_EX_NONE) {
 80042b4:	4b43      	ldr	r3, [pc, #268]	; (80043c4 <eMBMasterPoll+0x1d0>)
 80042b6:	781c      	ldrb	r4, [r3, #0]
 80042b8:	2c00      	cmp	r4, #0
 80042ba:	d1f0      	bne.n	800429e <eMBMasterPoll+0xaa>
                vMBMasterCBRequestScuuess( );
 80042bc:	f000 fda2 	bl	8004e04 <vMBMasterCBRequestScuuess>
                vMBMasterRunResRelease( );
 80042c0:	f000 fd81 	bl	8004dc6 <vMBMasterRunResRelease>
 80042c4:	e7a5      	b.n	8004212 <eMBMasterPoll+0x1e>
    xMBRunInMasterMode = IsMasterMode;
 80042c6:	4b41      	ldr	r3, [pc, #260]	; (80043cc <eMBMasterPoll+0x1d8>)
 80042c8:	2201      	movs	r2, #1
 80042ca:	701a      	strb	r2, [r3, #0]
                        if ( xMBMasterRequestIsBroadcast() ) {
 80042cc:	f000 fc88 	bl	8004be0 <xMBMasterRequestIsBroadcast>
 80042d0:	b968      	cbnz	r0, 80042ee <eMBMasterPoll+0xfa>
                            eException = xMasterFuncHandlers[i].pxHandler(ucMBFrame, &usLength);
 80042d2:	4b3d      	ldr	r3, [pc, #244]	; (80043c8 <eMBMasterPoll+0x1d4>)
 80042d4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80042d8:	6863      	ldr	r3, [r4, #4]
 80042da:	4935      	ldr	r1, [pc, #212]	; (80043b0 <eMBMasterPoll+0x1bc>)
 80042dc:	4a35      	ldr	r2, [pc, #212]	; (80043b4 <eMBMasterPoll+0x1c0>)
 80042de:	6810      	ldr	r0, [r2, #0]
 80042e0:	4798      	blx	r3
 80042e2:	4b38      	ldr	r3, [pc, #224]	; (80043c4 <eMBMasterPoll+0x1d0>)
 80042e4:	7018      	strb	r0, [r3, #0]
    xMBRunInMasterMode = IsMasterMode;
 80042e6:	4b39      	ldr	r3, [pc, #228]	; (80043cc <eMBMasterPoll+0x1d8>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	701a      	strb	r2, [r3, #0]
}
 80042ec:	e7e2      	b.n	80042b4 <eMBMasterPoll+0xc0>
                            usLength = usMBMasterGetPDUSndLength();
 80042ee:	f000 fc6b 	bl	8004bc8 <usMBMasterGetPDUSndLength>
 80042f2:	4b2f      	ldr	r3, [pc, #188]	; (80043b0 <eMBMasterPoll+0x1bc>)
 80042f4:	8018      	strh	r0, [r3, #0]
                            for(j = 1; j <= MB_MASTER_TOTAL_SLAVE_NUM; j++){
 80042f6:	2501      	movs	r5, #1
    ucMBMasterDestAddress = Address;
 80042f8:	4e30      	ldr	r6, [pc, #192]	; (80043bc <eMBMasterPoll+0x1c8>)
                                eException = xMasterFuncHandlers[i].pxHandler(ucMBFrame, &usLength);
 80042fa:	4b33      	ldr	r3, [pc, #204]	; (80043c8 <eMBMasterPoll+0x1d4>)
 80042fc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8004300:	6864      	ldr	r4, [r4, #4]
    ucMBMasterDestAddress = Address;
 8004302:	7035      	strb	r5, [r6, #0]
                                eException = xMasterFuncHandlers[i].pxHandler(ucMBFrame, &usLength);
 8004304:	492a      	ldr	r1, [pc, #168]	; (80043b0 <eMBMasterPoll+0x1bc>)
 8004306:	4b2b      	ldr	r3, [pc, #172]	; (80043b4 <eMBMasterPoll+0x1c0>)
 8004308:	6818      	ldr	r0, [r3, #0]
 800430a:	47a0      	blx	r4
 800430c:	4b2d      	ldr	r3, [pc, #180]	; (80043c4 <eMBMasterPoll+0x1d0>)
 800430e:	7018      	strb	r0, [r3, #0]
                            for(j = 1; j <= MB_MASTER_TOTAL_SLAVE_NUM; j++){
 8004310:	3501      	adds	r5, #1
 8004312:	2d21      	cmp	r5, #33	; 0x21
 8004314:	d1f5      	bne.n	8004302 <eMBMasterPoll+0x10e>
 8004316:	e7e6      	b.n	80042e6 <eMBMasterPoll+0xf2>
            vMBMasterGetPDUSndBuf( &ucMBFrame );
 8004318:	4c26      	ldr	r4, [pc, #152]	; (80043b4 <eMBMasterPoll+0x1c0>)
 800431a:	4620      	mov	r0, r4
 800431c:	f000 fc48 	bl	8004bb0 <vMBMasterGetPDUSndBuf>
            eStatus = peMBMasterFrameSendCur( ucMBMasterGetDestAddress(), ucMBFrame, usMBMasterGetPDUSndLength() );
 8004320:	4b2b      	ldr	r3, [pc, #172]	; (80043d0 <eMBMasterPoll+0x1dc>)
 8004322:	681d      	ldr	r5, [r3, #0]
    return ucMBMasterDestAddress;
 8004324:	4b25      	ldr	r3, [pc, #148]	; (80043bc <eMBMasterPoll+0x1c8>)
 8004326:	781e      	ldrb	r6, [r3, #0]
            eStatus = peMBMasterFrameSendCur( ucMBMasterGetDestAddress(), ucMBFrame, usMBMasterGetPDUSndLength() );
 8004328:	6824      	ldr	r4, [r4, #0]
 800432a:	f000 fc4d 	bl	8004bc8 <usMBMasterGetPDUSndLength>
 800432e:	4602      	mov	r2, r0
 8004330:	4621      	mov	r1, r4
 8004332:	4630      	mov	r0, r6
 8004334:	47a8      	blx	r5
    return MB_ENOERR;
 8004336:	2400      	movs	r4, #0
            break;
 8004338:	e76b      	b.n	8004212 <eMBMasterPoll+0x1e>
    return eMBMasterCurErrorType;
 800433a:	4b21      	ldr	r3, [pc, #132]	; (80043c0 <eMBMasterPoll+0x1cc>)
 800433c:	781c      	ldrb	r4, [r3, #0]
            vMBMasterGetPDUSndBuf( &ucMBFrame );
 800433e:	481d      	ldr	r0, [pc, #116]	; (80043b4 <eMBMasterPoll+0x1c0>)
 8004340:	f000 fc36 	bl	8004bb0 <vMBMasterGetPDUSndBuf>
            switch (errorType) {
 8004344:	2c01      	cmp	r4, #1
 8004346:	d012      	beq.n	800436e <eMBMasterPoll+0x17a>
 8004348:	2c02      	cmp	r4, #2
 800434a:	d01c      	beq.n	8004386 <eMBMasterPoll+0x192>
 800434c:	b11c      	cbz	r4, 8004356 <eMBMasterPoll+0x162>
            vMBMasterRunResRelease();
 800434e:	f000 fd3a 	bl	8004dc6 <vMBMasterRunResRelease>
    return MB_ENOERR;
 8004352:	2400      	movs	r4, #0
            break;
 8004354:	e75d      	b.n	8004212 <eMBMasterPoll+0x1e>
    return ucMBMasterDestAddress;
 8004356:	4b19      	ldr	r3, [pc, #100]	; (80043bc <eMBMasterPoll+0x1c8>)
 8004358:	781c      	ldrb	r4, [r3, #0]
                vMBMasterErrorCBRespondTimeout(ucMBMasterGetDestAddress(),
 800435a:	4b16      	ldr	r3, [pc, #88]	; (80043b4 <eMBMasterPoll+0x1c0>)
 800435c:	681d      	ldr	r5, [r3, #0]
 800435e:	f000 fc33 	bl	8004bc8 <usMBMasterGetPDUSndLength>
 8004362:	4602      	mov	r2, r0
 8004364:	4629      	mov	r1, r5
 8004366:	4620      	mov	r0, r4
 8004368:	f000 fd2e 	bl	8004dc8 <vMBMasterErrorCBRespondTimeout>
                break;
 800436c:	e7ef      	b.n	800434e <eMBMasterPoll+0x15a>
    return ucMBMasterDestAddress;
 800436e:	4b13      	ldr	r3, [pc, #76]	; (80043bc <eMBMasterPoll+0x1c8>)
 8004370:	781c      	ldrb	r4, [r3, #0]
                vMBMasterErrorCBReceiveData(ucMBMasterGetDestAddress(),
 8004372:	4b10      	ldr	r3, [pc, #64]	; (80043b4 <eMBMasterPoll+0x1c0>)
 8004374:	681d      	ldr	r5, [r3, #0]
 8004376:	f000 fc27 	bl	8004bc8 <usMBMasterGetPDUSndLength>
 800437a:	4602      	mov	r2, r0
 800437c:	4629      	mov	r1, r5
 800437e:	4620      	mov	r0, r4
 8004380:	f000 fd2c 	bl	8004ddc <vMBMasterErrorCBReceiveData>
                break;
 8004384:	e7e3      	b.n	800434e <eMBMasterPoll+0x15a>
    return ucMBMasterDestAddress;
 8004386:	4b0d      	ldr	r3, [pc, #52]	; (80043bc <eMBMasterPoll+0x1c8>)
 8004388:	781c      	ldrb	r4, [r3, #0]
                vMBMasterErrorCBExecuteFunction(ucMBMasterGetDestAddress(),
 800438a:	4b0a      	ldr	r3, [pc, #40]	; (80043b4 <eMBMasterPoll+0x1c0>)
 800438c:	681d      	ldr	r5, [r3, #0]
 800438e:	f000 fc1b 	bl	8004bc8 <usMBMasterGetPDUSndLength>
 8004392:	4602      	mov	r2, r0
 8004394:	4629      	mov	r1, r5
 8004396:	4620      	mov	r0, r4
 8004398:	f000 fd2a 	bl	8004df0 <vMBMasterErrorCBExecuteFunction>
                break;
 800439c:	e7d7      	b.n	800434e <eMBMasterPoll+0x15a>
        return MB_EILLSTATE;
 800439e:	2406      	movs	r4, #6
 80043a0:	e737      	b.n	8004212 <eMBMasterPoll+0x1e>
        switch ( eEvent )
 80043a2:	2400      	movs	r4, #0
 80043a4:	e735      	b.n	8004212 <eMBMasterPoll+0x1e>
 80043a6:	bf00      	nop
 80043a8:	2000000c 	.word	0x2000000c
 80043ac:	20001714 	.word	0x20001714
 80043b0:	2000173a 	.word	0x2000173a
 80043b4:	20001734 	.word	0x20001734
 80043b8:	20001739 	.word	0x20001739
 80043bc:	20001738 	.word	0x20001738
 80043c0:	20001711 	.word	0x20001711
 80043c4:	20001710 	.word	0x20001710
 80043c8:	0800764c 	.word	0x0800764c
 80043cc:	2000173c 	.word	0x2000173c
 80043d0:	20001718 	.word	0x20001718

080043d4 <ucMBMasterGetDestAddress>:
}
 80043d4:	4b01      	ldr	r3, [pc, #4]	; (80043dc <ucMBMasterGetDestAddress+0x8>)
 80043d6:	7818      	ldrb	r0, [r3, #0]
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	20001738 	.word	0x20001738

080043e0 <vMBMasterSetDestAddress>:
    ucMBMasterDestAddress = Address;
 80043e0:	4b01      	ldr	r3, [pc, #4]	; (80043e8 <vMBMasterSetDestAddress+0x8>)
 80043e2:	7018      	strb	r0, [r3, #0]
}
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	20001738 	.word	0x20001738

080043ec <vMBMasterSetErrorType>:
    eMBMasterCurErrorType = errorType;
 80043ec:	4b01      	ldr	r3, [pc, #4]	; (80043f4 <vMBMasterSetErrorType+0x8>)
 80043ee:	7018      	strb	r0, [r3, #0]
}
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	20001711 	.word	0x20001711

080043f8 <usMBCRC16>:
{
    UCHAR           ucCRCHi = 0xFF;
    UCHAR           ucCRCLo = 0xFF;
    int             iIndex;

    while( usLen-- )
 80043f8:	b1b9      	cbz	r1, 800442a <usMBCRC16+0x32>
{
 80043fa:	b430      	push	{r4, r5}
 80043fc:	f101 3cff 	add.w	ip, r1, #4294967295
 8004400:	fa1f fc8c 	uxth.w	ip, ip
 8004404:	f10c 0c01 	add.w	ip, ip, #1
 8004408:	4484      	add	ip, r0
    UCHAR           ucCRCLo = 0xFF;
 800440a:	22ff      	movs	r2, #255	; 0xff
    UCHAR           ucCRCHi = 0xFF;
 800440c:	4611      	mov	r1, r2
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 800440e:	4d09      	ldr	r5, [pc, #36]	; (8004434 <usMBCRC16+0x3c>)
        ucCRCHi = aucCRCLo[iIndex];
 8004410:	4c09      	ldr	r4, [pc, #36]	; (8004438 <usMBCRC16+0x40>)
        iIndex = ucCRCLo ^ *( pucFrame++ );
 8004412:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004416:	4053      	eors	r3, r2
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 8004418:	5cea      	ldrb	r2, [r5, r3]
 800441a:	404a      	eors	r2, r1
        ucCRCHi = aucCRCLo[iIndex];
 800441c:	5ce1      	ldrb	r1, [r4, r3]
    while( usLen-- )
 800441e:	4560      	cmp	r0, ip
 8004420:	d1f7      	bne.n	8004412 <usMBCRC16+0x1a>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
}
 8004422:	ea42 2001 	orr.w	r0, r2, r1, lsl #8
 8004426:	bc30      	pop	{r4, r5}
 8004428:	4770      	bx	lr
    UCHAR           ucCRCLo = 0xFF;
 800442a:	22ff      	movs	r2, #255	; 0xff
}
 800442c:	ea42 2002 	orr.w	r0, r2, r2, lsl #8
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	080076cc 	.word	0x080076cc
 8004438:	080077cc 	.word	0x080077cc

0800443c <eMBMasterFuncReadCoils>:
    return eErrStatus;
}

eMBException
eMBMasterFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 800443c:	b530      	push	{r4, r5, lr}
 800443e:	b083      	sub	sp, #12
 8004440:	4605      	mov	r5, r0
 8004442:	460c      	mov	r4, r1

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 8004444:	f000 fbcc 	bl	8004be0 <xMBMasterRequestIsBroadcast>
 8004448:	bb48      	cbnz	r0, 800449e <eMBMasterFuncReadCoils+0x62>
    {
        eStatus = MB_EX_NONE;
    }
    else if ( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 800444a:	8823      	ldrh	r3, [r4, #0]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d929      	bls.n	80044a4 <eMBMasterFuncReadCoils+0x68>
    {
        vMBMasterGetPDUSndBuf(&ucMBFrame);
 8004450:	a801      	add	r0, sp, #4
 8004452:	f000 fbad 	bl	8004bb0 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 8004456:	9b01      	ldr	r3, [sp, #4]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usCoilCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_COILCNT_OFF] << 8 );
 8004458:	78da      	ldrb	r2, [r3, #3]
        usCoilCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_COILCNT_OFF + 1] );
 800445a:	7919      	ldrb	r1, [r3, #4]
 800445c:	ea41 2202 	orr.w	r2, r1, r2, lsl #8

        /* Test if the quantity of coils is a multiple of 8. If not last
         * byte is only partially field with unused coils set to zero. */
        if( ( usCoilCount & 0x0007 ) != 0 )
 8004460:	f011 0f07 	tst.w	r1, #7
 8004464:	d007      	beq.n	8004476 <eMBMasterFuncReadCoils+0x3a>
        {
            ucByteCount = ( UCHAR )( usCoilCount / 8 + 1 );
 8004466:	08d1      	lsrs	r1, r2, #3
 8004468:	3101      	adds	r1, #1
 800446a:	b2c9      	uxtb	r1, r1
        }

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception.
         */
        if( ( usCoilCount >= 1 ) &&
 800446c:	7868      	ldrb	r0, [r5, #1]
 800446e:	4288      	cmp	r0, r1
 8004470:	d007      	beq.n	8004482 <eMBMasterFuncReadCoils+0x46>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004472:	2003      	movs	r0, #3
 8004474:	e014      	b.n	80044a0 <eMBMasterFuncReadCoils+0x64>
        if( ( usCoilCount >= 1 ) &&
 8004476:	b90a      	cbnz	r2, 800447c <eMBMasterFuncReadCoils+0x40>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004478:	2003      	movs	r0, #3
 800447a:	e011      	b.n	80044a0 <eMBMasterFuncReadCoils+0x64>
            ucByteCount = ( UCHAR )( usCoilCount / 8 );
 800447c:	f3c2 01c7 	ubfx	r1, r2, #3, #8
 8004480:	e7f4      	b.n	800446c <eMBMasterFuncReadCoils+0x30>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 8004482:	7858      	ldrb	r0, [r3, #1]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 8004484:	7899      	ldrb	r1, [r3, #2]
 8004486:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
        usRegAddress++;
 800448a:	3101      	adds	r1, #1
            eRegStatus = eMBMasterRegCoilsCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usCoilCount, MB_REG_READ );
 800448c:	2300      	movs	r3, #0
 800448e:	b289      	uxth	r1, r1
 8004490:	1ca8      	adds	r0, r5, #2
 8004492:	f000 fe49 	bl	8005128 <eMBMasterRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 8004496:	b118      	cbz	r0, 80044a0 <eMBMasterFuncReadCoils+0x64>
                eStatus = prveMBError2Exception( eRegStatus );
 8004498:	f000 fbca 	bl	8004c30 <prveMBError2Exception>
 800449c:	e000      	b.n	80044a0 <eMBMasterFuncReadCoils+0x64>
        eStatus = MB_EX_NONE;
 800449e:	2000      	movs	r0, #0
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 80044a0:	b003      	add	sp, #12
 80044a2:	bd30      	pop	{r4, r5, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80044a4:	2003      	movs	r0, #3
 80044a6:	e7fb      	b.n	80044a0 <eMBMasterFuncReadCoils+0x64>

080044a8 <eMBMasterFuncWriteCoil>:
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80044a8:	880b      	ldrh	r3, [r1, #0]
 80044aa:	2b05      	cmp	r3, #5
 80044ac:	d001      	beq.n	80044b2 <eMBMasterFuncWriteCoil+0xa>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80044ae:	2003      	movs	r0, #3
 80044b0:	4770      	bx	lr
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 80044b2:	7903      	ldrb	r3, [r0, #4]
 80044b4:	bb0b      	cbnz	r3, 80044fa <eMBMasterFuncWriteCoil+0x52>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 80044b6:	78c2      	ldrb	r2, [r0, #3]
 80044b8:	1e53      	subs	r3, r2, #1
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2bfd      	cmp	r3, #253	; 0xfd
 80044be:	d91e      	bls.n	80044fe <eMBMasterFuncWriteCoil+0x56>
{
 80044c0:	b500      	push	{lr}
 80044c2:	b083      	sub	sp, #12
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 80044c4:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 80044c6:	7881      	ldrb	r1, [r0, #2]
            ucBuf[1] = 0;
 80044c8:	2000      	movs	r0, #0
 80044ca:	f88d 0005 	strb.w	r0, [sp, #5]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 80044ce:	2aff      	cmp	r2, #255	; 0xff
 80044d0:	bf14      	ite	ne
 80044d2:	2200      	movne	r2, #0
 80044d4:	2201      	moveq	r2, #1
 80044d6:	f88d 2004 	strb.w	r2, [sp, #4]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 80044da:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 80044de:	3101      	adds	r1, #1
                eMBMasterRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 80044e0:	2301      	movs	r3, #1
 80044e2:	461a      	mov	r2, r3
 80044e4:	b289      	uxth	r1, r1
 80044e6:	a801      	add	r0, sp, #4
 80044e8:	f000 fe1e 	bl	8005128 <eMBMasterRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 80044ec:	b910      	cbnz	r0, 80044f4 <eMBMasterFuncWriteCoil+0x4c>
    }
    return eStatus;
}
 80044ee:	b003      	add	sp, #12
 80044f0:	f85d fb04 	ldr.w	pc, [sp], #4
                eStatus = prveMBError2Exception( eRegStatus );
 80044f4:	f000 fb9c 	bl	8004c30 <prveMBError2Exception>
 80044f8:	e7f9      	b.n	80044ee <eMBMasterFuncWriteCoil+0x46>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80044fa:	2003      	movs	r0, #3
 80044fc:	4770      	bx	lr
 80044fe:	2003      	movs	r0, #3
}
 8004500:	4770      	bx	lr

08004502 <eMBMasterFuncWriteMultipleCoils>:
    return eErrStatus;
}

eMBException
eMBMasterFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8004502:	b510      	push	{r4, lr}
 8004504:	b082      	sub	sp, #8
 8004506:	4604      	mov	r4, r0

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
 8004508:	880b      	ldrh	r3, [r1, #0]
 800450a:	2b05      	cmp	r3, #5
 800450c:	d002      	beq.n	8004514 <eMBMasterFuncWriteMultipleCoils+0x12>
 800450e:	f000 fb67 	bl	8004be0 <xMBMasterRequestIsBroadcast>
 8004512:	b340      	cbz	r0, 8004566 <eMBMasterFuncWriteMultipleCoils+0x64>
    {
        vMBMasterGetPDUSndBuf(&ucMBFrame);
 8004514:	a801      	add	r0, sp, #4
 8004516:	f000 fb4b 	bl	8004bb0 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 800451a:	78e2      	ldrb	r2, [r4, #3]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 800451c:	7923      	ldrb	r3, [r4, #4]
 800451e:	ea43 2202 	orr.w	r2, r3, r2, lsl #8

        ucByteCount = ucMBFrame[MB_PDU_REQ_WRITE_MUL_BYTECNT_OFF];

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8004522:	f013 0f07 	tst.w	r3, #7
 8004526:	d009      	beq.n	800453c <eMBMasterFuncWriteMultipleCoils+0x3a>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 8004528:	08d3      	lsrs	r3, r2, #3
 800452a:	3301      	adds	r3, #1
 800452c:	b2db      	uxtb	r3, r3
        ucByteCount = ucMBFrame[MB_PDU_REQ_WRITE_MUL_BYTECNT_OFF];
 800452e:	9801      	ldr	r0, [sp, #4]
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
        }

        if( ( usCoilCnt >= 1 ) && ( ucByteCountVerify == ucByteCount ) )
 8004530:	7941      	ldrb	r1, [r0, #5]
 8004532:	4299      	cmp	r1, r3
 8004534:	d008      	beq.n	8004548 <eMBMasterFuncWriteMultipleCoils+0x46>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004536:	2003      	movs	r0, #3
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8004538:	b002      	add	sp, #8
 800453a:	bd10      	pop	{r4, pc}
        if( ( usCoilCnt >= 1 ) && ( ucByteCountVerify == ucByteCount ) )
 800453c:	b90a      	cbnz	r2, 8004542 <eMBMasterFuncWriteMultipleCoils+0x40>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800453e:	2003      	movs	r0, #3
 8004540:	e7fa      	b.n	8004538 <eMBMasterFuncWriteMultipleCoils+0x36>
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 8004542:	f3c2 03c7 	ubfx	r3, r2, #3, #8
 8004546:	e7f2      	b.n	800452e <eMBMasterFuncWriteMultipleCoils+0x2c>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8004548:	7863      	ldrb	r3, [r4, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 800454a:	78a1      	ldrb	r1, [r4, #2]
 800454c:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8004550:	3101      	adds	r1, #1
                eMBMasterRegCoilsCB( &ucMBFrame[MB_PDU_REQ_WRITE_MUL_VALUES_OFF],
 8004552:	2301      	movs	r3, #1
 8004554:	b289      	uxth	r1, r1
 8004556:	3006      	adds	r0, #6
 8004558:	f000 fde6 	bl	8005128 <eMBMasterRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 800455c:	2800      	cmp	r0, #0
 800455e:	d0eb      	beq.n	8004538 <eMBMasterFuncWriteMultipleCoils+0x36>
                eStatus = prveMBError2Exception( eRegStatus );
 8004560:	f000 fb66 	bl	8004c30 <prveMBError2Exception>
 8004564:	e7e8      	b.n	8004538 <eMBMasterFuncWriteMultipleCoils+0x36>
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004566:	2003      	movs	r0, #3
 8004568:	e7e6      	b.n	8004538 <eMBMasterFuncWriteMultipleCoils+0x36>

0800456a <eMBMasterFuncReadDiscreteInputs>:
    return eErrStatus;
}

eMBException
eMBMasterFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 800456a:	b530      	push	{r4, r5, lr}
 800456c:	b083      	sub	sp, #12
 800456e:	4605      	mov	r5, r0
 8004570:	460c      	mov	r4, r1

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 8004572:	f000 fb35 	bl	8004be0 <xMBMasterRequestIsBroadcast>
 8004576:	bb40      	cbnz	r0, 80045ca <eMBMasterFuncReadDiscreteInputs+0x60>
    {
        eStatus = MB_EX_NONE;
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 8004578:	8823      	ldrh	r3, [r4, #0]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d928      	bls.n	80045d0 <eMBMasterFuncReadDiscreteInputs+0x66>
    {
        vMBMasterGetPDUSndBuf(&ucMBFrame);
 800457e:	a801      	add	r0, sp, #4
 8004580:	f000 fb16 	bl	8004bb0 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 8004584:	9b01      	ldr	r3, [sp, #4]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usDiscreteCnt = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_DISCCNT_OFF] << 8 );
 8004586:	78da      	ldrb	r2, [r3, #3]
        usDiscreteCnt |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_DISCCNT_OFF + 1] );
 8004588:	7919      	ldrb	r1, [r3, #4]
 800458a:	ea41 2202 	orr.w	r2, r1, r2, lsl #8

        /* Test if the quantity of coils is a multiple of 8. If not last
         * byte is only partially field with unused coils set to zero. */
        if( ( usDiscreteCnt & 0x0007 ) != 0 )
 800458e:	f011 0f07 	tst.w	r1, #7
 8004592:	d007      	beq.n	80045a4 <eMBMasterFuncReadDiscreteInputs+0x3a>
        {
            ucNBytes = ( UCHAR )( usDiscreteCnt / 8 + 1 );
 8004594:	08d1      	lsrs	r1, r2, #3
 8004596:	3101      	adds	r1, #1
 8004598:	b2c9      	uxtb	r1, r1
        }

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception.
         */
        if ((usDiscreteCnt >= 1) && ucNBytes == pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF])
 800459a:	7868      	ldrb	r0, [r5, #1]
 800459c:	4288      	cmp	r0, r1
 800459e:	d007      	beq.n	80045b0 <eMBMasterFuncReadDiscreteInputs+0x46>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80045a0:	2003      	movs	r0, #3
 80045a2:	e013      	b.n	80045cc <eMBMasterFuncReadDiscreteInputs+0x62>
        if ((usDiscreteCnt >= 1) && ucNBytes == pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF])
 80045a4:	b90a      	cbnz	r2, 80045aa <eMBMasterFuncReadDiscreteInputs+0x40>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80045a6:	2003      	movs	r0, #3
 80045a8:	e010      	b.n	80045cc <eMBMasterFuncReadDiscreteInputs+0x62>
            ucNBytes = ( UCHAR )( usDiscreteCnt / 8 );
 80045aa:	f3c2 01c7 	ubfx	r1, r2, #3, #8
 80045ae:	e7f4      	b.n	800459a <eMBMasterFuncReadDiscreteInputs+0x30>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 80045b0:	7858      	ldrb	r0, [r3, #1]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 80045b2:	7899      	ldrb	r1, [r3, #2]
 80045b4:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
        usRegAddress++;
 80045b8:	3101      	adds	r1, #1
            eRegStatus = eMBMasterRegDiscreteCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usDiscreteCnt );
 80045ba:	b289      	uxth	r1, r1
 80045bc:	1ca8      	adds	r0, r5, #2
 80045be:	f000 fe01 	bl	80051c4 <eMBMasterRegDiscreteCB>
            if( eRegStatus != MB_ENOERR )
 80045c2:	b118      	cbz	r0, 80045cc <eMBMasterFuncReadDiscreteInputs+0x62>
                eStatus = prveMBError2Exception( eRegStatus );
 80045c4:	f000 fb34 	bl	8004c30 <prveMBError2Exception>
 80045c8:	e000      	b.n	80045cc <eMBMasterFuncReadDiscreteInputs+0x62>
        eStatus = MB_EX_NONE;
 80045ca:	2000      	movs	r0, #0
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 80045cc:	b003      	add	sp, #12
 80045ce:	bd30      	pop	{r4, r5, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80045d0:	2003      	movs	r0, #3
 80045d2:	e7fb      	b.n	80045cc <eMBMasterFuncReadDiscreteInputs+0x62>

080045d4 <eMBMasterFuncWriteHoldingRegister>:
    return eErrStatus;
}

eMBException
eMBMasterFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80045d4:	b508      	push	{r3, lr}
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_SIZE_MIN + MB_PDU_FUNC_WRITE_SIZE ) )
 80045d6:	880b      	ldrh	r3, [r1, #0]
 80045d8:	2b05      	cmp	r3, #5
 80045da:	d001      	beq.n	80045e0 <eMBMasterFuncWriteHoldingRegister+0xc>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80045dc:	2003      	movs	r0, #3
    }
    return eStatus;
}
 80045de:	bd08      	pop	{r3, pc}
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 80045e0:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 80045e2:	7881      	ldrb	r1, [r0, #2]
 80045e4:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 80045e8:	3101      	adds	r1, #1
        eRegStatus = eMBMasterRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 80045ea:	2301      	movs	r3, #1
 80045ec:	461a      	mov	r2, r3
 80045ee:	b289      	uxth	r1, r1
 80045f0:	3003      	adds	r0, #3
 80045f2:	f000 fd63 	bl	80050bc <eMBMasterRegHoldingCB>
        if( eRegStatus != MB_ENOERR )
 80045f6:	2800      	cmp	r0, #0
 80045f8:	d0f1      	beq.n	80045de <eMBMasterFuncWriteHoldingRegister+0xa>
            eStatus = prveMBError2Exception( eRegStatus );
 80045fa:	f000 fb19 	bl	8004c30 <prveMBError2Exception>
 80045fe:	e7ee      	b.n	80045de <eMBMasterFuncWriteHoldingRegister+0xa>

08004600 <eMBMasterReqWriteMultipleHoldingRegister>:
{
    UCHAR                 *ucMBFrame;
    USHORT                 usRegIndex = 0;
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;

    if ( ucSndAddr > MB_MASTER_TOTAL_SLAVE_NUM ) eErrStatus = MB_MRE_ILL_ARG;
 8004600:	2820      	cmp	r0, #32
 8004602:	d901      	bls.n	8004608 <eMBMasterReqWriteMultipleHoldingRegister+0x8>
 8004604:	2002      	movs	r0, #2
        vMBMasterSetPDUSndLength( MB_PDU_SIZE_MIN + MB_PDU_REQ_WRITE_MUL_SIZE_MIN + 2*usNRegs );
        ( void ) xMBMasterPortEventPost( EV_MASTER_FRAME_SENT );
        eErrStatus = eMBMasterWaitRequestFinish( );
    }
    return eErrStatus;
}
 8004606:	4770      	bx	lr
{
 8004608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800460a:	b083      	sub	sp, #12
 800460c:	4605      	mov	r5, r0
 800460e:	460f      	mov	r7, r1
 8004610:	4614      	mov	r4, r2
 8004612:	461e      	mov	r6, r3
    else if ( xMBMasterRunResTake( lTimeOut ) == FALSE ) eErrStatus = MB_MRE_MASTER_BUSY;
 8004614:	9808      	ldr	r0, [sp, #32]
 8004616:	f000 fbd4 	bl	8004dc2 <xMBMasterRunResTake>
 800461a:	b910      	cbnz	r0, 8004622 <eMBMasterReqWriteMultipleHoldingRegister+0x22>
 800461c:	2005      	movs	r0, #5
}
 800461e:	b003      	add	sp, #12
 8004620:	bdf0      	pop	{r4, r5, r6, r7, pc}
        vMBMasterGetPDUSndBuf(&ucMBFrame);
 8004622:	a801      	add	r0, sp, #4
 8004624:	f000 fac4 	bl	8004bb0 <vMBMasterGetPDUSndBuf>
        vMBMasterSetDestAddress(ucSndAddr);
 8004628:	4628      	mov	r0, r5
 800462a:	f7ff fed9 	bl	80043e0 <vMBMasterSetDestAddress>
        ucMBFrame[MB_PDU_FUNC_OFF]                     = MB_FUNC_WRITE_MULTIPLE_REGISTERS;
 800462e:	9b01      	ldr	r3, [sp, #4]
 8004630:	2210      	movs	r2, #16
 8004632:	701a      	strb	r2, [r3, #0]
        ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF]       = usRegAddr >> 8;
 8004634:	0a3a      	lsrs	r2, r7, #8
 8004636:	9b01      	ldr	r3, [sp, #4]
 8004638:	705a      	strb	r2, [r3, #1]
        ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF + 1]   = usRegAddr;
 800463a:	9b01      	ldr	r3, [sp, #4]
 800463c:	709f      	strb	r7, [r3, #2]
        ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF]     = usNRegs >> 8;
 800463e:	0a23      	lsrs	r3, r4, #8
 8004640:	9a01      	ldr	r2, [sp, #4]
 8004642:	70d3      	strb	r3, [r2, #3]
        ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF + 1] = usNRegs ;
 8004644:	9b01      	ldr	r3, [sp, #4]
 8004646:	b2e2      	uxtb	r2, r4
 8004648:	711a      	strb	r2, [r3, #4]
        ucMBFrame[MB_PDU_REQ_WRITE_MUL_BYTECNT_OFF]    = usNRegs * 2;
 800464a:	0052      	lsls	r2, r2, #1
 800464c:	715a      	strb	r2, [r3, #5]
        ucMBFrame += MB_PDU_REQ_WRITE_MUL_VALUES_OFF;
 800464e:	3306      	adds	r3, #6
 8004650:	9301      	str	r3, [sp, #4]
        while( usNRegs > usRegIndex)
 8004652:	b194      	cbz	r4, 800467a <eMBMasterReqWriteMultipleHoldingRegister+0x7a>
 8004654:	1eb1      	subs	r1, r6, #2
 8004656:	1e65      	subs	r5, r4, #1
 8004658:	b2ad      	uxth	r5, r5
 800465a:	eb06 0545 	add.w	r5, r6, r5, lsl #1
            *ucMBFrame++ = pusDataBuffer[usRegIndex] >> 8;
 800465e:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8004662:	0a1b      	lsrs	r3, r3, #8
 8004664:	9801      	ldr	r0, [sp, #4]
 8004666:	1c42      	adds	r2, r0, #1
 8004668:	9201      	str	r2, [sp, #4]
 800466a:	7003      	strb	r3, [r0, #0]
            *ucMBFrame++ = pusDataBuffer[usRegIndex++] ;
 800466c:	880a      	ldrh	r2, [r1, #0]
 800466e:	9b01      	ldr	r3, [sp, #4]
 8004670:	1c58      	adds	r0, r3, #1
 8004672:	9001      	str	r0, [sp, #4]
 8004674:	701a      	strb	r2, [r3, #0]
        while( usNRegs > usRegIndex)
 8004676:	42a9      	cmp	r1, r5
 8004678:	d1f1      	bne.n	800465e <eMBMasterReqWriteMultipleHoldingRegister+0x5e>
        vMBMasterSetPDUSndLength( MB_PDU_SIZE_MIN + MB_PDU_REQ_WRITE_MUL_SIZE_MIN + 2*usNRegs );
 800467a:	1ce0      	adds	r0, r4, #3
 800467c:	0040      	lsls	r0, r0, #1
 800467e:	b280      	uxth	r0, r0
 8004680:	f000 fa9c 	bl	8004bbc <vMBMasterSetPDUSndLength>
        ( void ) xMBMasterPortEventPost( EV_MASTER_FRAME_SENT );
 8004684:	2008      	movs	r0, #8
 8004686:	f000 faeb 	bl	8004c60 <xMBMasterPortEventPost>
        eErrStatus = eMBMasterWaitRequestFinish( );
 800468a:	f000 fbc5 	bl	8004e18 <eMBMasterWaitRequestFinish>
 800468e:	e7c6      	b.n	800461e <eMBMasterReqWriteMultipleHoldingRegister+0x1e>

08004690 <eMBMasterFuncWriteMultipleHoldingRegister>:

eMBException
eMBMasterFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8004690:	b500      	push	{lr}
 8004692:	b083      	sub	sp, #12

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_SIZE_MIN + MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
 8004694:	880b      	ldrh	r3, [r1, #0]
 8004696:	2b05      	cmp	r3, #5
 8004698:	d002      	beq.n	80046a0 <eMBMasterFuncWriteMultipleHoldingRegister+0x10>
 800469a:	f000 faa1 	bl	8004be0 <xMBMasterRequestIsBroadcast>
 800469e:	b1f0      	cbz	r0, 80046de <eMBMasterFuncWriteMultipleHoldingRegister+0x4e>
    {
        vMBMasterGetPDUSndBuf(&ucMBFrame);
 80046a0:	a801      	add	r0, sp, #4
 80046a2:	f000 fa85 	bl	8004bb0 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF] << 8 );
 80046a6:	9801      	ldr	r0, [sp, #4]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF] << 8 );
 80046a8:	78c3      	ldrb	r3, [r0, #3]
        usRegCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF + 1] );
 80046aa:	7902      	ldrb	r2, [r0, #4]
 80046ac:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        ucRegByteCount = ucMBFrame[MB_PDU_REQ_WRITE_MUL_BYTECNT_OFF];

        if( ucRegByteCount == 2 * usRegCount )
 80046b0:	7943      	ldrb	r3, [r0, #5]
 80046b2:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80046b6:	d003      	beq.n	80046c0 <eMBMasterFuncWriteMultipleHoldingRegister+0x30>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80046b8:	2003      	movs	r0, #3
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 80046ba:	b003      	add	sp, #12
 80046bc:	f85d fb04 	ldr.w	pc, [sp], #4
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF] << 8 );
 80046c0:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF + 1] );
 80046c2:	7881      	ldrb	r1, [r0, #2]
 80046c4:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 80046c8:	3101      	adds	r1, #1
                eMBMasterRegHoldingCB( &ucMBFrame[MB_PDU_REQ_WRITE_MUL_VALUES_OFF],
 80046ca:	2301      	movs	r3, #1
 80046cc:	b289      	uxth	r1, r1
 80046ce:	3006      	adds	r0, #6
 80046d0:	f000 fcf4 	bl	80050bc <eMBMasterRegHoldingCB>
            if( eRegStatus != MB_ENOERR )
 80046d4:	2800      	cmp	r0, #0
 80046d6:	d0f0      	beq.n	80046ba <eMBMasterFuncWriteMultipleHoldingRegister+0x2a>
                eStatus = prveMBError2Exception( eRegStatus );
 80046d8:	f000 faaa 	bl	8004c30 <prveMBError2Exception>
 80046dc:	e7ed      	b.n	80046ba <eMBMasterFuncWriteMultipleHoldingRegister+0x2a>
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80046de:	2003      	movs	r0, #3
 80046e0:	e7eb      	b.n	80046ba <eMBMasterFuncWriteMultipleHoldingRegister+0x2a>

080046e2 <eMBMasterReqReadHoldingRegister>:
eMBMasterReqReadHoldingRegister( UCHAR ucSndAddr, USHORT usRegAddr, USHORT usNRegs, LONG lTimeOut )
{
    UCHAR                 *ucMBFrame;
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;

    if ( ucSndAddr > MB_MASTER_TOTAL_SLAVE_NUM ) eErrStatus = MB_MRE_ILL_ARG;
 80046e2:	2820      	cmp	r0, #32
 80046e4:	d901      	bls.n	80046ea <eMBMasterReqReadHoldingRegister+0x8>
 80046e6:	2002      	movs	r0, #2
        vMBMasterSetPDUSndLength( MB_PDU_SIZE_MIN + MB_PDU_REQ_READ_SIZE );
        ( void ) xMBMasterPortEventPost( EV_MASTER_FRAME_SENT );
        eErrStatus = eMBMasterWaitRequestFinish( );
    }
    return eErrStatus;
}
 80046e8:	4770      	bx	lr
{
 80046ea:	b570      	push	{r4, r5, r6, lr}
 80046ec:	b082      	sub	sp, #8
 80046ee:	4604      	mov	r4, r0
 80046f0:	460e      	mov	r6, r1
 80046f2:	4615      	mov	r5, r2
    else if ( xMBMasterRunResTake( lTimeOut ) == FALSE ) eErrStatus = MB_MRE_MASTER_BUSY;
 80046f4:	4618      	mov	r0, r3
 80046f6:	f000 fb64 	bl	8004dc2 <xMBMasterRunResTake>
 80046fa:	b910      	cbnz	r0, 8004702 <eMBMasterReqReadHoldingRegister+0x20>
 80046fc:	2005      	movs	r0, #5
}
 80046fe:	b002      	add	sp, #8
 8004700:	bd70      	pop	{r4, r5, r6, pc}
        vMBMasterGetPDUSndBuf(&ucMBFrame);
 8004702:	a801      	add	r0, sp, #4
 8004704:	f000 fa54 	bl	8004bb0 <vMBMasterGetPDUSndBuf>
        vMBMasterSetDestAddress(ucSndAddr);
 8004708:	4620      	mov	r0, r4
 800470a:	f7ff fe69 	bl	80043e0 <vMBMasterSetDestAddress>
        ucMBFrame[MB_PDU_FUNC_OFF]                = MB_FUNC_READ_HOLDING_REGISTER;
 800470e:	9b01      	ldr	r3, [sp, #4]
 8004710:	2203      	movs	r2, #3
 8004712:	701a      	strb	r2, [r3, #0]
        ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF]       = usRegAddr >> 8;
 8004714:	0a32      	lsrs	r2, r6, #8
 8004716:	9b01      	ldr	r3, [sp, #4]
 8004718:	705a      	strb	r2, [r3, #1]
        ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1]   = usRegAddr;
 800471a:	9b01      	ldr	r3, [sp, #4]
 800471c:	709e      	strb	r6, [r3, #2]
        ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF]     = usNRegs >> 8;
 800471e:	0a2a      	lsrs	r2, r5, #8
 8004720:	9b01      	ldr	r3, [sp, #4]
 8004722:	70da      	strb	r2, [r3, #3]
        ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF + 1] = usNRegs;
 8004724:	9b01      	ldr	r3, [sp, #4]
 8004726:	711d      	strb	r5, [r3, #4]
        vMBMasterSetPDUSndLength( MB_PDU_SIZE_MIN + MB_PDU_REQ_READ_SIZE );
 8004728:	2005      	movs	r0, #5
 800472a:	f000 fa47 	bl	8004bbc <vMBMasterSetPDUSndLength>
        ( void ) xMBMasterPortEventPost( EV_MASTER_FRAME_SENT );
 800472e:	2008      	movs	r0, #8
 8004730:	f000 fa96 	bl	8004c60 <xMBMasterPortEventPost>
        eErrStatus = eMBMasterWaitRequestFinish( );
 8004734:	f000 fb70 	bl	8004e18 <eMBMasterWaitRequestFinish>
 8004738:	e7e1      	b.n	80046fe <eMBMasterReqReadHoldingRegister+0x1c>

0800473a <eMBMasterFuncReadHoldingRegister>:

eMBException
eMBMasterFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800473a:	b530      	push	{r4, r5, lr}
 800473c:	b083      	sub	sp, #12
 800473e:	4605      	mov	r5, r0
 8004740:	460c      	mov	r4, r1

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 8004742:	f000 fa4d 	bl	8004be0 <xMBMasterRequestIsBroadcast>
 8004746:	b9f8      	cbnz	r0, 8004788 <eMBMasterFuncReadHoldingRegister+0x4e>
    {
        eStatus = MB_EX_NONE;
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 8004748:	8823      	ldrh	r3, [r4, #0]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d91f      	bls.n	800478e <eMBMasterFuncReadHoldingRegister+0x54>
    {
        vMBMasterGetPDUSndBuf(&ucMBFrame);
 800474e:	a801      	add	r0, sp, #4
 8004750:	f000 fa2e 	bl	8004bb0 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 8004754:	9b01      	ldr	r3, [sp, #4]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF] << 8 );
 8004756:	78d9      	ldrb	r1, [r3, #3]
        usRegCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF + 1] );
 8004758:	791a      	ldrb	r2, [r3, #4]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception.
         */
        if( ( usRegCount >= 1 ) && ( 2 * usRegCount == pucFrame[MB_PDU_FUNC_READ_BYTECNT_OFF] ) )
 800475a:	ea52 2201 	orrs.w	r2, r2, r1, lsl #8
 800475e:	d018      	beq.n	8004792 <eMBMasterFuncReadHoldingRegister+0x58>
 8004760:	7869      	ldrb	r1, [r5, #1]
 8004762:	ebb1 0f42 	cmp.w	r1, r2, lsl #1
 8004766:	d001      	beq.n	800476c <eMBMasterFuncReadHoldingRegister+0x32>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004768:	2003      	movs	r0, #3
 800476a:	e00e      	b.n	800478a <eMBMasterFuncReadHoldingRegister+0x50>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 800476c:	7858      	ldrb	r0, [r3, #1]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 800476e:	7899      	ldrb	r1, [r3, #2]
 8004770:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
        usRegAddress++;
 8004774:	3101      	adds	r1, #1
            eRegStatus = eMBMasterRegHoldingCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usRegCount, MB_REG_READ );
 8004776:	2300      	movs	r3, #0
 8004778:	b289      	uxth	r1, r1
 800477a:	1ca8      	adds	r0, r5, #2
 800477c:	f000 fc9e 	bl	80050bc <eMBMasterRegHoldingCB>
            if( eRegStatus != MB_ENOERR )
 8004780:	b118      	cbz	r0, 800478a <eMBMasterFuncReadHoldingRegister+0x50>
                eStatus = prveMBError2Exception( eRegStatus );
 8004782:	f000 fa55 	bl	8004c30 <prveMBError2Exception>
 8004786:	e000      	b.n	800478a <eMBMasterFuncReadHoldingRegister+0x50>
        eStatus = MB_EX_NONE;
 8004788:	2000      	movs	r0, #0
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 800478a:	b003      	add	sp, #12
 800478c:	bd30      	pop	{r4, r5, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800478e:	2003      	movs	r0, #3
 8004790:	e7fb      	b.n	800478a <eMBMasterFuncReadHoldingRegister+0x50>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004792:	2003      	movs	r0, #3
 8004794:	e7f9      	b.n	800478a <eMBMasterFuncReadHoldingRegister+0x50>

08004796 <eMBMasterFuncReadWriteMultipleHoldingRegister>:
    return eErrStatus;
}

eMBException
eMBMasterFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8004796:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004798:	b083      	sub	sp, #12
 800479a:	4605      	mov	r5, r0
 800479c:	460c      	mov	r4, r1

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 800479e:	f000 fa1f 	bl	8004be0 <xMBMasterRequestIsBroadcast>
 80047a2:	bb80      	cbnz	r0, 8004806 <eMBMasterFuncReadWriteMultipleHoldingRegister+0x70>
    {
        eStatus = MB_EX_NONE;
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READWRITE_SIZE_MIN )
 80047a4:	8823      	ldrh	r3, [r4, #0]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d92e      	bls.n	8004808 <eMBMasterFuncReadWriteMultipleHoldingRegister+0x72>
    {
        vMBMasterGetPDUSndBuf(&ucMBFrame);
 80047aa:	a801      	add	r0, sp, #4
 80047ac:	f000 fa00 	bl	8004bb0 <vMBMasterGetPDUSndBuf>
        usRegReadAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF] << 8U );
 80047b0:	9801      	ldr	r0, [sp, #4]
        usRegReadAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF + 1] );
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF] << 8U );
 80047b2:	78c3      	ldrb	r3, [r0, #3]
        usRegReadCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF + 1] );
 80047b4:	7904      	ldrb	r4, [r0, #4]
 80047b6:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
        usRegWriteAddress++;

        usRegWriteCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF] << 8U );
        usRegWriteCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF + 1] );

        if( ( 2 * usRegReadCount ) == pucFrame[MB_PDU_FUNC_READWRITE_READ_BYTECNT_OFF] )
 80047ba:	786b      	ldrb	r3, [r5, #1]
 80047bc:	ebb3 0f44 	cmp.w	r3, r4, lsl #1
 80047c0:	d001      	beq.n	80047c6 <eMBMasterFuncReadWriteMultipleHoldingRegister+0x30>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80047c2:	2003      	movs	r0, #3
 80047c4:	e020      	b.n	8004808 <eMBMasterFuncReadWriteMultipleHoldingRegister+0x72>
        usRegReadAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF] << 8U );
 80047c6:	7847      	ldrb	r7, [r0, #1]
        usRegReadAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF + 1] );
 80047c8:	7886      	ldrb	r6, [r0, #2]
        usRegWriteCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF] << 8U );
 80047ca:	f890 c007 	ldrb.w	ip, [r0, #7]
        usRegWriteAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_ADDR_OFF] << 8U );
 80047ce:	7943      	ldrb	r3, [r0, #5]
        usRegWriteAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_ADDR_OFF + 1] );
 80047d0:	7981      	ldrb	r1, [r0, #6]
 80047d2:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegWriteCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF + 1] );
 80047d6:	7a02      	ldrb	r2, [r0, #8]
        usRegWriteAddress++;
 80047d8:	3101      	adds	r1, #1
            eRegStatus = eMBMasterRegHoldingCB( &ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_VALUES_OFF],
 80047da:	2301      	movs	r3, #1
 80047dc:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 80047e0:	b289      	uxth	r1, r1
 80047e2:	300a      	adds	r0, #10
 80047e4:	f000 fc6a 	bl	80050bc <eMBMasterRegHoldingCB>
 80047e8:	4603      	mov	r3, r0
            if( eRegStatus == MB_ENOERR )
 80047ea:	b110      	cbz	r0, 80047f2 <eMBMasterFuncReadWriteMultipleHoldingRegister+0x5c>
                eStatus = prveMBError2Exception( eRegStatus );
 80047ec:	f000 fa20 	bl	8004c30 <prveMBError2Exception>
 80047f0:	e00a      	b.n	8004808 <eMBMasterFuncReadWriteMultipleHoldingRegister+0x72>
        usRegReadAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF + 1] );
 80047f2:	ea46 2107 	orr.w	r1, r6, r7, lsl #8
        usRegReadAddress++;
 80047f6:	3101      	adds	r1, #1
                eRegStatus = eMBMasterRegHoldingCB(&pucFrame[MB_PDU_FUNC_READWRITE_READ_VALUES_OFF],
 80047f8:	4622      	mov	r2, r4
 80047fa:	b289      	uxth	r1, r1
 80047fc:	1ca8      	adds	r0, r5, #2
 80047fe:	f000 fc5d 	bl	80050bc <eMBMasterRegHoldingCB>
            if( eRegStatus != MB_ENOERR )
 8004802:	b108      	cbz	r0, 8004808 <eMBMasterFuncReadWriteMultipleHoldingRegister+0x72>
 8004804:	e7f2      	b.n	80047ec <eMBMasterFuncReadWriteMultipleHoldingRegister+0x56>
        eStatus = MB_EX_NONE;
 8004806:	2000      	movs	r0, #0
        }
    }
    return eStatus;
}
 8004808:	b003      	add	sp, #12
 800480a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800480c <eMBMasterFuncReadInputRegister>:
    return eErrStatus;
}

eMBException
eMBMasterFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800480c:	b530      	push	{r4, r5, lr}
 800480e:	b083      	sub	sp, #12
 8004810:	4605      	mov	r5, r0
 8004812:	460c      	mov	r4, r1

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 8004814:	f000 f9e4 	bl	8004be0 <xMBMasterRequestIsBroadcast>
 8004818:	b9f0      	cbnz	r0, 8004858 <eMBMasterFuncReadInputRegister+0x4c>
    {
        eStatus = MB_EX_NONE;
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 800481a:	8823      	ldrh	r3, [r4, #0]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d91e      	bls.n	800485e <eMBMasterFuncReadInputRegister+0x52>
    {
        vMBMasterGetPDUSndBuf(&ucMBFrame);
 8004820:	a801      	add	r0, sp, #4
 8004822:	f000 f9c5 	bl	8004bb0 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 8004826:	9b01      	ldr	r3, [sp, #4]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF] << 8 );
 8004828:	78d9      	ldrb	r1, [r3, #3]
        usRegCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF + 1] );
 800482a:	791a      	ldrb	r2, [r3, #4]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception.
         */
        if( ( usRegCount >= 1 ) && ( 2 * usRegCount == pucFrame[MB_PDU_FUNC_READ_BYTECNT_OFF] ) )
 800482c:	ea52 2201 	orrs.w	r2, r2, r1, lsl #8
 8004830:	d017      	beq.n	8004862 <eMBMasterFuncReadInputRegister+0x56>
 8004832:	7869      	ldrb	r1, [r5, #1]
 8004834:	ebb1 0f42 	cmp.w	r1, r2, lsl #1
 8004838:	d001      	beq.n	800483e <eMBMasterFuncReadInputRegister+0x32>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800483a:	2003      	movs	r0, #3
 800483c:	e00d      	b.n	800485a <eMBMasterFuncReadInputRegister+0x4e>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 800483e:	7858      	ldrb	r0, [r3, #1]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 8004840:	7899      	ldrb	r1, [r3, #2]
 8004842:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
        usRegAddress++;
 8004846:	3101      	adds	r1, #1
            eRegStatus = eMBMasterRegInputCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usRegCount );
 8004848:	b289      	uxth	r1, r1
 800484a:	1ca8      	adds	r0, r5, #2
 800484c:	f000 fc02 	bl	8005054 <eMBMasterRegInputCB>
            if( eRegStatus != MB_ENOERR )
 8004850:	b118      	cbz	r0, 800485a <eMBMasterFuncReadInputRegister+0x4e>
                eStatus = prveMBError2Exception( eRegStatus );
 8004852:	f000 f9ed 	bl	8004c30 <prveMBError2Exception>
 8004856:	e000      	b.n	800485a <eMBMasterFuncReadInputRegister+0x4e>
        eStatus = MB_EX_NONE;
 8004858:	2000      	movs	r0, #0
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 800485a:	b003      	add	sp, #12
 800485c:	bd30      	pop	{r4, r5, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800485e:	2003      	movs	r0, #3
 8004860:	e7fb      	b.n	800485a <eMBMasterFuncReadInputRegister+0x4e>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004862:	2003      	movs	r0, #3
 8004864:	e7f9      	b.n	800485a <eMBMasterFuncReadInputRegister+0x4e>
	...

08004868 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8004868:	b538      	push	{r3, r4, r5, lr}
 800486a:	460d      	mov	r5, r1
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 800486c:	4b05      	ldr	r3, [pc, #20]	; (8004884 <eMBFuncReportSlaveID+0x1c>)
 800486e:	881c      	ldrh	r4, [r3, #0]
 8004870:	4622      	mov	r2, r4
 8004872:	4905      	ldr	r1, [pc, #20]	; (8004888 <eMBFuncReportSlaveID+0x20>)
 8004874:	3001      	adds	r0, #1
 8004876:	f002 fce1 	bl	800723c <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 800487a:	3401      	adds	r4, #1
 800487c:	802c      	strh	r4, [r5, #0]
    return MB_EX_NONE;
}
 800487e:	2000      	movs	r0, #0
 8004880:	bd38      	pop	{r3, r4, r5, pc}
 8004882:	bf00      	nop
 8004884:	20001760 	.word	0x20001760
 8004888:	20001740 	.word	0x20001740

0800488c <eMBMasterRTUInit>:
static volatile eMBMasterTimerMode eMasterCurTimerMode;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBMasterRTUInit(UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 800488c:	b570      	push	{r4, r5, r6, lr}
 800488e:	4605      	mov	r5, r0
 8004890:	460c      	mov	r4, r1
 8004892:	4616      	mov	r6, r2
    eMBErrorCode    eStatus = MB_ENOERR;
    ULONG           usTimerT35_50us;

    ENTER_CRITICAL_SECTION(  );
 8004894:	f000 f9d8 	bl	8004c48 <EnterCriticalSection>

    /* Modbus RTU uses 8 Databits. */
    if( xMBMasterPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 8004898:	4633      	mov	r3, r6
 800489a:	2208      	movs	r2, #8
 800489c:	4621      	mov	r1, r4
 800489e:	4628      	mov	r0, r5
 80048a0:	f000 fada 	bl	8004e58 <xMBMasterPortSerialInit>
 80048a4:	2801      	cmp	r0, #1
 80048a6:	d004      	beq.n	80048b2 <eMBMasterRTUInit+0x26>
    {
        eStatus = MB_EPORTERR;
 80048a8:	2403      	movs	r4, #3
        if( xMBMasterPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
        {
            eStatus = MB_EPORTERR;
        }
    }
    EXIT_CRITICAL_SECTION(  );
 80048aa:	f000 f9ce 	bl	8004c4a <ExitCriticalSection>

    return eStatus;
}
 80048ae:	4620      	mov	r0, r4
 80048b0:	bd70      	pop	{r4, r5, r6, pc}
        if( ulBaudRate > 19200 )
 80048b2:	f5b4 4f96 	cmp.w	r4, #19200	; 0x4b00
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 80048b6:	bf9d      	ittte	ls
 80048b8:	0064      	lslls	r4, r4, #1
 80048ba:	4806      	ldrls	r0, [pc, #24]	; (80048d4 <eMBMasterRTUInit+0x48>)
 80048bc:	fbb0 f0f4 	udivls	r0, r0, r4
            usTimerT35_50us = 35;       /* 1800us. */
 80048c0:	2023      	movhi	r0, #35	; 0x23
        if( xMBMasterPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 80048c2:	b280      	uxth	r0, r0
 80048c4:	f000 fb8c 	bl	8004fe0 <xMBMasterPortTimersInit>
            eStatus = MB_EPORTERR;
 80048c8:	2801      	cmp	r0, #1
 80048ca:	bf0c      	ite	eq
 80048cc:	2400      	moveq	r4, #0
 80048ce:	2403      	movne	r4, #3
 80048d0:	e7eb      	b.n	80048aa <eMBMasterRTUInit+0x1e>
 80048d2:	bf00      	nop
 80048d4:	00177fa0 	.word	0x00177fa0

080048d8 <eMBMasterRTUStart>:

void
eMBMasterRTUStart( void )
{
 80048d8:	b508      	push	{r3, lr}
    ENTER_CRITICAL_SECTION(  );
 80048da:	f000 f9b5 	bl	8004c48 <EnterCriticalSection>
    /* Initially the receiver is in the state STATE_M_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_M_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_M_RX_INIT;
 80048de:	2100      	movs	r1, #0
 80048e0:	4b04      	ldr	r3, [pc, #16]	; (80048f4 <eMBMasterRTUStart+0x1c>)
 80048e2:	7019      	strb	r1, [r3, #0]
    vMBMasterPortSerialEnable( TRUE, FALSE );
 80048e4:	2001      	movs	r0, #1
 80048e6:	f000 fae3 	bl	8004eb0 <vMBMasterPortSerialEnable>
    vMBMasterPortTimersT35Enable(  );
 80048ea:	f000 fb83 	bl	8004ff4 <vMBMasterPortTimersT35Enable>

    EXIT_CRITICAL_SECTION(  );
 80048ee:	f000 f9ac 	bl	8004c4a <ExitCriticalSection>
}
 80048f2:	bd08      	pop	{r3, pc}
 80048f4:	20001763 	.word	0x20001763

080048f8 <eMBMasterRTUStop>:

void
eMBMasterRTUStop( void )
{
 80048f8:	b508      	push	{r3, lr}
    ENTER_CRITICAL_SECTION(  );
 80048fa:	f000 f9a5 	bl	8004c48 <EnterCriticalSection>
    vMBMasterPortSerialEnable( FALSE, FALSE );
 80048fe:	2100      	movs	r1, #0
 8004900:	4608      	mov	r0, r1
 8004902:	f000 fad5 	bl	8004eb0 <vMBMasterPortSerialEnable>
    vMBMasterPortTimersDisable(  );
 8004906:	f000 fb99 	bl	800503c <vMBMasterPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
 800490a:	f000 f99e 	bl	8004c4a <ExitCriticalSection>
}
 800490e:	bd08      	pop	{r3, pc}

08004910 <eMBMasterRTUReceive>:

eMBErrorCode
eMBMasterRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 8004910:	b570      	push	{r4, r5, r6, lr}
 8004912:	4606      	mov	r6, r0
 8004914:	460d      	mov	r5, r1
 8004916:	4614      	mov	r4, r2
    eMBErrorCode    eStatus = MB_ENOERR;

    ENTER_CRITICAL_SECTION(  );
 8004918:	f000 f996 	bl	8004c48 <EnterCriticalSection>
   // assert_param( usMasterRcvBufferPos < MB_SER_PDU_SIZE_MAX );

    /* Length and CRC check */
    if( ( usMasterRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 800491c:	4b0e      	ldr	r3, [pc, #56]	; (8004958 <eMBMasterRTUReceive+0x48>)
 800491e:	881b      	ldrh	r3, [r3, #0]
 8004920:	b29b      	uxth	r3, r3
 8004922:	2b03      	cmp	r3, #3
 8004924:	d804      	bhi.n	8004930 <eMBMasterRTUReceive+0x20>
        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucMasterRTURcvBuf[MB_SER_PDU_PDU_OFF];
    }
    else
    {
        eStatus = MB_EIO;
 8004926:	2405      	movs	r4, #5
    }

    EXIT_CRITICAL_SECTION(  );
 8004928:	f000 f98f 	bl	8004c4a <ExitCriticalSection>
    return eStatus;
}
 800492c:	4620      	mov	r0, r4
 800492e:	bd70      	pop	{r4, r5, r6, pc}
        && ( usMBCRC16( ( UCHAR * ) ucMasterRTURcvBuf, usMasterRcvBufferPos ) == 0 ) )
 8004930:	4b09      	ldr	r3, [pc, #36]	; (8004958 <eMBMasterRTUReceive+0x48>)
 8004932:	8819      	ldrh	r1, [r3, #0]
 8004934:	b289      	uxth	r1, r1
 8004936:	4809      	ldr	r0, [pc, #36]	; (800495c <eMBMasterRTUReceive+0x4c>)
 8004938:	f7ff fd5e 	bl	80043f8 <usMBCRC16>
 800493c:	b950      	cbnz	r0, 8004954 <eMBMasterRTUReceive+0x44>
        *pucRcvAddress = ucMasterRTURcvBuf[MB_SER_PDU_ADDR_OFF];
 800493e:	4b07      	ldr	r3, [pc, #28]	; (800495c <eMBMasterRTUReceive+0x4c>)
 8004940:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004944:	7032      	strb	r2, [r6, #0]
        *pusLength = ( USHORT )( usMasterRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 8004946:	4a04      	ldr	r2, [pc, #16]	; (8004958 <eMBMasterRTUReceive+0x48>)
 8004948:	8812      	ldrh	r2, [r2, #0]
 800494a:	3a03      	subs	r2, #3
 800494c:	8022      	strh	r2, [r4, #0]
        *pucFrame = ( UCHAR * ) & ucMasterRTURcvBuf[MB_SER_PDU_PDU_OFF];
 800494e:	602b      	str	r3, [r5, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8004950:	2400      	movs	r4, #0
        *pucFrame = ( UCHAR * ) & ucMasterRTURcvBuf[MB_SER_PDU_PDU_OFF];
 8004952:	e7e9      	b.n	8004928 <eMBMasterRTUReceive+0x18>
        eStatus = MB_EIO;
 8004954:	2405      	movs	r4, #5
 8004956:	e7e7      	b.n	8004928 <eMBMasterRTUReceive+0x18>
 8004958:	2000196a 	.word	0x2000196a
 800495c:	2000176c 	.word	0x2000176c

08004960 <eMBMasterRTUSend>:

eMBErrorCode
eMBMasterRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 8004960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eMBErrorCode    eStatus = MB_ENOERR;
    USHORT          usCRC16;

    if ( ucSlaveAddress > MB_MASTER_TOTAL_SLAVE_NUM ) return MB_EINVAL;
 8004964:	2820      	cmp	r0, #32
 8004966:	d83c      	bhi.n	80049e2 <eMBMasterRTUSend+0x82>
 8004968:	4604      	mov	r4, r0
 800496a:	460e      	mov	r6, r1
 800496c:	4615      	mov	r5, r2

    ENTER_CRITICAL_SECTION(  );
 800496e:	f000 f96b 	bl	8004c48 <EnterCriticalSection>

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_M_RX_IDLE )
 8004972:	4b1d      	ldr	r3, [pc, #116]	; (80049e8 <eMBMasterRTUSend+0x88>)
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	b2db      	uxtb	r3, r3
 8004978:	2b01      	cmp	r3, #1
 800497a:	d005      	beq.n	8004988 <eMBMasterRTUSend+0x28>
        eSndState = STATE_M_TX_XMIT;
        vMBMasterPortSerialEnable( FALSE, TRUE );
    }
    else
    {
        eStatus = MB_EIO;
 800497c:	2405      	movs	r4, #5
    }
    EXIT_CRITICAL_SECTION(  );
 800497e:	f000 f964 	bl	8004c4a <ExitCriticalSection>
    return eStatus;
}
 8004982:	4620      	mov	r0, r4
 8004984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        pucMasterSndBufferCur = ( UCHAR * ) pucFrame - 1;
 8004988:	1e70      	subs	r0, r6, #1
 800498a:	4b18      	ldr	r3, [pc, #96]	; (80049ec <eMBMasterRTUSend+0x8c>)
 800498c:	6018      	str	r0, [r3, #0]
        usMasterSndBufferCount = 1;
 800498e:	4f18      	ldr	r7, [pc, #96]	; (80049f0 <eMBMasterRTUSend+0x90>)
 8004990:	f04f 0801 	mov.w	r8, #1
 8004994:	f8a7 8000 	strh.w	r8, [r7]
        pucMasterSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 8004998:	f806 4c01 	strb.w	r4, [r6, #-1]
        usMasterSndBufferCount += usLength;
 800499c:	883a      	ldrh	r2, [r7, #0]
 800499e:	442a      	add	r2, r5
 80049a0:	b292      	uxth	r2, r2
 80049a2:	803a      	strh	r2, [r7, #0]
        usCRC16 = usMBCRC16( ( UCHAR * ) pucMasterSndBufferCur, usMasterSndBufferCount );
 80049a4:	8839      	ldrh	r1, [r7, #0]
 80049a6:	b289      	uxth	r1, r1
 80049a8:	f7ff fd26 	bl	80043f8 <usMBCRC16>
        ucMasterRTUSndBuf[usMasterSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 80049ac:	883b      	ldrh	r3, [r7, #0]
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	eb03 0208 	add.w	r2, r3, r8
 80049b4:	b292      	uxth	r2, r2
 80049b6:	803a      	strh	r2, [r7, #0]
 80049b8:	b2c2      	uxtb	r2, r0
 80049ba:	490e      	ldr	r1, [pc, #56]	; (80049f4 <eMBMasterRTUSend+0x94>)
 80049bc:	54ca      	strb	r2, [r1, r3]
        ucMasterRTUSndBuf[usMasterSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 80049be:	883b      	ldrh	r3, [r7, #0]
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	eb03 0208 	add.w	r2, r3, r8
 80049c6:	b292      	uxth	r2, r2
 80049c8:	803a      	strh	r2, [r7, #0]
 80049ca:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80049ce:	54c8      	strb	r0, [r1, r3]
        eSndState = STATE_M_TX_XMIT;
 80049d0:	4b09      	ldr	r3, [pc, #36]	; (80049f8 <eMBMasterRTUSend+0x98>)
 80049d2:	f883 8000 	strb.w	r8, [r3]
        vMBMasterPortSerialEnable( FALSE, TRUE );
 80049d6:	4641      	mov	r1, r8
 80049d8:	2000      	movs	r0, #0
 80049da:	f000 fa69 	bl	8004eb0 <vMBMasterPortSerialEnable>
    eMBErrorCode    eStatus = MB_ENOERR;
 80049de:	2400      	movs	r4, #0
 80049e0:	e7cd      	b.n	800497e <eMBMasterRTUSend+0x1e>
    if ( ucSlaveAddress > MB_MASTER_TOTAL_SLAVE_NUM ) return MB_EINVAL;
 80049e2:	2402      	movs	r4, #2
 80049e4:	e7cd      	b.n	8004982 <eMBMasterRTUSend+0x22>
 80049e6:	bf00      	nop
 80049e8:	20001763 	.word	0x20001763
 80049ec:	20001768 	.word	0x20001768
 80049f0:	2000196e 	.word	0x2000196e
 80049f4:	2000186c 	.word	0x2000186c
 80049f8:	20001764 	.word	0x20001764

080049fc <xMBMasterRTUReceiveFSM>:

BOOL
xMBMasterRTUReceiveFSM( void )
{
 80049fc:	b500      	push	{lr}
 80049fe:	b083      	sub	sp, #12
    UCHAR           ucByte;

    //assert_param(( eSndState == STATE_M_TX_IDLE ) || ( eSndState == STATE_M_TX_XFWR ));

    /* Always read the character. */
    ( void )xMBMasterPortSerialGetByte( ( CHAR * ) & ucByte );
 8004a00:	f10d 0007 	add.w	r0, sp, #7
 8004a04:	f000 fa96 	bl	8004f34 <xMBMasterPortSerialGetByte>

    switch ( eRcvState )
 8004a08:	4b1e      	ldr	r3, [pc, #120]	; (8004a84 <xMBMasterRTUReceiveFSM+0x88>)
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b03      	cmp	r3, #3
 8004a10:	d805      	bhi.n	8004a1e <xMBMasterRTUReceiveFSM+0x22>
 8004a12:	e8df f003 	tbb	[pc, r3]
 8004a16:	0b02      	.short	0x0b02
 8004a18:	0821      	.short	0x0821
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_M_RX_INIT:
        vMBMasterPortTimersT35Enable( );
 8004a1a:	f000 faeb 	bl	8004ff4 <vMBMasterPortTimersT35Enable>
        }
        vMBMasterPortTimersT35Enable();
        break;
    }
    return xTaskNeedSwitch;
}
 8004a1e:	2000      	movs	r0, #0
 8004a20:	b003      	add	sp, #12
 8004a22:	f85d fb04 	ldr.w	pc, [sp], #4
        vMBMasterPortTimersT35Enable( );
 8004a26:	f000 fae5 	bl	8004ff4 <vMBMasterPortTimersT35Enable>
        break;
 8004a2a:	e7f8      	b.n	8004a1e <xMBMasterRTUReceiveFSM+0x22>
        vMBMasterPortTimersDisable( );
 8004a2c:	f000 fb06 	bl	800503c <vMBMasterPortTimersDisable>
        eSndState = STATE_M_TX_IDLE;
 8004a30:	2300      	movs	r3, #0
 8004a32:	4a15      	ldr	r2, [pc, #84]	; (8004a88 <xMBMasterRTUReceiveFSM+0x8c>)
 8004a34:	7013      	strb	r3, [r2, #0]
        usMasterRcvBufferPos = 0;
 8004a36:	4a15      	ldr	r2, [pc, #84]	; (8004a8c <xMBMasterRTUReceiveFSM+0x90>)
 8004a38:	8013      	strh	r3, [r2, #0]
        ucMasterRTURcvBuf[usMasterRcvBufferPos++] = ucByte;
 8004a3a:	8813      	ldrh	r3, [r2, #0]
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	1c59      	adds	r1, r3, #1
 8004a40:	b289      	uxth	r1, r1
 8004a42:	8011      	strh	r1, [r2, #0]
 8004a44:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8004a48:	4a11      	ldr	r2, [pc, #68]	; (8004a90 <xMBMasterRTUReceiveFSM+0x94>)
 8004a4a:	54d1      	strb	r1, [r2, r3]
        eRcvState = STATE_M_RX_RCV;
 8004a4c:	4b0d      	ldr	r3, [pc, #52]	; (8004a84 <xMBMasterRTUReceiveFSM+0x88>)
 8004a4e:	2202      	movs	r2, #2
 8004a50:	701a      	strb	r2, [r3, #0]
        vMBMasterPortTimersT35Enable( );
 8004a52:	f000 facf 	bl	8004ff4 <vMBMasterPortTimersT35Enable>
        break;
 8004a56:	e7e2      	b.n	8004a1e <xMBMasterRTUReceiveFSM+0x22>
        if( usMasterRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 8004a58:	4b0c      	ldr	r3, [pc, #48]	; (8004a8c <xMBMasterRTUReceiveFSM+0x90>)
 8004a5a:	881b      	ldrh	r3, [r3, #0]
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	2bff      	cmp	r3, #255	; 0xff
 8004a60:	d80c      	bhi.n	8004a7c <xMBMasterRTUReceiveFSM+0x80>
            ucMasterRTURcvBuf[usMasterRcvBufferPos++] = ucByte;
 8004a62:	490a      	ldr	r1, [pc, #40]	; (8004a8c <xMBMasterRTUReceiveFSM+0x90>)
 8004a64:	880b      	ldrh	r3, [r1, #0]
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	1c5a      	adds	r2, r3, #1
 8004a6a:	b292      	uxth	r2, r2
 8004a6c:	800a      	strh	r2, [r1, #0]
 8004a6e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8004a72:	4a07      	ldr	r2, [pc, #28]	; (8004a90 <xMBMasterRTUReceiveFSM+0x94>)
 8004a74:	54d1      	strb	r1, [r2, r3]
        vMBMasterPortTimersT35Enable();
 8004a76:	f000 fabd 	bl	8004ff4 <vMBMasterPortTimersT35Enable>
        break;
 8004a7a:	e7d0      	b.n	8004a1e <xMBMasterRTUReceiveFSM+0x22>
            eRcvState = STATE_M_RX_ERROR;
 8004a7c:	4b01      	ldr	r3, [pc, #4]	; (8004a84 <xMBMasterRTUReceiveFSM+0x88>)
 8004a7e:	2203      	movs	r2, #3
 8004a80:	701a      	strb	r2, [r3, #0]
 8004a82:	e7f8      	b.n	8004a76 <xMBMasterRTUReceiveFSM+0x7a>
 8004a84:	20001763 	.word	0x20001763
 8004a88:	20001764 	.word	0x20001764
 8004a8c:	2000196a 	.word	0x2000196a
 8004a90:	2000176c 	.word	0x2000176c

08004a94 <xMBMasterRTUTransmitFSM>:

BOOL
xMBMasterRTUTransmitFSM( void )
{
 8004a94:	b510      	push	{r4, lr}
    BOOL            xNeedPoll = FALSE;

    //assert_param( eRcvState == STATE_M_RX_IDLE );

    switch ( eSndState )
 8004a96:	4b1c      	ldr	r3, [pc, #112]	; (8004b08 <xMBMasterRTUTransmitFSM+0x74>)
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	b12b      	cbz	r3, 8004aa8 <xMBMasterRTUTransmitFSM+0x14>
 8004a9c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004aa0:	2a01      	cmp	r2, #1
 8004aa2:	d006      	beq.n	8004ab2 <xMBMasterRTUTransmitFSM+0x1e>
    default:
        break;
    }

    return xNeedPoll;
}
 8004aa4:	2000      	movs	r0, #0
 8004aa6:	bd10      	pop	{r4, pc}
        vMBMasterPortSerialEnable( TRUE, FALSE );
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	2001      	movs	r0, #1
 8004aac:	f000 fa00 	bl	8004eb0 <vMBMasterPortSerialEnable>
        break;
 8004ab0:	e7f8      	b.n	8004aa4 <xMBMasterRTUTransmitFSM+0x10>
        if( usMasterSndBufferCount != 0 )
 8004ab2:	4b16      	ldr	r3, [pc, #88]	; (8004b0c <xMBMasterRTUTransmitFSM+0x78>)
 8004ab4:	881b      	ldrh	r3, [r3, #0]
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	b16b      	cbz	r3, 8004ad6 <xMBMasterRTUTransmitFSM+0x42>
            xMBMasterPortSerialPutByte( ( CHAR )*pucMasterSndBufferCur );
 8004aba:	4c15      	ldr	r4, [pc, #84]	; (8004b10 <xMBMasterRTUTransmitFSM+0x7c>)
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	7818      	ldrb	r0, [r3, #0]
 8004ac0:	f000 fa28 	bl	8004f14 <xMBMasterPortSerialPutByte>
            pucMasterSndBufferCur++;  /* next byte in sendbuffer. */
 8004ac4:	6823      	ldr	r3, [r4, #0]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	6023      	str	r3, [r4, #0]
            usMasterSndBufferCount--;
 8004aca:	4a10      	ldr	r2, [pc, #64]	; (8004b0c <xMBMasterRTUTransmitFSM+0x78>)
 8004acc:	8813      	ldrh	r3, [r2, #0]
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	8013      	strh	r3, [r2, #0]
 8004ad4:	e7e6      	b.n	8004aa4 <xMBMasterRTUTransmitFSM+0x10>
            xFrameIsBroadcast = ( ucMasterRTUSndBuf[MB_SER_PDU_ADDR_OFF] == MB_ADDRESS_BROADCAST ) ? TRUE : FALSE;
 8004ad6:	4b0f      	ldr	r3, [pc, #60]	; (8004b14 <xMBMasterRTUTransmitFSM+0x80>)
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	fab3 f383 	clz	r3, r3
 8004ade:	095b      	lsrs	r3, r3, #5
 8004ae0:	4c0d      	ldr	r4, [pc, #52]	; (8004b18 <xMBMasterRTUTransmitFSM+0x84>)
 8004ae2:	7023      	strb	r3, [r4, #0]
            vMBMasterPortSerialEnable( TRUE, FALSE );
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	2001      	movs	r0, #1
 8004ae8:	f000 f9e2 	bl	8004eb0 <vMBMasterPortSerialEnable>
            eSndState = STATE_M_TX_XFWR;
 8004aec:	4b06      	ldr	r3, [pc, #24]	; (8004b08 <xMBMasterRTUTransmitFSM+0x74>)
 8004aee:	2202      	movs	r2, #2
 8004af0:	701a      	strb	r2, [r3, #0]
            if ( xFrameIsBroadcast == TRUE )
 8004af2:	7823      	ldrb	r3, [r4, #0]
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d002      	beq.n	8004b00 <xMBMasterRTUTransmitFSM+0x6c>
                vMBMasterPortTimersRespondTimeoutEnable( );
 8004afa:	f000 fa94 	bl	8005026 <vMBMasterPortTimersRespondTimeoutEnable>
 8004afe:	e7d1      	b.n	8004aa4 <xMBMasterRTUTransmitFSM+0x10>
                vMBMasterPortTimersConvertDelayEnable( );
 8004b00:	f000 fa86 	bl	8005010 <vMBMasterPortTimersConvertDelayEnable>
 8004b04:	e7ce      	b.n	8004aa4 <xMBMasterRTUTransmitFSM+0x10>
 8004b06:	bf00      	nop
 8004b08:	20001764 	.word	0x20001764
 8004b0c:	2000196e 	.word	0x2000196e
 8004b10:	20001768 	.word	0x20001768
 8004b14:	2000186c 	.word	0x2000186c
 8004b18:	20001970 	.word	0x20001970

08004b1c <xMBMasterRTUTimerExpired>:

BOOL
xMBMasterRTUTimerExpired(void)
{
 8004b1c:	b510      	push	{r4, lr}
    BOOL xNeedPoll = FALSE;

    switch (eRcvState)
 8004b1e:	4b20      	ldr	r3, [pc, #128]	; (8004ba0 <xMBMasterRTUTimerExpired+0x84>)
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d01c      	beq.n	8004b62 <xMBMasterRTUTimerExpired+0x46>
 8004b28:	2b03      	cmp	r3, #3
 8004b2a:	d01f      	beq.n	8004b6c <xMBMasterRTUTimerExpired+0x50>
 8004b2c:	b1a3      	cbz	r3, 8004b58 <xMBMasterRTUTimerExpired+0x3c>
 8004b2e:	2400      	movs	r4, #0
      //  assert_param(
      //          ( eRcvState == STATE_M_RX_INIT ) || ( eRcvState == STATE_M_RX_RCV ) ||
      //          ( eRcvState == STATE_M_RX_ERROR ) || ( eRcvState == STATE_M_RX_IDLE ));
        break;
    }
    eRcvState = STATE_M_RX_IDLE;
 8004b30:	4b1b      	ldr	r3, [pc, #108]	; (8004ba0 <xMBMasterRTUTimerExpired+0x84>)
 8004b32:	2201      	movs	r2, #1
 8004b34:	701a      	strb	r2, [r3, #0]

    switch (eSndState)
 8004b36:	4b1b      	ldr	r3, [pc, #108]	; (8004ba4 <xMBMasterRTUTimerExpired+0x88>)
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d01d      	beq.n	8004b7c <xMBMasterRTUTimerExpired+0x60>
    default:
       // assert_param(
          //      ( eSndState == STATE_M_TX_XFWR ) || ( eSndState == STATE_M_TX_IDLE ));
        break;
    }
    eSndState = STATE_M_TX_IDLE;
 8004b40:	4b18      	ldr	r3, [pc, #96]	; (8004ba4 <xMBMasterRTUTimerExpired+0x88>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	701a      	strb	r2, [r3, #0]

    vMBMasterPortTimersDisable( );
 8004b46:	f000 fa79 	bl	800503c <vMBMasterPortTimersDisable>
    /* If timer mode is convert delay, the master event then turns EV_MASTER_EXECUTE status. */
    if (eMasterCurTimerMode == MB_TMODE_CONVERT_DELAY) {
 8004b4a:	4b17      	ldr	r3, [pc, #92]	; (8004ba8 <xMBMasterRTUTimerExpired+0x8c>)
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d01f      	beq.n	8004b94 <xMBMasterRTUTimerExpired+0x78>
        xNeedPoll = xMBMasterPortEventPost( EV_MASTER_EXECUTE_ISR );
    }

    return xNeedPoll;
}
 8004b54:	4620      	mov	r0, r4
 8004b56:	bd10      	pop	{r4, pc}
        xNeedPoll = xMBMasterPortEventPost(EV_MASTER_READY);
 8004b58:	2001      	movs	r0, #1
 8004b5a:	f000 f881 	bl	8004c60 <xMBMasterPortEventPost>
 8004b5e:	4604      	mov	r4, r0
        break;
 8004b60:	e7e6      	b.n	8004b30 <xMBMasterRTUTimerExpired+0x14>
        xNeedPoll = xMBMasterPortEventPost(EV_MASTER_FRAME_RECEIVED);
 8004b62:	2002      	movs	r0, #2
 8004b64:	f000 f87c 	bl	8004c60 <xMBMasterPortEventPost>
 8004b68:	4604      	mov	r4, r0
        break;
 8004b6a:	e7e1      	b.n	8004b30 <xMBMasterRTUTimerExpired+0x14>
        vMBMasterSetErrorType(EV_ERROR_RECEIVE_DATA);
 8004b6c:	2001      	movs	r0, #1
 8004b6e:	f7ff fc3d 	bl	80043ec <vMBMasterSetErrorType>
        xNeedPoll = xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
 8004b72:	2010      	movs	r0, #16
 8004b74:	f000 f874 	bl	8004c60 <xMBMasterPortEventPost>
 8004b78:	4604      	mov	r4, r0
        break;
 8004b7a:	e7d9      	b.n	8004b30 <xMBMasterRTUTimerExpired+0x14>
        if ( xFrameIsBroadcast == FALSE ) {
 8004b7c:	4b0b      	ldr	r3, [pc, #44]	; (8004bac <xMBMasterRTUTimerExpired+0x90>)
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1dd      	bne.n	8004b40 <xMBMasterRTUTimerExpired+0x24>
            vMBMasterSetErrorType(EV_ERROR_RESPOND_TIMEOUT);
 8004b84:	2000      	movs	r0, #0
 8004b86:	f7ff fc31 	bl	80043ec <vMBMasterSetErrorType>
            xNeedPoll = xMBMasterPortEventPost(EV_MASTER_ERROR_PROCESS);
 8004b8a:	2010      	movs	r0, #16
 8004b8c:	f000 f868 	bl	8004c60 <xMBMasterPortEventPost>
 8004b90:	4604      	mov	r4, r0
 8004b92:	e7d5      	b.n	8004b40 <xMBMasterRTUTimerExpired+0x24>
        xNeedPoll = xMBMasterPortEventPost( EV_MASTER_EXECUTE_ISR );
 8004b94:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004b98:	f000 f862 	bl	8004c60 <xMBMasterPortEventPost>
 8004b9c:	4604      	mov	r4, r0
 8004b9e:	e7d9      	b.n	8004b54 <xMBMasterRTUTimerExpired+0x38>
 8004ba0:	20001763 	.word	0x20001763
 8004ba4:	20001764 	.word	0x20001764
 8004ba8:	20001762 	.word	0x20001762
 8004bac:	20001970 	.word	0x20001970

08004bb0 <vMBMasterGetPDUSndBuf>:
}

/* Get Modbus Master send PDU's buffer address pointer.*/
void vMBMasterGetPDUSndBuf( UCHAR ** pucFrame )
{
    *pucFrame = ( UCHAR * ) &ucMasterRTUSndBuf[MB_SER_PDU_PDU_OFF];
 8004bb0:	4b01      	ldr	r3, [pc, #4]	; (8004bb8 <vMBMasterGetPDUSndBuf+0x8>)
 8004bb2:	6003      	str	r3, [r0, #0]
}
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	2000186d 	.word	0x2000186d

08004bbc <vMBMasterSetPDUSndLength>:

/* Set Modbus Master send PDU's buffer length.*/
void vMBMasterSetPDUSndLength( USHORT SendPDULength )
{
    usMasterSendPDULength = SendPDULength;
 8004bbc:	4b01      	ldr	r3, [pc, #4]	; (8004bc4 <vMBMasterSetPDUSndLength+0x8>)
 8004bbe:	8018      	strh	r0, [r3, #0]
}
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	2000196c 	.word	0x2000196c

08004bc8 <usMBMasterGetPDUSndLength>:

/* Get Modbus Master send PDU's buffer length.*/
USHORT usMBMasterGetPDUSndLength( void )
{
    return usMasterSendPDULength;
 8004bc8:	4b01      	ldr	r3, [pc, #4]	; (8004bd0 <usMBMasterGetPDUSndLength+0x8>)
 8004bca:	8818      	ldrh	r0, [r3, #0]
}
 8004bcc:	b280      	uxth	r0, r0
 8004bce:	4770      	bx	lr
 8004bd0:	2000196c 	.word	0x2000196c

08004bd4 <vMBMasterSetCurTimerMode>:

/* Set Modbus Master current timer mode.*/
void vMBMasterSetCurTimerMode( eMBMasterTimerMode eMBTimerMode )
{
    eMasterCurTimerMode = eMBTimerMode;
 8004bd4:	4b01      	ldr	r3, [pc, #4]	; (8004bdc <vMBMasterSetCurTimerMode+0x8>)
 8004bd6:	7018      	strb	r0, [r3, #0]
}
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	20001762 	.word	0x20001762

08004be0 <xMBMasterRequestIsBroadcast>:

/* The master request is broadcast? */
BOOL xMBMasterRequestIsBroadcast( void ){
    return xFrameIsBroadcast;
 8004be0:	4b01      	ldr	r3, [pc, #4]	; (8004be8 <xMBMasterRequestIsBroadcast+0x8>)
 8004be2:	7818      	ldrb	r0, [r3, #0]
}
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	20001970 	.word	0x20001970

08004bec <xMBUtilSetBits>:

/* ----------------------- Start implementation -----------------------------*/
void
xMBUtilSetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits,
                UCHAR ucValue )
{
 8004bec:	b530      	push	{r4, r5, lr}
  //  assert_param( ucNBits <= 8 );
  //  assert_param( ( size_t )BITS_UCHAR == sizeof( UCHAR ) * 8 );

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 8004bee:	08cc      	lsrs	r4, r1, #3
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8004bf0:	f104 0e01 	add.w	lr, r4, #1
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8004bf4:	f04f 0c01 	mov.w	ip, #1
 8004bf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8004bfc:	f10c 3cff 	add.w	ip, ip, #4294967295
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;
 8004c00:	fa1f fc8c 	uxth.w	ip, ip
 8004c04:	eba1 02c4 	sub.w	r2, r1, r4, lsl #3
 8004c08:	fa0c fc02 	lsl.w	ip, ip, r2
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8004c0c:	f810 500e 	ldrb.w	r5, [r0, lr]
 8004c10:	5d02      	ldrb	r2, [r0, r4]
 8004c12:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 8004c16:	ea22 020c 	bic.w	r2, r2, ip
    usValue <<= usNPreBits;
 8004c1a:	f001 0107 	and.w	r1, r1, #7
 8004c1e:	408b      	lsls	r3, r1
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 8004c20:	4313      	orrs	r3, r2
 8004c22:	b21b      	sxth	r3, r3

    /* move bits back into storage */
    ucByteBuf[usByteOffset] = ( UCHAR )( usWordBuf & 0xFF );
 8004c24:	5503      	strb	r3, [r0, r4]
    ucByteBuf[usByteOffset + 1] = ( UCHAR )( usWordBuf >> BITS_UCHAR );
 8004c26:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004c2a:	f800 300e 	strb.w	r3, [r0, lr]
}
 8004c2e:	bd30      	pop	{r4, r5, pc}

08004c30 <prveMBError2Exception>:
eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
    eMBException    eStatus;

    switch ( eErrorCode )
 8004c30:	2801      	cmp	r0, #1
 8004c32:	d005      	beq.n	8004c40 <prveMBError2Exception+0x10>
 8004c34:	2807      	cmp	r0, #7
 8004c36:	d005      	beq.n	8004c44 <prveMBError2Exception+0x14>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 8004c38:	2800      	cmp	r0, #0
 8004c3a:	bf18      	it	ne
 8004c3c:	2004      	movne	r0, #4
 8004c3e:	4770      	bx	lr
    switch ( eErrorCode )
 8004c40:	2002      	movs	r0, #2
 8004c42:	4770      	bx	lr
        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
            break;

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 8004c44:	2006      	movs	r0, #6
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
            break;
    }

    return eStatus;
}
 8004c46:	4770      	bx	lr

08004c48 <EnterCriticalSection>:

/* ----------------------- Start implementation -----------------------------*/
void EnterCriticalSection(void)
{
  //  rt_enter_critical();
}
 8004c48:	4770      	bx	lr

08004c4a <ExitCriticalSection>:

void ExitCriticalSection(void)
{
   // rt_exit_critical();
}
 8004c4a:	4770      	bx	lr

08004c4c <xMBMasterPortEventInit>:
//static struct rt_semaphore xMasterRunRes;
//static struct rt_event     xMasterOsEvent;
/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBMasterPortEventInit( void )
{
 8004c4c:	b508      	push	{r3, lr}
	xMasterOsEventGroupHandle = xGetOSEvent();
 8004c4e:	f7fc fbf7 	bl	8001440 <xGetOSEvent>
 8004c52:	4b02      	ldr	r3, [pc, #8]	; (8004c5c <xMBMasterPortEventInit+0x10>)
 8004c54:	6018      	str	r0, [r3, #0]
   // rt_event_init(&xMasterOsEvent,"master event",RT_IPC_FLAG_PRIO);
    return TRUE;
}
 8004c56:	2001      	movs	r0, #1
 8004c58:	bd08      	pop	{r3, pc}
 8004c5a:	bf00      	nop
 8004c5c:	20001974 	.word	0x20001974

08004c60 <xMBMasterPortEventPost>:

BOOL
xMBMasterPortEventPost( eMBMasterEventType eEvent )
{
 8004c60:	b500      	push	{lr}
 8004c62:	b083      	sub	sp, #12
 8004c64:	4601      	mov	r1, r0
	BaseType_t xHigherPriorityTaskWoken, xResult;
	eMBMasterEventType xEvent = eEvent;

	    switch (xEvent)
 8004c66:	2820      	cmp	r0, #32
 8004c68:	d84a      	bhi.n	8004d00 <xMBMasterPortEventPost+0xa0>
 8004c6a:	b918      	cbnz	r0, 8004c74 <xMBMasterPortEventPost+0x14>
		    default:
		    	break;
		}
 //   rt_event_send(&xMasterOsEvent, eEvent);
    return (TRUE);
}
 8004c6c:	2001      	movs	r0, #1
 8004c6e:	b003      	add	sp, #12
 8004c70:	f85d fb04 	ldr.w	pc, [sp], #4
	    switch (xEvent)
 8004c74:	1e43      	subs	r3, r0, #1
 8004c76:	2b1f      	cmp	r3, #31
 8004c78:	d8f8      	bhi.n	8004c6c <xMBMasterPortEventPost+0xc>
 8004c7a:	a201      	add	r2, pc, #4	; (adr r2, 8004c80 <xMBMasterPortEventPost+0x20>)
 8004c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c80:	08004d29 	.word	0x08004d29
 8004c84:	08004d29 	.word	0x08004d29
 8004c88:	08004c6d 	.word	0x08004c6d
 8004c8c:	08004d1f 	.word	0x08004d1f
 8004c90:	08004c6d 	.word	0x08004c6d
 8004c94:	08004c6d 	.word	0x08004c6d
 8004c98:	08004c6d 	.word	0x08004c6d
 8004c9c:	08004d1f 	.word	0x08004d1f
 8004ca0:	08004c6d 	.word	0x08004c6d
 8004ca4:	08004c6d 	.word	0x08004c6d
 8004ca8:	08004c6d 	.word	0x08004c6d
 8004cac:	08004c6d 	.word	0x08004c6d
 8004cb0:	08004c6d 	.word	0x08004c6d
 8004cb4:	08004c6d 	.word	0x08004c6d
 8004cb8:	08004c6d 	.word	0x08004c6d
 8004cbc:	08004d29 	.word	0x08004d29
 8004cc0:	08004c6d 	.word	0x08004c6d
 8004cc4:	08004c6d 	.word	0x08004c6d
 8004cc8:	08004c6d 	.word	0x08004c6d
 8004ccc:	08004c6d 	.word	0x08004c6d
 8004cd0:	08004c6d 	.word	0x08004c6d
 8004cd4:	08004c6d 	.word	0x08004c6d
 8004cd8:	08004c6d 	.word	0x08004c6d
 8004cdc:	08004c6d 	.word	0x08004c6d
 8004ce0:	08004c6d 	.word	0x08004c6d
 8004ce4:	08004c6d 	.word	0x08004c6d
 8004ce8:	08004c6d 	.word	0x08004c6d
 8004cec:	08004c6d 	.word	0x08004c6d
 8004cf0:	08004c6d 	.word	0x08004c6d
 8004cf4:	08004c6d 	.word	0x08004c6d
 8004cf8:	08004c6d 	.word	0x08004c6d
 8004cfc:	08004d1f 	.word	0x08004d1f
 8004d00:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8004d04:	d00b      	beq.n	8004d1e <xMBMasterPortEventPost+0xbe>
 8004d06:	d906      	bls.n	8004d16 <xMBMasterPortEventPost+0xb6>
 8004d08:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004d0c:	d1ae      	bne.n	8004c6c <xMBMasterPortEventPost+0xc>
		    		xHigherPriorityTaskWoken = pdFALSE;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	9301      	str	r3, [sp, #4]
		    			 xEvent = EV_MASTER_EXECUTE;
 8004d12:	2104      	movs	r1, #4
 8004d14:	e00f      	b.n	8004d36 <xMBMasterPortEventPost+0xd6>
	    switch (xEvent)
 8004d16:	2840      	cmp	r0, #64	; 0x40
 8004d18:	d001      	beq.n	8004d1e <xMBMasterPortEventPost+0xbe>
 8004d1a:	2880      	cmp	r0, #128	; 0x80
 8004d1c:	d1a6      	bne.n	8004c6c <xMBMasterPortEventPost+0xc>
		    	xEventGroupSetBits(xMasterOsEventGroupHandle,xEvent);
 8004d1e:	4b10      	ldr	r3, [pc, #64]	; (8004d60 <xMBMasterPortEventPost+0x100>)
 8004d20:	6818      	ldr	r0, [r3, #0]
 8004d22:	f000 fc6d 	bl	8005600 <xEventGroupSetBits>
    return (TRUE);
 8004d26:	e7a1      	b.n	8004c6c <xMBMasterPortEventPost+0xc>
		    		xHigherPriorityTaskWoken = pdFALSE;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	9301      	str	r3, [sp, #4]
		    			 xEvent = EV_MASTER_EXECUTE;
 8004d2c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004d30:	bf14      	ite	ne
 8004d32:	4601      	movne	r1, r0
 8004d34:	2104      	moveq	r1, #4
		    		 xResult = xEventGroupSetBitsFromISR(
 8004d36:	aa01      	add	r2, sp, #4
 8004d38:	4b09      	ldr	r3, [pc, #36]	; (8004d60 <xMBMasterPortEventPost+0x100>)
 8004d3a:	6818      	ldr	r0, [r3, #0]
 8004d3c:	f000 fcae 	bl	800569c <xEventGroupSetBitsFromISR>
		    		  if( xResult != pdFAIL )
 8004d40:	2800      	cmp	r0, #0
 8004d42:	d093      	beq.n	8004c6c <xMBMasterPortEventPost+0xc>
		    		      portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8004d44:	9b01      	ldr	r3, [sp, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d090      	beq.n	8004c6c <xMBMasterPortEventPost+0xc>
 8004d4a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d52:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004d56:	f3bf 8f4f 	dsb	sy
 8004d5a:	f3bf 8f6f 	isb	sy
 8004d5e:	e785      	b.n	8004c6c <xMBMasterPortEventPost+0xc>
 8004d60:	20001974 	.word	0x20001974

08004d64 <xMBMasterPortEventGet>:

BOOL
xMBMasterPortEventGet( eMBMasterEventType * eEvent )
{
 8004d64:	b530      	push	{r4, r5, lr}
 8004d66:	b083      	sub	sp, #12
 8004d68:	4605      	mov	r5, r0

	 EventBits_t recvedEvent;
	 recvedEvent = xEventGroupWaitBits(xMasterOsEventGroupHandle,    EV_MASTER_READY | EV_MASTER_FRAME_RECEIVED | EV_MASTER_EXECUTE |
 8004d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	2300      	movs	r3, #0
 8004d72:	2201      	movs	r2, #1
 8004d74:	211f      	movs	r1, #31
 8004d76:	4c11      	ldr	r4, [pc, #68]	; (8004dbc <xMBMasterPortEventGet+0x58>)
 8004d78:	6820      	ldr	r0, [r4, #0]
 8004d7a:	f000 fbb6 	bl	80054ea <xEventGroupWaitBits>
            EV_MASTER_READY | EV_MASTER_FRAME_RECEIVED | EV_MASTER_EXECUTE |
            EV_MASTER_FRAME_SENT | EV_MASTER_ERROR_PROCESS,
            RT_EVENT_FLAG_OR | RT_EVENT_FLAG_CLEAR, RT_WAITING_FOREVER,
            &recvedEvent);
    /the enum type couldn't convert to int type */
    switch (recvedEvent)
 8004d7e:	1e43      	subs	r3, r0, #1
 8004d80:	2b0f      	cmp	r3, #15
 8004d82:	d80b      	bhi.n	8004d9c <xMBMasterPortEventGet+0x38>
 8004d84:	e8df f003 	tbb	[pc, r3]
 8004d88:	100a0d08 	.word	0x100a0d08
 8004d8c:	130a0a0a 	.word	0x130a0a0a
 8004d90:	0a0a0a0a 	.word	0x0a0a0a0a
 8004d94:	160a0a0a 	.word	0x160a0a0a
    {
    case EV_MASTER_READY:
        *eEvent = EV_MASTER_READY;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	802b      	strh	r3, [r5, #0]
    case EV_MASTER_ERROR_PROCESS:
        *eEvent = EV_MASTER_ERROR_PROCESS;
        break;
    }
    return TRUE;
}
 8004d9c:	2001      	movs	r0, #1
 8004d9e:	b003      	add	sp, #12
 8004da0:	bd30      	pop	{r4, r5, pc}
        *eEvent = EV_MASTER_FRAME_RECEIVED;
 8004da2:	2302      	movs	r3, #2
 8004da4:	802b      	strh	r3, [r5, #0]
        break;
 8004da6:	e7f9      	b.n	8004d9c <xMBMasterPortEventGet+0x38>
        *eEvent = EV_MASTER_EXECUTE;
 8004da8:	2304      	movs	r3, #4
 8004daa:	802b      	strh	r3, [r5, #0]
        break;
 8004dac:	e7f6      	b.n	8004d9c <xMBMasterPortEventGet+0x38>
        *eEvent = EV_MASTER_FRAME_SENT;
 8004dae:	2308      	movs	r3, #8
 8004db0:	802b      	strh	r3, [r5, #0]
        break;
 8004db2:	e7f3      	b.n	8004d9c <xMBMasterPortEventGet+0x38>
        *eEvent = EV_MASTER_ERROR_PROCESS;
 8004db4:	2310      	movs	r3, #16
 8004db6:	802b      	strh	r3, [r5, #0]
        break;
 8004db8:	e7f0      	b.n	8004d9c <xMBMasterPortEventGet+0x38>
 8004dba:	bf00      	nop
 8004dbc:	20001974 	.word	0x20001974

08004dc0 <vMBMasterOsResInit>:
 *
 */
void vMBMasterOsResInit( void )
{
   // rt_sem_init(&xMasterRunRes, "master res", 0x01 , RT_IPC_FLAG_PRIO);
}
 8004dc0:	4770      	bx	lr

08004dc2 <xMBMasterRunResTake>:
BOOL xMBMasterRunResTake( LONG lTimeOut )
{
    //If waiting time is -1 .It will wait forever
   // return rt_sem_take(&xMasterRunRes, lTimeOut) ? FALSE : TRUE ;
	return TRUE;
}
 8004dc2:	2001      	movs	r0, #1
 8004dc4:	4770      	bx	lr

08004dc6 <vMBMasterRunResRelease>:
 */
void vMBMasterRunResRelease( void )
{
    /* release resource */
   // rt_sem_release(&xMasterRunRes);
}
 8004dc6:	4770      	bx	lr

08004dc8 <vMBMasterErrorCBRespondTimeout>:
 * @param pucPDUData PDU buffer data
 * @param ucPDULength PDU buffer length
 *
 */
void vMBMasterErrorCBRespondTimeout(UCHAR ucDestAddress, const UCHAR* pucPDUData,
        USHORT ucPDULength) {
 8004dc8:	b508      	push	{r3, lr}
    /**
     * @note This code is use OS's event mechanism for modbus master protocol stack.
     * If you don't use OS, you can change it.
     */
   // rt_event_send(&xMasterOsEvent, EV_MASTER_ERROR_RESPOND_TIMEOUT);
	xEventGroupSetBits(xMasterOsEventGroupHandle,EV_MASTER_ERROR_RESPOND_TIMEOUT);
 8004dca:	2140      	movs	r1, #64	; 0x40
 8004dcc:	4b02      	ldr	r3, [pc, #8]	; (8004dd8 <vMBMasterErrorCBRespondTimeout+0x10>)
 8004dce:	6818      	ldr	r0, [r3, #0]
 8004dd0:	f000 fc16 	bl	8005600 <xEventGroupSetBits>
    /* You can add your code under here. */

}
 8004dd4:	bd08      	pop	{r3, pc}
 8004dd6:	bf00      	nop
 8004dd8:	20001974 	.word	0x20001974

08004ddc <vMBMasterErrorCBReceiveData>:
 * @param pucPDUData PDU buffer data
 * @param ucPDULength PDU buffer length
 *
 */
void vMBMasterErrorCBReceiveData(UCHAR ucDestAddress, const UCHAR* pucPDUData,
        USHORT ucPDULength) {
 8004ddc:	b508      	push	{r3, lr}
    /**
     * @note This code is use OS's event mechanism for modbus master protocol stack.
     * If you don't use OS, you can change it.
     */
  //  rt_event_send(&xMasterOsEvent, EV_MASTER_ERROR_RECEIVE_DATA);
	xEventGroupSetBits(xMasterOsEventGroupHandle,EV_MASTER_ERROR_RECEIVE_DATA);
 8004dde:	2180      	movs	r1, #128	; 0x80
 8004de0:	4b02      	ldr	r3, [pc, #8]	; (8004dec <vMBMasterErrorCBReceiveData+0x10>)
 8004de2:	6818      	ldr	r0, [r3, #0]
 8004de4:	f000 fc0c 	bl	8005600 <xEventGroupSetBits>
    /* You can add your code under here. */

}
 8004de8:	bd08      	pop	{r3, pc}
 8004dea:	bf00      	nop
 8004dec:	20001974 	.word	0x20001974

08004df0 <vMBMasterErrorCBExecuteFunction>:
 * @param pucPDUData PDU buffer data
 * @param ucPDULength PDU buffer length
 *
 */
void vMBMasterErrorCBExecuteFunction(UCHAR ucDestAddress, const UCHAR* pucPDUData,
        USHORT ucPDULength) {
 8004df0:	b508      	push	{r3, lr}
    /**
     * @note This code is use OS's event mechanism for modbus master protocol stack.
     * If you don't use OS, you can change it.
     */
   // rt_event_send(&xMasterOsEvent, EV_MASTER_ERROR_EXECUTE_FUNCTION);
	xEventGroupSetBits(xMasterOsEventGroupHandle,EV_MASTER_ERROR_EXECUTE_FUNCTION);
 8004df2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004df6:	4b02      	ldr	r3, [pc, #8]	; (8004e00 <vMBMasterErrorCBExecuteFunction+0x10>)
 8004df8:	6818      	ldr	r0, [r3, #0]
 8004dfa:	f000 fc01 	bl	8005600 <xEventGroupSetBits>
    /* You can add your code under here. */

}
 8004dfe:	bd08      	pop	{r3, pc}
 8004e00:	20001974 	.word	0x20001974

08004e04 <vMBMasterCBRequestScuuess>:
 * This is modbus master request process success callback function.
 * @note There functions will block modbus master poll while execute OS waiting.
 * So,for real-time of system.Do not execute too much waiting process.
 *
 */
void vMBMasterCBRequestScuuess( void ) {
 8004e04:	b508      	push	{r3, lr}
    /**
     * @note This code is use OS's event mechanism for modbus master protocol stack.
     * If you don't use OS, you can change it.
     */
  //  rt_event_send(&xMasterOsEvent, EV_MASTER_PROCESS_SUCESS);
	xEventGroupSetBits(xMasterOsEventGroupHandle,EV_MASTER_PROCESS_SUCESS);
 8004e06:	2120      	movs	r1, #32
 8004e08:	4b02      	ldr	r3, [pc, #8]	; (8004e14 <vMBMasterCBRequestScuuess+0x10>)
 8004e0a:	6818      	ldr	r0, [r3, #0]
 8004e0c:	f000 fbf8 	bl	8005600 <xEventGroupSetBits>
    /* You can add your code under here. */

}
 8004e10:	bd08      	pop	{r3, pc}
 8004e12:	bf00      	nop
 8004e14:	20001974 	.word	0x20001974

08004e18 <eMBMasterWaitRequestFinish>:
 * @note If you are use OS, you can use OS's event mechanism. Otherwise you have to run
 * much user custom delay for waiting.
 *
 * @return request error code
 */
eMBMasterReqErrCode eMBMasterWaitRequestFinish( void ) {
 8004e18:	b500      	push	{lr}
 8004e1a:	b083      	sub	sp, #12
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;
 //   rt_uint32_t recvedEvent;
    /* waiting for OS event */

    EventBits_t recvedEvent;
   	 recvedEvent = xEventGroupWaitBits(xMasterOsEventGroupHandle,   EV_MASTER_PROCESS_SUCESS | EV_MASTER_ERROR_RESPOND_TIMEOUT
 8004e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e20:	9300      	str	r3, [sp, #0]
 8004e22:	2300      	movs	r3, #0
 8004e24:	2201      	movs	r2, #1
 8004e26:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8004e2a:	480a      	ldr	r0, [pc, #40]	; (8004e54 <eMBMasterWaitRequestFinish+0x3c>)
 8004e2c:	6800      	ldr	r0, [r0, #0]
 8004e2e:	f000 fb5c 	bl	80054ea <xEventGroupWaitBits>
                    | EV_MASTER_ERROR_RECEIVE_DATA
                    | EV_MASTER_ERROR_EXECUTE_FUNCTION,
            RT_EVENT_FLAG_OR | RT_EVENT_FLAG_CLEAR, RT_WAITING_FOREVER,
            &recvedEvent);
            */
    switch (recvedEvent)
 8004e32:	2880      	cmp	r0, #128	; 0x80
 8004e34:	d009      	beq.n	8004e4a <eMBMasterWaitRequestFinish+0x32>
 8004e36:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8004e3a:	d008      	beq.n	8004e4e <eMBMasterWaitRequestFinish+0x36>
 8004e3c:	2840      	cmp	r0, #64	; 0x40
 8004e3e:	bf14      	ite	ne
 8004e40:	2000      	movne	r0, #0
 8004e42:	2004      	moveq	r0, #4
        eErrStatus = MB_MRE_EXE_FUN;
        break;
    }
    }
    return eErrStatus;
}
 8004e44:	b003      	add	sp, #12
 8004e46:	f85d fb04 	ldr.w	pc, [sp], #4
        eErrStatus = MB_MRE_REV_DATA;
 8004e4a:	2003      	movs	r0, #3
 8004e4c:	e7fa      	b.n	8004e44 <eMBMasterWaitRequestFinish+0x2c>
        eErrStatus = MB_MRE_EXE_FUN;
 8004e4e:	2006      	movs	r0, #6
 8004e50:	e7f8      	b.n	8004e44 <eMBMasterWaitRequestFinish+0x2c>
 8004e52:	bf00      	nop
 8004e54:	20001974 	.word	0x20001974

08004e58 <xMBMasterPortSerialInit>:
//static rt_err_t serial_rx_ind(rt_device_t dev, rt_size_t size);
//static void serial_soft_trans_irq(void* parameter);

/* ----------------------- Start implementation -----------------------------*/
BOOL xMBMasterPortSerialInit(UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity)
{
 8004e58:	b538      	push	{r3, r4, r5, lr}
 8004e5a:	460d      	mov	r5, r1
 8004e5c:	461c      	mov	r4, r3
	xSerialEventGroupHandle = xGetUARTEvent();
 8004e5e:	f7fc faf5 	bl	800144c <xGetUARTEvent>
 8004e62:	4b11      	ldr	r3, [pc, #68]	; (8004ea8 <xMBMasterPortSerialInit+0x50>)
 8004e64:	6018      	str	r0, [r3, #0]
     * set 485 mode receive and transmit control IO
     * @note MODBUS_MASTER_RT_CONTROL_PIN_INDEX need be defined by user
     */
   // rt_pin_mode(MODBUS_MASTER_RT_CONTROL_PIN_INDEX, PIN_MODE_OUTPUT);

    huart1.Init.BaudRate = ulBaudRate;
 8004e66:	4b11      	ldr	r3, [pc, #68]	; (8004eac <xMBMasterPortSerialInit+0x54>)
 8004e68:	605d      	str	r5, [r3, #4]
     huart1.Init.StopBits = UART_STOPBITS_1;
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	60da      	str	r2, [r3, #12]

    switch(eParity)
 8004e6e:	2c01      	cmp	r4, #1
 8004e70:	d00a      	beq.n	8004e88 <xMBMasterPortSerialInit+0x30>
 8004e72:	2c02      	cmp	r4, #2
 8004e74:	d010      	beq.n	8004e98 <xMBMasterPortSerialInit+0x40>
 8004e76:	b124      	cbz	r4, 8004e82 <xMBMasterPortSerialInit+0x2a>
    		huart1.Init.Parity = UART_PARITY_EVEN;
    		break;
    }
    /* set serial configure */

    HAL_UART_Init(&huart1);
 8004e78:	480c      	ldr	r0, [pc, #48]	; (8004eac <xMBMasterPortSerialInit+0x54>)
 8004e7a:	f7fe fe7b 	bl	8003b74 <HAL_UART_Init>
        //           sizeof(serial_soft_trans_irq_stack),
         //          10, 5);
    //rt_thread_startup(&thread_serial_soft_trans_irq);

    return TRUE;
}
 8004e7e:	2001      	movs	r0, #1
 8004e80:	bd38      	pop	{r3, r4, r5, pc}
    		huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004e82:	609a      	str	r2, [r3, #8]
    		huart1.Init.Parity = UART_PARITY_NONE;
 8004e84:	611a      	str	r2, [r3, #16]
    		break;
 8004e86:	e7f7      	b.n	8004e78 <xMBMasterPortSerialInit+0x20>
    		huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8004e88:	4b08      	ldr	r3, [pc, #32]	; (8004eac <xMBMasterPortSerialInit+0x54>)
 8004e8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004e8e:	609a      	str	r2, [r3, #8]
    	  	huart1.Init.Parity = UART_PARITY_ODD;
 8004e90:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004e94:	611a      	str	r2, [r3, #16]
    	  	break;
 8004e96:	e7ef      	b.n	8004e78 <xMBMasterPortSerialInit+0x20>
    		huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8004e98:	4b04      	ldr	r3, [pc, #16]	; (8004eac <xMBMasterPortSerialInit+0x54>)
 8004e9a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004e9e:	609a      	str	r2, [r3, #8]
    		huart1.Init.Parity = UART_PARITY_EVEN;
 8004ea0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ea4:	611a      	str	r2, [r3, #16]
    		break;
 8004ea6:	e7e7      	b.n	8004e78 <xMBMasterPortSerialInit+0x20>
 8004ea8:	2000197c 	.word	0x2000197c
 8004eac:	200015d0 	.word	0x200015d0

08004eb0 <vMBMasterPortSerialEnable>:

void vMBMasterPortSerialEnable(BOOL xRxEnable, BOOL xTxEnable)
{
 8004eb0:	b510      	push	{r4, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	460c      	mov	r4, r1
 //   rt_uint32_t recved_event;
    if (xRxEnable)
 8004eb6:	b190      	cbz	r0, 8004ede <vMBMasterPortSerialEnable+0x2e>
    {
    	HAL_UART_Receive_IT(&huart1,&rx_data_buf,1);
 8004eb8:	2201      	movs	r2, #1
 8004eba:	4912      	ldr	r1, [pc, #72]	; (8004f04 <vMBMasterPortSerialEnable+0x54>)
 8004ebc:	4812      	ldr	r0, [pc, #72]	; (8004f08 <vMBMasterPortSerialEnable+0x58>)
 8004ebe:	f7ff f922 	bl	8004106 <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(GPIOA,EN_Pin,GPIO_PIN_RESET);
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ec8:	4810      	ldr	r0, [pc, #64]	; (8004f0c <vMBMasterPortSerialEnable+0x5c>)
 8004eca:	f7fd fe47 	bl	8002b5c <HAL_GPIO_WritePin>
        /* switch 485 to transmit mode */
    //    rt_pin_write(MODBUS_MASTER_RT_CONTROL_PIN_INDEX, PIN_HIGH);
        /* disable RX interrupt */
      //  serial->ops->control(serial, RT_DEVICE_CTRL_CLR_INT, (void *)RT_DEVICE_FLAG_INT_RX);
    }
    if (xTxEnable)
 8004ece:	b184      	cbz	r4, 8004ef2 <vMBMasterPortSerialEnable+0x42>
    {
        /* start serial transmit */

    	xEventGroupSetBits(xSerialEventGroupHandle,EVENT_SERIAL_TRANS_START);
 8004ed0:	2101      	movs	r1, #1
 8004ed2:	4b0f      	ldr	r3, [pc, #60]	; (8004f10 <vMBMasterPortSerialEnable+0x60>)
 8004ed4:	6818      	ldr	r0, [r3, #0]
 8004ed6:	f000 fb93 	bl	8005600 <xEventGroupSetBits>
    	xEventGroupWaitBits( xSerialEventGroupHandle,  EVENT_SERIAL_TRANS_START,  pdTRUE, pdFALSE, 0 );
      //  rt_event_recv(&event_serial, EVENT_SERIAL_TRANS_START,
       //         RT_EVENT_FLAG_OR | RT_EVENT_FLAG_CLEAR, 0,
        //        &recved_event);
    }
}
 8004eda:	b002      	add	sp, #8
 8004edc:	bd10      	pop	{r4, pc}
	HAL_GPIO_WritePin(GPIOA,EN_Pin,GPIO_PIN_SET);
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ee4:	4809      	ldr	r0, [pc, #36]	; (8004f0c <vMBMasterPortSerialEnable+0x5c>)
 8004ee6:	f7fd fe39 	bl	8002b5c <HAL_GPIO_WritePin>
    	HAL_UART_AbortReceive_IT(&huart1);
 8004eea:	4807      	ldr	r0, [pc, #28]	; (8004f08 <vMBMasterPortSerialEnable+0x58>)
 8004eec:	f7fe fe98 	bl	8003c20 <HAL_UART_AbortReceive_IT>
 8004ef0:	e7ed      	b.n	8004ece <vMBMasterPortSerialEnable+0x1e>
    	xEventGroupWaitBits( xSerialEventGroupHandle,  EVENT_SERIAL_TRANS_START,  pdTRUE, pdFALSE, 0 );
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	9300      	str	r3, [sp, #0]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	4611      	mov	r1, r2
 8004efa:	4805      	ldr	r0, [pc, #20]	; (8004f10 <vMBMasterPortSerialEnable+0x60>)
 8004efc:	6800      	ldr	r0, [r0, #0]
 8004efe:	f000 faf4 	bl	80054ea <xEventGroupWaitBits>
}
 8004f02:	e7ea      	b.n	8004eda <vMBMasterPortSerialEnable+0x2a>
 8004f04:	20001979 	.word	0x20001979
 8004f08:	200015d0 	.word	0x200015d0
 8004f0c:	40010800 	.word	0x40010800
 8004f10:	2000197c 	.word	0x2000197c

08004f14 <xMBMasterPortSerialPutByte>:
{
   // serial->parent.close(&(serial->parent));
}

BOOL xMBMasterPortSerialPutByte(CHAR ucByte)
{
 8004f14:	b500      	push	{lr}
 8004f16:	b083      	sub	sp, #12
 8004f18:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_UART_Transmit_IT(&huart1,(uint8_t *) &ucByte, 1);
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f10d 0107 	add.w	r1, sp, #7
 8004f22:	4803      	ldr	r0, [pc, #12]	; (8004f30 <xMBMasterPortSerialPutByte+0x1c>)
 8004f24:	f7fe fe56 	bl	8003bd4 <HAL_UART_Transmit_IT>
  //  serial->parent.write(&(serial->parent), 0, &ucByte, 1);
    return TRUE;
}
 8004f28:	2001      	movs	r0, #1
 8004f2a:	b003      	add	sp, #12
 8004f2c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f30:	200015d0 	.word	0x200015d0

08004f34 <xMBMasterPortSerialGetByte>:

BOOL xMBMasterPortSerialGetByte(CHAR * pucByte)
{
	* pucByte = rx_data;
 8004f34:	4b02      	ldr	r3, [pc, #8]	; (8004f40 <xMBMasterPortSerialGetByte+0xc>)
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	7003      	strb	r3, [r0, #0]
 //   serial->parent.read(&(serial->parent), 0, pucByte, 1);
    return TRUE;
}
 8004f3a:	2001      	movs	r0, #1
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	20001978 	.word	0x20001978

08004f44 <HAL_UART_TxCpltCallback>:


#ifdef MASTER_MODE

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f44:	b500      	push	{lr}
 8004f46:	b083      	sub	sp, #12

	BaseType_t xHigherPriorityTaskWoken, xResult;
	/* xHigherPriorityTaskWoken must be initialised to pdFALSE. */
	xHigherPriorityTaskWoken = pdFALSE;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	9301      	str	r3, [sp, #4]

	 /* Set bit 0 and bit 4 in xEventGroup. */
	 xResult = xEventGroupSetBitsFromISR(
 8004f4c:	aa01      	add	r2, sp, #4
 8004f4e:	2101      	movs	r1, #1
 8004f50:	4b09      	ldr	r3, [pc, #36]	; (8004f78 <HAL_UART_TxCpltCallback+0x34>)
 8004f52:	6818      	ldr	r0, [r3, #0]
 8004f54:	f000 fba2 	bl	800569c <xEventGroupSetBitsFromISR>
			 	 	 	 	 	   xSerialEventGroupHandle,   /* The event group being updated. */
								   EVENT_SERIAL_TRANS_START, /* The bits being set. */
	                              &xHigherPriorityTaskWoken );

	  /* Was the message posted successfully? */
	  if( xResult != pdFAIL )
 8004f58:	b158      	cbz	r0, 8004f72 <HAL_UART_TxCpltCallback+0x2e>
	  {
	      /* If xHigherPriorityTaskWoken is now set to pdTRUE then a context
	      switch should be requested.  The macro used is port specific and will
	      be either portYIELD_FROM_ISR() or portEND_SWITCHING_ISR() - refer to
	      the documentation page for the port being used. */
	      portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8004f5a:	9b01      	ldr	r3, [sp, #4]
 8004f5c:	b14b      	cbz	r3, 8004f72 <HAL_UART_TxCpltCallback+0x2e>
 8004f5e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f66:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004f6a:	f3bf 8f4f 	dsb	sy
 8004f6e:	f3bf 8f6f 	isb	sy
	  }
}
 8004f72:	b003      	add	sp, #12
 8004f74:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f78:	2000197c 	.word	0x2000197c

08004f7c <StartUARTTask>:



void StartUARTTask(void *argument)
{
 8004f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f7e:	b083      	sub	sp, #12
	  EventBits_t uxBits;
	  xSerialEventGroupHandle = xGetUARTEvent();
 8004f80:	f7fc fa64 	bl	800144c <xGetUARTEvent>
 8004f84:	4b09      	ldr	r3, [pc, #36]	; (8004fac <StartUARTTask+0x30>)
 8004f86:	6018      	str	r0, [r3, #0]
	  while(1)
	  {
		  uxBits = xEventGroupWaitBits( xSerialEventGroupHandle,  EVENT_SERIAL_TRANS_START,  pdTRUE, pdFALSE, portMAX_DELAY );
 8004f88:	461e      	mov	r6, r3
 8004f8a:	f04f 35ff 	mov.w	r5, #4294967295
		  switch (uxBits)
		  {
		  	  	  case EVENT_SERIAL_TRANS_START:
		  	  		 pxMBMasterFrameCBTransmitterEmpty();
 8004f8e:	4f08      	ldr	r7, [pc, #32]	; (8004fb0 <StartUARTTask+0x34>)
		  uxBits = xEventGroupWaitBits( xSerialEventGroupHandle,  EVENT_SERIAL_TRANS_START,  pdTRUE, pdFALSE, portMAX_DELAY );
 8004f90:	2400      	movs	r4, #0
 8004f92:	9500      	str	r5, [sp, #0]
 8004f94:	4623      	mov	r3, r4
 8004f96:	2201      	movs	r2, #1
 8004f98:	4611      	mov	r1, r2
 8004f9a:	6830      	ldr	r0, [r6, #0]
 8004f9c:	f000 faa5 	bl	80054ea <xEventGroupWaitBits>
		  switch (uxBits)
 8004fa0:	2801      	cmp	r0, #1
 8004fa2:	d1f6      	bne.n	8004f92 <StartUARTTask+0x16>
		  	  		 pxMBMasterFrameCBTransmitterEmpty();
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	4798      	blx	r3

		  	  		  break;
 8004fa8:	e7f2      	b.n	8004f90 <StartUARTTask+0x14>
 8004faa:	bf00      	nop
 8004fac:	2000197c 	.word	0x2000197c
 8004fb0:	2000172c 	.word	0x2000172c

08004fb4 <HAL_UART_RxCpltCallback>:


}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fb4:	b508      	push	{r3, lr}
	rx_data = rx_data_buf;
 8004fb6:	4906      	ldr	r1, [pc, #24]	; (8004fd0 <HAL_UART_RxCpltCallback+0x1c>)
 8004fb8:	780a      	ldrb	r2, [r1, #0]
 8004fba:	4b06      	ldr	r3, [pc, #24]	; (8004fd4 <HAL_UART_RxCpltCallback+0x20>)
 8004fbc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1,&rx_data_buf,1);
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	4805      	ldr	r0, [pc, #20]	; (8004fd8 <HAL_UART_RxCpltCallback+0x24>)
 8004fc2:	f7ff f8a0 	bl	8004106 <HAL_UART_Receive_IT>
	 pxMBMasterFrameCBByteReceived();
 8004fc6:	4b05      	ldr	r3, [pc, #20]	; (8004fdc <HAL_UART_RxCpltCallback+0x28>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4798      	blx	r3
}
 8004fcc:	bd08      	pop	{r3, pc}
 8004fce:	bf00      	nop
 8004fd0:	20001979 	.word	0x20001979
 8004fd4:	20001978 	.word	0x20001978
 8004fd8:	200015d0 	.word	0x200015d0
 8004fdc:	20001728 	.word	0x20001728

08004fe0 <xMBMasterPortTimersInit>:
/* ----------------------- static functions ---------------------------------*/


/* ----------------------- Start implementation -----------------------------*/
BOOL xMBMasterPortTimersInit(USHORT usTimeOut50us)
{
 8004fe0:	b508      	push	{r3, lr}
    /* backup T35 ticks */
    usT35TimeOut50us = usTimeOut50us;
 8004fe2:	4b03      	ldr	r3, [pc, #12]	; (8004ff0 <xMBMasterPortTimersInit+0x10>)
 8004fe4:	8018      	strh	r0, [r3, #0]
    vTimerInit( usT35TimeOut50us);
 8004fe6:	f7fc fa3d 	bl	8001464 <vTimerInit>
 //                  RT_NULL,
 //                  (50 * usT35TimeOut50us) / (1000 * 1000 / RT_TICK_PER_SECOND) + 1,
 //                  RT_TIMER_FLAG_ONE_SHOT); /* one shot */

    return TRUE;
}
 8004fea:	2001      	movs	r0, #1
 8004fec:	bd08      	pop	{r3, pc}
 8004fee:	bf00      	nop
 8004ff0:	20001980 	.word	0x20001980

08004ff4 <vMBMasterPortTimersT35Enable>:

void vMBMasterPortTimersT35Enable()
{
 8004ff4:	b508      	push	{r3, lr}
   // rt_tick_t timer_tick = (50 * usT35TimeOut50us)
   //         / (1000 * 1000 / RT_TICK_PER_SECOND);
//
    /* Set current timer mode, don't change it.*/
    vMBMasterSetCurTimerMode(MB_TMODE_T35);
 8004ff6:	2000      	movs	r0, #0
 8004ff8:	f7ff fdec 	bl	8004bd4 <vMBMasterSetCurTimerMode>
    vTimerInit( usT35TimeOut50us);
 8004ffc:	4b03      	ldr	r3, [pc, #12]	; (800500c <vMBMasterPortTimersT35Enable+0x18>)
 8004ffe:	8818      	ldrh	r0, [r3, #0]
 8005000:	f7fc fa30 	bl	8001464 <vTimerInit>
   // rt_timer_control(&timer, RT_TIMER_CTRL_SET_TIME, &timer_tick);

    vStartTimer();
 8005004:	f7fc fa3a 	bl	800147c <vStartTimer>
  //  rt_timer_start(&timer);
}
 8005008:	bd08      	pop	{r3, pc}
 800500a:	bf00      	nop
 800500c:	20001980 	.word	0x20001980

08005010 <vMBMasterPortTimersConvertDelayEnable>:

void vMBMasterPortTimersConvertDelayEnable()
{
 8005010:	b508      	push	{r3, lr}
 //  rt_tick_t timer_tick = MB_MASTER_DELAY_MS_CONVERT * RT_TICK_PER_SECOND / 1000;

    /* Set current timer mode, don't change it.*/
    vMBMasterSetCurTimerMode(MB_TMODE_CONVERT_DELAY);
 8005012:	2002      	movs	r0, #2
 8005014:	f7ff fdde 	bl	8004bd4 <vMBMasterSetCurTimerMode>
    vTimerInit(MB_MASTER_DELAY_MS_CONVERT*20);
 8005018:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800501c:	f7fc fa22 	bl	8001464 <vTimerInit>
 //   rt_timer_control(&timer, RT_TIMER_CTRL_SET_TIME, &timer_tick);
    vStartTimer();
 8005020:	f7fc fa2c 	bl	800147c <vStartTimer>
 //   rt_timer_start(&timer);
}
 8005024:	bd08      	pop	{r3, pc}

08005026 <vMBMasterPortTimersRespondTimeoutEnable>:

void vMBMasterPortTimersRespondTimeoutEnable()
{
 8005026:	b508      	push	{r3, lr}
  //  rt_tick_t timer_tick = MB_MASTER_TIMEOUT_MS_RESPOND * RT_TICK_PER_SECOND / 1000;

    /* Set current timer mode, don't change it.*/
    vMBMasterSetCurTimerMode(MB_TMODE_RESPOND_TIMEOUT);
 8005028:	2001      	movs	r0, #1
 800502a:	f7ff fdd3 	bl	8004bd4 <vMBMasterSetCurTimerMode>
    vTimerInit(MB_MASTER_TIMEOUT_MS_RESPOND*20);
 800502e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005032:	f7fc fa17 	bl	8001464 <vTimerInit>
    vStartTimer();
 8005036:	f7fc fa21 	bl	800147c <vStartTimer>
  //  rt_timer_control(&timer, RT_TIMER_CTRL_SET_TIME, &timer_tick);

  //  rt_timer_start(&timer);
}
 800503a:	bd08      	pop	{r3, pc}

0800503c <vMBMasterPortTimersDisable>:

void vMBMasterPortTimersDisable()
{
 800503c:	b508      	push	{r3, lr}
	vStopTimer();
 800503e:	f7fc fa25 	bl	800148c <vStopTimer>
  //  rt_timer_stop(&timer);
}
 8005042:	bd08      	pop	{r3, pc}

08005044 <prvvTIMERExpiredISR>:
#ifdef MASTER_MODE
void prvvTIMERExpiredISR(void)
{
 8005044:	b508      	push	{r3, lr}
    (void) pxMBMasterPortCBTimerExpired();
 8005046:	4b02      	ldr	r3, [pc, #8]	; (8005050 <prvvTIMERExpiredISR+0xc>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4798      	blx	r3
}
 800504c:	bd08      	pop	{r3, pc}
 800504e:	bf00      	nop
 8005050:	20001730 	.word	0x20001730

08005054 <eMBMasterRegInputCB>:
 * @param usNRegs input register number
 *
 * @return result
 */
eMBErrorCode eMBMasterRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
 8005054:	b570      	push	{r4, r5, r6, lr}
 8005056:	4605      	mov	r5, r0
 8005058:	460c      	mov	r4, r1
 800505a:	4616      	mov	r6, r2
    USHORT *        pusRegInputBuf;
    USHORT          REG_INPUT_START;
    USHORT          REG_INPUT_NREGS;
    USHORT          usRegInStart;

    pusRegInputBuf = usMRegInBuf[ucMBMasterGetDestAddress() - 1];
 800505c:	f7ff f9ba 	bl	80043d4 <ucMBMasterGetDestAddress>
    REG_INPUT_START = M_REG_INPUT_START;
    REG_INPUT_NREGS = M_REG_INPUT_NREGS;
    usRegInStart = usMRegInStart;

    /* it already plus one in modbus function method. */
    usAddress--;
 8005060:	1e63      	subs	r3, r4, #1
 8005062:	b29b      	uxth	r3, r3

    if ((usAddress >= REG_INPUT_START)
 8005064:	2b04      	cmp	r3, #4
 8005066:	d91f      	bls.n	80050a8 <eMBMasterRegInputCB+0x54>
            && (usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS))
 8005068:	199a      	adds	r2, r3, r6
 800506a:	2a0d      	cmp	r2, #13
 800506c:	dc1e      	bgt.n	80050ac <eMBMasterRegInputCB+0x58>
    usRegInStart = usMRegInStart;
 800506e:	4a11      	ldr	r2, [pc, #68]	; (80050b4 <eMBMasterRegInputCB+0x60>)
    {
        iRegIndex = usAddress - usRegInStart;
 8005070:	8812      	ldrh	r2, [r2, #0]
 8005072:	1a9b      	subs	r3, r3, r2
 8005074:	b29b      	uxth	r3, r3
        while (usNRegs > 0)
 8005076:	b1de      	cbz	r6, 80050b0 <eMBMasterRegInputCB+0x5c>
    pusRegInputBuf = usMRegInBuf[ucMBMasterGetDestAddress() - 1];
 8005078:	3801      	subs	r0, #1
 800507a:	0104      	lsls	r4, r0, #4
 800507c:	1ca8      	adds	r0, r5, #2
 800507e:	441e      	add	r6, r3
 8005080:	b2b6      	uxth	r6, r6
        {
            pusRegInputBuf[iRegIndex] = *pucRegBuffer++ << 8;
 8005082:	4d0d      	ldr	r5, [pc, #52]	; (80050b8 <eMBMasterRegInputCB+0x64>)
 8005084:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 8005088:	f810 2c02 	ldrb.w	r2, [r0, #-2]
 800508c:	0212      	lsls	r2, r2, #8
 800508e:	526a      	strh	r2, [r5, r1]
            pusRegInputBuf[iRegIndex] |= *pucRegBuffer++;
 8005090:	f810 cc01 	ldrb.w	ip, [r0, #-1]
 8005094:	ea42 020c 	orr.w	r2, r2, ip
 8005098:	526a      	strh	r2, [r5, r1]
            iRegIndex++;
 800509a:	3301      	adds	r3, #1
 800509c:	b29b      	uxth	r3, r3
        while (usNRegs > 0)
 800509e:	3002      	adds	r0, #2
 80050a0:	42b3      	cmp	r3, r6
 80050a2:	d1ef      	bne.n	8005084 <eMBMasterRegInputCB+0x30>
    eMBErrorCode    eStatus = MB_ENOERR;
 80050a4:	2000      	movs	r0, #0
 80050a6:	e000      	b.n	80050aa <eMBMasterRegInputCB+0x56>
            usNRegs--;
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 80050a8:	2001      	movs	r0, #1
    }

    return eStatus;
}
 80050aa:	bd70      	pop	{r4, r5, r6, pc}
        eStatus = MB_ENOREG;
 80050ac:	2001      	movs	r0, #1
 80050ae:	e7fc      	b.n	80050aa <eMBMasterRegInputCB+0x56>
    eMBErrorCode    eStatus = MB_ENOERR;
 80050b0:	2000      	movs	r0, #0
 80050b2:	e7fa      	b.n	80050aa <eMBMasterRegInputCB+0x56>
 80050b4:	20000012 	.word	0x20000012
 80050b8:	20002148 	.word	0x20002148

080050bc <eMBMasterRegHoldingCB>:
 *
 * @return result
 */
eMBErrorCode eMBMasterRegHoldingCB(UCHAR * pucRegBuffer, USHORT usAddress,
        USHORT usNRegs, eMBRegisterMode eMode)
{
 80050bc:	b570      	push	{r4, r5, r6, lr}
 80050be:	4605      	mov	r5, r0
 80050c0:	460c      	mov	r4, r1
 80050c2:	4616      	mov	r6, r2
    USHORT *        pusRegHoldingBuf;
    USHORT          REG_HOLDING_START;
    USHORT          REG_HOLDING_NREGS;
    USHORT          usRegHoldStart;

    pusRegHoldingBuf = usMRegHoldBuf[ucMBMasterGetDestAddress() - 1];
 80050c4:	f7ff f986 	bl	80043d4 <ucMBMasterGetDestAddress>
    usRegHoldStart = usMRegHoldStart;
    /* if mode is read, the master will write the received date to buffer. */
    eMode = MB_REG_WRITE;

    /* it already plus one in modbus function method. */
    usAddress--;
 80050c8:	1e63      	subs	r3, r4, #1
 80050ca:	b29b      	uxth	r3, r3

    if ((usAddress >= REG_HOLDING_START)
 80050cc:	2b0c      	cmp	r3, #12
 80050ce:	d921      	bls.n	8005114 <eMBMasterRegHoldingCB+0x58>
            && (usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS))
 80050d0:	199a      	adds	r2, r3, r6
 80050d2:	2a2b      	cmp	r2, #43	; 0x2b
 80050d4:	dc20      	bgt.n	8005118 <eMBMasterRegHoldingCB+0x5c>
    usRegHoldStart = usMRegHoldStart;
 80050d6:	4a12      	ldr	r2, [pc, #72]	; (8005120 <eMBMasterRegHoldingCB+0x64>)
    {
        iRegIndex = usAddress - usRegHoldStart;
 80050d8:	8812      	ldrh	r2, [r2, #0]
 80050da:	1a9b      	subs	r3, r3, r2
 80050dc:	b29b      	uxth	r3, r3
                usNRegs--;
            }
            break;
        /* write current register values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (usNRegs > 0)
 80050de:	b1ee      	cbz	r6, 800511c <eMBMasterRegHoldingCB+0x60>
    pusRegHoldingBuf = usMRegHoldBuf[ucMBMasterGetDestAddress() - 1];
 80050e0:	3801      	subs	r0, #1
 80050e2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80050e6:	0081      	lsls	r1, r0, #2
 80050e8:	1ca8      	adds	r0, r5, #2
 80050ea:	441e      	add	r6, r3
 80050ec:	b2b6      	uxth	r6, r6
            {
                pusRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
 80050ee:	4d0d      	ldr	r5, [pc, #52]	; (8005124 <eMBMasterRegHoldingCB+0x68>)
 80050f0:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 80050f4:	f810 2c02 	ldrb.w	r2, [r0, #-2]
 80050f8:	0212      	lsls	r2, r2, #8
 80050fa:	532a      	strh	r2, [r5, r4]
                pusRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
 80050fc:	f810 cc01 	ldrb.w	ip, [r0, #-1]
 8005100:	ea42 020c 	orr.w	r2, r2, ip
 8005104:	532a      	strh	r2, [r5, r4]
                iRegIndex++;
 8005106:	3301      	adds	r3, #1
 8005108:	b29b      	uxth	r3, r3
            while (usNRegs > 0)
 800510a:	3002      	adds	r0, #2
 800510c:	42b3      	cmp	r3, r6
 800510e:	d1ef      	bne.n	80050f0 <eMBMasterRegHoldingCB+0x34>
    eMBErrorCode    eStatus = MB_ENOERR;
 8005110:	2000      	movs	r0, #0
 8005112:	e000      	b.n	8005116 <eMBMasterRegHoldingCB+0x5a>
            break;
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8005114:	2001      	movs	r0, #1
    }
    return eStatus;
}
 8005116:	bd70      	pop	{r4, r5, r6, pc}
        eStatus = MB_ENOREG;
 8005118:	2001      	movs	r0, #1
 800511a:	e7fc      	b.n	8005116 <eMBMasterRegHoldingCB+0x5a>
    eMBErrorCode    eStatus = MB_ENOERR;
 800511c:	2000      	movs	r0, #0
 800511e:	e7fa      	b.n	8005116 <eMBMasterRegHoldingCB+0x5a>
 8005120:	20000010 	.word	0x20000010
 8005124:	200019c8 	.word	0x200019c8

08005128 <eMBMasterRegCoilsCB>:
 *
 * @return result
 */
eMBErrorCode eMBMasterRegCoilsCB(UCHAR * pucRegBuffer, USHORT usAddress,
        USHORT usNCoils, eMBRegisterMode eMode)
{
 8005128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800512c:	b083      	sub	sp, #12
 800512e:	4606      	mov	r6, r0
 8005130:	460c      	mov	r4, r1
 8005132:	4690      	mov	r8, r2
    USHORT          COIL_START;
    USHORT          COIL_NCOILS;
    USHORT          usCoilStart;
    iNReg =  usNCoils / 8 + 1;

    pucCoilBuf = ucMCoilBuf[ucMBMasterGetDestAddress() - 1];
 8005134:	f7ff f94e 	bl	80043d4 <ucMBMasterGetDestAddress>

    /* if mode is read,the master will write the received date to buffer. */
    eMode = MB_REG_WRITE;

    /* it already plus one in modbus function method. */
    usAddress--;
 8005138:	3c01      	subs	r4, #1
 800513a:	b2a4      	uxth	r4, r4

    if ((usAddress >= COIL_START)
 800513c:	b3c4      	cbz	r4, 80051b0 <eMBMasterRegCoilsCB+0x88>
            && (usAddress + usNCoils <= COIL_START + COIL_NCOILS))
 800513e:	eb04 0308 	add.w	r3, r4, r8
 8005142:	2b05      	cmp	r3, #5
 8005144:	dc38      	bgt.n	80051b8 <eMBMasterRegCoilsCB+0x90>
    iNReg =  usNCoils / 8 + 1;
 8005146:	ea4f 02d8 	mov.w	r2, r8, lsr #3
 800514a:	9201      	str	r2, [sp, #4]
    pucCoilBuf = ucMCoilBuf[ucMBMasterGetDestAddress() - 1];
 800514c:	4f1b      	ldr	r7, [pc, #108]	; (80051bc <eMBMasterRegCoilsCB+0x94>)
 800514e:	4407      	add	r7, r0
    usCoilStart = usMCoilStart;
 8005150:	4b1b      	ldr	r3, [pc, #108]	; (80051c0 <eMBMasterRegCoilsCB+0x98>)
    {
        iRegIndex = (USHORT) (usAddress - usCoilStart) / 8;
 8005152:	881b      	ldrh	r3, [r3, #0]
 8005154:	1ae4      	subs	r4, r4, r3
 8005156:	f3c4 0bcc 	ubfx	fp, r4, #3, #13
        iRegBitIndex = (USHORT) (usAddress - usCoilStart) % 8;
 800515a:	f004 0407 	and.w	r4, r4, #7
            *pucRegBuffer = *pucRegBuffer >> (8 - usNCoils);
            break;

        /* write current coil values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (iNReg > 1)
 800515e:	1c53      	adds	r3, r2, #1
 8005160:	2b01      	cmp	r3, #1
 8005162:	d91a      	bls.n	800519a <eMBMasterRegCoilsCB+0x72>
 8005164:	eb06 0902 	add.w	r9, r6, r2
 8005168:	4635      	mov	r5, r6
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
 800516a:	ebab 0606 	sub.w	r6, fp, r6
 800516e:	f04f 0a08 	mov.w	sl, #8
 8005172:	19a8      	adds	r0, r5, r6
 8005174:	b280      	uxth	r0, r0
 8005176:	f815 3b01 	ldrb.w	r3, [r5], #1
 800517a:	4652      	mov	r2, sl
 800517c:	4621      	mov	r1, r4
 800517e:	4438      	add	r0, r7
 8005180:	f7ff fd34 	bl	8004bec <xMBUtilSetBits>
            while (iNReg > 1)
 8005184:	454d      	cmp	r5, r9
 8005186:	d1f4      	bne.n	8005172 <eMBMasterRegCoilsCB+0x4a>
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
 8005188:	9b01      	ldr	r3, [sp, #4]
 800518a:	445b      	add	r3, fp
 800518c:	fa1f fb83 	uxth.w	fp, r3
                iNReg--;
            }
            /* last coils */
            usNCoils = usNCoils % 8;
            /* xMBUtilSetBits has bug when ucNBits is zero */
            if (usNCoils != 0)
 8005190:	f018 0207 	ands.w	r2, r8, #7
 8005194:	d103      	bne.n	800519e <eMBMasterRegCoilsCB+0x76>
    eMBErrorCode    eStatus = MB_ENOERR;
 8005196:	2000      	movs	r0, #0
 8005198:	e00b      	b.n	80051b2 <eMBMasterRegCoilsCB+0x8a>
            while (iNReg > 1)
 800519a:	46b1      	mov	r9, r6
 800519c:	e7f8      	b.n	8005190 <eMBMasterRegCoilsCB+0x68>
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, usNCoils,
 800519e:	f899 3000 	ldrb.w	r3, [r9]
 80051a2:	4621      	mov	r1, r4
 80051a4:	eb07 000b 	add.w	r0, r7, fp
 80051a8:	f7ff fd20 	bl	8004bec <xMBUtilSetBits>
    eMBErrorCode    eStatus = MB_ENOERR;
 80051ac:	2000      	movs	r0, #0
 80051ae:	e000      	b.n	80051b2 <eMBMasterRegCoilsCB+0x8a>
            break;
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 80051b0:	2001      	movs	r0, #1
    }
    return eStatus;
}
 80051b2:	b003      	add	sp, #12
 80051b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        eStatus = MB_ENOREG;
 80051b8:	2001      	movs	r0, #1
 80051ba:	e7fa      	b.n	80051b2 <eMBMasterRegCoilsCB+0x8a>
 80051bc:	20001983 	.word	0x20001983
 80051c0:	2000000e 	.word	0x2000000e

080051c4 <eMBMasterRegDiscreteCB>:
 * @param usNDiscrete discrete number
 *
 * @return result
 */
eMBErrorCode eMBMasterRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
 80051c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051c8:	b083      	sub	sp, #12
 80051ca:	4606      	mov	r6, r0
 80051cc:	460d      	mov	r5, r1
 80051ce:	4690      	mov	r8, r2
    USHORT          DISCRETE_INPUT_START;
    USHORT          DISCRETE_INPUT_NDISCRETES;
    USHORT          usDiscreteInputStart;
    iNReg =  usNDiscrete / 8 + 1;

    pucDiscreteInputBuf = ucMDiscInBuf[ucMBMasterGetDestAddress() - 1];
 80051d0:	f7ff f900 	bl	80043d4 <ucMBMasterGetDestAddress>
    DISCRETE_INPUT_START = M_DISCRETE_INPUT_START;
    DISCRETE_INPUT_NDISCRETES = M_DISCRETE_INPUT_NDISCRETES;
    usDiscreteInputStart = usMDiscInStart;

    /* it already plus one in modbus function method. */
    usAddress--;
 80051d4:	3d01      	subs	r5, #1
 80051d6:	b2ad      	uxth	r5, r5

    if ((usAddress >= DISCRETE_INPUT_START)
            && (usAddress + usNDiscrete    <= DISCRETE_INPUT_START + DISCRETE_INPUT_NDISCRETES))
 80051d8:	eb05 0308 	add.w	r3, r5, r8
 80051dc:	2b01      	cmp	r3, #1
 80051de:	dd03      	ble.n	80051e8 <eMBMasterRegDiscreteCB+0x24>
                    usNDiscrete, *pucRegBuffer++);
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 80051e0:	2001      	movs	r0, #1
    }

    return eStatus;
}
 80051e2:	b003      	add	sp, #12
 80051e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iNReg =  usNDiscrete / 8 + 1;
 80051e8:	ea4f 02d8 	mov.w	r2, r8, lsr #3
 80051ec:	9201      	str	r2, [sp, #4]
    pucDiscreteInputBuf = ucMDiscInBuf[ucMBMasterGetDestAddress() - 1];
 80051ee:	4f19      	ldr	r7, [pc, #100]	; (8005254 <eMBMasterRegDiscreteCB+0x90>)
 80051f0:	4407      	add	r7, r0
    usDiscreteInputStart = usMDiscInStart;
 80051f2:	4b19      	ldr	r3, [pc, #100]	; (8005258 <eMBMasterRegDiscreteCB+0x94>)
        iRegIndex = (USHORT) (usAddress - usDiscreteInputStart) / 8;
 80051f4:	881b      	ldrh	r3, [r3, #0]
 80051f6:	1aed      	subs	r5, r5, r3
 80051f8:	f3c5 0bcc 	ubfx	fp, r5, #3, #13
        iRegBitIndex = (USHORT) (usAddress - usDiscreteInputStart) % 8;
 80051fc:	f005 0507 	and.w	r5, r5, #7
        while (iNReg > 1)
 8005200:	1c53      	adds	r3, r2, #1
 8005202:	2b01      	cmp	r3, #1
 8005204:	d91a      	bls.n	800523c <eMBMasterRegDiscreteCB+0x78>
 8005206:	eb06 0902 	add.w	r9, r6, r2
 800520a:	4634      	mov	r4, r6
            xMBUtilSetBits(&pucDiscreteInputBuf[iRegIndex++], iRegBitIndex, 8,
 800520c:	ebab 0606 	sub.w	r6, fp, r6
 8005210:	f04f 0a08 	mov.w	sl, #8
 8005214:	19a0      	adds	r0, r4, r6
 8005216:	b280      	uxth	r0, r0
 8005218:	f814 3b01 	ldrb.w	r3, [r4], #1
 800521c:	4652      	mov	r2, sl
 800521e:	4629      	mov	r1, r5
 8005220:	4438      	add	r0, r7
 8005222:	f7ff fce3 	bl	8004bec <xMBUtilSetBits>
        while (iNReg > 1)
 8005226:	454c      	cmp	r4, r9
 8005228:	d1f4      	bne.n	8005214 <eMBMasterRegDiscreteCB+0x50>
            xMBUtilSetBits(&pucDiscreteInputBuf[iRegIndex++], iRegBitIndex, 8,
 800522a:	9b01      	ldr	r3, [sp, #4]
 800522c:	445b      	add	r3, fp
 800522e:	fa1f fb83 	uxth.w	fp, r3
        if (usNDiscrete != 0)
 8005232:	f018 0207 	ands.w	r2, r8, #7
 8005236:	d103      	bne.n	8005240 <eMBMasterRegDiscreteCB+0x7c>
    eMBErrorCode    eStatus = MB_ENOERR;
 8005238:	2000      	movs	r0, #0
 800523a:	e7d2      	b.n	80051e2 <eMBMasterRegDiscreteCB+0x1e>
        while (iNReg > 1)
 800523c:	46b1      	mov	r9, r6
 800523e:	e7f8      	b.n	8005232 <eMBMasterRegDiscreteCB+0x6e>
            xMBUtilSetBits(&pucDiscreteInputBuf[iRegIndex++], iRegBitIndex,
 8005240:	f899 3000 	ldrb.w	r3, [r9]
 8005244:	4629      	mov	r1, r5
 8005246:	eb07 000b 	add.w	r0, r7, fp
 800524a:	f7ff fccf 	bl	8004bec <xMBUtilSetBits>
    eMBErrorCode    eStatus = MB_ENOERR;
 800524e:	2000      	movs	r0, #0
 8005250:	e7c7      	b.n	80051e2 <eMBMasterRegDiscreteCB+0x1e>
 8005252:	bf00      	nop
 8005254:	200019a3 	.word	0x200019a3
 8005258:	200019c4 	.word	0x200019c4

0800525c <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800525c:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8005260:	b9a3      	cbnz	r3, 800528c <osKernelInitialize+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005262:	f3ef 8310 	mrs	r3, PRIMASK
 8005266:	b9a3      	cbnz	r3, 8005292 <osKernelInitialize+0x36>
 8005268:	4b0d      	ldr	r3, [pc, #52]	; (80052a0 <osKernelInitialize+0x44>)
 800526a:	6818      	ldr	r0, [r3, #0]
 800526c:	2802      	cmp	r0, #2
 800526e:	d004      	beq.n	800527a <osKernelInitialize+0x1e>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8005270:	b990      	cbnz	r0, 8005298 <osKernelInitialize+0x3c>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005272:	4b0b      	ldr	r3, [pc, #44]	; (80052a0 <osKernelInitialize+0x44>)
 8005274:	2201      	movs	r2, #1
 8005276:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005278:	4770      	bx	lr
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800527a:	f3ef 8311 	mrs	r3, BASEPRI
    } else {
      stat = osError;
 800527e:	2b00      	cmp	r3, #0
 8005280:	bf14      	ite	ne
 8005282:	f06f 0005 	mvnne.w	r0, #5
 8005286:	f04f 30ff 	moveq.w	r0, #4294967295
 800528a:	4770      	bx	lr
    stat = osErrorISR;
 800528c:	f06f 0005 	mvn.w	r0, #5
 8005290:	4770      	bx	lr
 8005292:	f06f 0005 	mvn.w	r0, #5
 8005296:	4770      	bx	lr
      stat = osError;
 8005298:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	20002604 	.word	0x20002604

080052a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80052a4:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052a6:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80052aa:	b9c3      	cbnz	r3, 80052de <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052ac:	f3ef 8310 	mrs	r3, PRIMASK
 80052b0:	b9c3      	cbnz	r3, 80052e4 <osKernelStart+0x40>
 80052b2:	4b0f      	ldr	r3, [pc, #60]	; (80052f0 <osKernelStart+0x4c>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d008      	beq.n	80052cc <osKernelStart+0x28>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d115      	bne.n	80052ea <osKernelStart+0x46>
      KernelState = osKernelRunning;
 80052be:	4b0c      	ldr	r3, [pc, #48]	; (80052f0 <osKernelStart+0x4c>)
 80052c0:	2202      	movs	r2, #2
 80052c2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80052c4:	f000 ff74 	bl	80061b0 <vTaskStartScheduler>
      stat = osOK;
 80052c8:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 80052ca:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80052cc:	f3ef 8311 	mrs	r3, BASEPRI
      stat = osError;
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	bf14      	ite	ne
 80052d4:	f06f 0005 	mvnne.w	r0, #5
 80052d8:	f04f 30ff 	moveq.w	r0, #4294967295
 80052dc:	e7f5      	b.n	80052ca <osKernelStart+0x26>
    stat = osErrorISR;
 80052de:	f06f 0005 	mvn.w	r0, #5
 80052e2:	e7f2      	b.n	80052ca <osKernelStart+0x26>
 80052e4:	f06f 0005 	mvn.w	r0, #5
 80052e8:	e7ef      	b.n	80052ca <osKernelStart+0x26>
      stat = osError;
 80052ea:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 80052ee:	e7ec      	b.n	80052ca <osKernelStart+0x26>
 80052f0:	20002604 	.word	0x20002604

080052f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80052f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052f6:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80052f8:	2400      	movs	r4, #0
 80052fa:	9404      	str	r4, [sp, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052fc:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8005300:	b9d4      	cbnz	r4, 8005338 <osThreadNew+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005302:	f3ef 8310 	mrs	r3, PRIMASK
 8005306:	b9bb      	cbnz	r3, 8005338 <osThreadNew+0x44>
 8005308:	4b2c      	ldr	r3, [pc, #176]	; (80053bc <osThreadNew+0xc8>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2b02      	cmp	r3, #2
 800530e:	d00f      	beq.n	8005330 <osThreadNew+0x3c>
 8005310:	b190      	cbz	r0, 8005338 <osThreadNew+0x44>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 8005312:	2300      	movs	r3, #0
 8005314:	f88d 3017 	strb.w	r3, [sp, #23]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 8005318:	2a00      	cmp	r2, #0
 800531a:	d03a      	beq.n	8005392 <osThreadNew+0x9e>
      if (attr->name != NULL) {
 800531c:	6814      	ldr	r4, [r2, #0]
 800531e:	b174      	cbz	r4, 800533e <osThreadNew+0x4a>
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8005320:	6993      	ldr	r3, [r2, #24]
 8005322:	b17b      	cbz	r3, 8005344 <osThreadNew+0x50>
        prio = (UBaseType_t)attr->priority;
 8005324:	461d      	mov	r5, r3
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005326:	3b01      	subs	r3, #1
 8005328:	2b37      	cmp	r3, #55	; 0x37
 800532a:	d90c      	bls.n	8005346 <osThreadNew+0x52>
        return (NULL);
 800532c:	2000      	movs	r0, #0
 800532e:	e004      	b.n	800533a <osThreadNew+0x46>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005330:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (func != NULL)) {
 8005334:	2b00      	cmp	r3, #0
 8005336:	d0eb      	beq.n	8005310 <osThreadNew+0x1c>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005338:	9804      	ldr	r0, [sp, #16]
}
 800533a:	b007      	add	sp, #28
 800533c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    name  = &empty;
 800533e:	f10d 0417 	add.w	r4, sp, #23
 8005342:	e7ed      	b.n	8005320 <osThreadNew+0x2c>
 8005344:	2518      	movs	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005346:	6853      	ldr	r3, [r2, #4]
 8005348:	f013 0f01 	tst.w	r3, #1
 800534c:	d134      	bne.n	80053b8 <osThreadNew+0xc4>
      if (attr->stack_size > 0U) {
 800534e:	6953      	ldr	r3, [r2, #20]
 8005350:	b113      	cbz	r3, 8005358 <osThreadNew+0x64>
        stack = attr->stack_size / sizeof(StackType_t);
 8005352:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8005356:	e001      	b.n	800535c <osThreadNew+0x68>
    stack = configMINIMAL_STACK_SIZE;
 8005358:	f04f 0c80 	mov.w	ip, #128	; 0x80
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800535c:	6896      	ldr	r6, [r2, #8]
 800535e:	b18e      	cbz	r6, 8005384 <osThreadNew+0x90>
 8005360:	68d7      	ldr	r7, [r2, #12]
 8005362:	2fbb      	cmp	r7, #187	; 0xbb
 8005364:	d9e8      	bls.n	8005338 <osThreadNew+0x44>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005366:	6912      	ldr	r2, [r2, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005368:	2a00      	cmp	r2, #0
 800536a:	d0e5      	beq.n	8005338 <osThreadNew+0x44>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800536c:	2b00      	cmp	r3, #0
 800536e:	d0e3      	beq.n	8005338 <osThreadNew+0x44>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005370:	9602      	str	r6, [sp, #8]
 8005372:	9201      	str	r2, [sp, #4]
 8005374:	9500      	str	r5, [sp, #0]
 8005376:	460b      	mov	r3, r1
 8005378:	4662      	mov	r2, ip
 800537a:	4621      	mov	r1, r4
 800537c:	f000 feac 	bl	80060d8 <xTaskCreateStatic>
 8005380:	9004      	str	r0, [sp, #16]
 8005382:	e7d9      	b.n	8005338 <osThreadNew+0x44>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005384:	68d3      	ldr	r3, [r2, #12]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1d6      	bne.n	8005338 <osThreadNew+0x44>
      if (mem == 0) {
 800538a:	6913      	ldr	r3, [r2, #16]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1d3      	bne.n	8005338 <osThreadNew+0x44>
 8005390:	e004      	b.n	800539c <osThreadNew+0xa8>
    prio  = (UBaseType_t)osPriorityNormal;
 8005392:	2518      	movs	r5, #24
    stack = configMINIMAL_STACK_SIZE;
 8005394:	f04f 0c80 	mov.w	ip, #128	; 0x80
    name  = &empty;
 8005398:	f10d 0417 	add.w	r4, sp, #23
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800539c:	ab04      	add	r3, sp, #16
 800539e:	9301      	str	r3, [sp, #4]
 80053a0:	9500      	str	r5, [sp, #0]
 80053a2:	460b      	mov	r3, r1
 80053a4:	fa1f f28c 	uxth.w	r2, ip
 80053a8:	4621      	mov	r1, r4
 80053aa:	f000 fecf 	bl	800614c <xTaskCreate>
 80053ae:	2801      	cmp	r0, #1
          hTask = NULL;
 80053b0:	bf1c      	itt	ne
 80053b2:	2300      	movne	r3, #0
 80053b4:	9304      	strne	r3, [sp, #16]
 80053b6:	e7bf      	b.n	8005338 <osThreadNew+0x44>
        return (NULL);
 80053b8:	2000      	movs	r0, #0
 80053ba:	e7be      	b.n	800533a <osThreadNew+0x46>
 80053bc:	20002604 	.word	0x20002604

080053c0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80053c0:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053c2:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80053c6:	b9a3      	cbnz	r3, 80053f2 <osDelay+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053c8:	f3ef 8310 	mrs	r3, PRIMASK
 80053cc:	b9a3      	cbnz	r3, 80053f8 <osDelay+0x38>
 80053ce:	4b0c      	ldr	r3, [pc, #48]	; (8005400 <osDelay+0x40>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d002      	beq.n	80053dc <osDelay+0x1c>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 80053d6:	b940      	cbnz	r0, 80053ea <osDelay+0x2a>
    stat = osOK;
 80053d8:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 80053da:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80053dc:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d0f8      	beq.n	80053d6 <osDelay+0x16>
    stat = osErrorISR;
 80053e4:	f06f 0005 	mvn.w	r0, #5
 80053e8:	e7f7      	b.n	80053da <osDelay+0x1a>
      vTaskDelay(ticks);
 80053ea:	f001 f859 	bl	80064a0 <vTaskDelay>
    stat = osOK;
 80053ee:	2000      	movs	r0, #0
 80053f0:	e7f3      	b.n	80053da <osDelay+0x1a>
    stat = osErrorISR;
 80053f2:	f06f 0005 	mvn.w	r0, #5
 80053f6:	e7f0      	b.n	80053da <osDelay+0x1a>
 80053f8:	f06f 0005 	mvn.w	r0, #5
 80053fc:	e7ed      	b.n	80053da <osDelay+0x1a>
 80053fe:	bf00      	nop
 8005400:	20002604 	.word	0x20002604

08005404 <osEventFlagsNew>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005404:	f3ef 8205 	mrs	r2, IPSR
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;

  if (!IS_IRQ()) {
 8005408:	b9f2      	cbnz	r2, 8005448 <osEventFlagsNew+0x44>
osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800540a:	b508      	push	{r3, lr}
 800540c:	4603      	mov	r3, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800540e:	f3ef 8210 	mrs	r2, PRIMASK
  if (!IS_IRQ()) {
 8005412:	b9da      	cbnz	r2, 800544c <osEventFlagsNew+0x48>
 8005414:	4a0e      	ldr	r2, [pc, #56]	; (8005450 <osEventFlagsNew+0x4c>)
 8005416:	6812      	ldr	r2, [r2, #0]
 8005418:	2a02      	cmp	r2, #2
 800541a:	d007      	beq.n	800542c <osEventFlagsNew+0x28>
    mem = -1;

    if (attr != NULL) {
 800541c:	b173      	cbz	r3, 800543c <osEventFlagsNew+0x38>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800541e:	6898      	ldr	r0, [r3, #8]
 8005420:	b150      	cbz	r0, 8005438 <osEventFlagsNew+0x34>
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	2b1f      	cmp	r3, #31
 8005426:	d80c      	bhi.n	8005442 <osEventFlagsNew+0x3e>
  hEventGroup = NULL;
 8005428:	2000      	movs	r0, #0
 800542a:	e009      	b.n	8005440 <osEventFlagsNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800542c:	f3ef 8211 	mrs	r2, BASEPRI
  if (!IS_IRQ()) {
 8005430:	2a00      	cmp	r2, #0
 8005432:	d0f3      	beq.n	800541c <osEventFlagsNew+0x18>
  hEventGroup = NULL;
 8005434:	2000      	movs	r0, #0
        hEventGroup = xEventGroupCreate();
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8005436:	e003      	b.n	8005440 <osEventFlagsNew+0x3c>
      if (mem == 0) {
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	b90b      	cbnz	r3, 8005440 <osEventFlagsNew+0x3c>
        hEventGroup = xEventGroupCreate();
 800543c:	f000 f847 	bl	80054ce <xEventGroupCreate>
}
 8005440:	bd08      	pop	{r3, pc}
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8005442:	f000 f81f 	bl	8005484 <xEventGroupCreateStatic>
 8005446:	e7fb      	b.n	8005440 <osEventFlagsNew+0x3c>
  hEventGroup = NULL;
 8005448:	2000      	movs	r0, #0
}
 800544a:	4770      	bx	lr
  hEventGroup = NULL;
 800544c:	2000      	movs	r0, #0
 800544e:	e7f7      	b.n	8005440 <osEventFlagsNew+0x3c>
 8005450:	20002604 	.word	0x20002604

08005454 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005454:	4b03      	ldr	r3, [pc, #12]	; (8005464 <vApplicationGetIdleTaskMemory+0x10>)
 8005456:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005458:	4b03      	ldr	r3, [pc, #12]	; (8005468 <vApplicationGetIdleTaskMemory+0x14>)
 800545a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800545c:	2380      	movs	r3, #128	; 0x80
 800545e:	6013      	str	r3, [r2, #0]
}
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	20002548 	.word	0x20002548
 8005468:	20002348 	.word	0x20002348

0800546c <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800546c:	4b03      	ldr	r3, [pc, #12]	; (800547c <vApplicationGetTimerTaskMemory+0x10>)
 800546e:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005470:	4b03      	ldr	r3, [pc, #12]	; (8005480 <vApplicationGetTimerTaskMemory+0x14>)
 8005472:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005474:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005478:	6013      	str	r3, [r2, #0]
}
 800547a:	4770      	bx	lr
 800547c:	20002a08 	.word	0x20002a08
 8005480:	20002608 	.word	0x20002608

08005484 <xEventGroupCreateStatic>:
	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8005484:	b180      	cbz	r0, 80054a8 <xEventGroupCreateStatic+0x24>
	{
 8005486:	b510      	push	{r4, lr}
 8005488:	b082      	sub	sp, #8
 800548a:	4604      	mov	r4, r0
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800548c:	2320      	movs	r3, #32
 800548e:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8005490:	9b01      	ldr	r3, [sp, #4]
 8005492:	2b20      	cmp	r3, #32
 8005494:	d011      	beq.n	80054ba <xEventGroupCreateStatic+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549a:	f383 8811 	msr	BASEPRI, r3
 800549e:	f3bf 8f6f 	isb	sy
 80054a2:	f3bf 8f4f 	dsb	sy
 80054a6:	e7fe      	b.n	80054a6 <xEventGroupCreateStatic+0x22>
 80054a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ac:	f383 8811 	msr	BASEPRI, r3
 80054b0:	f3bf 8f6f 	isb	sy
 80054b4:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventGroupBuffer );
 80054b8:	e7fe      	b.n	80054b8 <xEventGroupCreateStatic+0x34>
		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */

		if( pxEventBits != NULL )
		{
			pxEventBits->uxEventBits = 0;
 80054ba:	2300      	movs	r3, #0
 80054bc:	f840 3b04 	str.w	r3, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80054c0:	f000 f8f6 	bl	80056b0 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80054c4:	2301      	movs	r3, #1
 80054c6:	7723      	strb	r3, [r4, #28]
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
	}
 80054c8:	4620      	mov	r0, r4
 80054ca:	b002      	add	sp, #8
 80054cc:	bd10      	pop	{r4, pc}

080054ce <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80054ce:	b538      	push	{r3, r4, r5, lr}
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 80054d0:	2020      	movs	r0, #32
 80054d2:	f001 fdc1 	bl	8007058 <pvPortMalloc>

		if( pxEventBits != NULL )
 80054d6:	4604      	mov	r4, r0
 80054d8:	b128      	cbz	r0, 80054e6 <xEventGroupCreate+0x18>
		{
			pxEventBits->uxEventBits = 0;
 80054da:	2500      	movs	r5, #0
 80054dc:	f840 5b04 	str.w	r5, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80054e0:	f000 f8e6 	bl	80056b0 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80054e4:	7725      	strb	r5, [r4, #28]
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
	}
 80054e6:	4620      	mov	r0, r4
 80054e8:	bd38      	pop	{r3, r4, r5, pc}

080054ea <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80054ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80054ee:	b178      	cbz	r0, 8005510 <xEventGroupWaitBits+0x26>
 80054f0:	460c      	mov	r4, r1
 80054f2:	4616      	mov	r6, r2
 80054f4:	461d      	mov	r5, r3
 80054f6:	4607      	mov	r7, r0
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80054f8:	f011 487f 	ands.w	r8, r1, #4278190080	; 0xff000000
 80054fc:	d011      	beq.n	8005522 <xEventGroupWaitBits+0x38>
 80054fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005502:	f383 8811 	msr	BASEPRI, r3
 8005506:	f3bf 8f6f 	isb	sy
 800550a:	f3bf 8f4f 	dsb	sy
 800550e:	e7fe      	b.n	800550e <xEventGroupWaitBits+0x24>
 8005510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005514:	f383 8811 	msr	BASEPRI, r3
 8005518:	f3bf 8f6f 	isb	sy
 800551c:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 8005520:	e7fe      	b.n	8005520 <xEventGroupWaitBits+0x36>
	configASSERT( uxBitsToWaitFor != 0 );
 8005522:	b941      	cbnz	r1, 8005536 <xEventGroupWaitBits+0x4c>
 8005524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005528:	f383 8811 	msr	BASEPRI, r3
 800552c:	f3bf 8f6f 	isb	sy
 8005530:	f3bf 8f4f 	dsb	sy
 8005534:	e7fe      	b.n	8005534 <xEventGroupWaitBits+0x4a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005536:	f001 f96d 	bl	8006814 <xTaskGetSchedulerState>
 800553a:	b950      	cbnz	r0, 8005552 <xEventGroupWaitBits+0x68>
 800553c:	9b08      	ldr	r3, [sp, #32]
 800553e:	b143      	cbz	r3, 8005552 <xEventGroupWaitBits+0x68>
 8005540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005544:	f383 8811 	msr	BASEPRI, r3
 8005548:	f3bf 8f6f 	isb	sy
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	e7fe      	b.n	8005550 <xEventGroupWaitBits+0x66>
	}
	#endif

	vTaskSuspendAll();
 8005552:	f000 fe7b 	bl	800624c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8005556:	f8d7 9000 	ldr.w	r9, [r7]

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
 800555a:	bb55      	cbnz	r5, 80055b2 <xEventGroupWaitBits+0xc8>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800555c:	ea14 0f09 	tst.w	r4, r9
 8005560:	bf14      	ite	ne
 8005562:	2001      	movne	r0, #1
 8005564:	2000      	moveq	r0, #0
		if( xWaitConditionMet != pdFALSE )
 8005566:	bb50      	cbnz	r0, 80055be <xEventGroupWaitBits+0xd4>
		else if( xTicksToWait == ( TickType_t ) 0 )
 8005568:	9b08      	ldr	r3, [sp, #32]
 800556a:	b363      	cbz	r3, 80055c6 <xEventGroupWaitBits+0xdc>
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800556c:	2e00      	cmp	r6, #0
 800556e:	bf18      	it	ne
 8005570:	f04f 7880 	movne.w	r8, #16777216	; 0x1000000
			if( xWaitForAllBits != pdFALSE )
 8005574:	b10d      	cbz	r5, 800557a <xEventGroupWaitBits+0x90>
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8005576:	f048 6880 	orr.w	r8, r8, #67108864	; 0x4000000
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800557a:	9a08      	ldr	r2, [sp, #32]
 800557c:	ea48 0104 	orr.w	r1, r8, r4
 8005580:	1d38      	adds	r0, r7, #4
 8005582:	f001 f821 	bl	80065c8 <vTaskPlaceOnUnorderedEventList>
	xAlreadyYielded = xTaskResumeAll();
 8005586:	f000 ff09 	bl	800639c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800558a:	b948      	cbnz	r0, 80055a0 <xEventGroupWaitBits+0xb6>
			portYIELD_WITHIN_API();
 800558c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005590:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005594:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005598:	f3bf 8f4f 	dsb	sy
 800559c:	f3bf 8f6f 	isb	sy
		uxReturn = uxTaskResetEventItemValue();
 80055a0:	f001 f990 	bl	80068c4 <uxTaskResetEventItemValue>
 80055a4:	4681      	mov	r9, r0
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80055a6:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 80055aa:	d011      	beq.n	80055d0 <xEventGroupWaitBits+0xe6>
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80055ac:	f029 497f 	bic.w	r9, r9, #4278190080	; 0xff000000
	return uxReturn;
 80055b0:	e00b      	b.n	80055ca <xEventGroupWaitBits+0xe0>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80055b2:	ea34 0309 	bics.w	r3, r4, r9
 80055b6:	bf0c      	ite	eq
 80055b8:	2001      	moveq	r0, #1
 80055ba:	2000      	movne	r0, #0
 80055bc:	e7d3      	b.n	8005566 <xEventGroupWaitBits+0x7c>
			if( xClearOnExit != pdFALSE )
 80055be:	b116      	cbz	r6, 80055c6 <xEventGroupWaitBits+0xdc>
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80055c0:	ea29 0404 	bic.w	r4, r9, r4
 80055c4:	603c      	str	r4, [r7, #0]
	xAlreadyYielded = xTaskResumeAll();
 80055c6:	f000 fee9 	bl	800639c <xTaskResumeAll>
}
 80055ca:	4648      	mov	r0, r9
 80055cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			taskENTER_CRITICAL();
 80055d0:	f001 fbf8 	bl	8006dc4 <vPortEnterCritical>
				uxReturn = pxEventBits->uxEventBits;
 80055d4:	f8d7 9000 	ldr.w	r9, [r7]
	if( xWaitForAllBits == pdFALSE )
 80055d8:	b965      	cbnz	r5, 80055f4 <xEventGroupWaitBits+0x10a>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80055da:	ea14 0f09 	tst.w	r4, r9
 80055de:	bf14      	ite	ne
 80055e0:	2301      	movne	r3, #1
 80055e2:	2300      	moveq	r3, #0
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80055e4:	b11b      	cbz	r3, 80055ee <xEventGroupWaitBits+0x104>
					if( xClearOnExit != pdFALSE )
 80055e6:	b116      	cbz	r6, 80055ee <xEventGroupWaitBits+0x104>
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80055e8:	ea29 0404 	bic.w	r4, r9, r4
 80055ec:	603c      	str	r4, [r7, #0]
			taskEXIT_CRITICAL();
 80055ee:	f001 fc0b 	bl	8006e08 <vPortExitCritical>
 80055f2:	e7db      	b.n	80055ac <xEventGroupWaitBits+0xc2>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80055f4:	ea34 0309 	bics.w	r3, r4, r9
 80055f8:	bf0c      	ite	eq
 80055fa:	2301      	moveq	r3, #1
 80055fc:	2300      	movne	r3, #0
 80055fe:	e7f1      	b.n	80055e4 <xEventGroupWaitBits+0xfa>

08005600 <xEventGroupSetBits>:
	configASSERT( xEventGroup );
 8005600:	b178      	cbz	r0, 8005622 <xEventGroupSetBits+0x22>
{
 8005602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005606:	460e      	mov	r6, r1
 8005608:	4605      	mov	r5, r0
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800560a:	f011 487f 	ands.w	r8, r1, #4278190080	; 0xff000000
 800560e:	d011      	beq.n	8005634 <xEventGroupSetBits+0x34>
 8005610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005614:	f383 8811 	msr	BASEPRI, r3
 8005618:	f3bf 8f6f 	isb	sy
 800561c:	f3bf 8f4f 	dsb	sy
 8005620:	e7fe      	b.n	8005620 <xEventGroupSetBits+0x20>
 8005622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005626:	f383 8811 	msr	BASEPRI, r3
 800562a:	f3bf 8f6f 	isb	sy
 800562e:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 8005632:	e7fe      	b.n	8005632 <xEventGroupSetBits+0x32>
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005634:	f100 070c 	add.w	r7, r0, #12
	vTaskSuspendAll();
 8005638:	f000 fe08 	bl	800624c <vTaskSuspendAll>
		pxListItem = listGET_HEAD_ENTRY( pxList );
 800563c:	692c      	ldr	r4, [r5, #16]
		pxEventBits->uxEventBits |= uxBitsToSet;
 800563e:	682b      	ldr	r3, [r5, #0]
 8005640:	4333      	orrs	r3, r6
 8005642:	602b      	str	r3, [r5, #0]
		while( pxListItem != pxListEnd )
 8005644:	42a7      	cmp	r7, r4
 8005646:	d118      	bne.n	800567a <xEventGroupSetBits+0x7a>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005648:	682b      	ldr	r3, [r5, #0]
 800564a:	ea23 0308 	bic.w	r3, r3, r8
 800564e:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8005650:	f000 fea4 	bl	800639c <xTaskResumeAll>
}
 8005654:	6828      	ldr	r0, [r5, #0]
 8005656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800565a:	6829      	ldr	r1, [r5, #0]
 800565c:	ea32 0101 	bics.w	r1, r2, r1
 8005660:	d109      	bne.n	8005676 <xEventGroupSetBits+0x76>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8005662:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
					uxBitsToClear |= uxBitsWaitedFor;
 8005666:	bf18      	it	ne
 8005668:	ea48 0802 	orrne.w	r8, r8, r2
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800566c:	6829      	ldr	r1, [r5, #0]
 800566e:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8005672:	f001 f837 	bl	80066e4 <vTaskRemoveFromUnorderedEventList>
		while( pxListItem != pxListEnd )
 8005676:	42a7      	cmp	r7, r4
 8005678:	d0e6      	beq.n	8005648 <xEventGroupSetBits+0x48>
			pxNext = listGET_NEXT( pxListItem );
 800567a:	4620      	mov	r0, r4
 800567c:	6864      	ldr	r4, [r4, #4]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800567e:	6803      	ldr	r3, [r0, #0]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005680:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8005684:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8005688:	d1e7      	bne.n	800565a <xEventGroupSetBits+0x5a>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800568a:	6829      	ldr	r1, [r5, #0]
 800568c:	420a      	tst	r2, r1
 800568e:	d1e8      	bne.n	8005662 <xEventGroupSetBits+0x62>
 8005690:	e7f1      	b.n	8005676 <xEventGroupSetBits+0x76>

08005692 <vEventGroupSetBitsCallback>:
{
 8005692:	b508      	push	{r3, lr}
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8005694:	f7ff ffb4 	bl	8005600 <xEventGroupSetBits>
}
 8005698:	bd08      	pop	{r3, pc}
	...

0800569c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800569c:	b508      	push	{r3, lr}
 800569e:	4613      	mov	r3, r2
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 80056a0:	460a      	mov	r2, r1
 80056a2:	4601      	mov	r1, r0
 80056a4:	4801      	ldr	r0, [pc, #4]	; (80056ac <xEventGroupSetBitsFromISR+0x10>)
 80056a6:	f001 fb1f 	bl	8006ce8 <xTimerPendFunctionCallFromISR>

		return xReturn;
	}
 80056aa:	bd08      	pop	{r3, pc}
 80056ac:	08005693 	.word	0x08005693

080056b0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056b0:	f100 0308 	add.w	r3, r0, #8
 80056b4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80056b6:	f04f 32ff 	mov.w	r2, #4294967295
 80056ba:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056bc:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056be:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80056c0:	2300      	movs	r3, #0
 80056c2:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80056c4:	4770      	bx	lr

080056c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80056c6:	2300      	movs	r3, #0
 80056c8:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80056ca:	4770      	bx	lr

080056cc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80056cc:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80056ce:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80056d0:	689a      	ldr	r2, [r3, #8]
 80056d2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80056d4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80056d6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80056d8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80056da:	6803      	ldr	r3, [r0, #0]
 80056dc:	3301      	adds	r3, #1
 80056de:	6003      	str	r3, [r0, #0]
}
 80056e0:	4770      	bx	lr

080056e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056e2:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80056e4:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80056e6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80056ea:	d011      	beq.n	8005710 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056ec:	f100 0308 	add.w	r3, r0, #8
 80056f0:	461c      	mov	r4, r3
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	42aa      	cmp	r2, r5
 80056f8:	d9fa      	bls.n	80056f0 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80056fa:	6863      	ldr	r3, [r4, #4]
 80056fc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80056fe:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005700:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8005702:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005704:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8005706:	6803      	ldr	r3, [r0, #0]
 8005708:	3301      	adds	r3, #1
 800570a:	6003      	str	r3, [r0, #0]
}
 800570c:	bc30      	pop	{r4, r5}
 800570e:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8005710:	6904      	ldr	r4, [r0, #16]
 8005712:	e7f2      	b.n	80056fa <vListInsert+0x18>

08005714 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005714:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005716:	6841      	ldr	r1, [r0, #4]
 8005718:	6882      	ldr	r2, [r0, #8]
 800571a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800571c:	6841      	ldr	r1, [r0, #4]
 800571e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005720:	685a      	ldr	r2, [r3, #4]
 8005722:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005724:	bf04      	itt	eq
 8005726:	6882      	ldreq	r2, [r0, #8]
 8005728:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800572a:	2200      	movs	r2, #0
 800572c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	3a01      	subs	r2, #1
 8005732:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005734:	6818      	ldr	r0, [r3, #0]
}
 8005736:	4770      	bx	lr

08005738 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005738:	b510      	push	{r4, lr}
 800573a:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800573c:	f001 fb42 	bl	8006dc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005740:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8005742:	f001 fb61 	bl	8006e08 <vPortExitCritical>

	return xReturn;
}
 8005746:	fab4 f084 	clz	r0, r4
 800574a:	0940      	lsrs	r0, r0, #5
 800574c:	bd10      	pop	{r4, pc}

0800574e <prvCopyDataToQueue>:
{
 800574e:	b570      	push	{r4, r5, r6, lr}
 8005750:	4604      	mov	r4, r0
 8005752:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005754:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005756:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005758:	b95a      	cbnz	r2, 8005772 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800575a:	6803      	ldr	r3, [r0, #0]
 800575c:	b11b      	cbz	r3, 8005766 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 800575e:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005760:	3601      	adds	r6, #1
 8005762:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8005764:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005766:	6840      	ldr	r0, [r0, #4]
 8005768:	f001 f864 	bl	8006834 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800576c:	2300      	movs	r3, #0
 800576e:	6063      	str	r3, [r4, #4]
 8005770:	e7f6      	b.n	8005760 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8005772:	b96d      	cbnz	r5, 8005790 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005774:	6880      	ldr	r0, [r0, #8]
 8005776:	f001 fd61 	bl	800723c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800577a:	68a3      	ldr	r3, [r4, #8]
 800577c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800577e:	4413      	add	r3, r2
 8005780:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005782:	6862      	ldr	r2, [r4, #4]
 8005784:	4293      	cmp	r3, r2
 8005786:	d319      	bcc.n	80057bc <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005788:	6823      	ldr	r3, [r4, #0]
 800578a:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800578c:	4628      	mov	r0, r5
 800578e:	e7e7      	b.n	8005760 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005790:	68c0      	ldr	r0, [r0, #12]
 8005792:	f001 fd53 	bl	800723c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005796:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005798:	4251      	negs	r1, r2
 800579a:	68e3      	ldr	r3, [r4, #12]
 800579c:	1a9b      	subs	r3, r3, r2
 800579e:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057a0:	6822      	ldr	r2, [r4, #0]
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d202      	bcs.n	80057ac <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80057a6:	6863      	ldr	r3, [r4, #4]
 80057a8:	440b      	add	r3, r1
 80057aa:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80057ac:	2d02      	cmp	r5, #2
 80057ae:	d001      	beq.n	80057b4 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 80057b0:	2000      	movs	r0, #0
 80057b2:	e7d5      	b.n	8005760 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80057b4:	b126      	cbz	r6, 80057c0 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 80057b6:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 80057b8:	2000      	movs	r0, #0
 80057ba:	e7d1      	b.n	8005760 <prvCopyDataToQueue+0x12>
 80057bc:	4628      	mov	r0, r5
 80057be:	e7cf      	b.n	8005760 <prvCopyDataToQueue+0x12>
 80057c0:	2000      	movs	r0, #0
 80057c2:	e7cd      	b.n	8005760 <prvCopyDataToQueue+0x12>

080057c4 <prvCopyDataFromQueue>:
{
 80057c4:	b508      	push	{r3, lr}
 80057c6:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80057c8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80057ca:	b162      	cbz	r2, 80057e6 <prvCopyDataFromQueue+0x22>
 80057cc:	4608      	mov	r0, r1
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80057ce:	68d9      	ldr	r1, [r3, #12]
 80057d0:	4411      	add	r1, r2
 80057d2:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80057d4:	f8d3 c004 	ldr.w	ip, [r3, #4]
 80057d8:	4561      	cmp	r1, ip
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80057da:	bf24      	itt	cs
 80057dc:	6819      	ldrcs	r1, [r3, #0]
 80057de:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80057e0:	68d9      	ldr	r1, [r3, #12]
 80057e2:	f001 fd2b 	bl	800723c <memcpy>
}
 80057e6:	bd08      	pop	{r3, pc}

080057e8 <prvUnlockQueue>:
{
 80057e8:	b570      	push	{r4, r5, r6, lr}
 80057ea:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 80057ec:	f001 faea 	bl	8006dc4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80057f0:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 80057f4:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057f6:	2c00      	cmp	r4, #0
 80057f8:	dd0f      	ble.n	800581a <prvUnlockQueue+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057fa:	f105 0624 	add.w	r6, r5, #36	; 0x24
 80057fe:	e002      	b.n	8005806 <prvUnlockQueue+0x1e>
			--cTxLock;
 8005800:	3c01      	subs	r4, #1
 8005802:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005804:	b14c      	cbz	r4, 800581a <prvUnlockQueue+0x32>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005806:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005808:	b13b      	cbz	r3, 800581a <prvUnlockQueue+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800580a:	4630      	mov	r0, r6
 800580c:	f000 ff26 	bl	800665c <xTaskRemoveFromEventList>
 8005810:	2800      	cmp	r0, #0
 8005812:	d0f5      	beq.n	8005800 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8005814:	f000 fff8 	bl	8006808 <vTaskMissedYield>
 8005818:	e7f2      	b.n	8005800 <prvUnlockQueue+0x18>
		pxQueue->cTxLock = queueUNLOCKED;
 800581a:	23ff      	movs	r3, #255	; 0xff
 800581c:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8005820:	f001 faf2 	bl	8006e08 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005824:	f001 face 	bl	8006dc4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005828:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800582c:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800582e:	2c00      	cmp	r4, #0
 8005830:	dd0f      	ble.n	8005852 <prvUnlockQueue+0x6a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005832:	f105 0610 	add.w	r6, r5, #16
 8005836:	e002      	b.n	800583e <prvUnlockQueue+0x56>
				--cRxLock;
 8005838:	3c01      	subs	r4, #1
 800583a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800583c:	b14c      	cbz	r4, 8005852 <prvUnlockQueue+0x6a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800583e:	692b      	ldr	r3, [r5, #16]
 8005840:	b13b      	cbz	r3, 8005852 <prvUnlockQueue+0x6a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005842:	4630      	mov	r0, r6
 8005844:	f000 ff0a 	bl	800665c <xTaskRemoveFromEventList>
 8005848:	2800      	cmp	r0, #0
 800584a:	d0f5      	beq.n	8005838 <prvUnlockQueue+0x50>
					vTaskMissedYield();
 800584c:	f000 ffdc 	bl	8006808 <vTaskMissedYield>
 8005850:	e7f2      	b.n	8005838 <prvUnlockQueue+0x50>
		pxQueue->cRxLock = queueUNLOCKED;
 8005852:	23ff      	movs	r3, #255	; 0xff
 8005854:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8005858:	f001 fad6 	bl	8006e08 <vPortExitCritical>
}
 800585c:	bd70      	pop	{r4, r5, r6, pc}

0800585e <xQueueGenericReset>:
{
 800585e:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8005860:	b1e0      	cbz	r0, 800589c <xQueueGenericReset+0x3e>
 8005862:	460d      	mov	r5, r1
 8005864:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8005866:	f001 faad 	bl	8006dc4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800586a:	6822      	ldr	r2, [r4, #0]
 800586c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800586e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005870:	fb01 f303 	mul.w	r3, r1, r3
 8005874:	18d0      	adds	r0, r2, r3
 8005876:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005878:	2000      	movs	r0, #0
 800587a:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800587c:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800587e:	1a5b      	subs	r3, r3, r1
 8005880:	4413      	add	r3, r2
 8005882:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005884:	23ff      	movs	r3, #255	; 0xff
 8005886:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800588a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800588e:	b9fd      	cbnz	r5, 80058d0 <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005890:	6923      	ldr	r3, [r4, #16]
 8005892:	b963      	cbnz	r3, 80058ae <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8005894:	f001 fab8 	bl	8006e08 <vPortExitCritical>
}
 8005898:	2001      	movs	r0, #1
 800589a:	bd38      	pop	{r3, r4, r5, pc}
 800589c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a0:	f383 8811 	msr	BASEPRI, r3
 80058a4:	f3bf 8f6f 	isb	sy
 80058a8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80058ac:	e7fe      	b.n	80058ac <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058ae:	f104 0010 	add.w	r0, r4, #16
 80058b2:	f000 fed3 	bl	800665c <xTaskRemoveFromEventList>
 80058b6:	2800      	cmp	r0, #0
 80058b8:	d0ec      	beq.n	8005894 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 80058ba:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80058be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058c2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80058c6:	f3bf 8f4f 	dsb	sy
 80058ca:	f3bf 8f6f 	isb	sy
 80058ce:	e7e1      	b.n	8005894 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80058d0:	f104 0010 	add.w	r0, r4, #16
 80058d4:	f7ff feec 	bl	80056b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80058d8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80058dc:	f7ff fee8 	bl	80056b0 <vListInitialise>
 80058e0:	e7d8      	b.n	8005894 <xQueueGenericReset+0x36>

080058e2 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80058e2:	b940      	cbnz	r0, 80058f6 <xQueueGenericCreateStatic+0x14>
 80058e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e8:	f383 8811 	msr	BASEPRI, r3
 80058ec:	f3bf 8f6f 	isb	sy
 80058f0:	f3bf 8f4f 	dsb	sy
 80058f4:	e7fe      	b.n	80058f4 <xQueueGenericCreateStatic+0x12>
	{
 80058f6:	b510      	push	{r4, lr}
 80058f8:	b082      	sub	sp, #8
 80058fa:	461c      	mov	r4, r3
 80058fc:	4603      	mov	r3, r0
		configASSERT( pxStaticQueue != NULL );
 80058fe:	b154      	cbz	r4, 8005916 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005900:	b192      	cbz	r2, 8005928 <xQueueGenericCreateStatic+0x46>
 8005902:	b9d9      	cbnz	r1, 800593c <xQueueGenericCreateStatic+0x5a>
 8005904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005908:	f383 8811 	msr	BASEPRI, r3
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	f3bf 8f4f 	dsb	sy
 8005914:	e7fe      	b.n	8005914 <xQueueGenericCreateStatic+0x32>
 8005916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591a:	f383 8811 	msr	BASEPRI, r3
 800591e:	f3bf 8f6f 	isb	sy
 8005922:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8005926:	e7fe      	b.n	8005926 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005928:	b339      	cbz	r1, 800597a <xQueueGenericCreateStatic+0x98>
 800592a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592e:	f383 8811 	msr	BASEPRI, r3
 8005932:	f3bf 8f6f 	isb	sy
 8005936:	f3bf 8f4f 	dsb	sy
 800593a:	e7fe      	b.n	800593a <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800593c:	2050      	movs	r0, #80	; 0x50
 800593e:	9001      	str	r0, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005940:	9801      	ldr	r0, [sp, #4]
 8005942:	2850      	cmp	r0, #80	; 0x50
 8005944:	d008      	beq.n	8005958 <xQueueGenericCreateStatic+0x76>
 8005946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594a:	f383 8811 	msr	BASEPRI, r3
 800594e:	f3bf 8f6f 	isb	sy
 8005952:	f3bf 8f4f 	dsb	sy
 8005956:	e7fe      	b.n	8005956 <xQueueGenericCreateStatic+0x74>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005958:	2001      	movs	r0, #1
 800595a:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800595e:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8005960:	63e3      	str	r3, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005962:	6421      	str	r1, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005964:	2101      	movs	r1, #1
 8005966:	4620      	mov	r0, r4
 8005968:	f7ff ff79 	bl	800585e <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800596c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8005970:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8005974:	4620      	mov	r0, r4
 8005976:	b002      	add	sp, #8
 8005978:	bd10      	pop	{r4, pc}
			volatile size_t xSize = sizeof( StaticQueue_t );
 800597a:	2250      	movs	r2, #80	; 0x50
 800597c:	9201      	str	r2, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800597e:	9a01      	ldr	r2, [sp, #4]
 8005980:	2a50      	cmp	r2, #80	; 0x50
 8005982:	d1e0      	bne.n	8005946 <xQueueGenericCreateStatic+0x64>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005984:	2201      	movs	r2, #1
 8005986:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800598a:	4622      	mov	r2, r4
 800598c:	e7e7      	b.n	800595e <xQueueGenericCreateStatic+0x7c>

0800598e <xQueueGenericSend>:
{
 800598e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005992:	b085      	sub	sp, #20
 8005994:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8005996:	b188      	cbz	r0, 80059bc <xQueueGenericSend+0x2e>
 8005998:	460e      	mov	r6, r1
 800599a:	461d      	mov	r5, r3
 800599c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800599e:	b1b1      	cbz	r1, 80059ce <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059a0:	2d02      	cmp	r5, #2
 80059a2:	d120      	bne.n	80059e6 <xQueueGenericSend+0x58>
 80059a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d01d      	beq.n	80059e6 <xQueueGenericSend+0x58>
 80059aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ae:	f383 8811 	msr	BASEPRI, r3
 80059b2:	f3bf 8f6f 	isb	sy
 80059b6:	f3bf 8f4f 	dsb	sy
 80059ba:	e7fe      	b.n	80059ba <xQueueGenericSend+0x2c>
 80059bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c0:	f383 8811 	msr	BASEPRI, r3
 80059c4:	f3bf 8f6f 	isb	sy
 80059c8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80059cc:	e7fe      	b.n	80059cc <xQueueGenericSend+0x3e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059ce:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d0e5      	beq.n	80059a0 <xQueueGenericSend+0x12>
 80059d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d8:	f383 8811 	msr	BASEPRI, r3
 80059dc:	f3bf 8f6f 	isb	sy
 80059e0:	f3bf 8f4f 	dsb	sy
 80059e4:	e7fe      	b.n	80059e4 <xQueueGenericSend+0x56>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059e6:	f000 ff15 	bl	8006814 <xTaskGetSchedulerState>
 80059ea:	b950      	cbnz	r0, 8005a02 <xQueueGenericSend+0x74>
 80059ec:	9b01      	ldr	r3, [sp, #4]
 80059ee:	b163      	cbz	r3, 8005a0a <xQueueGenericSend+0x7c>
 80059f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f4:	f383 8811 	msr	BASEPRI, r3
 80059f8:	f3bf 8f6f 	isb	sy
 80059fc:	f3bf 8f4f 	dsb	sy
 8005a00:	e7fe      	b.n	8005a00 <xQueueGenericSend+0x72>
 8005a02:	f04f 0800 	mov.w	r8, #0
		prvLockQueue( pxQueue );
 8005a06:	2700      	movs	r7, #0
 8005a08:	e03a      	b.n	8005a80 <xQueueGenericSend+0xf2>
 8005a0a:	f04f 0800 	mov.w	r8, #0
 8005a0e:	e7fa      	b.n	8005a06 <xQueueGenericSend+0x78>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a10:	462a      	mov	r2, r5
 8005a12:	4631      	mov	r1, r6
 8005a14:	4620      	mov	r0, r4
 8005a16:	f7ff fe9a 	bl	800574e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a1c:	b983      	cbnz	r3, 8005a40 <xQueueGenericSend+0xb2>
					else if( xYieldRequired != pdFALSE )
 8005a1e:	b148      	cbz	r0, 8005a34 <xQueueGenericSend+0xa6>
						queueYIELD_IF_USING_PREEMPTION();
 8005a20:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005a24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a28:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005a2c:	f3bf 8f4f 	dsb	sy
 8005a30:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8005a34:	f001 f9e8 	bl	8006e08 <vPortExitCritical>
				return pdPASS;
 8005a38:	2001      	movs	r0, #1
}
 8005a3a:	b005      	add	sp, #20
 8005a3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a40:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005a44:	f000 fe0a 	bl	800665c <xTaskRemoveFromEventList>
 8005a48:	2800      	cmp	r0, #0
 8005a4a:	d0f3      	beq.n	8005a34 <xQueueGenericSend+0xa6>
							queueYIELD_IF_USING_PREEMPTION();
 8005a4c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005a50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a54:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005a58:	f3bf 8f4f 	dsb	sy
 8005a5c:	f3bf 8f6f 	isb	sy
 8005a60:	e7e8      	b.n	8005a34 <xQueueGenericSend+0xa6>
					taskEXIT_CRITICAL();
 8005a62:	f001 f9d1 	bl	8006e08 <vPortExitCritical>
					return errQUEUE_FULL;
 8005a66:	2000      	movs	r0, #0
 8005a68:	e7e7      	b.n	8005a3a <xQueueGenericSend+0xac>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a6a:	a802      	add	r0, sp, #8
 8005a6c:	f000 fe7e 	bl	800676c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a70:	e014      	b.n	8005a9c <xQueueGenericSend+0x10e>
				prvUnlockQueue( pxQueue );
 8005a72:	4620      	mov	r0, r4
 8005a74:	f7ff feb8 	bl	80057e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a78:	f000 fc90 	bl	800639c <xTaskResumeAll>
 8005a7c:	f04f 0801 	mov.w	r8, #1
		taskENTER_CRITICAL();
 8005a80:	f001 f9a0 	bl	8006dc4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a84:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005a86:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d3c1      	bcc.n	8005a10 <xQueueGenericSend+0x82>
 8005a8c:	2d02      	cmp	r5, #2
 8005a8e:	d0bf      	beq.n	8005a10 <xQueueGenericSend+0x82>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a90:	9b01      	ldr	r3, [sp, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d0e5      	beq.n	8005a62 <xQueueGenericSend+0xd4>
				else if( xEntryTimeSet == pdFALSE )
 8005a96:	f1b8 0f00 	cmp.w	r8, #0
 8005a9a:	d0e6      	beq.n	8005a6a <xQueueGenericSend+0xdc>
		taskEXIT_CRITICAL();
 8005a9c:	f001 f9b4 	bl	8006e08 <vPortExitCritical>
		vTaskSuspendAll();
 8005aa0:	f000 fbd4 	bl	800624c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005aa4:	f001 f98e 	bl	8006dc4 <vPortEnterCritical>
 8005aa8:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8005aac:	b252      	sxtb	r2, r2
 8005aae:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005ab2:	bf08      	it	eq
 8005ab4:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8005ab8:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8005abc:	b252      	sxtb	r2, r2
 8005abe:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005ac2:	bf08      	it	eq
 8005ac4:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8005ac8:	f001 f99e 	bl	8006e08 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005acc:	a901      	add	r1, sp, #4
 8005ace:	a802      	add	r0, sp, #8
 8005ad0:	f000 fe58 	bl	8006784 <xTaskCheckForTimeOut>
 8005ad4:	bb00      	cbnz	r0, 8005b18 <xQueueGenericSend+0x18a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ad6:	f001 f975 	bl	8006dc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005ada:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
 8005ade:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8005ae2:	f001 f991 	bl	8006e08 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005ae6:	45c1      	cmp	r9, r8
 8005ae8:	d1c3      	bne.n	8005a72 <xQueueGenericSend+0xe4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005aea:	9901      	ldr	r1, [sp, #4]
 8005aec:	f104 0010 	add.w	r0, r4, #16
 8005af0:	f000 fd52 	bl	8006598 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005af4:	4620      	mov	r0, r4
 8005af6:	f7ff fe77 	bl	80057e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005afa:	f000 fc4f 	bl	800639c <xTaskResumeAll>
 8005afe:	2800      	cmp	r0, #0
 8005b00:	d1bc      	bne.n	8005a7c <xQueueGenericSend+0xee>
					portYIELD_WITHIN_API();
 8005b02:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005b06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b0a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005b0e:	f3bf 8f4f 	dsb	sy
 8005b12:	f3bf 8f6f 	isb	sy
 8005b16:	e7b1      	b.n	8005a7c <xQueueGenericSend+0xee>
			prvUnlockQueue( pxQueue );
 8005b18:	4620      	mov	r0, r4
 8005b1a:	f7ff fe65 	bl	80057e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b1e:	f000 fc3d 	bl	800639c <xTaskResumeAll>
			return errQUEUE_FULL;
 8005b22:	2000      	movs	r0, #0
 8005b24:	e789      	b.n	8005a3a <xQueueGenericSend+0xac>

08005b26 <xQueueGenericSendFromISR>:
{
 8005b26:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8005b2a:	b190      	cbz	r0, 8005b52 <xQueueGenericSendFromISR+0x2c>
 8005b2c:	460f      	mov	r7, r1
 8005b2e:	4616      	mov	r6, r2
 8005b30:	461c      	mov	r4, r3
 8005b32:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b34:	b1b1      	cbz	r1, 8005b64 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b36:	2c02      	cmp	r4, #2
 8005b38:	d120      	bne.n	8005b7c <xQueueGenericSendFromISR+0x56>
 8005b3a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d01d      	beq.n	8005b7c <xQueueGenericSendFromISR+0x56>
 8005b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b44:	f383 8811 	msr	BASEPRI, r3
 8005b48:	f3bf 8f6f 	isb	sy
 8005b4c:	f3bf 8f4f 	dsb	sy
 8005b50:	e7fe      	b.n	8005b50 <xQueueGenericSendFromISR+0x2a>
 8005b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b56:	f383 8811 	msr	BASEPRI, r3
 8005b5a:	f3bf 8f6f 	isb	sy
 8005b5e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005b62:	e7fe      	b.n	8005b62 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b64:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d0e5      	beq.n	8005b36 <xQueueGenericSendFromISR+0x10>
 8005b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6e:	f383 8811 	msr	BASEPRI, r3
 8005b72:	f3bf 8f6f 	isb	sy
 8005b76:	f3bf 8f4f 	dsb	sy
 8005b7a:	e7fe      	b.n	8005b7a <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b7c:	f001 fa0e 	bl	8006f9c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005b80:	f3ef 8911 	mrs	r9, BASEPRI
 8005b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b88:	f383 8811 	msr	BASEPRI, r3
 8005b8c:	f3bf 8f6f 	isb	sy
 8005b90:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b94:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8005b96:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d306      	bcc.n	8005baa <xQueueGenericSendFromISR+0x84>
 8005b9c:	2c02      	cmp	r4, #2
 8005b9e:	d004      	beq.n	8005baa <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8005ba0:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ba2:	f389 8811 	msr	BASEPRI, r9
}
 8005ba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8005baa:	f895 8045 	ldrb.w	r8, [r5, #69]	; 0x45
 8005bae:	fa4f f888 	sxtb.w	r8, r8
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005bb2:	4622      	mov	r2, r4
 8005bb4:	4639      	mov	r1, r7
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	f7ff fdc9 	bl	800574e <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8005bbc:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005bc0:	d006      	beq.n	8005bd0 <xQueueGenericSendFromISR+0xaa>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005bc2:	f108 0301 	add.w	r3, r8, #1
 8005bc6:	b25b      	sxtb	r3, r3
 8005bc8:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 8005bcc:	2001      	movs	r0, #1
 8005bce:	e7e8      	b.n	8005ba2 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bd0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005bd2:	b90b      	cbnz	r3, 8005bd8 <xQueueGenericSendFromISR+0xb2>
			xReturn = pdPASS;
 8005bd4:	2001      	movs	r0, #1
 8005bd6:	e7e4      	b.n	8005ba2 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bd8:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8005bdc:	f000 fd3e 	bl	800665c <xTaskRemoveFromEventList>
 8005be0:	b118      	cbz	r0, 8005bea <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 8005be2:	b126      	cbz	r6, 8005bee <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005be4:	2001      	movs	r0, #1
 8005be6:	6030      	str	r0, [r6, #0]
 8005be8:	e7db      	b.n	8005ba2 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8005bea:	2001      	movs	r0, #1
 8005bec:	e7d9      	b.n	8005ba2 <xQueueGenericSendFromISR+0x7c>
 8005bee:	2001      	movs	r0, #1
 8005bf0:	e7d7      	b.n	8005ba2 <xQueueGenericSendFromISR+0x7c>

08005bf2 <xQueueReceive>:
{
 8005bf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8005bfa:	b180      	cbz	r0, 8005c1e <xQueueReceive+0x2c>
 8005bfc:	460e      	mov	r6, r1
 8005bfe:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c00:	b1b1      	cbz	r1, 8005c30 <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c02:	f000 fe07 	bl	8006814 <xTaskGetSchedulerState>
 8005c06:	b9f8      	cbnz	r0, 8005c48 <xQueueReceive+0x56>
 8005c08:	9b01      	ldr	r3, [sp, #4]
 8005c0a:	b30b      	cbz	r3, 8005c50 <xQueueReceive+0x5e>
	__asm volatile
 8005c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c10:	f383 8811 	msr	BASEPRI, r3
 8005c14:	f3bf 8f6f 	isb	sy
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	e7fe      	b.n	8005c1c <xQueueReceive+0x2a>
 8005c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c22:	f383 8811 	msr	BASEPRI, r3
 8005c26:	f3bf 8f6f 	isb	sy
 8005c2a:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8005c2e:	e7fe      	b.n	8005c2e <xQueueReceive+0x3c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c30:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d0e5      	beq.n	8005c02 <xQueueReceive+0x10>
 8005c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3a:	f383 8811 	msr	BASEPRI, r3
 8005c3e:	f3bf 8f6f 	isb	sy
 8005c42:	f3bf 8f4f 	dsb	sy
 8005c46:	e7fe      	b.n	8005c46 <xQueueReceive+0x54>
 8005c48:	f04f 0800 	mov.w	r8, #0
		prvLockQueue( pxQueue );
 8005c4c:	2700      	movs	r7, #0
 8005c4e:	e03b      	b.n	8005cc8 <xQueueReceive+0xd6>
 8005c50:	f04f 0800 	mov.w	r8, #0
 8005c54:	e7fa      	b.n	8005c4c <xQueueReceive+0x5a>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005c56:	4631      	mov	r1, r6
 8005c58:	4620      	mov	r0, r4
 8005c5a:	f7ff fdb3 	bl	80057c4 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005c5e:	3d01      	subs	r5, #1
 8005c60:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c62:	6923      	ldr	r3, [r4, #16]
 8005c64:	b92b      	cbnz	r3, 8005c72 <xQueueReceive+0x80>
				taskEXIT_CRITICAL();
 8005c66:	f001 f8cf 	bl	8006e08 <vPortExitCritical>
				return pdPASS;
 8005c6a:	2001      	movs	r0, #1
}
 8005c6c:	b004      	add	sp, #16
 8005c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c72:	f104 0010 	add.w	r0, r4, #16
 8005c76:	f000 fcf1 	bl	800665c <xTaskRemoveFromEventList>
 8005c7a:	2800      	cmp	r0, #0
 8005c7c:	d0f3      	beq.n	8005c66 <xQueueReceive+0x74>
						queueYIELD_IF_USING_PREEMPTION();
 8005c7e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c86:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	f3bf 8f6f 	isb	sy
 8005c92:	e7e8      	b.n	8005c66 <xQueueReceive+0x74>
					taskEXIT_CRITICAL();
 8005c94:	f001 f8b8 	bl	8006e08 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8005c98:	2000      	movs	r0, #0
 8005c9a:	e7e7      	b.n	8005c6c <xQueueReceive+0x7a>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c9c:	a802      	add	r0, sp, #8
 8005c9e:	f000 fd65 	bl	800676c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ca2:	e01c      	b.n	8005cde <xQueueReceive+0xec>
				prvUnlockQueue( pxQueue );
 8005ca4:	4620      	mov	r0, r4
 8005ca6:	f7ff fd9f 	bl	80057e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005caa:	f000 fb77 	bl	800639c <xTaskResumeAll>
 8005cae:	e009      	b.n	8005cc4 <xQueueReceive+0xd2>
			prvUnlockQueue( pxQueue );
 8005cb0:	4620      	mov	r0, r4
 8005cb2:	f7ff fd99 	bl	80057e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005cb6:	f000 fb71 	bl	800639c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cba:	4620      	mov	r0, r4
 8005cbc:	f7ff fd3c 	bl	8005738 <prvIsQueueEmpty>
 8005cc0:	2800      	cmp	r0, #0
 8005cc2:	d146      	bne.n	8005d52 <xQueueReceive+0x160>
 8005cc4:	f04f 0801 	mov.w	r8, #1
		taskENTER_CRITICAL();
 8005cc8:	f001 f87c 	bl	8006dc4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ccc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cce:	2d00      	cmp	r5, #0
 8005cd0:	d1c1      	bne.n	8005c56 <xQueueReceive+0x64>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005cd2:	9b01      	ldr	r3, [sp, #4]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d0dd      	beq.n	8005c94 <xQueueReceive+0xa2>
				else if( xEntryTimeSet == pdFALSE )
 8005cd8:	f1b8 0f00 	cmp.w	r8, #0
 8005cdc:	d0de      	beq.n	8005c9c <xQueueReceive+0xaa>
		taskEXIT_CRITICAL();
 8005cde:	f001 f893 	bl	8006e08 <vPortExitCritical>
		vTaskSuspendAll();
 8005ce2:	f000 fab3 	bl	800624c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ce6:	f001 f86d 	bl	8006dc4 <vPortEnterCritical>
 8005cea:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005cee:	b25b      	sxtb	r3, r3
 8005cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf4:	bf08      	it	eq
 8005cf6:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8005cfa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005cfe:	b25b      	sxtb	r3, r3
 8005d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d04:	bf08      	it	eq
 8005d06:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8005d0a:	f001 f87d 	bl	8006e08 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d0e:	a901      	add	r1, sp, #4
 8005d10:	a802      	add	r0, sp, #8
 8005d12:	f000 fd37 	bl	8006784 <xTaskCheckForTimeOut>
 8005d16:	2800      	cmp	r0, #0
 8005d18:	d1ca      	bne.n	8005cb0 <xQueueReceive+0xbe>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d1a:	4620      	mov	r0, r4
 8005d1c:	f7ff fd0c 	bl	8005738 <prvIsQueueEmpty>
 8005d20:	2800      	cmp	r0, #0
 8005d22:	d0bf      	beq.n	8005ca4 <xQueueReceive+0xb2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d24:	9901      	ldr	r1, [sp, #4]
 8005d26:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005d2a:	f000 fc35 	bl	8006598 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005d2e:	4620      	mov	r0, r4
 8005d30:	f7ff fd5a 	bl	80057e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d34:	f000 fb32 	bl	800639c <xTaskResumeAll>
 8005d38:	2800      	cmp	r0, #0
 8005d3a:	d1c3      	bne.n	8005cc4 <xQueueReceive+0xd2>
					portYIELD_WITHIN_API();
 8005d3c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005d40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d44:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005d48:	f3bf 8f4f 	dsb	sy
 8005d4c:	f3bf 8f6f 	isb	sy
 8005d50:	e7b8      	b.n	8005cc4 <xQueueReceive+0xd2>
				return errQUEUE_EMPTY;
 8005d52:	2000      	movs	r0, #0
 8005d54:	e78a      	b.n	8005c6c <xQueueReceive+0x7a>
	...

08005d58 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005d58:	b410      	push	{r4}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d5a:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005d5c:	4c07      	ldr	r4, [pc, #28]	; (8005d7c <vQueueAddToRegistry+0x24>)
 8005d5e:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
 8005d62:	b122      	cbz	r2, 8005d6e <vQueueAddToRegistry+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d64:	3301      	adds	r3, #1
 8005d66:	2b08      	cmp	r3, #8
 8005d68:	d1f9      	bne.n	8005d5e <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005d6a:	bc10      	pop	{r4}
 8005d6c:	4770      	bx	lr
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005d6e:	4a03      	ldr	r2, [pc, #12]	; (8005d7c <vQueueAddToRegistry+0x24>)
 8005d70:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005d74:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005d78:	6058      	str	r0, [r3, #4]
				break;
 8005d7a:	e7f6      	b.n	8005d6a <vQueueAddToRegistry+0x12>
 8005d7c:	20002ac4 	.word	0x20002ac4

08005d80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d80:	b570      	push	{r4, r5, r6, lr}
 8005d82:	4604      	mov	r4, r0
 8005d84:	460d      	mov	r5, r1
 8005d86:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005d88:	f001 f81c 	bl	8006dc4 <vPortEnterCritical>
 8005d8c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005d90:	b25b      	sxtb	r3, r3
 8005d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d96:	bf04      	itt	eq
 8005d98:	2300      	moveq	r3, #0
 8005d9a:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8005d9e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005da2:	b25b      	sxtb	r3, r3
 8005da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da8:	bf04      	itt	eq
 8005daa:	2300      	moveq	r3, #0
 8005dac:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8005db0:	f001 f82a 	bl	8006e08 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005db4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005db6:	b11b      	cbz	r3, 8005dc0 <vQueueWaitForMessageRestricted+0x40>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005db8:	4620      	mov	r0, r4
 8005dba:	f7ff fd15 	bl	80057e8 <prvUnlockQueue>
	}
 8005dbe:	bd70      	pop	{r4, r5, r6, pc}
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005dc0:	4632      	mov	r2, r6
 8005dc2:	4629      	mov	r1, r5
 8005dc4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005dc8:	f000 fc2a 	bl	8006620 <vTaskPlaceOnEventListRestricted>
 8005dcc:	e7f4      	b.n	8005db8 <vQueueWaitForMessageRestricted+0x38>
	...

08005dd0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dd0:	4b08      	ldr	r3, [pc, #32]	; (8005df4 <prvResetNextTaskUnblockTime+0x24>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	b923      	cbnz	r3, 8005de2 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005dd8:	4b07      	ldr	r3, [pc, #28]	; (8005df8 <prvResetNextTaskUnblockTime+0x28>)
 8005dda:	f04f 32ff 	mov.w	r2, #4294967295
 8005dde:	601a      	str	r2, [r3, #0]
 8005de0:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005de2:	4b04      	ldr	r3, [pc, #16]	; (8005df4 <prvResetNextTaskUnblockTime+0x24>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	685a      	ldr	r2, [r3, #4]
 8005dec:	4b02      	ldr	r3, [pc, #8]	; (8005df8 <prvResetNextTaskUnblockTime+0x28>)
 8005dee:	601a      	str	r2, [r3, #0]
	}
}
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	20002b08 	.word	0x20002b08
 8005df8:	20002fb0 	.word	0x20002fb0

08005dfc <prvInitialiseNewTask>:
{
 8005dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e00:	4606      	mov	r6, r0
 8005e02:	4689      	mov	r9, r1
 8005e04:	461f      	mov	r7, r3
 8005e06:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8005e0a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005e0c:	0095      	lsls	r5, r2, #2
 8005e0e:	462a      	mov	r2, r5
 8005e10:	21a5      	movs	r1, #165	; 0xa5
 8005e12:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005e14:	f001 fa20 	bl	8007258 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005e18:	3d04      	subs	r5, #4
 8005e1a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005e1c:	441d      	add	r5, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005e1e:	f025 0507 	bic.w	r5, r5, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e22:	f109 3cff 	add.w	ip, r9, #4294967295
 8005e26:	f104 0e33 	add.w	lr, r4, #51	; 0x33
 8005e2a:	f109 010f 	add.w	r1, r9, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005e2e:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 8005e32:	f80e 2f01 	strb.w	r2, [lr, #1]!
		if( pcName[ x ] == 0x00 )
 8005e36:	b10a      	cbz	r2, 8005e3c <prvInitialiseNewTask+0x40>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e38:	458c      	cmp	ip, r1
 8005e3a:	d1f8      	bne.n	8005e2e <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005e3c:	f04f 0a00 	mov.w	sl, #0
 8005e40:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005e44:	9b08      	ldr	r3, [sp, #32]
 8005e46:	2b37      	cmp	r3, #55	; 0x37
 8005e48:	bf28      	it	cs
 8005e4a:	2337      	movcs	r3, #55	; 0x37
 8005e4c:	4699      	mov	r9, r3
	pxNewTCB->uxPriority = uxPriority;
 8005e4e:	62e3      	str	r3, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8005e50:	64e3      	str	r3, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005e52:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005e56:	1d20      	adds	r0, r4, #4
 8005e58:	f7ff fc35 	bl	80056c6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005e5c:	f104 0018 	add.w	r0, r4, #24
 8005e60:	f7ff fc31 	bl	80056c6 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005e64:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e66:	f1c9 0338 	rsb	r3, r9, #56	; 0x38
 8005e6a:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005e6c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8005e6e:	f8c4 a0b4 	str.w	sl, [r4, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005e72:	f884 a0b8 	strb.w	sl, [r4, #184]	; 0xb8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005e76:	2260      	movs	r2, #96	; 0x60
 8005e78:	4651      	mov	r1, sl
 8005e7a:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8005e7e:	f001 f9eb 	bl	8007258 <memset>
 8005e82:	4b09      	ldr	r3, [pc, #36]	; (8005ea8 <prvInitialiseNewTask+0xac>)
 8005e84:	65a3      	str	r3, [r4, #88]	; 0x58
 8005e86:	4b09      	ldr	r3, [pc, #36]	; (8005eac <prvInitialiseNewTask+0xb0>)
 8005e88:	65e3      	str	r3, [r4, #92]	; 0x5c
 8005e8a:	4b09      	ldr	r3, [pc, #36]	; (8005eb0 <prvInitialiseNewTask+0xb4>)
 8005e8c:	6623      	str	r3, [r4, #96]	; 0x60
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005e8e:	463a      	mov	r2, r7
 8005e90:	4631      	mov	r1, r6
 8005e92:	4628      	mov	r0, r5
 8005e94:	f000 ff6c 	bl	8006d70 <pxPortInitialiseStack>
 8005e98:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8005e9a:	f1b8 0f00 	cmp.w	r8, #0
 8005e9e:	d001      	beq.n	8005ea4 <prvInitialiseNewTask+0xa8>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005ea0:	f8c8 4000 	str.w	r4, [r8]
}
 8005ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ea8:	08007904 	.word	0x08007904
 8005eac:	08007924 	.word	0x08007924
 8005eb0:	080078e4 	.word	0x080078e4

08005eb4 <prvAddNewTaskToReadyList>:
{
 8005eb4:	b570      	push	{r4, r5, r6, lr}
 8005eb6:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8005eb8:	f000 ff84 	bl	8006dc4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8005ebc:	4a30      	ldr	r2, [pc, #192]	; (8005f80 <prvAddNewTaskToReadyList+0xcc>)
 8005ebe:	6813      	ldr	r3, [r2, #0]
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005ec4:	4b2f      	ldr	r3, [pc, #188]	; (8005f84 <prvAddNewTaskToReadyList+0xd0>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d034      	beq.n	8005f36 <prvAddNewTaskToReadyList+0x82>
			if( xSchedulerRunning == pdFALSE )
 8005ecc:	4b2e      	ldr	r3, [pc, #184]	; (8005f88 <prvAddNewTaskToReadyList+0xd4>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	b93b      	cbnz	r3, 8005ee2 <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005ed2:	4b2c      	ldr	r3, [pc, #176]	; (8005f84 <prvAddNewTaskToReadyList+0xd0>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005eda:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8005edc:	bf9c      	itt	ls
 8005ede:	4b29      	ldrls	r3, [pc, #164]	; (8005f84 <prvAddNewTaskToReadyList+0xd0>)
 8005ee0:	601d      	strls	r5, [r3, #0]
		uxTaskNumber++;
 8005ee2:	4a2a      	ldr	r2, [pc, #168]	; (8005f8c <prvAddNewTaskToReadyList+0xd8>)
 8005ee4:	6813      	ldr	r3, [r2, #0]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005eea:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8005eec:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8005eee:	4b28      	ldr	r3, [pc, #160]	; (8005f90 <prvAddNewTaskToReadyList+0xdc>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4298      	cmp	r0, r3
 8005ef4:	bf84      	itt	hi
 8005ef6:	4b26      	ldrhi	r3, [pc, #152]	; (8005f90 <prvAddNewTaskToReadyList+0xdc>)
 8005ef8:	6018      	strhi	r0, [r3, #0]
 8005efa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005efe:	1d29      	adds	r1, r5, #4
 8005f00:	4b24      	ldr	r3, [pc, #144]	; (8005f94 <prvAddNewTaskToReadyList+0xe0>)
 8005f02:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005f06:	f7ff fbe1 	bl	80056cc <vListInsertEnd>
	taskEXIT_CRITICAL();
 8005f0a:	f000 ff7d 	bl	8006e08 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8005f0e:	4b1e      	ldr	r3, [pc, #120]	; (8005f88 <prvAddNewTaskToReadyList+0xd4>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	b17b      	cbz	r3, 8005f34 <prvAddNewTaskToReadyList+0x80>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005f14:	4b1b      	ldr	r3, [pc, #108]	; (8005f84 <prvAddNewTaskToReadyList+0xd0>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f1a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d209      	bcs.n	8005f34 <prvAddNewTaskToReadyList+0x80>
			taskYIELD_IF_USING_PREEMPTION();
 8005f20:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005f24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f28:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005f2c:	f3bf 8f4f 	dsb	sy
 8005f30:	f3bf 8f6f 	isb	sy
}
 8005f34:	bd70      	pop	{r4, r5, r6, pc}
			pxCurrentTCB = pxNewTCB;
 8005f36:	4b13      	ldr	r3, [pc, #76]	; (8005f84 <prvAddNewTaskToReadyList+0xd0>)
 8005f38:	601d      	str	r5, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005f3a:	6813      	ldr	r3, [r2, #0]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d1d0      	bne.n	8005ee2 <prvAddNewTaskToReadyList+0x2e>
 8005f40:	4c14      	ldr	r4, [pc, #80]	; (8005f94 <prvAddNewTaskToReadyList+0xe0>)
 8005f42:	f504 668c 	add.w	r6, r4, #1120	; 0x460
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f46:	4620      	mov	r0, r4
 8005f48:	f7ff fbb2 	bl	80056b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f4c:	3414      	adds	r4, #20
 8005f4e:	42b4      	cmp	r4, r6
 8005f50:	d1f9      	bne.n	8005f46 <prvAddNewTaskToReadyList+0x92>
	vListInitialise( &xDelayedTaskList1 );
 8005f52:	4e11      	ldr	r6, [pc, #68]	; (8005f98 <prvAddNewTaskToReadyList+0xe4>)
 8005f54:	4630      	mov	r0, r6
 8005f56:	f7ff fbab 	bl	80056b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005f5a:	4c10      	ldr	r4, [pc, #64]	; (8005f9c <prvAddNewTaskToReadyList+0xe8>)
 8005f5c:	4620      	mov	r0, r4
 8005f5e:	f7ff fba7 	bl	80056b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005f62:	480f      	ldr	r0, [pc, #60]	; (8005fa0 <prvAddNewTaskToReadyList+0xec>)
 8005f64:	f7ff fba4 	bl	80056b0 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8005f68:	480e      	ldr	r0, [pc, #56]	; (8005fa4 <prvAddNewTaskToReadyList+0xf0>)
 8005f6a:	f7ff fba1 	bl	80056b0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8005f6e:	480e      	ldr	r0, [pc, #56]	; (8005fa8 <prvAddNewTaskToReadyList+0xf4>)
 8005f70:	f7ff fb9e 	bl	80056b0 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8005f74:	4b0d      	ldr	r3, [pc, #52]	; (8005fac <prvAddNewTaskToReadyList+0xf8>)
 8005f76:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005f78:	4b0d      	ldr	r3, [pc, #52]	; (8005fb0 <prvAddNewTaskToReadyList+0xfc>)
 8005f7a:	601c      	str	r4, [r3, #0]
}
 8005f7c:	e7b1      	b.n	8005ee2 <prvAddNewTaskToReadyList+0x2e>
 8005f7e:	bf00      	nop
 8005f80:	20002f70 	.word	0x20002f70
 8005f84:	20002b04 	.word	0x20002b04
 8005f88:	20002fcc 	.word	0x20002fcc
 8005f8c:	20002f80 	.word	0x20002f80
 8005f90:	20002f84 	.word	0x20002f84
 8005f94:	20002b10 	.word	0x20002b10
 8005f98:	20002f88 	.word	0x20002f88
 8005f9c:	20002f9c 	.word	0x20002f9c
 8005fa0:	20002fb8 	.word	0x20002fb8
 8005fa4:	20002fe4 	.word	0x20002fe4
 8005fa8:	20002fd0 	.word	0x20002fd0
 8005fac:	20002b08 	.word	0x20002b08
 8005fb0:	20002b0c 	.word	0x20002b0c

08005fb4 <prvDeleteTCB>:
	{
 8005fb4:	b510      	push	{r4, lr}
 8005fb6:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005fb8:	3054      	adds	r0, #84	; 0x54
 8005fba:	f001 f963 	bl	8007284 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005fbe:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 8005fc2:	b163      	cbz	r3, 8005fde <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d011      	beq.n	8005fec <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d00e      	beq.n	8005fea <prvDeleteTCB+0x36>
 8005fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd0:	f383 8811 	msr	BASEPRI, r3
 8005fd4:	f3bf 8f6f 	isb	sy
 8005fd8:	f3bf 8f4f 	dsb	sy
 8005fdc:	e7fe      	b.n	8005fdc <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 8005fde:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005fe0:	f001 f8d0 	bl	8007184 <vPortFree>
				vPortFree( pxTCB );
 8005fe4:	4620      	mov	r0, r4
 8005fe6:	f001 f8cd 	bl	8007184 <vPortFree>
	}
 8005fea:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8005fec:	4620      	mov	r0, r4
 8005fee:	f001 f8c9 	bl	8007184 <vPortFree>
 8005ff2:	e7fa      	b.n	8005fea <prvDeleteTCB+0x36>

08005ff4 <prvIdleTask>:
{
 8005ff4:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ff6:	4c15      	ldr	r4, [pc, #84]	; (800604c <prvIdleTask+0x58>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005ff8:	4f15      	ldr	r7, [pc, #84]	; (8006050 <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 8005ffa:	4e16      	ldr	r6, [pc, #88]	; (8006054 <prvIdleTask+0x60>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ffc:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8006058 <prvIdleTask+0x64>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006000:	6823      	ldr	r3, [r4, #0]
 8006002:	b1a3      	cbz	r3, 800602e <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 8006004:	f000 fede 	bl	8006dc4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800600c:	1d28      	adds	r0, r5, #4
 800600e:	f7ff fb81 	bl	8005714 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006012:	6833      	ldr	r3, [r6, #0]
 8006014:	3b01      	subs	r3, #1
 8006016:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006018:	6823      	ldr	r3, [r4, #0]
 800601a:	3b01      	subs	r3, #1
 800601c:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800601e:	f000 fef3 	bl	8006e08 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8006022:	4628      	mov	r0, r5
 8006024:	f7ff ffc6 	bl	8005fb4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006028:	6823      	ldr	r3, [r4, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1ea      	bne.n	8006004 <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800602e:	f8d8 3000 	ldr.w	r3, [r8]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d9e4      	bls.n	8006000 <prvIdleTask+0xc>
				taskYIELD();
 8006036:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800603a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800603e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006042:	f3bf 8f4f 	dsb	sy
 8006046:	f3bf 8f6f 	isb	sy
 800604a:	e7d9      	b.n	8006000 <prvIdleTask+0xc>
 800604c:	20002f74 	.word	0x20002f74
 8006050:	20002fe4 	.word	0x20002fe4
 8006054:	20002f70 	.word	0x20002f70
 8006058:	20002b10 	.word	0x20002b10

0800605c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800605c:	b570      	push	{r4, r5, r6, lr}
 800605e:	4604      	mov	r4, r0
 8006060:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006062:	4b17      	ldr	r3, [pc, #92]	; (80060c0 <prvAddCurrentTaskToDelayedList+0x64>)
 8006064:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006066:	4b17      	ldr	r3, [pc, #92]	; (80060c4 <prvAddCurrentTaskToDelayedList+0x68>)
 8006068:	6818      	ldr	r0, [r3, #0]
 800606a:	3004      	adds	r0, #4
 800606c:	f7ff fb52 	bl	8005714 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006070:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006074:	d00d      	beq.n	8006092 <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006076:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006078:	4b12      	ldr	r3, [pc, #72]	; (80060c4 <prvAddCurrentTaskToDelayedList+0x68>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800607e:	42a6      	cmp	r6, r4
 8006080:	d910      	bls.n	80060a4 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006082:	4b11      	ldr	r3, [pc, #68]	; (80060c8 <prvAddCurrentTaskToDelayedList+0x6c>)
 8006084:	6818      	ldr	r0, [r3, #0]
 8006086:	4b0f      	ldr	r3, [pc, #60]	; (80060c4 <prvAddCurrentTaskToDelayedList+0x68>)
 8006088:	6819      	ldr	r1, [r3, #0]
 800608a:	3104      	adds	r1, #4
 800608c:	f7ff fb29 	bl	80056e2 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006090:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006092:	2d00      	cmp	r5, #0
 8006094:	d0ef      	beq.n	8006076 <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006096:	4b0b      	ldr	r3, [pc, #44]	; (80060c4 <prvAddCurrentTaskToDelayedList+0x68>)
 8006098:	6819      	ldr	r1, [r3, #0]
 800609a:	3104      	adds	r1, #4
 800609c:	480b      	ldr	r0, [pc, #44]	; (80060cc <prvAddCurrentTaskToDelayedList+0x70>)
 800609e:	f7ff fb15 	bl	80056cc <vListInsertEnd>
 80060a2:	e7f5      	b.n	8006090 <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060a4:	4b0a      	ldr	r3, [pc, #40]	; (80060d0 <prvAddCurrentTaskToDelayedList+0x74>)
 80060a6:	6818      	ldr	r0, [r3, #0]
 80060a8:	4b06      	ldr	r3, [pc, #24]	; (80060c4 <prvAddCurrentTaskToDelayedList+0x68>)
 80060aa:	6819      	ldr	r1, [r3, #0]
 80060ac:	3104      	adds	r1, #4
 80060ae:	f7ff fb18 	bl	80056e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80060b2:	4b08      	ldr	r3, [pc, #32]	; (80060d4 <prvAddCurrentTaskToDelayedList+0x78>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	42a3      	cmp	r3, r4
					xNextTaskUnblockTime = xTimeToWake;
 80060b8:	bf84      	itt	hi
 80060ba:	4b06      	ldrhi	r3, [pc, #24]	; (80060d4 <prvAddCurrentTaskToDelayedList+0x78>)
 80060bc:	601c      	strhi	r4, [r3, #0]
}
 80060be:	e7e7      	b.n	8006090 <prvAddCurrentTaskToDelayedList+0x34>
 80060c0:	20002ff8 	.word	0x20002ff8
 80060c4:	20002b04 	.word	0x20002b04
 80060c8:	20002b0c 	.word	0x20002b0c
 80060cc:	20002fd0 	.word	0x20002fd0
 80060d0:	20002b08 	.word	0x20002b08
 80060d4:	20002fb0 	.word	0x20002fb0

080060d8 <xTaskCreateStatic>:
	{
 80060d8:	b530      	push	{r4, r5, lr}
 80060da:	b087      	sub	sp, #28
 80060dc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 80060de:	b17c      	cbz	r4, 8006100 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80060e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060e2:	b1b5      	cbz	r5, 8006112 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 80060e4:	25bc      	movs	r5, #188	; 0xbc
 80060e6:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80060e8:	9d04      	ldr	r5, [sp, #16]
 80060ea:	2dbc      	cmp	r5, #188	; 0xbc
 80060ec:	d01a      	beq.n	8006124 <xTaskCreateStatic+0x4c>
 80060ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f2:	f383 8811 	msr	BASEPRI, r3
 80060f6:	f3bf 8f6f 	isb	sy
 80060fa:	f3bf 8f4f 	dsb	sy
 80060fe:	e7fe      	b.n	80060fe <xTaskCreateStatic+0x26>
 8006100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006104:	f383 8811 	msr	BASEPRI, r3
 8006108:	f3bf 8f6f 	isb	sy
 800610c:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8006110:	e7fe      	b.n	8006110 <xTaskCreateStatic+0x38>
 8006112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006116:	f383 8811 	msr	BASEPRI, r3
 800611a:	f3bf 8f6f 	isb	sy
 800611e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8006122:	e7fe      	b.n	8006122 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006124:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006126:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006128:	2402      	movs	r4, #2
 800612a:	f885 40b9 	strb.w	r4, [r5, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800612e:	2400      	movs	r4, #0
 8006130:	9403      	str	r4, [sp, #12]
 8006132:	9502      	str	r5, [sp, #8]
 8006134:	ac05      	add	r4, sp, #20
 8006136:	9401      	str	r4, [sp, #4]
 8006138:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800613a:	9400      	str	r4, [sp, #0]
 800613c:	f7ff fe5e 	bl	8005dfc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006140:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006142:	f7ff feb7 	bl	8005eb4 <prvAddNewTaskToReadyList>
	}
 8006146:	9805      	ldr	r0, [sp, #20]
 8006148:	b007      	add	sp, #28
 800614a:	bd30      	pop	{r4, r5, pc}

0800614c <xTaskCreate>:
	{
 800614c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006150:	b085      	sub	sp, #20
 8006152:	4607      	mov	r7, r0
 8006154:	4688      	mov	r8, r1
 8006156:	4614      	mov	r4, r2
 8006158:	461e      	mov	r6, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800615a:	0090      	lsls	r0, r2, #2
 800615c:	f000 ff7c 	bl	8007058 <pvPortMalloc>
			if( pxStack != NULL )
 8006160:	b308      	cbz	r0, 80061a6 <xTaskCreate+0x5a>
 8006162:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006164:	20bc      	movs	r0, #188	; 0xbc
 8006166:	f000 ff77 	bl	8007058 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800616a:	4605      	mov	r5, r0
 800616c:	b1a8      	cbz	r0, 800619a <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 800616e:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006172:	2300      	movs	r3, #0
 8006174:	f880 30b9 	strb.w	r3, [r0, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006178:	9303      	str	r3, [sp, #12]
 800617a:	9002      	str	r0, [sp, #8]
 800617c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800617e:	9301      	str	r3, [sp, #4]
 8006180:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006182:	9300      	str	r3, [sp, #0]
 8006184:	4633      	mov	r3, r6
 8006186:	4622      	mov	r2, r4
 8006188:	4641      	mov	r1, r8
 800618a:	4638      	mov	r0, r7
 800618c:	f7ff fe36 	bl	8005dfc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006190:	4628      	mov	r0, r5
 8006192:	f7ff fe8f 	bl	8005eb4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006196:	2001      	movs	r0, #1
 8006198:	e007      	b.n	80061aa <xTaskCreate+0x5e>
					vPortFree( pxStack );
 800619a:	4648      	mov	r0, r9
 800619c:	f000 fff2 	bl	8007184 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80061a0:	f04f 30ff 	mov.w	r0, #4294967295
 80061a4:	e001      	b.n	80061aa <xTaskCreate+0x5e>
 80061a6:	f04f 30ff 	mov.w	r0, #4294967295
	}
 80061aa:	b005      	add	sp, #20
 80061ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080061b0 <vTaskStartScheduler>:
{
 80061b0:	b510      	push	{r4, lr}
 80061b2:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80061b4:	2400      	movs	r4, #0
 80061b6:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80061b8:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80061ba:	aa07      	add	r2, sp, #28
 80061bc:	a906      	add	r1, sp, #24
 80061be:	a805      	add	r0, sp, #20
 80061c0:	f7ff f948 	bl	8005454 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80061c4:	9b05      	ldr	r3, [sp, #20]
 80061c6:	9302      	str	r3, [sp, #8]
 80061c8:	9b06      	ldr	r3, [sp, #24]
 80061ca:	9301      	str	r3, [sp, #4]
 80061cc:	9400      	str	r4, [sp, #0]
 80061ce:	4623      	mov	r3, r4
 80061d0:	9a07      	ldr	r2, [sp, #28]
 80061d2:	4917      	ldr	r1, [pc, #92]	; (8006230 <vTaskStartScheduler+0x80>)
 80061d4:	4817      	ldr	r0, [pc, #92]	; (8006234 <vTaskStartScheduler+0x84>)
 80061d6:	f7ff ff7f 	bl	80060d8 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80061da:	b338      	cbz	r0, 800622c <vTaskStartScheduler+0x7c>
			xReturn = xTimerCreateTimerTask();
 80061dc:	f000 fbda 	bl	8006994 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80061e0:	2801      	cmp	r0, #1
 80061e2:	d00b      	beq.n	80061fc <vTaskStartScheduler+0x4c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80061e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80061e8:	d120      	bne.n	800622c <vTaskStartScheduler+0x7c>
 80061ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ee:	f383 8811 	msr	BASEPRI, r3
 80061f2:	f3bf 8f6f 	isb	sy
 80061f6:	f3bf 8f4f 	dsb	sy
 80061fa:	e7fe      	b.n	80061fa <vTaskStartScheduler+0x4a>
 80061fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006200:	f383 8811 	msr	BASEPRI, r3
 8006204:	f3bf 8f6f 	isb	sy
 8006208:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800620c:	4b0a      	ldr	r3, [pc, #40]	; (8006238 <vTaskStartScheduler+0x88>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	3354      	adds	r3, #84	; 0x54
 8006212:	4a0a      	ldr	r2, [pc, #40]	; (800623c <vTaskStartScheduler+0x8c>)
 8006214:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8006216:	4b0a      	ldr	r3, [pc, #40]	; (8006240 <vTaskStartScheduler+0x90>)
 8006218:	f04f 32ff 	mov.w	r2, #4294967295
 800621c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800621e:	4b09      	ldr	r3, [pc, #36]	; (8006244 <vTaskStartScheduler+0x94>)
 8006220:	2201      	movs	r2, #1
 8006222:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006224:	4b08      	ldr	r3, [pc, #32]	; (8006248 <vTaskStartScheduler+0x98>)
 8006226:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8006228:	f000 fe56 	bl	8006ed8 <xPortStartScheduler>
}
 800622c:	b008      	add	sp, #32
 800622e:	bd10      	pop	{r4, pc}
 8006230:	080078cc 	.word	0x080078cc
 8006234:	08005ff5 	.word	0x08005ff5
 8006238:	20002b04 	.word	0x20002b04
 800623c:	20000018 	.word	0x20000018
 8006240:	20002fb0 	.word	0x20002fb0
 8006244:	20002fcc 	.word	0x20002fcc
 8006248:	20002ff8 	.word	0x20002ff8

0800624c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800624c:	4a02      	ldr	r2, [pc, #8]	; (8006258 <vTaskSuspendAll+0xc>)
 800624e:	6813      	ldr	r3, [r2, #0]
 8006250:	3301      	adds	r3, #1
 8006252:	6013      	str	r3, [r2, #0]
}
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	20002f7c 	.word	0x20002f7c

0800625c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800625c:	4b01      	ldr	r3, [pc, #4]	; (8006264 <xTaskGetTickCount+0x8>)
 800625e:	6818      	ldr	r0, [r3, #0]
}
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	20002ff8 	.word	0x20002ff8

08006268 <xTaskIncrementTick>:
{
 8006268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800626c:	4b40      	ldr	r3, [pc, #256]	; (8006370 <xTaskIncrementTick+0x108>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d170      	bne.n	8006356 <xTaskIncrementTick+0xee>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006274:	4b3f      	ldr	r3, [pc, #252]	; (8006374 <xTaskIncrementTick+0x10c>)
 8006276:	681e      	ldr	r6, [r3, #0]
 8006278:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 800627a:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800627c:	b9c6      	cbnz	r6, 80062b0 <xTaskIncrementTick+0x48>
			taskSWITCH_DELAYED_LISTS();
 800627e:	4b3e      	ldr	r3, [pc, #248]	; (8006378 <xTaskIncrementTick+0x110>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	b143      	cbz	r3, 8006298 <xTaskIncrementTick+0x30>
 8006286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628a:	f383 8811 	msr	BASEPRI, r3
 800628e:	f3bf 8f6f 	isb	sy
 8006292:	f3bf 8f4f 	dsb	sy
 8006296:	e7fe      	b.n	8006296 <xTaskIncrementTick+0x2e>
 8006298:	4a37      	ldr	r2, [pc, #220]	; (8006378 <xTaskIncrementTick+0x110>)
 800629a:	6811      	ldr	r1, [r2, #0]
 800629c:	4b37      	ldr	r3, [pc, #220]	; (800637c <xTaskIncrementTick+0x114>)
 800629e:	6818      	ldr	r0, [r3, #0]
 80062a0:	6010      	str	r0, [r2, #0]
 80062a2:	6019      	str	r1, [r3, #0]
 80062a4:	4a36      	ldr	r2, [pc, #216]	; (8006380 <xTaskIncrementTick+0x118>)
 80062a6:	6813      	ldr	r3, [r2, #0]
 80062a8:	3301      	adds	r3, #1
 80062aa:	6013      	str	r3, [r2, #0]
 80062ac:	f7ff fd90 	bl	8005dd0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80062b0:	4b34      	ldr	r3, [pc, #208]	; (8006384 <xTaskIncrementTick+0x11c>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	42b3      	cmp	r3, r6
 80062b6:	d841      	bhi.n	800633c <xTaskIncrementTick+0xd4>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062b8:	4b2f      	ldr	r3, [pc, #188]	; (8006378 <xTaskIncrementTick+0x110>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	b13b      	cbz	r3, 80062d0 <xTaskIncrementTick+0x68>
BaseType_t xSwitchRequired = pdFALSE;
 80062c0:	2500      	movs	r5, #0
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80062c2:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8006378 <xTaskIncrementTick+0x110>
					prvAddTaskToReadyList( pxTCB );
 80062c6:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8006388 <xTaskIncrementTick+0x120>
 80062ca:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 800638c <xTaskIncrementTick+0x124>
 80062ce:	e022      	b.n	8006316 <xTaskIncrementTick+0xae>
BaseType_t xSwitchRequired = pdFALSE;
 80062d0:	2500      	movs	r5, #0
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062d2:	4b2c      	ldr	r3, [pc, #176]	; (8006384 <xTaskIncrementTick+0x11c>)
 80062d4:	f04f 32ff 	mov.w	r2, #4294967295
 80062d8:	601a      	str	r2, [r3, #0]
					break;
 80062da:	e030      	b.n	800633e <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = xItemValue;
 80062dc:	4a29      	ldr	r2, [pc, #164]	; (8006384 <xTaskIncrementTick+0x11c>)
 80062de:	6013      	str	r3, [r2, #0]
						break;
 80062e0:	e02d      	b.n	800633e <xTaskIncrementTick+0xd6>
					prvAddTaskToReadyList( pxTCB );
 80062e2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80062e4:	f8d9 3000 	ldr.w	r3, [r9]
 80062e8:	4298      	cmp	r0, r3
 80062ea:	bf88      	it	hi
 80062ec:	f8c9 0000 	strhi.w	r0, [r9]
 80062f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80062f4:	4639      	mov	r1, r7
 80062f6:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 80062fa:	f7ff f9e7 	bl	80056cc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062fe:	4b24      	ldr	r3, [pc, #144]	; (8006390 <xTaskIncrementTick+0x128>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8006306:	429a      	cmp	r2, r3
 8006308:	bf28      	it	cs
 800630a:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800630c:	f8d8 3000 	ldr.w	r3, [r8]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d0dd      	beq.n	80062d2 <xTaskIncrementTick+0x6a>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006316:	f8d8 3000 	ldr.w	r3, [r8]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800631e:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8006320:	429e      	cmp	r6, r3
 8006322:	d3db      	bcc.n	80062dc <xTaskIncrementTick+0x74>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006324:	1d27      	adds	r7, r4, #4
 8006326:	4638      	mov	r0, r7
 8006328:	f7ff f9f4 	bl	8005714 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800632c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800632e:	2b00      	cmp	r3, #0
 8006330:	d0d7      	beq.n	80062e2 <xTaskIncrementTick+0x7a>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006332:	f104 0018 	add.w	r0, r4, #24
 8006336:	f7ff f9ed 	bl	8005714 <uxListRemove>
 800633a:	e7d2      	b.n	80062e2 <xTaskIncrementTick+0x7a>
BaseType_t xSwitchRequired = pdFALSE;
 800633c:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800633e:	4b14      	ldr	r3, [pc, #80]	; (8006390 <xTaskIncrementTick+0x128>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006344:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	4a10      	ldr	r2, [pc, #64]	; (800638c <xTaskIncrementTick+0x124>)
 800634c:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
 800634e:	2b02      	cmp	r3, #2
 8006350:	bf28      	it	cs
 8006352:	2501      	movcs	r5, #1
 8006354:	e004      	b.n	8006360 <xTaskIncrementTick+0xf8>
		++uxPendedTicks;
 8006356:	4a0f      	ldr	r2, [pc, #60]	; (8006394 <xTaskIncrementTick+0x12c>)
 8006358:	6813      	ldr	r3, [r2, #0]
 800635a:	3301      	adds	r3, #1
 800635c:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800635e:	2500      	movs	r5, #0
		if( xYieldPending != pdFALSE )
 8006360:	4b0d      	ldr	r3, [pc, #52]	; (8006398 <xTaskIncrementTick+0x130>)
 8006362:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8006364:	2b00      	cmp	r3, #0
}
 8006366:	bf0c      	ite	eq
 8006368:	4628      	moveq	r0, r5
 800636a:	2001      	movne	r0, #1
 800636c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006370:	20002f7c 	.word	0x20002f7c
 8006374:	20002ff8 	.word	0x20002ff8
 8006378:	20002b08 	.word	0x20002b08
 800637c:	20002b0c 	.word	0x20002b0c
 8006380:	20002fb4 	.word	0x20002fb4
 8006384:	20002fb0 	.word	0x20002fb0
 8006388:	20002f84 	.word	0x20002f84
 800638c:	20002b10 	.word	0x20002b10
 8006390:	20002b04 	.word	0x20002b04
 8006394:	20002f78 	.word	0x20002f78
 8006398:	20002ffc 	.word	0x20002ffc

0800639c <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 800639c:	4b38      	ldr	r3, [pc, #224]	; (8006480 <xTaskResumeAll+0xe4>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	b943      	cbnz	r3, 80063b4 <xTaskResumeAll+0x18>
 80063a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a6:	f383 8811 	msr	BASEPRI, r3
 80063aa:	f3bf 8f6f 	isb	sy
 80063ae:	f3bf 8f4f 	dsb	sy
 80063b2:	e7fe      	b.n	80063b2 <xTaskResumeAll+0x16>
{
 80063b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
 80063b8:	f000 fd04 	bl	8006dc4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80063bc:	4b30      	ldr	r3, [pc, #192]	; (8006480 <xTaskResumeAll+0xe4>)
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	3a01      	subs	r2, #1
 80063c2:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d149      	bne.n	800645e <xTaskResumeAll+0xc2>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80063ca:	4b2e      	ldr	r3, [pc, #184]	; (8006484 <xTaskResumeAll+0xe8>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d04b      	beq.n	800646a <xTaskResumeAll+0xce>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063d2:	4b2d      	ldr	r3, [pc, #180]	; (8006488 <xTaskResumeAll+0xec>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d04b      	beq.n	8006472 <xTaskResumeAll+0xd6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80063da:	4e2b      	ldr	r6, [pc, #172]	; (8006488 <xTaskResumeAll+0xec>)
					prvAddTaskToReadyList( pxTCB );
 80063dc:	4f2b      	ldr	r7, [pc, #172]	; (800648c <xTaskResumeAll+0xf0>)
 80063de:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8006490 <xTaskResumeAll+0xf4>
 80063e2:	e002      	b.n	80063ea <xTaskResumeAll+0x4e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063e4:	6833      	ldr	r3, [r6, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d041      	beq.n	800646e <xTaskResumeAll+0xd2>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80063ea:	68f3      	ldr	r3, [r6, #12]
 80063ec:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063ee:	f104 0018 	add.w	r0, r4, #24
 80063f2:	f7ff f98f 	bl	8005714 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063f6:	1d25      	adds	r5, r4, #4
 80063f8:	4628      	mov	r0, r5
 80063fa:	f7ff f98b 	bl	8005714 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80063fe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	4298      	cmp	r0, r3
 8006404:	bf88      	it	hi
 8006406:	6038      	strhi	r0, [r7, #0]
 8006408:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800640c:	4629      	mov	r1, r5
 800640e:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8006412:	f7ff f95b 	bl	80056cc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006416:	4b1f      	ldr	r3, [pc, #124]	; (8006494 <xTaskResumeAll+0xf8>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800641c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641e:	429a      	cmp	r2, r3
 8006420:	d3e0      	bcc.n	80063e4 <xTaskResumeAll+0x48>
						xYieldPending = pdTRUE;
 8006422:	4b1d      	ldr	r3, [pc, #116]	; (8006498 <xTaskResumeAll+0xfc>)
 8006424:	2201      	movs	r2, #1
 8006426:	601a      	str	r2, [r3, #0]
 8006428:	e7dc      	b.n	80063e4 <xTaskResumeAll+0x48>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800642a:	3c01      	subs	r4, #1
 800642c:	d005      	beq.n	800643a <xTaskResumeAll+0x9e>
							if( xTaskIncrementTick() != pdFALSE )
 800642e:	f7ff ff1b 	bl	8006268 <xTaskIncrementTick>
 8006432:	2800      	cmp	r0, #0
 8006434:	d0f9      	beq.n	800642a <xTaskResumeAll+0x8e>
								xYieldPending = pdTRUE;
 8006436:	6035      	str	r5, [r6, #0]
 8006438:	e7f7      	b.n	800642a <xTaskResumeAll+0x8e>
						uxPendedTicks = 0;
 800643a:	4b18      	ldr	r3, [pc, #96]	; (800649c <xTaskResumeAll+0x100>)
 800643c:	2200      	movs	r2, #0
 800643e:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 8006440:	4b15      	ldr	r3, [pc, #84]	; (8006498 <xTaskResumeAll+0xfc>)
 8006442:	681c      	ldr	r4, [r3, #0]
 8006444:	b164      	cbz	r4, 8006460 <xTaskResumeAll+0xc4>
					taskYIELD_IF_USING_PREEMPTION();
 8006446:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800644a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800644e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006452:	f3bf 8f4f 	dsb	sy
 8006456:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800645a:	2401      	movs	r4, #1
 800645c:	e000      	b.n	8006460 <xTaskResumeAll+0xc4>
BaseType_t xAlreadyYielded = pdFALSE;
 800645e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006460:	f000 fcd2 	bl	8006e08 <vPortExitCritical>
}
 8006464:	4620      	mov	r0, r4
 8006466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 800646a:	2400      	movs	r4, #0
 800646c:	e7f8      	b.n	8006460 <xTaskResumeAll+0xc4>
					prvResetNextTaskUnblockTime();
 800646e:	f7ff fcaf 	bl	8005dd0 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006472:	4b0a      	ldr	r3, [pc, #40]	; (800649c <xTaskResumeAll+0x100>)
 8006474:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006476:	2c00      	cmp	r4, #0
 8006478:	d0e2      	beq.n	8006440 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 800647a:	4e07      	ldr	r6, [pc, #28]	; (8006498 <xTaskResumeAll+0xfc>)
 800647c:	2501      	movs	r5, #1
 800647e:	e7d6      	b.n	800642e <xTaskResumeAll+0x92>
 8006480:	20002f7c 	.word	0x20002f7c
 8006484:	20002f70 	.word	0x20002f70
 8006488:	20002fb8 	.word	0x20002fb8
 800648c:	20002f84 	.word	0x20002f84
 8006490:	20002b10 	.word	0x20002b10
 8006494:	20002b04 	.word	0x20002b04
 8006498:	20002ffc 	.word	0x20002ffc
 800649c:	20002f78 	.word	0x20002f78

080064a0 <vTaskDelay>:
	{
 80064a0:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80064a2:	b1a8      	cbz	r0, 80064d0 <vTaskDelay+0x30>
 80064a4:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 80064a6:	4b10      	ldr	r3, [pc, #64]	; (80064e8 <vTaskDelay+0x48>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	b143      	cbz	r3, 80064be <vTaskDelay+0x1e>
 80064ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b0:	f383 8811 	msr	BASEPRI, r3
 80064b4:	f3bf 8f6f 	isb	sy
 80064b8:	f3bf 8f4f 	dsb	sy
 80064bc:	e7fe      	b.n	80064bc <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80064be:	f7ff fec5 	bl	800624c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80064c2:	2100      	movs	r1, #0
 80064c4:	4620      	mov	r0, r4
 80064c6:	f7ff fdc9 	bl	800605c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80064ca:	f7ff ff67 	bl	800639c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80064ce:	b948      	cbnz	r0, 80064e4 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 80064d0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80064d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064d8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80064dc:	f3bf 8f4f 	dsb	sy
 80064e0:	f3bf 8f6f 	isb	sy
	}
 80064e4:	bd10      	pop	{r4, pc}
 80064e6:	bf00      	nop
 80064e8:	20002f7c 	.word	0x20002f7c

080064ec <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80064ec:	4b24      	ldr	r3, [pc, #144]	; (8006580 <vTaskSwitchContext+0x94>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	b11b      	cbz	r3, 80064fa <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 80064f2:	4b24      	ldr	r3, [pc, #144]	; (8006584 <vTaskSwitchContext+0x98>)
 80064f4:	2201      	movs	r2, #1
 80064f6:	601a      	str	r2, [r3, #0]
 80064f8:	4770      	bx	lr
		xYieldPending = pdFALSE;
 80064fa:	4b22      	ldr	r3, [pc, #136]	; (8006584 <vTaskSwitchContext+0x98>)
 80064fc:	2200      	movs	r2, #0
 80064fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006500:	4b21      	ldr	r3, [pc, #132]	; (8006588 <vTaskSwitchContext+0x9c>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006508:	0092      	lsls	r2, r2, #2
 800650a:	4920      	ldr	r1, [pc, #128]	; (800658c <vTaskSwitchContext+0xa0>)
 800650c:	588a      	ldr	r2, [r1, r2]
 800650e:	b98a      	cbnz	r2, 8006534 <vTaskSwitchContext+0x48>
 8006510:	b13b      	cbz	r3, 8006522 <vTaskSwitchContext+0x36>
 8006512:	3b01      	subs	r3, #1
 8006514:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006518:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800651c:	b952      	cbnz	r2, 8006534 <vTaskSwitchContext+0x48>
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1f7      	bne.n	8006512 <vTaskSwitchContext+0x26>
 8006522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006526:	f383 8811 	msr	BASEPRI, r3
 800652a:	f3bf 8f6f 	isb	sy
 800652e:	f3bf 8f4f 	dsb	sy
 8006532:	e7fe      	b.n	8006532 <vTaskSwitchContext+0x46>
 8006534:	4a15      	ldr	r2, [pc, #84]	; (800658c <vTaskSwitchContext+0xa0>)
 8006536:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800653a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800653e:	6848      	ldr	r0, [r1, #4]
 8006540:	6840      	ldr	r0, [r0, #4]
 8006542:	6048      	str	r0, [r1, #4]
 8006544:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006548:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800654c:	3208      	adds	r2, #8
 800654e:	4290      	cmp	r0, r2
 8006550:	d00f      	beq.n	8006572 <vTaskSwitchContext+0x86>
 8006552:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006556:	4a0d      	ldr	r2, [pc, #52]	; (800658c <vTaskSwitchContext+0xa0>)
 8006558:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800655c:	6852      	ldr	r2, [r2, #4]
 800655e:	68d1      	ldr	r1, [r2, #12]
 8006560:	4a0b      	ldr	r2, [pc, #44]	; (8006590 <vTaskSwitchContext+0xa4>)
 8006562:	6011      	str	r1, [r2, #0]
 8006564:	4908      	ldr	r1, [pc, #32]	; (8006588 <vTaskSwitchContext+0x9c>)
 8006566:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006568:	6813      	ldr	r3, [r2, #0]
 800656a:	3354      	adds	r3, #84	; 0x54
 800656c:	4a09      	ldr	r2, [pc, #36]	; (8006594 <vTaskSwitchContext+0xa8>)
 800656e:	6013      	str	r3, [r2, #0]
}
 8006570:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006572:	6840      	ldr	r0, [r0, #4]
 8006574:	4a05      	ldr	r2, [pc, #20]	; (800658c <vTaskSwitchContext+0xa0>)
 8006576:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800657a:	6050      	str	r0, [r2, #4]
 800657c:	e7e9      	b.n	8006552 <vTaskSwitchContext+0x66>
 800657e:	bf00      	nop
 8006580:	20002f7c 	.word	0x20002f7c
 8006584:	20002ffc 	.word	0x20002ffc
 8006588:	20002f84 	.word	0x20002f84
 800658c:	20002b10 	.word	0x20002b10
 8006590:	20002b04 	.word	0x20002b04
 8006594:	20000018 	.word	0x20000018

08006598 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8006598:	b158      	cbz	r0, 80065b2 <vTaskPlaceOnEventList+0x1a>
{
 800659a:	b510      	push	{r4, lr}
 800659c:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800659e:	4a09      	ldr	r2, [pc, #36]	; (80065c4 <vTaskPlaceOnEventList+0x2c>)
 80065a0:	6811      	ldr	r1, [r2, #0]
 80065a2:	3118      	adds	r1, #24
 80065a4:	f7ff f89d 	bl	80056e2 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80065a8:	2101      	movs	r1, #1
 80065aa:	4620      	mov	r0, r4
 80065ac:	f7ff fd56 	bl	800605c <prvAddCurrentTaskToDelayedList>
}
 80065b0:	bd10      	pop	{r4, pc}
 80065b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b6:	f383 8811 	msr	BASEPRI, r3
 80065ba:	f3bf 8f6f 	isb	sy
 80065be:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 80065c2:	e7fe      	b.n	80065c2 <vTaskPlaceOnEventList+0x2a>
 80065c4:	20002b04 	.word	0x20002b04

080065c8 <vTaskPlaceOnUnorderedEventList>:
	configASSERT( pxEventList );
 80065c8:	b170      	cbz	r0, 80065e8 <vTaskPlaceOnUnorderedEventList+0x20>
{
 80065ca:	b510      	push	{r4, lr}
 80065cc:	4614      	mov	r4, r2
 80065ce:	4602      	mov	r2, r0
	configASSERT( uxSchedulerSuspended != 0 );
 80065d0:	4b11      	ldr	r3, [pc, #68]	; (8006618 <vTaskPlaceOnUnorderedEventList+0x50>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	b98b      	cbnz	r3, 80065fa <vTaskPlaceOnUnorderedEventList+0x32>
 80065d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065da:	f383 8811 	msr	BASEPRI, r3
 80065de:	f3bf 8f6f 	isb	sy
 80065e2:	f3bf 8f4f 	dsb	sy
 80065e6:	e7fe      	b.n	80065e6 <vTaskPlaceOnUnorderedEventList+0x1e>
 80065e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ec:	f383 8811 	msr	BASEPRI, r3
 80065f0:	f3bf 8f6f 	isb	sy
 80065f4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 80065f8:	e7fe      	b.n	80065f8 <vTaskPlaceOnUnorderedEventList+0x30>
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80065fa:	4b08      	ldr	r3, [pc, #32]	; (800661c <vTaskPlaceOnUnorderedEventList+0x54>)
 80065fc:	6818      	ldr	r0, [r3, #0]
 80065fe:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8006602:	6181      	str	r1, [r0, #24]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006604:	6819      	ldr	r1, [r3, #0]
 8006606:	3118      	adds	r1, #24
 8006608:	4610      	mov	r0, r2
 800660a:	f7ff f85f 	bl	80056cc <vListInsertEnd>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800660e:	2101      	movs	r1, #1
 8006610:	4620      	mov	r0, r4
 8006612:	f7ff fd23 	bl	800605c <prvAddCurrentTaskToDelayedList>
}
 8006616:	bd10      	pop	{r4, pc}
 8006618:	20002f7c 	.word	0x20002f7c
 800661c:	20002b04 	.word	0x20002b04

08006620 <vTaskPlaceOnEventListRestricted>:
	{
 8006620:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8006622:	b178      	cbz	r0, 8006644 <vTaskPlaceOnEventListRestricted+0x24>
 8006624:	460d      	mov	r5, r1
 8006626:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006628:	4a0b      	ldr	r2, [pc, #44]	; (8006658 <vTaskPlaceOnEventListRestricted+0x38>)
 800662a:	6811      	ldr	r1, [r2, #0]
 800662c:	3118      	adds	r1, #24
 800662e:	f7ff f84d 	bl	80056cc <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8006632:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006634:	4621      	mov	r1, r4
 8006636:	bf0c      	ite	eq
 8006638:	4628      	moveq	r0, r5
 800663a:	f04f 30ff 	movne.w	r0, #4294967295
 800663e:	f7ff fd0d 	bl	800605c <prvAddCurrentTaskToDelayedList>
	}
 8006642:	bd38      	pop	{r3, r4, r5, pc}
 8006644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006648:	f383 8811 	msr	BASEPRI, r3
 800664c:	f3bf 8f6f 	isb	sy
 8006650:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8006654:	e7fe      	b.n	8006654 <vTaskPlaceOnEventListRestricted+0x34>
 8006656:	bf00      	nop
 8006658:	20002b04 	.word	0x20002b04

0800665c <xTaskRemoveFromEventList>:
{
 800665c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800665e:	68c3      	ldr	r3, [r0, #12]
 8006660:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8006662:	b32c      	cbz	r4, 80066b0 <xTaskRemoveFromEventList+0x54>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006664:	f104 0518 	add.w	r5, r4, #24
 8006668:	4628      	mov	r0, r5
 800666a:	f7ff f853 	bl	8005714 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800666e:	4b17      	ldr	r3, [pc, #92]	; (80066cc <xTaskRemoveFromEventList+0x70>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	bb33      	cbnz	r3, 80066c2 <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006674:	1d25      	adds	r5, r4, #4
 8006676:	4628      	mov	r0, r5
 8006678:	f7ff f84c 	bl	8005714 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800667c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800667e:	4b14      	ldr	r3, [pc, #80]	; (80066d0 <xTaskRemoveFromEventList+0x74>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4298      	cmp	r0, r3
 8006684:	bf84      	itt	hi
 8006686:	4b12      	ldrhi	r3, [pc, #72]	; (80066d0 <xTaskRemoveFromEventList+0x74>)
 8006688:	6018      	strhi	r0, [r3, #0]
 800668a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800668e:	4629      	mov	r1, r5
 8006690:	4b10      	ldr	r3, [pc, #64]	; (80066d4 <xTaskRemoveFromEventList+0x78>)
 8006692:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006696:	f7ff f819 	bl	80056cc <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800669a:	4b0f      	ldr	r3, [pc, #60]	; (80066d8 <xTaskRemoveFromEventList+0x7c>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80066a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a2:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 80066a4:	bf83      	ittte	hi
 80066a6:	2001      	movhi	r0, #1
 80066a8:	4b0c      	ldrhi	r3, [pc, #48]	; (80066dc <xTaskRemoveFromEventList+0x80>)
 80066aa:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 80066ac:	2000      	movls	r0, #0
}
 80066ae:	bd38      	pop	{r3, r4, r5, pc}
 80066b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b4:	f383 8811 	msr	BASEPRI, r3
 80066b8:	f3bf 8f6f 	isb	sy
 80066bc:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 80066c0:	e7fe      	b.n	80066c0 <xTaskRemoveFromEventList+0x64>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80066c2:	4629      	mov	r1, r5
 80066c4:	4806      	ldr	r0, [pc, #24]	; (80066e0 <xTaskRemoveFromEventList+0x84>)
 80066c6:	f7ff f801 	bl	80056cc <vListInsertEnd>
 80066ca:	e7e6      	b.n	800669a <xTaskRemoveFromEventList+0x3e>
 80066cc:	20002f7c 	.word	0x20002f7c
 80066d0:	20002f84 	.word	0x20002f84
 80066d4:	20002b10 	.word	0x20002b10
 80066d8:	20002b04 	.word	0x20002b04
 80066dc:	20002ffc 	.word	0x20002ffc
 80066e0:	20002fb8 	.word	0x20002fb8

080066e4 <vTaskRemoveFromUnorderedEventList>:
{
 80066e4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80066e6:	4b1c      	ldr	r3, [pc, #112]	; (8006758 <vTaskRemoveFromUnorderedEventList+0x74>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	b943      	cbnz	r3, 80066fe <vTaskRemoveFromUnorderedEventList+0x1a>
 80066ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f0:	f383 8811 	msr	BASEPRI, r3
 80066f4:	f3bf 8f6f 	isb	sy
 80066f8:	f3bf 8f4f 	dsb	sy
 80066fc:	e7fe      	b.n	80066fc <vTaskRemoveFromUnorderedEventList+0x18>
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80066fe:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8006702:	6001      	str	r1, [r0, #0]
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8006704:	68c4      	ldr	r4, [r0, #12]
	configASSERT( pxUnblockedTCB );
 8006706:	b1f4      	cbz	r4, 8006746 <vTaskRemoveFromUnorderedEventList+0x62>
	( void ) uxListRemove( pxEventListItem );
 8006708:	f7ff f804 	bl	8005714 <uxListRemove>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800670c:	1d25      	adds	r5, r4, #4
 800670e:	4628      	mov	r0, r5
 8006710:	f7ff f800 	bl	8005714 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006714:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006716:	4b11      	ldr	r3, [pc, #68]	; (800675c <vTaskRemoveFromUnorderedEventList+0x78>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4298      	cmp	r0, r3
 800671c:	bf84      	itt	hi
 800671e:	4b0f      	ldrhi	r3, [pc, #60]	; (800675c <vTaskRemoveFromUnorderedEventList+0x78>)
 8006720:	6018      	strhi	r0, [r3, #0]
 8006722:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006726:	4629      	mov	r1, r5
 8006728:	4b0d      	ldr	r3, [pc, #52]	; (8006760 <vTaskRemoveFromUnorderedEventList+0x7c>)
 800672a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800672e:	f7fe ffcd 	bl	80056cc <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006732:	4b0c      	ldr	r3, [pc, #48]	; (8006764 <vTaskRemoveFromUnorderedEventList+0x80>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800673a:	429a      	cmp	r2, r3
 800673c:	d902      	bls.n	8006744 <vTaskRemoveFromUnorderedEventList+0x60>
		xYieldPending = pdTRUE;
 800673e:	4b0a      	ldr	r3, [pc, #40]	; (8006768 <vTaskRemoveFromUnorderedEventList+0x84>)
 8006740:	2201      	movs	r2, #1
 8006742:	601a      	str	r2, [r3, #0]
}
 8006744:	bd38      	pop	{r3, r4, r5, pc}
 8006746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674a:	f383 8811 	msr	BASEPRI, r3
 800674e:	f3bf 8f6f 	isb	sy
 8006752:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8006756:	e7fe      	b.n	8006756 <vTaskRemoveFromUnorderedEventList+0x72>
 8006758:	20002f7c 	.word	0x20002f7c
 800675c:	20002f84 	.word	0x20002f84
 8006760:	20002b10 	.word	0x20002b10
 8006764:	20002b04 	.word	0x20002b04
 8006768:	20002ffc 	.word	0x20002ffc

0800676c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800676c:	4b03      	ldr	r3, [pc, #12]	; (800677c <vTaskInternalSetTimeOutState+0x10>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006772:	4b03      	ldr	r3, [pc, #12]	; (8006780 <vTaskInternalSetTimeOutState+0x14>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	6043      	str	r3, [r0, #4]
}
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	20002fb4 	.word	0x20002fb4
 8006780:	20002ff8 	.word	0x20002ff8

08006784 <xTaskCheckForTimeOut>:
{
 8006784:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
 8006786:	b1d0      	cbz	r0, 80067be <xTaskCheckForTimeOut+0x3a>
 8006788:	460c      	mov	r4, r1
 800678a:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800678c:	b301      	cbz	r1, 80067d0 <xTaskCheckForTimeOut+0x4c>
	taskENTER_CRITICAL();
 800678e:	f000 fb19 	bl	8006dc4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8006792:	4b1b      	ldr	r3, [pc, #108]	; (8006800 <xTaskCheckForTimeOut+0x7c>)
 8006794:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8006796:	6823      	ldr	r3, [r4, #0]
 8006798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800679c:	d029      	beq.n	80067f2 <xTaskCheckForTimeOut+0x6e>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800679e:	6869      	ldr	r1, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80067a0:	4818      	ldr	r0, [pc, #96]	; (8006804 <xTaskCheckForTimeOut+0x80>)
 80067a2:	6800      	ldr	r0, [r0, #0]
 80067a4:	f8d5 c000 	ldr.w	ip, [r5]
 80067a8:	4584      	cmp	ip, r0
 80067aa:	d001      	beq.n	80067b0 <xTaskCheckForTimeOut+0x2c>
 80067ac:	4291      	cmp	r1, r2
 80067ae:	d925      	bls.n	80067fc <xTaskCheckForTimeOut+0x78>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80067b0:	1a50      	subs	r0, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80067b2:	4283      	cmp	r3, r0
 80067b4:	d815      	bhi.n	80067e2 <xTaskCheckForTimeOut+0x5e>
			*pxTicksToWait = 0;
 80067b6:	2300      	movs	r3, #0
 80067b8:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80067ba:	2401      	movs	r4, #1
 80067bc:	e01a      	b.n	80067f4 <xTaskCheckForTimeOut+0x70>
 80067be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c2:	f383 8811 	msr	BASEPRI, r3
 80067c6:	f3bf 8f6f 	isb	sy
 80067ca:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 80067ce:	e7fe      	b.n	80067ce <xTaskCheckForTimeOut+0x4a>
 80067d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d4:	f383 8811 	msr	BASEPRI, r3
 80067d8:	f3bf 8f6f 	isb	sy
 80067dc:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 80067e0:	e7fe      	b.n	80067e0 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait -= xElapsedTime;
 80067e2:	1a9b      	subs	r3, r3, r2
 80067e4:	440b      	add	r3, r1
 80067e6:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80067e8:	4628      	mov	r0, r5
 80067ea:	f7ff ffbf 	bl	800676c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80067ee:	2400      	movs	r4, #0
 80067f0:	e000      	b.n	80067f4 <xTaskCheckForTimeOut+0x70>
				xReturn = pdFALSE;
 80067f2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80067f4:	f000 fb08 	bl	8006e08 <vPortExitCritical>
}
 80067f8:	4620      	mov	r0, r4
 80067fa:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 80067fc:	2401      	movs	r4, #1
 80067fe:	e7f9      	b.n	80067f4 <xTaskCheckForTimeOut+0x70>
 8006800:	20002ff8 	.word	0x20002ff8
 8006804:	20002fb4 	.word	0x20002fb4

08006808 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8006808:	4b01      	ldr	r3, [pc, #4]	; (8006810 <vTaskMissedYield+0x8>)
 800680a:	2201      	movs	r2, #1
 800680c:	601a      	str	r2, [r3, #0]
}
 800680e:	4770      	bx	lr
 8006810:	20002ffc 	.word	0x20002ffc

08006814 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8006814:	4b05      	ldr	r3, [pc, #20]	; (800682c <xTaskGetSchedulerState+0x18>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	b133      	cbz	r3, 8006828 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800681a:	4b05      	ldr	r3, [pc, #20]	; (8006830 <xTaskGetSchedulerState+0x1c>)
 800681c:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800681e:	2b00      	cmp	r3, #0
 8006820:	bf0c      	ite	eq
 8006822:	2002      	moveq	r0, #2
 8006824:	2000      	movne	r0, #0
 8006826:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006828:	2001      	movs	r0, #1
	}
 800682a:	4770      	bx	lr
 800682c:	20002fcc 	.word	0x20002fcc
 8006830:	20002f7c 	.word	0x20002f7c

08006834 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8006834:	2800      	cmp	r0, #0
 8006836:	d03b      	beq.n	80068b0 <xTaskPriorityDisinherit+0x7c>
	{
 8006838:	b538      	push	{r3, r4, r5, lr}
 800683a:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800683c:	4b1e      	ldr	r3, [pc, #120]	; (80068b8 <xTaskPriorityDisinherit+0x84>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4283      	cmp	r3, r0
 8006842:	d008      	beq.n	8006856 <xTaskPriorityDisinherit+0x22>
 8006844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006848:	f383 8811 	msr	BASEPRI, r3
 800684c:	f3bf 8f6f 	isb	sy
 8006850:	f3bf 8f4f 	dsb	sy
 8006854:	e7fe      	b.n	8006854 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8006856:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006858:	b943      	cbnz	r3, 800686c <xTaskPriorityDisinherit+0x38>
 800685a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685e:	f383 8811 	msr	BASEPRI, r3
 8006862:	f3bf 8f6f 	isb	sy
 8006866:	f3bf 8f4f 	dsb	sy
 800686a:	e7fe      	b.n	800686a <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800686c:	3b01      	subs	r3, #1
 800686e:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006870:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8006872:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8006874:	4291      	cmp	r1, r2
 8006876:	d01d      	beq.n	80068b4 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006878:	b10b      	cbz	r3, 800687e <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800687a:	2000      	movs	r0, #0
	}
 800687c:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800687e:	1d05      	adds	r5, r0, #4
 8006880:	4628      	mov	r0, r5
 8006882:	f7fe ff47 	bl	8005714 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006886:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006888:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800688a:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 800688e:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8006890:	4b0a      	ldr	r3, [pc, #40]	; (80068bc <xTaskPriorityDisinherit+0x88>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4298      	cmp	r0, r3
 8006896:	bf84      	itt	hi
 8006898:	4b08      	ldrhi	r3, [pc, #32]	; (80068bc <xTaskPriorityDisinherit+0x88>)
 800689a:	6018      	strhi	r0, [r3, #0]
 800689c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80068a0:	4629      	mov	r1, r5
 80068a2:	4b07      	ldr	r3, [pc, #28]	; (80068c0 <xTaskPriorityDisinherit+0x8c>)
 80068a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80068a8:	f7fe ff10 	bl	80056cc <vListInsertEnd>
					xReturn = pdTRUE;
 80068ac:	2001      	movs	r0, #1
 80068ae:	e7e5      	b.n	800687c <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 80068b0:	2000      	movs	r0, #0
	}
 80068b2:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 80068b4:	2000      	movs	r0, #0
 80068b6:	e7e1      	b.n	800687c <xTaskPriorityDisinherit+0x48>
 80068b8:	20002b04 	.word	0x20002b04
 80068bc:	20002f84 	.word	0x20002f84
 80068c0:	20002b10 	.word	0x20002b10

080068c4 <uxTaskResetEventItemValue>:
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80068c4:	4b04      	ldr	r3, [pc, #16]	; (80068d8 <uxTaskResetEventItemValue+0x14>)
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	6990      	ldr	r0, [r2, #24]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068ca:	6819      	ldr	r1, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80068d0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80068d4:	6193      	str	r3, [r2, #24]
}
 80068d6:	4770      	bx	lr
 80068d8:	20002b04 	.word	0x20002b04

080068dc <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80068dc:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80068de:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80068e0:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 80068e2:	4291      	cmp	r1, r2
 80068e4:	d80c      	bhi.n	8006900 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068e6:	1ad2      	subs	r2, r2, r3
 80068e8:	6983      	ldr	r3, [r0, #24]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d301      	bcc.n	80068f2 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80068ee:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 80068f0:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80068f2:	1d01      	adds	r1, r0, #4
 80068f4:	4b09      	ldr	r3, [pc, #36]	; (800691c <prvInsertTimerInActiveList+0x40>)
 80068f6:	6818      	ldr	r0, [r3, #0]
 80068f8:	f7fe fef3 	bl	80056e2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80068fc:	2000      	movs	r0, #0
 80068fe:	e7f7      	b.n	80068f0 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006900:	429a      	cmp	r2, r3
 8006902:	d201      	bcs.n	8006908 <prvInsertTimerInActiveList+0x2c>
 8006904:	4299      	cmp	r1, r3
 8006906:	d206      	bcs.n	8006916 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006908:	1d01      	adds	r1, r0, #4
 800690a:	4b05      	ldr	r3, [pc, #20]	; (8006920 <prvInsertTimerInActiveList+0x44>)
 800690c:	6818      	ldr	r0, [r3, #0]
 800690e:	f7fe fee8 	bl	80056e2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8006912:	2000      	movs	r0, #0
 8006914:	e7ec      	b.n	80068f0 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 8006916:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8006918:	e7ea      	b.n	80068f0 <prvInsertTimerInActiveList+0x14>
 800691a:	bf00      	nop
 800691c:	20003004 	.word	0x20003004
 8006920:	20003000 	.word	0x20003000

08006924 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006924:	b530      	push	{r4, r5, lr}
 8006926:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006928:	f000 fa4c 	bl	8006dc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800692c:	4b11      	ldr	r3, [pc, #68]	; (8006974 <prvCheckForValidListAndQueue+0x50>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	b11b      	cbz	r3, 800693a <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006932:	f000 fa69 	bl	8006e08 <vPortExitCritical>
}
 8006936:	b003      	add	sp, #12
 8006938:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800693a:	4d0f      	ldr	r5, [pc, #60]	; (8006978 <prvCheckForValidListAndQueue+0x54>)
 800693c:	4628      	mov	r0, r5
 800693e:	f7fe feb7 	bl	80056b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006942:	4c0e      	ldr	r4, [pc, #56]	; (800697c <prvCheckForValidListAndQueue+0x58>)
 8006944:	4620      	mov	r0, r4
 8006946:	f7fe feb3 	bl	80056b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800694a:	4b0d      	ldr	r3, [pc, #52]	; (8006980 <prvCheckForValidListAndQueue+0x5c>)
 800694c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800694e:	4b0d      	ldr	r3, [pc, #52]	; (8006984 <prvCheckForValidListAndQueue+0x60>)
 8006950:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006952:	2300      	movs	r3, #0
 8006954:	9300      	str	r3, [sp, #0]
 8006956:	4b0c      	ldr	r3, [pc, #48]	; (8006988 <prvCheckForValidListAndQueue+0x64>)
 8006958:	4a0c      	ldr	r2, [pc, #48]	; (800698c <prvCheckForValidListAndQueue+0x68>)
 800695a:	2110      	movs	r1, #16
 800695c:	200a      	movs	r0, #10
 800695e:	f7fe ffc0 	bl	80058e2 <xQueueGenericCreateStatic>
 8006962:	4b04      	ldr	r3, [pc, #16]	; (8006974 <prvCheckForValidListAndQueue+0x50>)
 8006964:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 8006966:	2800      	cmp	r0, #0
 8006968:	d0e3      	beq.n	8006932 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800696a:	4909      	ldr	r1, [pc, #36]	; (8006990 <prvCheckForValidListAndQueue+0x6c>)
 800696c:	f7ff f9f4 	bl	8005d58 <vQueueAddToRegistry>
 8006970:	e7df      	b.n	8006932 <prvCheckForValidListAndQueue+0xe>
 8006972:	bf00      	nop
 8006974:	20003124 	.word	0x20003124
 8006978:	200030a8 	.word	0x200030a8
 800697c:	200030bc 	.word	0x200030bc
 8006980:	20003000 	.word	0x20003000
 8006984:	20003004 	.word	0x20003004
 8006988:	200030d4 	.word	0x200030d4
 800698c:	20003008 	.word	0x20003008
 8006990:	080078d4 	.word	0x080078d4

08006994 <xTimerCreateTimerTask>:
{
 8006994:	b510      	push	{r4, lr}
 8006996:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8006998:	f7ff ffc4 	bl	8006924 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800699c:	4b12      	ldr	r3, [pc, #72]	; (80069e8 <xTimerCreateTimerTask+0x54>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	b1cb      	cbz	r3, 80069d6 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80069a2:	2400      	movs	r4, #0
 80069a4:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80069a6:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80069a8:	aa07      	add	r2, sp, #28
 80069aa:	a906      	add	r1, sp, #24
 80069ac:	a805      	add	r0, sp, #20
 80069ae:	f7fe fd5d 	bl	800546c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80069b2:	9b05      	ldr	r3, [sp, #20]
 80069b4:	9302      	str	r3, [sp, #8]
 80069b6:	9b06      	ldr	r3, [sp, #24]
 80069b8:	9301      	str	r3, [sp, #4]
 80069ba:	2302      	movs	r3, #2
 80069bc:	9300      	str	r3, [sp, #0]
 80069be:	4623      	mov	r3, r4
 80069c0:	9a07      	ldr	r2, [sp, #28]
 80069c2:	490a      	ldr	r1, [pc, #40]	; (80069ec <xTimerCreateTimerTask+0x58>)
 80069c4:	480a      	ldr	r0, [pc, #40]	; (80069f0 <xTimerCreateTimerTask+0x5c>)
 80069c6:	f7ff fb87 	bl	80060d8 <xTaskCreateStatic>
 80069ca:	4b0a      	ldr	r3, [pc, #40]	; (80069f4 <xTimerCreateTimerTask+0x60>)
 80069cc:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80069ce:	b110      	cbz	r0, 80069d6 <xTimerCreateTimerTask+0x42>
}
 80069d0:	2001      	movs	r0, #1
 80069d2:	b008      	add	sp, #32
 80069d4:	bd10      	pop	{r4, pc}
 80069d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069da:	f383 8811 	msr	BASEPRI, r3
 80069de:	f3bf 8f6f 	isb	sy
 80069e2:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 80069e6:	e7fe      	b.n	80069e6 <xTimerCreateTimerTask+0x52>
 80069e8:	20003124 	.word	0x20003124
 80069ec:	080078dc 	.word	0x080078dc
 80069f0:	08006b05 	.word	0x08006b05
 80069f4:	20003128 	.word	0x20003128

080069f8 <xTimerGenericCommand>:
	configASSERT( xTimer );
 80069f8:	b1d8      	cbz	r0, 8006a32 <xTimerGenericCommand+0x3a>
 80069fa:	469c      	mov	ip, r3
 80069fc:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 80069fe:	4815      	ldr	r0, [pc, #84]	; (8006a54 <xTimerGenericCommand+0x5c>)
 8006a00:	6800      	ldr	r0, [r0, #0]
 8006a02:	b328      	cbz	r0, 8006a50 <xTimerGenericCommand+0x58>
{
 8006a04:	b500      	push	{lr}
 8006a06:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8006a08:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006a0a:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006a0c:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006a0e:	2905      	cmp	r1, #5
 8006a10:	dc18      	bgt.n	8006a44 <xTimerGenericCommand+0x4c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006a12:	f7ff feff 	bl	8006814 <xTaskGetSchedulerState>
 8006a16:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006a18:	f04f 0300 	mov.w	r3, #0
 8006a1c:	bf0c      	ite	eq
 8006a1e:	9a06      	ldreq	r2, [sp, #24]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006a20:	461a      	movne	r2, r3
 8006a22:	4669      	mov	r1, sp
 8006a24:	480b      	ldr	r0, [pc, #44]	; (8006a54 <xTimerGenericCommand+0x5c>)
 8006a26:	6800      	ldr	r0, [r0, #0]
 8006a28:	f7fe ffb1 	bl	800598e <xQueueGenericSend>
}
 8006a2c:	b005      	add	sp, #20
 8006a2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a36:	f383 8811 	msr	BASEPRI, r3
 8006a3a:	f3bf 8f6f 	isb	sy
 8006a3e:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8006a42:	e7fe      	b.n	8006a42 <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006a44:	2300      	movs	r3, #0
 8006a46:	4662      	mov	r2, ip
 8006a48:	4669      	mov	r1, sp
 8006a4a:	f7ff f86c 	bl	8005b26 <xQueueGenericSendFromISR>
 8006a4e:	e7ed      	b.n	8006a2c <xTimerGenericCommand+0x34>
BaseType_t xReturn = pdFAIL;
 8006a50:	2000      	movs	r0, #0
}
 8006a52:	4770      	bx	lr
 8006a54:	20003124 	.word	0x20003124

08006a58 <prvSampleTimeNow>:
{
 8006a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a5c:	b082      	sub	sp, #8
 8006a5e:	4682      	mov	sl, r0
	xTimeNow = xTaskGetTickCount();
 8006a60:	f7ff fbfc 	bl	800625c <xTaskGetTickCount>
 8006a64:	4606      	mov	r6, r0
	if( xTimeNow < xLastTime )
 8006a66:	4b24      	ldr	r3, [pc, #144]	; (8006af8 <prvSampleTimeNow+0xa0>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4283      	cmp	r3, r0
 8006a6c:	d808      	bhi.n	8006a80 <prvSampleTimeNow+0x28>
		*pxTimerListsWereSwitched = pdFALSE;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	f8ca 3000 	str.w	r3, [sl]
	xLastTime = xTimeNow;
 8006a74:	4b20      	ldr	r3, [pc, #128]	; (8006af8 <prvSampleTimeNow+0xa0>)
 8006a76:	601e      	str	r6, [r3, #0]
}
 8006a78:	4630      	mov	r0, r6
 8006a7a:	b002      	add	sp, #8
 8006a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a80:	4d1e      	ldr	r5, [pc, #120]	; (8006afc <prvSampleTimeNow+0xa4>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a82:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a86:	682b      	ldr	r3, [r5, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	b35a      	cbz	r2, 8006ae4 <prvSampleTimeNow+0x8c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	681f      	ldr	r7, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a90:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a92:	f104 0904 	add.w	r9, r4, #4
 8006a96:	4648      	mov	r0, r9
 8006a98:	f7fe fe3c 	bl	8005714 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006aa2:	69e3      	ldr	r3, [r4, #28]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d1ee      	bne.n	8006a86 <prvSampleTimeNow+0x2e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006aa8:	69a3      	ldr	r3, [r4, #24]
 8006aaa:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 8006aac:	429f      	cmp	r7, r3
 8006aae:	d206      	bcs.n	8006abe <prvSampleTimeNow+0x66>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006ab0:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ab2:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ab4:	4649      	mov	r1, r9
 8006ab6:	6828      	ldr	r0, [r5, #0]
 8006ab8:	f7fe fe13 	bl	80056e2 <vListInsert>
 8006abc:	e7e3      	b.n	8006a86 <prvSampleTimeNow+0x2e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006abe:	f8cd 8000 	str.w	r8, [sp]
 8006ac2:	4643      	mov	r3, r8
 8006ac4:	463a      	mov	r2, r7
 8006ac6:	4641      	mov	r1, r8
 8006ac8:	4620      	mov	r0, r4
 8006aca:	f7ff ff95 	bl	80069f8 <xTimerGenericCommand>
				configASSERT( xResult );
 8006ace:	2800      	cmp	r0, #0
 8006ad0:	d1d9      	bne.n	8006a86 <prvSampleTimeNow+0x2e>
 8006ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad6:	f383 8811 	msr	BASEPRI, r3
 8006ada:	f3bf 8f6f 	isb	sy
 8006ade:	f3bf 8f4f 	dsb	sy
 8006ae2:	e7fe      	b.n	8006ae2 <prvSampleTimeNow+0x8a>
	pxCurrentTimerList = pxOverflowTimerList;
 8006ae4:	4a06      	ldr	r2, [pc, #24]	; (8006b00 <prvSampleTimeNow+0xa8>)
 8006ae6:	6810      	ldr	r0, [r2, #0]
 8006ae8:	4904      	ldr	r1, [pc, #16]	; (8006afc <prvSampleTimeNow+0xa4>)
 8006aea:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8006aec:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8006aee:	2301      	movs	r3, #1
 8006af0:	f8ca 3000 	str.w	r3, [sl]
 8006af4:	e7be      	b.n	8006a74 <prvSampleTimeNow+0x1c>
 8006af6:	bf00      	nop
 8006af8:	200030d0 	.word	0x200030d0
 8006afc:	20003000 	.word	0x20003000
 8006b00:	20003004 	.word	0x20003004

08006b04 <prvTimerTask>:
{
 8006b04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b08:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006b0a:	4e74      	ldr	r6, [pc, #464]	; (8006cdc <prvTimerTask+0x1d8>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006b0c:	4d74      	ldr	r5, [pc, #464]	; (8006ce0 <prvTimerTask+0x1dc>)
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006b0e:	4f75      	ldr	r7, [pc, #468]	; (8006ce4 <prvTimerTask+0x1e0>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006b10:	6833      	ldr	r3, [r6, #0]
 8006b12:	f8d3 8000 	ldr.w	r8, [r3]
	if( *pxListWasEmpty == pdFALSE )
 8006b16:	f1b8 0f00 	cmp.w	r8, #0
 8006b1a:	d00f      	beq.n	8006b3c <prvTimerTask+0x38>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 8006b22:	f7ff fb93 	bl	800624c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006b26:	a804      	add	r0, sp, #16
 8006b28:	f7ff ff96 	bl	8006a58 <prvSampleTimeNow>
 8006b2c:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8006b2e:	9b04      	ldr	r3, [sp, #16]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d154      	bne.n	8006bde <prvTimerTask+0xda>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006b34:	4580      	cmp	r8, r0
 8006b36:	d923      	bls.n	8006b80 <prvTimerTask+0x7c>
 8006b38:	2200      	movs	r2, #0
 8006b3a:	e00d      	b.n	8006b58 <prvTimerTask+0x54>
	vTaskSuspendAll();
 8006b3c:	f7ff fb86 	bl	800624c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006b40:	a804      	add	r0, sp, #16
 8006b42:	f7ff ff89 	bl	8006a58 <prvSampleTimeNow>
 8006b46:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8006b48:	9b04      	ldr	r3, [sp, #16]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d147      	bne.n	8006bde <prvTimerTask+0xda>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	fab2 f282 	clz	r2, r2
 8006b56:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006b58:	eba8 0104 	sub.w	r1, r8, r4
 8006b5c:	6828      	ldr	r0, [r5, #0]
 8006b5e:	f7ff f90f 	bl	8005d80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006b62:	f7ff fc1b 	bl	800639c <xTaskResumeAll>
 8006b66:	2800      	cmp	r0, #0
 8006b68:	d13b      	bne.n	8006be2 <prvTimerTask+0xde>
					portYIELD_WITHIN_API();
 8006b6a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b72:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	f3bf 8f6f 	isb	sy
 8006b7e:	e030      	b.n	8006be2 <prvTimerTask+0xde>
				( void ) xTaskResumeAll();
 8006b80:	f7ff fc0c 	bl	800639c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b84:	6833      	ldr	r3, [r6, #0]
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	f8d3 900c 	ldr.w	r9, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b8c:	f109 0004 	add.w	r0, r9, #4
 8006b90:	f7fe fdc0 	bl	8005714 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006b94:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d004      	beq.n	8006ba6 <prvTimerTask+0xa2>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b9c:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8006ba0:	4648      	mov	r0, r9
 8006ba2:	4798      	blx	r3
}
 8006ba4:	e01d      	b.n	8006be2 <prvTimerTask+0xde>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006ba6:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8006baa:	4643      	mov	r3, r8
 8006bac:	4622      	mov	r2, r4
 8006bae:	4441      	add	r1, r8
 8006bb0:	4648      	mov	r0, r9
 8006bb2:	f7ff fe93 	bl	80068dc <prvInsertTimerInActiveList>
 8006bb6:	2800      	cmp	r0, #0
 8006bb8:	d0f0      	beq.n	8006b9c <prvTimerTask+0x98>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006bba:	2100      	movs	r1, #0
 8006bbc:	9100      	str	r1, [sp, #0]
 8006bbe:	460b      	mov	r3, r1
 8006bc0:	4642      	mov	r2, r8
 8006bc2:	4648      	mov	r0, r9
 8006bc4:	f7ff ff18 	bl	80069f8 <xTimerGenericCommand>
			configASSERT( xResult );
 8006bc8:	2800      	cmp	r0, #0
 8006bca:	d1e7      	bne.n	8006b9c <prvTimerTask+0x98>
 8006bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd0:	f383 8811 	msr	BASEPRI, r3
 8006bd4:	f3bf 8f6f 	isb	sy
 8006bd8:	f3bf 8f4f 	dsb	sy
 8006bdc:	e7fe      	b.n	8006bdc <prvTimerTask+0xd8>
			( void ) xTaskResumeAll();
 8006bde:	f7ff fbdd 	bl	800639c <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006be2:	2400      	movs	r4, #0
}
 8006be4:	e006      	b.n	8006bf4 <prvTimerTask+0xf0>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006be6:	9907      	ldr	r1, [sp, #28]
 8006be8:	9806      	ldr	r0, [sp, #24]
 8006bea:	9b05      	ldr	r3, [sp, #20]
 8006bec:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006bee:	9b04      	ldr	r3, [sp, #16]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	da09      	bge.n	8006c08 <prvTimerTask+0x104>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006bf4:	4622      	mov	r2, r4
 8006bf6:	a904      	add	r1, sp, #16
 8006bf8:	6828      	ldr	r0, [r5, #0]
 8006bfa:	f7fe fffa 	bl	8005bf2 <xQueueReceive>
 8006bfe:	2800      	cmp	r0, #0
 8006c00:	d086      	beq.n	8006b10 <prvTimerTask+0xc>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006c02:	9b04      	ldr	r3, [sp, #16]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	dbee      	blt.n	8006be6 <prvTimerTask+0xe2>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006c08:	f8dd 8018 	ldr.w	r8, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006c0c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8006c10:	b11b      	cbz	r3, 8006c1a <prvTimerTask+0x116>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c12:	f108 0004 	add.w	r0, r8, #4
 8006c16:	f7fe fd7d 	bl	8005714 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c1a:	a803      	add	r0, sp, #12
 8006c1c:	f7ff ff1c 	bl	8006a58 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8006c20:	9b04      	ldr	r3, [sp, #16]
 8006c22:	2b09      	cmp	r3, #9
 8006c24:	d8e6      	bhi.n	8006bf4 <prvTimerTask+0xf0>
 8006c26:	a201      	add	r2, pc, #4	; (adr r2, 8006c2c <prvTimerTask+0x128>)
 8006c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2c:	08006c55 	.word	0x08006c55
 8006c30:	08006c55 	.word	0x08006c55
 8006c34:	08006c55 	.word	0x08006c55
 8006c38:	08006bf5 	.word	0x08006bf5
 8006c3c:	08006ca3 	.word	0x08006ca3
 8006c40:	08006ccb 	.word	0x08006ccb
 8006c44:	08006c55 	.word	0x08006c55
 8006c48:	08006c55 	.word	0x08006c55
 8006c4c:	08006bf5 	.word	0x08006bf5
 8006c50:	08006ca3 	.word	0x08006ca3
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006c54:	9b05      	ldr	r3, [sp, #20]
 8006c56:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	4419      	add	r1, r3
 8006c5e:	4640      	mov	r0, r8
 8006c60:	f7ff fe3c 	bl	80068dc <prvInsertTimerInActiveList>
 8006c64:	2800      	cmp	r0, #0
 8006c66:	d0c5      	beq.n	8006bf4 <prvTimerTask+0xf0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c68:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8006c6c:	4640      	mov	r0, r8
 8006c6e:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006c70:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d1bd      	bne.n	8006bf4 <prvTimerTask+0xf0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006c78:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8006c7c:	9400      	str	r4, [sp, #0]
 8006c7e:	4623      	mov	r3, r4
 8006c80:	9905      	ldr	r1, [sp, #20]
 8006c82:	440a      	add	r2, r1
 8006c84:	4621      	mov	r1, r4
 8006c86:	4640      	mov	r0, r8
 8006c88:	f7ff feb6 	bl	80069f8 <xTimerGenericCommand>
							configASSERT( xResult );
 8006c8c:	2800      	cmp	r0, #0
 8006c8e:	d1b1      	bne.n	8006bf4 <prvTimerTask+0xf0>
 8006c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c94:	f383 8811 	msr	BASEPRI, r3
 8006c98:	f3bf 8f6f 	isb	sy
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	e7fe      	b.n	8006ca0 <prvTimerTask+0x19c>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006ca2:	9905      	ldr	r1, [sp, #20]
 8006ca4:	f8c8 1018 	str.w	r1, [r8, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006ca8:	b131      	cbz	r1, 8006cb8 <prvTimerTask+0x1b4>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006caa:	4603      	mov	r3, r0
 8006cac:	4602      	mov	r2, r0
 8006cae:	4401      	add	r1, r0
 8006cb0:	4640      	mov	r0, r8
 8006cb2:	f7ff fe13 	bl	80068dc <prvInsertTimerInActiveList>
					break;
 8006cb6:	e79d      	b.n	8006bf4 <prvTimerTask+0xf0>
 8006cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cbc:	f383 8811 	msr	BASEPRI, r3
 8006cc0:	f3bf 8f6f 	isb	sy
 8006cc4:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006cc8:	e7fe      	b.n	8006cc8 <prvTimerTask+0x1c4>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006cca:	f898 302c 	ldrb.w	r3, [r8, #44]	; 0x2c
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d190      	bne.n	8006bf4 <prvTimerTask+0xf0>
							vPortFree( pxTimer );
 8006cd2:	4640      	mov	r0, r8
 8006cd4:	f000 fa56 	bl	8007184 <vPortFree>
 8006cd8:	e78c      	b.n	8006bf4 <prvTimerTask+0xf0>
 8006cda:	bf00      	nop
 8006cdc:	20003000 	.word	0x20003000
 8006ce0:	20003124 	.word	0x20003124
 8006ce4:	20003004 	.word	0x20003004

08006ce8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006ce8:	b510      	push	{r4, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	4614      	mov	r4, r2
 8006cee:	461a      	mov	r2, r3
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8006cf0:	f06f 0301 	mvn.w	r3, #1
 8006cf4:	9300      	str	r3, [sp, #0]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8006cf6:	9001      	str	r0, [sp, #4]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8006cf8:	9102      	str	r1, [sp, #8]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8006cfa:	9403      	str	r4, [sp, #12]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	4669      	mov	r1, sp
 8006d00:	4802      	ldr	r0, [pc, #8]	; (8006d0c <xTimerPendFunctionCallFromISR+0x24>)
 8006d02:	6800      	ldr	r0, [r0, #0]
 8006d04:	f7fe ff0f 	bl	8005b26 <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
 8006d08:	b004      	add	sp, #16
 8006d0a:	bd10      	pop	{r4, pc}
 8006d0c:	20003124 	.word	0x20003124

08006d10 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006d10:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8006d12:	2300      	movs	r3, #0
 8006d14:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006d16:	4b0d      	ldr	r3, [pc, #52]	; (8006d4c <prvTaskExitError+0x3c>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d1e:	d008      	beq.n	8006d32 <prvTaskExitError+0x22>
 8006d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d24:	f383 8811 	msr	BASEPRI, r3
 8006d28:	f3bf 8f6f 	isb	sy
 8006d2c:	f3bf 8f4f 	dsb	sy
 8006d30:	e7fe      	b.n	8006d30 <prvTaskExitError+0x20>
 8006d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d36:	f383 8811 	msr	BASEPRI, r3
 8006d3a:	f3bf 8f6f 	isb	sy
 8006d3e:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006d42:	9b01      	ldr	r3, [sp, #4]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d0fc      	beq.n	8006d42 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006d48:	b002      	add	sp, #8
 8006d4a:	4770      	bx	lr
 8006d4c:	20000014 	.word	0x20000014

08006d50 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006d50:	4806      	ldr	r0, [pc, #24]	; (8006d6c <prvPortStartFirstTask+0x1c>)
 8006d52:	6800      	ldr	r0, [r0, #0]
 8006d54:	6800      	ldr	r0, [r0, #0]
 8006d56:	f380 8808 	msr	MSP, r0
 8006d5a:	b662      	cpsie	i
 8006d5c:	b661      	cpsie	f
 8006d5e:	f3bf 8f4f 	dsb	sy
 8006d62:	f3bf 8f6f 	isb	sy
 8006d66:	df00      	svc	0
 8006d68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006d6a:	0000      	.short	0x0000
 8006d6c:	e000ed08 	.word	0xe000ed08

08006d70 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006d70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d74:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006d78:	f021 0101 	bic.w	r1, r1, #1
 8006d7c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006d80:	4b03      	ldr	r3, [pc, #12]	; (8006d90 <pxPortInitialiseStack+0x20>)
 8006d82:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006d86:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8006d8a:	3840      	subs	r0, #64	; 0x40
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	08006d11 	.word	0x08006d11
	...

08006da0 <SVC_Handler>:
	__asm volatile (
 8006da0:	4b07      	ldr	r3, [pc, #28]	; (8006dc0 <pxCurrentTCBConst2>)
 8006da2:	6819      	ldr	r1, [r3, #0]
 8006da4:	6808      	ldr	r0, [r1, #0]
 8006da6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006daa:	f380 8809 	msr	PSP, r0
 8006dae:	f3bf 8f6f 	isb	sy
 8006db2:	f04f 0000 	mov.w	r0, #0
 8006db6:	f380 8811 	msr	BASEPRI, r0
 8006dba:	f04e 0e0d 	orr.w	lr, lr, #13
 8006dbe:	4770      	bx	lr

08006dc0 <pxCurrentTCBConst2>:
 8006dc0:	20002b04 	.word	0x20002b04

08006dc4 <vPortEnterCritical>:
 8006dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc8:	f383 8811 	msr	BASEPRI, r3
 8006dcc:	f3bf 8f6f 	isb	sy
 8006dd0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006dd4:	4a0b      	ldr	r2, [pc, #44]	; (8006e04 <vPortEnterCritical+0x40>)
 8006dd6:	6813      	ldr	r3, [r2, #0]
 8006dd8:	3301      	adds	r3, #1
 8006dda:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d000      	beq.n	8006de2 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8006de0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006de2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006de6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8006dea:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006dee:	d0f7      	beq.n	8006de0 <vPortEnterCritical+0x1c>
 8006df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df4:	f383 8811 	msr	BASEPRI, r3
 8006df8:	f3bf 8f6f 	isb	sy
 8006dfc:	f3bf 8f4f 	dsb	sy
 8006e00:	e7fe      	b.n	8006e00 <vPortEnterCritical+0x3c>
 8006e02:	bf00      	nop
 8006e04:	20000014 	.word	0x20000014

08006e08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8006e08:	4b09      	ldr	r3, [pc, #36]	; (8006e30 <vPortExitCritical+0x28>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	b943      	cbnz	r3, 8006e20 <vPortExitCritical+0x18>
 8006e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e12:	f383 8811 	msr	BASEPRI, r3
 8006e16:	f3bf 8f6f 	isb	sy
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	e7fe      	b.n	8006e1e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8006e20:	3b01      	subs	r3, #1
 8006e22:	4a03      	ldr	r2, [pc, #12]	; (8006e30 <vPortExitCritical+0x28>)
 8006e24:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e26:	b90b      	cbnz	r3, 8006e2c <vPortExitCritical+0x24>
	__asm volatile
 8006e28:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	20000014 	.word	0x20000014
	...

08006e40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e40:	f3ef 8009 	mrs	r0, PSP
 8006e44:	f3bf 8f6f 	isb	sy
 8006e48:	4b0d      	ldr	r3, [pc, #52]	; (8006e80 <pxCurrentTCBConst>)
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006e50:	6010      	str	r0, [r2, #0]
 8006e52:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006e56:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006e5a:	f380 8811 	msr	BASEPRI, r0
 8006e5e:	f7ff fb45 	bl	80064ec <vTaskSwitchContext>
 8006e62:	f04f 0000 	mov.w	r0, #0
 8006e66:	f380 8811 	msr	BASEPRI, r0
 8006e6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006e6e:	6819      	ldr	r1, [r3, #0]
 8006e70:	6808      	ldr	r0, [r1, #0]
 8006e72:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006e76:	f380 8809 	msr	PSP, r0
 8006e7a:	f3bf 8f6f 	isb	sy
 8006e7e:	4770      	bx	lr

08006e80 <pxCurrentTCBConst>:
 8006e80:	20002b04 	.word	0x20002b04

08006e84 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006e84:	b508      	push	{r3, lr}
	__asm volatile
 8006e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8a:	f383 8811 	msr	BASEPRI, r3
 8006e8e:	f3bf 8f6f 	isb	sy
 8006e92:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006e96:	f7ff f9e7 	bl	8006268 <xTaskIncrementTick>
 8006e9a:	b128      	cbz	r0, 8006ea8 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006e9c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006ea0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ea4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006eae:	bd08      	pop	{r3, pc}

08006eb0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006eb0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006eb8:	6193      	str	r3, [r2, #24]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006eba:	4b05      	ldr	r3, [pc, #20]	; (8006ed0 <vPortSetupTimerInterrupt+0x20>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4905      	ldr	r1, [pc, #20]	; (8006ed4 <vPortSetupTimerInterrupt+0x24>)
 8006ec0:	fba1 1303 	umull	r1, r3, r1, r3
 8006ec4:	099b      	lsrs	r3, r3, #6
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006eca:	2307      	movs	r3, #7
 8006ecc:	6113      	str	r3, [r2, #16]
}
 8006ece:	4770      	bx	lr
 8006ed0:	20000000 	.word	0x20000000
 8006ed4:	10624dd3 	.word	0x10624dd3

08006ed8 <xPortStartScheduler>:
{
 8006ed8:	b510      	push	{r4, lr}
 8006eda:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006edc:	4b2b      	ldr	r3, [pc, #172]	; (8006f8c <xPortStartScheduler+0xb4>)
 8006ede:	781a      	ldrb	r2, [r3, #0]
 8006ee0:	b2d2      	uxtb	r2, r2
 8006ee2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006ee4:	22ff      	movs	r2, #255	; 0xff
 8006ee6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006ef0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006ef4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ef8:	4a25      	ldr	r2, [pc, #148]	; (8006f90 <xPortStartScheduler+0xb8>)
 8006efa:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006efc:	4b25      	ldr	r3, [pc, #148]	; (8006f94 <xPortStartScheduler+0xbc>)
 8006efe:	2207      	movs	r2, #7
 8006f00:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f02:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006f06:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006f0a:	d011      	beq.n	8006f30 <xPortStartScheduler+0x58>
 8006f0c:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006f0e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006f12:	005b      	lsls	r3, r3, #1
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f1a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006f1e:	4611      	mov	r1, r2
 8006f20:	3a01      	subs	r2, #1
 8006f22:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006f26:	d1f2      	bne.n	8006f0e <xPortStartScheduler+0x36>
 8006f28:	4b1a      	ldr	r3, [pc, #104]	; (8006f94 <xPortStartScheduler+0xbc>)
 8006f2a:	6019      	str	r1, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006f2c:	2903      	cmp	r1, #3
 8006f2e:	d008      	beq.n	8006f42 <xPortStartScheduler+0x6a>
	__asm volatile
 8006f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f34:	f383 8811 	msr	BASEPRI, r3
 8006f38:	f3bf 8f6f 	isb	sy
 8006f3c:	f3bf 8f4f 	dsb	sy
 8006f40:	e7fe      	b.n	8006f40 <xPortStartScheduler+0x68>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006f42:	4b14      	ldr	r3, [pc, #80]	; (8006f94 <xPortStartScheduler+0xbc>)
 8006f44:	f44f 7240 	mov.w	r2, #768	; 0x300
 8006f48:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006f4a:	9b01      	ldr	r3, [sp, #4]
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	4a0f      	ldr	r2, [pc, #60]	; (8006f8c <xPortStartScheduler+0xb4>)
 8006f50:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006f52:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006f56:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8006f5a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8006f5e:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006f62:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8006f66:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8006f6a:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8006f6e:	f7ff ff9f 	bl	8006eb0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8006f72:	2400      	movs	r4, #0
 8006f74:	4b08      	ldr	r3, [pc, #32]	; (8006f98 <xPortStartScheduler+0xc0>)
 8006f76:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8006f78:	f7ff feea 	bl	8006d50 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8006f7c:	f7ff fab6 	bl	80064ec <vTaskSwitchContext>
	prvTaskExitError();
 8006f80:	f7ff fec6 	bl	8006d10 <prvTaskExitError>
}
 8006f84:	4620      	mov	r0, r4
 8006f86:	b002      	add	sp, #8
 8006f88:	bd10      	pop	{r4, pc}
 8006f8a:	bf00      	nop
 8006f8c:	e000e400 	.word	0xe000e400
 8006f90:	2000312c 	.word	0x2000312c
 8006f94:	20003130 	.word	0x20003130
 8006f98:	20000014 	.word	0x20000014

08006f9c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006f9c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006fa0:	2b0f      	cmp	r3, #15
 8006fa2:	d90f      	bls.n	8006fc4 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006fa4:	4a11      	ldr	r2, [pc, #68]	; (8006fec <vPortValidateInterruptPriority+0x50>)
 8006fa6:	5c9b      	ldrb	r3, [r3, r2]
 8006fa8:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006faa:	4a11      	ldr	r2, [pc, #68]	; (8006ff0 <vPortValidateInterruptPriority+0x54>)
 8006fac:	7812      	ldrb	r2, [r2, #0]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d908      	bls.n	8006fc4 <vPortValidateInterruptPriority+0x28>
 8006fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb6:	f383 8811 	msr	BASEPRI, r3
 8006fba:	f3bf 8f6f 	isb	sy
 8006fbe:	f3bf 8f4f 	dsb	sy
 8006fc2:	e7fe      	b.n	8006fc2 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006fc4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006fc8:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8006fcc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006fd0:	4a08      	ldr	r2, [pc, #32]	; (8006ff4 <vPortValidateInterruptPriority+0x58>)
 8006fd2:	6812      	ldr	r2, [r2, #0]
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d908      	bls.n	8006fea <vPortValidateInterruptPriority+0x4e>
 8006fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fdc:	f383 8811 	msr	BASEPRI, r3
 8006fe0:	f3bf 8f6f 	isb	sy
 8006fe4:	f3bf 8f4f 	dsb	sy
 8006fe8:	e7fe      	b.n	8006fe8 <vPortValidateInterruptPriority+0x4c>
	}
 8006fea:	4770      	bx	lr
 8006fec:	e000e3f0 	.word	0xe000e3f0
 8006ff0:	2000312c 	.word	0x2000312c
 8006ff4:	20003130 	.word	0x20003130

08006ff8 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ff8:	4b15      	ldr	r3, [pc, #84]	; (8007050 <prvInsertBlockIntoFreeList+0x58>)
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4283      	cmp	r3, r0
 8007000:	d3fb      	bcc.n	8006ffa <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007002:	6851      	ldr	r1, [r2, #4]
 8007004:	eb02 0c01 	add.w	ip, r2, r1
 8007008:	4560      	cmp	r0, ip
 800700a:	d009      	beq.n	8007020 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800700c:	6841      	ldr	r1, [r0, #4]
 800700e:	eb00 0c01 	add.w	ip, r0, r1
 8007012:	4563      	cmp	r3, ip
 8007014:	d009      	beq.n	800702a <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007016:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007018:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800701a:	bf18      	it	ne
 800701c:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 800701e:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007020:	6840      	ldr	r0, [r0, #4]
 8007022:	4401      	add	r1, r0
 8007024:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8007026:	4610      	mov	r0, r2
 8007028:	e7f0      	b.n	800700c <prvInsertBlockIntoFreeList+0x14>
{
 800702a:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800702c:	4c09      	ldr	r4, [pc, #36]	; (8007054 <prvInsertBlockIntoFreeList+0x5c>)
 800702e:	6824      	ldr	r4, [r4, #0]
 8007030:	42a3      	cmp	r3, r4
 8007032:	d00a      	beq.n	800704a <prvInsertBlockIntoFreeList+0x52>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	4419      	add	r1, r3
 8007038:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800703a:	6813      	ldr	r3, [r2, #0]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8007040:	4290      	cmp	r0, r2
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007042:	bf18      	it	ne
 8007044:	6010      	strne	r0, [r2, #0]
	}
}
 8007046:	bc10      	pop	{r4}
 8007048:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800704a:	6004      	str	r4, [r0, #0]
 800704c:	e7f8      	b.n	8007040 <prvInsertBlockIntoFreeList+0x48>
 800704e:	bf00      	nop
 8007050:	20003d44 	.word	0x20003d44
 8007054:	20003134 	.word	0x20003134

08007058 <pvPortMalloc>:
{
 8007058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800705a:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800705c:	f7ff f8f6 	bl	800624c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8007060:	4b42      	ldr	r3, [pc, #264]	; (800716c <pvPortMalloc+0x114>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	b1b3      	cbz	r3, 8007094 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007066:	4b42      	ldr	r3, [pc, #264]	; (8007170 <pvPortMalloc+0x118>)
 8007068:	681d      	ldr	r5, [r3, #0]
 800706a:	4225      	tst	r5, r4
 800706c:	d179      	bne.n	8007162 <pvPortMalloc+0x10a>
			if( xWantedSize > 0 )
 800706e:	2c00      	cmp	r4, #0
 8007070:	d077      	beq.n	8007162 <pvPortMalloc+0x10a>
				xWantedSize += xHeapStructSize;
 8007072:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007076:	f014 0f07 	tst.w	r4, #7
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800707a:	bf1c      	itt	ne
 800707c:	f022 0207 	bicne.w	r2, r2, #7
 8007080:	3208      	addne	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007082:	2a00      	cmp	r2, #0
 8007084:	d06d      	beq.n	8007162 <pvPortMalloc+0x10a>
 8007086:	4b3b      	ldr	r3, [pc, #236]	; (8007174 <pvPortMalloc+0x11c>)
 8007088:	681e      	ldr	r6, [r3, #0]
 800708a:	4296      	cmp	r6, r2
 800708c:	d369      	bcc.n	8007162 <pvPortMalloc+0x10a>
				pxBlock = xStart.pxNextFreeBlock;
 800708e:	493a      	ldr	r1, [pc, #232]	; (8007178 <pvPortMalloc+0x120>)
 8007090:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007092:	e027      	b.n	80070e4 <pvPortMalloc+0x8c>
	uxAddress = ( size_t ) ucHeap;
 8007094:	4a39      	ldr	r2, [pc, #228]	; (800717c <pvPortMalloc+0x124>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007096:	f012 0f07 	tst.w	r2, #7
 800709a:	d007      	beq.n	80070ac <pvPortMalloc+0x54>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800709c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800709e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80070a2:	f502 6340 	add.w	r3, r2, #3072	; 0xc00
 80070a6:	1a5b      	subs	r3, r3, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070a8:	460a      	mov	r2, r1
 80070aa:	e001      	b.n	80070b0 <pvPortMalloc+0x58>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80070ac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80070b0:	4831      	ldr	r0, [pc, #196]	; (8007178 <pvPortMalloc+0x120>)
 80070b2:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80070b4:	2100      	movs	r1, #0
 80070b6:	6041      	str	r1, [r0, #4]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80070b8:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80070ba:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070bc:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 80070c0:	482a      	ldr	r0, [pc, #168]	; (800716c <pvPortMalloc+0x114>)
 80070c2:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80070c4:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80070c6:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80070c8:	1a99      	subs	r1, r3, r2
 80070ca:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80070cc:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070ce:	4b2c      	ldr	r3, [pc, #176]	; (8007180 <pvPortMalloc+0x128>)
 80070d0:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070d2:	4b28      	ldr	r3, [pc, #160]	; (8007174 <pvPortMalloc+0x11c>)
 80070d4:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80070d6:	4b26      	ldr	r3, [pc, #152]	; (8007170 <pvPortMalloc+0x118>)
 80070d8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80070dc:	601a      	str	r2, [r3, #0]
}
 80070de:	e7c2      	b.n	8007066 <pvPortMalloc+0xe>
 80070e0:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 80070e2:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80070e4:	6863      	ldr	r3, [r4, #4]
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d202      	bcs.n	80070f0 <pvPortMalloc+0x98>
 80070ea:	6823      	ldr	r3, [r4, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d1f7      	bne.n	80070e0 <pvPortMalloc+0x88>
				if( pxBlock != pxEnd )
 80070f0:	4b1e      	ldr	r3, [pc, #120]	; (800716c <pvPortMalloc+0x114>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	42a3      	cmp	r3, r4
 80070f6:	d034      	beq.n	8007162 <pvPortMalloc+0x10a>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80070f8:	680f      	ldr	r7, [r1, #0]
 80070fa:	3708      	adds	r7, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80070fc:	6823      	ldr	r3, [r4, #0]
 80070fe:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007100:	6863      	ldr	r3, [r4, #4]
 8007102:	1a9b      	subs	r3, r3, r2
 8007104:	2b10      	cmp	r3, #16
 8007106:	d910      	bls.n	800712a <pvPortMalloc+0xd2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007108:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800710a:	f010 0f07 	tst.w	r0, #7
 800710e:	d008      	beq.n	8007122 <pvPortMalloc+0xca>
 8007110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007114:	f383 8811 	msr	BASEPRI, r3
 8007118:	f3bf 8f6f 	isb	sy
 800711c:	f3bf 8f4f 	dsb	sy
 8007120:	e7fe      	b.n	8007120 <pvPortMalloc+0xc8>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007122:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007124:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007126:	f7ff ff67 	bl	8006ff8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800712a:	6863      	ldr	r3, [r4, #4]
 800712c:	1af6      	subs	r6, r6, r3
 800712e:	4a11      	ldr	r2, [pc, #68]	; (8007174 <pvPortMalloc+0x11c>)
 8007130:	6016      	str	r6, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007132:	4a13      	ldr	r2, [pc, #76]	; (8007180 <pvPortMalloc+0x128>)
 8007134:	6812      	ldr	r2, [r2, #0]
 8007136:	4296      	cmp	r6, r2
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007138:	bf3c      	itt	cc
 800713a:	4a11      	ldrcc	r2, [pc, #68]	; (8007180 <pvPortMalloc+0x128>)
 800713c:	6016      	strcc	r6, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800713e:	431d      	orrs	r5, r3
 8007140:	6065      	str	r5, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007142:	2300      	movs	r3, #0
 8007144:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 8007146:	f7ff f929 	bl	800639c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800714a:	f017 0f07 	tst.w	r7, #7
 800714e:	d00b      	beq.n	8007168 <pvPortMalloc+0x110>
 8007150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007154:	f383 8811 	msr	BASEPRI, r3
 8007158:	f3bf 8f6f 	isb	sy
 800715c:	f3bf 8f4f 	dsb	sy
 8007160:	e7fe      	b.n	8007160 <pvPortMalloc+0x108>
	( void ) xTaskResumeAll();
 8007162:	f7ff f91b 	bl	800639c <xTaskResumeAll>
 8007166:	2700      	movs	r7, #0
}
 8007168:	4638      	mov	r0, r7
 800716a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800716c:	20003134 	.word	0x20003134
 8007170:	20003d38 	.word	0x20003d38
 8007174:	20003d3c 	.word	0x20003d3c
 8007178:	20003d44 	.word	0x20003d44
 800717c:	20003138 	.word	0x20003138
 8007180:	20003d40 	.word	0x20003d40

08007184 <vPortFree>:
	if( pv != NULL )
 8007184:	b378      	cbz	r0, 80071e6 <vPortFree+0x62>
{
 8007186:	b510      	push	{r4, lr}
 8007188:	4604      	mov	r4, r0
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800718a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800718e:	4a16      	ldr	r2, [pc, #88]	; (80071e8 <vPortFree+0x64>)
 8007190:	6812      	ldr	r2, [r2, #0]
 8007192:	4213      	tst	r3, r2
 8007194:	d108      	bne.n	80071a8 <vPortFree+0x24>
 8007196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719a:	f383 8811 	msr	BASEPRI, r3
 800719e:	f3bf 8f6f 	isb	sy
 80071a2:	f3bf 8f4f 	dsb	sy
 80071a6:	e7fe      	b.n	80071a6 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80071a8:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80071ac:	b141      	cbz	r1, 80071c0 <vPortFree+0x3c>
 80071ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b2:	f383 8811 	msr	BASEPRI, r3
 80071b6:	f3bf 8f6f 	isb	sy
 80071ba:	f3bf 8f4f 	dsb	sy
 80071be:	e7fe      	b.n	80071be <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80071c0:	ea23 0302 	bic.w	r3, r3, r2
 80071c4:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80071c8:	f7ff f840 	bl	800624c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80071cc:	4a07      	ldr	r2, [pc, #28]	; (80071ec <vPortFree+0x68>)
 80071ce:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80071d2:	6811      	ldr	r1, [r2, #0]
 80071d4:	440b      	add	r3, r1
 80071d6:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80071d8:	f1a4 0008 	sub.w	r0, r4, #8
 80071dc:	f7ff ff0c 	bl	8006ff8 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 80071e0:	f7ff f8dc 	bl	800639c <xTaskResumeAll>
}
 80071e4:	bd10      	pop	{r4, pc}
 80071e6:	4770      	bx	lr
 80071e8:	20003d38 	.word	0x20003d38
 80071ec:	20003d3c 	.word	0x20003d3c

080071f0 <__libc_init_array>:
 80071f0:	b570      	push	{r4, r5, r6, lr}
 80071f2:	2600      	movs	r6, #0
 80071f4:	4d0c      	ldr	r5, [pc, #48]	; (8007228 <__libc_init_array+0x38>)
 80071f6:	4c0d      	ldr	r4, [pc, #52]	; (800722c <__libc_init_array+0x3c>)
 80071f8:	1b64      	subs	r4, r4, r5
 80071fa:	10a4      	asrs	r4, r4, #2
 80071fc:	42a6      	cmp	r6, r4
 80071fe:	d109      	bne.n	8007214 <__libc_init_array+0x24>
 8007200:	f000 f8f0 	bl	80073e4 <_init>
 8007204:	2600      	movs	r6, #0
 8007206:	4d0a      	ldr	r5, [pc, #40]	; (8007230 <__libc_init_array+0x40>)
 8007208:	4c0a      	ldr	r4, [pc, #40]	; (8007234 <__libc_init_array+0x44>)
 800720a:	1b64      	subs	r4, r4, r5
 800720c:	10a4      	asrs	r4, r4, #2
 800720e:	42a6      	cmp	r6, r4
 8007210:	d105      	bne.n	800721e <__libc_init_array+0x2e>
 8007212:	bd70      	pop	{r4, r5, r6, pc}
 8007214:	f855 3b04 	ldr.w	r3, [r5], #4
 8007218:	4798      	blx	r3
 800721a:	3601      	adds	r6, #1
 800721c:	e7ee      	b.n	80071fc <__libc_init_array+0xc>
 800721e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007222:	4798      	blx	r3
 8007224:	3601      	adds	r6, #1
 8007226:	e7f2      	b.n	800720e <__libc_init_array+0x1e>
 8007228:	08007944 	.word	0x08007944
 800722c:	08007944 	.word	0x08007944
 8007230:	08007944 	.word	0x08007944
 8007234:	08007948 	.word	0x08007948

08007238 <__retarget_lock_acquire_recursive>:
 8007238:	4770      	bx	lr

0800723a <__retarget_lock_release_recursive>:
 800723a:	4770      	bx	lr

0800723c <memcpy>:
 800723c:	440a      	add	r2, r1
 800723e:	4291      	cmp	r1, r2
 8007240:	f100 33ff 	add.w	r3, r0, #4294967295
 8007244:	d100      	bne.n	8007248 <memcpy+0xc>
 8007246:	4770      	bx	lr
 8007248:	b510      	push	{r4, lr}
 800724a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800724e:	4291      	cmp	r1, r2
 8007250:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007254:	d1f9      	bne.n	800724a <memcpy+0xe>
 8007256:	bd10      	pop	{r4, pc}

08007258 <memset>:
 8007258:	4603      	mov	r3, r0
 800725a:	4402      	add	r2, r0
 800725c:	4293      	cmp	r3, r2
 800725e:	d100      	bne.n	8007262 <memset+0xa>
 8007260:	4770      	bx	lr
 8007262:	f803 1b01 	strb.w	r1, [r3], #1
 8007266:	e7f9      	b.n	800725c <memset+0x4>

08007268 <cleanup_glue>:
 8007268:	b538      	push	{r3, r4, r5, lr}
 800726a:	460c      	mov	r4, r1
 800726c:	6809      	ldr	r1, [r1, #0]
 800726e:	4605      	mov	r5, r0
 8007270:	b109      	cbz	r1, 8007276 <cleanup_glue+0xe>
 8007272:	f7ff fff9 	bl	8007268 <cleanup_glue>
 8007276:	4621      	mov	r1, r4
 8007278:	4628      	mov	r0, r5
 800727a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800727e:	f000 b869 	b.w	8007354 <_free_r>
	...

08007284 <_reclaim_reent>:
 8007284:	4b2c      	ldr	r3, [pc, #176]	; (8007338 <_reclaim_reent+0xb4>)
 8007286:	b570      	push	{r4, r5, r6, lr}
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4604      	mov	r4, r0
 800728c:	4283      	cmp	r3, r0
 800728e:	d051      	beq.n	8007334 <_reclaim_reent+0xb0>
 8007290:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007292:	b143      	cbz	r3, 80072a6 <_reclaim_reent+0x22>
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d14a      	bne.n	8007330 <_reclaim_reent+0xac>
 800729a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800729c:	6819      	ldr	r1, [r3, #0]
 800729e:	b111      	cbz	r1, 80072a6 <_reclaim_reent+0x22>
 80072a0:	4620      	mov	r0, r4
 80072a2:	f000 f857 	bl	8007354 <_free_r>
 80072a6:	6961      	ldr	r1, [r4, #20]
 80072a8:	b111      	cbz	r1, 80072b0 <_reclaim_reent+0x2c>
 80072aa:	4620      	mov	r0, r4
 80072ac:	f000 f852 	bl	8007354 <_free_r>
 80072b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80072b2:	b111      	cbz	r1, 80072ba <_reclaim_reent+0x36>
 80072b4:	4620      	mov	r0, r4
 80072b6:	f000 f84d 	bl	8007354 <_free_r>
 80072ba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80072bc:	b111      	cbz	r1, 80072c4 <_reclaim_reent+0x40>
 80072be:	4620      	mov	r0, r4
 80072c0:	f000 f848 	bl	8007354 <_free_r>
 80072c4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80072c6:	b111      	cbz	r1, 80072ce <_reclaim_reent+0x4a>
 80072c8:	4620      	mov	r0, r4
 80072ca:	f000 f843 	bl	8007354 <_free_r>
 80072ce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80072d0:	b111      	cbz	r1, 80072d8 <_reclaim_reent+0x54>
 80072d2:	4620      	mov	r0, r4
 80072d4:	f000 f83e 	bl	8007354 <_free_r>
 80072d8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80072da:	b111      	cbz	r1, 80072e2 <_reclaim_reent+0x5e>
 80072dc:	4620      	mov	r0, r4
 80072de:	f000 f839 	bl	8007354 <_free_r>
 80072e2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80072e4:	b111      	cbz	r1, 80072ec <_reclaim_reent+0x68>
 80072e6:	4620      	mov	r0, r4
 80072e8:	f000 f834 	bl	8007354 <_free_r>
 80072ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072ee:	b111      	cbz	r1, 80072f6 <_reclaim_reent+0x72>
 80072f0:	4620      	mov	r0, r4
 80072f2:	f000 f82f 	bl	8007354 <_free_r>
 80072f6:	69a3      	ldr	r3, [r4, #24]
 80072f8:	b1e3      	cbz	r3, 8007334 <_reclaim_reent+0xb0>
 80072fa:	4620      	mov	r0, r4
 80072fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80072fe:	4798      	blx	r3
 8007300:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007302:	b1b9      	cbz	r1, 8007334 <_reclaim_reent+0xb0>
 8007304:	4620      	mov	r0, r4
 8007306:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800730a:	f7ff bfad 	b.w	8007268 <cleanup_glue>
 800730e:	5949      	ldr	r1, [r1, r5]
 8007310:	b941      	cbnz	r1, 8007324 <_reclaim_reent+0xa0>
 8007312:	3504      	adds	r5, #4
 8007314:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007316:	2d80      	cmp	r5, #128	; 0x80
 8007318:	68d9      	ldr	r1, [r3, #12]
 800731a:	d1f8      	bne.n	800730e <_reclaim_reent+0x8a>
 800731c:	4620      	mov	r0, r4
 800731e:	f000 f819 	bl	8007354 <_free_r>
 8007322:	e7ba      	b.n	800729a <_reclaim_reent+0x16>
 8007324:	680e      	ldr	r6, [r1, #0]
 8007326:	4620      	mov	r0, r4
 8007328:	f000 f814 	bl	8007354 <_free_r>
 800732c:	4631      	mov	r1, r6
 800732e:	e7ef      	b.n	8007310 <_reclaim_reent+0x8c>
 8007330:	2500      	movs	r5, #0
 8007332:	e7ef      	b.n	8007314 <_reclaim_reent+0x90>
 8007334:	bd70      	pop	{r4, r5, r6, pc}
 8007336:	bf00      	nop
 8007338:	20000018 	.word	0x20000018

0800733c <__malloc_lock>:
 800733c:	4801      	ldr	r0, [pc, #4]	; (8007344 <__malloc_lock+0x8>)
 800733e:	f7ff bf7b 	b.w	8007238 <__retarget_lock_acquire_recursive>
 8007342:	bf00      	nop
 8007344:	20003d4c 	.word	0x20003d4c

08007348 <__malloc_unlock>:
 8007348:	4801      	ldr	r0, [pc, #4]	; (8007350 <__malloc_unlock+0x8>)
 800734a:	f7ff bf76 	b.w	800723a <__retarget_lock_release_recursive>
 800734e:	bf00      	nop
 8007350:	20003d4c 	.word	0x20003d4c

08007354 <_free_r>:
 8007354:	b538      	push	{r3, r4, r5, lr}
 8007356:	4605      	mov	r5, r0
 8007358:	2900      	cmp	r1, #0
 800735a:	d040      	beq.n	80073de <_free_r+0x8a>
 800735c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007360:	1f0c      	subs	r4, r1, #4
 8007362:	2b00      	cmp	r3, #0
 8007364:	bfb8      	it	lt
 8007366:	18e4      	addlt	r4, r4, r3
 8007368:	f7ff ffe8 	bl	800733c <__malloc_lock>
 800736c:	4a1c      	ldr	r2, [pc, #112]	; (80073e0 <_free_r+0x8c>)
 800736e:	6813      	ldr	r3, [r2, #0]
 8007370:	b933      	cbnz	r3, 8007380 <_free_r+0x2c>
 8007372:	6063      	str	r3, [r4, #4]
 8007374:	6014      	str	r4, [r2, #0]
 8007376:	4628      	mov	r0, r5
 8007378:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800737c:	f7ff bfe4 	b.w	8007348 <__malloc_unlock>
 8007380:	42a3      	cmp	r3, r4
 8007382:	d908      	bls.n	8007396 <_free_r+0x42>
 8007384:	6820      	ldr	r0, [r4, #0]
 8007386:	1821      	adds	r1, r4, r0
 8007388:	428b      	cmp	r3, r1
 800738a:	bf01      	itttt	eq
 800738c:	6819      	ldreq	r1, [r3, #0]
 800738e:	685b      	ldreq	r3, [r3, #4]
 8007390:	1809      	addeq	r1, r1, r0
 8007392:	6021      	streq	r1, [r4, #0]
 8007394:	e7ed      	b.n	8007372 <_free_r+0x1e>
 8007396:	461a      	mov	r2, r3
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	b10b      	cbz	r3, 80073a0 <_free_r+0x4c>
 800739c:	42a3      	cmp	r3, r4
 800739e:	d9fa      	bls.n	8007396 <_free_r+0x42>
 80073a0:	6811      	ldr	r1, [r2, #0]
 80073a2:	1850      	adds	r0, r2, r1
 80073a4:	42a0      	cmp	r0, r4
 80073a6:	d10b      	bne.n	80073c0 <_free_r+0x6c>
 80073a8:	6820      	ldr	r0, [r4, #0]
 80073aa:	4401      	add	r1, r0
 80073ac:	1850      	adds	r0, r2, r1
 80073ae:	4283      	cmp	r3, r0
 80073b0:	6011      	str	r1, [r2, #0]
 80073b2:	d1e0      	bne.n	8007376 <_free_r+0x22>
 80073b4:	6818      	ldr	r0, [r3, #0]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	4401      	add	r1, r0
 80073ba:	6011      	str	r1, [r2, #0]
 80073bc:	6053      	str	r3, [r2, #4]
 80073be:	e7da      	b.n	8007376 <_free_r+0x22>
 80073c0:	d902      	bls.n	80073c8 <_free_r+0x74>
 80073c2:	230c      	movs	r3, #12
 80073c4:	602b      	str	r3, [r5, #0]
 80073c6:	e7d6      	b.n	8007376 <_free_r+0x22>
 80073c8:	6820      	ldr	r0, [r4, #0]
 80073ca:	1821      	adds	r1, r4, r0
 80073cc:	428b      	cmp	r3, r1
 80073ce:	bf01      	itttt	eq
 80073d0:	6819      	ldreq	r1, [r3, #0]
 80073d2:	685b      	ldreq	r3, [r3, #4]
 80073d4:	1809      	addeq	r1, r1, r0
 80073d6:	6021      	streq	r1, [r4, #0]
 80073d8:	6063      	str	r3, [r4, #4]
 80073da:	6054      	str	r4, [r2, #4]
 80073dc:	e7cb      	b.n	8007376 <_free_r+0x22>
 80073de:	bd38      	pop	{r3, r4, r5, pc}
 80073e0:	20003d50 	.word	0x20003d50

080073e4 <_init>:
 80073e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073e6:	bf00      	nop
 80073e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ea:	bc08      	pop	{r3}
 80073ec:	469e      	mov	lr, r3
 80073ee:	4770      	bx	lr

080073f0 <_fini>:
 80073f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073f2:	bf00      	nop
 80073f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073f6:	bc08      	pop	{r3}
 80073f8:	469e      	mov	lr, r3
 80073fa:	4770      	bx	lr

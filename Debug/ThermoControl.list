
ThermoControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000743c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  0800754c  0800754c  0001754c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a6c  08007a6c  00020124  2**0
                  CONTENTS
  4 .ARM          00000000  08007a6c  08007a6c  00020124  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007a6c  08007a6c  00020124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a6c  08007a6c  00017a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a70  08007a70  00017a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000124  20000000  08007a74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002cbc  20000128  08007b98  00020128  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002de4  08007b98  00022de4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ca71  00000000  00000000  0002014d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000064e3  00000000  00000000  0004cbbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0002029f  00000000  00000000  000530a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001918  00000000  00000000  00073340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002050  00000000  00000000  00074c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d637  00000000  00000000  00076ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002c293  00000000  00000000  000942df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009d0b8  00000000  00000000  000c0572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015d62a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000049f4  00000000  00000000  0015d67c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000128 	.word	0x20000128
 800012c:	00000000 	.word	0x00000000
 8000130:	08007534 	.word	0x08007534

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000012c 	.word	0x2000012c
 800014c:	08007534 	.word	0x08007534

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <__aeabi_d2f>:
 800092c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000930:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000934:	bf24      	itt	cs
 8000936:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800093a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800093e:	d90d      	bls.n	800095c <__aeabi_d2f+0x30>
 8000940:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000944:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000948:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800094c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000950:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000954:	bf08      	it	eq
 8000956:	f020 0001 	biceq.w	r0, r0, #1
 800095a:	4770      	bx	lr
 800095c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000960:	d121      	bne.n	80009a6 <__aeabi_d2f+0x7a>
 8000962:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000966:	bfbc      	itt	lt
 8000968:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800096c:	4770      	bxlt	lr
 800096e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000972:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000976:	f1c2 0218 	rsb	r2, r2, #24
 800097a:	f1c2 0c20 	rsb	ip, r2, #32
 800097e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000982:	fa20 f002 	lsr.w	r0, r0, r2
 8000986:	bf18      	it	ne
 8000988:	f040 0001 	orrne.w	r0, r0, #1
 800098c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000990:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000994:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000998:	ea40 000c 	orr.w	r0, r0, ip
 800099c:	fa23 f302 	lsr.w	r3, r3, r2
 80009a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009a4:	e7cc      	b.n	8000940 <__aeabi_d2f+0x14>
 80009a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009aa:	d107      	bne.n	80009bc <__aeabi_d2f+0x90>
 80009ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009b0:	bf1e      	ittt	ne
 80009b2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009b6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ba:	4770      	bxne	lr
 80009bc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_frsub>:
 80009cc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	e002      	b.n	80009d8 <__addsf3>
 80009d2:	bf00      	nop

080009d4 <__aeabi_fsub>:
 80009d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009d8 <__addsf3>:
 80009d8:	0042      	lsls	r2, r0, #1
 80009da:	bf1f      	itttt	ne
 80009dc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009e0:	ea92 0f03 	teqne	r2, r3
 80009e4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009e8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ec:	d06a      	beq.n	8000ac4 <__addsf3+0xec>
 80009ee:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009f2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009f6:	bfc1      	itttt	gt
 80009f8:	18d2      	addgt	r2, r2, r3
 80009fa:	4041      	eorgt	r1, r0
 80009fc:	4048      	eorgt	r0, r1
 80009fe:	4041      	eorgt	r1, r0
 8000a00:	bfb8      	it	lt
 8000a02:	425b      	neglt	r3, r3
 8000a04:	2b19      	cmp	r3, #25
 8000a06:	bf88      	it	hi
 8000a08:	4770      	bxhi	lr
 8000a0a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a16:	bf18      	it	ne
 8000a18:	4240      	negne	r0, r0
 8000a1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a1e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a22:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4249      	negne	r1, r1
 8000a2a:	ea92 0f03 	teq	r2, r3
 8000a2e:	d03f      	beq.n	8000ab0 <__addsf3+0xd8>
 8000a30:	f1a2 0201 	sub.w	r2, r2, #1
 8000a34:	fa41 fc03 	asr.w	ip, r1, r3
 8000a38:	eb10 000c 	adds.w	r0, r0, ip
 8000a3c:	f1c3 0320 	rsb	r3, r3, #32
 8000a40:	fa01 f103 	lsl.w	r1, r1, r3
 8000a44:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a48:	d502      	bpl.n	8000a50 <__addsf3+0x78>
 8000a4a:	4249      	negs	r1, r1
 8000a4c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a50:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a54:	d313      	bcc.n	8000a7e <__addsf3+0xa6>
 8000a56:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a5a:	d306      	bcc.n	8000a6a <__addsf3+0x92>
 8000a5c:	0840      	lsrs	r0, r0, #1
 8000a5e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a62:	f102 0201 	add.w	r2, r2, #1
 8000a66:	2afe      	cmp	r2, #254	; 0xfe
 8000a68:	d251      	bcs.n	8000b0e <__addsf3+0x136>
 8000a6a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a72:	bf08      	it	eq
 8000a74:	f020 0001 	biceq.w	r0, r0, #1
 8000a78:	ea40 0003 	orr.w	r0, r0, r3
 8000a7c:	4770      	bx	lr
 8000a7e:	0049      	lsls	r1, r1, #1
 8000a80:	eb40 0000 	adc.w	r0, r0, r0
 8000a84:	3a01      	subs	r2, #1
 8000a86:	bf28      	it	cs
 8000a88:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a8c:	d2ed      	bcs.n	8000a6a <__addsf3+0x92>
 8000a8e:	fab0 fc80 	clz	ip, r0
 8000a92:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a96:	ebb2 020c 	subs.w	r2, r2, ip
 8000a9a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a9e:	bfaa      	itet	ge
 8000aa0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000aa4:	4252      	neglt	r2, r2
 8000aa6:	4318      	orrge	r0, r3
 8000aa8:	bfbc      	itt	lt
 8000aaa:	40d0      	lsrlt	r0, r2
 8000aac:	4318      	orrlt	r0, r3
 8000aae:	4770      	bx	lr
 8000ab0:	f092 0f00 	teq	r2, #0
 8000ab4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ab8:	bf06      	itte	eq
 8000aba:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000abe:	3201      	addeq	r2, #1
 8000ac0:	3b01      	subne	r3, #1
 8000ac2:	e7b5      	b.n	8000a30 <__addsf3+0x58>
 8000ac4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ac8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000acc:	bf18      	it	ne
 8000ace:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad2:	d021      	beq.n	8000b18 <__addsf3+0x140>
 8000ad4:	ea92 0f03 	teq	r2, r3
 8000ad8:	d004      	beq.n	8000ae4 <__addsf3+0x10c>
 8000ada:	f092 0f00 	teq	r2, #0
 8000ade:	bf08      	it	eq
 8000ae0:	4608      	moveq	r0, r1
 8000ae2:	4770      	bx	lr
 8000ae4:	ea90 0f01 	teq	r0, r1
 8000ae8:	bf1c      	itt	ne
 8000aea:	2000      	movne	r0, #0
 8000aec:	4770      	bxne	lr
 8000aee:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000af2:	d104      	bne.n	8000afe <__addsf3+0x126>
 8000af4:	0040      	lsls	r0, r0, #1
 8000af6:	bf28      	it	cs
 8000af8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000afc:	4770      	bx	lr
 8000afe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b02:	bf3c      	itt	cc
 8000b04:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bxcc	lr
 8000b0a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b0e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b16:	4770      	bx	lr
 8000b18:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b1c:	bf16      	itet	ne
 8000b1e:	4608      	movne	r0, r1
 8000b20:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b24:	4601      	movne	r1, r0
 8000b26:	0242      	lsls	r2, r0, #9
 8000b28:	bf06      	itte	eq
 8000b2a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b2e:	ea90 0f01 	teqeq	r0, r1
 8000b32:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b36:	4770      	bx	lr

08000b38 <__aeabi_ui2f>:
 8000b38:	f04f 0300 	mov.w	r3, #0
 8000b3c:	e004      	b.n	8000b48 <__aeabi_i2f+0x8>
 8000b3e:	bf00      	nop

08000b40 <__aeabi_i2f>:
 8000b40:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	bf48      	it	mi
 8000b46:	4240      	negmi	r0, r0
 8000b48:	ea5f 0c00 	movs.w	ip, r0
 8000b4c:	bf08      	it	eq
 8000b4e:	4770      	bxeq	lr
 8000b50:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b54:	4601      	mov	r1, r0
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	e01c      	b.n	8000b96 <__aeabi_l2f+0x2a>

08000b5c <__aeabi_ul2f>:
 8000b5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b60:	bf08      	it	eq
 8000b62:	4770      	bxeq	lr
 8000b64:	f04f 0300 	mov.w	r3, #0
 8000b68:	e00a      	b.n	8000b80 <__aeabi_l2f+0x14>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_l2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b78:	d502      	bpl.n	8000b80 <__aeabi_l2f+0x14>
 8000b7a:	4240      	negs	r0, r0
 8000b7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b80:	ea5f 0c01 	movs.w	ip, r1
 8000b84:	bf02      	ittt	eq
 8000b86:	4684      	moveq	ip, r0
 8000b88:	4601      	moveq	r1, r0
 8000b8a:	2000      	moveq	r0, #0
 8000b8c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b90:	bf08      	it	eq
 8000b92:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b96:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b9a:	fabc f28c 	clz	r2, ip
 8000b9e:	3a08      	subs	r2, #8
 8000ba0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ba4:	db10      	blt.n	8000bc8 <__aeabi_l2f+0x5c>
 8000ba6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000baa:	4463      	add	r3, ip
 8000bac:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bb0:	f1c2 0220 	rsb	r2, r2, #32
 8000bb4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bbc:	eb43 0002 	adc.w	r0, r3, r2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f102 0220 	add.w	r2, r2, #32
 8000bcc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bd0:	f1c2 0220 	rsb	r2, r2, #32
 8000bd4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bd8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bdc:	eb43 0002 	adc.w	r0, r3, r2
 8000be0:	bf08      	it	eq
 8000be2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_f2uiz>:
 8000be8:	0042      	lsls	r2, r0, #1
 8000bea:	d20e      	bcs.n	8000c0a <__aeabi_f2uiz+0x22>
 8000bec:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000bf0:	d30b      	bcc.n	8000c0a <__aeabi_f2uiz+0x22>
 8000bf2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000bf6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000bfa:	d409      	bmi.n	8000c10 <__aeabi_f2uiz+0x28>
 8000bfc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c04:	fa23 f002 	lsr.w	r0, r3, r2
 8000c08:	4770      	bx	lr
 8000c0a:	f04f 0000 	mov.w	r0, #0
 8000c0e:	4770      	bx	lr
 8000c10:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c14:	d101      	bne.n	8000c1a <__aeabi_f2uiz+0x32>
 8000c16:	0242      	lsls	r2, r0, #9
 8000c18:	d102      	bne.n	8000c20 <__aeabi_f2uiz+0x38>
 8000c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <eDinConfig>:
}
/*
 *
 */
DIN_FUNCTION_ERROR_t eDinConfig( uint8_t ucCh, DIN_INPUT_TYPE inType, uint32_t ulHFront, uint32_t ulLFront)
{
 8000c28:	b570      	push	{r4, r5, r6, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	461d      	mov	r5, r3
	DIN_FUNCTION_ERROR_t eRes = DIN_WRONG_CHANNEL_NUMBER ;
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2e:	2300      	movs	r3, #0
 8000c30:	9301      	str	r3, [sp, #4]
 8000c32:	9303      	str	r3, [sp, #12]
	if ( ucCh < DIN_CHANNEL)
 8000c34:	2808      	cmp	r0, #8
 8000c36:	d827      	bhi.n	8000c88 <eDinConfig+0x60>
 8000c38:	4604      	mov	r4, r0
 8000c3a:	4616      	mov	r6, r2
	{
		xDinConfig[ucCh].eInputType = inType;
 8000c3c:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <eDinConfig+0x64>)
 8000c3e:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8000c42:	7399      	strb	r1, [r3, #14]
		xDinConfig[ucCh].ucValue 	= (xDinConfig[ucCh].eInputType == DIN_CONFIG_POSITIVE ) ? 0U : 1U;
 8000c44:	1e4a      	subs	r2, r1, #1
 8000c46:	bf18      	it	ne
 8000c48:	2201      	movne	r2, #1
 8000c4a:	731a      	strb	r2, [r3, #12]
		GPIO_InitStruct.Pin 		= xDinPortConfig[ucCh].Pin;
 8000c4c:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <eDinConfig+0x68>)
 8000c4e:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 8000c52:	9300      	str	r3, [sp, #0]

		if ( xDinConfig[ucCh].eInputType == RPM_CONFIG )
 8000c54:	2902      	cmp	r1, #2
 8000c56:	d011      	beq.n	8000c7c <eDinConfig+0x54>
		{
			xDinConfig[ucCh].eInputType = DIN_CONFIG_POSITIVE;
		}
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	9302      	str	r3, [sp, #8]
		HAL_GPIO_Init(xDinPortConfig[ucCh].GPIOx,&GPIO_InitStruct);
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <eDinConfig+0x68>)
 8000c5e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8000c62:	4669      	mov	r1, sp
 8000c64:	6858      	ldr	r0, [r3, #4]
 8000c66:	f001 ffe3 	bl	8002c30 <HAL_GPIO_Init>
		xDinConfig[ucCh].ulHighCounter = ulHFront;
 8000c6a:	4808      	ldr	r0, [pc, #32]	; (8000c8c <eDinConfig+0x64>)
 8000c6c:	eb00 1404 	add.w	r4, r0, r4, lsl #4
 8000c70:	60a6      	str	r6, [r4, #8]
		xDinConfig[ucCh].ulLowCounter = ulLFront;
 8000c72:	6065      	str	r5, [r4, #4]
		xDinConfig[ucCh].ucTempValue = 0U;
 8000c74:	2000      	movs	r0, #0
 8000c76:	7360      	strb	r0, [r4, #13]
		eRes = DIN_CONFIG_OK;
	}
	return ( eRes );
}
 8000c78:	b004      	add	sp, #16
 8000c7a:	bd70      	pop	{r4, r5, r6, pc}
			xDinConfig[ucCh].eInputType = DIN_CONFIG_POSITIVE;
 8000c7c:	4b03      	ldr	r3, [pc, #12]	; (8000c8c <eDinConfig+0x64>)
 8000c7e:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8000c82:	2201      	movs	r2, #1
 8000c84:	739a      	strb	r2, [r3, #14]
 8000c86:	e7e7      	b.n	8000c58 <eDinConfig+0x30>
	DIN_FUNCTION_ERROR_t eRes = DIN_WRONG_CHANNEL_NUMBER ;
 8000c88:	2001      	movs	r0, #1
 8000c8a:	e7f5      	b.n	8000c78 <eDinConfig+0x50>
 8000c8c:	20000168 	.word	0x20000168
 8000c90:	08007618 	.word	0x08007618

08000c94 <vADCReady>:
	{
		 ADC_OLD_RAW[i] = 0x00;
	}
}
void vADCReady()
{
 8000c94:	b510      	push	{r4, lr}
	 static portBASE_TYPE xHigherPriorityTaskWoken;
	  xHigherPriorityTaskWoken = pdFALSE;
 8000c96:	4c0b      	ldr	r4, [pc, #44]	; (8000cc4 <vADCReady+0x30>)
 8000c98:	2300      	movs	r3, #0
 8000c9a:	6023      	str	r3, [r4, #0]
	   xEventGroupSetBitsFromISR(xSystemEventGroupHandle, AIN_READY, &xHigherPriorityTaskWoken );
 8000c9c:	4622      	mov	r2, r4
 8000c9e:	2102      	movs	r1, #2
 8000ca0:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <vADCReady+0x34>)
 8000ca2:	6818      	ldr	r0, [r3, #0]
 8000ca4:	f004 fda6 	bl	80057f4 <xEventGroupSetBitsFromISR>
	   portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 8000ca8:	6823      	ldr	r3, [r4, #0]
 8000caa:	b14b      	cbz	r3, 8000cc0 <vADCReady+0x2c>
 8000cac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000cb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cb4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000cb8:	f3bf 8f4f 	dsb	sy
 8000cbc:	f3bf 8f6f 	isb	sy
	   return;
}
 8000cc0:	bd10      	pop	{r4, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000200 	.word	0x20000200
 8000cc8:	20000204 	.word	0x20000204

08000ccc <vGetAverDataFromRAW>:
 /*
  * Функция вытаскивает из входного буфера Indata  (размером FrameSize*BufferSize) со смещением InIndex FrameSize отсчетов,
  * счетает среднее арефмитическое и записывает в буффер OutData со смещением OutIndex
  */
  void vGetAverDataFromRAW(uint16_t * InData, uint16_t *OutData, uint8_t InIndex, uint8_t OutIndex, uint8_t Size, uint16_t BufferSize)
 {
 8000ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	f89d 5020 	ldrb.w	r5, [sp, #32]
 	volatile uint32_t temp;
 	for (uint8_t i=0; i<Size; i++ )
 8000cd6:	b345      	cbz	r5, 8000d2a <vGetAverDataFromRAW+0x5e>
 8000cd8:	eb01 0e43 	add.w	lr, r1, r3, lsl #1
 8000cdc:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8000ce0:	3d01      	subs	r5, #1
 8000ce2:	b2ec      	uxtb	r4, r5
 8000ce4:	4423      	add	r3, r4
 8000ce6:	3102      	adds	r1, #2
 8000ce8:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 8000cec:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
 8000cf0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 	{
 		temp = 0;
 8000cf4:	2700      	movs	r7, #0
 8000cf6:	f04f 0803 	mov.w	r8, #3
 		for (uint8_t j=0;j < ADC_FRAME_SIZE; j++ )
 		{
 		  temp += (InData[ InIndex + i + j * BufferSize ]);
 		}
 		OutData[ OutIndex + i ] = temp / ADC_FRAME_SIZE;
 8000cfa:	4d0d      	ldr	r5, [pc, #52]	; (8000d30 <vGetAverDataFromRAW+0x64>)
 8000cfc:	e008      	b.n	8000d10 <vGetAverDataFromRAW+0x44>
 8000cfe:	9b01      	ldr	r3, [sp, #4]
 8000d00:	fba5 2303 	umull	r2, r3, r5, r3
 8000d04:	085b      	lsrs	r3, r3, #1
 8000d06:	f82e 3b02 	strh.w	r3, [lr], #2
 	for (uint8_t i=0; i<Size; i++ )
 8000d0a:	3002      	adds	r0, #2
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	d00c      	beq.n	8000d2a <vGetAverDataFromRAW+0x5e>
 		temp = 0;
 8000d10:	9701      	str	r7, [sp, #4]
 8000d12:	4601      	mov	r1, r0
 8000d14:	4643      	mov	r3, r8
 		  temp += (InData[ InIndex + i + j * BufferSize ]);
 8000d16:	9e01      	ldr	r6, [sp, #4]
 8000d18:	880a      	ldrh	r2, [r1, #0]
 8000d1a:	4432      	add	r2, r6
 8000d1c:	9201      	str	r2, [sp, #4]
 		for (uint8_t j=0;j < ADC_FRAME_SIZE; j++ )
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	4461      	add	r1, ip
 8000d22:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8000d26:	d1f6      	bne.n	8000d16 <vGetAverDataFromRAW+0x4a>
 8000d28:	e7e9      	b.n	8000cfe <vGetAverDataFromRAW+0x32>
 	}
 	return;
 }
 8000d2a:	b002      	add	sp, #8
 8000d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d30:	aaaaaaab 	.word	0xaaaaaaab
 8000d34:	00000000 	.word	0x00000000

08000d38 <vAinGetData>:
	*old_output = output;
	return output;
}

 float vAinGetData(AIN_INPUT_NAME channel)
 {
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	b084      	sub	sp, #16
	 float temp;
	 ADC_RAW[channel] = vRCFilter(ADC_RAW[channel], &ADC_OLD_RAW[channel]);
 8000d3c:	4a20      	ldr	r2, [pc, #128]	; (8000dc0 <vAinGetData+0x88>)
	volatile uint32_t new = input;
 8000d3e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
 8000d42:	9302      	str	r3, [sp, #8]
	volatile uint32_t old = *old_output;
 8000d44:	491f      	ldr	r1, [pc, #124]	; (8000dc4 <vAinGetData+0x8c>)
 8000d46:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
 8000d4a:	9303      	str	r3, [sp, #12]
	volatile uint16_t  output =  ( A * old + (256-A)*new )>>8;
 8000d4c:	9c03      	ldr	r4, [sp, #12]
 8000d4e:	9b02      	ldr	r3, [sp, #8]
 8000d50:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	26dc      	movs	r6, #220	; 0xdc
 8000d58:	fb06 3304 	mla	r3, r6, r4, r3
 8000d5c:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8000d60:	f8ad 3006 	strh.w	r3, [sp, #6]
	*old_output = output;
 8000d64:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000d68:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
	return output;
 8000d6c:	f8bd 4006 	ldrh.w	r4, [sp, #6]
 8000d70:	b2a4      	uxth	r4, r4
	 ADC_RAW[channel] = vRCFilter(ADC_RAW[channel], &ADC_OLD_RAW[channel]);
 8000d72:	f822 4010 	strh.w	r4, [r2, r0, lsl #1]
	 temp =  ADC_RAW[channel]*RA/(4095- ADC_RAW[channel]);
 8000d76:	4620      	mov	r0, r4
 8000d78:	f7ff fb3c 	bl	80003f4 <__aeabi_i2d>
 8000d7c:	a30e      	add	r3, pc, #56	; (adr r3, 8000db8 <vAinGetData+0x80>)
 8000d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d82:	f7ff fba1 	bl	80004c8 <__aeabi_dmul>
 8000d86:	4606      	mov	r6, r0
 8000d88:	460f      	mov	r7, r1
 8000d8a:	f5c4 607f 	rsb	r0, r4, #4080	; 0xff0
 8000d8e:	300f      	adds	r0, #15
 8000d90:	f7ff fb30 	bl	80003f4 <__aeabi_i2d>
 8000d94:	4602      	mov	r2, r0
 8000d96:	460b      	mov	r3, r1
 8000d98:	4630      	mov	r0, r6
 8000d9a:	4639      	mov	r1, r7
 8000d9c:	f7ff fcbe 	bl	800071c <__aeabi_ddiv>
 8000da0:	f7ff fdc4 	bl	800092c <__aeabi_d2f>
	 return (uint16_t)temp;
 8000da4:	f7ff ff20 	bl	8000be8 <__aeabi_f2uiz>
 8000da8:	b280      	uxth	r0, r0
 8000daa:	f7ff fec5 	bl	8000b38 <__aeabi_ui2f>
 }
 8000dae:	b004      	add	sp, #16
 8000db0:	bdd0      	pop	{r4, r6, r7, pc}
 8000db2:	bf00      	nop
 8000db4:	f3af 8000 	nop.w
 8000db8:	00000000 	.word	0x00000000
 8000dbc:	40c38800 	.word	0x40c38800
 8000dc0:	20000160 	.word	0x20000160
 8000dc4:	20000158 	.word	0x20000158

08000dc8 <iGetTemp>:



 int16_t iGetTemp( AIN_INPUT_NAME channel )
 {
 8000dc8:	b508      	push	{r3, lr}
	 int i = 0;
	 uint16_t temp = (uint16_t)	vAinGetData(channel );
 8000dca:	f7ff ffb5 	bl	8000d38 <vAinGetData>
 8000dce:	f7ff ff0b 	bl	8000be8 <__aeabi_f2uiz>
 8000dd2:	b280      	uxth	r0, r0
	 if ((temp < Resistanse[50][1]) || (temp > Resistanse[0][1]))
 8000dd4:	f6a0 6309 	subw	r3, r0, #3593	; 0xe09
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	f247 12dd 	movw	r2, #29149	; 0x71dd
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d80f      	bhi.n	8000e02 <iGetTemp+0x3a>
	 {
		 temp = 0;
	 }
	 else
	 for ( i= 50;i>=0;i--)
 8000de2:	2332      	movs	r3, #50	; 0x32
	 {
		if (temp<Resistanse[i][1])
 8000de4:	4908      	ldr	r1, [pc, #32]	; (8000e08 <iGetTemp+0x40>)
 8000de6:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8000dea:	8852      	ldrh	r2, [r2, #2]
 8000dec:	4282      	cmp	r2, r0
 8000dee:	d804      	bhi.n	8000dfa <iGetTemp+0x32>
	 for ( i= 50;i>=0;i--)
 8000df0:	3b01      	subs	r3, #1
 8000df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df6:	d1f6      	bne.n	8000de6 <iGetTemp+0x1e>
 8000df8:	e004      	b.n	8000e04 <iGetTemp+0x3c>
		{
			temp = Resistanse[i][0];
 8000dfa:	4a03      	ldr	r2, [pc, #12]	; (8000e08 <iGetTemp+0x40>)
 8000dfc:	f832 0023 	ldrh.w	r0, [r2, r3, lsl #2]
			break;
 8000e00:	e000      	b.n	8000e04 <iGetTemp+0x3c>
		 temp = 0;
 8000e02:	2000      	movs	r0, #0
		}
	 }

	 return (uint16_t)	temp;
 }
 8000e04:	b200      	sxth	r0, r0
 8000e06:	bd08      	pop	{r3, pc}
 8000e08:	0800754c 	.word	0x0800754c

08000e0c <uiGetDinMask>:
  *
  */
 uint32_t uiGetDinMask()
 {
 	uint32_t uiMask = 0;
 	for (int8_t i = (DIN_CHANNEL -1);  i > -1 ; i--)
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <uiGetDinMask+0x1c>)
 8000e0e:	f1a3 0190 	sub.w	r1, r3, #144	; 0x90
 	uint32_t uiMask = 0;
 8000e12:	2000      	movs	r0, #0
 	{
 		uiMask <<=1;
 		uiMask |= ( xDinConfig[ i ].ucValue & 0x01 );
 8000e14:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8000e18:	f002 0201 	and.w	r2, r2, #1
 8000e1c:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
 	for (int8_t i = (DIN_CHANNEL -1);  i > -1 ; i--)
 8000e20:	3b10      	subs	r3, #16
 8000e22:	428b      	cmp	r3, r1
 8000e24:	d1f6      	bne.n	8000e14 <uiGetDinMask+0x8>
 	}
 	return ( uiMask );
 }
 8000e26:	4770      	bx	lr
 8000e28:	20000168 	.word	0x20000168

08000e2c <vDTask>:
 {
 8000e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e30:	b085      	sub	sp, #20
	  xSystemEventGroupHandle =  xGetSystemControlEvent();
 8000e32:	f000 f983 	bl	800113c <xGetSystemControlEvent>
 8000e36:	4b6a      	ldr	r3, [pc, #424]	; (8000fe0 <vDTask+0x1b4>)
 8000e38:	6018      	str	r0, [r3, #0]
	eDinConfig( INPUT_1, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 8000e3a:	230a      	movs	r3, #10
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	2100      	movs	r1, #0
 8000e40:	4608      	mov	r0, r1
 8000e42:	f7ff fef1 	bl	8000c28 <eDinConfig>
	eDinConfig( INPUT_2, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 8000e46:	230a      	movs	r3, #10
 8000e48:	461a      	mov	r2, r3
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	f7ff feeb 	bl	8000c28 <eDinConfig>
	eDinConfig( INPUT_3, DIN_CONFIG_NEGATIVE, DEF_H_FRONT, DEF_L_FRONT );
 8000e52:	230a      	movs	r3, #10
 8000e54:	461a      	mov	r2, r3
 8000e56:	2100      	movs	r1, #0
 8000e58:	2002      	movs	r0, #2
 8000e5a:	f7ff fee5 	bl	8000c28 <eDinConfig>
	eDinConfig( INPUT_4, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 8000e5e:	230a      	movs	r3, #10
 8000e60:	461a      	mov	r2, r3
 8000e62:	2100      	movs	r1, #0
 8000e64:	2003      	movs	r0, #3
 8000e66:	f7ff fedf 	bl	8000c28 <eDinConfig>
	eDinConfig( INPUT_5, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 8000e6a:	230a      	movs	r3, #10
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	2100      	movs	r1, #0
 8000e70:	2004      	movs	r0, #4
 8000e72:	f7ff fed9 	bl	8000c28 <eDinConfig>
	eDinConfig( INPUT_6, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 8000e76:	230a      	movs	r3, #10
 8000e78:	461a      	mov	r2, r3
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	2005      	movs	r0, #5
 8000e7e:	f7ff fed3 	bl	8000c28 <eDinConfig>
	eDinConfig( INPUT_7, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 8000e82:	230a      	movs	r3, #10
 8000e84:	461a      	mov	r2, r3
 8000e86:	2100      	movs	r1, #0
 8000e88:	2006      	movs	r0, #6
 8000e8a:	f7ff fecd 	bl	8000c28 <eDinConfig>
	eDinConfig( INPUT_8, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 8000e8e:	230a      	movs	r3, #10
 8000e90:	461a      	mov	r2, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	2007      	movs	r0, #7
 8000e96:	f7ff fec7 	bl	8000c28 <eDinConfig>
	eDinConfig( INPUT_9, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 8000e9a:	230a      	movs	r3, #10
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	2008      	movs	r0, #8
 8000ea2:	f7ff fec1 	bl	8000c28 <eDinConfig>
		xDoutConfig[channel].eOutConfig = type;
 8000ea6:	4b4f      	ldr	r3, [pc, #316]	; (8000fe4 <vDTask+0x1b8>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	705a      	strb	r2, [r3, #1]
 8000eac:	70da      	strb	r2, [r3, #3]
 8000eae:	715a      	strb	r2, [r3, #5]
 8000eb0:	71da      	strb	r2, [r3, #7]
		 ADC_OLD_RAW[i] = 0x00;
 8000eb2:	4a4d      	ldr	r2, [pc, #308]	; (8000fe8 <vDTask+0x1bc>)
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	8013      	strh	r3, [r2, #0]
 8000eb8:	8053      	strh	r3, [r2, #2]
 8000eba:	8093      	strh	r3, [r2, #4]
	  uint8_t init_timer = 0;
 8000ebc:	9303      	str	r3, [sp, #12]
		    HAL_ADC_Start_DMA(&hadc1,&ADC1_DMABuffer[0], 9);
 8000ebe:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8000fec <vDTask+0x1c0>
 8000ec2:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8000ff0 <vDTask+0x1c4>
		  	vTaskDelay(1);
 8000ec6:	f04f 0901 	mov.w	r9, #1
									xDinConfig[i].ulCounter = 0U;
 8000eca:	4698      	mov	r8, r3
 8000ecc:	e05b      	b.n	8000f86 <vDTask+0x15a>
				   DataReadyFlag = 1;
 8000ece:	4b49      	ldr	r3, [pc, #292]	; (8000ff4 <vDTask+0x1c8>)
 8000ed0:	f883 9000 	strb.w	r9, [r3]
				   xEventGroupSetBits(xSystemEventGroupHandle, DIN_READY );
 8000ed4:	4649      	mov	r1, r9
 8000ed6:	4b42      	ldr	r3, [pc, #264]	; (8000fe0 <vDTask+0x1b4>)
 8000ed8:	6818      	ldr	r0, [r3, #0]
 8000eda:	f004 fc3d 	bl	8005758 <xEventGroupSetBits>
 8000ede:	e068      	b.n	8000fb2 <vDTask+0x186>
									if (xDinConfig[i].ulCounter > ( (xDinConfig[i].ucTempValue == GPIO_PIN_RESET) ? xDinConfig[i].ulHighCounter : xDinConfig[i].ulLowCounter ) )
 8000ee0:	6862      	ldr	r2, [r4, #4]
 8000ee2:	e016      	b.n	8000f12 <vDTask+0xe6>
									xDinConfig[i].ulCounter = 0U;
 8000ee4:	f8c4 8000 	str.w	r8, [r4]
			for (uint8_t i = 0U; i < DIN_CHANNEL; i++)
 8000ee8:	3410      	adds	r4, #16
 8000eea:	3508      	adds	r5, #8
 8000eec:	42bc      	cmp	r4, r7
 8000eee:	d01b      	beq.n	8000f28 <vDTask+0xfc>
						if ( xDinConfig[i].eInputType != RPM_CONFIG )
 8000ef0:	4626      	mov	r6, r4
 8000ef2:	7ba3      	ldrb	r3, [r4, #14]
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d0f7      	beq.n	8000ee8 <vDTask+0xbc>
							uint8_t uсDinState = HAL_GPIO_ReadPin( xDinPortConfig[i].GPIOx, xDinPortConfig[i].Pin);
 8000ef8:	8829      	ldrh	r1, [r5, #0]
 8000efa:	6868      	ldr	r0, [r5, #4]
 8000efc:	f001 ffd2 	bl	8002ea4 <HAL_GPIO_ReadPin>
							if (uсDinState != xDinConfig[i].ucTempValue )
 8000f00:	7b62      	ldrb	r2, [r4, #13]
 8000f02:	4282      	cmp	r2, r0
 8000f04:	d0ee      	beq.n	8000ee4 <vDTask+0xb8>
									xDinConfig[i].ulCounter ++ ;
 8000f06:	6823      	ldr	r3, [r4, #0]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	6023      	str	r3, [r4, #0]
									if (xDinConfig[i].ulCounter > ( (xDinConfig[i].ucTempValue == GPIO_PIN_RESET) ? xDinConfig[i].ulHighCounter : xDinConfig[i].ulLowCounter ) )
 8000f0c:	2a00      	cmp	r2, #0
 8000f0e:	d1e7      	bne.n	8000ee0 <vDTask+0xb4>
 8000f10:	68a2      	ldr	r2, [r4, #8]
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d9e8      	bls.n	8000ee8 <vDTask+0xbc>
												xDinConfig[i].ucValue = uсDinState  ^ ( (~xDinConfig[i].eInputType) & 0x1);
 8000f16:	7bb3      	ldrb	r3, [r6, #14]
 8000f18:	f083 0301 	eor.w	r3, r3, #1
 8000f1c:	f003 0301 	and.w	r3, r3, #1
 8000f20:	4043      	eors	r3, r0
 8000f22:	7333      	strb	r3, [r6, #12]
												xDinConfig[i].ucTempValue = uсDinState ;
 8000f24:	7370      	strb	r0, [r6, #13]
 8000f26:	e7df      	b.n	8000ee8 <vDTask+0xbc>
			xEventGroupWaitBits(xSystemEventGroupHandle,  AIN_READY,  pdFALSE, pdTRUE, portMAX_DELAY );
 8000f28:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	464b      	mov	r3, r9
 8000f30:	4642      	mov	r2, r8
 8000f32:	2102      	movs	r1, #2
 8000f34:	482a      	ldr	r0, [pc, #168]	; (8000fe0 <vDTask+0x1b4>)
 8000f36:	6800      	ldr	r0, [r0, #0]
 8000f38:	f004 fb83 	bl	8005642 <xEventGroupWaitBits>
			HAL_ADC_Stop_DMA(&hadc1);
 8000f3c:	4650      	mov	r0, sl
 8000f3e:	f001 fb0f 	bl	8002560 <HAL_ADC_Stop_DMA>
			vGetAverDataFromRAW(&ADC1_DMABuffer[0],&ADC_RAW[0],0,0,3,3);
 8000f42:	2303      	movs	r3, #3
 8000f44:	9301      	str	r3, [sp, #4]
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	4643      	mov	r3, r8
 8000f4a:	4642      	mov	r2, r8
 8000f4c:	492a      	ldr	r1, [pc, #168]	; (8000ff8 <vDTask+0x1cc>)
 8000f4e:	4658      	mov	r0, fp
 8000f50:	f7ff febc 	bl	8000ccc <vGetAverDataFromRAW>
			vSetRegInput(WATER_TEMP  , iGetTemp(1));
 8000f54:	4648      	mov	r0, r9
 8000f56:	f7ff ff37 	bl	8000dc8 <iGetTemp>
 8000f5a:	4601      	mov	r1, r0
 8000f5c:	4648      	mov	r0, r9
 8000f5e:	f000 fbc5 	bl	80016ec <vSetRegInput>
			vSetRegInput(IN_AIR_TEMP , iGetTemp(2));
 8000f62:	2002      	movs	r0, #2
 8000f64:	f7ff ff30 	bl	8000dc8 <iGetTemp>
 8000f68:	4601      	mov	r1, r0
 8000f6a:	2002      	movs	r0, #2
 8000f6c:	f000 fbbe 	bl	80016ec <vSetRegInput>
			vSetRegInput(TYPE, (uiGetDinMask() & DEVICE_MODE_MASK)>>DEVICE_MODE_OFFSET );
 8000f70:	f7ff ff4c 	bl	8000e0c <uiGetDinMask>
 8000f74:	f3c0 1101 	ubfx	r1, r0, #4, #2
 8000f78:	4640      	mov	r0, r8
 8000f7a:	f000 fbb7 	bl	80016ec <vSetRegInput>
			vSetRegInput(DOOR_STATE, (uiGetDinMask() & DEVICE_DOOR_MASK)>>DEVICE_DOOR_OFFSET );
 8000f7e:	4641      	mov	r1, r8
 8000f80:	2006      	movs	r0, #6
 8000f82:	f000 fbb3 	bl	80016ec <vSetRegInput>
		    HAL_ADC_Start_DMA(&hadc1,&ADC1_DMABuffer[0], 9);
 8000f86:	2209      	movs	r2, #9
 8000f88:	4659      	mov	r1, fp
 8000f8a:	4650      	mov	r0, sl
 8000f8c:	f001 f99e 	bl	80022cc <HAL_ADC_Start_DMA>
		  	vTaskDelay(1);
 8000f90:	4648      	mov	r0, r9
 8000f92:	f005 fb31 	bl	80065f8 <vTaskDelay>
			HAL_GPIO_WritePin( LED_G_GPIO_Port, LED_G_Pin,GPIO_PIN_SET);
 8000f96:	464a      	mov	r2, r9
 8000f98:	2120      	movs	r1, #32
 8000f9a:	4818      	ldr	r0, [pc, #96]	; (8000ffc <vDTask+0x1d0>)
 8000f9c:	f001 ff88 	bl	8002eb0 <HAL_GPIO_WritePin>
			if (DataReadyFlag == 0)
 8000fa0:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <vDTask+0x1c8>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	b92b      	cbnz	r3, 8000fb2 <vDTask+0x186>
			   init_timer++;
 8000fa6:	9b03      	ldr	r3, [sp, #12]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	9303      	str	r3, [sp, #12]
			   if (init_timer == 50)
 8000fae:	2b32      	cmp	r3, #50	; 0x32
 8000fb0:	d08d      	beq.n	8000ece <vDTask+0xa2>
	  uint8_t init_timer = 0;
 8000fb2:	2400      	movs	r4, #0
				HAL_GPIO_WritePin(xDoutPortConfig[i].GPIOx, xDoutPortConfig[i].Pin, xDoutConfig[i].state == 0 ? GPIO_PIN_RESET: GPIO_PIN_SET );
 8000fb4:	4e0b      	ldr	r6, [pc, #44]	; (8000fe4 <vDTask+0x1b8>)
 8000fb6:	4d12      	ldr	r5, [pc, #72]	; (8001000 <vDTask+0x1d4>)
 8000fb8:	f816 2014 	ldrb.w	r2, [r6, r4, lsl #1]
 8000fbc:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8000fc0:	3a00      	subs	r2, #0
 8000fc2:	bf18      	it	ne
 8000fc4:	2201      	movne	r2, #1
 8000fc6:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
 8000fca:	6858      	ldr	r0, [r3, #4]
 8000fcc:	f001 ff70 	bl	8002eb0 <HAL_GPIO_WritePin>
			for (uint8_t i= 0U; i < DOUT_CHANNEL; i++)
 8000fd0:	3401      	adds	r4, #1
 8000fd2:	2c04      	cmp	r4, #4
 8000fd4:	d1f0      	bne.n	8000fb8 <vDTask+0x18c>
 8000fd6:	4c0b      	ldr	r4, [pc, #44]	; (8001004 <vDTask+0x1d8>)
 8000fd8:	4d0b      	ldr	r5, [pc, #44]	; (8001008 <vDTask+0x1dc>)
 8000fda:	f104 0790 	add.w	r7, r4, #144	; 0x90
 8000fde:	e787      	b.n	8000ef0 <vDTask+0xc4>
 8000fe0:	20000204 	.word	0x20000204
 8000fe4:	200001f8 	.word	0x200001f8
 8000fe8:	20000158 	.word	0x20000158
 8000fec:	20000144 	.word	0x20000144
 8000ff0:	20000fc8 	.word	0x20000fc8
 8000ff4:	20000166 	.word	0x20000166
 8000ff8:	20000160 	.word	0x20000160
 8000ffc:	40010800 	.word	0x40010800
 8001000:	08007660 	.word	0x08007660
 8001004:	20000168 	.word	0x20000168
 8001008:	08007618 	.word	0x08007618

0800100c <vSetOutState>:
 /*
  *
  */
 void vSetOutState( uint8_t channel, uint8_t state)
 {
	 xDoutConfig[channel].state = state;
 800100c:	4b01      	ldr	r3, [pc, #4]	; (8001014 <vSetOutState+0x8>)
 800100e:	f803 1010 	strb.w	r1, [r3, r0, lsl #1]
 }
 8001012:	4770      	bx	lr
 8001014:	200001f8 	.word	0x200001f8

08001018 <vGetOutState>:
 uint8_t vGetOutState(uint8_t channel)
 {
	 return xDoutConfig[channel].state;
 }
 8001018:	4b01      	ldr	r3, [pc, #4]	; (8001020 <vGetOutState+0x8>)
 800101a:	f813 0010 	ldrb.w	r0, [r3, r0, lsl #1]
 800101e:	4770      	bx	lr
 8001020:	200001f8 	.word	0x200001f8

08001024 <vFDWtiteReg>:
{
	return ((void *)&SettingsREG[adr]);
}

void vFDWtiteReg(void)
{
 8001024:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001028:	b087      	sub	sp, #28
{

  HAL_StatusTypeDef flashStatus = HAL_ERROR;
  while ( flashStatus != HAL_OK )
  {
    flashStatus = HAL_FLASH_Unlock();
 800102a:	f001 fce1 	bl	80029f0 <HAL_FLASH_Unlock>
  while ( flashStatus != HAL_OK )
 800102e:	2800      	cmp	r0, #0
 8001030:	d1fb      	bne.n	800102a <vFDWtiteReg+0x6>
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS()
{
  /* USER CODE BEGIN 2 */
  uint32_t               pageError = 0U;
 8001032:	2300      	movs	r3, #0
 8001034:	9301      	str	r3, [sp, #4]
  HAL_StatusTypeDef      status    = HAL_ERROR;
  FLASH_EraseInitTypeDef eraseInit;


    eraseInit.TypeErase    = FLASH_TYPEERASE_PAGES;
 8001036:	9302      	str	r3, [sp, #8]
    eraseInit.Banks        = FLASH_BANK_1;
 8001038:	2301      	movs	r3, #1
 800103a:	9303      	str	r3, [sp, #12]
    eraseInit.PageAddress      = FLASH_DATA_ADR;
 800103c:	4c12      	ldr	r4, [pc, #72]	; (8001088 <vFDWtiteReg+0x64>)
 800103e:	9404      	str	r4, [sp, #16]
    eraseInit.NbPages    = 1U;
 8001040:	9305      	str	r3, [sp, #20]
    status = HAL_FLASHEx_Erase( &eraseInit, &pageError );
 8001042:	a901      	add	r1, sp, #4
 8001044:	a802      	add	r0, sp, #8
 8001046:	f001 fd8f 	bl	8002b68 <HAL_FLASHEx_Erase>
{
  /* USER CODE BEGIN 3 */
  uint32_t           i      = 0U;
  HAL_StatusTypeDef      status    = HAL_ERROR;

  for ( i=0U; i<Len; i+=4U )
 800104a:	4d10      	ldr	r5, [pc, #64]	; (800108c <vFDWtiteReg+0x68>)
  {
	if ( ( uint32_t )( dest + i ) > FLASH_SIZE )
 800104c:	4f10      	ldr	r7, [pc, #64]	; (8001090 <vFDWtiteReg+0x6c>)
	{
      if ( HAL_FLASH_Program( FLASH_TYPEPROGRAM_WORD, ( uint32_t )( dest + i ), *( uint32_t* )( src + i ) ) == HAL_OK )
 800104e:	f04f 0900 	mov.w	r9, #0
  for ( i=0U; i<Len; i+=4U )
 8001052:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8001094 <vFDWtiteReg+0x70>
 8001056:	e003      	b.n	8001060 <vFDWtiteReg+0x3c>
 8001058:	3404      	adds	r4, #4
 800105a:	3504      	adds	r5, #4
 800105c:	4544      	cmp	r4, r8
 800105e:	d00c      	beq.n	800107a <vFDWtiteReg+0x56>
	if ( ( uint32_t )( dest + i ) > FLASH_SIZE )
 8001060:	42bc      	cmp	r4, r7
 8001062:	d3f9      	bcc.n	8001058 <vFDWtiteReg+0x34>
      if ( HAL_FLASH_Program( FLASH_TYPEPROGRAM_WORD, ( uint32_t )( dest + i ), *( uint32_t* )( src + i ) ) == HAL_OK )
 8001064:	682a      	ldr	r2, [r5, #0]
 8001066:	464b      	mov	r3, r9
 8001068:	4621      	mov	r1, r4
 800106a:	2002      	movs	r0, #2
 800106c:	f001 fd16 	bl	8002a9c <HAL_FLASH_Program>
 8001070:	b918      	cbnz	r0, 800107a <vFDWtiteReg+0x56>
      {
        if ( *( uint32_t* )( src + i ) != *( uint32_t* )( dest + i ) )
 8001072:	682a      	ldr	r2, [r5, #0]
 8001074:	6823      	ldr	r3, [r4, #0]
 8001076:	429a      	cmp	r2, r3
 8001078:	d0ee      	beq.n	8001058 <vFDWtiteReg+0x34>
    flashStatus = HAL_FLASH_Lock();
 800107a:	f001 fccf 	bl	8002a1c <HAL_FLASH_Lock>
  while ( flashStatus != HAL_OK )
 800107e:	2800      	cmp	r0, #0
 8001080:	d1fb      	bne.n	800107a <vFDWtiteReg+0x56>
}
 8001082:	b007      	add	sp, #28
 8001084:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001088:	0800fc00 	.word	0x0800fc00
 800108c:	20000004 	.word	0x20000004
 8001090:	08008000 	.word	0x08008000
 8001094:	0800fc20 	.word	0x0800fc20

08001098 <vFDInit>:
{
 8001098:	b508      	push	{r3, lr}
	if (FisrtStart)
 800109a:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <vFDInit+0x38>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	b91b      	cbnz	r3, 80010a8 <vFDInit+0x10>
}
 80010a0:	bd08      	pop	{r3, pc}
		   vFDWtiteReg();
 80010a2:	f7ff ffbf 	bl	8001024 <vFDWtiteReg>
 80010a6:	e003      	b.n	80010b0 <vFDInit+0x18>
    uint32_t i    = 0U;
    uint8_t *psrc = src;

    for ( i=0U; i<Len; i++ )
    {
      dest[i] = *psrc++;
 80010a8:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <vFDInit+0x3c>)
	   if (buff!= VALID_CODE)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b72      	cmp	r3, #114	; 0x72
 80010ae:	d1f8      	bne.n	80010a2 <vFDInit+0xa>
    for ( i=0U; i<Len; i++ )
 80010b0:	4a09      	ldr	r2, [pc, #36]	; (80010d8 <vFDInit+0x40>)
 80010b2:	1e53      	subs	r3, r2, #1
 80010b4:	f102 001d 	add.w	r0, r2, #29
      dest[i] = *psrc++;
 80010b8:	4908      	ldr	r1, [pc, #32]	; (80010dc <vFDInit+0x44>)
 80010ba:	1a89      	subs	r1, r1, r2
 80010bc:	5cca      	ldrb	r2, [r1, r3]
 80010be:	f803 2f01 	strb.w	r2, [r3, #1]!
    for ( i=0U; i<Len; i++ )
 80010c2:	4283      	cmp	r3, r0
 80010c4:	d1fa      	bne.n	80010bc <vFDInit+0x24>
	   FisrtStart = 0;
 80010c6:	4b02      	ldr	r3, [pc, #8]	; (80010d0 <vFDInit+0x38>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]
}
 80010cc:	e7e8      	b.n	80010a0 <vFDInit+0x8>
 80010ce:	bf00      	nop
 80010d0:	20000000 	.word	0x20000000
 80010d4:	0800fc00 	.word	0x0800fc00
 80010d8:	20000004 	.word	0x20000004
 80010dc:	0800fc01 	.word	0x0800fc01

080010e0 <vFDSetRegState>:
{
 80010e0:	b508      	push	{r3, lr}
	SettingsREG[adr+1]= state;
 80010e2:	3001      	adds	r0, #1
 80010e4:	4b02      	ldr	r3, [pc, #8]	; (80010f0 <vFDSetRegState+0x10>)
 80010e6:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
	vFDWtiteReg();
 80010ea:	f7ff ff9b 	bl	8001024 <vFDWtiteReg>
}
 80010ee:	bd08      	pop	{r3, pc}
 80010f0:	20000004 	.word	0x20000004

080010f4 <vFDGetRegState>:
{
 80010f4:	b510      	push	{r4, lr}
 80010f6:	4604      	mov	r4, r0
	if (FisrtStart)
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <vFDGetRegState+0x1c>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	b923      	cbnz	r3, 8001108 <vFDGetRegState+0x14>
	return SettingsREG[adr+1];
 80010fe:	3401      	adds	r4, #1
}
 8001100:	4b04      	ldr	r3, [pc, #16]	; (8001114 <vFDGetRegState+0x20>)
 8001102:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8001106:	bd10      	pop	{r4, pc}
	  vFDInit();
 8001108:	f7ff ffc6 	bl	8001098 <vFDInit>
 800110c:	e7f7      	b.n	80010fe <vFDGetRegState+0xa>
 800110e:	bf00      	nop
 8001110:	20000000 	.word	0x20000000
 8001114:	20000004 	.word	0x20000004

08001118 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001118:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  for(;;)
  {
    osDelay(10);
 800111a:	240a      	movs	r4, #10
 800111c:	4620      	mov	r0, r4
 800111e:	f004 f9fb 	bl	8005518 <osDelay>
  for(;;)
 8001122:	e7fb      	b.n	800111c <StartDefaultTask+0x4>

08001124 <xGetOSEvent>:
}
 8001124:	4b01      	ldr	r3, [pc, #4]	; (800112c <xGetOSEvent+0x8>)
 8001126:	6818      	ldr	r0, [r3, #0]
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	2000117c 	.word	0x2000117c

08001130 <xGetUARTEvent>:
 }
 8001130:	4b01      	ldr	r3, [pc, #4]	; (8001138 <xGetUARTEvent+0x8>)
 8001132:	6818      	ldr	r0, [r3, #0]
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	200011c4 	.word	0x200011c4

0800113c <xGetSystemControlEvent>:
 }
 800113c:	4b01      	ldr	r3, [pc, #4]	; (8001144 <xGetSystemControlEvent+0x8>)
 800113e:	6818      	ldr	r0, [r3, #0]
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	200011a0 	.word	0x200011a0

08001148 <vTimerInit>:
{
 8001148:	b508      	push	{r3, lr}
	htim2.Init.Period = timeout;
 800114a:	4b04      	ldr	r3, [pc, #16]	; (800115c <vTimerInit+0x14>)
 800114c:	60d8      	str	r0, [r3, #12]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800114e:	4618      	mov	r0, r3
 8001150:	f002 fc50 	bl	80039f4 <HAL_TIM_Base_Init>
 8001154:	b900      	cbnz	r0, 8001158 <vTimerInit+0x10>
}
 8001156:	bd08      	pop	{r3, pc}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001158:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800115a:	e7fe      	b.n	800115a <vTimerInit+0x12>
 800115c:	2000103c 	.word	0x2000103c

08001160 <vStartTimer>:
{
 8001160:	b508      	push	{r3, lr}
	HAL_TIM_Base_Start_IT(&htim2);
 8001162:	4802      	ldr	r0, [pc, #8]	; (800116c <vStartTimer+0xc>)
 8001164:	f002 fae8 	bl	8003738 <HAL_TIM_Base_Start_IT>
}
 8001168:	bd08      	pop	{r3, pc}
 800116a:	bf00      	nop
 800116c:	2000103c 	.word	0x2000103c

08001170 <vStopTimer>:
{
 8001170:	b508      	push	{r3, lr}
	HAL_TIM_Base_Stop_IT(&htim2);
 8001172:	4802      	ldr	r0, [pc, #8]	; (800117c <vStopTimer+0xc>)
 8001174:	f002 fb14 	bl	80037a0 <HAL_TIM_Base_Stop_IT>
}
 8001178:	bd08      	pop	{r3, pc}
 800117a:	bf00      	nop
 800117c:	2000103c 	.word	0x2000103c

08001180 <SystemClock_Config>:
{
 8001180:	b500      	push	{lr}
 8001182:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001184:	2220      	movs	r2, #32
 8001186:	2100      	movs	r1, #0
 8001188:	a80b      	add	r0, sp, #44	; 0x2c
 800118a:	f006 f90d 	bl	80073a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800118e:	2300      	movs	r3, #0
 8001190:	9305      	str	r3, [sp, #20]
 8001192:	9306      	str	r3, [sp, #24]
 8001194:	9307      	str	r3, [sp, #28]
 8001196:	9308      	str	r3, [sp, #32]
 8001198:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800119a:	9301      	str	r3, [sp, #4]
 800119c:	9302      	str	r3, [sp, #8]
 800119e:	9303      	str	r3, [sp, #12]
 80011a0:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011a2:	2302      	movs	r3, #2
 80011a4:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011a6:	2201      	movs	r2, #1
 80011a8:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011aa:	2210      	movs	r2, #16
 80011ac:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ae:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80011b0:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80011b4:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b6:	a80a      	add	r0, sp, #40	; 0x28
 80011b8:	f001 fe80 	bl	8002ebc <HAL_RCC_OscConfig>
 80011bc:	b9c8      	cbnz	r0, 80011f2 <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011be:	230f      	movs	r3, #15
 80011c0:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c2:	2102      	movs	r1, #2
 80011c4:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c6:	2300      	movs	r3, #0
 80011c8:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011ce:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d0:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011d2:	a805      	add	r0, sp, #20
 80011d4:	f002 f8b2 	bl	800333c <HAL_RCC_ClockConfig>
 80011d8:	b968      	cbnz	r0, 80011f6 <SystemClock_Config+0x76>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011da:	2302      	movs	r3, #2
 80011dc:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80011de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011e2:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011e4:	a801      	add	r0, sp, #4
 80011e6:	f002 f99f 	bl	8003528 <HAL_RCCEx_PeriphCLKConfig>
 80011ea:	b930      	cbnz	r0, 80011fa <SystemClock_Config+0x7a>
}
 80011ec:	b015      	add	sp, #84	; 0x54
 80011ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80011f2:	b672      	cpsid	i
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <SystemClock_Config+0x74>
 80011f6:	b672      	cpsid	i
 80011f8:	e7fe      	b.n	80011f8 <SystemClock_Config+0x78>
 80011fa:	b672      	cpsid	i
 80011fc:	e7fe      	b.n	80011fc <SystemClock_Config+0x7c>
	...

08001200 <main>:
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b092      	sub	sp, #72	; 0x48
  HAL_Init();
 8001204:	f000 ff0e 	bl	8002024 <HAL_Init>
  SystemClock_Config();
 8001208:	f7ff ffba 	bl	8001180 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	2400      	movs	r4, #0
 800120e:	940b      	str	r4, [sp, #44]	; 0x2c
 8001210:	940c      	str	r4, [sp, #48]	; 0x30
 8001212:	940d      	str	r4, [sp, #52]	; 0x34
 8001214:	940e      	str	r4, [sp, #56]	; 0x38
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001216:	4dad      	ldr	r5, [pc, #692]	; (80014cc <main+0x2cc>)
 8001218:	69ab      	ldr	r3, [r5, #24]
 800121a:	f043 0310 	orr.w	r3, r3, #16
 800121e:	61ab      	str	r3, [r5, #24]
 8001220:	69ab      	ldr	r3, [r5, #24]
 8001222:	f003 0310 	and.w	r3, r3, #16
 8001226:	9301      	str	r3, [sp, #4]
 8001228:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800122a:	69ab      	ldr	r3, [r5, #24]
 800122c:	f043 0320 	orr.w	r3, r3, #32
 8001230:	61ab      	str	r3, [r5, #24]
 8001232:	69ab      	ldr	r3, [r5, #24]
 8001234:	f003 0320 	and.w	r3, r3, #32
 8001238:	9302      	str	r3, [sp, #8]
 800123a:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800123c:	69ab      	ldr	r3, [r5, #24]
 800123e:	f043 0304 	orr.w	r3, r3, #4
 8001242:	61ab      	str	r3, [r5, #24]
 8001244:	69ab      	ldr	r3, [r5, #24]
 8001246:	f003 0304 	and.w	r3, r3, #4
 800124a:	9303      	str	r3, [sp, #12]
 800124c:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800124e:	69ab      	ldr	r3, [r5, #24]
 8001250:	f043 0308 	orr.w	r3, r3, #8
 8001254:	61ab      	str	r3, [r5, #24]
 8001256:	69ab      	ldr	r3, [r5, #24]
 8001258:	f003 0308 	and.w	r3, r3, #8
 800125c:	9304      	str	r3, [sp, #16]
 800125e:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, LED_R_Pin|LED_G_Pin|EN_Pin, GPIO_PIN_RESET);
 8001260:	4e9b      	ldr	r6, [pc, #620]	; (80014d0 <main+0x2d0>)
 8001262:	4622      	mov	r2, r4
 8001264:	f44f 7198 	mov.w	r1, #304	; 0x130
 8001268:	4630      	mov	r0, r6
 800126a:	f001 fe21 	bl	8002eb0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, K2_Pin|K4_Pin|K6_Pin|K8_Pin, GPIO_PIN_RESET);
 800126e:	4f99      	ldr	r7, [pc, #612]	; (80014d4 <main+0x2d4>)
 8001270:	4622      	mov	r2, r4
 8001272:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001276:	4638      	mov	r0, r7
 8001278:	f001 fe1a 	bl	8002eb0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|EN_Pin;
 800127c:	f44f 7398 	mov.w	r3, #304	; 0x130
 8001280:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001282:	f04f 0901 	mov.w	r9, #1
 8001286:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128c:	f04f 0802 	mov.w	r8, #2
 8001290:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001294:	a90b      	add	r1, sp, #44	; 0x2c
 8001296:	4630      	mov	r0, r6
 8001298:	f001 fcca 	bl	8002c30 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = S1_Pin|S2_Pin|S3_Pin|S4_Pin
 800129c:	f640 73ff 	movw	r3, #4095	; 0xfff
 80012a0:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a2:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a6:	a90b      	add	r1, sp, #44	; 0x2c
 80012a8:	4638      	mov	r0, r7
 80012aa:	f001 fcc1 	bl	8002c30 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = K2_Pin|K4_Pin|K6_Pin|K8_Pin;
 80012ae:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80012b2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b4:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012be:	a90b      	add	r1, sp, #44	; 0x2c
 80012c0:	4638      	mov	r0, r7
 80012c2:	f001 fcb5 	bl	8002c30 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SW8_Pin;
 80012c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012ca:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012cc:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(SW8_GPIO_Port, &GPIO_InitStruct);
 80012d0:	a90b      	add	r1, sp, #44	; 0x2c
 80012d2:	4630      	mov	r0, r6
 80012d4:	f001 fcac 	bl	8002c30 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012d8:	696b      	ldr	r3, [r5, #20]
 80012da:	ea43 0309 	orr.w	r3, r3, r9
 80012de:	616b      	str	r3, [r5, #20]
 80012e0:	696b      	ldr	r3, [r5, #20]
 80012e2:	ea03 0309 	and.w	r3, r3, r9
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80012ea:	4622      	mov	r2, r4
 80012ec:	2105      	movs	r1, #5
 80012ee:	200b      	movs	r0, #11
 80012f0:	f001 f978 	bl	80025e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80012f4:	200b      	movs	r0, #11
 80012f6:	f001 f9ab 	bl	8002650 <HAL_NVIC_EnableIRQ>
  huart1.Instance = USART1;
 80012fa:	4877      	ldr	r0, [pc, #476]	; (80014d8 <main+0x2d8>)
 80012fc:	4b77      	ldr	r3, [pc, #476]	; (80014dc <main+0x2dc>)
 80012fe:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8001300:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001304:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8001306:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800130a:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800130c:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 800130e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001312:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001314:	230c      	movs	r3, #12
 8001316:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001318:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800131a:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800131c:	f002 fe7e 	bl	800401c <HAL_UART_Init>
 8001320:	2800      	cmp	r0, #0
 8001322:	f040 813a 	bne.w	800159a <main+0x39a>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001326:	2300      	movs	r3, #0
 8001328:	930b      	str	r3, [sp, #44]	; 0x2c
 800132a:	930c      	str	r3, [sp, #48]	; 0x30
 800132c:	930d      	str	r3, [sp, #52]	; 0x34
 800132e:	930e      	str	r3, [sp, #56]	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001330:	9307      	str	r3, [sp, #28]
 8001332:	9308      	str	r3, [sp, #32]
  htim2.Instance = TIM2;
 8001334:	486a      	ldr	r0, [pc, #424]	; (80014e0 <main+0x2e0>)
 8001336:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800133a:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 3264;
 800133c:	f44f 624c 	mov.w	r2, #3264	; 0xcc0
 8001340:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001342:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 1000;
 8001344:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001348:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800134a:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800134c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800134e:	f002 fb51 	bl	80039f4 <HAL_TIM_Base_Init>
 8001352:	2800      	cmp	r0, #0
 8001354:	f040 8123 	bne.w	800159e <main+0x39e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001358:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800135c:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800135e:	a90b      	add	r1, sp, #44	; 0x2c
 8001360:	485f      	ldr	r0, [pc, #380]	; (80014e0 <main+0x2e0>)
 8001362:	f002 fc47 	bl	8003bf4 <HAL_TIM_ConfigClockSource>
 8001366:	2800      	cmp	r0, #0
 8001368:	f040 811b 	bne.w	80015a2 <main+0x3a2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800136c:	2320      	movs	r3, #32
 800136e:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001370:	2300      	movs	r3, #0
 8001372:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001374:	a907      	add	r1, sp, #28
 8001376:	485a      	ldr	r0, [pc, #360]	; (80014e0 <main+0x2e0>)
 8001378:	f002 fda6 	bl	8003ec8 <HAL_TIMEx_MasterConfigSynchronization>
 800137c:	2800      	cmp	r0, #0
 800137e:	f040 8112 	bne.w	80015a6 <main+0x3a6>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001382:	2300      	movs	r3, #0
 8001384:	930b      	str	r3, [sp, #44]	; 0x2c
 8001386:	930c      	str	r3, [sp, #48]	; 0x30
 8001388:	930d      	str	r3, [sp, #52]	; 0x34
  hadc1.Instance = ADC1;
 800138a:	4856      	ldr	r0, [pc, #344]	; (80014e4 <main+0x2e4>)
 800138c:	4a56      	ldr	r2, [pc, #344]	; (80014e8 <main+0x2e8>)
 800138e:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001390:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001394:	6082      	str	r2, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001396:	2201      	movs	r2, #1
 8001398:	7302      	strb	r2, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800139a:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800139c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80013a0:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013a2:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 3;
 80013a4:	2303      	movs	r3, #3
 80013a6:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013a8:	f001 f856 	bl	8002458 <HAL_ADC_Init>
 80013ac:	2800      	cmp	r0, #0
 80013ae:	f040 80fc 	bne.w	80015aa <main+0x3aa>
  sConfig.Channel = ADC_CHANNEL_0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013b6:	2301      	movs	r3, #1
 80013b8:	930c      	str	r3, [sp, #48]	; 0x30
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 80013ba:	2304      	movs	r3, #4
 80013bc:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013be:	a90b      	add	r1, sp, #44	; 0x2c
 80013c0:	4848      	ldr	r0, [pc, #288]	; (80014e4 <main+0x2e4>)
 80013c2:	f000 fe91 	bl	80020e8 <HAL_ADC_ConfigChannel>
 80013c6:	2800      	cmp	r0, #0
 80013c8:	f040 80f1 	bne.w	80015ae <main+0x3ae>
  sConfig.Channel = ADC_CHANNEL_1;
 80013cc:	2301      	movs	r3, #1
 80013ce:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80013d0:	2302      	movs	r3, #2
 80013d2:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013d4:	a90b      	add	r1, sp, #44	; 0x2c
 80013d6:	4843      	ldr	r0, [pc, #268]	; (80014e4 <main+0x2e4>)
 80013d8:	f000 fe86 	bl	80020e8 <HAL_ADC_ConfigChannel>
 80013dc:	2800      	cmp	r0, #0
 80013de:	f040 80e8 	bne.w	80015b2 <main+0x3b2>
  sConfig.Channel = ADC_CHANNEL_2;
 80013e2:	2302      	movs	r3, #2
 80013e4:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80013e6:	2303      	movs	r3, #3
 80013e8:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ea:	a90b      	add	r1, sp, #44	; 0x2c
 80013ec:	483d      	ldr	r0, [pc, #244]	; (80014e4 <main+0x2e4>)
 80013ee:	f000 fe7b 	bl	80020e8 <HAL_ADC_ConfigChannel>
 80013f2:	2800      	cmp	r0, #0
 80013f4:	f040 80df 	bne.w	80015b6 <main+0x3b6>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013f8:	2300      	movs	r3, #0
 80013fa:	9307      	str	r3, [sp, #28]
 80013fc:	9308      	str	r3, [sp, #32]
 80013fe:	9309      	str	r3, [sp, #36]	; 0x24
 8001400:	930a      	str	r3, [sp, #40]	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001402:	9305      	str	r3, [sp, #20]
 8001404:	9306      	str	r3, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001406:	930b      	str	r3, [sp, #44]	; 0x2c
 8001408:	930c      	str	r3, [sp, #48]	; 0x30
 800140a:	930d      	str	r3, [sp, #52]	; 0x34
 800140c:	930e      	str	r3, [sp, #56]	; 0x38
 800140e:	930f      	str	r3, [sp, #60]	; 0x3c
 8001410:	9310      	str	r3, [sp, #64]	; 0x40
 8001412:	9311      	str	r3, [sp, #68]	; 0x44
  htim3.Instance = TIM3;
 8001414:	4835      	ldr	r0, [pc, #212]	; (80014ec <main+0x2ec>)
 8001416:	4a36      	ldr	r2, [pc, #216]	; (80014f0 <main+0x2f0>)
 8001418:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 2;
 800141a:	2202      	movs	r2, #2
 800141c:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141e:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 1000;
 8001420:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001424:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001426:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001428:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800142a:	f002 fae3 	bl	80039f4 <HAL_TIM_Base_Init>
 800142e:	2800      	cmp	r0, #0
 8001430:	f040 80c3 	bne.w	80015ba <main+0x3ba>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001434:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001438:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800143a:	a907      	add	r1, sp, #28
 800143c:	482b      	ldr	r0, [pc, #172]	; (80014ec <main+0x2ec>)
 800143e:	f002 fbd9 	bl	8003bf4 <HAL_TIM_ConfigClockSource>
 8001442:	2800      	cmp	r0, #0
 8001444:	f040 80bb 	bne.w	80015be <main+0x3be>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001448:	4828      	ldr	r0, [pc, #160]	; (80014ec <main+0x2ec>)
 800144a:	f002 faff 	bl	8003a4c <HAL_TIM_PWM_Init>
 800144e:	2800      	cmp	r0, #0
 8001450:	f040 80b7 	bne.w	80015c2 <main+0x3c2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001454:	2300      	movs	r3, #0
 8001456:	9305      	str	r3, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001458:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800145a:	a905      	add	r1, sp, #20
 800145c:	4823      	ldr	r0, [pc, #140]	; (80014ec <main+0x2ec>)
 800145e:	f002 fd33 	bl	8003ec8 <HAL_TIMEx_MasterConfigSynchronization>
 8001462:	2800      	cmp	r0, #0
 8001464:	f040 80af 	bne.w	80015c6 <main+0x3c6>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001468:	2360      	movs	r3, #96	; 0x60
 800146a:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800146c:	2200      	movs	r2, #0
 800146e:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001470:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001472:	2304      	movs	r3, #4
 8001474:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001476:	a90b      	add	r1, sp, #44	; 0x2c
 8001478:	481c      	ldr	r0, [pc, #112]	; (80014ec <main+0x2ec>)
 800147a:	f002 fb41 	bl	8003b00 <HAL_TIM_PWM_ConfigChannel>
 800147e:	2800      	cmp	r0, #0
 8001480:	f040 80a3 	bne.w	80015ca <main+0x3ca>
  sConfigOC.Pulse = 500;
 8001484:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001488:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800148a:	2204      	movs	r2, #4
 800148c:	a90b      	add	r1, sp, #44	; 0x2c
 800148e:	4817      	ldr	r0, [pc, #92]	; (80014ec <main+0x2ec>)
 8001490:	f002 fb36 	bl	8003b00 <HAL_TIM_PWM_ConfigChannel>
 8001494:	2800      	cmp	r0, #0
 8001496:	f040 809a 	bne.w	80015ce <main+0x3ce>
  HAL_TIM_MspPostInit(&htim3);
 800149a:	4814      	ldr	r0, [pc, #80]	; (80014ec <main+0x2ec>)
 800149c:	f000 fcb2 	bl	8001e04 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014a0:	2300      	movs	r3, #0
 80014a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80014a4:	930c      	str	r3, [sp, #48]	; 0x30
 80014a6:	930d      	str	r3, [sp, #52]	; 0x34
 80014a8:	930e      	str	r3, [sp, #56]	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014aa:	9307      	str	r3, [sp, #28]
 80014ac:	9308      	str	r3, [sp, #32]
  htim4.Instance = TIM4;
 80014ae:	4811      	ldr	r0, [pc, #68]	; (80014f4 <main+0x2f4>)
 80014b0:	4a11      	ldr	r2, [pc, #68]	; (80014f8 <main+0x2f8>)
 80014b2:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 32000;
 80014b4:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80014b8:	6042      	str	r2, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ba:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 2000;
 80014bc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80014c0:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c2:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014c4:	2380      	movs	r3, #128	; 0x80
 80014c6:	6183      	str	r3, [r0, #24]
 80014c8:	e018      	b.n	80014fc <main+0x2fc>
 80014ca:	bf00      	nop
 80014cc:	40021000 	.word	0x40021000
 80014d0:	40010800 	.word	0x40010800
 80014d4:	40010c00 	.word	0x40010c00
 80014d8:	20001114 	.word	0x20001114
 80014dc:	40013800 	.word	0x40013800
 80014e0:	2000103c 	.word	0x2000103c
 80014e4:	20000fc8 	.word	0x20000fc8
 80014e8:	40012400 	.word	0x40012400
 80014ec:	20001084 	.word	0x20001084
 80014f0:	40000400 	.word	0x40000400
 80014f4:	200010cc 	.word	0x200010cc
 80014f8:	40000800 	.word	0x40000800
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80014fc:	f002 fa7a 	bl	80039f4 <HAL_TIM_Base_Init>
 8001500:	2800      	cmp	r0, #0
 8001502:	d166      	bne.n	80015d2 <main+0x3d2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001504:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001508:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800150a:	a90b      	add	r1, sp, #44	; 0x2c
 800150c:	4834      	ldr	r0, [pc, #208]	; (80015e0 <main+0x3e0>)
 800150e:	f002 fb71 	bl	8003bf4 <HAL_TIM_ConfigClockSource>
 8001512:	2800      	cmp	r0, #0
 8001514:	d15f      	bne.n	80015d6 <main+0x3d6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001516:	2300      	movs	r3, #0
 8001518:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151a:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800151c:	a907      	add	r1, sp, #28
 800151e:	4830      	ldr	r0, [pc, #192]	; (80015e0 <main+0x3e0>)
 8001520:	f002 fcd2 	bl	8003ec8 <HAL_TIMEx_MasterConfigSynchronization>
 8001524:	2800      	cmp	r0, #0
 8001526:	d158      	bne.n	80015da <main+0x3da>
  osKernelInitialize();
 8001528:	f003 ff44 	bl	80053b4 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800152c:	4a2d      	ldr	r2, [pc, #180]	; (80015e4 <main+0x3e4>)
 800152e:	2100      	movs	r1, #0
 8001530:	482d      	ldr	r0, [pc, #180]	; (80015e8 <main+0x3e8>)
 8001532:	f003 ff8b 	bl	800544c <osThreadNew>
 8001536:	4b2d      	ldr	r3, [pc, #180]	; (80015ec <main+0x3ec>)
 8001538:	6018      	str	r0, [r3, #0]
  DIN_DOUTHandle = osThreadNew(vDTask, NULL, &DIN_DOUT_attributes);
 800153a:	4a2d      	ldr	r2, [pc, #180]	; (80015f0 <main+0x3f0>)
 800153c:	2100      	movs	r1, #0
 800153e:	482d      	ldr	r0, [pc, #180]	; (80015f4 <main+0x3f4>)
 8001540:	f003 ff84 	bl	800544c <osThreadNew>
 8001544:	4b2c      	ldr	r3, [pc, #176]	; (80015f8 <main+0x3f8>)
 8001546:	6018      	str	r0, [r3, #0]
  UARTTaskHandle = osThreadNew(StartUARTTask, NULL, &UARTTask_attributes);
 8001548:	4a2c      	ldr	r2, [pc, #176]	; (80015fc <main+0x3fc>)
 800154a:	2100      	movs	r1, #0
 800154c:	482c      	ldr	r0, [pc, #176]	; (8001600 <main+0x400>)
 800154e:	f003 ff7d 	bl	800544c <osThreadNew>
 8001552:	4b2c      	ldr	r3, [pc, #176]	; (8001604 <main+0x404>)
 8001554:	6018      	str	r0, [r3, #0]
  DataTaskHandle = osThreadNew(vDATATask, NULL, &DataTask_attributes);
 8001556:	4a2c      	ldr	r2, [pc, #176]	; (8001608 <main+0x408>)
 8001558:	2100      	movs	r1, #0
 800155a:	482c      	ldr	r0, [pc, #176]	; (800160c <main+0x40c>)
 800155c:	f003 ff76 	bl	800544c <osThreadNew>
 8001560:	4b2b      	ldr	r3, [pc, #172]	; (8001610 <main+0x410>)
 8001562:	6018      	str	r0, [r3, #0]
  MBTaskHandle = osThreadNew(vMBTask, NULL, &MBTask_attributes);
 8001564:	4a2b      	ldr	r2, [pc, #172]	; (8001614 <main+0x414>)
 8001566:	2100      	movs	r1, #0
 8001568:	482b      	ldr	r0, [pc, #172]	; (8001618 <main+0x418>)
 800156a:	f003 ff6f 	bl	800544c <osThreadNew>
 800156e:	4b2b      	ldr	r3, [pc, #172]	; (800161c <main+0x41c>)
 8001570:	6018      	str	r0, [r3, #0]
  xOSEventHandle = osEventFlagsNew(&xOSEvent_attributes);
 8001572:	482b      	ldr	r0, [pc, #172]	; (8001620 <main+0x420>)
 8001574:	f003 fff2 	bl	800555c <osEventFlagsNew>
 8001578:	4b2a      	ldr	r3, [pc, #168]	; (8001624 <main+0x424>)
 800157a:	6018      	str	r0, [r3, #0]
  xUARTEvnetHandle = osEventFlagsNew(&xUARTEvnet_attributes);
 800157c:	482a      	ldr	r0, [pc, #168]	; (8001628 <main+0x428>)
 800157e:	f003 ffed 	bl	800555c <osEventFlagsNew>
 8001582:	4b2a      	ldr	r3, [pc, #168]	; (800162c <main+0x42c>)
 8001584:	6018      	str	r0, [r3, #0]
  xSystemControlEventHandle = osEventFlagsNew(&xSystemControlEvent_attributes);
 8001586:	482a      	ldr	r0, [pc, #168]	; (8001630 <main+0x430>)
 8001588:	f003 ffe8 	bl	800555c <osEventFlagsNew>
 800158c:	4b29      	ldr	r3, [pc, #164]	; (8001634 <main+0x434>)
 800158e:	6018      	str	r0, [r3, #0]
  InitSystemEnvet(xSystemControlEventHandle);
 8001590:	f000 f880 	bl	8001694 <InitSystemEnvet>
  osKernelStart();
 8001594:	f003 ff32 	bl	80053fc <osKernelStart>
  while (1)
 8001598:	e7fe      	b.n	8001598 <main+0x398>
 800159a:	b672      	cpsid	i
  while (1)
 800159c:	e7fe      	b.n	800159c <main+0x39c>
 800159e:	b672      	cpsid	i
 80015a0:	e7fe      	b.n	80015a0 <main+0x3a0>
 80015a2:	b672      	cpsid	i
 80015a4:	e7fe      	b.n	80015a4 <main+0x3a4>
 80015a6:	b672      	cpsid	i
 80015a8:	e7fe      	b.n	80015a8 <main+0x3a8>
 80015aa:	b672      	cpsid	i
 80015ac:	e7fe      	b.n	80015ac <main+0x3ac>
 80015ae:	b672      	cpsid	i
 80015b0:	e7fe      	b.n	80015b0 <main+0x3b0>
 80015b2:	b672      	cpsid	i
 80015b4:	e7fe      	b.n	80015b4 <main+0x3b4>
 80015b6:	b672      	cpsid	i
 80015b8:	e7fe      	b.n	80015b8 <main+0x3b8>
 80015ba:	b672      	cpsid	i
 80015bc:	e7fe      	b.n	80015bc <main+0x3bc>
 80015be:	b672      	cpsid	i
 80015c0:	e7fe      	b.n	80015c0 <main+0x3c0>
 80015c2:	b672      	cpsid	i
 80015c4:	e7fe      	b.n	80015c4 <main+0x3c4>
 80015c6:	b672      	cpsid	i
 80015c8:	e7fe      	b.n	80015c8 <main+0x3c8>
 80015ca:	b672      	cpsid	i
 80015cc:	e7fe      	b.n	80015cc <main+0x3cc>
 80015ce:	b672      	cpsid	i
 80015d0:	e7fe      	b.n	80015d0 <main+0x3d0>
 80015d2:	b672      	cpsid	i
 80015d4:	e7fe      	b.n	80015d4 <main+0x3d4>
 80015d6:	b672      	cpsid	i
 80015d8:	e7fe      	b.n	80015d8 <main+0x3d8>
 80015da:	b672      	cpsid	i
 80015dc:	e7fe      	b.n	80015dc <main+0x3dc>
 80015de:	bf00      	nop
 80015e0:	200010cc 	.word	0x200010cc
 80015e4:	08007774 	.word	0x08007774
 80015e8:	08001119 	.word	0x08001119
 80015ec:	20000fc4 	.word	0x20000fc4
 80015f0:	080076e4 	.word	0x080076e4
 80015f4:	08000e2d 	.word	0x08000e2d
 80015f8:	200004c4 	.word	0x200004c4
 80015fc:	08007750 	.word	0x08007750
 8001600:	0800508d 	.word	0x0800508d
 8001604:	20000d04 	.word	0x20000d04
 8001608:	08007708 	.word	0x08007708
 800160c:	080017dd 	.word	0x080017dd
 8001610:	20000784 	.word	0x20000784
 8001614:	0800772c 	.word	0x0800772c
 8001618:	08001739 	.word	0x08001739
 800161c:	20000a44 	.word	0x20000a44
 8001620:	08007798 	.word	0x08007798
 8001624:	2000117c 	.word	0x2000117c
 8001628:	080077b8 	.word	0x080077b8
 800162c:	200011c4 	.word	0x200011c4
 8001630:	080077a8 	.word	0x080077a8
 8001634:	200011a0 	.word	0x200011a0

08001638 <HAL_TIM_PeriodElapsedCallback>:
{
 8001638:	b510      	push	{r4, lr}
 800163a:	4604      	mov	r4, r0
	 if (htim->Instance == TIM2) {
 800163c:	6803      	ldr	r3, [r0, #0]
 800163e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001642:	d004      	beq.n	800164e <HAL_TIM_PeriodElapsedCallback+0x16>
  if (htim->Instance == TIM1) {
 8001644:	6822      	ldr	r2, [r4, #0]
 8001646:	4b05      	ldr	r3, [pc, #20]	; (800165c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001648:	429a      	cmp	r2, r3
 800164a:	d003      	beq.n	8001654 <HAL_TIM_PeriodElapsedCallback+0x1c>
}
 800164c:	bd10      	pop	{r4, pc}
		 rvvTIMERExpiredISR();
 800164e:	f003 fd5d 	bl	800510c <rvvTIMERExpiredISR>
 8001652:	e7f7      	b.n	8001644 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001654:	f000 fcf8 	bl	8002048 <HAL_IncTick>
}
 8001658:	e7f8      	b.n	800164c <HAL_TIM_PeriodElapsedCallback+0x14>
 800165a:	bf00      	nop
 800165c:	40012c00 	.word	0x40012c00

08001660 <Error_Handler>:
 8001660:	b672      	cpsid	i
  while (1)
 8001662:	e7fe      	b.n	8001662 <Error_Handler+0x2>

08001664 <vSetState>:
/*
 *
 */
static void vSetState( FAN_SPEED_t speed ,VALVE_STATE_t state )
{
	if (state != VALVE_AUTO)
 8001664:	2902      	cmp	r1, #2
	{
		valve_state = state;
 8001666:	bf1c      	itt	ne
 8001668:	4b07      	ldrne	r3, [pc, #28]	; (8001688 <vSetState+0x24>)
 800166a:	7019      	strbne	r1, [r3, #0]
	}
	vSetRegInput(WATER_VALVE, valve_state  );
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <vSetState+0x24>)
 800166e:	781a      	ldrb	r2, [r3, #0]
 8001670:	4b06      	ldr	r3, [pc, #24]	; (800168c <vSetState+0x28>)
 8001672:	811a      	strh	r2, [r3, #8]

	if ( speed != FAN_SPEED_AUTO)
 8001674:	2804      	cmp	r0, #4
	{
		current_fan_speed = speed;
 8001676:	bf1c      	itt	ne
 8001678:	4b05      	ldrne	r3, [pc, #20]	; (8001690 <vSetState+0x2c>)
 800167a:	7018      	strbne	r0, [r3, #0]
	}
	vSetRegInput(FAN_SPEED, current_fan_speed );
 800167c:	4b04      	ldr	r3, [pc, #16]	; (8001690 <vSetState+0x2c>)
 800167e:	781a      	ldrb	r2, [r3, #0]
 8001680:	4b02      	ldr	r3, [pc, #8]	; (800168c <vSetState+0x28>)
 8001682:	815a      	strh	r2, [r3, #10]
}
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	200011f6 	.word	0x200011f6
 800168c:	200011d0 	.word	0x200011d0
 8001690:	200011cd 	.word	0x200011cd

08001694 <InitSystemEnvet>:
	 xSystemEventGroupHandle = event;
 8001694:	4b01      	ldr	r3, [pc, #4]	; (800169c <InitSystemEnvet+0x8>)
 8001696:	6018      	str	r0, [r3, #0]
}
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	200011f8 	.word	0x200011f8

080016a0 <waitFlag>:
{
 80016a0:	b500      	push	{lr}
 80016a2:	b083      	sub	sp, #12
 80016a4:	4601      	mov	r1, r0
	xEventGroupWaitBits(xSystemEventGroupHandle,   flag ,  pdFALSE, pdTRUE, portMAX_DELAY );
 80016a6:	f04f 33ff 	mov.w	r3, #4294967295
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	2301      	movs	r3, #1
 80016ae:	2200      	movs	r2, #0
 80016b0:	4803      	ldr	r0, [pc, #12]	; (80016c0 <waitFlag+0x20>)
 80016b2:	6800      	ldr	r0, [r0, #0]
 80016b4:	f003 ffc5 	bl	8005642 <xEventGroupWaitBits>
}
 80016b8:	b003      	add	sp, #12
 80016ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80016be:	bf00      	nop
 80016c0:	200011f8 	.word	0x200011f8

080016c4 <usGetReg>:
{
 80016c4:	b508      	push	{r3, lr}
	if (reg_addr>= DEVICE_HOLDING_FLASG)
 80016c6:	2804      	cmp	r0, #4
 80016c8:	d803      	bhi.n	80016d2 <usGetReg+0xe>
		usRes = system_regs[reg_addr];
 80016ca:	4b04      	ldr	r3, [pc, #16]	; (80016dc <usGetReg+0x18>)
 80016cc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
 80016d0:	bd08      	pop	{r3, pc}
		usRes = vFDGetRegState( reg_addr - DEVICE_HOLDING_FLASG );
 80016d2:	3805      	subs	r0, #5
 80016d4:	f7ff fd0e 	bl	80010f4 <vFDGetRegState>
 80016d8:	b280      	uxth	r0, r0
 80016da:	e7f9      	b.n	80016d0 <usGetReg+0xc>
 80016dc:	200011ec 	.word	0x200011ec

080016e0 <usGetRegInput>:
}
 80016e0:	4b01      	ldr	r3, [pc, #4]	; (80016e8 <usGetRegInput+0x8>)
 80016e2:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80016e6:	4770      	bx	lr
 80016e8:	200011d0 	.word	0x200011d0

080016ec <vSetRegInput>:
	  if (reg_addr == TYPE)
 80016ec:	4602      	mov	r2, r0
 80016ee:	b930      	cbnz	r0, 80016fe <vSetRegInput+0x12>
		  if (input_regs[reg_addr] != data)
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <vSetRegInput+0x1c>)
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	428b      	cmp	r3, r1
 80016f6:	d002      	beq.n	80016fe <vSetRegInput+0x12>
			  mode_restart = 1;
 80016f8:	4b04      	ldr	r3, [pc, #16]	; (800170c <vSetRegInput+0x20>)
 80016fa:	2001      	movs	r0, #1
 80016fc:	7018      	strb	r0, [r3, #0]
      input_regs[reg_addr] = data;
 80016fe:	4b02      	ldr	r3, [pc, #8]	; (8001708 <vSetRegInput+0x1c>)
 8001700:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
}
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	200011d0 	.word	0x200011d0
 800170c:	200011e4 	.word	0x200011e4

08001710 <vSetReg>:
{
 8001710:	b508      	push	{r3, lr}
		  if (reg_addr>=  DEVICE_HOLDING_FLASG)
 8001712:	2804      	cmp	r0, #4
 8001714:	d807      	bhi.n	8001726 <vSetReg+0x16>
			  if (reg_addr == MODE)
 8001716:	b910      	cbnz	r0, 800171e <vSetReg+0xe>
				  mode_restart = 1;
 8001718:	4b05      	ldr	r3, [pc, #20]	; (8001730 <vSetReg+0x20>)
 800171a:	2201      	movs	r2, #1
 800171c:	701a      	strb	r2, [r3, #0]
			  system_regs[reg_addr] = data;
 800171e:	4b05      	ldr	r3, [pc, #20]	; (8001734 <vSetReg+0x24>)
 8001720:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
}
 8001724:	bd08      	pop	{r3, pc}
			  vFDSetRegState( reg_addr - DEVICE_HOLDING_FLASG,data);
 8001726:	3805      	subs	r0, #5
 8001728:	f7ff fcda 	bl	80010e0 <vFDSetRegState>
 800172c:	e7fa      	b.n	8001724 <vSetReg+0x14>
 800172e:	bf00      	nop
 8001730:	200011e4 	.word	0x200011e4
 8001734:	200011ec 	.word	0x200011ec

08001738 <vMBTask>:
 {
 8001738:	b510      	push	{r4, lr}
 800173a:	b082      	sub	sp, #8
	 waitFlag( DIN_READY );
 800173c:	2001      	movs	r0, #1
 800173e:	f7ff ffaf 	bl	80016a0 <waitFlag>
	 addres = (uiGetDinMask() & DEVICE_ADDR_MASK)>>DEVICE_ADDR_OFFSET;
 8001742:	f7ff fb63 	bl	8000e0c <uiGetDinMask>
	 eMBInit(MB_RTU,addres,0,115200,MB_PAR_ODD );
 8001746:	2301      	movs	r3, #1
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800174e:	2200      	movs	r2, #0
 8001750:	f000 010f 	and.w	r1, r0, #15
 8001754:	4610      	mov	r0, r2
 8001756:	f002 ff3d 	bl	80045d4 <eMBInit>
	 eMBEnable(  );
 800175a:	f002 ff99 	bl	8004690 <eMBEnable>
	 xEventGroupSetBits(xSystemEventGroupHandle,  MB_READY );
 800175e:	2104      	movs	r1, #4
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <vMBTask+0x40>)
 8001762:	6818      	ldr	r0, [r3, #0]
 8001764:	f003 fff8 	bl	8005758 <xEventGroupSetBits>
		 vTaskDelay(1);
 8001768:	2401      	movs	r4, #1
 800176a:	4620      	mov	r0, r4
 800176c:	f004 ff44 	bl	80065f8 <vTaskDelay>
		 eMBPoll();
 8001770:	f002 ffa0 	bl	80046b4 <eMBPoll>
	 while (1)
 8001774:	e7f9      	b.n	800176a <vMBTask+0x32>
 8001776:	bf00      	nop
 8001778:	200011f8 	.word	0x200011f8

0800177c <vTimer1sInc>:
	sTimer++;
 800177c:	4a02      	ldr	r2, [pc, #8]	; (8001788 <vTimer1sInc+0xc>)
 800177e:	6813      	ldr	r3, [r2, #0]
 8001780:	3301      	adds	r3, #1
 8001782:	6013      	str	r3, [r2, #0]
}
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	200011e8 	.word	0x200011e8

0800178c <GetTimer>:
	if ( TimerTriger == 0 )
 800178c:	4b0a      	ldr	r3, [pc, #40]	; (80017b8 <GetTimer+0x2c>)
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	b133      	cbz	r3, 80017a0 <GetTimer+0x14>
		if (sTimer < time)
 8001792:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <GetTimer+0x30>)
 8001794:	681b      	ldr	r3, [r3, #0]
	uint8_t res = 0;
 8001796:	4298      	cmp	r0, r3
 8001798:	bf8c      	ite	hi
 800179a:	2000      	movhi	r0, #0
 800179c:	2001      	movls	r0, #1
 }
 800179e:	4770      	bx	lr
 {
 80017a0:	b510      	push	{r4, lr}
		TimerTriger = 1;
 80017a2:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <GetTimer+0x2c>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	801a      	strh	r2, [r3, #0]
		sTimer = 0;
 80017a8:	2400      	movs	r4, #0
 80017aa:	4b04      	ldr	r3, [pc, #16]	; (80017bc <GetTimer+0x30>)
 80017ac:	601c      	str	r4, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim4);
 80017ae:	4804      	ldr	r0, [pc, #16]	; (80017c0 <GetTimer+0x34>)
 80017b0:	f001 ffc2 	bl	8003738 <HAL_TIM_Base_Start_IT>
	uint8_t res = 0;
 80017b4:	4620      	mov	r0, r4
 }
 80017b6:	bd10      	pop	{r4, pc}
 80017b8:	200011ca 	.word	0x200011ca
 80017bc:	200011e8 	.word	0x200011e8
 80017c0:	200010cc 	.word	0x200010cc

080017c4 <ResetTimer>:
{
 80017c4:	b508      	push	{r3, lr}
	HAL_TIM_Base_Stop_IT(&htim4);
 80017c6:	4803      	ldr	r0, [pc, #12]	; (80017d4 <ResetTimer+0x10>)
 80017c8:	f001 ffea 	bl	80037a0 <HAL_TIM_Base_Stop_IT>
	TimerTriger = 0;
 80017cc:	4b02      	ldr	r3, [pc, #8]	; (80017d8 <ResetTimer+0x14>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	801a      	strh	r2, [r3, #0]
}
 80017d2:	bd08      	pop	{r3, pc}
 80017d4:	200010cc 	.word	0x200010cc
 80017d8:	200011ca 	.word	0x200011ca

080017dc <vDATATask>:
 {
 80017dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017e0:	b089      	sub	sp, #36	; 0x24
	MAIN_FSM_STATE_t InitFSM = STANDBAY_STATE;
 80017e2:	2400      	movs	r4, #0
      input_regs[reg_addr] = data;
 80017e4:	4da6      	ldr	r5, [pc, #664]	; (8001a80 <vDATATask+0x2a4>)
			  sConfigOC.Pulse = (pwm/100.0)*860;
 80017e6:	f04f 0800 	mov.w	r8, #0
 80017ea:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8001a84 <vDATATask+0x2a8>
 80017ee:	2600      	movs	r6, #0
 80017f0:	4fa5      	ldr	r7, [pc, #660]	; (8001a88 <vDATATask+0x2ac>)
 80017f2:	e00d      	b.n	8001810 <vDATATask+0x34>
		 		vFDInit();
 80017f4:	f7ff fc50 	bl	8001098 <vFDInit>
		 			 vSetReg(i,0);
 80017f8:	46a2      	mov	sl, r4
 80017fa:	4651      	mov	r1, sl
 80017fc:	b2e0      	uxtb	r0, r4
 80017fe:	f7ff ff87 	bl	8001710 <vSetReg>
		 		for (int i = 0;i<DEVICE_HOLDING_FLASG;i++)
 8001802:	3401      	adds	r4, #1
 8001804:	2c05      	cmp	r4, #5
 8001806:	d1f8      	bne.n	80017fa <vDATATask+0x1e>
		 		 waitFlag( DIN_READY | AIN_READY | MB_READY);
 8001808:	2007      	movs	r0, #7
 800180a:	f7ff ff49 	bl	80016a0 <waitFlag>
 {
 800180e:	2401      	movs	r4, #1
		 vSetRegInput(FSM_STATUS, control_state);
 8001810:	4b9e      	ldr	r3, [pc, #632]	; (8001a8c <vDATATask+0x2b0>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	80eb      	strh	r3, [r5, #6]
		 vTaskDelay(10);
 8001816:	200a      	movs	r0, #10
 8001818:	f004 feee 	bl	80065f8 <vTaskDelay>
		 switch (InitFSM)
 800181c:	2c00      	cmp	r4, #0
 800181e:	d0e9      	beq.n	80017f4 <vDATATask+0x18>
	 if (usGetRegInput(DOOR_STATE) == OPEN)
 8001820:	89ab      	ldrh	r3, [r5, #12]
 8001822:	2b02      	cmp	r3, #2
 8001824:	d040      	beq.n	80018a8 <vDATATask+0xcc>
		 		if (mode_restart == 1)
 8001826:	4b9a      	ldr	r3, [pc, #616]	; (8001a90 <vDATATask+0x2b4>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d043      	beq.n	80018b6 <vDATATask+0xda>

static void vSlaveControlFSM()
 {
		switch(control_state )
 800182e:	4b97      	ldr	r3, [pc, #604]	; (8001a8c <vDATATask+0x2b0>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b02      	cmp	r3, #2
 8001834:	d057      	beq.n	80018e6 <vDATATask+0x10a>
 8001836:	2b03      	cmp	r3, #3
 8001838:	f000 808c 	beq.w	8001954 <vDATATask+0x178>
 800183c:	2b01      	cmp	r3, #1
 800183e:	d06e      	beq.n	800191e <vDATATask+0x142>
		usRes = system_regs[reg_addr];
 8001840:	4b94      	ldr	r3, [pc, #592]	; (8001a94 <vDATATask+0x2b8>)
 8001842:	8918      	ldrh	r0, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001844:	2300      	movs	r3, #0
 8001846:	9301      	str	r3, [sp, #4]
 8001848:	9302      	str	r3, [sp, #8]
 800184a:	9303      	str	r3, [sp, #12]
 800184c:	9304      	str	r3, [sp, #16]
 800184e:	9305      	str	r3, [sp, #20]
 8001850:	9306      	str	r3, [sp, #24]
 8001852:	9307      	str	r3, [sp, #28]
	if (pwm <=100)
 8001854:	2864      	cmp	r0, #100	; 0x64
 8001856:	d804      	bhi.n	8001862 <vDATATask+0x86>
		if (pwm != PWM_STATE)
 8001858:	4b8f      	ldr	r3, [pc, #572]	; (8001a98 <vDATATask+0x2bc>)
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	4283      	cmp	r3, r0
 800185e:	f040 81e0 	bne.w	8001c22 <vDATATask+0x446>
    usRes = input_regs[reg_addr];
 8001862:	882b      	ldrh	r3, [r5, #0]
	 if (usGetRegInput(TYPE) == NONE)
 8001864:	2b00      	cmp	r3, #0
 8001866:	f000 81fb 	beq.w	8001c60 <vDATATask+0x484>
    usRes = input_regs[reg_addr];
 800186a:	8969      	ldrh	r1, [r5, #10]
		 switch(usGetRegInput(FAN_SPEED))
 800186c:	2902      	cmp	r1, #2
 800186e:	f000 8204 	beq.w	8001c7a <vDATATask+0x49e>
 8001872:	2903      	cmp	r1, #3
 8001874:	f000 81f8 	beq.w	8001c68 <vDATATask+0x48c>
		 K3 = 0;
 8001878:	2901      	cmp	r1, #1
 800187a:	bf14      	ite	ne
 800187c:	f04f 0a00 	movne.w	sl, #0
 8001880:	f04f 0a01 	moveq.w	sl, #1
 8001884:	2100      	movs	r1, #0
 8001886:	460c      	mov	r4, r1
		 vSetOutState( OUT_1, K1 );
 8001888:	2000      	movs	r0, #0
 800188a:	f7ff fbbf 	bl	800100c <vSetOutState>
	     vSetOutState( OUT_2, K2 );
 800188e:	4621      	mov	r1, r4
 8001890:	2001      	movs	r0, #1
 8001892:	f7ff fbbb 	bl	800100c <vSetOutState>
	     vSetOutState( OUT_3, K3 );
 8001896:	4651      	mov	r1, sl
 8001898:	2002      	movs	r0, #2
 800189a:	f7ff fbb7 	bl	800100c <vSetOutState>
	     vSetOutState( OUT_4, usGetRegInput(WATER_VALVE) );
 800189e:	7a29      	ldrb	r1, [r5, #8]
 80018a0:	2003      	movs	r0, #3
 80018a2:	f7ff fbb3 	bl	800100c <vSetOutState>
 80018a6:	e7b2      	b.n	800180e <vDATATask+0x32>
		if (usGetRegInput(DOOR_STATE_TRIGGER)  == OPEN )
 80018a8:	89eb      	ldrh	r3, [r5, #14]
 80018aa:	2b02      	cmp	r3, #2
      input_regs[reg_addr] = data;
 80018ac:	bf0c      	ite	eq
 80018ae:	2303      	moveq	r3, #3
 80018b0:	2302      	movne	r3, #2
 80018b2:	81eb      	strh	r3, [r5, #14]
}
 80018b4:	e7b7      	b.n	8001826 <vDATATask+0x4a>
		 			if (usGetRegInput(TYPE)==NONE)
 80018b6:	882b      	ldrh	r3, [r5, #0]
 80018b8:	b933      	cbnz	r3, 80018c8 <vDATATask+0xec>
		 				control_state = TELEMETRY;
 80018ba:	4b74      	ldr	r3, [pc, #464]	; (8001a8c <vDATATask+0x2b0>)
 80018bc:	2204      	movs	r2, #4
 80018be:	701a      	strb	r2, [r3, #0]
		 			mode_restart = 0;
 80018c0:	4b73      	ldr	r3, [pc, #460]	; (8001a90 <vDATATask+0x2b4>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	701a      	strb	r2, [r3, #0]
 80018c6:	e7b2      	b.n	800182e <vDATATask+0x52>
		usRes = system_regs[reg_addr];
 80018c8:	4b72      	ldr	r3, [pc, #456]	; (8001a94 <vDATATask+0x2b8>)
 80018ca:	881b      	ldrh	r3, [r3, #0]
	return  (usRes);
 80018cc:	b13b      	cbz	r3, 80018de <vDATATask+0x102>
 80018ce:	3b01      	subs	r3, #1
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d8f4      	bhi.n	80018c0 <vDATATask+0xe4>
		 				 control_state = PREHEAT;
 80018d6:	4b6d      	ldr	r3, [pc, #436]	; (8001a8c <vDATATask+0x2b0>)
 80018d8:	2201      	movs	r2, #1
 80018da:	701a      	strb	r2, [r3, #0]
		 			     break;
 80018dc:	e7f0      	b.n	80018c0 <vDATATask+0xe4>
		 				  control_state = STANDBY;
 80018de:	4b6b      	ldr	r3, [pc, #428]	; (8001a8c <vDATATask+0x2b0>)
 80018e0:	2202      	movs	r2, #2
 80018e2:	701a      	strb	r2, [r3, #0]
		 				  break;
 80018e4:	e7ec      	b.n	80018c0 <vDATATask+0xe4>
    usRes = input_regs[reg_addr];
 80018e6:	f8b5 a002 	ldrh.w	sl, [r5, #2]
		usRes = vFDGetRegState( reg_addr - DEVICE_HOLDING_FLASG );
 80018ea:	200b      	movs	r0, #11
 80018ec:	f7ff fc02 	bl	80010f4 <vFDGetRegState>
		{
			case STANDBY: //Дежурный режим
				if ( usGetRegInput(WATER_TEMP) <= usGetReg(  STANDBY_WATER_ON_TEMP) )
 80018f0:	b280      	uxth	r0, r0
 80018f2:	4550      	cmp	r0, sl
 80018f4:	d304      	bcc.n	8001900 <vDATATask+0x124>
				{
					vSetState(FAN_SPEED_OFF, VALVE_ON);
 80018f6:	2101      	movs	r1, #1
 80018f8:	2000      	movs	r0, #0
 80018fa:	f7ff feb3 	bl	8001664 <vSetState>
					break;
 80018fe:	e79f      	b.n	8001840 <vDATATask+0x64>
    usRes = input_regs[reg_addr];
 8001900:	f8b5 a002 	ldrh.w	sl, [r5, #2]
		usRes = vFDGetRegState( reg_addr - DEVICE_HOLDING_FLASG );
 8001904:	200c      	movs	r0, #12
 8001906:	f7ff fbf5 	bl	80010f4 <vFDGetRegState>
				}
			    if (usGetRegInput(WATER_TEMP) >= usGetReg(  STANDBY_WATER_OFF_TEMP) )
 800190a:	b280      	uxth	r0, r0
 800190c:	4550      	cmp	r0, sl
				{
			    	vSetState(FAN_SPEED_OFF, VALVE_OFF);
 800190e:	bf99      	ittee	ls
 8001910:	2100      	movls	r1, #0
 8001912:	4608      	movls	r0, r1
			    	break;
				}
			    vSetState(FAN_SPEED_OFF, VALVE_AUTO);
 8001914:	2102      	movhi	r1, #2
 8001916:	2000      	movhi	r0, #0
 8001918:	f7ff fea4 	bl	8001664 <vSetState>
				break;
 800191c:	e790      	b.n	8001840 <vDATATask+0x64>
			case PREHEAT:
					 vSetState(FAN_SPEED_OFF, VALVE_ON);
 800191e:	2101      	movs	r1, #1
 8001920:	2000      	movs	r0, #0
 8001922:	f7ff fe9f 	bl	8001664 <vSetState>
		usRes = vFDGetRegState( reg_addr - DEVICE_HOLDING_FLASG );
 8001926:	2008      	movs	r0, #8
 8001928:	f7ff fbe4 	bl	80010f4 <vFDGetRegState>
					 if (GetTimer(usGetReg(PREHEAT_OFF_TIME)) &&  (usGetRegInput(WATER_TEMP) >= usGetReg(WATER_ON_TEMP)) )
 800192c:	b280      	uxth	r0, r0
 800192e:	f7ff ff2d 	bl	800178c <GetTimer>
 8001932:	2800      	cmp	r0, #0
 8001934:	d084      	beq.n	8001840 <vDATATask+0x64>
    usRes = input_regs[reg_addr];
 8001936:	f8b5 a002 	ldrh.w	sl, [r5, #2]
		usRes = vFDGetRegState( reg_addr - DEVICE_HOLDING_FLASG );
 800193a:	2006      	movs	r0, #6
 800193c:	f7ff fbda 	bl	80010f4 <vFDGetRegState>
					 if (GetTimer(usGetReg(PREHEAT_OFF_TIME)) &&  (usGetRegInput(WATER_TEMP) >= usGetReg(WATER_ON_TEMP)) )
 8001940:	b283      	uxth	r3, r0
 8001942:	4553      	cmp	r3, sl
 8001944:	f63f af7c 	bhi.w	8001840 <vDATATask+0x64>
					 {
						 ResetTimer();
 8001948:	f7ff ff3c 	bl	80017c4 <ResetTimer>
						 control_state =  WORK;
 800194c:	4b4f      	ldr	r3, [pc, #316]	; (8001a8c <vDATATask+0x2b0>)
 800194e:	2203      	movs	r2, #3
 8001950:	701a      	strb	r2, [r3, #0]
 8001952:	e775      	b.n	8001840 <vDATATask+0x64>
    usRes = input_regs[reg_addr];
 8001954:	f8b5 a002 	ldrh.w	sl, [r5, #2]
		usRes = vFDGetRegState( reg_addr - DEVICE_HOLDING_FLASG );
 8001958:	2009      	movs	r0, #9
 800195a:	f7ff fbcb 	bl	80010f4 <vFDGetRegState>
					 }
					 break;
				 case WORK:
					    //Режим разморозки
					    if (usGetRegInput(WATER_TEMP) <= usGetReg(WATER_FREEZE_TEMP))
 800195e:	b280      	uxth	r0, r0
 8001960:	4550      	cmp	r0, sl
 8001962:	d225      	bcs.n	80019b0 <vDATATask+0x1d4>
    usRes = input_regs[reg_addr];
 8001964:	89eb      	ldrh	r3, [r5, #14]
					    	vSetRegInput(DOOR_STATE_TRIGGER,CLOSED);
					 		control_state = PREHEAT;
					 		break;
					 	}
					    //Режим срабатывания дверных концевиков
					    if ((usGetRegInput(DOOR_STATE_TRIGGER) !=CLOSED) && (usGetReg(MODE) == DEV_AUTO ))
 8001966:	2b01      	cmp	r3, #1
 8001968:	d127      	bne.n	80019ba <vDATATask+0x1de>
							{
								vSetState(FAN_SPEED_MAX, VALVE_ON);
							}
							break;
						}
					    if ((usGetRegInput(TYPE) == HW) && ( usGetReg(MODE) == DEV_AUTO))
 800196a:	882b      	ldrh	r3, [r5, #0]
 800196c:	2b02      	cmp	r3, #2
 800196e:	d048      	beq.n	8001a02 <vDATATask+0x226>
		usRes = system_regs[reg_addr];
 8001970:	4b48      	ldr	r3, [pc, #288]	; (8001a94 <vDATATask+0x2b8>)
					    	{
					    		vSetState(FAN_SPEED_OFF,VALVE_OFF);
					    		break;
					    	}
					    }
					    if  ( usGetReg(MODE) == DEV_MANUAL)
 8001972:	881b      	ldrh	r3, [r3, #0]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d04b      	beq.n	8001a10 <vDATATask+0x234>
					    		vSetState(usGetReg(FAN_SPEED_CONFIG), VALVE_ON);
					    		break;
					    	}
					    	vSetState(usGetReg(FAN_SPEED_CONFIG), VALVE_AUTO);
					    }
					    if ((usGetRegInput(TYPE) == AW) && ( usGetReg(MODE) == DEV_AUTO))
 8001978:	882b      	ldrh	r3, [r5, #0]
 800197a:	2b01      	cmp	r3, #1
 800197c:	f47f af60 	bne.w	8001840 <vDATATask+0x64>
		usRes = system_regs[reg_addr];
 8001980:	4b44      	ldr	r3, [pc, #272]	; (8001a94 <vDATATask+0x2b8>)
					    if ((usGetRegInput(TYPE) == AW) && ( usGetReg(MODE) == DEV_AUTO))
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	2b02      	cmp	r3, #2
 8001986:	f47f af5b 	bne.w	8001840 <vDATATask+0x64>
		usRes = system_regs[reg_addr];
 800198a:	4b42      	ldr	r3, [pc, #264]	; (8001a94 <vDATATask+0x2b8>)
					    {
					    	if (usGetReg(AIR_TEMP) < (usGetReg(WORK_TEMP) - usGetReg(VALVE_ON_TEMP) ))
 800198c:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 8001990:	f8b3 a004 	ldrh.w	sl, [r3, #4]
		usRes = vFDGetRegState( reg_addr - DEVICE_HOLDING_FLASG );
 8001994:	2004      	movs	r0, #4
 8001996:	f7ff fbad 	bl	80010f4 <vFDGetRegState>
					    	if (usGetReg(AIR_TEMP) < (usGetReg(WORK_TEMP) - usGetReg(VALVE_ON_TEMP) ))
 800199a:	b283      	uxth	r3, r0
 800199c:	ebaa 0a03 	sub.w	sl, sl, r3
 80019a0:	45d3      	cmp	fp, sl
 80019a2:	f280 80fb 	bge.w	8001b9c <vDATATask+0x3c0>
					    	{
					    		vSetState(FAN_SPEED_MID, VALVE_ON);
 80019a6:	2101      	movs	r1, #1
 80019a8:	2002      	movs	r0, #2
 80019aa:	f7ff fe5b 	bl	8001664 <vSetState>
					    		break;
 80019ae:	e747      	b.n	8001840 <vDATATask+0x64>
      input_regs[reg_addr] = data;
 80019b0:	2301      	movs	r3, #1
 80019b2:	81eb      	strh	r3, [r5, #14]
					 		control_state = PREHEAT;
 80019b4:	4a35      	ldr	r2, [pc, #212]	; (8001a8c <vDATATask+0x2b0>)
 80019b6:	7013      	strb	r3, [r2, #0]
					 		break;
 80019b8:	e742      	b.n	8001840 <vDATATask+0x64>
		usRes = system_regs[reg_addr];
 80019ba:	4a36      	ldr	r2, [pc, #216]	; (8001a94 <vDATATask+0x2b8>)
					    if ((usGetRegInput(DOOR_STATE_TRIGGER) !=CLOSED) && (usGetReg(MODE) == DEV_AUTO ))
 80019bc:	8812      	ldrh	r2, [r2, #0]
 80019be:	2a02      	cmp	r2, #2
 80019c0:	d005      	beq.n	80019ce <vDATATask+0x1f2>
					    if ((usGetRegInput(TYPE) == HW) && ( usGetReg(MODE) == DEV_AUTO))
 80019c2:	882b      	ldrh	r3, [r5, #0]
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d1d3      	bne.n	8001970 <vDATATask+0x194>
		usRes = system_regs[reg_addr];
 80019c8:	4b32      	ldr	r3, [pc, #200]	; (8001a94 <vDATATask+0x2b8>)
 80019ca:	881b      	ldrh	r3, [r3, #0]
	return  (usRes);
 80019cc:	e01d      	b.n	8001a0a <vDATATask+0x22e>
					    	if (usGetRegInput(DOOR_STATE_TRIGGER) == REOPEN)
 80019ce:	2b03      	cmp	r3, #3
 80019d0:	d007      	beq.n	80019e2 <vDATATask+0x206>
					    	if (usGetRegInput(DOOR_STATE) == CLOSED)
 80019d2:	89ab      	ldrh	r3, [r5, #12]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d009      	beq.n	80019ec <vDATATask+0x210>
								vSetState(FAN_SPEED_MAX, VALVE_ON);
 80019d8:	2101      	movs	r1, #1
 80019da:	2003      	movs	r0, #3
 80019dc:	f7ff fe42 	bl	8001664 <vSetState>
 80019e0:	e72e      	b.n	8001840 <vDATATask+0x64>
      input_regs[reg_addr] = data;
 80019e2:	2302      	movs	r3, #2
 80019e4:	81eb      	strh	r3, [r5, #14]
					    		 ResetTimer();
 80019e6:	f7ff feed 	bl	80017c4 <ResetTimer>
 80019ea:	e7f2      	b.n	80019d2 <vDATATask+0x1f6>
								if (GetTimer(DOOR_CLOSE_TIME))
 80019ec:	2012      	movs	r0, #18
 80019ee:	f7ff fecd 	bl	800178c <GetTimer>
 80019f2:	2800      	cmp	r0, #0
 80019f4:	f43f af24 	beq.w	8001840 <vDATATask+0x64>
      input_regs[reg_addr] = data;
 80019f8:	2301      	movs	r3, #1
 80019fa:	81eb      	strh	r3, [r5, #14]
									 ResetTimer();
 80019fc:	f7ff fee2 	bl	80017c4 <ResetTimer>
 8001a00:	e71e      	b.n	8001840 <vDATATask+0x64>
		usRes = system_regs[reg_addr];
 8001a02:	4b24      	ldr	r3, [pc, #144]	; (8001a94 <vDATATask+0x2b8>)
 8001a04:	881b      	ldrh	r3, [r3, #0]
					    if ((usGetRegInput(TYPE) == HW) && ( usGetReg(MODE) == DEV_AUTO))
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d015      	beq.n	8001a36 <vDATATask+0x25a>
					    if  ( usGetReg(MODE) == DEV_MANUAL)
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	f47f af18 	bne.w	8001840 <vDATATask+0x64>
		usRes = system_regs[reg_addr];
 8001a10:	4b20      	ldr	r3, [pc, #128]	; (8001a94 <vDATATask+0x2b8>)
					    	if (usGetReg(AIR_TEMP) > ( usGetReg(WORK_TEMP) + usGetReg(VALVE_OFF_TEMP)))
 8001a12:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 8001a16:	f8b3 b004 	ldrh.w	fp, [r3, #4]
		usRes = vFDGetRegState( reg_addr - DEVICE_HOLDING_FLASG );
 8001a1a:	2007      	movs	r0, #7
 8001a1c:	f7ff fb6a 	bl	80010f4 <vFDGetRegState>
					    	if (usGetReg(AIR_TEMP) > ( usGetReg(WORK_TEMP) + usGetReg(VALVE_OFF_TEMP)))
 8001a20:	b283      	uxth	r3, r0
 8001a22:	445b      	add	r3, fp
 8001a24:	459a      	cmp	sl, r3
 8001a26:	f340 80a0 	ble.w	8001b6a <vDATATask+0x38e>
					    		vSetState(usGetReg(FAN_SPEED_CONFIG), VALVE_OFF);
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	4b19      	ldr	r3, [pc, #100]	; (8001a94 <vDATATask+0x2b8>)
 8001a2e:	7898      	ldrb	r0, [r3, #2]
 8001a30:	f7ff fe18 	bl	8001664 <vSetState>
					    		break;
 8001a34:	e704      	b.n	8001840 <vDATATask+0x64>
					    	if ( usGetRegInput(IN_AIR_TEMP)  < ( usGetReg(WORK_TEMP) - usGetReg(SPEED_3_HW_SWITCH_TEMP)  ) )
 8001a36:	f8b5 b004 	ldrh.w	fp, [r5, #4]
		usRes = system_regs[reg_addr];
 8001a3a:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <vDATATask+0x2b8>)
					    	if ( usGetRegInput(IN_AIR_TEMP)  < ( usGetReg(WORK_TEMP) - usGetReg(SPEED_3_HW_SWITCH_TEMP)  ) )
 8001a3c:	f8b3 a004 	ldrh.w	sl, [r3, #4]
		usRes = vFDGetRegState( reg_addr - DEVICE_HOLDING_FLASG );
 8001a40:	2000      	movs	r0, #0
 8001a42:	f7ff fb57 	bl	80010f4 <vFDGetRegState>
					    	if ( usGetRegInput(IN_AIR_TEMP)  < ( usGetReg(WORK_TEMP) - usGetReg(SPEED_3_HW_SWITCH_TEMP)  ) )
 8001a46:	b283      	uxth	r3, r0
 8001a48:	ebaa 0a03 	sub.w	sl, sl, r3
 8001a4c:	45d3      	cmp	fp, sl
 8001a4e:	da04      	bge.n	8001a5a <vDATATask+0x27e>
					    		vSetState(FAN_SPEED_MAX, VALVE_ON);
 8001a50:	2101      	movs	r1, #1
 8001a52:	2003      	movs	r0, #3
 8001a54:	f7ff fe06 	bl	8001664 <vSetState>
					    		break;
 8001a58:	e6f2      	b.n	8001840 <vDATATask+0x64>
					    	if ( usGetRegInput(IN_AIR_TEMP) < ( usGetReg(WORK_TEMP) - usGetReg(SPEED_2_HW_SWITCH_TEMP)))
 8001a5a:	f8b5 b004 	ldrh.w	fp, [r5, #4]
		usRes = system_regs[reg_addr];
 8001a5e:	4b0d      	ldr	r3, [pc, #52]	; (8001a94 <vDATATask+0x2b8>)
					    	if ( usGetRegInput(IN_AIR_TEMP) < ( usGetReg(WORK_TEMP) - usGetReg(SPEED_2_HW_SWITCH_TEMP)))
 8001a60:	f8b3 a004 	ldrh.w	sl, [r3, #4]
		usRes = vFDGetRegState( reg_addr - DEVICE_HOLDING_FLASG );
 8001a64:	2001      	movs	r0, #1
 8001a66:	f7ff fb45 	bl	80010f4 <vFDGetRegState>
					    	if ( usGetRegInput(IN_AIR_TEMP) < ( usGetReg(WORK_TEMP) - usGetReg(SPEED_2_HW_SWITCH_TEMP)))
 8001a6a:	b283      	uxth	r3, r0
 8001a6c:	ebaa 0a03 	sub.w	sl, sl, r3
 8001a70:	45d3      	cmp	fp, sl
 8001a72:	da13      	bge.n	8001a9c <vDATATask+0x2c0>
					    		vSetState(FAN_SPEED_AUTO,  VALVE_AUTO);
 8001a74:	2102      	movs	r1, #2
 8001a76:	2004      	movs	r0, #4
 8001a78:	f7ff fdf4 	bl	8001664 <vSetState>
					    		break;
 8001a7c:	e6e0      	b.n	8001840 <vDATATask+0x64>
 8001a7e:	bf00      	nop
 8001a80:	200011d0 	.word	0x200011d0
 8001a84:	40590000 	.word	0x40590000
 8001a88:	408ae000 	.word	0x408ae000
 8001a8c:	200011cc 	.word	0x200011cc
 8001a90:	200011e4 	.word	0x200011e4
 8001a94:	200011ec 	.word	0x200011ec
 8001a98:	200011c8 	.word	0x200011c8
					    	if ( usGetRegInput(IN_AIR_TEMP) == ( usGetReg(WORK_TEMP) - usGetReg(SPEED_2_HW_SWITCH_TEMP)))
 8001a9c:	f8b5 b004 	ldrh.w	fp, [r5, #4]
		usRes = system_regs[reg_addr];
 8001aa0:	4b77      	ldr	r3, [pc, #476]	; (8001c80 <vDATATask+0x4a4>)
					    	if ( usGetRegInput(IN_AIR_TEMP) == ( usGetReg(WORK_TEMP) - usGetReg(SPEED_2_HW_SWITCH_TEMP)))
 8001aa2:	f8b3 a004 	ldrh.w	sl, [r3, #4]
		usRes = vFDGetRegState( reg_addr - DEVICE_HOLDING_FLASG );
 8001aa6:	2001      	movs	r0, #1
 8001aa8:	f7ff fb24 	bl	80010f4 <vFDGetRegState>
					    	if ( usGetRegInput(IN_AIR_TEMP) == ( usGetReg(WORK_TEMP) - usGetReg(SPEED_2_HW_SWITCH_TEMP)))
 8001aac:	b283      	uxth	r3, r0
 8001aae:	ebaa 0a03 	sub.w	sl, sl, r3
 8001ab2:	45d3      	cmp	fp, sl
 8001ab4:	d011      	beq.n	8001ada <vDATATask+0x2fe>
					    	if (usGetRegInput(IN_AIR_TEMP) < ( usGetReg(WORK_TEMP) - usGetReg(SPEED_1_HW_SWITCH_TEMP)))
 8001ab6:	f8b5 b004 	ldrh.w	fp, [r5, #4]
		usRes = system_regs[reg_addr];
 8001aba:	4b71      	ldr	r3, [pc, #452]	; (8001c80 <vDATATask+0x4a4>)
					    	if (usGetRegInput(IN_AIR_TEMP) < ( usGetReg(WORK_TEMP) - usGetReg(SPEED_1_HW_SWITCH_TEMP)))
 8001abc:	f8b3 a004 	ldrh.w	sl, [r3, #4]
		usRes = vFDGetRegState( reg_addr - DEVICE_HOLDING_FLASG );
 8001ac0:	2002      	movs	r0, #2
 8001ac2:	f7ff fb17 	bl	80010f4 <vFDGetRegState>
					    	if (usGetRegInput(IN_AIR_TEMP) < ( usGetReg(WORK_TEMP) - usGetReg(SPEED_1_HW_SWITCH_TEMP)))
 8001ac6:	b283      	uxth	r3, r0
 8001ac8:	ebaa 0a03 	sub.w	sl, sl, r3
 8001acc:	45d3      	cmp	fp, sl
 8001ace:	da09      	bge.n	8001ae4 <vDATATask+0x308>
					    		vSetState(FAN_SPEED_AUTO,VALVE_AUTO);
 8001ad0:	2102      	movs	r1, #2
 8001ad2:	2004      	movs	r0, #4
 8001ad4:	f7ff fdc6 	bl	8001664 <vSetState>
					    		break;
 8001ad8:	e6b2      	b.n	8001840 <vDATATask+0x64>
					    		vSetState(FAN_SPEED_MID, VALVE_AUTO);
 8001ada:	2102      	movs	r1, #2
 8001adc:	4608      	mov	r0, r1
 8001ade:	f7ff fdc1 	bl	8001664 <vSetState>
					    	    break;
 8001ae2:	e6ad      	b.n	8001840 <vDATATask+0x64>
					    	if (usGetRegInput(IN_AIR_TEMP) == ( usGetReg(WORK_TEMP) - usGetReg(SPEED_1_HW_SWITCH_TEMP)))
 8001ae4:	f8b5 b004 	ldrh.w	fp, [r5, #4]
		usRes = system_regs[reg_addr];
 8001ae8:	4b65      	ldr	r3, [pc, #404]	; (8001c80 <vDATATask+0x4a4>)
					    	if (usGetRegInput(IN_AIR_TEMP) == ( usGetReg(WORK_TEMP) - usGetReg(SPEED_1_HW_SWITCH_TEMP)))
 8001aea:	f8b3 a004 	ldrh.w	sl, [r3, #4]
		usRes = vFDGetRegState( reg_addr - DEVICE_HOLDING_FLASG );
 8001aee:	2002      	movs	r0, #2
 8001af0:	f7ff fb00 	bl	80010f4 <vFDGetRegState>
					    	if (usGetRegInput(IN_AIR_TEMP) == ( usGetReg(WORK_TEMP) - usGetReg(SPEED_1_HW_SWITCH_TEMP)))
 8001af4:	b283      	uxth	r3, r0
 8001af6:	ebaa 0a03 	sub.w	sl, sl, r3
 8001afa:	45d3      	cmp	fp, sl
 8001afc:	d00b      	beq.n	8001b16 <vDATATask+0x33a>
    usRes = input_regs[reg_addr];
 8001afe:	f8b5 a004 	ldrh.w	sl, [r5, #4]
		usRes = system_regs[reg_addr];
 8001b02:	4b5f      	ldr	r3, [pc, #380]	; (8001c80 <vDATATask+0x4a4>)
 8001b04:	f8b3 b004 	ldrh.w	fp, [r3, #4]
					    	if  (usGetRegInput(IN_AIR_TEMP)  <  usGetReg(WORK_TEMP))
 8001b08:	45d3      	cmp	fp, sl
 8001b0a:	d909      	bls.n	8001b20 <vDATATask+0x344>
					    		vSetState(FAN_SPEED_AUTO ,VALVE_AUTO);
 8001b0c:	2102      	movs	r1, #2
 8001b0e:	2004      	movs	r0, #4
 8001b10:	f7ff fda8 	bl	8001664 <vSetState>
					    		break;
 8001b14:	e694      	b.n	8001840 <vDATATask+0x64>
					    		vSetState(FAN_SPEED_MIN ,VALVE_AUTO);
 8001b16:	2102      	movs	r1, #2
 8001b18:	2001      	movs	r0, #1
 8001b1a:	f7ff fda3 	bl	8001664 <vSetState>
					    		break;
 8001b1e:	e68f      	b.n	8001840 <vDATATask+0x64>
					    	if (usGetRegInput(IN_AIR_TEMP) ==  usGetReg(WORK_TEMP) )
 8001b20:	45d3      	cmp	fp, sl
 8001b22:	d00b      	beq.n	8001b3c <vDATATask+0x360>
		usRes = vFDGetRegState( reg_addr - DEVICE_HOLDING_FLASG );
 8001b24:	2003      	movs	r0, #3
 8001b26:	f7ff fae5 	bl	80010f4 <vFDGetRegState>
					    	if (usGetRegInput(IN_AIR_TEMP)  < ( usGetReg(WORK_TEMP) + usGetReg(FAN_OFF_HW_TEMP)))
 8001b2a:	b283      	uxth	r3, r0
 8001b2c:	445b      	add	r3, fp
 8001b2e:	459a      	cmp	sl, r3
 8001b30:	da09      	bge.n	8001b46 <vDATATask+0x36a>
					    		vSetState(FAN_SPEED_AUTO ,VALVE_OFF);
 8001b32:	2100      	movs	r1, #0
 8001b34:	2004      	movs	r0, #4
 8001b36:	f7ff fd95 	bl	8001664 <vSetState>
					    		break;
 8001b3a:	e681      	b.n	8001840 <vDATATask+0x64>
					    		vSetState(FAN_SPEED_AUTO ,VALVE_OFF);
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	2004      	movs	r0, #4
 8001b40:	f7ff fd90 	bl	8001664 <vSetState>
					    		break;
 8001b44:	e67c      	b.n	8001840 <vDATATask+0x64>
					    	if (usGetRegInput(IN_AIR_TEMP) >= ( usGetReg(WORK_TEMP) + usGetReg(FAN_OFF_HW_TEMP)))
 8001b46:	f8b5 a004 	ldrh.w	sl, [r5, #4]
		usRes = system_regs[reg_addr];
 8001b4a:	4b4d      	ldr	r3, [pc, #308]	; (8001c80 <vDATATask+0x4a4>)
					    	if (usGetRegInput(IN_AIR_TEMP) >= ( usGetReg(WORK_TEMP) + usGetReg(FAN_OFF_HW_TEMP)))
 8001b4c:	f8b3 b004 	ldrh.w	fp, [r3, #4]
		usRes = vFDGetRegState( reg_addr - DEVICE_HOLDING_FLASG );
 8001b50:	2003      	movs	r0, #3
 8001b52:	f7ff facf 	bl	80010f4 <vFDGetRegState>
					    	if (usGetRegInput(IN_AIR_TEMP) >= ( usGetReg(WORK_TEMP) + usGetReg(FAN_OFF_HW_TEMP)))
 8001b56:	b283      	uxth	r3, r0
 8001b58:	445b      	add	r3, fp
 8001b5a:	459a      	cmp	sl, r3
 8001b5c:	f6ff af08 	blt.w	8001970 <vDATATask+0x194>
					    		vSetState(FAN_SPEED_OFF,VALVE_OFF);
 8001b60:	2100      	movs	r1, #0
 8001b62:	4608      	mov	r0, r1
 8001b64:	f7ff fd7e 	bl	8001664 <vSetState>
					    		break;
 8001b68:	e66a      	b.n	8001840 <vDATATask+0x64>
		usRes = system_regs[reg_addr];
 8001b6a:	4b45      	ldr	r3, [pc, #276]	; (8001c80 <vDATATask+0x4a4>)
					    	if (usGetReg(AIR_TEMP) < (usGetReg(WORK_TEMP) - usGetReg(VALVE_ON_TEMP) ))
 8001b6c:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 8001b70:	f8b3 a004 	ldrh.w	sl, [r3, #4]
		usRes = vFDGetRegState( reg_addr - DEVICE_HOLDING_FLASG );
 8001b74:	2004      	movs	r0, #4
 8001b76:	f7ff fabd 	bl	80010f4 <vFDGetRegState>
					    	if (usGetReg(AIR_TEMP) < (usGetReg(WORK_TEMP) - usGetReg(VALVE_ON_TEMP) ))
 8001b7a:	b283      	uxth	r3, r0
 8001b7c:	ebaa 0a03 	sub.w	sl, sl, r3
 8001b80:	45d3      	cmp	fp, sl
 8001b82:	da05      	bge.n	8001b90 <vDATATask+0x3b4>
					    		vSetState(usGetReg(FAN_SPEED_CONFIG), VALVE_ON);
 8001b84:	2101      	movs	r1, #1
 8001b86:	4b3e      	ldr	r3, [pc, #248]	; (8001c80 <vDATATask+0x4a4>)
 8001b88:	7898      	ldrb	r0, [r3, #2]
 8001b8a:	f7ff fd6b 	bl	8001664 <vSetState>
					    		break;
 8001b8e:	e657      	b.n	8001840 <vDATATask+0x64>
					    	vSetState(usGetReg(FAN_SPEED_CONFIG), VALVE_AUTO);
 8001b90:	2102      	movs	r1, #2
 8001b92:	4b3b      	ldr	r3, [pc, #236]	; (8001c80 <vDATATask+0x4a4>)
 8001b94:	7898      	ldrb	r0, [r3, #2]
 8001b96:	f7ff fd65 	bl	8001664 <vSetState>
 8001b9a:	e6ed      	b.n	8001978 <vDATATask+0x19c>
		usRes = system_regs[reg_addr];
 8001b9c:	4b38      	ldr	r3, [pc, #224]	; (8001c80 <vDATATask+0x4a4>)
					    	}
					    	if (usGetReg(AIR_TEMP) == ( usGetReg(WORK_TEMP) - usGetReg(VALVE_ON_TEMP)))
 8001b9e:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 8001ba2:	f8b3 a004 	ldrh.w	sl, [r3, #4]
		usRes = vFDGetRegState( reg_addr - DEVICE_HOLDING_FLASG );
 8001ba6:	2004      	movs	r0, #4
 8001ba8:	f7ff faa4 	bl	80010f4 <vFDGetRegState>
					    	if (usGetReg(AIR_TEMP) == ( usGetReg(WORK_TEMP) - usGetReg(VALVE_ON_TEMP)))
 8001bac:	b283      	uxth	r3, r0
 8001bae:	ebaa 0a03 	sub.w	sl, sl, r3
 8001bb2:	45d3      	cmp	fp, sl
 8001bb4:	d00b      	beq.n	8001bce <vDATATask+0x3f2>
		usRes = system_regs[reg_addr];
 8001bb6:	4b32      	ldr	r3, [pc, #200]	; (8001c80 <vDATATask+0x4a4>)
 8001bb8:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 8001bbc:	f8b3 b004 	ldrh.w	fp, [r3, #4]
					    	{
					    		vSetState( FAN_SPEED_MIN, VALVE_AUTO);
					    		break;
					    	}
					    	if (usGetReg(AIR_TEMP) <  usGetReg(WORK_TEMP))
 8001bc0:	45d3      	cmp	fp, sl
 8001bc2:	d909      	bls.n	8001bd8 <vDATATask+0x3fc>
					    	{
					    		vSetState( FAN_SPEED_AUTO ,VALVE_AUTO);
 8001bc4:	2102      	movs	r1, #2
 8001bc6:	2004      	movs	r0, #4
 8001bc8:	f7ff fd4c 	bl	8001664 <vSetState>
					    		break;
 8001bcc:	e638      	b.n	8001840 <vDATATask+0x64>
					    		vSetState( FAN_SPEED_MIN, VALVE_AUTO);
 8001bce:	2102      	movs	r1, #2
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	f7ff fd47 	bl	8001664 <vSetState>
					    		break;
 8001bd6:	e633      	b.n	8001840 <vDATATask+0x64>
					    	}
					    	if (usGetReg(AIR_TEMP) ==  usGetReg(WORK_TEMP))
 8001bd8:	45d3      	cmp	fp, sl
 8001bda:	d00b      	beq.n	8001bf4 <vDATATask+0x418>
		usRes = vFDGetRegState( reg_addr - DEVICE_HOLDING_FLASG );
 8001bdc:	2005      	movs	r0, #5
 8001bde:	f7ff fa89 	bl	80010f4 <vFDGetRegState>
					    	{
					    		vSetState( FAN_SPEED_AUTO ,VALVE_OFF );
					    		break;
					    	}
					    	if (usGetReg(AIR_TEMP) < (usGetReg(WORK_TEMP) + usGetReg(SPEED_SWITCH_AW_TEMP )))
 8001be2:	b283      	uxth	r3, r0
 8001be4:	445b      	add	r3, fp
 8001be6:	459a      	cmp	sl, r3
 8001be8:	da09      	bge.n	8001bfe <vDATATask+0x422>
					    	{
					    		vSetState( FAN_SPEED_AUTO ,VALVE_OFF );
 8001bea:	2100      	movs	r1, #0
 8001bec:	2004      	movs	r0, #4
 8001bee:	f7ff fd39 	bl	8001664 <vSetState>
					    		break;
 8001bf2:	e625      	b.n	8001840 <vDATATask+0x64>
					    		vSetState( FAN_SPEED_AUTO ,VALVE_OFF );
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	2004      	movs	r0, #4
 8001bf8:	f7ff fd34 	bl	8001664 <vSetState>
					    		break;
 8001bfc:	e620      	b.n	8001840 <vDATATask+0x64>
		usRes = system_regs[reg_addr];
 8001bfe:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <vDATATask+0x4a4>)
					        }
					    	if (usGetReg(AIR_TEMP) >= (usGetReg(WORK_TEMP) + usGetReg(SPEED_SWITCH_AW_TEMP )))
 8001c00:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 8001c04:	f8b3 b004 	ldrh.w	fp, [r3, #4]
		usRes = vFDGetRegState( reg_addr - DEVICE_HOLDING_FLASG );
 8001c08:	2005      	movs	r0, #5
 8001c0a:	f7ff fa73 	bl	80010f4 <vFDGetRegState>
					    	if (usGetReg(AIR_TEMP) >= (usGetReg(WORK_TEMP) + usGetReg(SPEED_SWITCH_AW_TEMP )))
 8001c0e:	b283      	uxth	r3, r0
 8001c10:	445b      	add	r3, fp
 8001c12:	459a      	cmp	sl, r3
 8001c14:	f6ff ae14 	blt.w	8001840 <vDATATask+0x64>
					    	{
					    		vSetState(FAN_SPEED_OFF,VALVE_OFF );
 8001c18:	2100      	movs	r1, #0
 8001c1a:	4608      	mov	r0, r1
 8001c1c:	f7ff fd22 	bl	8001664 <vSetState>
					    		break;
 8001c20:	e60e      	b.n	8001840 <vDATATask+0x64>
			 sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c22:	2360      	movs	r3, #96	; 0x60
 8001c24:	9301      	str	r3, [sp, #4]
			  sConfigOC.Pulse = (pwm/100.0)*860;
 8001c26:	f7fe fbe5 	bl	80003f4 <__aeabi_i2d>
 8001c2a:	4642      	mov	r2, r8
 8001c2c:	464b      	mov	r3, r9
 8001c2e:	f7fe fd75 	bl	800071c <__aeabi_ddiv>
 8001c32:	4632      	mov	r2, r6
 8001c34:	463b      	mov	r3, r7
 8001c36:	f7fe fc47 	bl	80004c8 <__aeabi_dmul>
 8001c3a:	f7fe fe57 	bl	80008ec <__aeabi_d2uiz>
 8001c3e:	9002      	str	r0, [sp, #8]
			  HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_1);
 8001c40:	f8df a040 	ldr.w	sl, [pc, #64]	; 8001c84 <vDATATask+0x4a8>
 8001c44:	2100      	movs	r1, #0
 8001c46:	4650      	mov	r0, sl
 8001c48:	f002 f8fc 	bl	8003e44 <HAL_TIM_PWM_Stop>
			  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	a901      	add	r1, sp, #4
 8001c50:	4650      	mov	r0, sl
 8001c52:	f001 ff55 	bl	8003b00 <HAL_TIM_PWM_ConfigChannel>
			  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8001c56:	2100      	movs	r1, #0
 8001c58:	4650      	mov	r0, sl
 8001c5a:	f002 f88f 	bl	8003d7c <HAL_TIM_PWM_Start>
 8001c5e:	e600      	b.n	8001862 <vDATATask+0x86>
		 vUPDATECoils(1);
 8001c60:	2001      	movs	r0, #1
 8001c62:	f003 fa5b 	bl	800511c <vUPDATECoils>
 8001c66:	e5d2      	b.n	800180e <vDATATask+0x32>
	     		 if (usGetRegInput(TYPE) != AW)
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d003      	beq.n	8001c74 <vDATATask+0x498>
	     		   K1 = 1;
 8001c6c:	4621      	mov	r1, r4
		 K3 = 0;
 8001c6e:	2400      	movs	r4, #0
		 K2 = 0;
 8001c70:	46a2      	mov	sl, r4
 8001c72:	e609      	b.n	8001888 <vDATATask+0xac>
		 K1 = 0;
 8001c74:	2100      	movs	r1, #0
		 K3 = 0;
 8001c76:	468a      	mov	sl, r1
 8001c78:	e606      	b.n	8001888 <vDATATask+0xac>
		 K1 = 0;
 8001c7a:	2100      	movs	r1, #0
		 K3 = 0;
 8001c7c:	468a      	mov	sl, r1
 8001c7e:	e603      	b.n	8001888 <vDATATask+0xac>
 8001c80:	200011ec 	.word	0x200011ec
 8001c84:	20001084 	.word	0x20001084

08001c88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c88:	b500      	push	{lr}
 8001c8a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c8c:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <HAL_MspInit+0x4c>)
 8001c8e:	699a      	ldr	r2, [r3, #24]
 8001c90:	f042 0201 	orr.w	r2, r2, #1
 8001c94:	619a      	str	r2, [r3, #24]
 8001c96:	699a      	ldr	r2, [r3, #24]
 8001c98:	f002 0201 	and.w	r2, r2, #1
 8001c9c:	9200      	str	r2, [sp, #0]
 8001c9e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ca0:	69da      	ldr	r2, [r3, #28]
 8001ca2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ca6:	61da      	str	r2, [r3, #28]
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cae:	9301      	str	r3, [sp, #4]
 8001cb0:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	210f      	movs	r1, #15
 8001cb6:	f06f 0001 	mvn.w	r0, #1
 8001cba:	f000 fc93 	bl	80025e4 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001cbe:	4a06      	ldr	r2, [pc, #24]	; (8001cd8 <HAL_MspInit+0x50>)
 8001cc0:	6853      	ldr	r3, [r2, #4]
 8001cc2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001cc6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cca:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ccc:	b003      	add	sp, #12
 8001cce:	f85d fb04 	ldr.w	pc, [sp], #4
 8001cd2:	bf00      	nop
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	40010000 	.word	0x40010000

08001cdc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cdc:	b510      	push	{r4, lr}
 8001cde:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	9302      	str	r3, [sp, #8]
 8001ce4:	9303      	str	r3, [sp, #12]
 8001ce6:	9304      	str	r3, [sp, #16]
 8001ce8:	9305      	str	r3, [sp, #20]
  if(hadc->Instance==ADC1)
 8001cea:	6802      	ldr	r2, [r0, #0]
 8001cec:	4b1d      	ldr	r3, [pc, #116]	; (8001d64 <HAL_ADC_MspInit+0x88>)
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d001      	beq.n	8001cf6 <HAL_ADC_MspInit+0x1a>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001cf2:	b006      	add	sp, #24
 8001cf4:	bd10      	pop	{r4, pc}
 8001cf6:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cf8:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8001cfc:	699a      	ldr	r2, [r3, #24]
 8001cfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d02:	619a      	str	r2, [r3, #24]
 8001d04:	699a      	ldr	r2, [r3, #24]
 8001d06:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001d0a:	9200      	str	r2, [sp, #0]
 8001d0c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0e:	699a      	ldr	r2, [r3, #24]
 8001d10:	f042 0204 	orr.w	r2, r2, #4
 8001d14:	619a      	str	r2, [r3, #24]
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	9301      	str	r3, [sp, #4]
 8001d1e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001d20:	2307      	movs	r3, #7
 8001d22:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d24:	2303      	movs	r3, #3
 8001d26:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d28:	a902      	add	r1, sp, #8
 8001d2a:	480f      	ldr	r0, [pc, #60]	; (8001d68 <HAL_ADC_MspInit+0x8c>)
 8001d2c:	f000 ff80 	bl	8002c30 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8001d30:	480e      	ldr	r0, [pc, #56]	; (8001d6c <HAL_ADC_MspInit+0x90>)
 8001d32:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <HAL_ADC_MspInit+0x94>)
 8001d34:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d36:	2300      	movs	r3, #0
 8001d38:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d3a:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d3c:	2280      	movs	r2, #128	; 0x80
 8001d3e:	60c2      	str	r2, [r0, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d44:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d4a:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001d4c:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d4e:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d50:	f000 fc8c 	bl	800266c <HAL_DMA_Init>
 8001d54:	b918      	cbnz	r0, 8001d5e <HAL_ADC_MspInit+0x82>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d56:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <HAL_ADC_MspInit+0x90>)
 8001d58:	6223      	str	r3, [r4, #32]
 8001d5a:	625c      	str	r4, [r3, #36]	; 0x24
}
 8001d5c:	e7c9      	b.n	8001cf2 <HAL_ADC_MspInit+0x16>
      Error_Handler();
 8001d5e:	f7ff fc7f 	bl	8001660 <Error_Handler>
 8001d62:	e7f8      	b.n	8001d56 <HAL_ADC_MspInit+0x7a>
 8001d64:	40012400 	.word	0x40012400
 8001d68:	40010800 	.word	0x40010800
 8001d6c:	20000ff8 	.word	0x20000ff8
 8001d70:	40020008 	.word	0x40020008

08001d74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d74:	b500      	push	{lr}
 8001d76:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM2)
 8001d78:	6803      	ldr	r3, [r0, #0]
 8001d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d7e:	d008      	beq.n	8001d92 <HAL_TIM_Base_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8001d80:	4a1d      	ldr	r2, [pc, #116]	; (8001df8 <HAL_TIM_Base_MspInit+0x84>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d019      	beq.n	8001dba <HAL_TIM_Base_MspInit+0x46>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8001d86:	4a1d      	ldr	r2, [pc, #116]	; (8001dfc <HAL_TIM_Base_MspInit+0x88>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d021      	beq.n	8001dd0 <HAL_TIM_Base_MspInit+0x5c>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001d8c:	b005      	add	sp, #20
 8001d8e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d92:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001d96:	69da      	ldr	r2, [r3, #28]
 8001d98:	f042 0201 	orr.w	r2, r2, #1
 8001d9c:	61da      	str	r2, [r3, #28]
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	9301      	str	r3, [sp, #4]
 8001da6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001da8:	2200      	movs	r2, #0
 8001daa:	2105      	movs	r1, #5
 8001dac:	201c      	movs	r0, #28
 8001dae:	f000 fc19 	bl	80025e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001db2:	201c      	movs	r0, #28
 8001db4:	f000 fc4c 	bl	8002650 <HAL_NVIC_EnableIRQ>
 8001db8:	e7e8      	b.n	8001d8c <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dba:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <HAL_TIM_Base_MspInit+0x8c>)
 8001dbc:	69da      	ldr	r2, [r3, #28]
 8001dbe:	f042 0202 	orr.w	r2, r2, #2
 8001dc2:	61da      	str	r2, [r3, #28]
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	9302      	str	r3, [sp, #8]
 8001dcc:	9b02      	ldr	r3, [sp, #8]
 8001dce:	e7dd      	b.n	8001d8c <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <HAL_TIM_Base_MspInit+0x8c>)
 8001dd2:	69da      	ldr	r2, [r3, #28]
 8001dd4:	f042 0204 	orr.w	r2, r2, #4
 8001dd8:	61da      	str	r2, [r3, #28]
 8001dda:	69db      	ldr	r3, [r3, #28]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	9303      	str	r3, [sp, #12]
 8001de2:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001de4:	2200      	movs	r2, #0
 8001de6:	2105      	movs	r1, #5
 8001de8:	201e      	movs	r0, #30
 8001dea:	f000 fbfb 	bl	80025e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001dee:	201e      	movs	r0, #30
 8001df0:	f000 fc2e 	bl	8002650 <HAL_NVIC_EnableIRQ>
}
 8001df4:	e7ca      	b.n	8001d8c <HAL_TIM_Base_MspInit+0x18>
 8001df6:	bf00      	nop
 8001df8:	40000400 	.word	0x40000400
 8001dfc:	40000800 	.word	0x40000800
 8001e00:	40021000 	.word	0x40021000

08001e04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e04:	b500      	push	{lr}
 8001e06:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e08:	2300      	movs	r3, #0
 8001e0a:	9302      	str	r3, [sp, #8]
 8001e0c:	9303      	str	r3, [sp, #12]
 8001e0e:	9304      	str	r3, [sp, #16]
 8001e10:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM3)
 8001e12:	6802      	ldr	r2, [r0, #0]
 8001e14:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <HAL_TIM_MspPostInit+0x48>)
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d002      	beq.n	8001e20 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e1a:	b007      	add	sp, #28
 8001e1c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e20:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8001e24:	699a      	ldr	r2, [r3, #24]
 8001e26:	f042 0204 	orr.w	r2, r2, #4
 8001e2a:	619a      	str	r2, [r3, #24]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	f003 0304 	and.w	r3, r3, #4
 8001e32:	9301      	str	r3, [sp, #4]
 8001e34:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e36:	23c0      	movs	r3, #192	; 0xc0
 8001e38:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e42:	a902      	add	r1, sp, #8
 8001e44:	4802      	ldr	r0, [pc, #8]	; (8001e50 <HAL_TIM_MspPostInit+0x4c>)
 8001e46:	f000 fef3 	bl	8002c30 <HAL_GPIO_Init>
}
 8001e4a:	e7e6      	b.n	8001e1a <HAL_TIM_MspPostInit+0x16>
 8001e4c:	40000400 	.word	0x40000400
 8001e50:	40010800 	.word	0x40010800

08001e54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e54:	b530      	push	{r4, r5, lr}
 8001e56:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e58:	2300      	movs	r3, #0
 8001e5a:	9302      	str	r3, [sp, #8]
 8001e5c:	9303      	str	r3, [sp, #12]
 8001e5e:	9304      	str	r3, [sp, #16]
 8001e60:	9305      	str	r3, [sp, #20]
  if(huart->Instance==USART1)
 8001e62:	6802      	ldr	r2, [r0, #0]
 8001e64:	4b1b      	ldr	r3, [pc, #108]	; (8001ed4 <HAL_UART_MspInit+0x80>)
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d001      	beq.n	8001e6e <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e6a:	b007      	add	sp, #28
 8001e6c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e6e:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001e72:	699a      	ldr	r2, [r3, #24]
 8001e74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e78:	619a      	str	r2, [r3, #24]
 8001e7a:	699a      	ldr	r2, [r3, #24]
 8001e7c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001e80:	9200      	str	r2, [sp, #0]
 8001e82:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e84:	699a      	ldr	r2, [r3, #24]
 8001e86:	f042 0204 	orr.w	r2, r2, #4
 8001e8a:	619a      	str	r2, [r3, #24]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	f003 0304 	and.w	r3, r3, #4
 8001e92:	9301      	str	r3, [sp, #4]
 8001e94:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e9a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea4:	4d0c      	ldr	r5, [pc, #48]	; (8001ed8 <HAL_UART_MspInit+0x84>)
 8001ea6:	a902      	add	r1, sp, #8
 8001ea8:	4628      	mov	r0, r5
 8001eaa:	f000 fec1 	bl	8002c30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001eae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eb2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eb4:	2400      	movs	r4, #0
 8001eb6:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb8:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eba:	a902      	add	r1, sp, #8
 8001ebc:	4628      	mov	r0, r5
 8001ebe:	f000 feb7 	bl	8002c30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001ec2:	4622      	mov	r2, r4
 8001ec4:	2105      	movs	r1, #5
 8001ec6:	2025      	movs	r0, #37	; 0x25
 8001ec8:	f000 fb8c 	bl	80025e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ecc:	2025      	movs	r0, #37	; 0x25
 8001ece:	f000 fbbf 	bl	8002650 <HAL_NVIC_EnableIRQ>
}
 8001ed2:	e7ca      	b.n	8001e6a <HAL_UART_MspInit+0x16>
 8001ed4:	40013800 	.word	0x40013800
 8001ed8:	40010800 	.word	0x40010800

08001edc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001edc:	b530      	push	{r4, r5, lr}
 8001ede:	b089      	sub	sp, #36	; 0x24
 8001ee0:	4604      	mov	r4, r0
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001ee2:	4b1e      	ldr	r3, [pc, #120]	; (8001f5c <HAL_InitTick+0x80>)
 8001ee4:	699a      	ldr	r2, [r3, #24]
 8001ee6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001eea:	619a      	str	r2, [r3, #24]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ef2:	9301      	str	r3, [sp, #4]
 8001ef4:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ef6:	a902      	add	r1, sp, #8
 8001ef8:	a803      	add	r0, sp, #12
 8001efa:	f001 faf7 	bl	80034ec <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001efe:	f001 fae5 	bl	80034cc <HAL_RCC_GetPCLK2Freq>
 8001f02:	4603      	mov	r3, r0

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001f04:	4816      	ldr	r0, [pc, #88]	; (8001f60 <HAL_InitTick+0x84>)
 8001f06:	4a17      	ldr	r2, [pc, #92]	; (8001f64 <HAL_InitTick+0x88>)
 8001f08:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001f0a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f0e:	60c2      	str	r2, [r0, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f10:	4a15      	ldr	r2, [pc, #84]	; (8001f68 <HAL_InitTick+0x8c>)
 8001f12:	fba2 2303 	umull	r2, r3, r2, r3
 8001f16:	0c9b      	lsrs	r3, r3, #18
 8001f18:	3b01      	subs	r3, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8001f1a:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	6103      	str	r3, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f20:	6083      	str	r3, [r0, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f22:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001f24:	f001 fd66 	bl	80039f4 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8001f28:	4605      	mov	r5, r0
 8001f2a:	b110      	cbz	r0, 8001f32 <HAL_InitTick+0x56>
    }
  }

 /* Return function status */
  return status;
}
 8001f2c:	4628      	mov	r0, r5
 8001f2e:	b009      	add	sp, #36	; 0x24
 8001f30:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001f32:	480b      	ldr	r0, [pc, #44]	; (8001f60 <HAL_InitTick+0x84>)
 8001f34:	f001 fc00 	bl	8003738 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8001f38:	4605      	mov	r5, r0
 8001f3a:	2800      	cmp	r0, #0
 8001f3c:	d1f6      	bne.n	8001f2c <HAL_InitTick+0x50>
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001f3e:	2019      	movs	r0, #25
 8001f40:	f000 fb86 	bl	8002650 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f44:	2c0f      	cmp	r4, #15
 8001f46:	d901      	bls.n	8001f4c <HAL_InitTick+0x70>
        status = HAL_ERROR;
 8001f48:	2501      	movs	r5, #1
 8001f4a:	e7ef      	b.n	8001f2c <HAL_InitTick+0x50>
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	4621      	mov	r1, r4
 8001f50:	2019      	movs	r0, #25
 8001f52:	f000 fb47 	bl	80025e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f56:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <HAL_InitTick+0x90>)
 8001f58:	601c      	str	r4, [r3, #0]
 8001f5a:	e7e7      	b.n	8001f2c <HAL_InitTick+0x50>
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	200011fc 	.word	0x200011fc
 8001f64:	40012c00 	.word	0x40012c00
 8001f68:	431bde83 	.word	0x431bde83
 8001f6c:	2000002c 	.word	0x2000002c

08001f70 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f70:	e7fe      	b.n	8001f70 <NMI_Handler>

08001f72 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f72:	e7fe      	b.n	8001f72 <HardFault_Handler>

08001f74 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f74:	e7fe      	b.n	8001f74 <MemManage_Handler>

08001f76 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f76:	e7fe      	b.n	8001f76 <BusFault_Handler>

08001f78 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f78:	e7fe      	b.n	8001f78 <UsageFault_Handler>

08001f7a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f7a:	4770      	bx	lr

08001f7c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001f7c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	vADCReady();
 8001f7e:	f7fe fe89 	bl	8000c94 <vADCReady>
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f82:	4802      	ldr	r0, [pc, #8]	; (8001f8c <DMA1_Channel1_IRQHandler+0x10>)
 8001f84:	f000 fc66 	bl	8002854 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001f88:	bd08      	pop	{r3, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000ff8 	.word	0x20000ff8

08001f90 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001f90:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f92:	4802      	ldr	r0, [pc, #8]	; (8001f9c <TIM1_UP_IRQHandler+0xc>)
 8001f94:	f001 fc22 	bl	80037dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001f98:	bd08      	pop	{r3, pc}
 8001f9a:	bf00      	nop
 8001f9c:	200011fc 	.word	0x200011fc

08001fa0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fa0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fa2:	4802      	ldr	r0, [pc, #8]	; (8001fac <TIM2_IRQHandler+0xc>)
 8001fa4:	f001 fc1a 	bl	80037dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001fa8:	bd08      	pop	{r3, pc}
 8001faa:	bf00      	nop
 8001fac:	2000103c 	.word	0x2000103c

08001fb0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001fb0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */
  vTimer1sInc();
 8001fb2:	f7ff fbe3 	bl	800177c <vTimer1sInc>
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001fb6:	4802      	ldr	r0, [pc, #8]	; (8001fc0 <TIM4_IRQHandler+0x10>)
 8001fb8:	f001 fc10 	bl	80037dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001fbc:	bd08      	pop	{r3, pc}
 8001fbe:	bf00      	nop
 8001fc0:	200010cc 	.word	0x200010cc

08001fc4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001fc4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001fc6:	4802      	ldr	r0, [pc, #8]	; (8001fd0 <USART1_IRQHandler+0xc>)
 8001fc8:	f002 f958 	bl	800427c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001fcc:	bd08      	pop	{r3, pc}
 8001fce:	bf00      	nop
 8001fd0:	20001114 	.word	0x20001114

08001fd4 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fd4:	4770      	bx	lr
	...

08001fd8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fd8:	f7ff fffc 	bl	8001fd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fdc:	480b      	ldr	r0, [pc, #44]	; (800200c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001fde:	490c      	ldr	r1, [pc, #48]	; (8002010 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001fe0:	4a0c      	ldr	r2, [pc, #48]	; (8002014 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001fe2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fe4:	e002      	b.n	8001fec <LoopCopyDataInit>

08001fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fea:	3304      	adds	r3, #4

08001fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ff0:	d3f9      	bcc.n	8001fe6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ff2:	4a09      	ldr	r2, [pc, #36]	; (8002018 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ff4:	4c09      	ldr	r4, [pc, #36]	; (800201c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ff8:	e001      	b.n	8001ffe <LoopFillZerobss>

08001ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ffc:	3204      	adds	r2, #4

08001ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002000:	d3fb      	bcc.n	8001ffa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002002:	f005 f99d 	bl	8007340 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002006:	f7ff f8fb 	bl	8001200 <main>
  bx lr
 800200a:	4770      	bx	lr
  ldr r0, =_sdata
 800200c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002010:	20000124 	.word	0x20000124
  ldr r2, =_sidata
 8002014:	08007a74 	.word	0x08007a74
  ldr r2, =_sbss
 8002018:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 800201c:	20002de4 	.word	0x20002de4

08002020 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002020:	e7fe      	b.n	8002020 <ADC1_2_IRQHandler>
	...

08002024 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002024:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002026:	4a07      	ldr	r2, [pc, #28]	; (8002044 <HAL_Init+0x20>)
 8002028:	6813      	ldr	r3, [r2, #0]
 800202a:	f043 0310 	orr.w	r3, r3, #16
 800202e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002030:	2003      	movs	r0, #3
 8002032:	f000 fac5 	bl	80025c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002036:	200f      	movs	r0, #15
 8002038:	f7ff ff50 	bl	8001edc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800203c:	f7ff fe24 	bl	8001c88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8002040:	2000      	movs	r0, #0
 8002042:	bd08      	pop	{r3, pc}
 8002044:	40022000 	.word	0x40022000

08002048 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002048:	4a03      	ldr	r2, [pc, #12]	; (8002058 <HAL_IncTick+0x10>)
 800204a:	6811      	ldr	r1, [r2, #0]
 800204c:	4b03      	ldr	r3, [pc, #12]	; (800205c <HAL_IncTick+0x14>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	440b      	add	r3, r1
 8002052:	6013      	str	r3, [r2, #0]
}
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	20001244 	.word	0x20001244
 800205c:	20000028 	.word	0x20000028

08002060 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002060:	4b01      	ldr	r3, [pc, #4]	; (8002068 <HAL_GetTick+0x8>)
 8002062:	6818      	ldr	r0, [r3, #0]
}
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	20001244 	.word	0x20001244

0800206c <HAL_ADC_ConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800206c:	4770      	bx	lr

0800206e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800206e:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002070:	6a43      	ldr	r3, [r0, #36]	; 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002072:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002074:	f012 0f50 	tst.w	r2, #80	; 0x50
 8002078:	d11e      	bne.n	80020b8 <ADC_DMAConvCplt+0x4a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800207a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800207c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002080:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	6892      	ldr	r2, [r2, #8]
 8002086:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800208a:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800208e:	d003      	beq.n	8002098 <ADC_DMAConvCplt+0x2a>
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff ffeb 	bl	800206c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002096:	bd08      	pop	{r3, pc}
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002098:	7b1a      	ldrb	r2, [r3, #12]
 800209a:	2a00      	cmp	r2, #0
 800209c:	d1f8      	bne.n	8002090 <ADC_DMAConvCplt+0x22>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800209e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020a4:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020a8:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 80020ac:	d1f0      	bne.n	8002090 <ADC_DMAConvCplt+0x22>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020b0:	f042 0201 	orr.w	r2, r2, #1
 80020b4:	629a      	str	r2, [r3, #40]	; 0x28
 80020b6:	e7eb      	b.n	8002090 <ADC_DMAConvCplt+0x22>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020bc:	4798      	blx	r3
}
 80020be:	e7ea      	b.n	8002096 <ADC_DMAConvCplt+0x28>

080020c0 <HAL_ADC_ConvHalfCpltCallback>:
}
 80020c0:	4770      	bx	lr

080020c2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80020c2:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80020c4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80020c6:	f7ff fffb 	bl	80020c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020ca:	bd08      	pop	{r3, pc}

080020cc <HAL_ADC_ErrorCallback>:
}
 80020cc:	4770      	bx	lr

080020ce <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80020ce:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020d0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80020d2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80020d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020d8:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80020da:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80020dc:	f043 0304 	orr.w	r3, r3, #4
 80020e0:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80020e2:	f7ff fff3 	bl	80020cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020e6:	bd08      	pop	{r3, pc}

080020e8 <HAL_ADC_ConfigChannel>:
{ 
 80020e8:	b430      	push	{r4, r5}
 80020ea:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 80020ec:	2200      	movs	r2, #0
 80020ee:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80020f0:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 80020f4:	2a01      	cmp	r2, #1
 80020f6:	f000 8095 	beq.w	8002224 <HAL_ADC_ConfigChannel+0x13c>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2201      	movs	r2, #1
 80020fe:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8002102:	684a      	ldr	r2, [r1, #4]
 8002104:	2a06      	cmp	r2, #6
 8002106:	d82d      	bhi.n	8002164 <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002108:	6804      	ldr	r4, [r0, #0]
 800210a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800210c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002110:	3a05      	subs	r2, #5
 8002112:	f04f 0c1f 	mov.w	ip, #31
 8002116:	fa0c fc02 	lsl.w	ip, ip, r2
 800211a:	ea20 000c 	bic.w	r0, r0, ip
 800211e:	680d      	ldr	r5, [r1, #0]
 8002120:	fa05 f202 	lsl.w	r2, r5, r2
 8002124:	4302      	orrs	r2, r0
 8002126:	6362      	str	r2, [r4, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002128:	680a      	ldr	r2, [r1, #0]
 800212a:	2a09      	cmp	r2, #9
 800212c:	d93a      	bls.n	80021a4 <HAL_ADC_ConfigChannel+0xbc>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800212e:	681c      	ldr	r4, [r3, #0]
 8002130:	68e0      	ldr	r0, [r4, #12]
 8002132:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002136:	3a1e      	subs	r2, #30
 8002138:	f04f 0c07 	mov.w	ip, #7
 800213c:	fa0c fc02 	lsl.w	ip, ip, r2
 8002140:	ea20 000c 	bic.w	r0, r0, ip
 8002144:	688d      	ldr	r5, [r1, #8]
 8002146:	fa05 f202 	lsl.w	r2, r5, r2
 800214a:	4302      	orrs	r2, r0
 800214c:	60e2      	str	r2, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800214e:	680a      	ldr	r2, [r1, #0]
 8002150:	3a10      	subs	r2, #16
 8002152:	2a01      	cmp	r2, #1
 8002154:	d936      	bls.n	80021c4 <HAL_ADC_ConfigChannel+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002156:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 800215e:	b002      	add	sp, #8
 8002160:	bc30      	pop	{r4, r5}
 8002162:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 8002164:	2a0c      	cmp	r2, #12
 8002166:	d80e      	bhi.n	8002186 <HAL_ADC_ConfigChannel+0x9e>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002168:	6805      	ldr	r5, [r0, #0]
 800216a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800216c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002170:	3a23      	subs	r2, #35	; 0x23
 8002172:	241f      	movs	r4, #31
 8002174:	4094      	lsls	r4, r2
 8002176:	ea20 0004 	bic.w	r0, r0, r4
 800217a:	680c      	ldr	r4, [r1, #0]
 800217c:	fa04 f202 	lsl.w	r2, r4, r2
 8002180:	4302      	orrs	r2, r0
 8002182:	632a      	str	r2, [r5, #48]	; 0x30
 8002184:	e7d0      	b.n	8002128 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002186:	6805      	ldr	r5, [r0, #0]
 8002188:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800218a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800218e:	3a41      	subs	r2, #65	; 0x41
 8002190:	241f      	movs	r4, #31
 8002192:	4094      	lsls	r4, r2
 8002194:	ea20 0004 	bic.w	r0, r0, r4
 8002198:	680c      	ldr	r4, [r1, #0]
 800219a:	fa04 f202 	lsl.w	r2, r4, r2
 800219e:	4302      	orrs	r2, r0
 80021a0:	62ea      	str	r2, [r5, #44]	; 0x2c
 80021a2:	e7c1      	b.n	8002128 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80021a4:	681c      	ldr	r4, [r3, #0]
 80021a6:	6920      	ldr	r0, [r4, #16]
 80021a8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80021ac:	f04f 0c07 	mov.w	ip, #7
 80021b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80021b4:	ea20 000c 	bic.w	r0, r0, ip
 80021b8:	688d      	ldr	r5, [r1, #8]
 80021ba:	fa05 f202 	lsl.w	r2, r5, r2
 80021be:	4302      	orrs	r2, r0
 80021c0:	6122      	str	r2, [r4, #16]
 80021c2:	e7c4      	b.n	800214e <HAL_ADC_ConfigChannel+0x66>
    if (hadc->Instance == ADC1)
 80021c4:	6818      	ldr	r0, [r3, #0]
 80021c6:	4a18      	ldr	r2, [pc, #96]	; (8002228 <HAL_ADC_ConfigChannel+0x140>)
 80021c8:	4290      	cmp	r0, r2
 80021ca:	d005      	beq.n	80021d8 <HAL_ADC_ConfigChannel+0xf0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021ce:	f042 0220 	orr.w	r2, r2, #32
 80021d2:	629a      	str	r2, [r3, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80021d4:	2001      	movs	r0, #1
 80021d6:	e7bf      	b.n	8002158 <HAL_ADC_ConfigChannel+0x70>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80021d8:	6892      	ldr	r2, [r2, #8]
 80021da:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
 80021de:	d11d      	bne.n	800221c <HAL_ADC_ConfigChannel+0x134>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80021e0:	4811      	ldr	r0, [pc, #68]	; (8002228 <HAL_ADC_ConfigChannel+0x140>)
 80021e2:	6882      	ldr	r2, [r0, #8]
 80021e4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80021e8:	6082      	str	r2, [r0, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021ea:	680a      	ldr	r2, [r1, #0]
 80021ec:	2a10      	cmp	r2, #16
 80021ee:	d001      	beq.n	80021f4 <HAL_ADC_ConfigChannel+0x10c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021f0:	2000      	movs	r0, #0
 80021f2:	e7b1      	b.n	8002158 <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021f4:	4a0d      	ldr	r2, [pc, #52]	; (800222c <HAL_ADC_ConfigChannel+0x144>)
 80021f6:	6812      	ldr	r2, [r2, #0]
 80021f8:	490d      	ldr	r1, [pc, #52]	; (8002230 <HAL_ADC_ConfigChannel+0x148>)
 80021fa:	fba1 1202 	umull	r1, r2, r1, r2
 80021fe:	0c92      	lsrs	r2, r2, #18
 8002200:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002204:	0052      	lsls	r2, r2, #1
 8002206:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8002208:	9a01      	ldr	r2, [sp, #4]
 800220a:	b14a      	cbz	r2, 8002220 <HAL_ADC_ConfigChannel+0x138>
            wait_loop_index--;
 800220c:	9a01      	ldr	r2, [sp, #4]
 800220e:	3a01      	subs	r2, #1
 8002210:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8002212:	9a01      	ldr	r2, [sp, #4]
 8002214:	2a00      	cmp	r2, #0
 8002216:	d1f9      	bne.n	800220c <HAL_ADC_ConfigChannel+0x124>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002218:	2000      	movs	r0, #0
 800221a:	e79d      	b.n	8002158 <HAL_ADC_ConfigChannel+0x70>
 800221c:	2000      	movs	r0, #0
 800221e:	e79b      	b.n	8002158 <HAL_ADC_ConfigChannel+0x70>
 8002220:	2000      	movs	r0, #0
 8002222:	e799      	b.n	8002158 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 8002224:	2002      	movs	r0, #2
 8002226:	e79a      	b.n	800215e <HAL_ADC_ConfigChannel+0x76>
 8002228:	40012400 	.word	0x40012400
 800222c:	20000024 	.word	0x20000024
 8002230:	431bde83 	.word	0x431bde83

08002234 <ADC_Enable>:
{
 8002234:	b530      	push	{r4, r5, lr}
 8002236:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8002238:	2300      	movs	r3, #0
 800223a:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800223c:	6803      	ldr	r3, [r0, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	f012 0f01 	tst.w	r2, #1
 8002244:	d13b      	bne.n	80022be <ADC_Enable+0x8a>
 8002246:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	f042 0201 	orr.w	r2, r2, #1
 800224e:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002250:	4b1c      	ldr	r3, [pc, #112]	; (80022c4 <ADC_Enable+0x90>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a1c      	ldr	r2, [pc, #112]	; (80022c8 <ADC_Enable+0x94>)
 8002256:	fba2 2303 	umull	r2, r3, r2, r3
 800225a:	0c9b      	lsrs	r3, r3, #18
 800225c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800225e:	9b01      	ldr	r3, [sp, #4]
 8002260:	b12b      	cbz	r3, 800226e <ADC_Enable+0x3a>
      wait_loop_index--;
 8002262:	9b01      	ldr	r3, [sp, #4]
 8002264:	3b01      	subs	r3, #1
 8002266:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002268:	9b01      	ldr	r3, [sp, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f9      	bne.n	8002262 <ADC_Enable+0x2e>
    tickstart = HAL_GetTick();
 800226e:	f7ff fef7 	bl	8002060 <HAL_GetTick>
 8002272:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002274:	6823      	ldr	r3, [r4, #0]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f013 0f01 	tst.w	r3, #1
 800227c:	d006      	beq.n	800228c <ADC_Enable+0x58>
  return HAL_OK;
 800227e:	2000      	movs	r0, #0
 8002280:	e01e      	b.n	80022c0 <ADC_Enable+0x8c>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002282:	6823      	ldr	r3, [r4, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f013 0f01 	tst.w	r3, #1
 800228a:	d116      	bne.n	80022ba <ADC_Enable+0x86>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800228c:	f7ff fee8 	bl	8002060 <HAL_GetTick>
 8002290:	1b43      	subs	r3, r0, r5
 8002292:	2b02      	cmp	r3, #2
 8002294:	d9f5      	bls.n	8002282 <ADC_Enable+0x4e>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002296:	6823      	ldr	r3, [r4, #0]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f013 0f01 	tst.w	r3, #1
 800229e:	d1f0      	bne.n	8002282 <ADC_Enable+0x4e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80022a2:	f043 0310 	orr.w	r3, r3, #16
 80022a6:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80022aa:	f043 0301 	orr.w	r3, r3, #1
 80022ae:	62e3      	str	r3, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 80022b0:	2300      	movs	r3, #0
 80022b2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          return HAL_ERROR;
 80022b6:	2001      	movs	r0, #1
 80022b8:	e002      	b.n	80022c0 <ADC_Enable+0x8c>
  return HAL_OK;
 80022ba:	2000      	movs	r0, #0
 80022bc:	e000      	b.n	80022c0 <ADC_Enable+0x8c>
 80022be:	2000      	movs	r0, #0
}
 80022c0:	b003      	add	sp, #12
 80022c2:	bd30      	pop	{r4, r5, pc}
 80022c4:	20000024 	.word	0x20000024
 80022c8:	431bde83 	.word	0x431bde83

080022cc <HAL_ADC_Start_DMA>:
{
 80022cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ce:	4604      	mov	r4, r0
 80022d0:	460d      	mov	r5, r1
 80022d2:	4616      	mov	r6, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80022d4:	6801      	ldr	r1, [r0, #0]
 80022d6:	4842      	ldr	r0, [pc, #264]	; (80023e0 <HAL_ADC_Start_DMA+0x114>)
 80022d8:	4281      	cmp	r1, r0
 80022da:	d05d      	beq.n	8002398 <HAL_ADC_Start_DMA+0xcc>
 80022dc:	4b41      	ldr	r3, [pc, #260]	; (80023e4 <HAL_ADC_Start_DMA+0x118>)
 80022de:	4299      	cmp	r1, r3
 80022e0:	d05a      	beq.n	8002398 <HAL_ADC_Start_DMA+0xcc>
    __HAL_LOCK(hadc);
 80022e2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d077      	beq.n	80023da <HAL_ADC_Start_DMA+0x10e>
 80022ea:	2301      	movs	r3, #1
 80022ec:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 80022f0:	4620      	mov	r0, r4
 80022f2:	f7ff ff9f 	bl	8002234 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80022f6:	4607      	mov	r7, r0
 80022f8:	2800      	cmp	r0, #0
 80022fa:	d16a      	bne.n	80023d2 <HAL_ADC_Start_DMA+0x106>
      ADC_STATE_CLR_SET(hadc->State,
 80022fc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80022fe:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00
 8002302:	f021 0101 	bic.w	r1, r1, #1
 8002306:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800230a:	62a1      	str	r1, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800230c:	6822      	ldr	r2, [r4, #0]
 800230e:	4b35      	ldr	r3, [pc, #212]	; (80023e4 <HAL_ADC_Start_DMA+0x118>)
 8002310:	429a      	cmp	r2, r3
 8002312:	d048      	beq.n	80023a6 <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002314:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002316:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800231a:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800231c:	6853      	ldr	r3, [r2, #4]
 800231e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002322:	d005      	beq.n	8002330 <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002324:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002326:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800232a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800232e:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002330:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002332:	f413 5f80 	tst.w	r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002336:	bf1a      	itte	ne
 8002338:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
 800233a:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 800233e:	2300      	moveq	r3, #0
 8002340:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8002342:	2300      	movs	r3, #0
 8002344:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002348:	6a23      	ldr	r3, [r4, #32]
 800234a:	4a27      	ldr	r2, [pc, #156]	; (80023e8 <HAL_ADC_Start_DMA+0x11c>)
 800234c:	629a      	str	r2, [r3, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800234e:	6a23      	ldr	r3, [r4, #32]
 8002350:	4a26      	ldr	r2, [pc, #152]	; (80023ec <HAL_ADC_Start_DMA+0x120>)
 8002352:	62da      	str	r2, [r3, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002354:	6a23      	ldr	r3, [r4, #32]
 8002356:	4a26      	ldr	r2, [pc, #152]	; (80023f0 <HAL_ADC_Start_DMA+0x124>)
 8002358:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800235a:	6823      	ldr	r3, [r4, #0]
 800235c:	f06f 0202 	mvn.w	r2, #2
 8002360:	601a      	str	r2, [r3, #0]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002362:	6822      	ldr	r2, [r4, #0]
 8002364:	6893      	ldr	r3, [r2, #8]
 8002366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800236a:	6093      	str	r3, [r2, #8]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800236c:	6821      	ldr	r1, [r4, #0]
 800236e:	4633      	mov	r3, r6
 8002370:	462a      	mov	r2, r5
 8002372:	314c      	adds	r1, #76	; 0x4c
 8002374:	6a20      	ldr	r0, [r4, #32]
 8002376:	f000 f9af 	bl	80026d8 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800237a:	6823      	ldr	r3, [r4, #0]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8002382:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	bf0c      	ite	eq
 800238a:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800238e:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8002392:	609a      	str	r2, [r3, #8]
}
 8002394:	4638      	mov	r0, r7
 8002396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002398:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <HAL_ADC_Start_DMA+0x114>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80023a0:	d09f      	beq.n	80022e2 <HAL_ADC_Start_DMA+0x16>
    tmp_hal_status = HAL_ERROR;
 80023a2:	2701      	movs	r7, #1
 80023a4:	e7f6      	b.n	8002394 <HAL_ADC_Start_DMA+0xc8>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80023a6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80023b0:	d0b0      	beq.n	8002314 <HAL_ADC_Start_DMA+0x48>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80023b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023b8:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80023ba:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <HAL_ADC_Start_DMA+0x114>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80023c2:	d0b5      	beq.n	8002330 <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80023c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023ce:	62a3      	str	r3, [r4, #40]	; 0x28
 80023d0:	e7ae      	b.n	8002330 <HAL_ADC_Start_DMA+0x64>
      __HAL_UNLOCK(hadc);
 80023d2:	2300      	movs	r3, #0
 80023d4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80023d8:	e7dc      	b.n	8002394 <HAL_ADC_Start_DMA+0xc8>
    __HAL_LOCK(hadc);
 80023da:	2702      	movs	r7, #2
 80023dc:	e7da      	b.n	8002394 <HAL_ADC_Start_DMA+0xc8>
 80023de:	bf00      	nop
 80023e0:	40012400 	.word	0x40012400
 80023e4:	40012800 	.word	0x40012800
 80023e8:	0800206f 	.word	0x0800206f
 80023ec:	080020c3 	.word	0x080020c3
 80023f0:	080020cf 	.word	0x080020cf

080023f4 <ADC_ConversionStop_Disable>:
{
 80023f4:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80023f6:	6803      	ldr	r3, [r0, #0]
 80023f8:	689a      	ldr	r2, [r3, #8]
 80023fa:	f012 0f01 	tst.w	r2, #1
 80023fe:	d101      	bne.n	8002404 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8002400:	2000      	movs	r0, #0
}
 8002402:	bd38      	pop	{r3, r4, r5, pc}
 8002404:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	f022 0201 	bic.w	r2, r2, #1
 800240c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800240e:	f7ff fe27 	bl	8002060 <HAL_GetTick>
 8002412:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002414:	6823      	ldr	r3, [r4, #0]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f013 0f01 	tst.w	r3, #1
 800241c:	d106      	bne.n	800242c <ADC_ConversionStop_Disable+0x38>
  return HAL_OK;
 800241e:	2000      	movs	r0, #0
 8002420:	e7ef      	b.n	8002402 <ADC_ConversionStop_Disable+0xe>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002422:	6823      	ldr	r3, [r4, #0]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f013 0f01 	tst.w	r3, #1
 800242a:	d013      	beq.n	8002454 <ADC_ConversionStop_Disable+0x60>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800242c:	f7ff fe18 	bl	8002060 <HAL_GetTick>
 8002430:	1b43      	subs	r3, r0, r5
 8002432:	2b02      	cmp	r3, #2
 8002434:	d9f5      	bls.n	8002422 <ADC_ConversionStop_Disable+0x2e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002436:	6823      	ldr	r3, [r4, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f013 0f01 	tst.w	r3, #1
 800243e:	d0f0      	beq.n	8002422 <ADC_ConversionStop_Disable+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002440:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002442:	f043 0310 	orr.w	r3, r3, #16
 8002446:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002448:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8002450:	2001      	movs	r0, #1
 8002452:	e7d6      	b.n	8002402 <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 8002454:	2000      	movs	r0, #0
 8002456:	e7d4      	b.n	8002402 <ADC_ConversionStop_Disable+0xe>

08002458 <HAL_ADC_Init>:
  if(hadc == NULL)
 8002458:	2800      	cmp	r0, #0
 800245a:	d07a      	beq.n	8002552 <HAL_ADC_Init+0xfa>
{
 800245c:	b570      	push	{r4, r5, r6, lr}
 800245e:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002460:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002462:	2b00      	cmp	r3, #0
 8002464:	d04f      	beq.n	8002506 <HAL_ADC_Init+0xae>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002466:	4620      	mov	r0, r4
 8002468:	f7ff ffc4 	bl	80023f4 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800246c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800246e:	f013 0310 	ands.w	r3, r3, #16
 8002472:	d168      	bne.n	8002546 <HAL_ADC_Init+0xee>
 8002474:	2800      	cmp	r0, #0
 8002476:	d166      	bne.n	8002546 <HAL_ADC_Init+0xee>
    ADC_STATE_CLR_SET(hadc->State,
 8002478:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800247a:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800247e:	f022 0202 	bic.w	r2, r2, #2
 8002482:	f042 0202 	orr.w	r2, r2, #2
 8002486:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002488:	7b21      	ldrb	r1, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800248a:	6862      	ldr	r2, [r4, #4]
 800248c:	69e5      	ldr	r5, [r4, #28]
 800248e:	432a      	orrs	r2, r5
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002490:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002494:	68a5      	ldr	r5, [r4, #8]
 8002496:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800249a:	d004      	beq.n	80024a6 <HAL_ADC_Init+0x4e>
 800249c:	2d01      	cmp	r5, #1
 800249e:	bf14      	ite	ne
 80024a0:	461d      	movne	r5, r3
 80024a2:	f44f 7580 	moveq.w	r5, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024a6:	7d26      	ldrb	r6, [r4, #20]
 80024a8:	2e01      	cmp	r6, #1
 80024aa:	d032      	beq.n	8002512 <HAL_ADC_Init+0xba>
      MODIFY_REG(hadc->Instance->CR1,
 80024ac:	6826      	ldr	r6, [r4, #0]
 80024ae:	6871      	ldr	r1, [r6, #4]
 80024b0:	f421 4169 	bic.w	r1, r1, #59648	; 0xe900
 80024b4:	4329      	orrs	r1, r5
 80024b6:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80024b8:	6825      	ldr	r5, [r4, #0]
 80024ba:	68ae      	ldr	r6, [r5, #8]
 80024bc:	4926      	ldr	r1, [pc, #152]	; (8002558 <HAL_ADC_Init+0x100>)
 80024be:	4031      	ands	r1, r6
 80024c0:	4311      	orrs	r1, r2
 80024c2:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80024c4:	68a1      	ldr	r1, [r4, #8]
 80024c6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80024ca:	d001      	beq.n	80024d0 <HAL_ADC_Init+0x78>
 80024cc:	2901      	cmp	r1, #1
 80024ce:	d102      	bne.n	80024d6 <HAL_ADC_Init+0x7e>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80024d0:	6923      	ldr	r3, [r4, #16]
 80024d2:	3b01      	subs	r3, #1
 80024d4:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80024d6:	6825      	ldr	r5, [r4, #0]
 80024d8:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80024da:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 80024de:	430b      	orrs	r3, r1
 80024e0:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80024e2:	6823      	ldr	r3, [r4, #0]
 80024e4:	6899      	ldr	r1, [r3, #8]
 80024e6:	4b1d      	ldr	r3, [pc, #116]	; (800255c <HAL_ADC_Init+0x104>)
 80024e8:	400b      	ands	r3, r1
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d022      	beq.n	8002534 <HAL_ADC_Init+0xdc>
      ADC_STATE_CLR_SET(hadc->State,
 80024ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80024f0:	f023 0312 	bic.w	r3, r3, #18
 80024f4:	f043 0310 	orr.w	r3, r3, #16
 80024f8:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 8002502:	2001      	movs	r0, #1
 8002504:	e024      	b.n	8002550 <HAL_ADC_Init+0xf8>
    ADC_CLEAR_ERRORCODE(hadc);
 8002506:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8002508:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800250c:	f7ff fbe6 	bl	8001cdc <HAL_ADC_MspInit>
 8002510:	e7a9      	b.n	8002466 <HAL_ADC_Init+0xe>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002512:	b931      	cbnz	r1, 8002522 <HAL_ADC_Init+0xca>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002514:	69a1      	ldr	r1, [r4, #24]
 8002516:	3901      	subs	r1, #1
 8002518:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 800251c:	f441 6500 	orr.w	r5, r1, #2048	; 0x800
 8002520:	e7c4      	b.n	80024ac <HAL_ADC_Init+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002522:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002524:	f041 0120 	orr.w	r1, r1, #32
 8002528:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800252a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800252c:	f041 0101 	orr.w	r1, r1, #1
 8002530:	62e1      	str	r1, [r4, #44]	; 0x2c
 8002532:	e7bb      	b.n	80024ac <HAL_ADC_Init+0x54>
      ADC_CLEAR_ERRORCODE(hadc);
 8002534:	2300      	movs	r3, #0
 8002536:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8002538:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800253a:	f023 0303 	bic.w	r3, r3, #3
 800253e:	f043 0301 	orr.w	r3, r3, #1
 8002542:	62a3      	str	r3, [r4, #40]	; 0x28
 8002544:	e004      	b.n	8002550 <HAL_ADC_Init+0xf8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002546:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002548:	f043 0310 	orr.w	r3, r3, #16
 800254c:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 800254e:	2001      	movs	r0, #1
}
 8002550:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002552:	2001      	movs	r0, #1
}
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	ffe1f7fd 	.word	0xffe1f7fd
 800255c:	ff1f0efe 	.word	0xff1f0efe

08002560 <HAL_ADC_Stop_DMA>:
  __HAL_LOCK(hadc);
 8002560:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8002564:	2b01      	cmp	r3, #1
 8002566:	d028      	beq.n	80025ba <HAL_ADC_Stop_DMA+0x5a>
{
 8002568:	b510      	push	{r4, lr}
 800256a:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800256c:	2301      	movs	r3, #1
 800256e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002572:	f7ff ff3f 	bl	80023f4 <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 8002576:	b950      	cbnz	r0, 800258e <HAL_ADC_Stop_DMA+0x2e>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002578:	6822      	ldr	r2, [r4, #0]
 800257a:	6893      	ldr	r3, [r2, #8]
 800257c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002580:	6093      	str	r3, [r2, #8]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002582:	6a22      	ldr	r2, [r4, #32]
 8002584:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d003      	beq.n	8002596 <HAL_ADC_Stop_DMA+0x36>
  __HAL_UNLOCK(hadc);
 800258e:	2300      	movs	r3, #0
 8002590:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8002594:	bd10      	pop	{r4, pc}
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002596:	4610      	mov	r0, r2
 8002598:	f000 f8ed 	bl	8002776 <HAL_DMA_Abort>
      if (tmp_hal_status == HAL_OK)
 800259c:	b940      	cbnz	r0, 80025b0 <HAL_ADC_Stop_DMA+0x50>
        ADC_STATE_CLR_SET(hadc->State,
 800259e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80025a0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025a4:	f023 0301 	bic.w	r3, r3, #1
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80025ae:	e7ee      	b.n	800258e <HAL_ADC_Stop_DMA+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80025b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80025b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025b6:	62a3      	str	r3, [r4, #40]	; 0x28
 80025b8:	e7e9      	b.n	800258e <HAL_ADC_Stop_DMA+0x2e>
  __HAL_LOCK(hadc);
 80025ba:	2002      	movs	r0, #2
}
 80025bc:	4770      	bx	lr
	...

080025c0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025c0:	4907      	ldr	r1, [pc, #28]	; (80025e0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80025c2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025c4:	0203      	lsls	r3, r0, #8
 80025c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025ce:	0412      	lsls	r2, r2, #16
 80025d0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80025dc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80025de:	4770      	bx	lr
 80025e0:	e000ed00 	.word	0xe000ed00

080025e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025e4:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025e6:	4b18      	ldr	r3, [pc, #96]	; (8002648 <HAL_NVIC_SetPriority+0x64>)
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025ee:	f1c3 0c07 	rsb	ip, r3, #7
 80025f2:	f1bc 0f04 	cmp.w	ip, #4
 80025f6:	bf28      	it	cs
 80025f8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025fc:	f103 0e04 	add.w	lr, r3, #4
 8002600:	f1be 0f06 	cmp.w	lr, #6
 8002604:	bf8c      	ite	hi
 8002606:	3b03      	subhi	r3, #3
 8002608:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800260a:	f04f 3eff 	mov.w	lr, #4294967295
 800260e:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002612:	ea21 010c 	bic.w	r1, r1, ip
 8002616:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002618:	fa0e f303 	lsl.w	r3, lr, r3
 800261c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002620:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002622:	2800      	cmp	r0, #0
 8002624:	db09      	blt.n	800263a <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002626:	0109      	lsls	r1, r1, #4
 8002628:	b2c9      	uxtb	r1, r1
 800262a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800262e:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002632:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002636:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800263a:	f000 000f 	and.w	r0, r0, #15
 800263e:	0109      	lsls	r1, r1, #4
 8002640:	b2c9      	uxtb	r1, r1
 8002642:	4b02      	ldr	r3, [pc, #8]	; (800264c <HAL_NVIC_SetPriority+0x68>)
 8002644:	5419      	strb	r1, [r3, r0]
 8002646:	e7f6      	b.n	8002636 <HAL_NVIC_SetPriority+0x52>
 8002648:	e000ed00 	.word	0xe000ed00
 800264c:	e000ed14 	.word	0xe000ed14

08002650 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002650:	2800      	cmp	r0, #0
 8002652:	db08      	blt.n	8002666 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002654:	0942      	lsrs	r2, r0, #5
 8002656:	f000 001f 	and.w	r0, r0, #31
 800265a:	2301      	movs	r3, #1
 800265c:	fa03 f000 	lsl.w	r0, r3, r0
 8002660:	4b01      	ldr	r3, [pc, #4]	; (8002668 <HAL_NVIC_EnableIRQ+0x18>)
 8002662:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002666:	4770      	bx	lr
 8002668:	e000e100 	.word	0xe000e100

0800266c <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800266c:	b360      	cbz	r0, 80026c8 <HAL_DMA_Init+0x5c>
{
 800266e:	b410      	push	{r4}
 8002670:	4602      	mov	r2, r0
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002672:	6801      	ldr	r1, [r0, #0]
 8002674:	4b15      	ldr	r3, [pc, #84]	; (80026cc <HAL_DMA_Init+0x60>)
 8002676:	440b      	add	r3, r1
 8002678:	4815      	ldr	r0, [pc, #84]	; (80026d0 <HAL_DMA_Init+0x64>)
 800267a:	fba0 0303 	umull	r0, r3, r0, r3
 800267e:	091b      	lsrs	r3, r3, #4
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	6413      	str	r3, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002684:	4b13      	ldr	r3, [pc, #76]	; (80026d4 <HAL_DMA_Init+0x68>)
 8002686:	63d3      	str	r3, [r2, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002688:	2302      	movs	r3, #2
 800268a:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800268e:	6808      	ldr	r0, [r1, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002690:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
 8002694:	f020 0030 	bic.w	r0, r0, #48	; 0x30
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002698:	6853      	ldr	r3, [r2, #4]
 800269a:	6894      	ldr	r4, [r2, #8]
 800269c:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800269e:	68d4      	ldr	r4, [r2, #12]
 80026a0:	4323      	orrs	r3, r4
 80026a2:	6914      	ldr	r4, [r2, #16]
 80026a4:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026a6:	6954      	ldr	r4, [r2, #20]
 80026a8:	4323      	orrs	r3, r4
 80026aa:	6994      	ldr	r4, [r2, #24]
 80026ac:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80026ae:	69d4      	ldr	r4, [r2, #28]
 80026b0:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80026b2:	4303      	orrs	r3, r0

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80026b4:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026b6:	2000      	movs	r0, #0
 80026b8:	6390      	str	r0, [r2, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80026ba:	2301      	movs	r3, #1
 80026bc:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80026c0:	f882 0020 	strb.w	r0, [r2, #32]

  return HAL_OK;
}
 80026c4:	bc10      	pop	{r4}
 80026c6:	4770      	bx	lr
    return HAL_ERROR;
 80026c8:	2001      	movs	r0, #1
}
 80026ca:	4770      	bx	lr
 80026cc:	bffdfff8 	.word	0xbffdfff8
 80026d0:	cccccccd 	.word	0xcccccccd
 80026d4:	40020000 	.word	0x40020000

080026d8 <HAL_DMA_Start_IT>:

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80026d8:	f890 c020 	ldrb.w	ip, [r0, #32]
 80026dc:	f1bc 0f01 	cmp.w	ip, #1
 80026e0:	d047      	beq.n	8002772 <HAL_DMA_Start_IT+0x9a>
 80026e2:	f04f 0c01 	mov.w	ip, #1
 80026e6:	f880 c020 	strb.w	ip, [r0, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026ea:	f890 c021 	ldrb.w	ip, [r0, #33]	; 0x21
 80026ee:	fa5f fc8c 	uxtb.w	ip, ip
 80026f2:	f1bc 0f01 	cmp.w	ip, #1
 80026f6:	d004      	beq.n	8002702 <HAL_DMA_Start_IT+0x2a>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80026f8:	2300      	movs	r3, #0
 80026fa:	f880 3020 	strb.w	r3, [r0, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80026fe:	2002      	movs	r0, #2
 8002700:	4770      	bx	lr
{
 8002702:	b470      	push	{r4, r5, r6}
    hdma->State = HAL_DMA_STATE_BUSY;
 8002704:	2402      	movs	r4, #2
 8002706:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800270a:	2400      	movs	r4, #0
 800270c:	6384      	str	r4, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 800270e:	6805      	ldr	r5, [r0, #0]
 8002710:	682c      	ldr	r4, [r5, #0]
 8002712:	f024 0401 	bic.w	r4, r4, #1
 8002716:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002718:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800271a:	2401      	movs	r4, #1
 800271c:	6c06      	ldr	r6, [r0, #64]	; 0x40
 800271e:	40b4      	lsls	r4, r6
 8002720:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002722:	6804      	ldr	r4, [r0, #0]
 8002724:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002726:	6843      	ldr	r3, [r0, #4]
 8002728:	2b10      	cmp	r3, #16
 800272a:	d012      	beq.n	8002752 <HAL_DMA_Start_IT+0x7a>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800272c:	6803      	ldr	r3, [r0, #0]
 800272e:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002730:	6803      	ldr	r3, [r0, #0]
 8002732:	60da      	str	r2, [r3, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8002734:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002736:	b18b      	cbz	r3, 800275c <HAL_DMA_Start_IT+0x84>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002738:	6802      	ldr	r2, [r0, #0]
 800273a:	6813      	ldr	r3, [r2, #0]
 800273c:	f043 030e 	orr.w	r3, r3, #14
 8002740:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8002742:	6802      	ldr	r2, [r0, #0]
 8002744:	6813      	ldr	r3, [r2, #0]
 8002746:	f043 0301 	orr.w	r3, r3, #1
 800274a:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800274c:	2000      	movs	r0, #0
}
 800274e:	bc70      	pop	{r4, r5, r6}
 8002750:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8002752:	6803      	ldr	r3, [r0, #0]
 8002754:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002756:	6803      	ldr	r3, [r0, #0]
 8002758:	60d9      	str	r1, [r3, #12]
 800275a:	e7eb      	b.n	8002734 <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800275c:	6802      	ldr	r2, [r0, #0]
 800275e:	6813      	ldr	r3, [r2, #0]
 8002760:	f023 0304 	bic.w	r3, r3, #4
 8002764:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002766:	6802      	ldr	r2, [r0, #0]
 8002768:	6813      	ldr	r3, [r2, #0]
 800276a:	f043 030a 	orr.w	r3, r3, #10
 800276e:	6013      	str	r3, [r2, #0]
 8002770:	e7e7      	b.n	8002742 <HAL_DMA_Start_IT+0x6a>
  __HAL_LOCK(hdma);
 8002772:	2002      	movs	r0, #2
}
 8002774:	4770      	bx	lr

08002776 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002776:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d006      	beq.n	800278e <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002780:	2304      	movs	r3, #4
 8002782:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8002784:	2300      	movs	r3, #0
 8002786:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 800278a:	2001      	movs	r0, #1
 800278c:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800278e:	6802      	ldr	r2, [r0, #0]
 8002790:	6813      	ldr	r3, [r2, #0]
 8002792:	f023 030e 	bic.w	r3, r3, #14
 8002796:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002798:	6802      	ldr	r2, [r0, #0]
 800279a:	6813      	ldr	r3, [r2, #0]
 800279c:	f023 0301 	bic.w	r3, r3, #1
 80027a0:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80027a2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80027a4:	2201      	movs	r2, #1
 80027a6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	604b      	str	r3, [r1, #4]
  hdma->State = HAL_DMA_STATE_READY;
 80027ae:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  __HAL_UNLOCK(hdma);      
 80027b2:	2300      	movs	r3, #0
 80027b4:	f880 3020 	strb.w	r3, [r0, #32]
  return status; 
 80027b8:	4618      	mov	r0, r3
}
 80027ba:	4770      	bx	lr

080027bc <HAL_DMA_Abort_IT>:
{  
 80027bc:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80027be:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d003      	beq.n	80027d0 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027c8:	2304      	movs	r3, #4
 80027ca:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80027cc:	2001      	movs	r0, #1
}
 80027ce:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027d0:	6802      	ldr	r2, [r0, #0]
 80027d2:	6813      	ldr	r3, [r2, #0]
 80027d4:	f023 030e 	bic.w	r3, r3, #14
 80027d8:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80027da:	6802      	ldr	r2, [r0, #0]
 80027dc:	6813      	ldr	r3, [r2, #0]
 80027de:	f023 0301 	bic.w	r3, r3, #1
 80027e2:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80027e4:	6803      	ldr	r3, [r0, #0]
 80027e6:	4a19      	ldr	r2, [pc, #100]	; (800284c <HAL_DMA_Abort_IT+0x90>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d013      	beq.n	8002814 <HAL_DMA_Abort_IT+0x58>
 80027ec:	3214      	adds	r2, #20
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d01e      	beq.n	8002830 <HAL_DMA_Abort_IT+0x74>
 80027f2:	3214      	adds	r2, #20
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d01d      	beq.n	8002834 <HAL_DMA_Abort_IT+0x78>
 80027f8:	3214      	adds	r2, #20
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d01d      	beq.n	800283a <HAL_DMA_Abort_IT+0x7e>
 80027fe:	3214      	adds	r2, #20
 8002800:	4293      	cmp	r3, r2
 8002802:	d01d      	beq.n	8002840 <HAL_DMA_Abort_IT+0x84>
 8002804:	3214      	adds	r2, #20
 8002806:	4293      	cmp	r3, r2
 8002808:	bf0c      	ite	eq
 800280a:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 800280e:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8002812:	e000      	b.n	8002816 <HAL_DMA_Abort_IT+0x5a>
 8002814:	2301      	movs	r3, #1
 8002816:	4a0e      	ldr	r2, [pc, #56]	; (8002850 <HAL_DMA_Abort_IT+0x94>)
 8002818:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800281a:	2301      	movs	r3, #1
 800281c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002820:	2300      	movs	r3, #0
 8002822:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002826:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002828:	b16b      	cbz	r3, 8002846 <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 800282a:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800282c:	2000      	movs	r0, #0
 800282e:	e7ce      	b.n	80027ce <HAL_DMA_Abort_IT+0x12>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002830:	2310      	movs	r3, #16
 8002832:	e7f0      	b.n	8002816 <HAL_DMA_Abort_IT+0x5a>
 8002834:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002838:	e7ed      	b.n	8002816 <HAL_DMA_Abort_IT+0x5a>
 800283a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800283e:	e7ea      	b.n	8002816 <HAL_DMA_Abort_IT+0x5a>
 8002840:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002844:	e7e7      	b.n	8002816 <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 8002846:	2000      	movs	r0, #0
 8002848:	e7c1      	b.n	80027ce <HAL_DMA_Abort_IT+0x12>
 800284a:	bf00      	nop
 800284c:	40020008 	.word	0x40020008
 8002850:	40020000 	.word	0x40020000

08002854 <HAL_DMA_IRQHandler>:
{
 8002854:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002856:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002858:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800285a:	6804      	ldr	r4, [r0, #0]
 800285c:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800285e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002860:	2304      	movs	r3, #4
 8002862:	408b      	lsls	r3, r1
 8002864:	4213      	tst	r3, r2
 8002866:	d034      	beq.n	80028d2 <HAL_DMA_IRQHandler+0x7e>
 8002868:	f015 0f04 	tst.w	r5, #4
 800286c:	d031      	beq.n	80028d2 <HAL_DMA_IRQHandler+0x7e>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800286e:	6823      	ldr	r3, [r4, #0]
 8002870:	f013 0f20 	tst.w	r3, #32
 8002874:	d103      	bne.n	800287e <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002876:	6823      	ldr	r3, [r4, #0]
 8002878:	f023 0304 	bic.w	r3, r3, #4
 800287c:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800287e:	6803      	ldr	r3, [r0, #0]
 8002880:	4a42      	ldr	r2, [pc, #264]	; (800298c <HAL_DMA_IRQHandler+0x138>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d013      	beq.n	80028ae <HAL_DMA_IRQHandler+0x5a>
 8002886:	3214      	adds	r2, #20
 8002888:	4293      	cmp	r3, r2
 800288a:	d017      	beq.n	80028bc <HAL_DMA_IRQHandler+0x68>
 800288c:	3214      	adds	r2, #20
 800288e:	4293      	cmp	r3, r2
 8002890:	d016      	beq.n	80028c0 <HAL_DMA_IRQHandler+0x6c>
 8002892:	3214      	adds	r2, #20
 8002894:	4293      	cmp	r3, r2
 8002896:	d016      	beq.n	80028c6 <HAL_DMA_IRQHandler+0x72>
 8002898:	3214      	adds	r2, #20
 800289a:	4293      	cmp	r3, r2
 800289c:	d016      	beq.n	80028cc <HAL_DMA_IRQHandler+0x78>
 800289e:	3214      	adds	r2, #20
 80028a0:	4293      	cmp	r3, r2
 80028a2:	bf0c      	ite	eq
 80028a4:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80028a8:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80028ac:	e000      	b.n	80028b0 <HAL_DMA_IRQHandler+0x5c>
 80028ae:	2304      	movs	r3, #4
 80028b0:	4a37      	ldr	r2, [pc, #220]	; (8002990 <HAL_DMA_IRQHandler+0x13c>)
 80028b2:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80028b4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80028b6:	b103      	cbz	r3, 80028ba <HAL_DMA_IRQHandler+0x66>
      hdma->XferHalfCpltCallback(hdma);
 80028b8:	4798      	blx	r3
}
 80028ba:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80028bc:	2340      	movs	r3, #64	; 0x40
 80028be:	e7f7      	b.n	80028b0 <HAL_DMA_IRQHandler+0x5c>
 80028c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028c4:	e7f4      	b.n	80028b0 <HAL_DMA_IRQHandler+0x5c>
 80028c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028ca:	e7f1      	b.n	80028b0 <HAL_DMA_IRQHandler+0x5c>
 80028cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80028d0:	e7ee      	b.n	80028b0 <HAL_DMA_IRQHandler+0x5c>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80028d2:	2302      	movs	r3, #2
 80028d4:	408b      	lsls	r3, r1
 80028d6:	4213      	tst	r3, r2
 80028d8:	d03b      	beq.n	8002952 <HAL_DMA_IRQHandler+0xfe>
 80028da:	f015 0f02 	tst.w	r5, #2
 80028de:	d038      	beq.n	8002952 <HAL_DMA_IRQHandler+0xfe>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028e0:	6823      	ldr	r3, [r4, #0]
 80028e2:	f013 0f20 	tst.w	r3, #32
 80028e6:	d106      	bne.n	80028f6 <HAL_DMA_IRQHandler+0xa2>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80028e8:	6823      	ldr	r3, [r4, #0]
 80028ea:	f023 030a 	bic.w	r3, r3, #10
 80028ee:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80028f0:	2301      	movs	r3, #1
 80028f2:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80028f6:	6803      	ldr	r3, [r0, #0]
 80028f8:	4a24      	ldr	r2, [pc, #144]	; (800298c <HAL_DMA_IRQHandler+0x138>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d013      	beq.n	8002926 <HAL_DMA_IRQHandler+0xd2>
 80028fe:	3214      	adds	r2, #20
 8002900:	4293      	cmp	r3, r2
 8002902:	d01b      	beq.n	800293c <HAL_DMA_IRQHandler+0xe8>
 8002904:	3214      	adds	r2, #20
 8002906:	4293      	cmp	r3, r2
 8002908:	d01a      	beq.n	8002940 <HAL_DMA_IRQHandler+0xec>
 800290a:	3214      	adds	r2, #20
 800290c:	4293      	cmp	r3, r2
 800290e:	d01a      	beq.n	8002946 <HAL_DMA_IRQHandler+0xf2>
 8002910:	3214      	adds	r2, #20
 8002912:	4293      	cmp	r3, r2
 8002914:	d01a      	beq.n	800294c <HAL_DMA_IRQHandler+0xf8>
 8002916:	3214      	adds	r2, #20
 8002918:	4293      	cmp	r3, r2
 800291a:	bf0c      	ite	eq
 800291c:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8002920:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8002924:	e000      	b.n	8002928 <HAL_DMA_IRQHandler+0xd4>
 8002926:	2302      	movs	r3, #2
 8002928:	4a19      	ldr	r2, [pc, #100]	; (8002990 <HAL_DMA_IRQHandler+0x13c>)
 800292a:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 800292c:	2300      	movs	r3, #0
 800292e:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8002932:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0c0      	beq.n	80028ba <HAL_DMA_IRQHandler+0x66>
      hdma->XferCpltCallback(hdma);
 8002938:	4798      	blx	r3
 800293a:	e7be      	b.n	80028ba <HAL_DMA_IRQHandler+0x66>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800293c:	2320      	movs	r3, #32
 800293e:	e7f3      	b.n	8002928 <HAL_DMA_IRQHandler+0xd4>
 8002940:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002944:	e7f0      	b.n	8002928 <HAL_DMA_IRQHandler+0xd4>
 8002946:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800294a:	e7ed      	b.n	8002928 <HAL_DMA_IRQHandler+0xd4>
 800294c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002950:	e7ea      	b.n	8002928 <HAL_DMA_IRQHandler+0xd4>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002952:	2308      	movs	r3, #8
 8002954:	fa03 f101 	lsl.w	r1, r3, r1
 8002958:	4211      	tst	r1, r2
 800295a:	d0ae      	beq.n	80028ba <HAL_DMA_IRQHandler+0x66>
 800295c:	f015 0f08 	tst.w	r5, #8
 8002960:	d0ab      	beq.n	80028ba <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002962:	6823      	ldr	r3, [r4, #0]
 8002964:	f023 030e 	bic.w	r3, r3, #14
 8002968:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800296a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800296c:	2301      	movs	r3, #1
 800296e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002970:	fa03 f202 	lsl.w	r2, r3, r2
 8002974:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002976:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8002978:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800297c:	2300      	movs	r3, #0
 800297e:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8002982:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002984:	2b00      	cmp	r3, #0
 8002986:	d098      	beq.n	80028ba <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 8002988:	4798      	blx	r3
  return;
 800298a:	e796      	b.n	80028ba <HAL_DMA_IRQHandler+0x66>
 800298c:	40020008 	.word	0x40020008
 8002990:	40020000 	.word	0x40020000

08002994 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002994:	4b14      	ldr	r3, [pc, #80]	; (80029e8 <FLASH_SetErrorCode+0x54>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	f013 0310 	ands.w	r3, r3, #16
 800299c:	d005      	beq.n	80029aa <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800299e:	4a13      	ldr	r2, [pc, #76]	; (80029ec <FLASH_SetErrorCode+0x58>)
 80029a0:	69d3      	ldr	r3, [r2, #28]
 80029a2:	f043 0302 	orr.w	r3, r3, #2
 80029a6:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80029a8:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80029aa:	4a0f      	ldr	r2, [pc, #60]	; (80029e8 <FLASH_SetErrorCode+0x54>)
 80029ac:	68d2      	ldr	r2, [r2, #12]
 80029ae:	f012 0f04 	tst.w	r2, #4
 80029b2:	d006      	beq.n	80029c2 <FLASH_SetErrorCode+0x2e>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80029b4:	490d      	ldr	r1, [pc, #52]	; (80029ec <FLASH_SetErrorCode+0x58>)
 80029b6:	69ca      	ldr	r2, [r1, #28]
 80029b8:	f042 0201 	orr.w	r2, r2, #1
 80029bc:	61ca      	str	r2, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80029be:	f043 0304 	orr.w	r3, r3, #4
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80029c2:	4a09      	ldr	r2, [pc, #36]	; (80029e8 <FLASH_SetErrorCode+0x54>)
 80029c4:	69d2      	ldr	r2, [r2, #28]
 80029c6:	f012 0f01 	tst.w	r2, #1
 80029ca:	d009      	beq.n	80029e0 <FLASH_SetErrorCode+0x4c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80029cc:	4907      	ldr	r1, [pc, #28]	; (80029ec <FLASH_SetErrorCode+0x58>)
 80029ce:	69ca      	ldr	r2, [r1, #28]
 80029d0:	f042 0204 	orr.w	r2, r2, #4
 80029d4:	61ca      	str	r2, [r1, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80029d6:	4904      	ldr	r1, [pc, #16]	; (80029e8 <FLASH_SetErrorCode+0x54>)
 80029d8:	69ca      	ldr	r2, [r1, #28]
 80029da:	f022 0201 	bic.w	r2, r2, #1
 80029de:	61ca      	str	r2, [r1, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80029e0:	4a01      	ldr	r2, [pc, #4]	; (80029e8 <FLASH_SetErrorCode+0x54>)
 80029e2:	60d3      	str	r3, [r2, #12]
}  
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	40022000 	.word	0x40022000
 80029ec:	20001248 	.word	0x20001248

080029f0 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80029f0:	4b08      	ldr	r3, [pc, #32]	; (8002a14 <HAL_FLASH_Unlock+0x24>)
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80029f8:	d009      	beq.n	8002a0e <HAL_FLASH_Unlock+0x1e>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80029fa:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <HAL_FLASH_Unlock+0x24>)
 80029fc:	4a06      	ldr	r2, [pc, #24]	; (8002a18 <HAL_FLASH_Unlock+0x28>)
 80029fe:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002a00:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8002a04:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002a06:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8002a08:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 8002a0c:	4770      	bx	lr
 8002a0e:	2000      	movs	r0, #0
}
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	40022000 	.word	0x40022000
 8002a18:	45670123 	.word	0x45670123

08002a1c <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002a1c:	4a03      	ldr	r2, [pc, #12]	; (8002a2c <HAL_FLASH_Lock+0x10>)
 8002a1e:	6913      	ldr	r3, [r2, #16]
 8002a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a24:	6113      	str	r3, [r2, #16]
}
 8002a26:	2000      	movs	r0, #0
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	40022000 	.word	0x40022000

08002a30 <FLASH_WaitForLastOperation>:
{
 8002a30:	b570      	push	{r4, r5, r6, lr}
 8002a32:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002a34:	f7ff fb14 	bl	8002060 <HAL_GetTick>
 8002a38:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002a3a:	4d17      	ldr	r5, [pc, #92]	; (8002a98 <FLASH_WaitForLastOperation+0x68>)
 8002a3c:	68eb      	ldr	r3, [r5, #12]
 8002a3e:	f013 0f01 	tst.w	r3, #1
 8002a42:	d00a      	beq.n	8002a5a <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8002a44:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002a48:	d0f8      	beq.n	8002a3c <FLASH_WaitForLastOperation+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002a4a:	b31c      	cbz	r4, 8002a94 <FLASH_WaitForLastOperation+0x64>
 8002a4c:	f7ff fb08 	bl	8002060 <HAL_GetTick>
 8002a50:	1b80      	subs	r0, r0, r6
 8002a52:	42a0      	cmp	r0, r4
 8002a54:	d9f2      	bls.n	8002a3c <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 8002a56:	2003      	movs	r0, #3
 8002a58:	e01b      	b.n	8002a92 <FLASH_WaitForLastOperation+0x62>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002a5a:	4b0f      	ldr	r3, [pc, #60]	; (8002a98 <FLASH_WaitForLastOperation+0x68>)
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	f013 0f20 	tst.w	r3, #32
 8002a62:	d002      	beq.n	8002a6a <FLASH_WaitForLastOperation+0x3a>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002a64:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <FLASH_WaitForLastOperation+0x68>)
 8002a66:	2220      	movs	r2, #32
 8002a68:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002a6a:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <FLASH_WaitForLastOperation+0x68>)
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	f013 0f10 	tst.w	r3, #16
 8002a72:	d10b      	bne.n	8002a8c <FLASH_WaitForLastOperation+0x5c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002a74:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <FLASH_WaitForLastOperation+0x68>)
 8002a76:	69db      	ldr	r3, [r3, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002a78:	f013 0f01 	tst.w	r3, #1
 8002a7c:	d106      	bne.n	8002a8c <FLASH_WaitForLastOperation+0x5c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002a7e:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <FLASH_WaitForLastOperation+0x68>)
 8002a80:	68db      	ldr	r3, [r3, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002a82:	f013 0f04 	tst.w	r3, #4
 8002a86:	d101      	bne.n	8002a8c <FLASH_WaitForLastOperation+0x5c>
  return HAL_OK;
 8002a88:	2000      	movs	r0, #0
 8002a8a:	e002      	b.n	8002a92 <FLASH_WaitForLastOperation+0x62>
    FLASH_SetErrorCode();
 8002a8c:	f7ff ff82 	bl	8002994 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002a90:	2001      	movs	r0, #1
}
 8002a92:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_TIMEOUT;
 8002a94:	2003      	movs	r0, #3
 8002a96:	e7fc      	b.n	8002a92 <FLASH_WaitForLastOperation+0x62>
 8002a98:	40022000 	.word	0x40022000

08002a9c <HAL_FLASH_Program>:
{
 8002a9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002aa0:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 8002aa2:	4b26      	ldr	r3, [pc, #152]	; (8002b3c <HAL_FLASH_Program+0xa0>)
 8002aa4:	7e1b      	ldrb	r3, [r3, #24]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d045      	beq.n	8002b36 <HAL_FLASH_Program+0x9a>
 8002aaa:	4604      	mov	r4, r0
 8002aac:	460d      	mov	r5, r1
 8002aae:	4690      	mov	r8, r2
 8002ab0:	4b22      	ldr	r3, [pc, #136]	; (8002b3c <HAL_FLASH_Program+0xa0>)
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002ab6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002aba:	f7ff ffb9 	bl	8002a30 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8002abe:	4603      	mov	r3, r0
 8002ac0:	bb80      	cbnz	r0, 8002b24 <HAL_FLASH_Program+0x88>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002ac2:	2c01      	cmp	r4, #1
 8002ac4:	d034      	beq.n	8002b30 <HAL_FLASH_Program+0x94>
      nbiterations = 4U;
 8002ac6:	2c02      	cmp	r4, #2
 8002ac8:	bf0c      	ite	eq
 8002aca:	f04f 0902 	moveq.w	r9, #2
 8002ace:	f04f 0904 	movne.w	r9, #4
    for (index = 0U; index < nbiterations; index++)
 8002ad2:	eb05 0949 	add.w	r9, r5, r9, lsl #1
      nbiterations = 4U;
 8002ad6:	2400      	movs	r4, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002ad8:	f8df b060 	ldr.w	fp, [pc, #96]	; 8002b3c <HAL_FLASH_Program+0xa0>
 8002adc:	46a2      	mov	sl, r4
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002ade:	4e18      	ldr	r6, [pc, #96]	; (8002b40 <HAL_FLASH_Program+0xa4>)
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002ae0:	f1c4 0120 	rsb	r1, r4, #32
 8002ae4:	f1a4 0220 	sub.w	r2, r4, #32
 8002ae8:	fa28 f304 	lsr.w	r3, r8, r4
 8002aec:	fa07 f101 	lsl.w	r1, r7, r1
 8002af0:	430b      	orrs	r3, r1
 8002af2:	fa27 f202 	lsr.w	r2, r7, r2
 8002af6:	4313      	orrs	r3, r2
 8002af8:	b29b      	uxth	r3, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002afa:	f8cb a01c 	str.w	sl, [fp, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002afe:	6932      	ldr	r2, [r6, #16]
 8002b00:	f042 0201 	orr.w	r2, r2, #1
 8002b04:	6132      	str	r2, [r6, #16]
  *(__IO uint16_t*)Address = Data;
 8002b06:	802b      	strh	r3, [r5, #0]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002b08:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b0c:	f7ff ff90 	bl	8002a30 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002b10:	6933      	ldr	r3, [r6, #16]
 8002b12:	f023 0301 	bic.w	r3, r3, #1
 8002b16:	6133      	str	r3, [r6, #16]
      if (status != HAL_OK)
 8002b18:	4603      	mov	r3, r0
 8002b1a:	b918      	cbnz	r0, 8002b24 <HAL_FLASH_Program+0x88>
    for (index = 0U; index < nbiterations; index++)
 8002b1c:	3410      	adds	r4, #16
 8002b1e:	3502      	adds	r5, #2
 8002b20:	454d      	cmp	r5, r9
 8002b22:	d1dd      	bne.n	8002ae0 <HAL_FLASH_Program+0x44>
  __HAL_UNLOCK(&pFlash);
 8002b24:	4a05      	ldr	r2, [pc, #20]	; (8002b3c <HAL_FLASH_Program+0xa0>)
 8002b26:	2100      	movs	r1, #0
 8002b28:	7611      	strb	r1, [r2, #24]
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      nbiterations = 1U;
 8002b30:	f04f 0901 	mov.w	r9, #1
 8002b34:	e7cd      	b.n	8002ad2 <HAL_FLASH_Program+0x36>
  __HAL_LOCK(&pFlash);
 8002b36:	2302      	movs	r3, #2
 8002b38:	e7f7      	b.n	8002b2a <HAL_FLASH_Program+0x8e>
 8002b3a:	bf00      	nop
 8002b3c:	20001248 	.word	0x20001248
 8002b40:	40022000 	.word	0x40022000

08002b44 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002b44:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <FLASH_PageErase+0x1c>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002b4a:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <FLASH_PageErase+0x20>)
 8002b4c:	691a      	ldr	r2, [r3, #16]
 8002b4e:	f042 0202 	orr.w	r2, r2, #2
 8002b52:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002b54:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002b56:	691a      	ldr	r2, [r3, #16]
 8002b58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b5c:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002b5e:	4770      	bx	lr
 8002b60:	20001248 	.word	0x20001248
 8002b64:	40022000 	.word	0x40022000

08002b68 <HAL_FLASHEx_Erase>:
  __HAL_LOCK(&pFlash);
 8002b68:	4b2f      	ldr	r3, [pc, #188]	; (8002c28 <HAL_FLASHEx_Erase+0xc0>)
 8002b6a:	7e1b      	ldrb	r3, [r3, #24]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d058      	beq.n	8002c22 <HAL_FLASHEx_Erase+0xba>
{
 8002b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b74:	4605      	mov	r5, r0
 8002b76:	460f      	mov	r7, r1
  __HAL_LOCK(&pFlash);
 8002b78:	4b2b      	ldr	r3, [pc, #172]	; (8002c28 <HAL_FLASHEx_Erase+0xc0>)
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002b7e:	6803      	ldr	r3, [r0, #0]
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d026      	beq.n	8002bd2 <HAL_FLASHEx_Erase+0x6a>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002b84:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b88:	f7ff ff52 	bl	8002a30 <FLASH_WaitForLastOperation>
 8002b8c:	2800      	cmp	r0, #0
 8002b8e:	d13f      	bne.n	8002c10 <HAL_FLASHEx_Erase+0xa8>
        *PageError = 0xFFFFFFFFU;
 8002b90:	f04f 33ff 	mov.w	r3, #4294967295
 8002b94:	603b      	str	r3, [r7, #0]
        for(address = pEraseInit->PageAddress;
 8002b96:	68ac      	ldr	r4, [r5, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002b98:	68eb      	ldr	r3, [r5, #12]
 8002b9a:	eb04 2383 	add.w	r3, r4, r3, lsl #10
        for(address = pEraseInit->PageAddress;
 8002b9e:	429c      	cmp	r4, r3
 8002ba0:	d23d      	bcs.n	8002c1e <HAL_FLASHEx_Erase+0xb6>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002ba2:	f24c 3850 	movw	r8, #50000	; 0xc350
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002ba6:	4e21      	ldr	r6, [pc, #132]	; (8002c2c <HAL_FLASHEx_Erase+0xc4>)
          FLASH_PageErase(address);
 8002ba8:	4620      	mov	r0, r4
 8002baa:	f7ff ffcb 	bl	8002b44 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002bae:	4640      	mov	r0, r8
 8002bb0:	f7ff ff3e 	bl	8002a30 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002bb4:	6933      	ldr	r3, [r6, #16]
 8002bb6:	f023 0302 	bic.w	r3, r3, #2
 8002bba:	6133      	str	r3, [r6, #16]
          if (status != HAL_OK)
 8002bbc:	4601      	mov	r1, r0
 8002bbe:	bb28      	cbnz	r0, 8002c0c <HAL_FLASHEx_Erase+0xa4>
            address += FLASH_PAGE_SIZE)
 8002bc0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002bc4:	68ea      	ldr	r2, [r5, #12]
 8002bc6:	68ab      	ldr	r3, [r5, #8]
 8002bc8:	eb03 2382 	add.w	r3, r3, r2, lsl #10
        for(address = pEraseInit->PageAddress;
 8002bcc:	42a3      	cmp	r3, r4
 8002bce:	d8eb      	bhi.n	8002ba8 <HAL_FLASHEx_Erase+0x40>
 8002bd0:	e01f      	b.n	8002c12 <HAL_FLASHEx_Erase+0xaa>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002bd2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002bd6:	f7ff ff2b 	bl	8002a30 <FLASH_WaitForLastOperation>
 8002bda:	b108      	cbz	r0, 8002be0 <HAL_FLASHEx_Erase+0x78>
  HAL_StatusTypeDef status = HAL_ERROR;
 8002bdc:	2101      	movs	r1, #1
 8002bde:	e018      	b.n	8002c12 <HAL_FLASHEx_Erase+0xaa>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002be0:	4b11      	ldr	r3, [pc, #68]	; (8002c28 <HAL_FLASHEx_Erase+0xc0>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002be6:	4c11      	ldr	r4, [pc, #68]	; (8002c2c <HAL_FLASHEx_Erase+0xc4>)
 8002be8:	6923      	ldr	r3, [r4, #16]
 8002bea:	f043 0304 	orr.w	r3, r3, #4
 8002bee:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002bf0:	6923      	ldr	r3, [r4, #16]
 8002bf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bf6:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002bf8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002bfc:	f7ff ff18 	bl	8002a30 <FLASH_WaitForLastOperation>
 8002c00:	4601      	mov	r1, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002c02:	6923      	ldr	r3, [r4, #16]
 8002c04:	f023 0304 	bic.w	r3, r3, #4
 8002c08:	6123      	str	r3, [r4, #16]
 8002c0a:	e002      	b.n	8002c12 <HAL_FLASHEx_Erase+0xaa>
            *PageError = address;
 8002c0c:	603c      	str	r4, [r7, #0]
            break;
 8002c0e:	e000      	b.n	8002c12 <HAL_FLASHEx_Erase+0xaa>
  HAL_StatusTypeDef status = HAL_ERROR;
 8002c10:	2101      	movs	r1, #1
  __HAL_UNLOCK(&pFlash);
 8002c12:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <HAL_FLASHEx_Erase+0xc0>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	761a      	strb	r2, [r3, #24]
}
 8002c18:	4608      	mov	r0, r1
 8002c1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_ERROR;
 8002c1e:	2101      	movs	r1, #1
 8002c20:	e7f7      	b.n	8002c12 <HAL_FLASHEx_Erase+0xaa>
  __HAL_LOCK(&pFlash);
 8002c22:	2102      	movs	r1, #2
}
 8002c24:	4608      	mov	r0, r1
 8002c26:	4770      	bx	lr
 8002c28:	20001248 	.word	0x20001248
 8002c2c:	40022000 	.word	0x40022000

08002c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c34:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c36:	f8d1 9000 	ldr.w	r9, [r1]
 8002c3a:	f1b9 0f00 	cmp.w	r9, #0
 8002c3e:	f000 811f 	beq.w	8002e80 <HAL_GPIO_Init+0x250>
 8002c42:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8002c44:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c46:	4e90      	ldr	r6, [pc, #576]	; (8002e88 <HAL_GPIO_Init+0x258>)
        {
          SET_BIT(EXTI->IMR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c48:	4c90      	ldr	r4, [pc, #576]	; (8002e8c <HAL_GPIO_Init+0x25c>)
      switch (GPIO_Init->Mode)
 8002c4a:	4d91      	ldr	r5, [pc, #580]	; (8002e90 <HAL_GPIO_Init+0x260>)
 8002c4c:	f8df e244 	ldr.w	lr, [pc, #580]	; 8002e94 <HAL_GPIO_Init+0x264>
 8002c50:	4694      	mov	ip, r2
 8002c52:	e0ba      	b.n	8002dca <HAL_GPIO_Init+0x19a>
 8002c54:	f04f 0c00 	mov.w	ip, #0
 8002c58:	e025      	b.n	8002ca6 <HAL_GPIO_Init+0x76>
 8002c5a:	45a9      	cmp	r9, r5
 8002c5c:	d00f      	beq.n	8002c7e <HAL_GPIO_Init+0x4e>
 8002c5e:	d906      	bls.n	8002c6e <HAL_GPIO_Init+0x3e>
 8002c60:	45f1      	cmp	r9, lr
 8002c62:	d00c      	beq.n	8002c7e <HAL_GPIO_Init+0x4e>
 8002c64:	f8df a230 	ldr.w	sl, [pc, #560]	; 8002e98 <HAL_GPIO_Init+0x268>
 8002c68:	45d1      	cmp	r9, sl
 8002c6a:	d008      	beq.n	8002c7e <HAL_GPIO_Init+0x4e>
 8002c6c:	e01b      	b.n	8002ca6 <HAL_GPIO_Init+0x76>
 8002c6e:	f8df a22c 	ldr.w	sl, [pc, #556]	; 8002e9c <HAL_GPIO_Init+0x26c>
 8002c72:	45d1      	cmp	r9, sl
 8002c74:	d003      	beq.n	8002c7e <HAL_GPIO_Init+0x4e>
 8002c76:	f50a 2a70 	add.w	sl, sl, #983040	; 0xf0000
 8002c7a:	45d1      	cmp	r9, sl
 8002c7c:	d10f      	bne.n	8002c9e <HAL_GPIO_Init+0x6e>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c7e:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8002c82:	f1bc 0f00 	cmp.w	ip, #0
 8002c86:	f000 80ef 	beq.w	8002e68 <HAL_GPIO_Init+0x238>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c8a:	f1bc 0f01 	cmp.w	ip, #1
            GPIOx->BSRR = ioposition;
 8002c8e:	bf0c      	ite	eq
 8002c90:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8002c94:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c98:	f04f 0c08 	mov.w	ip, #8
 8002c9c:	e003      	b.n	8002ca6 <HAL_GPIO_Init+0x76>
      switch (GPIO_Init->Mode)
 8002c9e:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
 8002ca2:	45d1      	cmp	r9, sl
 8002ca4:	d0eb      	beq.n	8002c7e <HAL_GPIO_Init+0x4e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ca6:	2fff      	cmp	r7, #255	; 0xff
 8002ca8:	bf99      	ittee	ls
 8002caa:	4681      	movls	r9, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002cac:	4692      	movls	sl, r2
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002cae:	f100 0904 	addhi.w	r9, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002cb2:	f1a2 0a20 	subhi.w	sl, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002cb6:	f8d9 8000 	ldr.w	r8, [r9]
 8002cba:	f04f 0b0f 	mov.w	fp, #15
 8002cbe:	fa0b fb0a 	lsl.w	fp, fp, sl
 8002cc2:	ea28 080b 	bic.w	r8, r8, fp
 8002cc6:	fa0c fa0a 	lsl.w	sl, ip, sl
 8002cca:	ea48 080a 	orr.w	r8, r8, sl
 8002cce:	f8c9 8000 	str.w	r8, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cd2:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002cd6:	f018 5f80 	tst.w	r8, #268435456	; 0x10000000
 8002cda:	d06f      	beq.n	8002dbc <HAL_GPIO_Init+0x18c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002cdc:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8002ce0:	f048 0801 	orr.w	r8, r8, #1
 8002ce4:	f8c6 8018 	str.w	r8, [r6, #24]
 8002ce8:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8002cec:	f008 0801 	and.w	r8, r8, #1
 8002cf0:	f8cd 8004 	str.w	r8, [sp, #4]
 8002cf4:	f8dd 8004 	ldr.w	r8, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8002cf8:	f023 0803 	bic.w	r8, r3, #3
 8002cfc:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8002d00:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8002d04:	f8d8 a008 	ldr.w	sl, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d08:	f003 0903 	and.w	r9, r3, #3
 8002d0c:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 8002d10:	f04f 090f 	mov.w	r9, #15
 8002d14:	fa09 f90b 	lsl.w	r9, r9, fp
 8002d18:	ea2a 0a09 	bic.w	sl, sl, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d1c:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8002ea0 <HAL_GPIO_Init+0x270>
 8002d20:	4548      	cmp	r0, r9
 8002d22:	f000 80a4 	beq.w	8002e6e <HAL_GPIO_Init+0x23e>
 8002d26:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8002d2a:	4548      	cmp	r0, r9
 8002d2c:	f000 80a2 	beq.w	8002e74 <HAL_GPIO_Init+0x244>
 8002d30:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8002d34:	4548      	cmp	r0, r9
 8002d36:	f000 80a0 	beq.w	8002e7a <HAL_GPIO_Init+0x24a>
 8002d3a:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8002d3e:	4548      	cmp	r0, r9
 8002d40:	bf0c      	ite	eq
 8002d42:	f04f 0903 	moveq.w	r9, #3
 8002d46:	f04f 0904 	movne.w	r9, #4
 8002d4a:	fa09 f90b 	lsl.w	r9, r9, fp
 8002d4e:	ea49 090a 	orr.w	r9, r9, sl
        AFIO->EXTICR[position >> 2u] = temp;
 8002d52:	f8c8 9008 	str.w	r9, [r8, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d56:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002d5a:	f418 1f80 	tst.w	r8, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d5e:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8002d62:	bf14      	ite	ne
 8002d64:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d68:	ea28 0807 	biceq.w	r8, r8, r7
 8002d6c:	f8c4 8008 	str.w	r8, [r4, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d70:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002d74:	f418 1f00 	tst.w	r8, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d78:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8002d7c:	bf14      	ite	ne
 8002d7e:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d82:	ea28 0807 	biceq.w	r8, r8, r7
 8002d86:	f8c4 800c 	str.w	r8, [r4, #12]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d8a:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002d8e:	f418 3f00 	tst.w	r8, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002d92:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8002d96:	bf14      	ite	ne
 8002d98:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d9c:	ea28 0807 	biceq.w	r8, r8, r7
 8002da0:	f8c4 8004 	str.w	r8, [r4, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002da4:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002da8:	f418 3f80 	tst.w	r8, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002dac:	f8d4 8000 	ldr.w	r8, [r4]
 8002db0:	bf14      	ite	ne
 8002db2:	ea48 0707 	orrne.w	r7, r8, r7
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002db6:	ea28 0707 	biceq.w	r7, r8, r7
 8002dba:	6027      	str	r7, [r4, #0]
        }
      }
    }

	position++;
 8002dbc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dbe:	f8d1 9000 	ldr.w	r9, [r1]
 8002dc2:	3204      	adds	r2, #4
 8002dc4:	fa39 f703 	lsrs.w	r7, r9, r3
 8002dc8:	d05a      	beq.n	8002e80 <HAL_GPIO_Init+0x250>
    ioposition = (0x01uL << position);
 8002dca:	f04f 0801 	mov.w	r8, #1
 8002dce:	fa08 f803 	lsl.w	r8, r8, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dd2:	ea08 0709 	and.w	r7, r8, r9
    if (iocurrent == ioposition)
 8002dd6:	ea38 0909 	bics.w	r9, r8, r9
 8002dda:	d1ef      	bne.n	8002dbc <HAL_GPIO_Init+0x18c>
      switch (GPIO_Init->Mode)
 8002ddc:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8002de0:	f1b9 0f12 	cmp.w	r9, #18
 8002de4:	f63f af39 	bhi.w	8002c5a <HAL_GPIO_Init+0x2a>
 8002de8:	f1b9 0f12 	cmp.w	r9, #18
 8002dec:	f63f af5b 	bhi.w	8002ca6 <HAL_GPIO_Init+0x76>
 8002df0:	f20f 0a04 	addw	sl, pc, #4
 8002df4:	f85a f029 	ldr.w	pc, [sl, r9, lsl #2]
 8002df8:	08002c7f 	.word	0x08002c7f
 8002dfc:	08002e45 	.word	0x08002e45
 8002e00:	08002e55 	.word	0x08002e55
 8002e04:	08002c55 	.word	0x08002c55
 8002e08:	08002ca7 	.word	0x08002ca7
 8002e0c:	08002ca7 	.word	0x08002ca7
 8002e10:	08002ca7 	.word	0x08002ca7
 8002e14:	08002ca7 	.word	0x08002ca7
 8002e18:	08002ca7 	.word	0x08002ca7
 8002e1c:	08002ca7 	.word	0x08002ca7
 8002e20:	08002ca7 	.word	0x08002ca7
 8002e24:	08002ca7 	.word	0x08002ca7
 8002e28:	08002ca7 	.word	0x08002ca7
 8002e2c:	08002ca7 	.word	0x08002ca7
 8002e30:	08002ca7 	.word	0x08002ca7
 8002e34:	08002ca7 	.word	0x08002ca7
 8002e38:	08002ca7 	.word	0x08002ca7
 8002e3c:	08002e4b 	.word	0x08002e4b
 8002e40:	08002e5f 	.word	0x08002e5f
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e44:	f8d1 c00c 	ldr.w	ip, [r1, #12]
          break;
 8002e48:	e72d      	b.n	8002ca6 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e4a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8002e4e:	f10c 0c04 	add.w	ip, ip, #4
          break;
 8002e52:	e728      	b.n	8002ca6 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e54:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8002e58:	f10c 0c08 	add.w	ip, ip, #8
          break;
 8002e5c:	e723      	b.n	8002ca6 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e5e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8002e62:	f10c 0c0c 	add.w	ip, ip, #12
          break;
 8002e66:	e71e      	b.n	8002ca6 <HAL_GPIO_Init+0x76>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e68:	f04f 0c04 	mov.w	ip, #4
 8002e6c:	e71b      	b.n	8002ca6 <HAL_GPIO_Init+0x76>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e6e:	f04f 0900 	mov.w	r9, #0
 8002e72:	e76a      	b.n	8002d4a <HAL_GPIO_Init+0x11a>
 8002e74:	f04f 0901 	mov.w	r9, #1
 8002e78:	e767      	b.n	8002d4a <HAL_GPIO_Init+0x11a>
 8002e7a:	f04f 0902 	mov.w	r9, #2
 8002e7e:	e764      	b.n	8002d4a <HAL_GPIO_Init+0x11a>
  }
}
 8002e80:	b003      	add	sp, #12
 8002e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e86:	bf00      	nop
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	40010400 	.word	0x40010400
 8002e90:	10220000 	.word	0x10220000
 8002e94:	10310000 	.word	0x10310000
 8002e98:	10320000 	.word	0x10320000
 8002e9c:	10120000 	.word	0x10120000
 8002ea0:	40010800 	.word	0x40010800

08002ea4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ea4:	6883      	ldr	r3, [r0, #8]
 8002ea6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002ea8:	bf14      	ite	ne
 8002eaa:	2001      	movne	r0, #1
 8002eac:	2000      	moveq	r0, #0
 8002eae:	4770      	bx	lr

08002eb0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002eb0:	b10a      	cbz	r2, 8002eb6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eb2:	6101      	str	r1, [r0, #16]
 8002eb4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002eb6:	0409      	lsls	r1, r1, #16
 8002eb8:	6101      	str	r1, [r0, #16]
  }
}
 8002eba:	4770      	bx	lr

08002ebc <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ebc:	2800      	cmp	r0, #0
 8002ebe:	f000 8201 	beq.w	80032c4 <HAL_RCC_OscConfig+0x408>
{
 8002ec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eca:	6803      	ldr	r3, [r0, #0]
 8002ecc:	f013 0f01 	tst.w	r3, #1
 8002ed0:	d02c      	beq.n	8002f2c <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ed2:	4b9f      	ldr	r3, [pc, #636]	; (8003150 <HAL_RCC_OscConfig+0x294>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f003 030c 	and.w	r3, r3, #12
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	d01d      	beq.n	8002f1a <HAL_RCC_OscConfig+0x5e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ede:	4b9c      	ldr	r3, [pc, #624]	; (8003150 <HAL_RCC_OscConfig+0x294>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f003 030c 	and.w	r3, r3, #12
 8002ee6:	2b08      	cmp	r3, #8
 8002ee8:	d012      	beq.n	8002f10 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eea:	6863      	ldr	r3, [r4, #4]
 8002eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ef0:	d041      	beq.n	8002f76 <HAL_RCC_OscConfig+0xba>
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d155      	bne.n	8002fa2 <HAL_RCC_OscConfig+0xe6>
 8002ef6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002efa:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	e037      	b.n	8002f80 <HAL_RCC_OscConfig+0xc4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f10:	4b8f      	ldr	r3, [pc, #572]	; (8003150 <HAL_RCC_OscConfig+0x294>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002f18:	d0e7      	beq.n	8002eea <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f1a:	4b8d      	ldr	r3, [pc, #564]	; (8003150 <HAL_RCC_OscConfig+0x294>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002f22:	d003      	beq.n	8002f2c <HAL_RCC_OscConfig+0x70>
 8002f24:	6863      	ldr	r3, [r4, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f000 81ce 	beq.w	80032c8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f2c:	6823      	ldr	r3, [r4, #0]
 8002f2e:	f013 0f02 	tst.w	r3, #2
 8002f32:	d075      	beq.n	8003020 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f34:	4b86      	ldr	r3, [pc, #536]	; (8003150 <HAL_RCC_OscConfig+0x294>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f013 0f0c 	tst.w	r3, #12
 8002f3c:	d05f      	beq.n	8002ffe <HAL_RCC_OscConfig+0x142>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f3e:	4b84      	ldr	r3, [pc, #528]	; (8003150 <HAL_RCC_OscConfig+0x294>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f003 030c 	and.w	r3, r3, #12
 8002f46:	2b08      	cmp	r3, #8
 8002f48:	d054      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f4a:	6923      	ldr	r3, [r4, #16]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 808a 	beq.w	8003066 <HAL_RCC_OscConfig+0x1aa>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f52:	4b80      	ldr	r3, [pc, #512]	; (8003154 <HAL_RCC_OscConfig+0x298>)
 8002f54:	2201      	movs	r2, #1
 8002f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f58:	f7ff f882 	bl	8002060 <HAL_GetTick>
 8002f5c:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f5e:	4e7c      	ldr	r6, [pc, #496]	; (8003150 <HAL_RCC_OscConfig+0x294>)
 8002f60:	6833      	ldr	r3, [r6, #0]
 8002f62:	f013 0f02 	tst.w	r3, #2
 8002f66:	d175      	bne.n	8003054 <HAL_RCC_OscConfig+0x198>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f68:	f7ff f87a 	bl	8002060 <HAL_GetTick>
 8002f6c:	1b40      	subs	r0, r0, r5
 8002f6e:	2802      	cmp	r0, #2
 8002f70:	d9f6      	bls.n	8002f60 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_TIMEOUT;
 8002f72:	2003      	movs	r0, #3
 8002f74:	e1ad      	b.n	80032d2 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f76:	4a76      	ldr	r2, [pc, #472]	; (8003150 <HAL_RCC_OscConfig+0x294>)
 8002f78:	6813      	ldr	r3, [r2, #0]
 8002f7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f7e:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f80:	6863      	ldr	r3, [r4, #4]
 8002f82:	b343      	cbz	r3, 8002fd6 <HAL_RCC_OscConfig+0x11a>
        tickstart = HAL_GetTick();
 8002f84:	f7ff f86c 	bl	8002060 <HAL_GetTick>
 8002f88:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8a:	4e71      	ldr	r6, [pc, #452]	; (8003150 <HAL_RCC_OscConfig+0x294>)
 8002f8c:	6833      	ldr	r3, [r6, #0]
 8002f8e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002f92:	d1cb      	bne.n	8002f2c <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f94:	f7ff f864 	bl	8002060 <HAL_GetTick>
 8002f98:	1b40      	subs	r0, r0, r5
 8002f9a:	2864      	cmp	r0, #100	; 0x64
 8002f9c:	d9f6      	bls.n	8002f8c <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 8002f9e:	2003      	movs	r0, #3
 8002fa0:	e197      	b.n	80032d2 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fa2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fa6:	d009      	beq.n	8002fbc <HAL_RCC_OscConfig+0x100>
 8002fa8:	4b69      	ldr	r3, [pc, #420]	; (8003150 <HAL_RCC_OscConfig+0x294>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	e7e1      	b.n	8002f80 <HAL_RCC_OscConfig+0xc4>
 8002fbc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002fc0:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	e7d4      	b.n	8002f80 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8002fd6:	f7ff f843 	bl	8002060 <HAL_GetTick>
 8002fda:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fdc:	4e5c      	ldr	r6, [pc, #368]	; (8003150 <HAL_RCC_OscConfig+0x294>)
 8002fde:	6833      	ldr	r3, [r6, #0]
 8002fe0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002fe4:	d0a2      	beq.n	8002f2c <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe6:	f7ff f83b 	bl	8002060 <HAL_GetTick>
 8002fea:	1b40      	subs	r0, r0, r5
 8002fec:	2864      	cmp	r0, #100	; 0x64
 8002fee:	d9f6      	bls.n	8002fde <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 8002ff0:	2003      	movs	r0, #3
 8002ff2:	e16e      	b.n	80032d2 <HAL_RCC_OscConfig+0x416>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ff4:	4b56      	ldr	r3, [pc, #344]	; (8003150 <HAL_RCC_OscConfig+0x294>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002ffc:	d1a5      	bne.n	8002f4a <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ffe:	4b54      	ldr	r3, [pc, #336]	; (8003150 <HAL_RCC_OscConfig+0x294>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f013 0f02 	tst.w	r3, #2
 8003006:	d003      	beq.n	8003010 <HAL_RCC_OscConfig+0x154>
 8003008:	6923      	ldr	r3, [r4, #16]
 800300a:	2b01      	cmp	r3, #1
 800300c:	f040 815e 	bne.w	80032cc <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003010:	4a4f      	ldr	r2, [pc, #316]	; (8003150 <HAL_RCC_OscConfig+0x294>)
 8003012:	6813      	ldr	r3, [r2, #0]
 8003014:	6961      	ldr	r1, [r4, #20]
 8003016:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800301a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800301e:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003020:	6823      	ldr	r3, [r4, #0]
 8003022:	f013 0f08 	tst.w	r3, #8
 8003026:	d03d      	beq.n	80030a4 <HAL_RCC_OscConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003028:	69a3      	ldr	r3, [r4, #24]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d066      	beq.n	80030fc <HAL_RCC_OscConfig+0x240>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800302e:	4b49      	ldr	r3, [pc, #292]	; (8003154 <HAL_RCC_OscConfig+0x298>)
 8003030:	2201      	movs	r2, #1
 8003032:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003036:	f7ff f813 	bl	8002060 <HAL_GetTick>
 800303a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800303c:	4e44      	ldr	r6, [pc, #272]	; (8003150 <HAL_RCC_OscConfig+0x294>)
 800303e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003040:	f013 0f02 	tst.w	r3, #2
 8003044:	d121      	bne.n	800308a <HAL_RCC_OscConfig+0x1ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003046:	f7ff f80b 	bl	8002060 <HAL_GetTick>
 800304a:	1b40      	subs	r0, r0, r5
 800304c:	2802      	cmp	r0, #2
 800304e:	d9f6      	bls.n	800303e <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 8003050:	2003      	movs	r0, #3
 8003052:	e13e      	b.n	80032d2 <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003054:	4a3e      	ldr	r2, [pc, #248]	; (8003150 <HAL_RCC_OscConfig+0x294>)
 8003056:	6813      	ldr	r3, [r2, #0]
 8003058:	6961      	ldr	r1, [r4, #20]
 800305a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800305e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003062:	6013      	str	r3, [r2, #0]
 8003064:	e7dc      	b.n	8003020 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8003066:	4b3b      	ldr	r3, [pc, #236]	; (8003154 <HAL_RCC_OscConfig+0x298>)
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800306c:	f7fe fff8 	bl	8002060 <HAL_GetTick>
 8003070:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003072:	4e37      	ldr	r6, [pc, #220]	; (8003150 <HAL_RCC_OscConfig+0x294>)
 8003074:	6833      	ldr	r3, [r6, #0]
 8003076:	f013 0f02 	tst.w	r3, #2
 800307a:	d0d1      	beq.n	8003020 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800307c:	f7fe fff0 	bl	8002060 <HAL_GetTick>
 8003080:	1b40      	subs	r0, r0, r5
 8003082:	2802      	cmp	r0, #2
 8003084:	d9f6      	bls.n	8003074 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 8003086:	2003      	movs	r0, #3
 8003088:	e123      	b.n	80032d2 <HAL_RCC_OscConfig+0x416>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800308a:	4b33      	ldr	r3, [pc, #204]	; (8003158 <HAL_RCC_OscConfig+0x29c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a33      	ldr	r2, [pc, #204]	; (800315c <HAL_RCC_OscConfig+0x2a0>)
 8003090:	fba2 2303 	umull	r2, r3, r2, r3
 8003094:	0a5b      	lsrs	r3, r3, #9
 8003096:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8003098:	bf00      	nop
  }
  while (Delay --);
 800309a:	9b01      	ldr	r3, [sp, #4]
 800309c:	1e5a      	subs	r2, r3, #1
 800309e:	9201      	str	r2, [sp, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1f9      	bne.n	8003098 <HAL_RCC_OscConfig+0x1dc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030a4:	6823      	ldr	r3, [r4, #0]
 80030a6:	f013 0f04 	tst.w	r3, #4
 80030aa:	f000 809b 	beq.w	80031e4 <HAL_RCC_OscConfig+0x328>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ae:	4b28      	ldr	r3, [pc, #160]	; (8003150 <HAL_RCC_OscConfig+0x294>)
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80030b6:	d134      	bne.n	8003122 <HAL_RCC_OscConfig+0x266>
      __HAL_RCC_PWR_CLK_ENABLE();
 80030b8:	4b25      	ldr	r3, [pc, #148]	; (8003150 <HAL_RCC_OscConfig+0x294>)
 80030ba:	69da      	ldr	r2, [r3, #28]
 80030bc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80030c0:	61da      	str	r2, [r3, #28]
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 80030cc:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ce:	4b24      	ldr	r3, [pc, #144]	; (8003160 <HAL_RCC_OscConfig+0x2a4>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80030d6:	d026      	beq.n	8003126 <HAL_RCC_OscConfig+0x26a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030d8:	68e3      	ldr	r3, [r4, #12]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d042      	beq.n	8003164 <HAL_RCC_OscConfig+0x2a8>
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d158      	bne.n	8003194 <HAL_RCC_OscConfig+0x2d8>
 80030e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80030e6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80030ea:	6a1a      	ldr	r2, [r3, #32]
 80030ec:	f022 0201 	bic.w	r2, r2, #1
 80030f0:	621a      	str	r2, [r3, #32]
 80030f2:	6a1a      	ldr	r2, [r3, #32]
 80030f4:	f022 0204 	bic.w	r2, r2, #4
 80030f8:	621a      	str	r2, [r3, #32]
 80030fa:	e038      	b.n	800316e <HAL_RCC_OscConfig+0x2b2>
      __HAL_RCC_LSI_DISABLE();
 80030fc:	4b15      	ldr	r3, [pc, #84]	; (8003154 <HAL_RCC_OscConfig+0x298>)
 80030fe:	2200      	movs	r2, #0
 8003100:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8003104:	f7fe ffac 	bl	8002060 <HAL_GetTick>
 8003108:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800310a:	4e11      	ldr	r6, [pc, #68]	; (8003150 <HAL_RCC_OscConfig+0x294>)
 800310c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800310e:	f013 0f02 	tst.w	r3, #2
 8003112:	d0c7      	beq.n	80030a4 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003114:	f7fe ffa4 	bl	8002060 <HAL_GetTick>
 8003118:	1b40      	subs	r0, r0, r5
 800311a:	2802      	cmp	r0, #2
 800311c:	d9f6      	bls.n	800310c <HAL_RCC_OscConfig+0x250>
          return HAL_TIMEOUT;
 800311e:	2003      	movs	r0, #3
 8003120:	e0d7      	b.n	80032d2 <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 8003122:	2500      	movs	r5, #0
 8003124:	e7d3      	b.n	80030ce <HAL_RCC_OscConfig+0x212>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003126:	4a0e      	ldr	r2, [pc, #56]	; (8003160 <HAL_RCC_OscConfig+0x2a4>)
 8003128:	6813      	ldr	r3, [r2, #0]
 800312a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800312e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003130:	f7fe ff96 	bl	8002060 <HAL_GetTick>
 8003134:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003136:	4f0a      	ldr	r7, [pc, #40]	; (8003160 <HAL_RCC_OscConfig+0x2a4>)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800313e:	d1cb      	bne.n	80030d8 <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003140:	f7fe ff8e 	bl	8002060 <HAL_GetTick>
 8003144:	1b80      	subs	r0, r0, r6
 8003146:	2864      	cmp	r0, #100	; 0x64
 8003148:	d9f6      	bls.n	8003138 <HAL_RCC_OscConfig+0x27c>
          return HAL_TIMEOUT;
 800314a:	2003      	movs	r0, #3
 800314c:	e0c1      	b.n	80032d2 <HAL_RCC_OscConfig+0x416>
 800314e:	bf00      	nop
 8003150:	40021000 	.word	0x40021000
 8003154:	42420000 	.word	0x42420000
 8003158:	20000024 	.word	0x20000024
 800315c:	10624dd3 	.word	0x10624dd3
 8003160:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003164:	4a5e      	ldr	r2, [pc, #376]	; (80032e0 <HAL_RCC_OscConfig+0x424>)
 8003166:	6a13      	ldr	r3, [r2, #32]
 8003168:	f043 0301 	orr.w	r3, r3, #1
 800316c:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800316e:	68e3      	ldr	r3, [r4, #12]
 8003170:	b333      	cbz	r3, 80031c0 <HAL_RCC_OscConfig+0x304>
      tickstart = HAL_GetTick();
 8003172:	f7fe ff75 	bl	8002060 <HAL_GetTick>
 8003176:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003178:	4f59      	ldr	r7, [pc, #356]	; (80032e0 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800317a:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800317e:	6a3b      	ldr	r3, [r7, #32]
 8003180:	f013 0f02 	tst.w	r3, #2
 8003184:	d12d      	bne.n	80031e2 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003186:	f7fe ff6b 	bl	8002060 <HAL_GetTick>
 800318a:	1b80      	subs	r0, r0, r6
 800318c:	4540      	cmp	r0, r8
 800318e:	d9f6      	bls.n	800317e <HAL_RCC_OscConfig+0x2c2>
          return HAL_TIMEOUT;
 8003190:	2003      	movs	r0, #3
 8003192:	e09e      	b.n	80032d2 <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003194:	2b05      	cmp	r3, #5
 8003196:	d009      	beq.n	80031ac <HAL_RCC_OscConfig+0x2f0>
 8003198:	4b51      	ldr	r3, [pc, #324]	; (80032e0 <HAL_RCC_OscConfig+0x424>)
 800319a:	6a1a      	ldr	r2, [r3, #32]
 800319c:	f022 0201 	bic.w	r2, r2, #1
 80031a0:	621a      	str	r2, [r3, #32]
 80031a2:	6a1a      	ldr	r2, [r3, #32]
 80031a4:	f022 0204 	bic.w	r2, r2, #4
 80031a8:	621a      	str	r2, [r3, #32]
 80031aa:	e7e0      	b.n	800316e <HAL_RCC_OscConfig+0x2b2>
 80031ac:	4b4c      	ldr	r3, [pc, #304]	; (80032e0 <HAL_RCC_OscConfig+0x424>)
 80031ae:	6a1a      	ldr	r2, [r3, #32]
 80031b0:	f042 0204 	orr.w	r2, r2, #4
 80031b4:	621a      	str	r2, [r3, #32]
 80031b6:	6a1a      	ldr	r2, [r3, #32]
 80031b8:	f042 0201 	orr.w	r2, r2, #1
 80031bc:	621a      	str	r2, [r3, #32]
 80031be:	e7d6      	b.n	800316e <HAL_RCC_OscConfig+0x2b2>
      tickstart = HAL_GetTick();
 80031c0:	f7fe ff4e 	bl	8002060 <HAL_GetTick>
 80031c4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031c6:	4f46      	ldr	r7, [pc, #280]	; (80032e0 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031c8:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	f013 0f02 	tst.w	r3, #2
 80031d2:	d006      	beq.n	80031e2 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d4:	f7fe ff44 	bl	8002060 <HAL_GetTick>
 80031d8:	1b80      	subs	r0, r0, r6
 80031da:	4540      	cmp	r0, r8
 80031dc:	d9f6      	bls.n	80031cc <HAL_RCC_OscConfig+0x310>
          return HAL_TIMEOUT;
 80031de:	2003      	movs	r0, #3
 80031e0:	e077      	b.n	80032d2 <HAL_RCC_OscConfig+0x416>
    if (pwrclkchanged == SET)
 80031e2:	b9e5      	cbnz	r5, 800321e <HAL_RCC_OscConfig+0x362>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031e4:	69e3      	ldr	r3, [r4, #28]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d072      	beq.n	80032d0 <HAL_RCC_OscConfig+0x414>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031ea:	4a3d      	ldr	r2, [pc, #244]	; (80032e0 <HAL_RCC_OscConfig+0x424>)
 80031ec:	6852      	ldr	r2, [r2, #4]
 80031ee:	f002 020c 	and.w	r2, r2, #12
 80031f2:	2a08      	cmp	r2, #8
 80031f4:	d056      	beq.n	80032a4 <HAL_RCC_OscConfig+0x3e8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d017      	beq.n	800322a <HAL_RCC_OscConfig+0x36e>
        __HAL_RCC_PLL_DISABLE();
 80031fa:	4b3a      	ldr	r3, [pc, #232]	; (80032e4 <HAL_RCC_OscConfig+0x428>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003200:	f7fe ff2e 	bl	8002060 <HAL_GetTick>
 8003204:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003206:	4d36      	ldr	r5, [pc, #216]	; (80032e0 <HAL_RCC_OscConfig+0x424>)
 8003208:	682b      	ldr	r3, [r5, #0]
 800320a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800320e:	d047      	beq.n	80032a0 <HAL_RCC_OscConfig+0x3e4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003210:	f7fe ff26 	bl	8002060 <HAL_GetTick>
 8003214:	1b00      	subs	r0, r0, r4
 8003216:	2802      	cmp	r0, #2
 8003218:	d9f6      	bls.n	8003208 <HAL_RCC_OscConfig+0x34c>
            return HAL_TIMEOUT;
 800321a:	2003      	movs	r0, #3
 800321c:	e059      	b.n	80032d2 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 800321e:	4a30      	ldr	r2, [pc, #192]	; (80032e0 <HAL_RCC_OscConfig+0x424>)
 8003220:	69d3      	ldr	r3, [r2, #28]
 8003222:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003226:	61d3      	str	r3, [r2, #28]
 8003228:	e7dc      	b.n	80031e4 <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_PLL_DISABLE();
 800322a:	4b2e      	ldr	r3, [pc, #184]	; (80032e4 <HAL_RCC_OscConfig+0x428>)
 800322c:	2200      	movs	r2, #0
 800322e:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003230:	f7fe ff16 	bl	8002060 <HAL_GetTick>
 8003234:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003236:	4e2a      	ldr	r6, [pc, #168]	; (80032e0 <HAL_RCC_OscConfig+0x424>)
 8003238:	6833      	ldr	r3, [r6, #0]
 800323a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800323e:	d006      	beq.n	800324e <HAL_RCC_OscConfig+0x392>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003240:	f7fe ff0e 	bl	8002060 <HAL_GetTick>
 8003244:	1b40      	subs	r0, r0, r5
 8003246:	2802      	cmp	r0, #2
 8003248:	d9f6      	bls.n	8003238 <HAL_RCC_OscConfig+0x37c>
            return HAL_TIMEOUT;
 800324a:	2003      	movs	r0, #3
 800324c:	e041      	b.n	80032d2 <HAL_RCC_OscConfig+0x416>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800324e:	6a23      	ldr	r3, [r4, #32]
 8003250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003254:	d01a      	beq.n	800328c <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003256:	4922      	ldr	r1, [pc, #136]	; (80032e0 <HAL_RCC_OscConfig+0x424>)
 8003258:	684a      	ldr	r2, [r1, #4]
 800325a:	6a23      	ldr	r3, [r4, #32]
 800325c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800325e:	4303      	orrs	r3, r0
 8003260:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8003264:	4313      	orrs	r3, r2
 8003266:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8003268:	4b1e      	ldr	r3, [pc, #120]	; (80032e4 <HAL_RCC_OscConfig+0x428>)
 800326a:	2201      	movs	r2, #1
 800326c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800326e:	f7fe fef7 	bl	8002060 <HAL_GetTick>
 8003272:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003274:	4d1a      	ldr	r5, [pc, #104]	; (80032e0 <HAL_RCC_OscConfig+0x424>)
 8003276:	682b      	ldr	r3, [r5, #0]
 8003278:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800327c:	d10e      	bne.n	800329c <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800327e:	f7fe feef 	bl	8002060 <HAL_GetTick>
 8003282:	1b00      	subs	r0, r0, r4
 8003284:	2802      	cmp	r0, #2
 8003286:	d9f6      	bls.n	8003276 <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 8003288:	2003      	movs	r0, #3
 800328a:	e022      	b.n	80032d2 <HAL_RCC_OscConfig+0x416>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800328c:	4a14      	ldr	r2, [pc, #80]	; (80032e0 <HAL_RCC_OscConfig+0x424>)
 800328e:	6853      	ldr	r3, [r2, #4]
 8003290:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003294:	68a1      	ldr	r1, [r4, #8]
 8003296:	430b      	orrs	r3, r1
 8003298:	6053      	str	r3, [r2, #4]
 800329a:	e7dc      	b.n	8003256 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 800329c:	2000      	movs	r0, #0
 800329e:	e018      	b.n	80032d2 <HAL_RCC_OscConfig+0x416>
 80032a0:	2000      	movs	r0, #0
 80032a2:	e016      	b.n	80032d2 <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d017      	beq.n	80032d8 <HAL_RCC_OscConfig+0x41c>
        pll_config = RCC->CFGR;
 80032a8:	4b0d      	ldr	r3, [pc, #52]	; (80032e0 <HAL_RCC_OscConfig+0x424>)
 80032aa:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ac:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80032b0:	6a22      	ldr	r2, [r4, #32]
 80032b2:	4291      	cmp	r1, r2
 80032b4:	d112      	bne.n	80032dc <HAL_RCC_OscConfig+0x420>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032b6:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
        return HAL_ERROR;
 80032bc:	1a18      	subs	r0, r3, r0
 80032be:	bf18      	it	ne
 80032c0:	2001      	movne	r0, #1
 80032c2:	e006      	b.n	80032d2 <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 80032c4:	2001      	movs	r0, #1
}
 80032c6:	4770      	bx	lr
        return HAL_ERROR;
 80032c8:	2001      	movs	r0, #1
 80032ca:	e002      	b.n	80032d2 <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 80032cc:	2001      	movs	r0, #1
 80032ce:	e000      	b.n	80032d2 <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 80032d0:	2000      	movs	r0, #0
}
 80032d2:	b002      	add	sp, #8
 80032d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 80032d8:	2001      	movs	r0, #1
 80032da:	e7fa      	b.n	80032d2 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 80032dc:	2001      	movs	r0, #1
 80032de:	e7f8      	b.n	80032d2 <HAL_RCC_OscConfig+0x416>
 80032e0:	40021000 	.word	0x40021000
 80032e4:	42420000 	.word	0x42420000

080032e8 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80032e8:	4b0f      	ldr	r3, [pc, #60]	; (8003328 <HAL_RCC_GetSysClockFreq+0x40>)
 80032ea:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80032ec:	f003 020c 	and.w	r2, r3, #12
 80032f0:	2a08      	cmp	r2, #8
 80032f2:	d001      	beq.n	80032f8 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 80032f4:	480d      	ldr	r0, [pc, #52]	; (800332c <HAL_RCC_GetSysClockFreq+0x44>)
}
 80032f6:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032f8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80032fc:	490c      	ldr	r1, [pc, #48]	; (8003330 <HAL_RCC_GetSysClockFreq+0x48>)
 80032fe:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003300:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003304:	d00b      	beq.n	800331e <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003306:	4b08      	ldr	r3, [pc, #32]	; (8003328 <HAL_RCC_GetSysClockFreq+0x40>)
 8003308:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800330a:	4a08      	ldr	r2, [pc, #32]	; (800332c <HAL_RCC_GetSysClockFreq+0x44>)
 800330c:	fb02 f000 	mul.w	r0, r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003310:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8003314:	4a07      	ldr	r2, [pc, #28]	; (8003334 <HAL_RCC_GetSysClockFreq+0x4c>)
 8003316:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003318:	fbb0 f0f3 	udiv	r0, r0, r3
 800331c:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800331e:	4b06      	ldr	r3, [pc, #24]	; (8003338 <HAL_RCC_GetSysClockFreq+0x50>)
 8003320:	fb03 f000 	mul.w	r0, r3, r0
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	40021000 	.word	0x40021000
 800332c:	007a1200 	.word	0x007a1200
 8003330:	080077e0 	.word	0x080077e0
 8003334:	080077f0 	.word	0x080077f0
 8003338:	003d0900 	.word	0x003d0900

0800333c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800333c:	2800      	cmp	r0, #0
 800333e:	f000 80a2 	beq.w	8003486 <HAL_RCC_ClockConfig+0x14a>
{
 8003342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003346:	460d      	mov	r5, r1
 8003348:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800334a:	4b53      	ldr	r3, [pc, #332]	; (8003498 <HAL_RCC_ClockConfig+0x15c>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	428b      	cmp	r3, r1
 8003354:	d20b      	bcs.n	800336e <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003356:	4a50      	ldr	r2, [pc, #320]	; (8003498 <HAL_RCC_ClockConfig+0x15c>)
 8003358:	6813      	ldr	r3, [r2, #0]
 800335a:	f023 0307 	bic.w	r3, r3, #7
 800335e:	430b      	orrs	r3, r1
 8003360:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003362:	6813      	ldr	r3, [r2, #0]
 8003364:	f003 0307 	and.w	r3, r3, #7
 8003368:	428b      	cmp	r3, r1
 800336a:	f040 808e 	bne.w	800348a <HAL_RCC_ClockConfig+0x14e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800336e:	6823      	ldr	r3, [r4, #0]
 8003370:	f013 0f02 	tst.w	r3, #2
 8003374:	d017      	beq.n	80033a6 <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003376:	f013 0f04 	tst.w	r3, #4
 800337a:	d004      	beq.n	8003386 <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800337c:	4a47      	ldr	r2, [pc, #284]	; (800349c <HAL_RCC_ClockConfig+0x160>)
 800337e:	6853      	ldr	r3, [r2, #4]
 8003380:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003384:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003386:	6823      	ldr	r3, [r4, #0]
 8003388:	f013 0f08 	tst.w	r3, #8
 800338c:	d004      	beq.n	8003398 <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800338e:	4a43      	ldr	r2, [pc, #268]	; (800349c <HAL_RCC_ClockConfig+0x160>)
 8003390:	6853      	ldr	r3, [r2, #4]
 8003392:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003396:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003398:	4a40      	ldr	r2, [pc, #256]	; (800349c <HAL_RCC_ClockConfig+0x160>)
 800339a:	6853      	ldr	r3, [r2, #4]
 800339c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033a0:	68a1      	ldr	r1, [r4, #8]
 80033a2:	430b      	orrs	r3, r1
 80033a4:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033a6:	6823      	ldr	r3, [r4, #0]
 80033a8:	f013 0f01 	tst.w	r3, #1
 80033ac:	d031      	beq.n	8003412 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ae:	6862      	ldr	r2, [r4, #4]
 80033b0:	2a01      	cmp	r2, #1
 80033b2:	d020      	beq.n	80033f6 <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033b4:	2a02      	cmp	r2, #2
 80033b6:	d025      	beq.n	8003404 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b8:	4b38      	ldr	r3, [pc, #224]	; (800349c <HAL_RCC_ClockConfig+0x160>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f013 0f02 	tst.w	r3, #2
 80033c0:	d065      	beq.n	800348e <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033c2:	4936      	ldr	r1, [pc, #216]	; (800349c <HAL_RCC_ClockConfig+0x160>)
 80033c4:	684b      	ldr	r3, [r1, #4]
 80033c6:	f023 0303 	bic.w	r3, r3, #3
 80033ca:	4313      	orrs	r3, r2
 80033cc:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80033ce:	f7fe fe47 	bl	8002060 <HAL_GetTick>
 80033d2:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d4:	4f31      	ldr	r7, [pc, #196]	; (800349c <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033d6:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f003 030c 	and.w	r3, r3, #12
 80033e0:	6862      	ldr	r2, [r4, #4]
 80033e2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80033e6:	d014      	beq.n	8003412 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033e8:	f7fe fe3a 	bl	8002060 <HAL_GetTick>
 80033ec:	1b80      	subs	r0, r0, r6
 80033ee:	4540      	cmp	r0, r8
 80033f0:	d9f3      	bls.n	80033da <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 80033f2:	2003      	movs	r0, #3
 80033f4:	e045      	b.n	8003482 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033f6:	4b29      	ldr	r3, [pc, #164]	; (800349c <HAL_RCC_ClockConfig+0x160>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80033fe:	d1e0      	bne.n	80033c2 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8003400:	2001      	movs	r0, #1
 8003402:	e03e      	b.n	8003482 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003404:	4b25      	ldr	r3, [pc, #148]	; (800349c <HAL_RCC_ClockConfig+0x160>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800340c:	d1d9      	bne.n	80033c2 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 800340e:	2001      	movs	r0, #1
 8003410:	e037      	b.n	8003482 <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003412:	4b21      	ldr	r3, [pc, #132]	; (8003498 <HAL_RCC_ClockConfig+0x15c>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0307 	and.w	r3, r3, #7
 800341a:	42ab      	cmp	r3, r5
 800341c:	d90a      	bls.n	8003434 <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800341e:	4a1e      	ldr	r2, [pc, #120]	; (8003498 <HAL_RCC_ClockConfig+0x15c>)
 8003420:	6813      	ldr	r3, [r2, #0]
 8003422:	f023 0307 	bic.w	r3, r3, #7
 8003426:	432b      	orrs	r3, r5
 8003428:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800342a:	6813      	ldr	r3, [r2, #0]
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	42ab      	cmp	r3, r5
 8003432:	d12e      	bne.n	8003492 <HAL_RCC_ClockConfig+0x156>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003434:	6823      	ldr	r3, [r4, #0]
 8003436:	f013 0f04 	tst.w	r3, #4
 800343a:	d006      	beq.n	800344a <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800343c:	4a17      	ldr	r2, [pc, #92]	; (800349c <HAL_RCC_ClockConfig+0x160>)
 800343e:	6853      	ldr	r3, [r2, #4]
 8003440:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003444:	68e1      	ldr	r1, [r4, #12]
 8003446:	430b      	orrs	r3, r1
 8003448:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800344a:	6823      	ldr	r3, [r4, #0]
 800344c:	f013 0f08 	tst.w	r3, #8
 8003450:	d007      	beq.n	8003462 <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003452:	4a12      	ldr	r2, [pc, #72]	; (800349c <HAL_RCC_ClockConfig+0x160>)
 8003454:	6853      	ldr	r3, [r2, #4]
 8003456:	6921      	ldr	r1, [r4, #16]
 8003458:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800345c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003460:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003462:	f7ff ff41 	bl	80032e8 <HAL_RCC_GetSysClockFreq>
 8003466:	4b0d      	ldr	r3, [pc, #52]	; (800349c <HAL_RCC_ClockConfig+0x160>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800346e:	4a0c      	ldr	r2, [pc, #48]	; (80034a0 <HAL_RCC_ClockConfig+0x164>)
 8003470:	5cd3      	ldrb	r3, [r2, r3]
 8003472:	40d8      	lsrs	r0, r3
 8003474:	4b0b      	ldr	r3, [pc, #44]	; (80034a4 <HAL_RCC_ClockConfig+0x168>)
 8003476:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003478:	4b0b      	ldr	r3, [pc, #44]	; (80034a8 <HAL_RCC_ClockConfig+0x16c>)
 800347a:	6818      	ldr	r0, [r3, #0]
 800347c:	f7fe fd2e 	bl	8001edc <HAL_InitTick>
  return HAL_OK;
 8003480:	2000      	movs	r0, #0
}
 8003482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8003486:	2001      	movs	r0, #1
}
 8003488:	4770      	bx	lr
    return HAL_ERROR;
 800348a:	2001      	movs	r0, #1
 800348c:	e7f9      	b.n	8003482 <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 800348e:	2001      	movs	r0, #1
 8003490:	e7f7      	b.n	8003482 <HAL_RCC_ClockConfig+0x146>
    return HAL_ERROR;
 8003492:	2001      	movs	r0, #1
 8003494:	e7f5      	b.n	8003482 <HAL_RCC_ClockConfig+0x146>
 8003496:	bf00      	nop
 8003498:	40022000 	.word	0x40022000
 800349c:	40021000 	.word	0x40021000
 80034a0:	080077c8 	.word	0x080077c8
 80034a4:	20000024 	.word	0x20000024
 80034a8:	2000002c 	.word	0x2000002c

080034ac <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034ac:	4b04      	ldr	r3, [pc, #16]	; (80034c0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80034b4:	4a03      	ldr	r2, [pc, #12]	; (80034c4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80034b6:	5cd3      	ldrb	r3, [r2, r3]
 80034b8:	4a03      	ldr	r2, [pc, #12]	; (80034c8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80034ba:	6810      	ldr	r0, [r2, #0]
}
 80034bc:	40d8      	lsrs	r0, r3
 80034be:	4770      	bx	lr
 80034c0:	40021000 	.word	0x40021000
 80034c4:	080077d8 	.word	0x080077d8
 80034c8:	20000024 	.word	0x20000024

080034cc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034cc:	4b04      	ldr	r3, [pc, #16]	; (80034e0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80034d4:	4a03      	ldr	r2, [pc, #12]	; (80034e4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80034d6:	5cd3      	ldrb	r3, [r2, r3]
 80034d8:	4a03      	ldr	r2, [pc, #12]	; (80034e8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80034da:	6810      	ldr	r0, [r2, #0]
}
 80034dc:	40d8      	lsrs	r0, r3
 80034de:	4770      	bx	lr
 80034e0:	40021000 	.word	0x40021000
 80034e4:	080077d8 	.word	0x080077d8
 80034e8:	20000024 	.word	0x20000024

080034ec <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80034ec:	230f      	movs	r3, #15
 80034ee:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80034f0:	4b0b      	ldr	r3, [pc, #44]	; (8003520 <HAL_RCC_GetClockConfig+0x34>)
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	f002 0203 	and.w	r2, r2, #3
 80034f8:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003500:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003508:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	08db      	lsrs	r3, r3, #3
 800350e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003512:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003514:	4b03      	ldr	r3, [pc, #12]	; (8003524 <HAL_RCC_GetClockConfig+0x38>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	600b      	str	r3, [r1, #0]
}
 800351e:	4770      	bx	lr
 8003520:	40021000 	.word	0x40021000
 8003524:	40022000 	.word	0x40022000

08003528 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800352c:	b082      	sub	sp, #8
 800352e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003530:	6803      	ldr	r3, [r0, #0]
 8003532:	f013 0f01 	tst.w	r3, #1
 8003536:	d036      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003538:	4b3f      	ldr	r3, [pc, #252]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003540:	d149      	bne.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xae>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003542:	4b3d      	ldr	r3, [pc, #244]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003544:	69da      	ldr	r2, [r3, #28]
 8003546:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800354a:	61da      	str	r2, [r3, #28]
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003552:	9301      	str	r3, [sp, #4]
 8003554:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003556:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003558:	4b38      	ldr	r3, [pc, #224]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003560:	d03b      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003562:	4b35      	ldr	r3, [pc, #212]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003564:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003566:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800356a:	d013      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800356c:	6862      	ldr	r2, [r4, #4]
 800356e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003572:	429a      	cmp	r2, r3
 8003574:	d00e      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003576:	4a30      	ldr	r2, [pc, #192]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003578:	6a13      	ldr	r3, [r2, #32]
 800357a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800357e:	4930      	ldr	r1, [pc, #192]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003580:	2601      	movs	r6, #1
 8003582:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003586:	2600      	movs	r6, #0
 8003588:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800358c:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800358e:	f013 0f01 	tst.w	r3, #1
 8003592:	d136      	bne.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0xda>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003594:	4a28      	ldr	r2, [pc, #160]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003596:	6a13      	ldr	r3, [r2, #32]
 8003598:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800359c:	6861      	ldr	r1, [r4, #4]
 800359e:	430b      	orrs	r3, r1
 80035a0:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035a2:	2d00      	cmp	r5, #0
 80035a4:	d13e      	bne.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035a6:	6823      	ldr	r3, [r4, #0]
 80035a8:	f013 0f02 	tst.w	r3, #2
 80035ac:	d006      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035ae:	4a22      	ldr	r2, [pc, #136]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80035b0:	6853      	ldr	r3, [r2, #4]
 80035b2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80035b6:	68a1      	ldr	r1, [r4, #8]
 80035b8:	430b      	orrs	r3, r1
 80035ba:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035bc:	6823      	ldr	r3, [r4, #0]
 80035be:	f013 0f10 	tst.w	r3, #16
 80035c2:	d034      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035c4:	4a1c      	ldr	r2, [pc, #112]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80035c6:	6853      	ldr	r3, [r2, #4]
 80035c8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80035cc:	68e1      	ldr	r1, [r4, #12]
 80035ce:	430b      	orrs	r3, r1
 80035d0:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80035d2:	2000      	movs	r0, #0
 80035d4:	e02c      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x108>
    FlagStatus pwrclkchanged = RESET;
 80035d6:	2500      	movs	r5, #0
 80035d8:	e7be      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035da:	4a18      	ldr	r2, [pc, #96]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80035dc:	6813      	ldr	r3, [r2, #0]
 80035de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80035e4:	f7fe fd3c 	bl	8002060 <HAL_GetTick>
 80035e8:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ea:	4f14      	ldr	r7, [pc, #80]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	f413 7f80 	tst.w	r3, #256	; 0x100
 80035f2:	d1b6      	bne.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f4:	f7fe fd34 	bl	8002060 <HAL_GetTick>
 80035f8:	1b80      	subs	r0, r0, r6
 80035fa:	2864      	cmp	r0, #100	; 0x64
 80035fc:	d9f6      	bls.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0xc4>
          return HAL_TIMEOUT;
 80035fe:	2003      	movs	r0, #3
 8003600:	e016      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x108>
        tickstart = HAL_GetTick();
 8003602:	f7fe fd2d 	bl	8002060 <HAL_GetTick>
 8003606:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003608:	4f0b      	ldr	r7, [pc, #44]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x110>)
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800360a:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	f013 0f02 	tst.w	r3, #2
 8003614:	d1be      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003616:	f7fe fd23 	bl	8002060 <HAL_GetTick>
 800361a:	1b80      	subs	r0, r0, r6
 800361c:	4540      	cmp	r0, r8
 800361e:	d9f6      	bls.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xe6>
            return HAL_TIMEOUT;
 8003620:	2003      	movs	r0, #3
 8003622:	e005      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x108>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003624:	69d3      	ldr	r3, [r2, #28]
 8003626:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800362a:	61d3      	str	r3, [r2, #28]
 800362c:	e7bb      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
  return HAL_OK;
 800362e:	2000      	movs	r0, #0
}
 8003630:	b002      	add	sp, #8
 8003632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003636:	bf00      	nop
 8003638:	40021000 	.word	0x40021000
 800363c:	40007000 	.word	0x40007000
 8003640:	42420000 	.word	0x42420000

08003644 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003644:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003646:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003648:	6a02      	ldr	r2, [r0, #32]
 800364a:	f022 0201 	bic.w	r2, r2, #1
 800364e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003650:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003652:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003654:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003658:	680d      	ldr	r5, [r1, #0]
 800365a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800365c:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003660:	688d      	ldr	r5, [r1, #8]
 8003662:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003664:	4d0b      	ldr	r5, [pc, #44]	; (8003694 <TIM_OC1_SetConfig+0x50>)
 8003666:	42a8      	cmp	r0, r5
 8003668:	d006      	beq.n	8003678 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800366a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800366c:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800366e:	684a      	ldr	r2, [r1, #4]
 8003670:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003672:	6203      	str	r3, [r0, #32]
}
 8003674:	bc70      	pop	{r4, r5, r6}
 8003676:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8003678:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800367c:	68cd      	ldr	r5, [r1, #12]
 800367e:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8003680:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003684:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8003688:	694d      	ldr	r5, [r1, #20]
 800368a:	698e      	ldr	r6, [r1, #24]
 800368c:	4335      	orrs	r5, r6
 800368e:	432c      	orrs	r4, r5
 8003690:	e7eb      	b.n	800366a <TIM_OC1_SetConfig+0x26>
 8003692:	bf00      	nop
 8003694:	40012c00 	.word	0x40012c00

08003698 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003698:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800369a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800369c:	6a02      	ldr	r2, [r0, #32]
 800369e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036a2:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036a4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036a6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036a8:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036ac:	680d      	ldr	r5, [r1, #0]
 80036ae:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80036b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80036b4:	688d      	ldr	r5, [r1, #8]
 80036b6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80036ba:	4d0c      	ldr	r5, [pc, #48]	; (80036ec <TIM_OC3_SetConfig+0x54>)
 80036bc:	42a8      	cmp	r0, r5
 80036be:	d006      	beq.n	80036ce <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036c0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036c2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036c4:	684a      	ldr	r2, [r1, #4]
 80036c6:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036c8:	6203      	str	r3, [r0, #32]
}
 80036ca:	bc70      	pop	{r4, r5, r6}
 80036cc:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 80036ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80036d2:	68cd      	ldr	r5, [r1, #12]
 80036d4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80036d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80036dc:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036e0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036e2:	698e      	ldr	r6, [r1, #24]
 80036e4:	4335      	orrs	r5, r6
 80036e6:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 80036ea:	e7e9      	b.n	80036c0 <TIM_OC3_SetConfig+0x28>
 80036ec:	40012c00 	.word	0x40012c00

080036f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036f0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036f2:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036f4:	6a02      	ldr	r2, [r0, #32]
 80036f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036fa:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036fc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036fe:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003700:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003704:	680d      	ldr	r5, [r1, #0]
 8003706:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800370a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800370e:	688d      	ldr	r5, [r1, #8]
 8003710:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003714:	4d07      	ldr	r5, [pc, #28]	; (8003734 <TIM_OC4_SetConfig+0x44>)
 8003716:	42a8      	cmp	r0, r5
 8003718:	d006      	beq.n	8003728 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800371a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800371c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800371e:	684a      	ldr	r2, [r1, #4]
 8003720:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003722:	6203      	str	r3, [r0, #32]
}
 8003724:	bc30      	pop	{r4, r5}
 8003726:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003728:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800372c:	694d      	ldr	r5, [r1, #20]
 800372e:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8003732:	e7f2      	b.n	800371a <TIM_OC4_SetConfig+0x2a>
 8003734:	40012c00 	.word	0x40012c00

08003738 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003738:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b01      	cmp	r3, #1
 8003740:	d127      	bne.n	8003792 <HAL_TIM_Base_Start_IT+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003742:	2302      	movs	r3, #2
 8003744:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003748:	6802      	ldr	r2, [r0, #0]
 800374a:	68d3      	ldr	r3, [r2, #12]
 800374c:	f043 0301 	orr.w	r3, r3, #1
 8003750:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003752:	6803      	ldr	r3, [r0, #0]
 8003754:	4a11      	ldr	r2, [pc, #68]	; (800379c <HAL_TIM_Base_Start_IT+0x64>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d010      	beq.n	800377c <HAL_TIM_Base_Start_IT+0x44>
 800375a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800375e:	d00d      	beq.n	800377c <HAL_TIM_Base_Start_IT+0x44>
 8003760:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003764:	4293      	cmp	r3, r2
 8003766:	d009      	beq.n	800377c <HAL_TIM_Base_Start_IT+0x44>
 8003768:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800376c:	4293      	cmp	r3, r2
 800376e:	d005      	beq.n	800377c <HAL_TIM_Base_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	f042 0201 	orr.w	r2, r2, #1
 8003776:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003778:	2000      	movs	r0, #0
 800377a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800377c:	689a      	ldr	r2, [r3, #8]
 800377e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003782:	2a06      	cmp	r2, #6
 8003784:	d007      	beq.n	8003796 <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	f042 0201 	orr.w	r2, r2, #1
 800378c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800378e:	2000      	movs	r0, #0
 8003790:	4770      	bx	lr
    return HAL_ERROR;
 8003792:	2001      	movs	r0, #1
 8003794:	4770      	bx	lr
  return HAL_OK;
 8003796:	2000      	movs	r0, #0
}
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	40012c00 	.word	0x40012c00

080037a0 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80037a0:	6802      	ldr	r2, [r0, #0]
 80037a2:	68d3      	ldr	r3, [r2, #12]
 80037a4:	f023 0301 	bic.w	r3, r3, #1
 80037a8:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 80037aa:	6803      	ldr	r3, [r0, #0]
 80037ac:	6a19      	ldr	r1, [r3, #32]
 80037ae:	f241 1211 	movw	r2, #4369	; 0x1111
 80037b2:	4211      	tst	r1, r2
 80037b4:	d108      	bne.n	80037c8 <HAL_TIM_Base_Stop_IT+0x28>
 80037b6:	6a19      	ldr	r1, [r3, #32]
 80037b8:	f240 4244 	movw	r2, #1092	; 0x444
 80037bc:	4211      	tst	r1, r2
 80037be:	d103      	bne.n	80037c8 <HAL_TIM_Base_Stop_IT+0x28>
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	f022 0201 	bic.w	r2, r2, #1
 80037c6:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80037c8:	2301      	movs	r3, #1
 80037ca:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 80037ce:	2000      	movs	r0, #0
 80037d0:	4770      	bx	lr

080037d2 <HAL_TIM_PWM_MspInit>:
}
 80037d2:	4770      	bx	lr

080037d4 <HAL_TIM_OC_DelayElapsedCallback>:
}
 80037d4:	4770      	bx	lr

080037d6 <HAL_TIM_IC_CaptureCallback>:
}
 80037d6:	4770      	bx	lr

080037d8 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80037d8:	4770      	bx	lr

080037da <HAL_TIM_TriggerCallback>:
}
 80037da:	4770      	bx	lr

080037dc <HAL_TIM_IRQHandler>:
{
 80037dc:	b510      	push	{r4, lr}
 80037de:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037e0:	6803      	ldr	r3, [r0, #0]
 80037e2:	691a      	ldr	r2, [r3, #16]
 80037e4:	f012 0f02 	tst.w	r2, #2
 80037e8:	d011      	beq.n	800380e <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037ea:	68da      	ldr	r2, [r3, #12]
 80037ec:	f012 0f02 	tst.w	r2, #2
 80037f0:	d00d      	beq.n	800380e <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037f2:	f06f 0202 	mvn.w	r2, #2
 80037f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037f8:	2301      	movs	r3, #1
 80037fa:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037fc:	6803      	ldr	r3, [r0, #0]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	f013 0f03 	tst.w	r3, #3
 8003804:	d070      	beq.n	80038e8 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8003806:	f7ff ffe6 	bl	80037d6 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800380a:	2300      	movs	r3, #0
 800380c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800380e:	6823      	ldr	r3, [r4, #0]
 8003810:	691a      	ldr	r2, [r3, #16]
 8003812:	f012 0f04 	tst.w	r2, #4
 8003816:	d012      	beq.n	800383e <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003818:	68da      	ldr	r2, [r3, #12]
 800381a:	f012 0f04 	tst.w	r2, #4
 800381e:	d00e      	beq.n	800383e <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003820:	f06f 0204 	mvn.w	r2, #4
 8003824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003826:	2302      	movs	r3, #2
 8003828:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800382a:	6823      	ldr	r3, [r4, #0]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003832:	d05f      	beq.n	80038f4 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8003834:	4620      	mov	r0, r4
 8003836:	f7ff ffce 	bl	80037d6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800383a:	2300      	movs	r3, #0
 800383c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800383e:	6823      	ldr	r3, [r4, #0]
 8003840:	691a      	ldr	r2, [r3, #16]
 8003842:	f012 0f08 	tst.w	r2, #8
 8003846:	d012      	beq.n	800386e <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003848:	68da      	ldr	r2, [r3, #12]
 800384a:	f012 0f08 	tst.w	r2, #8
 800384e:	d00e      	beq.n	800386e <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003850:	f06f 0208 	mvn.w	r2, #8
 8003854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003856:	2304      	movs	r3, #4
 8003858:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800385a:	6823      	ldr	r3, [r4, #0]
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	f013 0f03 	tst.w	r3, #3
 8003862:	d04e      	beq.n	8003902 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8003864:	4620      	mov	r0, r4
 8003866:	f7ff ffb6 	bl	80037d6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800386a:	2300      	movs	r3, #0
 800386c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800386e:	6823      	ldr	r3, [r4, #0]
 8003870:	691a      	ldr	r2, [r3, #16]
 8003872:	f012 0f10 	tst.w	r2, #16
 8003876:	d012      	beq.n	800389e <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003878:	68da      	ldr	r2, [r3, #12]
 800387a:	f012 0f10 	tst.w	r2, #16
 800387e:	d00e      	beq.n	800389e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003880:	f06f 0210 	mvn.w	r2, #16
 8003884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003886:	2308      	movs	r3, #8
 8003888:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800388a:	6823      	ldr	r3, [r4, #0]
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003892:	d03d      	beq.n	8003910 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8003894:	4620      	mov	r0, r4
 8003896:	f7ff ff9e 	bl	80037d6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800389a:	2300      	movs	r3, #0
 800389c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800389e:	6823      	ldr	r3, [r4, #0]
 80038a0:	691a      	ldr	r2, [r3, #16]
 80038a2:	f012 0f01 	tst.w	r2, #1
 80038a6:	d003      	beq.n	80038b0 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038a8:	68da      	ldr	r2, [r3, #12]
 80038aa:	f012 0f01 	tst.w	r2, #1
 80038ae:	d136      	bne.n	800391e <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038b0:	6823      	ldr	r3, [r4, #0]
 80038b2:	691a      	ldr	r2, [r3, #16]
 80038b4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80038b8:	d003      	beq.n	80038c2 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038ba:	68da      	ldr	r2, [r3, #12]
 80038bc:	f012 0f80 	tst.w	r2, #128	; 0x80
 80038c0:	d134      	bne.n	800392c <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038c2:	6823      	ldr	r3, [r4, #0]
 80038c4:	691a      	ldr	r2, [r3, #16]
 80038c6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80038ca:	d003      	beq.n	80038d4 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038cc:	68da      	ldr	r2, [r3, #12]
 80038ce:	f012 0f40 	tst.w	r2, #64	; 0x40
 80038d2:	d132      	bne.n	800393a <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038d4:	6823      	ldr	r3, [r4, #0]
 80038d6:	691a      	ldr	r2, [r3, #16]
 80038d8:	f012 0f20 	tst.w	r2, #32
 80038dc:	d003      	beq.n	80038e6 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038de:	68da      	ldr	r2, [r3, #12]
 80038e0:	f012 0f20 	tst.w	r2, #32
 80038e4:	d130      	bne.n	8003948 <HAL_TIM_IRQHandler+0x16c>
}
 80038e6:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038e8:	f7ff ff74 	bl	80037d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ec:	4620      	mov	r0, r4
 80038ee:	f7ff ff73 	bl	80037d8 <HAL_TIM_PWM_PulseFinishedCallback>
 80038f2:	e78a      	b.n	800380a <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038f4:	4620      	mov	r0, r4
 80038f6:	f7ff ff6d 	bl	80037d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038fa:	4620      	mov	r0, r4
 80038fc:	f7ff ff6c 	bl	80037d8 <HAL_TIM_PWM_PulseFinishedCallback>
 8003900:	e79b      	b.n	800383a <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003902:	4620      	mov	r0, r4
 8003904:	f7ff ff66 	bl	80037d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003908:	4620      	mov	r0, r4
 800390a:	f7ff ff65 	bl	80037d8 <HAL_TIM_PWM_PulseFinishedCallback>
 800390e:	e7ac      	b.n	800386a <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003910:	4620      	mov	r0, r4
 8003912:	f7ff ff5f 	bl	80037d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003916:	4620      	mov	r0, r4
 8003918:	f7ff ff5e 	bl	80037d8 <HAL_TIM_PWM_PulseFinishedCallback>
 800391c:	e7bd      	b.n	800389a <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800391e:	f06f 0201 	mvn.w	r2, #1
 8003922:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003924:	4620      	mov	r0, r4
 8003926:	f7fd fe87 	bl	8001638 <HAL_TIM_PeriodElapsedCallback>
 800392a:	e7c1      	b.n	80038b0 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800392c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003930:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003932:	4620      	mov	r0, r4
 8003934:	f000 fafd 	bl	8003f32 <HAL_TIMEx_BreakCallback>
 8003938:	e7c3      	b.n	80038c2 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800393a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800393e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003940:	4620      	mov	r0, r4
 8003942:	f7ff ff4a 	bl	80037da <HAL_TIM_TriggerCallback>
 8003946:	e7c5      	b.n	80038d4 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003948:	f06f 0220 	mvn.w	r2, #32
 800394c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800394e:	4620      	mov	r0, r4
 8003950:	f000 faee 	bl	8003f30 <HAL_TIMEx_CommutCallback>
}
 8003954:	e7c7      	b.n	80038e6 <HAL_TIM_IRQHandler+0x10a>
	...

08003958 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003958:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800395a:	4a25      	ldr	r2, [pc, #148]	; (80039f0 <TIM_Base_SetConfig+0x98>)
 800395c:	4290      	cmp	r0, r2
 800395e:	d014      	beq.n	800398a <TIM_Base_SetConfig+0x32>
 8003960:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003964:	d02b      	beq.n	80039be <TIM_Base_SetConfig+0x66>
 8003966:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800396a:	4290      	cmp	r0, r2
 800396c:	d022      	beq.n	80039b4 <TIM_Base_SetConfig+0x5c>
 800396e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003972:	4290      	cmp	r0, r2
 8003974:	d037      	beq.n	80039e6 <TIM_Base_SetConfig+0x8e>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003976:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800397a:	694a      	ldr	r2, [r1, #20]
 800397c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800397e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003980:	688b      	ldr	r3, [r1, #8]
 8003982:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003984:	680b      	ldr	r3, [r1, #0]
 8003986:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003988:	e02a      	b.n	80039e0 <TIM_Base_SetConfig+0x88>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800398a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800398e:	684a      	ldr	r2, [r1, #4]
 8003990:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8003992:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003996:	68ca      	ldr	r2, [r1, #12]
 8003998:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800399a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800399e:	694a      	ldr	r2, [r1, #20]
 80039a0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80039a2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039a4:	688b      	ldr	r3, [r1, #8]
 80039a6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80039a8:	680b      	ldr	r3, [r1, #0]
 80039aa:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80039ac:	690a      	ldr	r2, [r1, #16]
 80039ae:	4b10      	ldr	r3, [pc, #64]	; (80039f0 <TIM_Base_SetConfig+0x98>)
 80039b0:	631a      	str	r2, [r3, #48]	; 0x30
 80039b2:	e015      	b.n	80039e0 <TIM_Base_SetConfig+0x88>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80039b8:	684a      	ldr	r2, [r1, #4]
 80039ba:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039bc:	e003      	b.n	80039c6 <TIM_Base_SetConfig+0x6e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80039c2:	684a      	ldr	r2, [r1, #4]
 80039c4:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80039c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039ca:	68ca      	ldr	r2, [r1, #12]
 80039cc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039d2:	694a      	ldr	r2, [r1, #20]
 80039d4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80039d6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039d8:	688b      	ldr	r3, [r1, #8]
 80039da:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80039dc:	680b      	ldr	r3, [r1, #0]
 80039de:	6283      	str	r3, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80039e0:	2301      	movs	r3, #1
 80039e2:	6143      	str	r3, [r0, #20]
}
 80039e4:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80039ea:	684a      	ldr	r2, [r1, #4]
 80039ec:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039ee:	e7ea      	b.n	80039c6 <TIM_Base_SetConfig+0x6e>
 80039f0:	40012c00 	.word	0x40012c00

080039f4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80039f4:	b340      	cbz	r0, 8003a48 <HAL_TIM_Base_Init+0x54>
{
 80039f6:	b510      	push	{r4, lr}
 80039f8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80039fa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80039fe:	b1f3      	cbz	r3, 8003a3e <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003a00:	2302      	movs	r3, #2
 8003a02:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a06:	4621      	mov	r1, r4
 8003a08:	f851 0b04 	ldr.w	r0, [r1], #4
 8003a0c:	f7ff ffa4 	bl	8003958 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a10:	2301      	movs	r3, #1
 8003a12:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a16:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003a1a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003a1e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003a22:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a2e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003a32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003a36:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003a3a:	2000      	movs	r0, #0
}
 8003a3c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003a3e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003a42:	f7fe f997 	bl	8001d74 <HAL_TIM_Base_MspInit>
 8003a46:	e7db      	b.n	8003a00 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003a48:	2001      	movs	r0, #1
}
 8003a4a:	4770      	bx	lr

08003a4c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003a4c:	b340      	cbz	r0, 8003aa0 <HAL_TIM_PWM_Init+0x54>
{
 8003a4e:	b510      	push	{r4, lr}
 8003a50:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003a52:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003a56:	b1f3      	cbz	r3, 8003a96 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003a58:	2302      	movs	r3, #2
 8003a5a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a5e:	4621      	mov	r1, r4
 8003a60:	f851 0b04 	ldr.w	r0, [r1], #4
 8003a64:	f7ff ff78 	bl	8003958 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a6e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003a72:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003a76:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003a7a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a7e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a86:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003a8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003a8e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003a92:	2000      	movs	r0, #0
}
 8003a94:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003a96:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003a9a:	f7ff fe9a 	bl	80037d2 <HAL_TIM_PWM_MspInit>
 8003a9e:	e7db      	b.n	8003a58 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8003aa0:	2001      	movs	r0, #1
}
 8003aa2:	4770      	bx	lr

08003aa4 <TIM_OC2_SetConfig>:
{
 8003aa4:	b470      	push	{r4, r5, r6}
  tmpccer = TIMx->CCER;
 8003aa6:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aa8:	6a02      	ldr	r2, [r0, #32]
 8003aaa:	f022 0210 	bic.w	r2, r2, #16
 8003aae:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003ab0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003ab2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ab4:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ab8:	680d      	ldr	r5, [r1, #0]
 8003aba:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8003abe:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ac2:	688d      	ldr	r5, [r1, #8]
 8003ac4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ac8:	4d0c      	ldr	r5, [pc, #48]	; (8003afc <TIM_OC2_SetConfig+0x58>)
 8003aca:	42a8      	cmp	r0, r5
 8003acc:	d006      	beq.n	8003adc <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 8003ace:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003ad0:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003ad2:	684a      	ldr	r2, [r1, #4]
 8003ad4:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003ad6:	6203      	str	r3, [r0, #32]
}
 8003ad8:	bc70      	pop	{r4, r5, r6}
 8003ada:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8003adc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ae0:	68cd      	ldr	r5, [r1, #12]
 8003ae2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ae6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003aea:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003aee:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003af0:	698e      	ldr	r6, [r1, #24]
 8003af2:	4335      	orrs	r5, r6
 8003af4:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8003af8:	e7e9      	b.n	8003ace <TIM_OC2_SetConfig+0x2a>
 8003afa:	bf00      	nop
 8003afc:	40012c00 	.word	0x40012c00

08003b00 <HAL_TIM_PWM_ConfigChannel>:
{
 8003b00:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003b02:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d066      	beq.n	8003bd8 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8003b0a:	4604      	mov	r4, r0
 8003b0c:	460d      	mov	r5, r1
 8003b0e:	2301      	movs	r3, #1
 8003b10:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8003b14:	2a0c      	cmp	r2, #12
 8003b16:	d85a      	bhi.n	8003bce <HAL_TIM_PWM_ConfigChannel+0xce>
 8003b18:	e8df f002 	tbb	[pc, r2]
 8003b1c:	59595907 	.word	0x59595907
 8003b20:	5959591b 	.word	0x5959591b
 8003b24:	59595930 	.word	0x59595930
 8003b28:	44          	.byte	0x44
 8003b29:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b2a:	6800      	ldr	r0, [r0, #0]
 8003b2c:	f7ff fd8a 	bl	8003644 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b30:	6822      	ldr	r2, [r4, #0]
 8003b32:	6993      	ldr	r3, [r2, #24]
 8003b34:	f043 0308 	orr.w	r3, r3, #8
 8003b38:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b3a:	6822      	ldr	r2, [r4, #0]
 8003b3c:	6993      	ldr	r3, [r2, #24]
 8003b3e:	f023 0304 	bic.w	r3, r3, #4
 8003b42:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b44:	6822      	ldr	r2, [r4, #0]
 8003b46:	6993      	ldr	r3, [r2, #24]
 8003b48:	6929      	ldr	r1, [r5, #16]
 8003b4a:	430b      	orrs	r3, r1
 8003b4c:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003b4e:	2000      	movs	r0, #0
      break;
 8003b50:	e03e      	b.n	8003bd0 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b52:	6800      	ldr	r0, [r0, #0]
 8003b54:	f7ff ffa6 	bl	8003aa4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b58:	6822      	ldr	r2, [r4, #0]
 8003b5a:	6993      	ldr	r3, [r2, #24]
 8003b5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003b60:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b62:	6822      	ldr	r2, [r4, #0]
 8003b64:	6993      	ldr	r3, [r2, #24]
 8003b66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b6a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b6c:	6822      	ldr	r2, [r4, #0]
 8003b6e:	6993      	ldr	r3, [r2, #24]
 8003b70:	6929      	ldr	r1, [r5, #16]
 8003b72:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003b76:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003b78:	2000      	movs	r0, #0
      break;
 8003b7a:	e029      	b.n	8003bd0 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b7c:	6800      	ldr	r0, [r0, #0]
 8003b7e:	f7ff fd8b 	bl	8003698 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b82:	6822      	ldr	r2, [r4, #0]
 8003b84:	69d3      	ldr	r3, [r2, #28]
 8003b86:	f043 0308 	orr.w	r3, r3, #8
 8003b8a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b8c:	6822      	ldr	r2, [r4, #0]
 8003b8e:	69d3      	ldr	r3, [r2, #28]
 8003b90:	f023 0304 	bic.w	r3, r3, #4
 8003b94:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b96:	6822      	ldr	r2, [r4, #0]
 8003b98:	69d3      	ldr	r3, [r2, #28]
 8003b9a:	6929      	ldr	r1, [r5, #16]
 8003b9c:	430b      	orrs	r3, r1
 8003b9e:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003ba0:	2000      	movs	r0, #0
      break;
 8003ba2:	e015      	b.n	8003bd0 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ba4:	6800      	ldr	r0, [r0, #0]
 8003ba6:	f7ff fda3 	bl	80036f0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003baa:	6822      	ldr	r2, [r4, #0]
 8003bac:	69d3      	ldr	r3, [r2, #28]
 8003bae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003bb2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bb4:	6822      	ldr	r2, [r4, #0]
 8003bb6:	69d3      	ldr	r3, [r2, #28]
 8003bb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bbc:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bbe:	6822      	ldr	r2, [r4, #0]
 8003bc0:	69d3      	ldr	r3, [r2, #28]
 8003bc2:	6929      	ldr	r1, [r5, #16]
 8003bc4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003bc8:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003bca:	2000      	movs	r0, #0
      break;
 8003bcc:	e000      	b.n	8003bd0 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8003bce:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003bd6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8003bd8:	2002      	movs	r0, #2
 8003bda:	e7fc      	b.n	8003bd6 <HAL_TIM_PWM_ConfigChannel+0xd6>

08003bdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bdc:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bde:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003be0:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003be4:	430a      	orrs	r2, r1
 8003be6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003bea:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bee:	6082      	str	r2, [r0, #8]
}
 8003bf0:	bc10      	pop	{r4}
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003bf4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	f000 80ae 	beq.w	8003d5a <HAL_TIM_ConfigClockSource+0x166>
{
 8003bfe:	b570      	push	{r4, r5, r6, lr}
 8003c00:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003c02:	2301      	movs	r3, #1
 8003c04:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003c08:	2302      	movs	r3, #2
 8003c0a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003c0e:	6802      	ldr	r2, [r0, #0]
 8003c10:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003c1a:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003c1c:	680b      	ldr	r3, [r1, #0]
 8003c1e:	2b60      	cmp	r3, #96	; 0x60
 8003c20:	d060      	beq.n	8003ce4 <HAL_TIM_ConfigClockSource+0xf0>
 8003c22:	d83d      	bhi.n	8003ca0 <HAL_TIM_ConfigClockSource+0xac>
 8003c24:	2b40      	cmp	r3, #64	; 0x40
 8003c26:	d079      	beq.n	8003d1c <HAL_TIM_ConfigClockSource+0x128>
 8003c28:	d91c      	bls.n	8003c64 <HAL_TIM_ConfigClockSource+0x70>
 8003c2a:	2b50      	cmp	r3, #80	; 0x50
 8003c2c:	d136      	bne.n	8003c9c <HAL_TIM_ConfigClockSource+0xa8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c2e:	6803      	ldr	r3, [r0, #0]
 8003c30:	6848      	ldr	r0, [r1, #4]
 8003c32:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8003c34:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c36:	6a1a      	ldr	r2, [r3, #32]
 8003c38:	f022 0201 	bic.w	r2, r2, #1
 8003c3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c3e:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c40:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c44:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c48:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8003c4c:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8003c4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c50:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c52:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8003c54:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c5a:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8003c5e:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003c60:	2000      	movs	r0, #0
}
 8003c62:	e012      	b.n	8003c8a <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8003c64:	2b20      	cmp	r3, #32
 8003c66:	d002      	beq.n	8003c6e <HAL_TIM_ConfigClockSource+0x7a>
 8003c68:	d90b      	bls.n	8003c82 <HAL_TIM_ConfigClockSource+0x8e>
 8003c6a:	2b30      	cmp	r3, #48	; 0x30
 8003c6c:	d114      	bne.n	8003c98 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c6e:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8003c70:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c72:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c76:	4313      	orrs	r3, r2
 8003c78:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8003c7c:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003c7e:	2000      	movs	r0, #0
}
 8003c80:	e003      	b.n	8003c8a <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8003c82:	f033 0210 	bics.w	r2, r3, #16
 8003c86:	d0f2      	beq.n	8003c6e <HAL_TIM_ConfigClockSource+0x7a>
 8003c88:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003c90:	2300      	movs	r3, #0
 8003c92:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003c96:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8003c98:	2001      	movs	r0, #1
 8003c9a:	e7f6      	b.n	8003c8a <HAL_TIM_ConfigClockSource+0x96>
 8003c9c:	2001      	movs	r0, #1
 8003c9e:	e7f4      	b.n	8003c8a <HAL_TIM_ConfigClockSource+0x96>
 8003ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca4:	d055      	beq.n	8003d52 <HAL_TIM_ConfigClockSource+0x15e>
 8003ca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003caa:	d10c      	bne.n	8003cc6 <HAL_TIM_ConfigClockSource+0xd2>
      TIM_ETR_SetConfig(htim->Instance,
 8003cac:	68cb      	ldr	r3, [r1, #12]
 8003cae:	684a      	ldr	r2, [r1, #4]
 8003cb0:	6889      	ldr	r1, [r1, #8]
 8003cb2:	6800      	ldr	r0, [r0, #0]
 8003cb4:	f7ff ff92 	bl	8003bdc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cb8:	6822      	ldr	r2, [r4, #0]
 8003cba:	6893      	ldr	r3, [r2, #8]
 8003cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cc0:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003cc2:	2000      	movs	r0, #0
      break;
 8003cc4:	e7e1      	b.n	8003c8a <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8003cc6:	2b70      	cmp	r3, #112	; 0x70
 8003cc8:	d145      	bne.n	8003d56 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ETR_SetConfig(htim->Instance,
 8003cca:	68cb      	ldr	r3, [r1, #12]
 8003ccc:	684a      	ldr	r2, [r1, #4]
 8003cce:	6889      	ldr	r1, [r1, #8]
 8003cd0:	6800      	ldr	r0, [r0, #0]
 8003cd2:	f7ff ff83 	bl	8003bdc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003cd6:	6822      	ldr	r2, [r4, #0]
 8003cd8:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cda:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003cde:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003ce0:	2000      	movs	r0, #0
      break;
 8003ce2:	e7d2      	b.n	8003c8a <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ce4:	6803      	ldr	r3, [r0, #0]
 8003ce6:	684d      	ldr	r5, [r1, #4]
 8003ce8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8003cea:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cec:	6a18      	ldr	r0, [r3, #32]
 8003cee:	f020 0010 	bic.w	r0, r0, #16
 8003cf2:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cf4:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cf6:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cfa:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cfe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d02:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8003d06:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d08:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d0a:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8003d0c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d12:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8003d16:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003d18:	2000      	movs	r0, #0
}
 8003d1a:	e7b6      	b.n	8003c8a <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d1c:	6803      	ldr	r3, [r0, #0]
 8003d1e:	6848      	ldr	r0, [r1, #4]
 8003d20:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8003d22:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d24:	6a1a      	ldr	r2, [r3, #32]
 8003d26:	f022 0201 	bic.w	r2, r2, #1
 8003d2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d2c:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d2e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d32:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d36:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8003d3a:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8003d3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d3e:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d40:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8003d42:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d48:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8003d4c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003d4e:	2000      	movs	r0, #0
}
 8003d50:	e79b      	b.n	8003c8a <HAL_TIM_ConfigClockSource+0x96>
  HAL_StatusTypeDef status = HAL_OK;
 8003d52:	2000      	movs	r0, #0
 8003d54:	e799      	b.n	8003c8a <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8003d56:	2001      	movs	r0, #1
 8003d58:	e797      	b.n	8003c8a <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 8003d5a:	2002      	movs	r0, #2
}
 8003d5c:	4770      	bx	lr

08003d5e <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d5e:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d62:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d64:	f04f 0c01 	mov.w	ip, #1
 8003d68:	fa0c fc01 	lsl.w	ip, ip, r1
  TIMx->CCER &= ~tmp;
 8003d6c:	ea23 030c 	bic.w	r3, r3, ip
 8003d70:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d72:	6a03      	ldr	r3, [r0, #32]
 8003d74:	408a      	lsls	r2, r1
 8003d76:	431a      	orrs	r2, r3
 8003d78:	6202      	str	r2, [r0, #32]
}
 8003d7a:	4770      	bx	lr

08003d7c <HAL_TIM_PWM_Start>:
{
 8003d7c:	b510      	push	{r4, lr}
 8003d7e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d80:	4608      	mov	r0, r1
 8003d82:	bb01      	cbnz	r1, 8003dc6 <HAL_TIM_PWM_Start+0x4a>
 8003d84:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d152      	bne.n	8003e34 <HAL_TIM_PWM_Start+0xb8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d8e:	2302      	movs	r3, #2
 8003d90:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d94:	2201      	movs	r2, #1
 8003d96:	4601      	mov	r1, r0
 8003d98:	6820      	ldr	r0, [r4, #0]
 8003d9a:	f7ff ffe0 	bl	8003d5e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d9e:	6823      	ldr	r3, [r4, #0]
 8003da0:	4a26      	ldr	r2, [pc, #152]	; (8003e3c <HAL_TIM_PWM_Start+0xc0>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d034      	beq.n	8003e10 <HAL_TIM_PWM_Start+0x94>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003daa:	d038      	beq.n	8003e1e <HAL_TIM_PWM_Start+0xa2>
 8003dac:	4a24      	ldr	r2, [pc, #144]	; (8003e40 <HAL_TIM_PWM_Start+0xc4>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d035      	beq.n	8003e1e <HAL_TIM_PWM_Start+0xa2>
 8003db2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d031      	beq.n	8003e1e <HAL_TIM_PWM_Start+0xa2>
    __HAL_TIM_ENABLE(htim);
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	f042 0201 	orr.w	r2, r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003dc2:	2000      	movs	r0, #0
 8003dc4:	e035      	b.n	8003e32 <HAL_TIM_PWM_Start+0xb6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003dc6:	2904      	cmp	r1, #4
 8003dc8:	d00c      	beq.n	8003de4 <HAL_TIM_PWM_Start+0x68>
 8003dca:	2908      	cmp	r1, #8
 8003dcc:	bf0c      	ite	eq
 8003dce:	f894 3040 	ldrbeq.w	r3, [r4, #64]	; 0x40
 8003dd2:	f894 3041 	ldrbne.w	r3, [r4, #65]	; 0x41
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	bf18      	it	ne
 8003ddc:	2301      	movne	r3, #1
 8003dde:	b143      	cbz	r3, 8003df2 <HAL_TIM_PWM_Start+0x76>
    return HAL_ERROR;
 8003de0:	2001      	movs	r0, #1
 8003de2:	e026      	b.n	8003e32 <HAL_TIM_PWM_Start+0xb6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003de4:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	3b01      	subs	r3, #1
 8003dec:	bf18      	it	ne
 8003dee:	2301      	movne	r3, #1
 8003df0:	e7f5      	b.n	8003dde <HAL_TIM_PWM_Start+0x62>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003df2:	2804      	cmp	r0, #4
 8003df4:	d008      	beq.n	8003e08 <HAL_TIM_PWM_Start+0x8c>
 8003df6:	2808      	cmp	r0, #8
 8003df8:	f04f 0302 	mov.w	r3, #2
 8003dfc:	bf0c      	ite	eq
 8003dfe:	f884 3040 	strbeq.w	r3, [r4, #64]	; 0x40
 8003e02:	f884 3041 	strbne.w	r3, [r4, #65]	; 0x41
 8003e06:	e7c5      	b.n	8003d94 <HAL_TIM_PWM_Start+0x18>
 8003e08:	2302      	movs	r3, #2
 8003e0a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003e0e:	e7c1      	b.n	8003d94 <HAL_TIM_PWM_Start+0x18>
    __HAL_TIM_MOE_ENABLE(htim);
 8003e10:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8003e12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e16:	6453      	str	r3, [r2, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e18:	6823      	ldr	r3, [r4, #0]
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d1c3      	bne.n	8003da6 <HAL_TIM_PWM_Start+0x2a>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e1e:	689a      	ldr	r2, [r3, #8]
 8003e20:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e24:	2a06      	cmp	r2, #6
 8003e26:	d007      	beq.n	8003e38 <HAL_TIM_PWM_Start+0xbc>
      __HAL_TIM_ENABLE(htim);
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	f042 0201 	orr.w	r2, r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003e30:	2000      	movs	r0, #0
}
 8003e32:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003e34:	2001      	movs	r0, #1
 8003e36:	e7fc      	b.n	8003e32 <HAL_TIM_PWM_Start+0xb6>
  return HAL_OK;
 8003e38:	2000      	movs	r0, #0
 8003e3a:	e7fa      	b.n	8003e32 <HAL_TIM_PWM_Start+0xb6>
 8003e3c:	40012c00 	.word	0x40012c00
 8003e40:	40000400 	.word	0x40000400

08003e44 <HAL_TIM_PWM_Stop>:
{
 8003e44:	b538      	push	{r3, r4, r5, lr}
 8003e46:	4604      	mov	r4, r0
 8003e48:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	6800      	ldr	r0, [r0, #0]
 8003e4e:	f7ff ff86 	bl	8003d5e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e52:	6822      	ldr	r2, [r4, #0]
 8003e54:	4b1b      	ldr	r3, [pc, #108]	; (8003ec4 <HAL_TIM_PWM_Stop+0x80>)
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d014      	beq.n	8003e84 <HAL_TIM_PWM_Stop+0x40>
  __HAL_TIM_DISABLE(htim);
 8003e5a:	6823      	ldr	r3, [r4, #0]
 8003e5c:	6a19      	ldr	r1, [r3, #32]
 8003e5e:	f241 1211 	movw	r2, #4369	; 0x1111
 8003e62:	4211      	tst	r1, r2
 8003e64:	d108      	bne.n	8003e78 <HAL_TIM_PWM_Stop+0x34>
 8003e66:	6a19      	ldr	r1, [r3, #32]
 8003e68:	f240 4244 	movw	r2, #1092	; 0x444
 8003e6c:	4211      	tst	r1, r2
 8003e6e:	d103      	bne.n	8003e78 <HAL_TIM_PWM_Stop+0x34>
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	f022 0201 	bic.w	r2, r2, #1
 8003e76:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003e78:	b9ad      	cbnz	r5, 8003ea6 <HAL_TIM_PWM_Stop+0x62>
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8003e80:	2000      	movs	r0, #0
 8003e82:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 8003e84:	6a1a      	ldr	r2, [r3, #32]
 8003e86:	f241 1311 	movw	r3, #4369	; 0x1111
 8003e8a:	421a      	tst	r2, r3
 8003e8c:	d1e5      	bne.n	8003e5a <HAL_TIM_PWM_Stop+0x16>
 8003e8e:	4b0d      	ldr	r3, [pc, #52]	; (8003ec4 <HAL_TIM_PWM_Stop+0x80>)
 8003e90:	6a1a      	ldr	r2, [r3, #32]
 8003e92:	f240 4344 	movw	r3, #1092	; 0x444
 8003e96:	421a      	tst	r2, r3
 8003e98:	d1df      	bne.n	8003e5a <HAL_TIM_PWM_Stop+0x16>
 8003e9a:	4a0a      	ldr	r2, [pc, #40]	; (8003ec4 <HAL_TIM_PWM_Stop+0x80>)
 8003e9c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8003e9e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ea2:	6453      	str	r3, [r2, #68]	; 0x44
 8003ea4:	e7d9      	b.n	8003e5a <HAL_TIM_PWM_Stop+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003ea6:	2d04      	cmp	r5, #4
 8003ea8:	d008      	beq.n	8003ebc <HAL_TIM_PWM_Stop+0x78>
 8003eaa:	2d08      	cmp	r5, #8
 8003eac:	f04f 0301 	mov.w	r3, #1
 8003eb0:	bf0c      	ite	eq
 8003eb2:	f884 3040 	strbeq.w	r3, [r4, #64]	; 0x40
 8003eb6:	f884 3041 	strbne.w	r3, [r4, #65]	; 0x41
 8003eba:	e7e1      	b.n	8003e80 <HAL_TIM_PWM_Stop+0x3c>
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003ec2:	e7dd      	b.n	8003e80 <HAL_TIM_PWM_Stop+0x3c>
 8003ec4:	40012c00 	.word	0x40012c00

08003ec8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ec8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d02b      	beq.n	8003f28 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 8003ed0:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed8:	2302      	movs	r3, #2
 8003eda:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ede:	6804      	ldr	r4, [r0, #0]
 8003ee0:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ee2:	68a2      	ldr	r2, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ee8:	680d      	ldr	r5, [r1, #0]
 8003eea:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003eec:	6063      	str	r3, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eee:	6803      	ldr	r3, [r0, #0]
 8003ef0:	4c0e      	ldr	r4, [pc, #56]	; (8003f2c <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8003ef2:	42a3      	cmp	r3, r4
 8003ef4:	d00a      	beq.n	8003f0c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8003ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003efa:	d007      	beq.n	8003f0c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8003efc:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8003f00:	42a3      	cmp	r3, r4
 8003f02:	d003      	beq.n	8003f0c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8003f04:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003f08:	42a3      	cmp	r3, r4
 8003f0a:	d104      	bne.n	8003f16 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f10:	6849      	ldr	r1, [r1, #4]
 8003f12:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f16:	2301      	movs	r3, #1
 8003f18:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003f22:	4618      	mov	r0, r3
}
 8003f24:	bc30      	pop	{r4, r5}
 8003f26:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003f28:	2002      	movs	r0, #2
}
 8003f2a:	4770      	bx	lr
 8003f2c:	40012c00 	.word	0x40012c00

08003f30 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f30:	4770      	bx	lr

08003f32 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f32:	4770      	bx	lr

08003f34 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f34:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f36:	f102 030c 	add.w	r3, r2, #12
 8003f3a:	e853 3f00 	ldrex	r3, [r3]
 8003f3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f42:	320c      	adds	r2, #12
 8003f44:	e842 3100 	strex	r1, r3, [r2]
 8003f48:	2900      	cmp	r1, #0
 8003f4a:	d1f3      	bne.n	8003f34 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f4c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4e:	f102 0314 	add.w	r3, r2, #20
 8003f52:	e853 3f00 	ldrex	r3, [r3]
 8003f56:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5a:	3214      	adds	r2, #20
 8003f5c:	e842 3100 	strex	r1, r3, [r2]
 8003f60:	2900      	cmp	r1, #0
 8003f62:	d1f3      	bne.n	8003f4c <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f64:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d005      	beq.n	8003f76 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f6a:	2320      	movs	r3, #32
 8003f6c:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f70:	2300      	movs	r3, #0
 8003f72:	6303      	str	r3, [r0, #48]	; 0x30
}
 8003f74:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f76:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f78:	f102 030c 	add.w	r3, r2, #12
 8003f7c:	e853 3f00 	ldrex	r3, [r3]
 8003f80:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f84:	320c      	adds	r2, #12
 8003f86:	e842 3100 	strex	r1, r3, [r2]
 8003f8a:	2900      	cmp	r1, #0
 8003f8c:	d1f3      	bne.n	8003f76 <UART_EndRxTransfer+0x42>
 8003f8e:	e7ec      	b.n	8003f6a <UART_EndRxTransfer+0x36>

08003f90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f90:	b510      	push	{r4, lr}
 8003f92:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f94:	6802      	ldr	r2, [r0, #0]
 8003f96:	6913      	ldr	r3, [r2, #16]
 8003f98:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003f9c:	68c1      	ldr	r1, [r0, #12]
 8003f9e:	430b      	orrs	r3, r1
 8003fa0:	6113      	str	r3, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
  MODIFY_REG(huart->Instance->CR1,
 8003fa2:	6801      	ldr	r1, [r0, #0]
 8003fa4:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003fa6:	6883      	ldr	r3, [r0, #8]
 8003fa8:	6900      	ldr	r0, [r0, #16]
 8003faa:	4303      	orrs	r3, r0
 8003fac:	6960      	ldr	r0, [r4, #20]
 8003fae:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8003fb0:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8003fb4:	f022 020c 	bic.w	r2, r2, #12
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fbc:	6822      	ldr	r2, [r4, #0]
 8003fbe:	6953      	ldr	r3, [r2, #20]
 8003fc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fc4:	69a1      	ldr	r1, [r4, #24]
 8003fc6:	430b      	orrs	r3, r1
 8003fc8:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8003fca:	6822      	ldr	r2, [r4, #0]
 8003fcc:	4b11      	ldr	r3, [pc, #68]	; (8004014 <UART_SetConfig+0x84>)
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d01b      	beq.n	800400a <UART_SetConfig+0x7a>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003fd2:	f7ff fa6b 	bl	80034ac <HAL_RCC_GetPCLK1Freq>
 8003fd6:	4603      	mov	r3, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fd8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003fdc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003fe0:	6862      	ldr	r2, [r4, #4]
 8003fe2:	0092      	lsls	r2, r2, #2
 8003fe4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fe8:	6820      	ldr	r0, [r4, #0]
 8003fea:	490b      	ldr	r1, [pc, #44]	; (8004018 <UART_SetConfig+0x88>)
 8003fec:	fba1 4203 	umull	r4, r2, r1, r3
 8003ff0:	0952      	lsrs	r2, r2, #5
 8003ff2:	2464      	movs	r4, #100	; 0x64
 8003ff4:	fb04 3312 	mls	r3, r4, r2, r3
 8003ff8:	011b      	lsls	r3, r3, #4
 8003ffa:	3332      	adds	r3, #50	; 0x32
 8003ffc:	fba1 1303 	umull	r1, r3, r1, r3
 8004000:	0112      	lsls	r2, r2, #4
 8004002:	eb02 1353 	add.w	r3, r2, r3, lsr #5
 8004006:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8004008:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 800400a:	f7ff fa5f 	bl	80034cc <HAL_RCC_GetPCLK2Freq>
 800400e:	4603      	mov	r3, r0
 8004010:	e7e2      	b.n	8003fd8 <UART_SetConfig+0x48>
 8004012:	bf00      	nop
 8004014:	40013800 	.word	0x40013800
 8004018:	51eb851f 	.word	0x51eb851f

0800401c <HAL_UART_Init>:
  if (huart == NULL)
 800401c:	b360      	cbz	r0, 8004078 <HAL_UART_Init+0x5c>
{
 800401e:	b510      	push	{r4, lr}
 8004020:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004022:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004026:	b313      	cbz	r3, 800406e <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8004028:	2324      	movs	r3, #36	; 0x24
 800402a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 800402e:	6822      	ldr	r2, [r4, #0]
 8004030:	68d3      	ldr	r3, [r2, #12]
 8004032:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004036:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004038:	4620      	mov	r0, r4
 800403a:	f7ff ffa9 	bl	8003f90 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800403e:	6822      	ldr	r2, [r4, #0]
 8004040:	6913      	ldr	r3, [r2, #16]
 8004042:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004046:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004048:	6822      	ldr	r2, [r4, #0]
 800404a:	6953      	ldr	r3, [r2, #20]
 800404c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004050:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8004052:	6822      	ldr	r2, [r4, #0]
 8004054:	68d3      	ldr	r3, [r2, #12]
 8004056:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800405a:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800405c:	2000      	movs	r0, #0
 800405e:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004060:	2320      	movs	r3, #32
 8004062:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004066:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800406a:	6360      	str	r0, [r4, #52]	; 0x34
}
 800406c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800406e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 8004072:	f7fd feef 	bl	8001e54 <HAL_UART_MspInit>
 8004076:	e7d7      	b.n	8004028 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8004078:	2001      	movs	r0, #1
}
 800407a:	4770      	bx	lr

0800407c <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 800407c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b20      	cmp	r3, #32
 8004084:	d110      	bne.n	80040a8 <HAL_UART_Transmit_IT+0x2c>
    if ((pData == NULL) || (Size == 0U))
 8004086:	b189      	cbz	r1, 80040ac <HAL_UART_Transmit_IT+0x30>
 8004088:	b192      	cbz	r2, 80040b0 <HAL_UART_Transmit_IT+0x34>
    huart->pTxBuffPtr = pData;
 800408a:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 800408c:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 800408e:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004090:	2300      	movs	r3, #0
 8004092:	6443      	str	r3, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004094:	2221      	movs	r2, #33	; 0x21
 8004096:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800409a:	6801      	ldr	r1, [r0, #0]
 800409c:	68ca      	ldr	r2, [r1, #12]
 800409e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80040a2:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 80040a4:	4618      	mov	r0, r3
 80040a6:	4770      	bx	lr
    return HAL_BUSY;
 80040a8:	2002      	movs	r0, #2
 80040aa:	4770      	bx	lr
      return HAL_ERROR;
 80040ac:	2001      	movs	r0, #1
 80040ae:	4770      	bx	lr
 80040b0:	2001      	movs	r0, #1
}
 80040b2:	4770      	bx	lr

080040b4 <HAL_UART_ErrorCallback>:
}
 80040b4:	4770      	bx	lr

080040b6 <UART_DMAAbortOnError>:
{
 80040b6:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040b8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80040ba:	2300      	movs	r3, #0
 80040bc:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80040be:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80040c0:	f7ff fff8 	bl	80040b4 <HAL_UART_ErrorCallback>
}
 80040c4:	bd08      	pop	{r3, pc}

080040c6 <HAL_UART_AbortReceiveCpltCallback>:
}
 80040c6:	4770      	bx	lr

080040c8 <HAL_UART_AbortReceive_IT>:
{
 80040c8:	b510      	push	{r4, lr}
 80040ca:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040cc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ce:	f102 030c 	add.w	r3, r2, #12
 80040d2:	e853 3f00 	ldrex	r3, [r3]
 80040d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040da:	320c      	adds	r2, #12
 80040dc:	e842 3100 	strex	r1, r3, [r2]
 80040e0:	2900      	cmp	r1, #0
 80040e2:	d1f3      	bne.n	80040cc <HAL_UART_AbortReceive_IT+0x4>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e6:	f102 0314 	add.w	r3, r2, #20
 80040ea:	e853 3f00 	ldrex	r3, [r3]
 80040ee:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f2:	3214      	adds	r2, #20
 80040f4:	e842 3100 	strex	r1, r3, [r2]
 80040f8:	2900      	cmp	r1, #0
 80040fa:	d1f3      	bne.n	80040e4 <HAL_UART_AbortReceive_IT+0x1c>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d01c      	beq.n	800413c <HAL_UART_AbortReceive_IT+0x74>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004102:	6823      	ldr	r3, [r4, #0]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	f013 0f40 	tst.w	r3, #64	; 0x40
 800410a:	d02e      	beq.n	800416a <HAL_UART_AbortReceive_IT+0xa2>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800410c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410e:	f102 0314 	add.w	r3, r2, #20
 8004112:	e853 3f00 	ldrex	r3, [r3]
 8004116:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411a:	3214      	adds	r2, #20
 800411c:	e842 3100 	strex	r1, r3, [r2]
 8004120:	2900      	cmp	r1, #0
 8004122:	d1f3      	bne.n	800410c <HAL_UART_AbortReceive_IT+0x44>
    if (huart->hdmarx != NULL)
 8004124:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004126:	b1b3      	cbz	r3, 8004156 <HAL_UART_AbortReceive_IT+0x8e>
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8004128:	4a15      	ldr	r2, [pc, #84]	; (8004180 <HAL_UART_AbortReceive_IT+0xb8>)
 800412a:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800412c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800412e:	f7fe fb45 	bl	80027bc <HAL_DMA_Abort_IT>
 8004132:	b318      	cbz	r0, 800417c <HAL_UART_AbortReceive_IT+0xb4>
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004134:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004136:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004138:	4798      	blx	r3
 800413a:	e01f      	b.n	800417c <HAL_UART_AbortReceive_IT+0xb4>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800413c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413e:	f102 030c 	add.w	r3, r2, #12
 8004142:	e853 3f00 	ldrex	r3, [r3]
 8004146:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414a:	320c      	adds	r2, #12
 800414c:	e842 3100 	strex	r1, r3, [r2]
 8004150:	2900      	cmp	r1, #0
 8004152:	d1f3      	bne.n	800413c <HAL_UART_AbortReceive_IT+0x74>
 8004154:	e7d5      	b.n	8004102 <HAL_UART_AbortReceive_IT+0x3a>
      huart->RxXferCount = 0x00U;
 8004156:	2300      	movs	r3, #0
 8004158:	85e3      	strh	r3, [r4, #46]	; 0x2e
      huart->RxState = HAL_UART_STATE_READY;
 800415a:	2220      	movs	r2, #32
 800415c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004160:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_UART_AbortReceiveCpltCallback(huart);
 8004162:	4620      	mov	r0, r4
 8004164:	f7ff ffaf 	bl	80040c6 <HAL_UART_AbortReceiveCpltCallback>
 8004168:	e008      	b.n	800417c <HAL_UART_AbortReceive_IT+0xb4>
    huart->RxXferCount = 0x00U;
 800416a:	2300      	movs	r3, #0
 800416c:	85e3      	strh	r3, [r4, #46]	; 0x2e
    huart->RxState = HAL_UART_STATE_READY;
 800416e:	2220      	movs	r2, #32
 8004170:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004174:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_UART_AbortReceiveCpltCallback(huart);
 8004176:	4620      	mov	r0, r4
 8004178:	f7ff ffa5 	bl	80040c6 <HAL_UART_AbortReceiveCpltCallback>
}
 800417c:	2000      	movs	r0, #0
 800417e:	bd10      	pop	{r4, pc}
 8004180:	08004185 	.word	0x08004185

08004184 <UART_DMARxOnlyAbortCallback>:
{
 8004184:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004186:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8004188:	2300      	movs	r3, #0
 800418a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->RxState = HAL_UART_STATE_READY;
 800418c:	2220      	movs	r2, #32
 800418e:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004192:	6303      	str	r3, [r0, #48]	; 0x30
  HAL_UART_AbortReceiveCpltCallback(huart);
 8004194:	f7ff ff97 	bl	80040c6 <HAL_UART_AbortReceiveCpltCallback>
}
 8004198:	bd08      	pop	{r3, pc}

0800419a <HAL_UARTEx_RxEventCallback>:
}
 800419a:	4770      	bx	lr

0800419c <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800419c:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b22      	cmp	r3, #34	; 0x22
 80041a4:	d11e      	bne.n	80041e4 <UART_Receive_IT+0x48>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041a6:	6883      	ldr	r3, [r0, #8]
 80041a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ac:	d006      	beq.n	80041bc <UART_Receive_IT+0x20>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80041ae:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041b0:	b183      	cbz	r3, 80041d4 <UART_Receive_IT+0x38>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041b2:	6803      	ldr	r3, [r0, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041ba:	e01b      	b.n	80041f4 <UART_Receive_IT+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041bc:	6903      	ldr	r3, [r0, #16]
 80041be:	b9ab      	cbnz	r3, 80041ec <UART_Receive_IT+0x50>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041c0:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041c2:	6803      	ldr	r3, [r0, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ca:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80041cc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80041ce:	3302      	adds	r3, #2
 80041d0:	6283      	str	r3, [r0, #40]	; 0x28
 80041d2:	e013      	b.n	80041fc <UART_Receive_IT+0x60>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041d4:	6903      	ldr	r3, [r0, #16]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1eb      	bne.n	80041b2 <UART_Receive_IT+0x16>
 80041da:	e008      	b.n	80041ee <UART_Receive_IT+0x52>
        HAL_UART_RxCpltCallback(huart);
 80041dc:	f000 ff72 	bl	80050c4 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80041e0:	2000      	movs	r0, #0
 80041e2:	e048      	b.n	8004276 <UART_Receive_IT+0xda>
    return HAL_BUSY;
 80041e4:	2002      	movs	r0, #2
 80041e6:	4770      	bx	lr
    return HAL_OK;
 80041e8:	2000      	movs	r0, #0
}
 80041ea:	4770      	bx	lr
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80041ec:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041ee:	6803      	ldr	r3, [r0, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 80041f6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80041f8:	3301      	adds	r3, #1
 80041fa:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80041fc:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80041fe:	3b01      	subs	r3, #1
 8004200:	b29b      	uxth	r3, r3
 8004202:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1ef      	bne.n	80041e8 <UART_Receive_IT+0x4c>
{
 8004208:	b500      	push	{lr}
 800420a:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800420c:	6802      	ldr	r2, [r0, #0]
 800420e:	68d3      	ldr	r3, [r2, #12]
 8004210:	f023 0320 	bic.w	r3, r3, #32
 8004214:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004216:	6802      	ldr	r2, [r0, #0]
 8004218:	68d3      	ldr	r3, [r2, #12]
 800421a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800421e:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004220:	6802      	ldr	r2, [r0, #0]
 8004222:	6953      	ldr	r3, [r2, #20]
 8004224:	f023 0301 	bic.w	r3, r3, #1
 8004228:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800422a:	2320      	movs	r3, #32
 800422c:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004230:	2300      	movs	r3, #0
 8004232:	6343      	str	r3, [r0, #52]	; 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004234:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004236:	2b01      	cmp	r3, #1
 8004238:	d1d0      	bne.n	80041dc <UART_Receive_IT+0x40>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800423a:	2300      	movs	r3, #0
 800423c:	6303      	str	r3, [r0, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800423e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004240:	f102 030c 	add.w	r3, r2, #12
 8004244:	e853 3f00 	ldrex	r3, [r3]
 8004248:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424c:	320c      	adds	r2, #12
 800424e:	e842 3100 	strex	r1, r3, [r2]
 8004252:	2900      	cmp	r1, #0
 8004254:	d1f3      	bne.n	800423e <UART_Receive_IT+0xa2>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004256:	6803      	ldr	r3, [r0, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	f012 0f10 	tst.w	r2, #16
 800425e:	d006      	beq.n	800426e <UART_Receive_IT+0xd2>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004260:	2200      	movs	r2, #0
 8004262:	9201      	str	r2, [sp, #4]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	9201      	str	r2, [sp, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	9301      	str	r3, [sp, #4]
 800426c:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800426e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8004270:	f7ff ff93 	bl	800419a <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8004274:	2000      	movs	r0, #0
}
 8004276:	b003      	add	sp, #12
 8004278:	f85d fb04 	ldr.w	pc, [sp], #4

0800427c <HAL_UART_IRQHandler>:
{
 800427c:	b510      	push	{r4, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004282:	6802      	ldr	r2, [r0, #0]
 8004284:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004286:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004288:	6950      	ldr	r0, [r2, #20]
  if (errorflags == RESET)
 800428a:	f013 0f0f 	tst.w	r3, #15
 800428e:	d109      	bne.n	80042a4 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004290:	f013 0f20 	tst.w	r3, #32
 8004294:	d00d      	beq.n	80042b2 <HAL_UART_IRQHandler+0x36>
 8004296:	f011 0f20 	tst.w	r1, #32
 800429a:	d00a      	beq.n	80042b2 <HAL_UART_IRQHandler+0x36>
      UART_Receive_IT(huart);
 800429c:	4620      	mov	r0, r4
 800429e:	f7ff ff7d 	bl	800419c <UART_Receive_IT>
      return;
 80042a2:	e017      	b.n	80042d4 <HAL_UART_IRQHandler+0x58>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80042a4:	f000 0001 	and.w	r0, r0, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80042a8:	f401 7c90 	and.w	ip, r1, #288	; 0x120
 80042ac:	ea5c 0c00 	orrs.w	ip, ip, r0
 80042b0:	d112      	bne.n	80042d8 <HAL_UART_IRQHandler+0x5c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042b2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80042b4:	2801      	cmp	r0, #1
 80042b6:	d07f      	beq.n	80043b8 <HAL_UART_IRQHandler+0x13c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80042b8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80042bc:	d003      	beq.n	80042c6 <HAL_UART_IRQHandler+0x4a>
 80042be:	f011 0f80 	tst.w	r1, #128	; 0x80
 80042c2:	f040 8119 	bne.w	80044f8 <HAL_UART_IRQHandler+0x27c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80042c6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80042ca:	d003      	beq.n	80042d4 <HAL_UART_IRQHandler+0x58>
 80042cc:	f011 0f40 	tst.w	r1, #64	; 0x40
 80042d0:	f040 813f 	bne.w	8004552 <HAL_UART_IRQHandler+0x2d6>
}
 80042d4:	b002      	add	sp, #8
 80042d6:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80042d8:	f013 0f01 	tst.w	r3, #1
 80042dc:	d006      	beq.n	80042ec <HAL_UART_IRQHandler+0x70>
 80042de:	f411 7f80 	tst.w	r1, #256	; 0x100
 80042e2:	d003      	beq.n	80042ec <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042e4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80042e6:	f042 0201 	orr.w	r2, r2, #1
 80042ea:	6462      	str	r2, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042ec:	f013 0f04 	tst.w	r3, #4
 80042f0:	d02f      	beq.n	8004352 <HAL_UART_IRQHandler+0xd6>
 80042f2:	b158      	cbz	r0, 800430c <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042f4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80042f6:	f042 0202 	orr.w	r2, r2, #2
 80042fa:	6462      	str	r2, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042fc:	f013 0f02 	tst.w	r3, #2
 8004300:	f000 8132 	beq.w	8004568 <HAL_UART_IRQHandler+0x2ec>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004304:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004306:	f042 0204 	orr.w	r2, r2, #4
 800430a:	6462      	str	r2, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800430c:	f013 0f08 	tst.w	r3, #8
 8004310:	d007      	beq.n	8004322 <HAL_UART_IRQHandler+0xa6>
 8004312:	f001 0220 	and.w	r2, r1, #32
 8004316:	4302      	orrs	r2, r0
 8004318:	d003      	beq.n	8004322 <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800431a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800431c:	f042 0208 	orr.w	r2, r2, #8
 8004320:	6462      	str	r2, [r4, #68]	; 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004322:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004324:	2a00      	cmp	r2, #0
 8004326:	d0d5      	beq.n	80042d4 <HAL_UART_IRQHandler+0x58>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004328:	f013 0f20 	tst.w	r3, #32
 800432c:	d002      	beq.n	8004334 <HAL_UART_IRQHandler+0xb8>
 800432e:	f011 0f20 	tst.w	r1, #32
 8004332:	d114      	bne.n	800435e <HAL_UART_IRQHandler+0xe2>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004334:	6823      	ldr	r3, [r4, #0]
 8004336:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004338:	6c63      	ldr	r3, [r4, #68]	; 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800433a:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800433e:	f003 0308 	and.w	r3, r3, #8
 8004342:	4313      	orrs	r3, r2
 8004344:	d10f      	bne.n	8004366 <HAL_UART_IRQHandler+0xea>
        HAL_UART_ErrorCallback(huart);
 8004346:	4620      	mov	r0, r4
 8004348:	f7ff feb4 	bl	80040b4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800434c:	2300      	movs	r3, #0
 800434e:	6463      	str	r3, [r4, #68]	; 0x44
 8004350:	e7c0      	b.n	80042d4 <HAL_UART_IRQHandler+0x58>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004352:	f013 0f02 	tst.w	r3, #2
 8004356:	d0d9      	beq.n	800430c <HAL_UART_IRQHandler+0x90>
 8004358:	2800      	cmp	r0, #0
 800435a:	d0d7      	beq.n	800430c <HAL_UART_IRQHandler+0x90>
 800435c:	e7d2      	b.n	8004304 <HAL_UART_IRQHandler+0x88>
        UART_Receive_IT(huart);
 800435e:	4620      	mov	r0, r4
 8004360:	f7ff ff1c 	bl	800419c <UART_Receive_IT>
 8004364:	e7e6      	b.n	8004334 <HAL_UART_IRQHandler+0xb8>
        UART_EndRxTransfer(huart);
 8004366:	4620      	mov	r0, r4
 8004368:	f7ff fde4 	bl	8003f34 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800436c:	6823      	ldr	r3, [r4, #0]
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004374:	d01c      	beq.n	80043b0 <HAL_UART_IRQHandler+0x134>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004376:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004378:	f102 0314 	add.w	r3, r2, #20
 800437c:	e853 3f00 	ldrex	r3, [r3]
 8004380:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004384:	3214      	adds	r2, #20
 8004386:	e842 3100 	strex	r1, r3, [r2]
 800438a:	2900      	cmp	r1, #0
 800438c:	d1f3      	bne.n	8004376 <HAL_UART_IRQHandler+0xfa>
          if (huart->hdmarx != NULL)
 800438e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004390:	b153      	cbz	r3, 80043a8 <HAL_UART_IRQHandler+0x12c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004392:	4a78      	ldr	r2, [pc, #480]	; (8004574 <HAL_UART_IRQHandler+0x2f8>)
 8004394:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004396:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004398:	f7fe fa10 	bl	80027bc <HAL_DMA_Abort_IT>
 800439c:	2800      	cmp	r0, #0
 800439e:	d099      	beq.n	80042d4 <HAL_UART_IRQHandler+0x58>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043a0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80043a2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80043a4:	4798      	blx	r3
 80043a6:	e795      	b.n	80042d4 <HAL_UART_IRQHandler+0x58>
            HAL_UART_ErrorCallback(huart);
 80043a8:	4620      	mov	r0, r4
 80043aa:	f7ff fe83 	bl	80040b4 <HAL_UART_ErrorCallback>
 80043ae:	e791      	b.n	80042d4 <HAL_UART_IRQHandler+0x58>
          HAL_UART_ErrorCallback(huart);
 80043b0:	4620      	mov	r0, r4
 80043b2:	f7ff fe7f 	bl	80040b4 <HAL_UART_ErrorCallback>
 80043b6:	e78d      	b.n	80042d4 <HAL_UART_IRQHandler+0x58>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80043b8:	f013 0f10 	tst.w	r3, #16
 80043bc:	f43f af7c 	beq.w	80042b8 <HAL_UART_IRQHandler+0x3c>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80043c0:	f011 0f10 	tst.w	r1, #16
 80043c4:	f43f af78 	beq.w	80042b8 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043c8:	2300      	movs	r3, #0
 80043ca:	9301      	str	r3, [sp, #4]
 80043cc:	6813      	ldr	r3, [r2, #0]
 80043ce:	9301      	str	r3, [sp, #4]
 80043d0:	6853      	ldr	r3, [r2, #4]
 80043d2:	9301      	str	r3, [sp, #4]
 80043d4:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043d6:	6953      	ldr	r3, [r2, #20]
 80043d8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80043dc:	d050      	beq.n	8004480 <HAL_UART_IRQHandler+0x204>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043de:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80043e0:	6813      	ldr	r3, [r2, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	f43f af74 	beq.w	80042d4 <HAL_UART_IRQHandler+0x58>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80043ec:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80043ee:	4299      	cmp	r1, r3
 80043f0:	f67f af70 	bls.w	80042d4 <HAL_UART_IRQHandler+0x58>
        huart->RxXferCount = nb_remaining_rx_data;
 80043f4:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043f6:	6993      	ldr	r3, [r2, #24]
 80043f8:	2b20      	cmp	r3, #32
 80043fa:	d037      	beq.n	800446c <HAL_UART_IRQHandler+0x1f0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043fc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fe:	f102 030c 	add.w	r3, r2, #12
 8004402:	e853 3f00 	ldrex	r3, [r3]
 8004406:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440a:	320c      	adds	r2, #12
 800440c:	e842 3100 	strex	r1, r3, [r2]
 8004410:	2900      	cmp	r1, #0
 8004412:	d1f3      	bne.n	80043fc <HAL_UART_IRQHandler+0x180>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004414:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004416:	f102 0314 	add.w	r3, r2, #20
 800441a:	e853 3f00 	ldrex	r3, [r3]
 800441e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004422:	3214      	adds	r2, #20
 8004424:	e842 3100 	strex	r1, r3, [r2]
 8004428:	2900      	cmp	r1, #0
 800442a:	d1f3      	bne.n	8004414 <HAL_UART_IRQHandler+0x198>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800442c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442e:	f102 0314 	add.w	r3, r2, #20
 8004432:	e853 3f00 	ldrex	r3, [r3]
 8004436:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443a:	3214      	adds	r2, #20
 800443c:	e842 3100 	strex	r1, r3, [r2]
 8004440:	2900      	cmp	r1, #0
 8004442:	d1f3      	bne.n	800442c <HAL_UART_IRQHandler+0x1b0>
          huart->RxState = HAL_UART_STATE_READY;
 8004444:	2320      	movs	r3, #32
 8004446:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800444a:	2300      	movs	r3, #0
 800444c:	6323      	str	r3, [r4, #48]	; 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800444e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004450:	f102 030c 	add.w	r3, r2, #12
 8004454:	e853 3f00 	ldrex	r3, [r3]
 8004458:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445c:	320c      	adds	r2, #12
 800445e:	e842 3100 	strex	r1, r3, [r2]
 8004462:	2900      	cmp	r1, #0
 8004464:	d1f3      	bne.n	800444e <HAL_UART_IRQHandler+0x1d2>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004466:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004468:	f7fe f985 	bl	8002776 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800446c:	2302      	movs	r3, #2
 800446e:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004470:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8004472:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8004474:	1ac9      	subs	r1, r1, r3
 8004476:	b289      	uxth	r1, r1
 8004478:	4620      	mov	r0, r4
 800447a:	f7ff fe8e 	bl	800419a <HAL_UARTEx_RxEventCallback>
 800447e:	e729      	b.n	80042d4 <HAL_UART_IRQHandler+0x58>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004480:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8004482:	b29a      	uxth	r2, r3
      if ((huart->RxXferCount > 0U)
 8004484:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8004486:	b29b      	uxth	r3, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	f43f af23 	beq.w	80042d4 <HAL_UART_IRQHandler+0x58>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800448e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8004490:	1a9b      	subs	r3, r3, r2
 8004492:	b299      	uxth	r1, r3
          && (nb_rx_data > 0U))
 8004494:	2900      	cmp	r1, #0
 8004496:	f43f af1d 	beq.w	80042d4 <HAL_UART_IRQHandler+0x58>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800449a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449c:	f102 030c 	add.w	r3, r2, #12
 80044a0:	e853 3f00 	ldrex	r3, [r3]
 80044a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a8:	320c      	adds	r2, #12
 80044aa:	e842 3000 	strex	r0, r3, [r2]
 80044ae:	2800      	cmp	r0, #0
 80044b0:	d1f3      	bne.n	800449a <HAL_UART_IRQHandler+0x21e>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044b2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b4:	f102 0314 	add.w	r3, r2, #20
 80044b8:	e853 3f00 	ldrex	r3, [r3]
 80044bc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c0:	3214      	adds	r2, #20
 80044c2:	e842 3000 	strex	r0, r3, [r2]
 80044c6:	2800      	cmp	r0, #0
 80044c8:	d1f3      	bne.n	80044b2 <HAL_UART_IRQHandler+0x236>
        huart->RxState = HAL_UART_STATE_READY;
 80044ca:	2320      	movs	r3, #32
 80044cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044d0:	2300      	movs	r3, #0
 80044d2:	6323      	str	r3, [r4, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044d4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d6:	f102 030c 	add.w	r3, r2, #12
 80044da:	e853 3f00 	ldrex	r3, [r3]
 80044de:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e2:	320c      	adds	r2, #12
 80044e4:	e842 3000 	strex	r0, r3, [r2]
 80044e8:	2800      	cmp	r0, #0
 80044ea:	d1f3      	bne.n	80044d4 <HAL_UART_IRQHandler+0x258>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044ec:	2302      	movs	r3, #2
 80044ee:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044f0:	4620      	mov	r0, r4
 80044f2:	f7ff fe52 	bl	800419a <HAL_UARTEx_RxEventCallback>
 80044f6:	e6ed      	b.n	80042d4 <HAL_UART_IRQHandler+0x58>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80044f8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b21      	cmp	r3, #33	; 0x21
 8004500:	f47f aee8 	bne.w	80042d4 <HAL_UART_IRQHandler+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004504:	68a3      	ldr	r3, [r4, #8]
 8004506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800450a:	d016      	beq.n	800453a <HAL_UART_IRQHandler+0x2be>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800450c:	6a23      	ldr	r3, [r4, #32]
 800450e:	1c59      	adds	r1, r3, #1
 8004510:	6221      	str	r1, [r4, #32]
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	6053      	str	r3, [r2, #4]
    if (--huart->TxXferCount == 0U)
 8004516:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004518:	3b01      	subs	r3, #1
 800451a:	b29b      	uxth	r3, r3
 800451c:	84e3      	strh	r3, [r4, #38]	; 0x26
 800451e:	2b00      	cmp	r3, #0
 8004520:	f47f aed8 	bne.w	80042d4 <HAL_UART_IRQHandler+0x58>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004524:	6822      	ldr	r2, [r4, #0]
 8004526:	68d3      	ldr	r3, [r2, #12]
 8004528:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800452c:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800452e:	6822      	ldr	r2, [r4, #0]
 8004530:	68d3      	ldr	r3, [r2, #12]
 8004532:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004536:	60d3      	str	r3, [r2, #12]
 8004538:	e6cc      	b.n	80042d4 <HAL_UART_IRQHandler+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800453a:	6923      	ldr	r3, [r4, #16]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1e5      	bne.n	800450c <HAL_UART_IRQHandler+0x290>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004540:	6a23      	ldr	r3, [r4, #32]
 8004542:	881b      	ldrh	r3, [r3, #0]
 8004544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004548:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 800454a:	6a23      	ldr	r3, [r4, #32]
 800454c:	3302      	adds	r3, #2
 800454e:	6223      	str	r3, [r4, #32]
 8004550:	e7e1      	b.n	8004516 <HAL_UART_IRQHandler+0x29a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004552:	68d3      	ldr	r3, [r2, #12]
 8004554:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004558:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 800455a:	2320      	movs	r3, #32
 800455c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  HAL_UART_TxCpltCallback(huart);
 8004560:	4620      	mov	r0, r4
 8004562:	f000 fd77 	bl	8005054 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8004566:	e6b5      	b.n	80042d4 <HAL_UART_IRQHandler+0x58>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004568:	f013 0f08 	tst.w	r3, #8
 800456c:	f47f aed5 	bne.w	800431a <HAL_UART_IRQHandler+0x9e>
 8004570:	e6d7      	b.n	8004322 <HAL_UART_IRQHandler+0xa6>
 8004572:	bf00      	nop
 8004574:	080040b7 	.word	0x080040b7

08004578 <UART_Start_Receive_IT>:
  huart->pRxBuffPtr = pData;
 8004578:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 800457a:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxXferCount = Size;
 800457c:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800457e:	2300      	movs	r3, #0
 8004580:	6443      	str	r3, [r0, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004582:	2322      	movs	r3, #34	; 0x22
 8004584:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004588:	6903      	ldr	r3, [r0, #16]
 800458a:	b123      	cbz	r3, 8004596 <UART_Start_Receive_IT+0x1e>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800458c:	6802      	ldr	r2, [r0, #0]
 800458e:	68d3      	ldr	r3, [r2, #12]
 8004590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004594:	60d3      	str	r3, [r2, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004596:	6802      	ldr	r2, [r0, #0]
 8004598:	6953      	ldr	r3, [r2, #20]
 800459a:	f043 0301 	orr.w	r3, r3, #1
 800459e:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80045a0:	6802      	ldr	r2, [r0, #0]
 80045a2:	68d3      	ldr	r3, [r2, #12]
 80045a4:	f043 0320 	orr.w	r3, r3, #32
 80045a8:	60d3      	str	r3, [r2, #12]
}
 80045aa:	2000      	movs	r0, #0
 80045ac:	4770      	bx	lr

080045ae <HAL_UART_Receive_IT>:
{
 80045ae:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80045b0:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b20      	cmp	r3, #32
 80045b8:	d108      	bne.n	80045cc <HAL_UART_Receive_IT+0x1e>
    if ((pData == NULL) || (Size == 0U))
 80045ba:	b149      	cbz	r1, 80045d0 <HAL_UART_Receive_IT+0x22>
 80045bc:	b90a      	cbnz	r2, 80045c2 <HAL_UART_Receive_IT+0x14>
      return HAL_ERROR;
 80045be:	2001      	movs	r0, #1
}
 80045c0:	bd08      	pop	{r3, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045c2:	2300      	movs	r3, #0
 80045c4:	6303      	str	r3, [r0, #48]	; 0x30
    return (UART_Start_Receive_IT(huart, pData, Size));
 80045c6:	f7ff ffd7 	bl	8004578 <UART_Start_Receive_IT>
 80045ca:	e7f9      	b.n	80045c0 <HAL_UART_Receive_IT+0x12>
    return HAL_BUSY;
 80045cc:	2002      	movs	r0, #2
 80045ce:	e7f7      	b.n	80045c0 <HAL_UART_Receive_IT+0x12>
      return HAL_ERROR;
 80045d0:	2001      	movs	r0, #1
 80045d2:	e7f5      	b.n	80045c0 <HAL_UART_Receive_IT+0x12>

080045d4 <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 80045d4:	b510      	push	{r4, lr}
 80045d6:	4604      	mov	r4, r0
 80045d8:	4608      	mov	r0, r1
    eMBErrorCode    eStatus = MB_ENOERR;

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 80045da:	f101 3cff 	add.w	ip, r1, #4294967295
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 80045de:	fa5f fc8c 	uxtb.w	ip, ip
 80045e2:	f1bc 0ff6 	cmp.w	ip, #246	; 0xf6
 80045e6:	d82b      	bhi.n	8004640 <eMBInit+0x6c>
 80045e8:	4611      	mov	r1, r2
 80045ea:	461a      	mov	r2, r3
    {
        eStatus = MB_EINVAL;
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
 80045ec:	4b17      	ldr	r3, [pc, #92]	; (800464c <eMBInit+0x78>)
 80045ee:	7018      	strb	r0, [r3, #0]

        switch ( eMode )
 80045f0:	b10c      	cbz	r4, 80045f6 <eMBInit+0x22>

            eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
            break;
#endif
        default:
            eStatus = MB_EINVAL;
 80045f2:	2402      	movs	r4, #2
 80045f4:	e025      	b.n	8004642 <eMBInit+0x6e>
            pvMBFrameStartCur = eMBRTUStart;
 80045f6:	4b16      	ldr	r3, [pc, #88]	; (8004650 <eMBInit+0x7c>)
 80045f8:	4c16      	ldr	r4, [pc, #88]	; (8004654 <eMBInit+0x80>)
 80045fa:	601c      	str	r4, [r3, #0]
            pvMBFrameStopCur = eMBRTUStop;
 80045fc:	4b16      	ldr	r3, [pc, #88]	; (8004658 <eMBInit+0x84>)
 80045fe:	4c17      	ldr	r4, [pc, #92]	; (800465c <eMBInit+0x88>)
 8004600:	601c      	str	r4, [r3, #0]
            peMBFrameSendCur = eMBRTUSend;
 8004602:	4b17      	ldr	r3, [pc, #92]	; (8004660 <eMBInit+0x8c>)
 8004604:	4c17      	ldr	r4, [pc, #92]	; (8004664 <eMBInit+0x90>)
 8004606:	601c      	str	r4, [r3, #0]
            peMBFrameReceiveCur = eMBRTUReceive;
 8004608:	4b17      	ldr	r3, [pc, #92]	; (8004668 <eMBInit+0x94>)
 800460a:	4c18      	ldr	r4, [pc, #96]	; (800466c <eMBInit+0x98>)
 800460c:	601c      	str	r4, [r3, #0]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 800460e:	4b18      	ldr	r3, [pc, #96]	; (8004670 <eMBInit+0x9c>)
 8004610:	2400      	movs	r4, #0
 8004612:	601c      	str	r4, [r3, #0]
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
 8004614:	4b17      	ldr	r3, [pc, #92]	; (8004674 <eMBInit+0xa0>)
 8004616:	4c18      	ldr	r4, [pc, #96]	; (8004678 <eMBInit+0xa4>)
 8004618:	601c      	str	r4, [r3, #0]
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
 800461a:	4b18      	ldr	r3, [pc, #96]	; (800467c <eMBInit+0xa8>)
 800461c:	4c18      	ldr	r4, [pc, #96]	; (8004680 <eMBInit+0xac>)
 800461e:	601c      	str	r4, [r3, #0]
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
 8004620:	4b18      	ldr	r3, [pc, #96]	; (8004684 <eMBInit+0xb0>)
 8004622:	4c19      	ldr	r4, [pc, #100]	; (8004688 <eMBInit+0xb4>)
 8004624:	601c      	str	r4, [r3, #0]
            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 8004626:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800462a:	f000 fab9 	bl	8004ba0 <eMBRTUInit>
            break;
        }

        if( eStatus == MB_ENOERR )
 800462e:	4604      	mov	r4, r0
 8004630:	b938      	cbnz	r0, 8004642 <eMBInit+0x6e>
        {
            if( !xMBPortEventInit(  ) )
 8004632:	f000 fc3d 	bl	8004eb0 <xMBPortEventInit>
 8004636:	b130      	cbz	r0, 8004646 <eMBInit+0x72>
                eStatus = MB_EPORTERR;
            }
            else
            {
                eMBCurrentMode = eMode;
                eMBState = STATE_DISABLED;
 8004638:	4b14      	ldr	r3, [pc, #80]	; (800468c <eMBInit+0xb8>)
 800463a:	2201      	movs	r2, #1
 800463c:	701a      	strb	r2, [r3, #0]
 800463e:	e000      	b.n	8004642 <eMBInit+0x6e>
        eStatus = MB_EINVAL;
 8004640:	2402      	movs	r4, #2
            }
        }
    }
    return eStatus;
}
 8004642:	4620      	mov	r0, r4
 8004644:	bd10      	pop	{r4, pc}
                eStatus = MB_EPORTERR;
 8004646:	2403      	movs	r4, #3
 8004648:	e7fb      	b.n	8004642 <eMBInit+0x6e>
 800464a:	bf00      	nop
 800464c:	2000128d 	.word	0x2000128d
 8004650:	20001278 	.word	0x20001278
 8004654:	08004bed 	.word	0x08004bed
 8004658:	2000127c 	.word	0x2000127c
 800465c:	08004c0d 	.word	0x08004c0d
 8004660:	20001270 	.word	0x20001270
 8004664:	08004c75 	.word	0x08004c75
 8004668:	2000126c 	.word	0x2000126c
 800466c:	08004c25 	.word	0x08004c25
 8004670:	20001274 	.word	0x20001274
 8004674:	20001280 	.word	0x20001280
 8004678:	08004cfd 	.word	0x08004cfd
 800467c:	20001284 	.word	0x20001284
 8004680:	08004d89 	.word	0x08004d89
 8004684:	20001288 	.word	0x20001288
 8004688:	08004df5 	.word	0x08004df5
 800468c:	20000030 	.word	0x20000030

08004690 <eMBEnable>:
}


eMBErrorCode
eMBEnable( void )
{
 8004690:	b508      	push	{r3, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( eMBState == STATE_DISABLED )
 8004692:	4b06      	ldr	r3, [pc, #24]	; (80046ac <eMBEnable+0x1c>)
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d001      	beq.n	800469e <eMBEnable+0xe>
        pvMBFrameStartCur(  );
        eMBState = STATE_ENABLED;
    }
    else
    {
        eStatus = MB_EILLSTATE;
 800469a:	2006      	movs	r0, #6
    }
    return eStatus;
}
 800469c:	bd08      	pop	{r3, pc}
        pvMBFrameStartCur(  );
 800469e:	4b04      	ldr	r3, [pc, #16]	; (80046b0 <eMBEnable+0x20>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 80046a4:	2000      	movs	r0, #0
 80046a6:	4b01      	ldr	r3, [pc, #4]	; (80046ac <eMBEnable+0x1c>)
 80046a8:	7018      	strb	r0, [r3, #0]
 80046aa:	e7f7      	b.n	800469c <eMBEnable+0xc>
 80046ac:	20000030 	.word	0x20000030
 80046b0:	20001278 	.word	0x20001278

080046b4 <eMBPoll>:
    }
    return eStatus;
}

eMBErrorCode eMBPoll( void )
{
 80046b4:	b570      	push	{r4, r5, r6, lr}
 80046b6:	b082      	sub	sp, #8
    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 80046b8:	4b36      	ldr	r3, [pc, #216]	; (8004794 <eMBPoll+0xe0>)
 80046ba:	781c      	ldrb	r4, [r3, #0]
 80046bc:	2c00      	cmp	r4, #0
 80046be:	d165      	bne.n	800478c <eMBPoll+0xd8>
        return MB_EILLSTATE;
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 80046c0:	f10d 0007 	add.w	r0, sp, #7
 80046c4:	f000 fc2a 	bl	8004f1c <xMBPortEventGet>
 80046c8:	2801      	cmp	r0, #1
 80046ca:	d002      	beq.n	80046d2 <eMBPoll+0x1e>
        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
}
 80046cc:	4620      	mov	r0, r4
 80046ce:	b002      	add	sp, #8
 80046d0:	bd70      	pop	{r4, r5, r6, pc}
        switch ( eEvent )
 80046d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d019      	beq.n	800470e <eMBPoll+0x5a>
 80046da:	2b04      	cmp	r3, #4
 80046dc:	d1f6      	bne.n	80046cc <eMBPoll+0x18>
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 80046de:	4b2e      	ldr	r3, [pc, #184]	; (8004798 <eMBPoll+0xe4>)
 80046e0:	681e      	ldr	r6, [r3, #0]
 80046e2:	7831      	ldrb	r1, [r6, #0]
 80046e4:	4b2d      	ldr	r3, [pc, #180]	; (800479c <eMBPoll+0xe8>)
 80046e6:	7019      	strb	r1, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 80046e8:	4b2d      	ldr	r3, [pc, #180]	; (80047a0 <eMBPoll+0xec>)
 80046ea:	2201      	movs	r2, #1
 80046ec:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 80046ee:	2300      	movs	r3, #0
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 80046f0:	4d2c      	ldr	r5, [pc, #176]	; (80047a4 <eMBPoll+0xf0>)
 80046f2:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
 80046f6:	b122      	cbz	r2, 8004702 <eMBPoll+0x4e>
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 80046f8:	4291      	cmp	r1, r2
 80046fa:	d01e      	beq.n	800473a <eMBPoll+0x86>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 80046fc:	3301      	adds	r3, #1
 80046fe:	2b10      	cmp	r3, #16
 8004700:	d1f7      	bne.n	80046f2 <eMBPoll+0x3e>
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 8004702:	4b29      	ldr	r3, [pc, #164]	; (80047a8 <eMBPoll+0xf4>)
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d130      	bne.n	800476c <eMBPoll+0xb8>
    return MB_ENOERR;
 800470a:	461c      	mov	r4, r3
 800470c:	e7de      	b.n	80046cc <eMBPoll+0x18>
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 800470e:	4b27      	ldr	r3, [pc, #156]	; (80047ac <eMBPoll+0xf8>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a27      	ldr	r2, [pc, #156]	; (80047b0 <eMBPoll+0xfc>)
 8004714:	4920      	ldr	r1, [pc, #128]	; (8004798 <eMBPoll+0xe4>)
 8004716:	4824      	ldr	r0, [pc, #144]	; (80047a8 <eMBPoll+0xf4>)
 8004718:	4798      	blx	r3
            if( eStatus == MB_ENOERR )
 800471a:	4605      	mov	r5, r0
 800471c:	2800      	cmp	r0, #0
 800471e:	d1d5      	bne.n	80046cc <eMBPoll+0x18>
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 8004720:	4b21      	ldr	r3, [pc, #132]	; (80047a8 <eMBPoll+0xf4>)
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	4a23      	ldr	r2, [pc, #140]	; (80047b4 <eMBPoll+0x100>)
 8004726:	7812      	ldrb	r2, [r2, #0]
 8004728:	429a      	cmp	r2, r3
 800472a:	d001      	beq.n	8004730 <eMBPoll+0x7c>
 800472c:	2b00      	cmp	r3, #0
 800472e:	d12f      	bne.n	8004790 <eMBPoll+0xdc>
                    ( void )xMBPortEventPost( EV_EXECUTE );
 8004730:	2004      	movs	r0, #4
 8004732:	f000 fbc7 	bl	8004ec4 <xMBPortEventPost>
    return MB_ENOERR;
 8004736:	462c      	mov	r4, r5
 8004738:	e7c8      	b.n	80046cc <eMBPoll+0x18>
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 800473a:	4a1a      	ldr	r2, [pc, #104]	; (80047a4 <eMBPoll+0xf0>)
 800473c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	491b      	ldr	r1, [pc, #108]	; (80047b0 <eMBPoll+0xfc>)
 8004744:	4630      	mov	r0, r6
 8004746:	4798      	blx	r3
 8004748:	4b15      	ldr	r3, [pc, #84]	; (80047a0 <eMBPoll+0xec>)
 800474a:	7018      	strb	r0, [r3, #0]
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 800474c:	4b16      	ldr	r3, [pc, #88]	; (80047a8 <eMBPoll+0xf4>)
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	b153      	cbz	r3, 8004768 <eMBPoll+0xb4>
                if( eException != MB_EX_NONE )
 8004752:	b958      	cbnz	r0, 800476c <eMBPoll+0xb8>
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 8004754:	4b18      	ldr	r3, [pc, #96]	; (80047b8 <eMBPoll+0x104>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a15      	ldr	r2, [pc, #84]	; (80047b0 <eMBPoll+0xfc>)
 800475a:	8812      	ldrh	r2, [r2, #0]
 800475c:	490e      	ldr	r1, [pc, #56]	; (8004798 <eMBPoll+0xe4>)
 800475e:	6809      	ldr	r1, [r1, #0]
 8004760:	4814      	ldr	r0, [pc, #80]	; (80047b4 <eMBPoll+0x100>)
 8004762:	7800      	ldrb	r0, [r0, #0]
 8004764:	4798      	blx	r3
 8004766:	e7b1      	b.n	80046cc <eMBPoll+0x18>
    return MB_ENOERR;
 8004768:	461c      	mov	r4, r3
 800476a:	e7af      	b.n	80046cc <eMBPoll+0x18>
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 800476c:	4b0b      	ldr	r3, [pc, #44]	; (800479c <eMBPoll+0xe8>)
 800476e:	781a      	ldrb	r2, [r3, #0]
 8004770:	4909      	ldr	r1, [pc, #36]	; (8004798 <eMBPoll+0xe4>)
 8004772:	680d      	ldr	r5, [r1, #0]
 8004774:	4b0e      	ldr	r3, [pc, #56]	; (80047b0 <eMBPoll+0xfc>)
 8004776:	2601      	movs	r6, #1
 8004778:	801e      	strh	r6, [r3, #0]
 800477a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800477e:	702a      	strb	r2, [r5, #0]
                    ucMBFrame[usLength++] = eException;
 8004780:	6809      	ldr	r1, [r1, #0]
 8004782:	881a      	ldrh	r2, [r3, #0]
 8004784:	1995      	adds	r5, r2, r6
 8004786:	801d      	strh	r5, [r3, #0]
 8004788:	5488      	strb	r0, [r1, r2]
 800478a:	e7e3      	b.n	8004754 <eMBPoll+0xa0>
        return MB_EILLSTATE;
 800478c:	2406      	movs	r4, #6
 800478e:	e79d      	b.n	80046cc <eMBPoll+0x18>
    return MB_ENOERR;
 8004790:	4604      	mov	r4, r0
 8004792:	e79b      	b.n	80046cc <eMBPoll+0x18>
 8004794:	20000030 	.word	0x20000030
 8004798:	20001290 	.word	0x20001290
 800479c:	2000128c 	.word	0x2000128c
 80047a0:	20001268 	.word	0x20001268
 80047a4:	20000034 	.word	0x20000034
 80047a8:	20001294 	.word	0x20001294
 80047ac:	2000126c 	.word	0x2000126c
 80047b0:	20001296 	.word	0x20001296
 80047b4:	2000128d 	.word	0x2000128d
 80047b8:	20001270 	.word	0x20001270

080047bc <usMBCRC16>:
{
    UCHAR           ucCRCHi = 0xFF;
    UCHAR           ucCRCLo = 0xFF;
    int             iIndex;

    while( usLen-- )
 80047bc:	b1b9      	cbz	r1, 80047ee <usMBCRC16+0x32>
{
 80047be:	b430      	push	{r4, r5}
 80047c0:	f101 3cff 	add.w	ip, r1, #4294967295
 80047c4:	fa1f fc8c 	uxth.w	ip, ip
 80047c8:	f10c 0c01 	add.w	ip, ip, #1
 80047cc:	4484      	add	ip, r0
    UCHAR           ucCRCLo = 0xFF;
 80047ce:	22ff      	movs	r2, #255	; 0xff
    UCHAR           ucCRCHi = 0xFF;
 80047d0:	4611      	mov	r1, r2
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 80047d2:	4d09      	ldr	r5, [pc, #36]	; (80047f8 <usMBCRC16+0x3c>)
        ucCRCHi = aucCRCLo[iIndex];
 80047d4:	4c09      	ldr	r4, [pc, #36]	; (80047fc <usMBCRC16+0x40>)
        iIndex = ucCRCLo ^ *( pucFrame++ );
 80047d6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80047da:	4053      	eors	r3, r2
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 80047dc:	5cea      	ldrb	r2, [r5, r3]
 80047de:	404a      	eors	r2, r1
        ucCRCHi = aucCRCLo[iIndex];
 80047e0:	5ce1      	ldrb	r1, [r4, r3]
    while( usLen-- )
 80047e2:	4560      	cmp	r0, ip
 80047e4:	d1f7      	bne.n	80047d6 <usMBCRC16+0x1a>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
}
 80047e6:	ea42 2001 	orr.w	r0, r2, r1, lsl #8
 80047ea:	bc30      	pop	{r4, r5}
 80047ec:	4770      	bx	lr
    UCHAR           ucCRCLo = 0xFF;
 80047ee:	22ff      	movs	r2, #255	; 0xff
}
 80047f0:	ea42 2002 	orr.w	r0, r2, r2, lsl #8
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	080077f4 	.word	0x080077f4
 80047fc:	080078f4 	.word	0x080078f4

08004800 <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8004800:	b538      	push	{r3, r4, r5, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8004802:	880b      	ldrh	r3, [r1, #0]
 8004804:	2b05      	cmp	r3, #5
 8004806:	d001      	beq.n	800480c <eMBFuncReadCoils+0xc>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004808:	2003      	movs	r0, #3
    }
    return eStatus;
}
 800480a:	bd38      	pop	{r3, r4, r5, pc}
 800480c:	460c      	mov	r4, r1
        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 800480e:	78c3      	ldrb	r3, [r0, #3]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 8004810:	7902      	ldrb	r2, [r0, #4]
 8004812:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
        if( ( usCoilCount >= 1 ) &&
 8004816:	1e53      	subs	r3, r2, #1
 8004818:	b29b      	uxth	r3, r3
 800481a:	f240 71ce 	movw	r1, #1998	; 0x7ce
 800481e:	428b      	cmp	r3, r1
 8004820:	d825      	bhi.n	800486e <eMBFuncReadCoils+0x6e>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8004822:	f890 c001 	ldrb.w	ip, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8004826:	7881      	ldrb	r1, [r0, #2]
            *usLen = MB_PDU_FUNC_OFF;
 8004828:	2300      	movs	r3, #0
 800482a:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 800482c:	2301      	movs	r3, #1
 800482e:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 8004830:	8823      	ldrh	r3, [r4, #0]
 8004832:	3301      	adds	r3, #1
 8004834:	8023      	strh	r3, [r4, #0]
            if( ( usCoilCount & 0x0007 ) != 0 )
 8004836:	f012 0f07 	tst.w	r2, #7
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 800483a:	bf1d      	ittte	ne
 800483c:	08d5      	lsrne	r5, r2, #3
 800483e:	3501      	addne	r5, #1
 8004840:	b2ed      	uxtbne	r5, r5
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 8004842:	f3c2 05c7 	ubfxeq	r5, r2, #3, #8
            *pucFrameCur++ = ucNBytes;
 8004846:	7045      	strb	r5, [r0, #1]
            *usLen += 1;
 8004848:	8823      	ldrh	r3, [r4, #0]
 800484a:	3301      	adds	r3, #1
 800484c:	8023      	strh	r3, [r4, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 800484e:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
        usRegAddress++;
 8004852:	3101      	adds	r1, #1
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 8004854:	2300      	movs	r3, #0
 8004856:	b289      	uxth	r1, r1
 8004858:	3002      	adds	r0, #2
 800485a:	f000 fcff 	bl	800525c <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 800485e:	b918      	cbnz	r0, 8004868 <eMBFuncReadCoils+0x68>
                *usLen += ucNBytes;;
 8004860:	8823      	ldrh	r3, [r4, #0]
 8004862:	441d      	add	r5, r3
 8004864:	8025      	strh	r5, [r4, #0]
 8004866:	e7d0      	b.n	800480a <eMBFuncReadCoils+0xa>
                eStatus = prveMBError2Exception( eRegStatus );
 8004868:	f000 fb14 	bl	8004e94 <prveMBError2Exception>
 800486c:	e7cd      	b.n	800480a <eMBFuncReadCoils+0xa>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800486e:	2003      	movs	r0, #3
 8004870:	e7cb      	b.n	800480a <eMBFuncReadCoils+0xa>

08004872 <eMBFuncWriteCoil>:
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8004872:	880b      	ldrh	r3, [r1, #0]
 8004874:	2b05      	cmp	r3, #5
 8004876:	d001      	beq.n	800487c <eMBFuncWriteCoil+0xa>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004878:	2003      	movs	r0, #3
 800487a:	4770      	bx	lr
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 800487c:	7903      	ldrb	r3, [r0, #4]
 800487e:	bb0b      	cbnz	r3, 80048c4 <eMBFuncWriteCoil+0x52>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8004880:	78c2      	ldrb	r2, [r0, #3]
 8004882:	1e53      	subs	r3, r2, #1
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2bfd      	cmp	r3, #253	; 0xfd
 8004888:	d91e      	bls.n	80048c8 <eMBFuncWriteCoil+0x56>
{
 800488a:	b500      	push	{lr}
 800488c:	b083      	sub	sp, #12
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 800488e:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8004890:	7881      	ldrb	r1, [r0, #2]
            ucBuf[1] = 0;
 8004892:	2000      	movs	r0, #0
 8004894:	f88d 0005 	strb.w	r0, [sp, #5]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8004898:	2aff      	cmp	r2, #255	; 0xff
 800489a:	bf14      	ite	ne
 800489c:	2200      	movne	r2, #0
 800489e:	2201      	moveq	r2, #1
 80048a0:	f88d 2004 	strb.w	r2, [sp, #4]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 80048a4:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 80048a8:	3101      	adds	r1, #1
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 80048aa:	2301      	movs	r3, #1
 80048ac:	461a      	mov	r2, r3
 80048ae:	b289      	uxth	r1, r1
 80048b0:	a801      	add	r0, sp, #4
 80048b2:	f000 fcd3 	bl	800525c <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 80048b6:	b910      	cbnz	r0, 80048be <eMBFuncWriteCoil+0x4c>
    }
    return eStatus;
}
 80048b8:	b003      	add	sp, #12
 80048ba:	f85d fb04 	ldr.w	pc, [sp], #4
                eStatus = prveMBError2Exception( eRegStatus );
 80048be:	f000 fae9 	bl	8004e94 <prveMBError2Exception>
 80048c2:	e7f9      	b.n	80048b8 <eMBFuncWriteCoil+0x46>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80048c4:	2003      	movs	r0, #3
 80048c6:	4770      	bx	lr
 80048c8:	2003      	movs	r0, #3
}
 80048ca:	4770      	bx	lr

080048cc <eMBFuncWriteMultipleCoils>:
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80048cc:	880b      	ldrh	r3, [r1, #0]
 80048ce:	2b05      	cmp	r3, #5
 80048d0:	d928      	bls.n	8004924 <eMBFuncWriteMultipleCoils+0x58>
{
 80048d2:	b510      	push	{r4, lr}
 80048d4:	460c      	mov	r4, r1
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 80048d6:	78c2      	ldrb	r2, [r0, #3]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 80048d8:	7903      	ldrb	r3, [r0, #4]
 80048da:	ea43 2202 	orr.w	r2, r3, r2, lsl #8

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 80048de:	f013 0f07 	tst.w	r3, #7
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 80048e2:	bf1d      	ittte	ne
 80048e4:	08d1      	lsrne	r1, r2, #3
 80048e6:	3101      	addne	r1, #1
 80048e8:	b2c9      	uxtbne	r1, r1
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 80048ea:	f3c2 01c7 	ubfxeq	r1, r2, #3, #8
        }

        if( ( usCoilCnt >= 1 ) &&
 80048ee:	1e53      	subs	r3, r2, #1
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	f5b3 6ff6 	cmp.w	r3, #1968	; 0x7b0
 80048f6:	d217      	bcs.n	8004928 <eMBFuncWriteMultipleCoils+0x5c>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 80048f8:	7943      	ldrb	r3, [r0, #5]
 80048fa:	428b      	cmp	r3, r1
 80048fc:	d001      	beq.n	8004902 <eMBFuncWriteMultipleCoils+0x36>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80048fe:	2003      	movs	r0, #3
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8004900:	bd10      	pop	{r4, pc}
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8004902:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8004904:	7881      	ldrb	r1, [r0, #2]
 8004906:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 800490a:	3101      	adds	r1, #1
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 800490c:	2301      	movs	r3, #1
 800490e:	b289      	uxth	r1, r1
 8004910:	3006      	adds	r0, #6
 8004912:	f000 fca3 	bl	800525c <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 8004916:	b910      	cbnz	r0, 800491e <eMBFuncWriteMultipleCoils+0x52>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8004918:	2305      	movs	r3, #5
 800491a:	8023      	strh	r3, [r4, #0]
 800491c:	e7f0      	b.n	8004900 <eMBFuncWriteMultipleCoils+0x34>
                eStatus = prveMBError2Exception( eRegStatus );
 800491e:	f000 fab9 	bl	8004e94 <prveMBError2Exception>
 8004922:	e7ed      	b.n	8004900 <eMBFuncWriteMultipleCoils+0x34>
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004924:	2003      	movs	r0, #3
}
 8004926:	4770      	bx	lr
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004928:	2003      	movs	r0, #3
 800492a:	e7e9      	b.n	8004900 <eMBFuncWriteMultipleCoils+0x34>

0800492c <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_DISCRETE_INPUTS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 800492c:	b538      	push	{r3, r4, r5, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800492e:	880b      	ldrh	r3, [r1, #0]
 8004930:	2b05      	cmp	r3, #5
 8004932:	d001      	beq.n	8004938 <eMBFuncReadDiscreteInputs+0xc>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004934:	2003      	movs	r0, #3
    }
    return eStatus;
}
 8004936:	bd38      	pop	{r3, r4, r5, pc}
 8004938:	460c      	mov	r4, r1
        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 800493a:	78c3      	ldrb	r3, [r0, #3]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 800493c:	7902      	ldrb	r2, [r0, #4]
 800493e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
        if( ( usDiscreteCnt >= 1 ) &&
 8004942:	1e53      	subs	r3, r2, #1
 8004944:	b29b      	uxth	r3, r3
 8004946:	f240 71ce 	movw	r1, #1998	; 0x7ce
 800494a:	428b      	cmp	r3, r1
 800494c:	d824      	bhi.n	8004998 <eMBFuncReadDiscreteInputs+0x6c>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 800494e:	f890 c001 	ldrb.w	ip, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8004952:	7881      	ldrb	r1, [r0, #2]
            *usLen = MB_PDU_FUNC_OFF;
 8004954:	2300      	movs	r3, #0
 8004956:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 8004958:	2302      	movs	r3, #2
 800495a:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 800495c:	8823      	ldrh	r3, [r4, #0]
 800495e:	3301      	adds	r3, #1
 8004960:	8023      	strh	r3, [r4, #0]
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 8004962:	f012 0f07 	tst.w	r2, #7
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 8004966:	bf1d      	ittte	ne
 8004968:	08d5      	lsrne	r5, r2, #3
 800496a:	3501      	addne	r5, #1
 800496c:	b2ed      	uxtbne	r5, r5
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 800496e:	f3c2 05c7 	ubfxeq	r5, r2, #3, #8
            *pucFrameCur++ = ucNBytes;
 8004972:	7045      	strb	r5, [r0, #1]
            *usLen += 1;
 8004974:	8823      	ldrh	r3, [r4, #0]
 8004976:	3301      	adds	r3, #1
 8004978:	8023      	strh	r3, [r4, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 800497a:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
        usRegAddress++;
 800497e:	3101      	adds	r1, #1
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 8004980:	b289      	uxth	r1, r1
 8004982:	3002      	adds	r0, #2
 8004984:	f000 fcdc 	bl	8005340 <eMBRegDiscreteCB>
            if( eRegStatus != MB_ENOERR )
 8004988:	b918      	cbnz	r0, 8004992 <eMBFuncReadDiscreteInputs+0x66>
                *usLen += ucNBytes;;
 800498a:	8823      	ldrh	r3, [r4, #0]
 800498c:	441d      	add	r5, r3
 800498e:	8025      	strh	r5, [r4, #0]
 8004990:	e7d1      	b.n	8004936 <eMBFuncReadDiscreteInputs+0xa>
                eStatus = prveMBError2Exception( eRegStatus );
 8004992:	f000 fa7f 	bl	8004e94 <prveMBError2Exception>
 8004996:	e7ce      	b.n	8004936 <eMBFuncReadDiscreteInputs+0xa>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004998:	2003      	movs	r0, #3
 800499a:	e7cc      	b.n	8004936 <eMBFuncReadDiscreteInputs+0xa>

0800499c <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800499c:	b508      	push	{r3, lr}
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 800499e:	880b      	ldrh	r3, [r1, #0]
 80049a0:	2b05      	cmp	r3, #5
 80049a2:	d001      	beq.n	80049a8 <eMBFuncWriteHoldingRegister+0xc>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80049a4:	2003      	movs	r0, #3
    }
    return eStatus;
}
 80049a6:	bd08      	pop	{r3, pc}
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 80049a8:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 80049aa:	7881      	ldrb	r1, [r0, #2]
 80049ac:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 80049b0:	3101      	adds	r1, #1
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 80049b2:	2301      	movs	r3, #1
 80049b4:	461a      	mov	r2, r3
 80049b6:	b289      	uxth	r1, r1
 80049b8:	3003      	adds	r0, #3
 80049ba:	f000 fc05 	bl	80051c8 <eMBRegHoldingCB>
        if( eRegStatus != MB_ENOERR )
 80049be:	2800      	cmp	r0, #0
 80049c0:	d0f1      	beq.n	80049a6 <eMBFuncWriteHoldingRegister+0xa>
            eStatus = prveMBError2Exception( eRegStatus );
 80049c2:	f000 fa67 	bl	8004e94 <prveMBError2Exception>
 80049c6:	e7ee      	b.n	80049a6 <eMBFuncWriteHoldingRegister+0xa>

080049c8 <eMBFuncWriteMultipleHoldingRegister>:
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 80049c8:	880b      	ldrh	r3, [r1, #0]
 80049ca:	2b05      	cmp	r3, #5
 80049cc:	d921      	bls.n	8004a12 <eMBFuncWriteMultipleHoldingRegister+0x4a>
{
 80049ce:	b510      	push	{r4, lr}
 80049d0:	460c      	mov	r4, r1
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 80049d2:	78c3      	ldrb	r3, [r0, #3]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 80049d4:	7902      	ldrb	r2, [r0, #4]
 80049d6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];

        if( ( usRegCount >= 1 ) &&
 80049da:	1e53      	subs	r3, r2, #1
 80049dc:	b29b      	uxth	r3, r3
 80049de:	2b77      	cmp	r3, #119	; 0x77
 80049e0:	d819      	bhi.n	8004a16 <eMBFuncWriteMultipleHoldingRegister+0x4e>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 80049e2:	0053      	lsls	r3, r2, #1
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 80049e4:	7941      	ldrb	r1, [r0, #5]
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	4299      	cmp	r1, r3
 80049ea:	d001      	beq.n	80049f0 <eMBFuncWriteMultipleHoldingRegister+0x28>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80049ec:	2003      	movs	r0, #3
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 80049ee:	bd10      	pop	{r4, pc}
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 80049f0:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 80049f2:	7881      	ldrb	r1, [r0, #2]
 80049f4:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 80049f8:	3101      	adds	r1, #1
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 80049fa:	2301      	movs	r3, #1
 80049fc:	b289      	uxth	r1, r1
 80049fe:	3006      	adds	r0, #6
 8004a00:	f000 fbe2 	bl	80051c8 <eMBRegHoldingCB>
            if( eRegStatus != MB_ENOERR )
 8004a04:	b910      	cbnz	r0, 8004a0c <eMBFuncWriteMultipleHoldingRegister+0x44>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8004a06:	2305      	movs	r3, #5
 8004a08:	8023      	strh	r3, [r4, #0]
 8004a0a:	e7f0      	b.n	80049ee <eMBFuncWriteMultipleHoldingRegister+0x26>
                eStatus = prveMBError2Exception( eRegStatus );
 8004a0c:	f000 fa42 	bl	8004e94 <prveMBError2Exception>
 8004a10:	e7ed      	b.n	80049ee <eMBFuncWriteMultipleHoldingRegister+0x26>
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004a12:	2003      	movs	r0, #3
}
 8004a14:	4770      	bx	lr
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004a16:	2003      	movs	r0, #3
 8004a18:	e7e9      	b.n	80049ee <eMBFuncWriteMultipleHoldingRegister+0x26>

08004a1a <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8004a1a:	b538      	push	{r3, r4, r5, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8004a1c:	880b      	ldrh	r3, [r1, #0]
 8004a1e:	2b05      	cmp	r3, #5
 8004a20:	d001      	beq.n	8004a26 <eMBFuncReadHoldingRegister+0xc>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004a22:	2003      	movs	r0, #3
    }
    return eStatus;
}
 8004a24:	bd38      	pop	{r3, r4, r5, pc}
 8004a26:	460c      	mov	r4, r1
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8004a28:	78c3      	ldrb	r3, [r0, #3]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8004a2a:	7905      	ldrb	r5, [r0, #4]
 8004a2c:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8004a30:	1e6b      	subs	r3, r5, #1
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	2b7c      	cmp	r3, #124	; 0x7c
 8004a36:	d901      	bls.n	8004a3c <eMBFuncReadHoldingRegister+0x22>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004a38:	2003      	movs	r0, #3
 8004a3a:	e7f3      	b.n	8004a24 <eMBFuncReadHoldingRegister+0xa>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8004a3c:	f890 c001 	ldrb.w	ip, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8004a40:	7881      	ldrb	r1, [r0, #2]
            *usLen = MB_PDU_FUNC_OFF;
 8004a42:	2300      	movs	r3, #0
 8004a44:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 8004a46:	2203      	movs	r2, #3
 8004a48:	7002      	strb	r2, [r0, #0]
            *usLen += 1;
 8004a4a:	8822      	ldrh	r2, [r4, #0]
 8004a4c:	3201      	adds	r2, #1
 8004a4e:	8022      	strh	r2, [r4, #0]
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 8004a50:	006a      	lsls	r2, r5, #1
 8004a52:	7042      	strb	r2, [r0, #1]
            *usLen += 1;
 8004a54:	8822      	ldrh	r2, [r4, #0]
 8004a56:	3201      	adds	r2, #1
 8004a58:	8022      	strh	r2, [r4, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8004a5a:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
        usRegAddress++;
 8004a5e:	3101      	adds	r1, #1
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 8004a60:	462a      	mov	r2, r5
 8004a62:	b289      	uxth	r1, r1
 8004a64:	3002      	adds	r0, #2
 8004a66:	f000 fbaf 	bl	80051c8 <eMBRegHoldingCB>
            if( eRegStatus != MB_ENOERR )
 8004a6a:	b920      	cbnz	r0, 8004a76 <eMBFuncReadHoldingRegister+0x5c>
                *usLen += usRegCount * 2;
 8004a6c:	8823      	ldrh	r3, [r4, #0]
 8004a6e:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004a72:	8025      	strh	r5, [r4, #0]
 8004a74:	e7d6      	b.n	8004a24 <eMBFuncReadHoldingRegister+0xa>
                eStatus = prveMBError2Exception( eRegStatus );
 8004a76:	f000 fa0d 	bl	8004e94 <prveMBError2Exception>
 8004a7a:	e7d3      	b.n	8004a24 <eMBFuncReadHoldingRegister+0xa>

08004a7c <eMBFuncReadWriteMultipleHoldingRegister>:
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8004a7c:	880b      	ldrh	r3, [r1, #0]
 8004a7e:	2b09      	cmp	r3, #9
 8004a80:	d945      	bls.n	8004b0e <eMBFuncReadWriteMultipleHoldingRegister+0x92>
{
 8004a82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a86:	4604      	mov	r4, r0
 8004a88:	460d      	mov	r5, r1
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 8004a8a:	78c3      	ldrb	r3, [r0, #3]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 8004a8c:	7906      	ldrb	r6, [r0, #4]
 8004a8e:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8004a92:	1e73      	subs	r3, r6, #1
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	2b7c      	cmp	r3, #124	; 0x7c
 8004a98:	d83b      	bhi.n	8004b12 <eMBFuncReadWriteMultipleHoldingRegister+0x96>
        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8004a9a:	79c3      	ldrb	r3, [r0, #7]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 8004a9c:	7a02      	ldrb	r2, [r0, #8]
 8004a9e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8004aa2:	1e53      	subs	r3, r2, #1
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	2b78      	cmp	r3, #120	; 0x78
 8004aa8:	d836      	bhi.n	8004b18 <eMBFuncReadWriteMultipleHoldingRegister+0x9c>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 8004aaa:	7a43      	ldrb	r3, [r0, #9]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8004aac:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8004ab0:	d001      	beq.n	8004ab6 <eMBFuncReadWriteMultipleHoldingRegister+0x3a>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004ab2:	2003      	movs	r0, #3
 8004ab4:	e02e      	b.n	8004b14 <eMBFuncReadWriteMultipleHoldingRegister+0x98>
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 8004ab6:	f890 8001 	ldrb.w	r8, [r0, #1]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8004aba:	7887      	ldrb	r7, [r0, #2]
        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 8004abc:	7943      	ldrb	r3, [r0, #5]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 8004abe:	7981      	ldrb	r1, [r0, #6]
 8004ac0:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegWriteAddress++;
 8004ac4:	3101      	adds	r1, #1
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	b289      	uxth	r1, r1
 8004aca:	300a      	adds	r0, #10
 8004acc:	f000 fb7c 	bl	80051c8 <eMBRegHoldingCB>
 8004ad0:	4603      	mov	r3, r0
            if( eRegStatus == MB_ENOERR )
 8004ad2:	b110      	cbz	r0, 8004ada <eMBFuncReadWriteMultipleHoldingRegister+0x5e>
                eStatus = prveMBError2Exception( eRegStatus );
 8004ad4:	f000 f9de 	bl	8004e94 <prveMBError2Exception>
        }
    }
    return eStatus;
 8004ad8:	e01c      	b.n	8004b14 <eMBFuncReadWriteMultipleHoldingRegister+0x98>
                *usLen = MB_PDU_FUNC_OFF;
 8004ada:	8028      	strh	r0, [r5, #0]
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 8004adc:	2217      	movs	r2, #23
 8004ade:	7022      	strb	r2, [r4, #0]
                *usLen += 1;
 8004ae0:	882a      	ldrh	r2, [r5, #0]
 8004ae2:	3201      	adds	r2, #1
 8004ae4:	802a      	strh	r2, [r5, #0]
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8004ae6:	0072      	lsls	r2, r6, #1
 8004ae8:	7062      	strb	r2, [r4, #1]
                *usLen += 1;
 8004aea:	882a      	ldrh	r2, [r5, #0]
 8004aec:	3201      	adds	r2, #1
 8004aee:	802a      	strh	r2, [r5, #0]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8004af0:	ea47 2108 	orr.w	r1, r7, r8, lsl #8
        usRegReadAddress++;
 8004af4:	3101      	adds	r1, #1
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 8004af6:	4632      	mov	r2, r6
 8004af8:	b289      	uxth	r1, r1
 8004afa:	1ca0      	adds	r0, r4, #2
 8004afc:	f000 fb64 	bl	80051c8 <eMBRegHoldingCB>
                if( eRegStatus == MB_ENOERR )
 8004b00:	2800      	cmp	r0, #0
 8004b02:	d1e7      	bne.n	8004ad4 <eMBFuncReadWriteMultipleHoldingRegister+0x58>
                    *usLen += 2 * usRegReadCount;
 8004b04:	882b      	ldrh	r3, [r5, #0]
 8004b06:	eb03 0646 	add.w	r6, r3, r6, lsl #1
 8004b0a:	802e      	strh	r6, [r5, #0]
            if( eRegStatus != MB_ENOERR )
 8004b0c:	e002      	b.n	8004b14 <eMBFuncReadWriteMultipleHoldingRegister+0x98>
    eMBException    eStatus = MB_EX_NONE;
 8004b0e:	2000      	movs	r0, #0
}
 8004b10:	4770      	bx	lr
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004b12:	2003      	movs	r0, #3
}
 8004b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004b18:	2003      	movs	r0, #3
 8004b1a:	e7fb      	b.n	8004b14 <eMBFuncReadWriteMultipleHoldingRegister+0x98>

08004b1c <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8004b1c:	b538      	push	{r3, r4, r5, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8004b1e:	880b      	ldrh	r3, [r1, #0]
 8004b20:	2b05      	cmp	r3, #5
 8004b22:	d001      	beq.n	8004b28 <eMBFuncReadInputRegister+0xc>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004b24:	2003      	movs	r0, #3
    }
    return eStatus;
}
 8004b26:	bd38      	pop	{r3, r4, r5, pc}
 8004b28:	460c      	mov	r4, r1
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8004b2a:	78c3      	ldrb	r3, [r0, #3]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8004b2c:	7905      	ldrb	r5, [r0, #4]
 8004b2e:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8004b32:	1e6b      	subs	r3, r5, #1
        if( ( usRegCount >= 1 )
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	2b7b      	cmp	r3, #123	; 0x7b
 8004b38:	d901      	bls.n	8004b3e <eMBFuncReadInputRegister+0x22>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004b3a:	2003      	movs	r0, #3
 8004b3c:	e7f3      	b.n	8004b26 <eMBFuncReadInputRegister+0xa>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8004b3e:	7842      	ldrb	r2, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8004b40:	7881      	ldrb	r1, [r0, #2]
            *usLen = MB_PDU_FUNC_OFF;
 8004b42:	2300      	movs	r3, #0
 8004b44:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 8004b46:	2304      	movs	r3, #4
 8004b48:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 8004b4a:	8823      	ldrh	r3, [r4, #0]
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 8004b50:	006b      	lsls	r3, r5, #1
 8004b52:	7043      	strb	r3, [r0, #1]
            *usLen += 1;
 8004b54:	8823      	ldrh	r3, [r4, #0]
 8004b56:	3301      	adds	r3, #1
 8004b58:	8023      	strh	r3, [r4, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8004b5a:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
        usRegAddress++;
 8004b5e:	3101      	adds	r1, #1
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 8004b60:	462a      	mov	r2, r5
 8004b62:	b289      	uxth	r1, r1
 8004b64:	3002      	adds	r0, #2
 8004b66:	f000 fb05 	bl	8005174 <eMBRegInputCB>
            if( eRegStatus != MB_ENOERR )
 8004b6a:	b920      	cbnz	r0, 8004b76 <eMBFuncReadInputRegister+0x5a>
                *usLen += usRegCount * 2;
 8004b6c:	8823      	ldrh	r3, [r4, #0]
 8004b6e:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004b72:	8025      	strh	r5, [r4, #0]
 8004b74:	e7d7      	b.n	8004b26 <eMBFuncReadInputRegister+0xa>
                eStatus = prveMBError2Exception( eRegStatus );
 8004b76:	f000 f98d 	bl	8004e94 <prveMBError2Exception>
 8004b7a:	e7d4      	b.n	8004b26 <eMBFuncReadInputRegister+0xa>

08004b7c <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8004b7c:	b538      	push	{r3, r4, r5, lr}
 8004b7e:	460d      	mov	r5, r1
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8004b80:	4b05      	ldr	r3, [pc, #20]	; (8004b98 <eMBFuncReportSlaveID+0x1c>)
 8004b82:	881c      	ldrh	r4, [r3, #0]
 8004b84:	4622      	mov	r2, r4
 8004b86:	4905      	ldr	r1, [pc, #20]	; (8004b9c <eMBFuncReportSlaveID+0x20>)
 8004b88:	3001      	adds	r0, #1
 8004b8a:	f002 fbff 	bl	800738c <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 8004b8e:	3401      	adds	r4, #1
 8004b90:	802c      	strh	r4, [r5, #0]
    return MB_EX_NONE;
}
 8004b92:	2000      	movs	r0, #0
 8004b94:	bd38      	pop	{r3, r4, r5, pc}
 8004b96:	bf00      	nop
 8004b98:	200012b8 	.word	0x200012b8
 8004b9c:	20001298 	.word	0x20001298

08004ba0 <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8004ba0:	b570      	push	{r4, r5, r6, lr}
 8004ba2:	460d      	mov	r5, r1
 8004ba4:	4614      	mov	r4, r2
 8004ba6:	461e      	mov	r6, r3
    eMBErrorCode    eStatus = MB_ENOERR;
    ULONG           usTimerT35_50us;

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );
 8004ba8:	f000 f980 	bl	8004eac <EnterCriticalSection>

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 8004bac:	4633      	mov	r3, r6
 8004bae:	2208      	movs	r2, #8
 8004bb0:	4621      	mov	r1, r4
 8004bb2:	4628      	mov	r0, r5
 8004bb4:	f000 f9d8 	bl	8004f68 <xMBPortSerialInit>
 8004bb8:	2801      	cmp	r0, #1
 8004bba:	d004      	beq.n	8004bc6 <eMBRTUInit+0x26>
    {
        eStatus = MB_EPORTERR;
 8004bbc:	2403      	movs	r4, #3
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
        {
            eStatus = MB_EPORTERR;
        }
    }
    EXIT_CRITICAL_SECTION(  );
 8004bbe:	f000 f976 	bl	8004eae <ExitCriticalSection>

    return eStatus;
}
 8004bc2:	4620      	mov	r0, r4
 8004bc4:	bd70      	pop	{r4, r5, r6, pc}
        if( ulBaudRate > 19200 )
 8004bc6:	f5b4 4f96 	cmp.w	r4, #19200	; 0x4b00
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 8004bca:	bf9d      	ittte	ls
 8004bcc:	0064      	lslls	r4, r4, #1
 8004bce:	4806      	ldrls	r0, [pc, #24]	; (8004be8 <eMBRTUInit+0x48>)
 8004bd0:	fbb0 f0f4 	udivls	r0, r0, r4
            usTimerT35_50us = 35;       /* 1800us. */
 8004bd4:	2023      	movhi	r0, #35	; 0x23
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 8004bd6:	b280      	uxth	r0, r0
 8004bd8:	f000 fa8a 	bl	80050f0 <xMBPortTimersInit>
            eStatus = MB_EPORTERR;
 8004bdc:	2801      	cmp	r0, #1
 8004bde:	bf0c      	ite	eq
 8004be0:	2400      	moveq	r4, #0
 8004be2:	2403      	movne	r4, #3
 8004be4:	e7eb      	b.n	8004bbe <eMBRTUInit+0x1e>
 8004be6:	bf00      	nop
 8004be8:	00177fa0 	.word	0x00177fa0

08004bec <eMBRTUStart>:

void
eMBRTUStart( void )
{
 8004bec:	b508      	push	{r3, lr}
    ENTER_CRITICAL_SECTION(  );
 8004bee:	f000 f95d 	bl	8004eac <EnterCriticalSection>
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	4b04      	ldr	r3, [pc, #16]	; (8004c08 <eMBRTUStart+0x1c>)
 8004bf6:	7019      	strb	r1, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE );
 8004bf8:	2001      	movs	r0, #1
 8004bfa:	f000 f9d9 	bl	8004fb0 <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
 8004bfe:	f000 fa7c 	bl	80050fa <vMBPortTimersEnable>

    EXIT_CRITICAL_SECTION(  );
 8004c02:	f000 f954 	bl	8004eae <ExitCriticalSection>
}
 8004c06:	bd08      	pop	{r3, pc}
 8004c08:	200012ba 	.word	0x200012ba

08004c0c <eMBRTUStop>:

void
eMBRTUStop( void )
{
 8004c0c:	b508      	push	{r3, lr}
    ENTER_CRITICAL_SECTION(  );
 8004c0e:	f000 f94d 	bl	8004eac <EnterCriticalSection>
    vMBPortSerialEnable( FALSE, FALSE );
 8004c12:	2100      	movs	r1, #0
 8004c14:	4608      	mov	r0, r1
 8004c16:	f000 f9cb 	bl	8004fb0 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
 8004c1a:	f000 fa72 	bl	8005102 <vMBPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
 8004c1e:	f000 f946 	bl	8004eae <ExitCriticalSection>
}
 8004c22:	bd08      	pop	{r3, pc}

08004c24 <eMBRTUReceive>:

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 8004c24:	b570      	push	{r4, r5, r6, lr}
 8004c26:	4606      	mov	r6, r0
 8004c28:	460d      	mov	r5, r1
 8004c2a:	4614      	mov	r4, r2
    eMBErrorCode    eStatus = MB_ENOERR;

    ENTER_CRITICAL_SECTION(  );
 8004c2c:	f000 f93e 	bl	8004eac <EnterCriticalSection>
//    assert_param( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 8004c30:	4b0e      	ldr	r3, [pc, #56]	; (8004c6c <eMBRTUReceive+0x48>)
 8004c32:	881b      	ldrh	r3, [r3, #0]
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	2b03      	cmp	r3, #3
 8004c38:	d804      	bhi.n	8004c44 <eMBRTUReceive+0x20>
        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
    }
    else
    {
        eStatus = MB_EIO;
 8004c3a:	2405      	movs	r4, #5
    }

    EXIT_CRITICAL_SECTION(  );
 8004c3c:	f000 f937 	bl	8004eae <ExitCriticalSection>
    return eStatus;
}
 8004c40:	4620      	mov	r0, r4
 8004c42:	bd70      	pop	{r4, r5, r6, pc}
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 8004c44:	4b09      	ldr	r3, [pc, #36]	; (8004c6c <eMBRTUReceive+0x48>)
 8004c46:	8819      	ldrh	r1, [r3, #0]
 8004c48:	b289      	uxth	r1, r1
 8004c4a:	4809      	ldr	r0, [pc, #36]	; (8004c70 <eMBRTUReceive+0x4c>)
 8004c4c:	f7ff fdb6 	bl	80047bc <usMBCRC16>
 8004c50:	b950      	cbnz	r0, 8004c68 <eMBRTUReceive+0x44>
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 8004c52:	4b07      	ldr	r3, [pc, #28]	; (8004c70 <eMBRTUReceive+0x4c>)
 8004c54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c58:	7032      	strb	r2, [r6, #0]
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 8004c5a:	4a04      	ldr	r2, [pc, #16]	; (8004c6c <eMBRTUReceive+0x48>)
 8004c5c:	8812      	ldrh	r2, [r2, #0]
 8004c5e:	3a03      	subs	r2, #3
 8004c60:	8022      	strh	r2, [r4, #0]
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 8004c62:	602b      	str	r3, [r5, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8004c64:	2400      	movs	r4, #0
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 8004c66:	e7e9      	b.n	8004c3c <eMBRTUReceive+0x18>
        eStatus = MB_EIO;
 8004c68:	2405      	movs	r4, #5
 8004c6a:	e7e7      	b.n	8004c3c <eMBRTUReceive+0x18>
 8004c6c:	200013c0 	.word	0x200013c0
 8004c70:	200012c0 	.word	0x200012c0

08004c74 <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 8004c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c78:	4605      	mov	r5, r0
 8004c7a:	460c      	mov	r4, r1
 8004c7c:	4690      	mov	r8, r2
    eMBErrorCode    eStatus = MB_ENOERR;
    USHORT          usCRC16;

    ENTER_CRITICAL_SECTION(  );
 8004c7e:	f000 f915 	bl	8004eac <EnterCriticalSection>

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
 8004c82:	4b19      	ldr	r3, [pc, #100]	; (8004ce8 <eMBRTUSend+0x74>)
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d005      	beq.n	8004c98 <eMBRTUSend+0x24>
        eSndState = STATE_TX_XMIT;
        vMBPortSerialEnable( FALSE, TRUE );
    }
    else
    {
        eStatus = MB_EIO;
 8004c8c:	2405      	movs	r4, #5
    }
    EXIT_CRITICAL_SECTION(  );
 8004c8e:	f000 f90e 	bl	8004eae <ExitCriticalSection>
    return eStatus;
}
 8004c92:	4620      	mov	r0, r4
 8004c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 8004c98:	1e60      	subs	r0, r4, #1
 8004c9a:	4b14      	ldr	r3, [pc, #80]	; (8004cec <eMBRTUSend+0x78>)
 8004c9c:	6018      	str	r0, [r3, #0]
        usSndBufferCount = 1;
 8004c9e:	4f14      	ldr	r7, [pc, #80]	; (8004cf0 <eMBRTUSend+0x7c>)
 8004ca0:	2601      	movs	r6, #1
 8004ca2:	803e      	strh	r6, [r7, #0]
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 8004ca4:	f804 5c01 	strb.w	r5, [r4, #-1]
        usSndBufferCount += usLength;
 8004ca8:	883a      	ldrh	r2, [r7, #0]
 8004caa:	4442      	add	r2, r8
 8004cac:	b292      	uxth	r2, r2
 8004cae:	803a      	strh	r2, [r7, #0]
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 8004cb0:	8839      	ldrh	r1, [r7, #0]
 8004cb2:	b289      	uxth	r1, r1
 8004cb4:	f7ff fd82 	bl	80047bc <usMBCRC16>
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 8004cb8:	883b      	ldrh	r3, [r7, #0]
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	199a      	adds	r2, r3, r6
 8004cbe:	b292      	uxth	r2, r2
 8004cc0:	803a      	strh	r2, [r7, #0]
 8004cc2:	b2c2      	uxtb	r2, r0
 8004cc4:	490b      	ldr	r1, [pc, #44]	; (8004cf4 <eMBRTUSend+0x80>)
 8004cc6:	54ca      	strb	r2, [r1, r3]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 8004cc8:	883b      	ldrh	r3, [r7, #0]
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	199a      	adds	r2, r3, r6
 8004cce:	b292      	uxth	r2, r2
 8004cd0:	803a      	strh	r2, [r7, #0]
 8004cd2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8004cd6:	54c8      	strb	r0, [r1, r3]
        eSndState = STATE_TX_XMIT;
 8004cd8:	4b07      	ldr	r3, [pc, #28]	; (8004cf8 <eMBRTUSend+0x84>)
 8004cda:	701e      	strb	r6, [r3, #0]
        vMBPortSerialEnable( FALSE, TRUE );
 8004cdc:	4631      	mov	r1, r6
 8004cde:	2000      	movs	r0, #0
 8004ce0:	f000 f966 	bl	8004fb0 <vMBPortSerialEnable>
    eMBErrorCode    eStatus = MB_ENOERR;
 8004ce4:	2400      	movs	r4, #0
 8004ce6:	e7d2      	b.n	8004c8e <eMBRTUSend+0x1a>
 8004ce8:	200012ba 	.word	0x200012ba
 8004cec:	200012bc 	.word	0x200012bc
 8004cf0:	200013c2 	.word	0x200013c2
 8004cf4:	200012c0 	.word	0x200012c0
 8004cf8:	200012bb 	.word	0x200012bb

08004cfc <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )
{
 8004cfc:	b500      	push	{lr}
 8004cfe:	b083      	sub	sp, #12
    UCHAR           ucByte;

  //  assert_param( eSndState == STATE_TX_IDLE );

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 8004d00:	f10d 0007 	add.w	r0, sp, #7
 8004d04:	f000 f99e 	bl	8005044 <xMBPortSerialGetByte>

    switch ( eRcvState )
 8004d08:	4b1c      	ldr	r3, [pc, #112]	; (8004d7c <xMBRTUReceiveFSM+0x80>)
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b03      	cmp	r3, #3
 8004d10:	d805      	bhi.n	8004d1e <xMBRTUReceiveFSM+0x22>
 8004d12:	e8df f003 	tbb	[pc, r3]
 8004d16:	0b02      	.short	0x0b02
 8004d18:	081d      	.short	0x081d
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_RX_INIT:
        vMBPortTimersEnable( );
 8004d1a:	f000 f9ee 	bl	80050fa <vMBPortTimersEnable>
        }
        vMBPortTimersEnable();
        break;
    }
    return xTaskNeedSwitch;
}
 8004d1e:	2000      	movs	r0, #0
 8004d20:	b003      	add	sp, #12
 8004d22:	f85d fb04 	ldr.w	pc, [sp], #4
        vMBPortTimersEnable( );
 8004d26:	f000 f9e8 	bl	80050fa <vMBPortTimersEnable>
        break;
 8004d2a:	e7f8      	b.n	8004d1e <xMBRTUReceiveFSM+0x22>
        usRcvBufferPos = 0;
 8004d2c:	4a14      	ldr	r2, [pc, #80]	; (8004d80 <xMBRTUReceiveFSM+0x84>)
 8004d2e:	2300      	movs	r3, #0
 8004d30:	8013      	strh	r3, [r2, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 8004d32:	8813      	ldrh	r3, [r2, #0]
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	1c59      	adds	r1, r3, #1
 8004d38:	b289      	uxth	r1, r1
 8004d3a:	8011      	strh	r1, [r2, #0]
 8004d3c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8004d40:	4a10      	ldr	r2, [pc, #64]	; (8004d84 <xMBRTUReceiveFSM+0x88>)
 8004d42:	54d1      	strb	r1, [r2, r3]
        eRcvState = STATE_RX_RCV;
 8004d44:	4b0d      	ldr	r3, [pc, #52]	; (8004d7c <xMBRTUReceiveFSM+0x80>)
 8004d46:	2202      	movs	r2, #2
 8004d48:	701a      	strb	r2, [r3, #0]
        vMBPortTimersEnable( );
 8004d4a:	f000 f9d6 	bl	80050fa <vMBPortTimersEnable>
        break;
 8004d4e:	e7e6      	b.n	8004d1e <xMBRTUReceiveFSM+0x22>
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 8004d50:	4b0b      	ldr	r3, [pc, #44]	; (8004d80 <xMBRTUReceiveFSM+0x84>)
 8004d52:	881b      	ldrh	r3, [r3, #0]
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	2bff      	cmp	r3, #255	; 0xff
 8004d58:	d80c      	bhi.n	8004d74 <xMBRTUReceiveFSM+0x78>
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 8004d5a:	4909      	ldr	r1, [pc, #36]	; (8004d80 <xMBRTUReceiveFSM+0x84>)
 8004d5c:	880b      	ldrh	r3, [r1, #0]
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	1c5a      	adds	r2, r3, #1
 8004d62:	b292      	uxth	r2, r2
 8004d64:	800a      	strh	r2, [r1, #0]
 8004d66:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8004d6a:	4a06      	ldr	r2, [pc, #24]	; (8004d84 <xMBRTUReceiveFSM+0x88>)
 8004d6c:	54d1      	strb	r1, [r2, r3]
        vMBPortTimersEnable();
 8004d6e:	f000 f9c4 	bl	80050fa <vMBPortTimersEnable>
        break;
 8004d72:	e7d4      	b.n	8004d1e <xMBRTUReceiveFSM+0x22>
            eRcvState = STATE_RX_ERROR;
 8004d74:	4b01      	ldr	r3, [pc, #4]	; (8004d7c <xMBRTUReceiveFSM+0x80>)
 8004d76:	2203      	movs	r2, #3
 8004d78:	701a      	strb	r2, [r3, #0]
 8004d7a:	e7f8      	b.n	8004d6e <xMBRTUReceiveFSM+0x72>
 8004d7c:	200012ba 	.word	0x200012ba
 8004d80:	200013c0 	.word	0x200013c0
 8004d84:	200012c0 	.word	0x200012c0

08004d88 <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
 8004d88:	b510      	push	{r4, lr}
    BOOL            xNeedPoll = FALSE;

   // assert_param( eRcvState == STATE_RX_IDLE );

    switch ( eSndState )
 8004d8a:	4b17      	ldr	r3, [pc, #92]	; (8004de8 <xMBRTUTransmitFSM+0x60>)
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 8004d92:	b123      	cbz	r3, 8004d9e <xMBRTUTransmitFSM+0x16>
 8004d94:	2c01      	cmp	r4, #1
 8004d96:	d007      	beq.n	8004da8 <xMBRTUTransmitFSM+0x20>
 8004d98:	2400      	movs	r4, #0
        }
        break;
    }

    return xNeedPoll;
}
 8004d9a:	4620      	mov	r0, r4
 8004d9c:	bd10      	pop	{r4, pc}
        vMBPortSerialEnable( TRUE, FALSE );
 8004d9e:	2100      	movs	r1, #0
 8004da0:	2001      	movs	r0, #1
 8004da2:	f000 f905 	bl	8004fb0 <vMBPortSerialEnable>
        break;
 8004da6:	e7f8      	b.n	8004d9a <xMBRTUTransmitFSM+0x12>
        if( usSndBufferCount != 0 )
 8004da8:	4b10      	ldr	r3, [pc, #64]	; (8004dec <xMBRTUTransmitFSM+0x64>)
 8004daa:	881b      	ldrh	r3, [r3, #0]
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	b173      	cbz	r3, 8004dce <xMBRTUTransmitFSM+0x46>
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 8004db0:	4c0f      	ldr	r4, [pc, #60]	; (8004df0 <xMBRTUTransmitFSM+0x68>)
 8004db2:	6823      	ldr	r3, [r4, #0]
 8004db4:	7818      	ldrb	r0, [r3, #0]
 8004db6:	f000 f92d 	bl	8005014 <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
 8004dba:	6823      	ldr	r3, [r4, #0]
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	6023      	str	r3, [r4, #0]
            usSndBufferCount--;
 8004dc0:	4a0a      	ldr	r2, [pc, #40]	; (8004dec <xMBRTUTransmitFSM+0x64>)
 8004dc2:	8813      	ldrh	r3, [r2, #0]
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	8013      	strh	r3, [r2, #0]
    BOOL            xNeedPoll = FALSE;
 8004dca:	2400      	movs	r4, #0
 8004dcc:	e7e5      	b.n	8004d9a <xMBRTUTransmitFSM+0x12>
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 8004dce:	2008      	movs	r0, #8
 8004dd0:	f000 f878 	bl	8004ec4 <xMBPortEventPost>
 8004dd4:	4604      	mov	r4, r0
            vMBPortSerialEnable( TRUE, FALSE );
 8004dd6:	2100      	movs	r1, #0
 8004dd8:	2001      	movs	r0, #1
 8004dda:	f000 f8e9 	bl	8004fb0 <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 8004dde:	4b02      	ldr	r3, [pc, #8]	; (8004de8 <xMBRTUTransmitFSM+0x60>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	701a      	strb	r2, [r3, #0]
 8004de4:	e7d9      	b.n	8004d9a <xMBRTUTransmitFSM+0x12>
 8004de6:	bf00      	nop
 8004de8:	200012bb 	.word	0x200012bb
 8004dec:	200013c2 	.word	0x200013c2
 8004df0:	200012bc 	.word	0x200012bc

08004df4 <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
 8004df4:	b510      	push	{r4, lr}
    BOOL            xNeedPoll = FALSE;

    switch ( eRcvState )
 8004df6:	4b0c      	ldr	r3, [pc, #48]	; (8004e28 <xMBRTUTimerT35Expired+0x34>)
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	b15b      	cbz	r3, 8004e14 <xMBRTUTimerT35Expired+0x20>
 8004dfc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004e00:	2a02      	cmp	r2, #2
 8004e02:	d00c      	beq.n	8004e1e <xMBRTUTimerT35Expired+0x2a>
 8004e04:	2400      	movs	r4, #0
    //    assert_param( ( eRcvState == STATE_RX_INIT ) ||
    //            ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
         break;
    }

    vMBPortTimersDisable(  );
 8004e06:	f000 f97c 	bl	8005102 <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
 8004e0a:	4b07      	ldr	r3, [pc, #28]	; (8004e28 <xMBRTUTimerT35Expired+0x34>)
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	701a      	strb	r2, [r3, #0]

    return xNeedPoll;
}
 8004e10:	4620      	mov	r0, r4
 8004e12:	bd10      	pop	{r4, pc}
        xNeedPoll = xMBPortEventPost( EV_READY );
 8004e14:	2001      	movs	r0, #1
 8004e16:	f000 f855 	bl	8004ec4 <xMBPortEventPost>
 8004e1a:	4604      	mov	r4, r0
        break;
 8004e1c:	e7f3      	b.n	8004e06 <xMBRTUTimerT35Expired+0x12>
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 8004e1e:	2002      	movs	r0, #2
 8004e20:	f000 f850 	bl	8004ec4 <xMBPortEventPost>
 8004e24:	4604      	mov	r4, r0
        break;
 8004e26:	e7ee      	b.n	8004e06 <xMBRTUTimerT35Expired+0x12>
 8004e28:	200012ba 	.word	0x200012ba

08004e2c <xMBUtilSetBits>:

/* ----------------------- Start implementation -----------------------------*/
void
xMBUtilSetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits,
                UCHAR ucValue )
{
 8004e2c:	b530      	push	{r4, r5, lr}
  //  assert_param( ucNBits <= 8 );
  //  assert_param( ( size_t )BITS_UCHAR == sizeof( UCHAR ) * 8 );

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 8004e2e:	08cc      	lsrs	r4, r1, #3
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8004e30:	f104 0e01 	add.w	lr, r4, #1
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8004e34:	f04f 0c01 	mov.w	ip, #1
 8004e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8004e3c:	f10c 3cff 	add.w	ip, ip, #4294967295
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;
 8004e40:	fa1f fc8c 	uxth.w	ip, ip
 8004e44:	eba1 02c4 	sub.w	r2, r1, r4, lsl #3
 8004e48:	fa0c fc02 	lsl.w	ip, ip, r2
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8004e4c:	f810 500e 	ldrb.w	r5, [r0, lr]
 8004e50:	5d02      	ldrb	r2, [r0, r4]
 8004e52:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 8004e56:	ea22 020c 	bic.w	r2, r2, ip
    usValue <<= usNPreBits;
 8004e5a:	f001 0107 	and.w	r1, r1, #7
 8004e5e:	408b      	lsls	r3, r1
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 8004e60:	4313      	orrs	r3, r2
 8004e62:	b21b      	sxth	r3, r3

    /* move bits back into storage */
    ucByteBuf[usByteOffset] = ( UCHAR )( usWordBuf & 0xFF );
 8004e64:	5503      	strb	r3, [r0, r4]
    ucByteBuf[usByteOffset + 1] = ( UCHAR )( usWordBuf >> BITS_UCHAR );
 8004e66:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004e6a:	f800 300e 	strb.w	r3, [r0, lr]
}
 8004e6e:	bd30      	pop	{r4, r5, pc}

08004e70 <xMBUtilGetBits>:
    USHORT          usByteOffset;
    USHORT          usNPreBits;

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 8004e70:	ea4f 0cd1 	mov.w	ip, r1, lsr #3
    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8004e74:	f10c 0301 	add.w	r3, ip, #1
 8004e78:	5cc3      	ldrb	r3, [r0, r3]
 8004e7a:	f810 000c 	ldrb.w	r0, [r0, ip]

    /* throw away unneeded bits. */
    usWordBuf >>= usNPreBits;
 8004e7e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8004e82:	f001 0107 	and.w	r1, r1, #7
 8004e86:	4108      	asrs	r0, r1
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8004e88:	2301      	movs	r3, #1
 8004e8a:	4093      	lsls	r3, r2
 8004e8c:	3b01      	subs	r3, #1

    /* mask away bits above the requested bitfield. */
    usWordBuf &= usMask;
 8004e8e:	4018      	ands	r0, r3

    return ( UCHAR ) usWordBuf;
}
 8004e90:	b2c0      	uxtb	r0, r0
 8004e92:	4770      	bx	lr

08004e94 <prveMBError2Exception>:
eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
    eMBException    eStatus;

    switch ( eErrorCode )
 8004e94:	2801      	cmp	r0, #1
 8004e96:	d005      	beq.n	8004ea4 <prveMBError2Exception+0x10>
 8004e98:	2807      	cmp	r0, #7
 8004e9a:	d005      	beq.n	8004ea8 <prveMBError2Exception+0x14>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 8004e9c:	2800      	cmp	r0, #0
 8004e9e:	bf18      	it	ne
 8004ea0:	2004      	movne	r0, #4
 8004ea2:	4770      	bx	lr
    switch ( eErrorCode )
 8004ea4:	2002      	movs	r0, #2
 8004ea6:	4770      	bx	lr
        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
            break;

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 8004ea8:	2006      	movs	r0, #6
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
            break;
    }

    return eStatus;
}
 8004eaa:	4770      	bx	lr

08004eac <EnterCriticalSection>:

/* ----------------------- Start implementation -----------------------------*/
void EnterCriticalSection(void)
{
  //  rt_enter_critical();
}
 8004eac:	4770      	bx	lr

08004eae <ExitCriticalSection>:

void ExitCriticalSection(void)
{
   // rt_exit_critical();
}
 8004eae:	4770      	bx	lr

08004eb0 <xMBPortEventInit>:



BOOL
xMBPortEventInit( void )
{
 8004eb0:	b508      	push	{r3, lr}
	xSlaveOsEventGroupHandle = xGetOSEvent();
 8004eb2:	f7fc f937 	bl	8001124 <xGetOSEvent>
 8004eb6:	4b02      	ldr	r3, [pc, #8]	; (8004ec0 <xMBPortEventInit+0x10>)
 8004eb8:	6018      	str	r0, [r3, #0]

   // rt_event_init(&xSlaveOsEvent,"slave event",RT_IPC_FLAG_PRIO);
    return TRUE;
}
 8004eba:	2001      	movs	r0, #1
 8004ebc:	bd08      	pop	{r3, pc}
 8004ebe:	bf00      	nop
 8004ec0:	200013c4 	.word	0x200013c4

08004ec4 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
 8004ec4:	b500      	push	{lr}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	4601      	mov	r1, r0
	BaseType_t xHigherPriorityTaskWoken, xResult;
	  switch (eEvent)
 8004eca:	2804      	cmp	r0, #4
 8004ecc:	d01f      	beq.n	8004f0e <xMBPortEventPost+0x4a>
 8004ece:	d818      	bhi.n	8004f02 <xMBPortEventPost+0x3e>
 8004ed0:	1e43      	subs	r3, r0, #1
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d816      	bhi.n	8004f06 <xMBPortEventPost+0x42>
	    {
	    case EV_READY:
	    case EV_FRAME_RECEIVED:

	    		/* xHigherPriorityTaskWoken must be initialised to pdFALSE. */
	    		xHigherPriorityTaskWoken = pdFALSE;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	9301      	str	r3, [sp, #4]

	    		 /* Set bit 0 and bit 4 in xEventGroup. */
	    		 xResult = xEventGroupSetBitsFromISR(
 8004edc:	aa01      	add	r2, sp, #4
 8004ede:	4b0e      	ldr	r3, [pc, #56]	; (8004f18 <xMBPortEventPost+0x54>)
 8004ee0:	6818      	ldr	r0, [r3, #0]
 8004ee2:	f000 fc87 	bl	80057f4 <xEventGroupSetBitsFromISR>
	    				 	 	 	 	 	 	 xSlaveOsEventGroupHandle,   /* The event group being updated. */
												 eEvent , /* The bits being set. */
	    		                              &xHigherPriorityTaskWoken );

	    		  /* Was the message posted successfully? */
	    		  if( xResult != pdFAIL )
 8004ee6:	b170      	cbz	r0, 8004f06 <xMBPortEventPost+0x42>
	    		  {
	    		      /* If xHigherPriorityTaskWoken is now set to pdTRUE then a context
	    		      switch should be requested.  The macro used is port specific and will
	    		      be either portYIELD_FROM_ISR() or portEND_SWITCHING_ISR() - refer to
	    		      the documentation page for the port being used. */
	    		      portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8004ee8:	9b01      	ldr	r3, [sp, #4]
 8004eea:	b163      	cbz	r3, 8004f06 <xMBPortEventPost+0x42>
 8004eec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004ef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ef4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004ef8:	f3bf 8f4f 	dsb	sy
 8004efc:	f3bf 8f6f 	isb	sy
 8004f00:	e001      	b.n	8004f06 <xMBPortEventPost+0x42>
	  switch (eEvent)
 8004f02:	2808      	cmp	r0, #8
 8004f04:	d003      	beq.n	8004f0e <xMBPortEventPost+0x4a>



   // rt_event_send(&xSlaveOsEvent, eEvent);
    return TRUE;
}
 8004f06:	2001      	movs	r0, #1
 8004f08:	b003      	add	sp, #12
 8004f0a:	f85d fb04 	ldr.w	pc, [sp], #4
	    	xEventGroupSetBits(xSlaveOsEventGroupHandle,eEvent);
 8004f0e:	4b02      	ldr	r3, [pc, #8]	; (8004f18 <xMBPortEventPost+0x54>)
 8004f10:	6818      	ldr	r0, [r3, #0]
 8004f12:	f000 fc21 	bl	8005758 <xEventGroupSetBits>
	        break;
 8004f16:	e7f6      	b.n	8004f06 <xMBPortEventPost+0x42>
 8004f18:	200013c4 	.word	0x200013c4

08004f1c <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
 8004f1c:	b530      	push	{r4, r5, lr}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	4605      	mov	r5, r0
   // rt_uint32_t recvedEvent;
    /* waiting forever OS event */
	 EventBits_t recvedEvent;
	 recvedEvent = xEventGroupWaitBits(xSlaveOsEventGroupHandle,    EV_READY | EV_FRAME_RECEIVED | EV_EXECUTE | EV_FRAME_SENT,   pdTRUE, pdFALSE, portMAX_DELAY );
 8004f22:	f04f 33ff 	mov.w	r3, #4294967295
 8004f26:	9300      	str	r3, [sp, #0]
 8004f28:	2300      	movs	r3, #0
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	210f      	movs	r1, #15
 8004f2e:	4c0d      	ldr	r4, [pc, #52]	; (8004f64 <xMBPortEventGet+0x48>)
 8004f30:	6820      	ldr	r0, [r4, #0]
 8004f32:	f000 fb86 	bl	8005642 <xEventGroupWaitBits>
   // rt_event_recv(&xSlaveOsEvent,
   //         EV_READY | EV_FRAME_RECEIVED | EV_EXECUTE | EV_FRAME_SENT,
   //         RT_EVENT_FLAG_OR | RT_EVENT_FLAG_CLEAR, RT_WAITING_FOREVER,
   //         &recvedEvent);
    switch (recvedEvent)
 8004f36:	1e43      	subs	r3, r0, #1
 8004f38:	2b07      	cmp	r3, #7
 8004f3a:	d807      	bhi.n	8004f4c <xMBPortEventGet+0x30>
 8004f3c:	e8df f003 	tbb	[pc, r3]
 8004f40:	0c060904 	.word	0x0c060904
 8004f44:	0f060606 	.word	0x0f060606
    {
    case EV_READY:
        *eEvent = EV_READY;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	702b      	strb	r3, [r5, #0]
    case EV_FRAME_SENT:
        *eEvent = EV_FRAME_SENT;
        break;
    }
    return TRUE;
}
 8004f4c:	2001      	movs	r0, #1
 8004f4e:	b003      	add	sp, #12
 8004f50:	bd30      	pop	{r4, r5, pc}
        *eEvent = EV_FRAME_RECEIVED;
 8004f52:	2302      	movs	r3, #2
 8004f54:	702b      	strb	r3, [r5, #0]
        break;
 8004f56:	e7f9      	b.n	8004f4c <xMBPortEventGet+0x30>
        *eEvent = EV_EXECUTE;
 8004f58:	2304      	movs	r3, #4
 8004f5a:	702b      	strb	r3, [r5, #0]
        break;
 8004f5c:	e7f6      	b.n	8004f4c <xMBPortEventGet+0x30>
        *eEvent = EV_FRAME_SENT;
 8004f5e:	2308      	movs	r3, #8
 8004f60:	702b      	strb	r3, [r5, #0]
        break;
 8004f62:	e7f3      	b.n	8004f4c <xMBPortEventGet+0x30>
 8004f64:	200013c4 	.word	0x200013c4

08004f68 <xMBPortSerialInit>:
	HAL_GPIO_WritePin(GPIOA,EN_Pin,GPIO_PIN_SET);
}

/* ----------------------- Start implementation -----------------------------*/
BOOL xMBPortSerialInit(UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity)
{
 8004f68:	b508      	push	{r3, lr}
     * @note MODBUS_SLAVE_RT_CONTROL_PIN_INDEX need be defined by user
     */
  //  rt_pin_mode(MODBUS_SLAVE_RT_CONTROL_PIN_INDEX, PIN_MODE_OUTPUT);

    /* set serial configure parameter */
     huart1.Init.BaudRate = ulBaudRate;
 8004f6a:	4a10      	ldr	r2, [pc, #64]	; (8004fac <xMBPortSerialInit+0x44>)
 8004f6c:	6051      	str	r1, [r2, #4]
     huart1.Init.StopBits = UART_STOPBITS_1;
 8004f6e:	2100      	movs	r1, #0
 8004f70:	60d1      	str	r1, [r2, #12]

    switch(eParity)
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d00a      	beq.n	8004f8c <xMBPortSerialInit+0x24>
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d010      	beq.n	8004f9c <xMBPortSerialInit+0x34>
 8004f7a:	b123      	cbz	r3, 8004f86 <xMBPortSerialInit+0x1e>
    		huart1.Init.Parity = UART_PARITY_EVEN;
    		break;
    }
    /* set serial configure */

    HAL_UART_Init(&huart1);
 8004f7c:	480b      	ldr	r0, [pc, #44]	; (8004fac <xMBPortSerialInit+0x44>)
 8004f7e:	f7ff f84d 	bl	800401c <HAL_UART_Init>
          //         sizeof(serial_soft_trans_irq_stack),
           //        10, 5);
    //rt_thread_startup(&thread_serial_soft_trans_irq);

    return TRUE;
}
 8004f82:	2001      	movs	r0, #1
 8004f84:	bd08      	pop	{r3, pc}
    		huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004f86:	6091      	str	r1, [r2, #8]
    		huart1.Init.Parity = UART_PARITY_NONE;
 8004f88:	6111      	str	r1, [r2, #16]
    		break;
 8004f8a:	e7f7      	b.n	8004f7c <xMBPortSerialInit+0x14>
    		huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8004f8c:	4b07      	ldr	r3, [pc, #28]	; (8004fac <xMBPortSerialInit+0x44>)
 8004f8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004f92:	609a      	str	r2, [r3, #8]
    	  	huart1.Init.Parity = UART_PARITY_ODD;
 8004f94:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004f98:	611a      	str	r2, [r3, #16]
    	  	break;
 8004f9a:	e7ef      	b.n	8004f7c <xMBPortSerialInit+0x14>
    		huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8004f9c:	4b03      	ldr	r3, [pc, #12]	; (8004fac <xMBPortSerialInit+0x44>)
 8004f9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004fa2:	609a      	str	r2, [r3, #8]
    		huart1.Init.Parity = UART_PARITY_EVEN;
 8004fa4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fa8:	611a      	str	r2, [r3, #16]
    		break;
 8004faa:	e7e7      	b.n	8004f7c <xMBPortSerialInit+0x14>
 8004fac:	20001114 	.word	0x20001114

08004fb0 <vMBPortSerialEnable>:

void vMBPortSerialEnable(BOOL xRxEnable, BOOL xTxEnable)
{
 8004fb0:	b510      	push	{r4, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	460c      	mov	r4, r1
//    rt_uint32_t recved_event;
    if (xRxEnable)
 8004fb6:	b190      	cbz	r0, 8004fde <vMBPortSerialEnable+0x2e>
    {

    	HAL_UART_Receive_IT(&huart1,&rx_data_buf,1);
 8004fb8:	2201      	movs	r2, #1
 8004fba:	4912      	ldr	r1, [pc, #72]	; (8005004 <vMBPortSerialEnable+0x54>)
 8004fbc:	4812      	ldr	r0, [pc, #72]	; (8005008 <vMBPortSerialEnable+0x58>)
 8004fbe:	f7ff faf6 	bl	80045ae <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(GPIOA,EN_Pin,GPIO_PIN_RESET);
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004fc8:	4810      	ldr	r0, [pc, #64]	; (800500c <vMBPortSerialEnable+0x5c>)
 8004fca:	f7fd ff71 	bl	8002eb0 <HAL_GPIO_WritePin>
    	vTransmitEnable();
        /* disable RX interrupt */
    	HAL_UART_AbortReceive_IT(&huart1);
     //   serial->ops->control(serial, RT_DEVICE_CTRL_CLR_INT, (void *)RT_DEVICE_FLAG_INT_RX);
    }
    if (xTxEnable)
 8004fce:	b184      	cbz	r4, 8004ff2 <vMBPortSerialEnable+0x42>
    {
    	//HAL_HalfDuplex_EnableTransmitter(&huart1);

    	xEventGroupSetBits(xSerialEventGroupHandle,EVENT_SERIAL_TRANS_START);
 8004fd0:	2101      	movs	r1, #1
 8004fd2:	4b0f      	ldr	r3, [pc, #60]	; (8005010 <vMBPortSerialEnable+0x60>)
 8004fd4:	6818      	ldr	r0, [r3, #0]
 8004fd6:	f000 fbbf 	bl	8005758 <xEventGroupSetBits>
    	xEventGroupWaitBits( xSerialEventGroupHandle,  EVENT_SERIAL_TRANS_START,  pdTRUE, pdFALSE, 0 );
        //rt_event_recv(&event_serial, EVENT_SERIAL_TRANS_START,
        //        RT_EVENT_FLAG_OR | RT_EVENT_FLAG_CLEAR, 0,
         //       &recved_event);
    }
}
 8004fda:	b002      	add	sp, #8
 8004fdc:	bd10      	pop	{r4, pc}
	HAL_GPIO_WritePin(GPIOA,EN_Pin,GPIO_PIN_SET);
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004fe4:	4809      	ldr	r0, [pc, #36]	; (800500c <vMBPortSerialEnable+0x5c>)
 8004fe6:	f7fd ff63 	bl	8002eb0 <HAL_GPIO_WritePin>
    	HAL_UART_AbortReceive_IT(&huart1);
 8004fea:	4807      	ldr	r0, [pc, #28]	; (8005008 <vMBPortSerialEnable+0x58>)
 8004fec:	f7ff f86c 	bl	80040c8 <HAL_UART_AbortReceive_IT>
 8004ff0:	e7ed      	b.n	8004fce <vMBPortSerialEnable+0x1e>
    	xEventGroupWaitBits( xSerialEventGroupHandle,  EVENT_SERIAL_TRANS_START,  pdTRUE, pdFALSE, 0 );
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	4611      	mov	r1, r2
 8004ffa:	4805      	ldr	r0, [pc, #20]	; (8005010 <vMBPortSerialEnable+0x60>)
 8004ffc:	6800      	ldr	r0, [r0, #0]
 8004ffe:	f000 fb20 	bl	8005642 <xEventGroupWaitBits>
}
 8005002:	e7ea      	b.n	8004fda <vMBPortSerialEnable+0x2a>
 8005004:	200013c9 	.word	0x200013c9
 8005008:	20001114 	.word	0x20001114
 800500c:	40010800 	.word	0x40010800
 8005010:	200013cc 	.word	0x200013cc

08005014 <xMBPortSerialPutByte>:
    //serial->parent.close(&(serial->parent));
}

BOOL xMBPortSerialPutByte(CHAR ucByte)

{
 8005014:	b500      	push	{lr}
 8005016:	b083      	sub	sp, #12
 8005018:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_GPIO_WritePin(GPIOA,EN_Pin,GPIO_PIN_SET);
 800501c:	2201      	movs	r2, #1
 800501e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005022:	4806      	ldr	r0, [pc, #24]	; (800503c <xMBPortSerialPutByte+0x28>)
 8005024:	f7fd ff44 	bl	8002eb0 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_IT(&huart1,(uint8_t *) &ucByte, 1);
 8005028:	2201      	movs	r2, #1
 800502a:	f10d 0107 	add.w	r1, sp, #7
 800502e:	4804      	ldr	r0, [pc, #16]	; (8005040 <xMBPortSerialPutByte+0x2c>)
 8005030:	f7ff f824 	bl	800407c <HAL_UART_Transmit_IT>
    //serial->parent.write(&(serial->parent), 0, ;
    return TRUE;
}
 8005034:	2001      	movs	r0, #1
 8005036:	b003      	add	sp, #12
 8005038:	f85d fb04 	ldr.w	pc, [sp], #4
 800503c:	40010800 	.word	0x40010800
 8005040:	20001114 	.word	0x20001114

08005044 <xMBPortSerialGetByte>:

BOOL xMBPortSerialGetByte(CHAR * pucByte)
{
	* pucByte = rx_data;
 8005044:	4b02      	ldr	r3, [pc, #8]	; (8005050 <xMBPortSerialGetByte+0xc>)
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	7003      	strb	r3, [r0, #0]
    //serial->parent.read(&(serial->parent), 0, pucByte, 1);
    return TRUE;
}
 800504a:	2001      	movs	r0, #1
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	200013c8 	.word	0x200013c8

08005054 <HAL_UART_TxCpltCallback>:


#ifdef SLAVE_MODE
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005054:	b500      	push	{lr}
 8005056:	b083      	sub	sp, #12

	BaseType_t xHigherPriorityTaskWoken, xResult;
	/* xHigherPriorityTaskWoken must be initialised to pdFALSE. */
	xHigherPriorityTaskWoken = pdFALSE;
 8005058:	2300      	movs	r3, #0
 800505a:	9301      	str	r3, [sp, #4]

	 /* Set bit 0 and bit 4 in xEventGroup. */
	 xResult = xEventGroupSetBitsFromISR(
 800505c:	aa01      	add	r2, sp, #4
 800505e:	2101      	movs	r1, #1
 8005060:	4b09      	ldr	r3, [pc, #36]	; (8005088 <HAL_UART_TxCpltCallback+0x34>)
 8005062:	6818      	ldr	r0, [r3, #0]
 8005064:	f000 fbc6 	bl	80057f4 <xEventGroupSetBitsFromISR>
			 	 	 	 	 	   xSerialEventGroupHandle,   /* The event group being updated. */
								   EVENT_SERIAL_TRANS_START, /* The bits being set. */
	                              &xHigherPriorityTaskWoken );

	  /* Was the message posted successfully? */
	  if( xResult != pdFAIL )
 8005068:	b158      	cbz	r0, 8005082 <HAL_UART_TxCpltCallback+0x2e>
	  {
	      /* If xHigherPriorityTaskWoken is now set to pdTRUE then a context
	      switch should be requested.  The macro used is port specific and will
	      be either portYIELD_FROM_ISR() or portEND_SWITCHING_ISR() - refer to
	      the documentation page for the port being used. */
	      portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800506a:	9b01      	ldr	r3, [sp, #4]
 800506c:	b14b      	cbz	r3, 8005082 <HAL_UART_TxCpltCallback+0x2e>
 800506e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005076:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	f3bf 8f6f 	isb	sy
	  }
}
 8005082:	b003      	add	sp, #12
 8005084:	f85d fb04 	ldr.w	pc, [sp], #4
 8005088:	200013cc 	.word	0x200013cc

0800508c <StartUARTTask>:



void StartUARTTask(void *argument)
{
 800508c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800508e:	b083      	sub	sp, #12
	  EventBits_t uxBits;
	  /* Attempt to create the event group. */
	  xSerialEventGroupHandle = xGetUARTEvent();
 8005090:	f7fc f84e 	bl	8001130 <xGetUARTEvent>
 8005094:	4b09      	ldr	r3, [pc, #36]	; (80050bc <StartUARTTask+0x30>)
 8005096:	6018      	str	r0, [r3, #0]
	  while(1)
	  {
		  uxBits = xEventGroupWaitBits( xSerialEventGroupHandle,  EVENT_SERIAL_TRANS_START,  pdTRUE, pdFALSE, portMAX_DELAY );
 8005098:	461e      	mov	r6, r3
 800509a:	f04f 35ff 	mov.w	r5, #4294967295
		  switch (uxBits)
		  {
		  	  	  case EVENT_SERIAL_TRANS_START:
		  	  		  pxMBFrameCBTransmitterEmpty();
 800509e:	4f08      	ldr	r7, [pc, #32]	; (80050c0 <StartUARTTask+0x34>)
		  uxBits = xEventGroupWaitBits( xSerialEventGroupHandle,  EVENT_SERIAL_TRANS_START,  pdTRUE, pdFALSE, portMAX_DELAY );
 80050a0:	2400      	movs	r4, #0
 80050a2:	9500      	str	r5, [sp, #0]
 80050a4:	4623      	mov	r3, r4
 80050a6:	2201      	movs	r2, #1
 80050a8:	4611      	mov	r1, r2
 80050aa:	6830      	ldr	r0, [r6, #0]
 80050ac:	f000 fac9 	bl	8005642 <xEventGroupWaitBits>
		  switch (uxBits)
 80050b0:	2801      	cmp	r0, #1
 80050b2:	d1f6      	bne.n	80050a2 <StartUARTTask+0x16>
		  	  		  pxMBFrameCBTransmitterEmpty();
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	4798      	blx	r3
		  	  		  break;
 80050b8:	e7f2      	b.n	80050a0 <StartUARTTask+0x14>
 80050ba:	bf00      	nop
 80050bc:	200013cc 	.word	0x200013cc
 80050c0:	20001284 	.word	0x20001284

080050c4 <HAL_UART_RxCpltCallback>:

}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80050c4:	b508      	push	{r3, lr}
	rx_data = rx_data_buf;
 80050c6:	4906      	ldr	r1, [pc, #24]	; (80050e0 <HAL_UART_RxCpltCallback+0x1c>)
 80050c8:	780a      	ldrb	r2, [r1, #0]
 80050ca:	4b06      	ldr	r3, [pc, #24]	; (80050e4 <HAL_UART_RxCpltCallback+0x20>)
 80050cc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1,&rx_data_buf,1);
 80050ce:	2201      	movs	r2, #1
 80050d0:	4805      	ldr	r0, [pc, #20]	; (80050e8 <HAL_UART_RxCpltCallback+0x24>)
 80050d2:	f7ff fa6c 	bl	80045ae <HAL_UART_Receive_IT>
	pxMBFrameCBByteReceived();
 80050d6:	4b05      	ldr	r3, [pc, #20]	; (80050ec <HAL_UART_RxCpltCallback+0x28>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4798      	blx	r3
}
 80050dc:	bd08      	pop	{r3, pc}
 80050de:	bf00      	nop
 80050e0:	200013c9 	.word	0x200013c9
 80050e4:	200013c8 	.word	0x200013c8
 80050e8:	20001114 	.word	0x20001114
 80050ec:	20001280 	.word	0x20001280

080050f0 <xMBPortTimersInit>:



/* ----------------------- Start implementation -----------------------------*/
BOOL xMBPortTimersInit(USHORT usTim1Timerout50us)
{
 80050f0:	b508      	push	{r3, lr}

   vTimerInit(usTim1Timerout50us);
 80050f2:	f7fc f829 	bl	8001148 <vTimerInit>
   //                timer_timeout_ind, /* bind timeout callback function */
    //               RT_NULL,
     //              (50 * usTim1Timerout50us) / (1000 * 1000 / RT_TICK_PER_SECOND) + 1,
      //             RT_TIMER_FLAG_ONE_SHOT); /* one shot */
    return TRUE;
}
 80050f6:	2001      	movs	r0, #1
 80050f8:	bd08      	pop	{r3, pc}

080050fa <vMBPortTimersEnable>:

void vMBPortTimersEnable()
{
 80050fa:	b508      	push	{r3, lr}
	vStartTimer();
 80050fc:	f7fc f830 	bl	8001160 <vStartTimer>
}
 8005100:	bd08      	pop	{r3, pc}

08005102 <vMBPortTimersDisable>:


void vMBPortTimersDisable()
{
 8005102:	b508      	push	{r3, lr}
	vStopTimer();
 8005104:	f7fc f834 	bl	8001170 <vStopTimer>
}
 8005108:	bd08      	pop	{r3, pc}
	...

0800510c <rvvTIMERExpiredISR>:


#ifdef SLAVE_MODE
void rvvTIMERExpiredISR()
{
 800510c:	b508      	push	{r3, lr}
    (void) pxMBPortCBTimerExpired();
 800510e:	4b02      	ldr	r3, [pc, #8]	; (8005118 <rvvTIMERExpiredISR+0xc>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4798      	blx	r3
}
 8005114:	bd08      	pop	{r3, pc}
 8005116:	bf00      	nop
 8005118:	20001288 	.word	0x20001288

0800511c <vUPDATECoils>:
USHORT   usSRegHoldStart                              = S_REG_HOLDING_START;
USHORT   usSRegHoldBuf[S_REG_HOLDING_NREGS]           ;


void vUPDATECoils( uint8_t rw)
{
 800511c:	b570      	push	{r4, r5, r6, lr}
 800511e:	b082      	sub	sp, #8
	volatile uint8_t temp;
	if (rw == 1)
 8005120:	2801      	cmp	r0, #1
 8005122:	d011      	beq.n	8005148 <vUPDATECoils+0x2c>
		{
			temp =xMBUtilGetBits(&ucSCoilBuf[0],i,1);
			vSetOutState( i,temp );
		}
	}
	if (rw == 0)
 8005124:	b970      	cbnz	r0, 8005144 <vUPDATECoils+0x28>
 8005126:	2400      	movs	r4, #0
	{
		for (uint8_t i = 0;i<S_COIL_NCOILS;i++)
		{
			xMBUtilSetBits(&ucSCoilBuf[0],i,1, vGetOutState(i));
 8005128:	4e11      	ldr	r6, [pc, #68]	; (8005170 <vUPDATECoils+0x54>)
 800512a:	2501      	movs	r5, #1
 800512c:	b2e0      	uxtb	r0, r4
 800512e:	f7fb ff73 	bl	8001018 <vGetOutState>
 8005132:	4603      	mov	r3, r0
 8005134:	462a      	mov	r2, r5
 8005136:	b2a1      	uxth	r1, r4
 8005138:	4630      	mov	r0, r6
 800513a:	f7ff fe77 	bl	8004e2c <xMBUtilSetBits>
		for (uint8_t i = 0;i<S_COIL_NCOILS;i++)
 800513e:	3401      	adds	r4, #1
 8005140:	2c04      	cmp	r4, #4
 8005142:	d1f3      	bne.n	800512c <vUPDATECoils+0x10>
		}

	}


}
 8005144:	b002      	add	sp, #8
 8005146:	bd70      	pop	{r4, r5, r6, pc}
 8005148:	2400      	movs	r4, #0
			temp =xMBUtilGetBits(&ucSCoilBuf[0],i,1);
 800514a:	4e09      	ldr	r6, [pc, #36]	; (8005170 <vUPDATECoils+0x54>)
 800514c:	2501      	movs	r5, #1
 800514e:	462a      	mov	r2, r5
 8005150:	b2a1      	uxth	r1, r4
 8005152:	4630      	mov	r0, r6
 8005154:	f7ff fe8c 	bl	8004e70 <xMBUtilGetBits>
 8005158:	f88d 0007 	strb.w	r0, [sp, #7]
			vSetOutState( i,temp );
 800515c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8005160:	b2e0      	uxtb	r0, r4
 8005162:	f7fb ff53 	bl	800100c <vSetOutState>
		for (uint8_t i = 0;i<S_COIL_NCOILS;i++)
 8005166:	3401      	adds	r4, #1
 8005168:	2c04      	cmp	r4, #4
 800516a:	d1f0      	bne.n	800514e <vUPDATECoils+0x32>
 800516c:	e7ea      	b.n	8005144 <vUPDATECoils+0x28>
 800516e:	bf00      	nop
 8005170:	200013d0 	.word	0x200013d0

08005174 <eMBRegInputCB>:
    REG_INPUT_START = S_REG_INPUT_START;
    REG_INPUT_NREGS = S_REG_INPUT_NREGS;
    usRegInStart = usSRegInStart;

    /* it already plus one in modbus function method. */
    usAddress--;
 8005174:	3901      	subs	r1, #1
 8005176:	b289      	uxth	r1, r1

    if ((usAddress >= REG_INPUT_START)
 8005178:	2904      	cmp	r1, #4
 800517a:	d91d      	bls.n	80051b8 <eMBRegInputCB+0x44>
            && (usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS))
 800517c:	188b      	adds	r3, r1, r2
 800517e:	2b0d      	cmp	r3, #13
 8005180:	dc1c      	bgt.n	80051bc <eMBRegInputCB+0x48>
{
 8005182:	b570      	push	{r4, r5, r6, lr}
    usRegInStart = usSRegInStart;
 8005184:	4b0f      	ldr	r3, [pc, #60]	; (80051c4 <eMBRegInputCB+0x50>)
    {
        iRegIndex = usAddress - usRegInStart;
 8005186:	881c      	ldrh	r4, [r3, #0]
 8005188:	1b0c      	subs	r4, r1, r4
 800518a:	b2a4      	uxth	r4, r4
        while (usNRegs > 0)
 800518c:	b1c2      	cbz	r2, 80051c0 <eMBRegInputCB+0x4c>
 800518e:	1c86      	adds	r6, r0, #2
 8005190:	4422      	add	r2, r4
 8005192:	b295      	uxth	r5, r2
        {

            *pucRegBuffer++ = (UCHAR) ( usGetRegInput(iRegIndex) >> 8);
 8005194:	4620      	mov	r0, r4
 8005196:	f7fc faa3 	bl	80016e0 <usGetRegInput>
 800519a:	1200      	asrs	r0, r0, #8
 800519c:	f806 0c02 	strb.w	r0, [r6, #-2]
            *pucRegBuffer++ = (UCHAR) ( usGetRegInput(iRegIndex) & 0xFF);
 80051a0:	4620      	mov	r0, r4
 80051a2:	f7fc fa9d 	bl	80016e0 <usGetRegInput>
 80051a6:	f806 0c01 	strb.w	r0, [r6, #-1]
            iRegIndex++;
 80051aa:	3401      	adds	r4, #1
 80051ac:	b2a4      	uxth	r4, r4
        while (usNRegs > 0)
 80051ae:	3602      	adds	r6, #2
 80051b0:	42ac      	cmp	r4, r5
 80051b2:	d1ef      	bne.n	8005194 <eMBRegInputCB+0x20>
    eMBErrorCode    eStatus = MB_ENOERR;
 80051b4:	2000      	movs	r0, #0
    {
        eStatus = MB_ENOREG;
    }

    return eStatus;
}
 80051b6:	bd70      	pop	{r4, r5, r6, pc}
        eStatus = MB_ENOREG;
 80051b8:	2001      	movs	r0, #1
 80051ba:	4770      	bx	lr
 80051bc:	2001      	movs	r0, #1
}
 80051be:	4770      	bx	lr
    eMBErrorCode    eStatus = MB_ENOERR;
 80051c0:	2000      	movs	r0, #0
 80051c2:	e7f8      	b.n	80051b6 <eMBRegInputCB+0x42>
 80051c4:	200000b8 	.word	0x200000b8

080051c8 <eMBRegHoldingCB>:
    REG_HOLDING_START = S_REG_HOLDING_START;
    REG_HOLDING_NREGS = S_REG_HOLDING_NREGS;
    usRegHoldStart = usSRegHoldStart;

    /* it already plus one in modbus function method. */
    usAddress--;
 80051c8:	3901      	subs	r1, #1
 80051ca:	b289      	uxth	r1, r1

    if ((usAddress >= REG_HOLDING_START)
 80051cc:	290c      	cmp	r1, #12
 80051ce:	d93a      	bls.n	8005246 <eMBRegHoldingCB+0x7e>
{
 80051d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051d4:	4605      	mov	r5, r0
 80051d6:	461e      	mov	r6, r3
            && (usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS))
 80051d8:	188b      	adds	r3, r1, r2
 80051da:	2b2b      	cmp	r3, #43	; 0x2b
 80051dc:	dc35      	bgt.n	800524a <eMBRegHoldingCB+0x82>
    usRegHoldStart = usSRegHoldStart;
 80051de:	4b1e      	ldr	r3, [pc, #120]	; (8005258 <eMBRegHoldingCB+0x90>)
    {
        iRegIndex = usAddress - usRegHoldStart;
 80051e0:	881c      	ldrh	r4, [r3, #0]
 80051e2:	1b0c      	subs	r4, r1, r4
 80051e4:	b2a4      	uxth	r4, r4
        switch (eMode)
 80051e6:	b1b6      	cbz	r6, 8005216 <eMBRegHoldingCB+0x4e>
 80051e8:	2e01      	cmp	r6, #1
 80051ea:	d131      	bne.n	8005250 <eMBRegHoldingCB+0x88>
    eMBErrorCode    eStatus = MB_ENOERR;
 80051ec:	2000      	movs	r0, #0
            }
            break;

        /* write current register values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (usNRegs > 0)
 80051ee:	b36a      	cbz	r2, 800524c <eMBRegHoldingCB+0x84>
 80051f0:	3502      	adds	r5, #2
 80051f2:	1916      	adds	r6, r2, r4
 80051f4:	b2b6      	uxth	r6, r6
            {
            	vSetReg(iRegIndex, (*pucRegBuffer)<<8 | *(pucRegBuffer + 1) );
 80051f6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80051fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80051fe:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8005202:	b2e0      	uxtb	r0, r4
 8005204:	f7fc fa84 	bl	8001710 <vSetReg>
            	pucRegBuffer++;
				pucRegBuffer++;
                //pusRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
                //pusRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
                iRegIndex++;
 8005208:	3401      	adds	r4, #1
 800520a:	b2a4      	uxth	r4, r4
            while (usNRegs > 0)
 800520c:	3502      	adds	r5, #2
 800520e:	42b4      	cmp	r4, r6
 8005210:	d1f1      	bne.n	80051f6 <eMBRegHoldingCB+0x2e>
    eMBErrorCode    eStatus = MB_ENOERR;
 8005212:	2000      	movs	r0, #0
 8005214:	e01a      	b.n	800524c <eMBRegHoldingCB+0x84>
            while (usNRegs > 0)
 8005216:	b1ea      	cbz	r2, 8005254 <eMBRegHoldingCB+0x8c>
 8005218:	3502      	adds	r5, #2
 800521a:	4422      	add	r2, r4
 800521c:	fa1f f882 	uxth.w	r8, r2
                *pucRegBuffer++ = (UCHAR) (usGetReg(iRegIndex) >> 8);
 8005220:	b2e7      	uxtb	r7, r4
 8005222:	4638      	mov	r0, r7
 8005224:	f7fc fa4e 	bl	80016c4 <usGetReg>
 8005228:	0a00      	lsrs	r0, r0, #8
 800522a:	f805 0c02 	strb.w	r0, [r5, #-2]
                *pucRegBuffer++ = (UCHAR) (usGetReg(iRegIndex) & 0xFF);
 800522e:	4638      	mov	r0, r7
 8005230:	f7fc fa48 	bl	80016c4 <usGetReg>
 8005234:	f805 0c01 	strb.w	r0, [r5, #-1]
                iRegIndex++;
 8005238:	3401      	adds	r4, #1
 800523a:	b2a4      	uxth	r4, r4
            while (usNRegs > 0)
 800523c:	3502      	adds	r5, #2
 800523e:	45a0      	cmp	r8, r4
 8005240:	d1ee      	bne.n	8005220 <eMBRegHoldingCB+0x58>
    eMBErrorCode    eStatus = MB_ENOERR;
 8005242:	4630      	mov	r0, r6
 8005244:	e002      	b.n	800524c <eMBRegHoldingCB+0x84>
            break;
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8005246:	2001      	movs	r0, #1
    }
    return eStatus;
}
 8005248:	4770      	bx	lr
        eStatus = MB_ENOREG;
 800524a:	2001      	movs	r0, #1
}
 800524c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (eMode)
 8005250:	2000      	movs	r0, #0
 8005252:	e7fb      	b.n	800524c <eMBRegHoldingCB+0x84>
    eMBErrorCode    eStatus = MB_ENOERR;
 8005254:	4630      	mov	r0, r6
 8005256:	e7f9      	b.n	800524c <eMBRegHoldingCB+0x84>
 8005258:	200000b6 	.word	0x200000b6

0800525c <eMBRegCoilsCB>:
    COIL_START = S_COIL_START;
    COIL_NCOILS = S_COIL_NCOILS;
    usCoilStart = usSCoilStart;

    /* it already plus one in modbus function method. */
    usAddress--;
 800525c:	3901      	subs	r1, #1
 800525e:	b289      	uxth	r1, r1

    if( ( usAddress >= COIL_START ) &&
 8005260:	2900      	cmp	r1, #0
 8005262:	d062      	beq.n	800532a <eMBRegCoilsCB+0xce>
{
 8005264:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005268:	4605      	mov	r5, r0
 800526a:	4616      	mov	r6, r2
 800526c:	461f      	mov	r7, r3
        ( usAddress + usNCoils <= COIL_START + COIL_NCOILS ) )
 800526e:	188b      	adds	r3, r1, r2
    if( ( usAddress >= COIL_START ) &&
 8005270:	2b05      	cmp	r3, #5
 8005272:	dc5c      	bgt.n	800532e <eMBRegCoilsCB+0xd2>
    iNReg =  usNCoils / 8 + 1;
 8005274:	ea4f 08d2 	mov.w	r8, r2, lsr #3
 8005278:	f108 0201 	add.w	r2, r8, #1
    usCoilStart = usSCoilStart;
 800527c:	4b2e      	ldr	r3, [pc, #184]	; (8005338 <eMBRegCoilsCB+0xdc>)
    {
        iRegIndex = (USHORT) (usAddress - usCoilStart) / 8;
 800527e:	881c      	ldrh	r4, [r3, #0]
 8005280:	1b0c      	subs	r4, r1, r4
 8005282:	f3c4 0bcc 	ubfx	fp, r4, #3, #13
        iRegBitIndex = (USHORT) (usAddress - usCoilStart) % 8;
 8005286:	f004 0407 	and.w	r4, r4, #7
        switch ( eMode )
 800528a:	b1ff      	cbz	r7, 80052cc <eMBRegCoilsCB+0x70>
 800528c:	2f01      	cmp	r7, #1
 800528e:	d151      	bne.n	8005334 <eMBRegCoilsCB+0xd8>

            break;

            /* write current coil values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (iNReg > 1)
 8005290:	2a01      	cmp	r2, #1
 8005292:	bf98      	it	ls
 8005294:	4681      	movls	r9, r0
 8005296:	d914      	bls.n	80052c2 <eMBRegCoilsCB+0x66>
 8005298:	eb00 0908 	add.w	r9, r0, r8
 800529c:	4607      	mov	r7, r0
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
 800529e:	f8df a09c 	ldr.w	sl, [pc, #156]	; 800533c <eMBRegCoilsCB+0xe0>
 80052a2:	ebab 0500 	sub.w	r5, fp, r0
 80052a6:	1978      	adds	r0, r7, r5
 80052a8:	b280      	uxth	r0, r0
 80052aa:	f817 3b01 	ldrb.w	r3, [r7], #1
 80052ae:	2208      	movs	r2, #8
 80052b0:	4621      	mov	r1, r4
 80052b2:	4450      	add	r0, sl
 80052b4:	f7ff fdba 	bl	8004e2c <xMBUtilSetBits>
            while (iNReg > 1)
 80052b8:	454f      	cmp	r7, r9
 80052ba:	d1f4      	bne.n	80052a6 <eMBRegCoilsCB+0x4a>
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
 80052bc:	44c3      	add	fp, r8
 80052be:	fa1f fb8b 	uxth.w	fp, fp
                iNReg--;
            }
            /* last coils */
            usNCoils = usNCoils % 8;
            /* xMBUtilSetBits has bug when ucNBits is zero */
            if (usNCoils != 0)
 80052c2:	f016 0207 	ands.w	r2, r6, #7
 80052c6:	d127      	bne.n	8005318 <eMBRegCoilsCB+0xbc>
    eMBErrorCode    eStatus = MB_ENOERR;
 80052c8:	2000      	movs	r0, #0
 80052ca:	e031      	b.n	8005330 <eMBRegCoilsCB+0xd4>
        	vUPDATECoils(0);
 80052cc:	2000      	movs	r0, #0
 80052ce:	f7ff ff25 	bl	800511c <vUPDATECoils>
            while (iNReg > 0)
 80052d2:	f108 0801 	add.w	r8, r8, #1
 80052d6:	44a8      	add	r8, r5
        	vUPDATECoils(0);
 80052d8:	46a9      	mov	r9, r5
                *pucRegBuffer++ = xMBUtilGetBits(&pucCoilBuf[iRegIndex++],
 80052da:	f8df a060 	ldr.w	sl, [pc, #96]	; 800533c <eMBRegCoilsCB+0xe0>
 80052de:	ebab 0505 	sub.w	r5, fp, r5
 80052e2:	f04f 0b08 	mov.w	fp, #8
 80052e6:	eb09 0005 	add.w	r0, r9, r5
 80052ea:	b280      	uxth	r0, r0
 80052ec:	465a      	mov	r2, fp
 80052ee:	4621      	mov	r1, r4
 80052f0:	4450      	add	r0, sl
 80052f2:	f7ff fdbd 	bl	8004e70 <xMBUtilGetBits>
 80052f6:	f809 0b01 	strb.w	r0, [r9], #1
            while (iNReg > 0)
 80052fa:	45c1      	cmp	r9, r8
 80052fc:	d1f3      	bne.n	80052e6 <eMBRegCoilsCB+0x8a>
            *pucRegBuffer = *pucRegBuffer << (8 - usNCoils);
 80052fe:	f006 0607 	and.w	r6, r6, #7
 8005302:	f1c6 0208 	rsb	r2, r6, #8
 8005306:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 800530a:	4096      	lsls	r6, r2
            *pucRegBuffer = *pucRegBuffer >> (8 - usNCoils);
 800530c:	b2f6      	uxtb	r6, r6
 800530e:	4116      	asrs	r6, r2
 8005310:	f808 6c01 	strb.w	r6, [r8, #-1]
    eMBErrorCode    eStatus = MB_ENOERR;
 8005314:	4638      	mov	r0, r7
            break;
 8005316:	e00b      	b.n	8005330 <eMBRegCoilsCB+0xd4>
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, usNCoils,
 8005318:	f899 3000 	ldrb.w	r3, [r9]
 800531c:	4621      	mov	r1, r4
 800531e:	4807      	ldr	r0, [pc, #28]	; (800533c <eMBRegCoilsCB+0xe0>)
 8005320:	4458      	add	r0, fp
 8005322:	f7ff fd83 	bl	8004e2c <xMBUtilSetBits>
    eMBErrorCode    eStatus = MB_ENOERR;
 8005326:	2000      	movs	r0, #0
 8005328:	e002      	b.n	8005330 <eMBRegCoilsCB+0xd4>
            break;
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 800532a:	2001      	movs	r0, #1
    }
    return eStatus;
}
 800532c:	4770      	bx	lr
        eStatus = MB_ENOREG;
 800532e:	2001      	movs	r0, #1
}
 8005330:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch ( eMode )
 8005334:	2000      	movs	r0, #0
 8005336:	e7fb      	b.n	8005330 <eMBRegCoilsCB+0xd4>
 8005338:	200000b4 	.word	0x200000b4
 800533c:	200013d0 	.word	0x200013d0

08005340 <eMBRegDiscreteCB>:
 * @param usNDiscrete discrete number
 *
 * @return result
 */
eMBErrorCode eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
 8005340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    DISCRETE_INPUT_START = S_DISCRETE_INPUT_START;
    DISCRETE_INPUT_NDISCRETES = S_DISCRETE_INPUT_NDISCRETES;
    usDiscreteInputStart = usSDiscInStart;

    /* it already plus one in modbus function method. */
    usAddress--;
 8005344:	1e4d      	subs	r5, r1, #1
 8005346:	b2ad      	uxth	r5, r5

    if ((usAddress >= DISCRETE_INPUT_START)
            && (usAddress + usNDiscrete    <= DISCRETE_INPUT_START + DISCRETE_INPUT_NDISCRETES))
 8005348:	18ab      	adds	r3, r5, r2
 800534a:	2b01      	cmp	r3, #1
 800534c:	dd02      	ble.n	8005354 <eMBRegDiscreteCB+0x14>
        *pucRegBuffer = *pucRegBuffer << (8 - usNDiscrete);
        *pucRegBuffer = *pucRegBuffer >> (8 - usNDiscrete);
    }
    else
    {
        eStatus = MB_ENOREG;
 800534e:	2001      	movs	r0, #1
    }

    return eStatus;
}
 8005350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005354:	4616      	mov	r6, r2
    usDiscreteInputStart = usSDiscInStart;
 8005356:	4b15      	ldr	r3, [pc, #84]	; (80053ac <eMBRegDiscreteCB+0x6c>)
        iRegIndex = (USHORT) (usAddress - usDiscreteInputStart) / 8;
 8005358:	881b      	ldrh	r3, [r3, #0]
 800535a:	1aed      	subs	r5, r5, r3
 800535c:	f3c5 08cc 	ubfx	r8, r5, #3, #13
        iRegBitIndex = (USHORT) (usAddress - usDiscreteInputStart) % 8;
 8005360:	f005 0507 	and.w	r5, r5, #7
        while (iNReg > 0)
 8005364:	eb00 07d2 	add.w	r7, r0, r2, lsr #3
 8005368:	3701      	adds	r7, #1
        iRegBitIndex = (USHORT) (usAddress - usDiscreteInputStart) % 8;
 800536a:	4604      	mov	r4, r0
            *pucRegBuffer++ = xMBUtilGetBits(&pucDiscreteInputBuf[iRegIndex++],
 800536c:	f8df a040 	ldr.w	sl, [pc, #64]	; 80053b0 <eMBRegDiscreteCB+0x70>
 8005370:	eba8 0800 	sub.w	r8, r8, r0
 8005374:	f04f 0908 	mov.w	r9, #8
 8005378:	eb04 0008 	add.w	r0, r4, r8
 800537c:	b280      	uxth	r0, r0
 800537e:	464a      	mov	r2, r9
 8005380:	4629      	mov	r1, r5
 8005382:	4450      	add	r0, sl
 8005384:	f7ff fd74 	bl	8004e70 <xMBUtilGetBits>
 8005388:	f804 0b01 	strb.w	r0, [r4], #1
        while (iNReg > 0)
 800538c:	42a7      	cmp	r7, r4
 800538e:	d1f3      	bne.n	8005378 <eMBRegDiscreteCB+0x38>
        *pucRegBuffer = *pucRegBuffer << (8 - usNDiscrete);
 8005390:	f006 0607 	and.w	r6, r6, #7
 8005394:	f1c6 0608 	rsb	r6, r6, #8
 8005398:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800539c:	40b3      	lsls	r3, r6
        *pucRegBuffer = *pucRegBuffer >> (8 - usNDiscrete);
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	fa43 f606 	asr.w	r6, r3, r6
 80053a4:	f807 6c01 	strb.w	r6, [r7, #-1]
    eMBErrorCode    eStatus = MB_ENOERR;
 80053a8:	2000      	movs	r0, #0
        *pucRegBuffer = *pucRegBuffer >> (8 - usNDiscrete);
 80053aa:	e7d1      	b.n	8005350 <eMBRegDiscreteCB+0x10>
 80053ac:	200013d6 	.word	0x200013d6
 80053b0:	200013d4 	.word	0x200013d4

080053b4 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053b4:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80053b8:	b9a3      	cbnz	r3, 80053e4 <osKernelInitialize+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053ba:	f3ef 8310 	mrs	r3, PRIMASK
 80053be:	b9a3      	cbnz	r3, 80053ea <osKernelInitialize+0x36>
 80053c0:	4b0d      	ldr	r3, [pc, #52]	; (80053f8 <osKernelInitialize+0x44>)
 80053c2:	6818      	ldr	r0, [r3, #0]
 80053c4:	2802      	cmp	r0, #2
 80053c6:	d004      	beq.n	80053d2 <osKernelInitialize+0x1e>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 80053c8:	b990      	cbnz	r0, 80053f0 <osKernelInitialize+0x3c>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80053ca:	4b0b      	ldr	r3, [pc, #44]	; (80053f8 <osKernelInitialize+0x44>)
 80053cc:	2201      	movs	r2, #1
 80053ce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80053d0:	4770      	bx	lr
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80053d2:	f3ef 8311 	mrs	r3, BASEPRI
    } else {
      stat = osError;
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	bf14      	ite	ne
 80053da:	f06f 0005 	mvnne.w	r0, #5
 80053de:	f04f 30ff 	moveq.w	r0, #4294967295
 80053e2:	4770      	bx	lr
    stat = osErrorISR;
 80053e4:	f06f 0005 	mvn.w	r0, #5
 80053e8:	4770      	bx	lr
 80053ea:	f06f 0005 	mvn.w	r0, #5
 80053ee:	4770      	bx	lr
      stat = osError;
 80053f0:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	20001694 	.word	0x20001694

080053fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80053fc:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053fe:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8005402:	b9c3      	cbnz	r3, 8005436 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005404:	f3ef 8310 	mrs	r3, PRIMASK
 8005408:	b9c3      	cbnz	r3, 800543c <osKernelStart+0x40>
 800540a:	4b0f      	ldr	r3, [pc, #60]	; (8005448 <osKernelStart+0x4c>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2b02      	cmp	r3, #2
 8005410:	d008      	beq.n	8005424 <osKernelStart+0x28>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8005412:	2b01      	cmp	r3, #1
 8005414:	d115      	bne.n	8005442 <osKernelStart+0x46>
      KernelState = osKernelRunning;
 8005416:	4b0c      	ldr	r3, [pc, #48]	; (8005448 <osKernelStart+0x4c>)
 8005418:	2202      	movs	r2, #2
 800541a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800541c:	f000 ff74 	bl	8006308 <vTaskStartScheduler>
      stat = osOK;
 8005420:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 8005422:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005424:	f3ef 8311 	mrs	r3, BASEPRI
      stat = osError;
 8005428:	2b00      	cmp	r3, #0
 800542a:	bf14      	ite	ne
 800542c:	f06f 0005 	mvnne.w	r0, #5
 8005430:	f04f 30ff 	moveq.w	r0, #4294967295
 8005434:	e7f5      	b.n	8005422 <osKernelStart+0x26>
    stat = osErrorISR;
 8005436:	f06f 0005 	mvn.w	r0, #5
 800543a:	e7f2      	b.n	8005422 <osKernelStart+0x26>
 800543c:	f06f 0005 	mvn.w	r0, #5
 8005440:	e7ef      	b.n	8005422 <osKernelStart+0x26>
      stat = osError;
 8005442:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8005446:	e7ec      	b.n	8005422 <osKernelStart+0x26>
 8005448:	20001694 	.word	0x20001694

0800544c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800544c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800544e:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005450:	2400      	movs	r4, #0
 8005452:	9404      	str	r4, [sp, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005454:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8005458:	b9d4      	cbnz	r4, 8005490 <osThreadNew+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800545a:	f3ef 8310 	mrs	r3, PRIMASK
 800545e:	b9bb      	cbnz	r3, 8005490 <osThreadNew+0x44>
 8005460:	4b2c      	ldr	r3, [pc, #176]	; (8005514 <osThreadNew+0xc8>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2b02      	cmp	r3, #2
 8005466:	d00f      	beq.n	8005488 <osThreadNew+0x3c>
 8005468:	b190      	cbz	r0, 8005490 <osThreadNew+0x44>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 800546a:	2300      	movs	r3, #0
 800546c:	f88d 3017 	strb.w	r3, [sp, #23]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 8005470:	2a00      	cmp	r2, #0
 8005472:	d03a      	beq.n	80054ea <osThreadNew+0x9e>
      if (attr->name != NULL) {
 8005474:	6814      	ldr	r4, [r2, #0]
 8005476:	b174      	cbz	r4, 8005496 <osThreadNew+0x4a>
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8005478:	6993      	ldr	r3, [r2, #24]
 800547a:	b17b      	cbz	r3, 800549c <osThreadNew+0x50>
        prio = (UBaseType_t)attr->priority;
 800547c:	461d      	mov	r5, r3
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800547e:	3b01      	subs	r3, #1
 8005480:	2b37      	cmp	r3, #55	; 0x37
 8005482:	d90c      	bls.n	800549e <osThreadNew+0x52>
        return (NULL);
 8005484:	2000      	movs	r0, #0
 8005486:	e004      	b.n	8005492 <osThreadNew+0x46>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005488:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (func != NULL)) {
 800548c:	2b00      	cmp	r3, #0
 800548e:	d0eb      	beq.n	8005468 <osThreadNew+0x1c>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005490:	9804      	ldr	r0, [sp, #16]
}
 8005492:	b007      	add	sp, #28
 8005494:	bdf0      	pop	{r4, r5, r6, r7, pc}
    name  = &empty;
 8005496:	f10d 0417 	add.w	r4, sp, #23
 800549a:	e7ed      	b.n	8005478 <osThreadNew+0x2c>
 800549c:	2518      	movs	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800549e:	6853      	ldr	r3, [r2, #4]
 80054a0:	f013 0f01 	tst.w	r3, #1
 80054a4:	d134      	bne.n	8005510 <osThreadNew+0xc4>
      if (attr->stack_size > 0U) {
 80054a6:	6953      	ldr	r3, [r2, #20]
 80054a8:	b113      	cbz	r3, 80054b0 <osThreadNew+0x64>
        stack = attr->stack_size / sizeof(StackType_t);
 80054aa:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80054ae:	e001      	b.n	80054b4 <osThreadNew+0x68>
    stack = configMINIMAL_STACK_SIZE;
 80054b0:	f04f 0c80 	mov.w	ip, #128	; 0x80
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80054b4:	6896      	ldr	r6, [r2, #8]
 80054b6:	b18e      	cbz	r6, 80054dc <osThreadNew+0x90>
 80054b8:	68d7      	ldr	r7, [r2, #12]
 80054ba:	2fbb      	cmp	r7, #187	; 0xbb
 80054bc:	d9e8      	bls.n	8005490 <osThreadNew+0x44>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80054be:	6912      	ldr	r2, [r2, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80054c0:	2a00      	cmp	r2, #0
 80054c2:	d0e5      	beq.n	8005490 <osThreadNew+0x44>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d0e3      	beq.n	8005490 <osThreadNew+0x44>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80054c8:	9602      	str	r6, [sp, #8]
 80054ca:	9201      	str	r2, [sp, #4]
 80054cc:	9500      	str	r5, [sp, #0]
 80054ce:	460b      	mov	r3, r1
 80054d0:	4662      	mov	r2, ip
 80054d2:	4621      	mov	r1, r4
 80054d4:	f000 feac 	bl	8006230 <xTaskCreateStatic>
 80054d8:	9004      	str	r0, [sp, #16]
 80054da:	e7d9      	b.n	8005490 <osThreadNew+0x44>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80054dc:	68d3      	ldr	r3, [r2, #12]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1d6      	bne.n	8005490 <osThreadNew+0x44>
      if (mem == 0) {
 80054e2:	6913      	ldr	r3, [r2, #16]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1d3      	bne.n	8005490 <osThreadNew+0x44>
 80054e8:	e004      	b.n	80054f4 <osThreadNew+0xa8>
    prio  = (UBaseType_t)osPriorityNormal;
 80054ea:	2518      	movs	r5, #24
    stack = configMINIMAL_STACK_SIZE;
 80054ec:	f04f 0c80 	mov.w	ip, #128	; 0x80
    name  = &empty;
 80054f0:	f10d 0417 	add.w	r4, sp, #23
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80054f4:	ab04      	add	r3, sp, #16
 80054f6:	9301      	str	r3, [sp, #4]
 80054f8:	9500      	str	r5, [sp, #0]
 80054fa:	460b      	mov	r3, r1
 80054fc:	fa1f f28c 	uxth.w	r2, ip
 8005500:	4621      	mov	r1, r4
 8005502:	f000 fecf 	bl	80062a4 <xTaskCreate>
 8005506:	2801      	cmp	r0, #1
          hTask = NULL;
 8005508:	bf1c      	itt	ne
 800550a:	2300      	movne	r3, #0
 800550c:	9304      	strne	r3, [sp, #16]
 800550e:	e7bf      	b.n	8005490 <osThreadNew+0x44>
        return (NULL);
 8005510:	2000      	movs	r0, #0
 8005512:	e7be      	b.n	8005492 <osThreadNew+0x46>
 8005514:	20001694 	.word	0x20001694

08005518 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005518:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800551a:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800551e:	b9a3      	cbnz	r3, 800554a <osDelay+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005520:	f3ef 8310 	mrs	r3, PRIMASK
 8005524:	b9a3      	cbnz	r3, 8005550 <osDelay+0x38>
 8005526:	4b0c      	ldr	r3, [pc, #48]	; (8005558 <osDelay+0x40>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2b02      	cmp	r3, #2
 800552c:	d002      	beq.n	8005534 <osDelay+0x1c>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 800552e:	b940      	cbnz	r0, 8005542 <osDelay+0x2a>
    stat = osOK;
 8005530:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8005532:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005534:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8005538:	2b00      	cmp	r3, #0
 800553a:	d0f8      	beq.n	800552e <osDelay+0x16>
    stat = osErrorISR;
 800553c:	f06f 0005 	mvn.w	r0, #5
 8005540:	e7f7      	b.n	8005532 <osDelay+0x1a>
      vTaskDelay(ticks);
 8005542:	f001 f859 	bl	80065f8 <vTaskDelay>
    stat = osOK;
 8005546:	2000      	movs	r0, #0
 8005548:	e7f3      	b.n	8005532 <osDelay+0x1a>
    stat = osErrorISR;
 800554a:	f06f 0005 	mvn.w	r0, #5
 800554e:	e7f0      	b.n	8005532 <osDelay+0x1a>
 8005550:	f06f 0005 	mvn.w	r0, #5
 8005554:	e7ed      	b.n	8005532 <osDelay+0x1a>
 8005556:	bf00      	nop
 8005558:	20001694 	.word	0x20001694

0800555c <osEventFlagsNew>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800555c:	f3ef 8205 	mrs	r2, IPSR
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;

  if (!IS_IRQ()) {
 8005560:	b9f2      	cbnz	r2, 80055a0 <osEventFlagsNew+0x44>
osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8005562:	b508      	push	{r3, lr}
 8005564:	4603      	mov	r3, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005566:	f3ef 8210 	mrs	r2, PRIMASK
  if (!IS_IRQ()) {
 800556a:	b9da      	cbnz	r2, 80055a4 <osEventFlagsNew+0x48>
 800556c:	4a0e      	ldr	r2, [pc, #56]	; (80055a8 <osEventFlagsNew+0x4c>)
 800556e:	6812      	ldr	r2, [r2, #0]
 8005570:	2a02      	cmp	r2, #2
 8005572:	d007      	beq.n	8005584 <osEventFlagsNew+0x28>
    mem = -1;

    if (attr != NULL) {
 8005574:	b173      	cbz	r3, 8005594 <osEventFlagsNew+0x38>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8005576:	6898      	ldr	r0, [r3, #8]
 8005578:	b150      	cbz	r0, 8005590 <osEventFlagsNew+0x34>
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	2b1f      	cmp	r3, #31
 800557e:	d80c      	bhi.n	800559a <osEventFlagsNew+0x3e>
  hEventGroup = NULL;
 8005580:	2000      	movs	r0, #0
 8005582:	e009      	b.n	8005598 <osEventFlagsNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005584:	f3ef 8211 	mrs	r2, BASEPRI
  if (!IS_IRQ()) {
 8005588:	2a00      	cmp	r2, #0
 800558a:	d0f3      	beq.n	8005574 <osEventFlagsNew+0x18>
  hEventGroup = NULL;
 800558c:	2000      	movs	r0, #0
        hEventGroup = xEventGroupCreate();
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800558e:	e003      	b.n	8005598 <osEventFlagsNew+0x3c>
      if (mem == 0) {
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	b90b      	cbnz	r3, 8005598 <osEventFlagsNew+0x3c>
        hEventGroup = xEventGroupCreate();
 8005594:	f000 f847 	bl	8005626 <xEventGroupCreate>
}
 8005598:	bd08      	pop	{r3, pc}
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800559a:	f000 f81f 	bl	80055dc <xEventGroupCreateStatic>
 800559e:	e7fb      	b.n	8005598 <osEventFlagsNew+0x3c>
  hEventGroup = NULL;
 80055a0:	2000      	movs	r0, #0
}
 80055a2:	4770      	bx	lr
  hEventGroup = NULL;
 80055a4:	2000      	movs	r0, #0
 80055a6:	e7f7      	b.n	8005598 <osEventFlagsNew+0x3c>
 80055a8:	20001694 	.word	0x20001694

080055ac <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80055ac:	4b03      	ldr	r3, [pc, #12]	; (80055bc <vApplicationGetIdleTaskMemory+0x10>)
 80055ae:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80055b0:	4b03      	ldr	r3, [pc, #12]	; (80055c0 <vApplicationGetIdleTaskMemory+0x14>)
 80055b2:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80055b4:	2380      	movs	r3, #128	; 0x80
 80055b6:	6013      	str	r3, [r2, #0]
}
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	200015d8 	.word	0x200015d8
 80055c0:	200013d8 	.word	0x200013d8

080055c4 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80055c4:	4b03      	ldr	r3, [pc, #12]	; (80055d4 <vApplicationGetTimerTaskMemory+0x10>)
 80055c6:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80055c8:	4b03      	ldr	r3, [pc, #12]	; (80055d8 <vApplicationGetTimerTaskMemory+0x14>)
 80055ca:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80055cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055d0:	6013      	str	r3, [r2, #0]
}
 80055d2:	4770      	bx	lr
 80055d4:	20001a98 	.word	0x20001a98
 80055d8:	20001698 	.word	0x20001698

080055dc <xEventGroupCreateStatic>:
	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80055dc:	b180      	cbz	r0, 8005600 <xEventGroupCreateStatic+0x24>
	{
 80055de:	b510      	push	{r4, lr}
 80055e0:	b082      	sub	sp, #8
 80055e2:	4604      	mov	r4, r0
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80055e4:	2320      	movs	r3, #32
 80055e6:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80055e8:	9b01      	ldr	r3, [sp, #4]
 80055ea:	2b20      	cmp	r3, #32
 80055ec:	d011      	beq.n	8005612 <xEventGroupCreateStatic+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80055ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f2:	f383 8811 	msr	BASEPRI, r3
 80055f6:	f3bf 8f6f 	isb	sy
 80055fa:	f3bf 8f4f 	dsb	sy
 80055fe:	e7fe      	b.n	80055fe <xEventGroupCreateStatic+0x22>
 8005600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005604:	f383 8811 	msr	BASEPRI, r3
 8005608:	f3bf 8f6f 	isb	sy
 800560c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventGroupBuffer );
 8005610:	e7fe      	b.n	8005610 <xEventGroupCreateStatic+0x34>
		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */

		if( pxEventBits != NULL )
		{
			pxEventBits->uxEventBits = 0;
 8005612:	2300      	movs	r3, #0
 8005614:	f840 3b04 	str.w	r3, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005618:	f000 f8f6 	bl	8005808 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800561c:	2301      	movs	r3, #1
 800561e:	7723      	strb	r3, [r4, #28]
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
	}
 8005620:	4620      	mov	r0, r4
 8005622:	b002      	add	sp, #8
 8005624:	bd10      	pop	{r4, pc}

08005626 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8005626:	b538      	push	{r3, r4, r5, lr}
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8005628:	2020      	movs	r0, #32
 800562a:	f001 fdbd 	bl	80071a8 <pvPortMalloc>

		if( pxEventBits != NULL )
 800562e:	4604      	mov	r4, r0
 8005630:	b128      	cbz	r0, 800563e <xEventGroupCreate+0x18>
		{
			pxEventBits->uxEventBits = 0;
 8005632:	2500      	movs	r5, #0
 8005634:	f840 5b04 	str.w	r5, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005638:	f000 f8e6 	bl	8005808 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800563c:	7725      	strb	r5, [r4, #28]
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
	}
 800563e:	4620      	mov	r0, r4
 8005640:	bd38      	pop	{r3, r4, r5, pc}

08005642 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8005642:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8005646:	b178      	cbz	r0, 8005668 <xEventGroupWaitBits+0x26>
 8005648:	460c      	mov	r4, r1
 800564a:	4616      	mov	r6, r2
 800564c:	461d      	mov	r5, r3
 800564e:	4607      	mov	r7, r0
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005650:	f011 487f 	ands.w	r8, r1, #4278190080	; 0xff000000
 8005654:	d011      	beq.n	800567a <xEventGroupWaitBits+0x38>
 8005656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565a:	f383 8811 	msr	BASEPRI, r3
 800565e:	f3bf 8f6f 	isb	sy
 8005662:	f3bf 8f4f 	dsb	sy
 8005666:	e7fe      	b.n	8005666 <xEventGroupWaitBits+0x24>
 8005668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566c:	f383 8811 	msr	BASEPRI, r3
 8005670:	f3bf 8f6f 	isb	sy
 8005674:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 8005678:	e7fe      	b.n	8005678 <xEventGroupWaitBits+0x36>
	configASSERT( uxBitsToWaitFor != 0 );
 800567a:	b941      	cbnz	r1, 800568e <xEventGroupWaitBits+0x4c>
 800567c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005680:	f383 8811 	msr	BASEPRI, r3
 8005684:	f3bf 8f6f 	isb	sy
 8005688:	f3bf 8f4f 	dsb	sy
 800568c:	e7fe      	b.n	800568c <xEventGroupWaitBits+0x4a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800568e:	f001 f96d 	bl	800696c <xTaskGetSchedulerState>
 8005692:	b950      	cbnz	r0, 80056aa <xEventGroupWaitBits+0x68>
 8005694:	9b08      	ldr	r3, [sp, #32]
 8005696:	b143      	cbz	r3, 80056aa <xEventGroupWaitBits+0x68>
 8005698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569c:	f383 8811 	msr	BASEPRI, r3
 80056a0:	f3bf 8f6f 	isb	sy
 80056a4:	f3bf 8f4f 	dsb	sy
 80056a8:	e7fe      	b.n	80056a8 <xEventGroupWaitBits+0x66>
	}
	#endif

	vTaskSuspendAll();
 80056aa:	f000 fe7b 	bl	80063a4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80056ae:	f8d7 9000 	ldr.w	r9, [r7]

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
 80056b2:	bb55      	cbnz	r5, 800570a <xEventGroupWaitBits+0xc8>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80056b4:	ea14 0f09 	tst.w	r4, r9
 80056b8:	bf14      	ite	ne
 80056ba:	2001      	movne	r0, #1
 80056bc:	2000      	moveq	r0, #0
		if( xWaitConditionMet != pdFALSE )
 80056be:	bb50      	cbnz	r0, 8005716 <xEventGroupWaitBits+0xd4>
		else if( xTicksToWait == ( TickType_t ) 0 )
 80056c0:	9b08      	ldr	r3, [sp, #32]
 80056c2:	b363      	cbz	r3, 800571e <xEventGroupWaitBits+0xdc>
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80056c4:	2e00      	cmp	r6, #0
 80056c6:	bf18      	it	ne
 80056c8:	f04f 7880 	movne.w	r8, #16777216	; 0x1000000
			if( xWaitForAllBits != pdFALSE )
 80056cc:	b10d      	cbz	r5, 80056d2 <xEventGroupWaitBits+0x90>
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80056ce:	f048 6880 	orr.w	r8, r8, #67108864	; 0x4000000
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80056d2:	9a08      	ldr	r2, [sp, #32]
 80056d4:	ea48 0104 	orr.w	r1, r8, r4
 80056d8:	1d38      	adds	r0, r7, #4
 80056da:	f001 f821 	bl	8006720 <vTaskPlaceOnUnorderedEventList>
	xAlreadyYielded = xTaskResumeAll();
 80056de:	f000 ff09 	bl	80064f4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80056e2:	b948      	cbnz	r0, 80056f8 <xEventGroupWaitBits+0xb6>
			portYIELD_WITHIN_API();
 80056e4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80056e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ec:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80056f0:	f3bf 8f4f 	dsb	sy
 80056f4:	f3bf 8f6f 	isb	sy
		uxReturn = uxTaskResetEventItemValue();
 80056f8:	f001 f990 	bl	8006a1c <uxTaskResetEventItemValue>
 80056fc:	4681      	mov	r9, r0
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80056fe:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8005702:	d011      	beq.n	8005728 <xEventGroupWaitBits+0xe6>
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005704:	f029 497f 	bic.w	r9, r9, #4278190080	; 0xff000000
	return uxReturn;
 8005708:	e00b      	b.n	8005722 <xEventGroupWaitBits+0xe0>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800570a:	ea34 0309 	bics.w	r3, r4, r9
 800570e:	bf0c      	ite	eq
 8005710:	2001      	moveq	r0, #1
 8005712:	2000      	movne	r0, #0
 8005714:	e7d3      	b.n	80056be <xEventGroupWaitBits+0x7c>
			if( xClearOnExit != pdFALSE )
 8005716:	b116      	cbz	r6, 800571e <xEventGroupWaitBits+0xdc>
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005718:	ea29 0404 	bic.w	r4, r9, r4
 800571c:	603c      	str	r4, [r7, #0]
	xAlreadyYielded = xTaskResumeAll();
 800571e:	f000 fee9 	bl	80064f4 <xTaskResumeAll>
}
 8005722:	4648      	mov	r0, r9
 8005724:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			taskENTER_CRITICAL();
 8005728:	f001 fbf4 	bl	8006f14 <vPortEnterCritical>
				uxReturn = pxEventBits->uxEventBits;
 800572c:	f8d7 9000 	ldr.w	r9, [r7]
	if( xWaitForAllBits == pdFALSE )
 8005730:	b965      	cbnz	r5, 800574c <xEventGroupWaitBits+0x10a>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8005732:	ea14 0f09 	tst.w	r4, r9
 8005736:	bf14      	ite	ne
 8005738:	2301      	movne	r3, #1
 800573a:	2300      	moveq	r3, #0
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800573c:	b11b      	cbz	r3, 8005746 <xEventGroupWaitBits+0x104>
					if( xClearOnExit != pdFALSE )
 800573e:	b116      	cbz	r6, 8005746 <xEventGroupWaitBits+0x104>
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005740:	ea29 0404 	bic.w	r4, r9, r4
 8005744:	603c      	str	r4, [r7, #0]
			taskEXIT_CRITICAL();
 8005746:	f001 fc07 	bl	8006f58 <vPortExitCritical>
 800574a:	e7db      	b.n	8005704 <xEventGroupWaitBits+0xc2>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800574c:	ea34 0309 	bics.w	r3, r4, r9
 8005750:	bf0c      	ite	eq
 8005752:	2301      	moveq	r3, #1
 8005754:	2300      	movne	r3, #0
 8005756:	e7f1      	b.n	800573c <xEventGroupWaitBits+0xfa>

08005758 <xEventGroupSetBits>:
	configASSERT( xEventGroup );
 8005758:	b178      	cbz	r0, 800577a <xEventGroupSetBits+0x22>
{
 800575a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800575e:	460e      	mov	r6, r1
 8005760:	4605      	mov	r5, r0
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005762:	f011 487f 	ands.w	r8, r1, #4278190080	; 0xff000000
 8005766:	d011      	beq.n	800578c <xEventGroupSetBits+0x34>
 8005768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576c:	f383 8811 	msr	BASEPRI, r3
 8005770:	f3bf 8f6f 	isb	sy
 8005774:	f3bf 8f4f 	dsb	sy
 8005778:	e7fe      	b.n	8005778 <xEventGroupSetBits+0x20>
 800577a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577e:	f383 8811 	msr	BASEPRI, r3
 8005782:	f3bf 8f6f 	isb	sy
 8005786:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 800578a:	e7fe      	b.n	800578a <xEventGroupSetBits+0x32>
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800578c:	f100 070c 	add.w	r7, r0, #12
	vTaskSuspendAll();
 8005790:	f000 fe08 	bl	80063a4 <vTaskSuspendAll>
		pxListItem = listGET_HEAD_ENTRY( pxList );
 8005794:	692c      	ldr	r4, [r5, #16]
		pxEventBits->uxEventBits |= uxBitsToSet;
 8005796:	682b      	ldr	r3, [r5, #0]
 8005798:	4333      	orrs	r3, r6
 800579a:	602b      	str	r3, [r5, #0]
		while( pxListItem != pxListEnd )
 800579c:	42a7      	cmp	r7, r4
 800579e:	d118      	bne.n	80057d2 <xEventGroupSetBits+0x7a>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80057a0:	682b      	ldr	r3, [r5, #0]
 80057a2:	ea23 0308 	bic.w	r3, r3, r8
 80057a6:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80057a8:	f000 fea4 	bl	80064f4 <xTaskResumeAll>
}
 80057ac:	6828      	ldr	r0, [r5, #0]
 80057ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80057b2:	6829      	ldr	r1, [r5, #0]
 80057b4:	ea32 0101 	bics.w	r1, r2, r1
 80057b8:	d109      	bne.n	80057ce <xEventGroupSetBits+0x76>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80057ba:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
					uxBitsToClear |= uxBitsWaitedFor;
 80057be:	bf18      	it	ne
 80057c0:	ea48 0802 	orrne.w	r8, r8, r2
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80057c4:	6829      	ldr	r1, [r5, #0]
 80057c6:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 80057ca:	f001 f837 	bl	800683c <vTaskRemoveFromUnorderedEventList>
		while( pxListItem != pxListEnd )
 80057ce:	42a7      	cmp	r7, r4
 80057d0:	d0e6      	beq.n	80057a0 <xEventGroupSetBits+0x48>
			pxNext = listGET_NEXT( pxListItem );
 80057d2:	4620      	mov	r0, r4
 80057d4:	6864      	ldr	r4, [r4, #4]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80057d6:	6803      	ldr	r3, [r0, #0]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80057d8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80057dc:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 80057e0:	d1e7      	bne.n	80057b2 <xEventGroupSetBits+0x5a>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80057e2:	6829      	ldr	r1, [r5, #0]
 80057e4:	420a      	tst	r2, r1
 80057e6:	d1e8      	bne.n	80057ba <xEventGroupSetBits+0x62>
 80057e8:	e7f1      	b.n	80057ce <xEventGroupSetBits+0x76>

080057ea <vEventGroupSetBitsCallback>:
{
 80057ea:	b508      	push	{r3, lr}
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 80057ec:	f7ff ffb4 	bl	8005758 <xEventGroupSetBits>
}
 80057f0:	bd08      	pop	{r3, pc}
	...

080057f4 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80057f4:	b508      	push	{r3, lr}
 80057f6:	4613      	mov	r3, r2
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 80057f8:	460a      	mov	r2, r1
 80057fa:	4601      	mov	r1, r0
 80057fc:	4801      	ldr	r0, [pc, #4]	; (8005804 <xEventGroupSetBitsFromISR+0x10>)
 80057fe:	f001 fb1f 	bl	8006e40 <xTimerPendFunctionCallFromISR>

		return xReturn;
	}
 8005802:	bd08      	pop	{r3, pc}
 8005804:	080057eb 	.word	0x080057eb

08005808 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005808:	f100 0308 	add.w	r3, r0, #8
 800580c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800580e:	f04f 32ff 	mov.w	r2, #4294967295
 8005812:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005814:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005816:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005818:	2300      	movs	r3, #0
 800581a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800581c:	4770      	bx	lr

0800581e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800581e:	2300      	movs	r3, #0
 8005820:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005822:	4770      	bx	lr

08005824 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8005824:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005826:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005828:	689a      	ldr	r2, [r3, #8]
 800582a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800582c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800582e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005830:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8005832:	6803      	ldr	r3, [r0, #0]
 8005834:	3301      	adds	r3, #1
 8005836:	6003      	str	r3, [r0, #0]
}
 8005838:	4770      	bx	lr

0800583a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800583a:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800583c:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800583e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005842:	d011      	beq.n	8005868 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005844:	f100 0308 	add.w	r3, r0, #8
 8005848:	461c      	mov	r4, r3
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	42aa      	cmp	r2, r5
 8005850:	d9fa      	bls.n	8005848 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005852:	6863      	ldr	r3, [r4, #4]
 8005854:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005856:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005858:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800585a:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800585c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800585e:	6803      	ldr	r3, [r0, #0]
 8005860:	3301      	adds	r3, #1
 8005862:	6003      	str	r3, [r0, #0]
}
 8005864:	bc30      	pop	{r4, r5}
 8005866:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8005868:	6904      	ldr	r4, [r0, #16]
 800586a:	e7f2      	b.n	8005852 <vListInsert+0x18>

0800586c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800586c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800586e:	6841      	ldr	r1, [r0, #4]
 8005870:	6882      	ldr	r2, [r0, #8]
 8005872:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005874:	6841      	ldr	r1, [r0, #4]
 8005876:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005878:	685a      	ldr	r2, [r3, #4]
 800587a:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800587c:	bf04      	itt	eq
 800587e:	6882      	ldreq	r2, [r0, #8]
 8005880:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005882:	2200      	movs	r2, #0
 8005884:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	3a01      	subs	r2, #1
 800588a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800588c:	6818      	ldr	r0, [r3, #0]
}
 800588e:	4770      	bx	lr

08005890 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005890:	b510      	push	{r4, lr}
 8005892:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005894:	f001 fb3e 	bl	8006f14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005898:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800589a:	f001 fb5d 	bl	8006f58 <vPortExitCritical>

	return xReturn;
}
 800589e:	fab4 f084 	clz	r0, r4
 80058a2:	0940      	lsrs	r0, r0, #5
 80058a4:	bd10      	pop	{r4, pc}

080058a6 <prvCopyDataToQueue>:
{
 80058a6:	b570      	push	{r4, r5, r6, lr}
 80058a8:	4604      	mov	r4, r0
 80058aa:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058ac:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80058ae:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80058b0:	b95a      	cbnz	r2, 80058ca <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80058b2:	6803      	ldr	r3, [r0, #0]
 80058b4:	b11b      	cbz	r3, 80058be <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 80058b6:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80058b8:	3601      	adds	r6, #1
 80058ba:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80058bc:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80058be:	6840      	ldr	r0, [r0, #4]
 80058c0:	f001 f864 	bl	800698c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80058c4:	2300      	movs	r3, #0
 80058c6:	6063      	str	r3, [r4, #4]
 80058c8:	e7f6      	b.n	80058b8 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 80058ca:	b96d      	cbnz	r5, 80058e8 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80058cc:	6880      	ldr	r0, [r0, #8]
 80058ce:	f001 fd5d 	bl	800738c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80058d2:	68a3      	ldr	r3, [r4, #8]
 80058d4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80058d6:	4413      	add	r3, r2
 80058d8:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80058da:	6862      	ldr	r2, [r4, #4]
 80058dc:	4293      	cmp	r3, r2
 80058de:	d319      	bcc.n	8005914 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80058e0:	6823      	ldr	r3, [r4, #0]
 80058e2:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 80058e4:	4628      	mov	r0, r5
 80058e6:	e7e7      	b.n	80058b8 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058e8:	68c0      	ldr	r0, [r0, #12]
 80058ea:	f001 fd4f 	bl	800738c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80058ee:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80058f0:	4251      	negs	r1, r2
 80058f2:	68e3      	ldr	r3, [r4, #12]
 80058f4:	1a9b      	subs	r3, r3, r2
 80058f6:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80058f8:	6822      	ldr	r2, [r4, #0]
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d202      	bcs.n	8005904 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80058fe:	6863      	ldr	r3, [r4, #4]
 8005900:	440b      	add	r3, r1
 8005902:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8005904:	2d02      	cmp	r5, #2
 8005906:	d001      	beq.n	800590c <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8005908:	2000      	movs	r0, #0
 800590a:	e7d5      	b.n	80058b8 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800590c:	b126      	cbz	r6, 8005918 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800590e:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8005910:	2000      	movs	r0, #0
 8005912:	e7d1      	b.n	80058b8 <prvCopyDataToQueue+0x12>
 8005914:	4628      	mov	r0, r5
 8005916:	e7cf      	b.n	80058b8 <prvCopyDataToQueue+0x12>
 8005918:	2000      	movs	r0, #0
 800591a:	e7cd      	b.n	80058b8 <prvCopyDataToQueue+0x12>

0800591c <prvCopyDataFromQueue>:
{
 800591c:	b508      	push	{r3, lr}
 800591e:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005920:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005922:	b162      	cbz	r2, 800593e <prvCopyDataFromQueue+0x22>
 8005924:	4608      	mov	r0, r1
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005926:	68d9      	ldr	r1, [r3, #12]
 8005928:	4411      	add	r1, r2
 800592a:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800592c:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8005930:	4561      	cmp	r1, ip
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005932:	bf24      	itt	cs
 8005934:	6819      	ldrcs	r1, [r3, #0]
 8005936:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005938:	68d9      	ldr	r1, [r3, #12]
 800593a:	f001 fd27 	bl	800738c <memcpy>
}
 800593e:	bd08      	pop	{r3, pc}

08005940 <prvUnlockQueue>:
{
 8005940:	b570      	push	{r4, r5, r6, lr}
 8005942:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8005944:	f001 fae6 	bl	8006f14 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005948:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800594c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800594e:	2c00      	cmp	r4, #0
 8005950:	dd0f      	ble.n	8005972 <prvUnlockQueue+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005952:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8005956:	e002      	b.n	800595e <prvUnlockQueue+0x1e>
			--cTxLock;
 8005958:	3c01      	subs	r4, #1
 800595a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800595c:	b14c      	cbz	r4, 8005972 <prvUnlockQueue+0x32>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800595e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005960:	b13b      	cbz	r3, 8005972 <prvUnlockQueue+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005962:	4630      	mov	r0, r6
 8005964:	f000 ff26 	bl	80067b4 <xTaskRemoveFromEventList>
 8005968:	2800      	cmp	r0, #0
 800596a:	d0f5      	beq.n	8005958 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 800596c:	f000 fff8 	bl	8006960 <vTaskMissedYield>
 8005970:	e7f2      	b.n	8005958 <prvUnlockQueue+0x18>
		pxQueue->cTxLock = queueUNLOCKED;
 8005972:	23ff      	movs	r3, #255	; 0xff
 8005974:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8005978:	f001 faee 	bl	8006f58 <vPortExitCritical>
	taskENTER_CRITICAL();
 800597c:	f001 faca 	bl	8006f14 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005980:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8005984:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005986:	2c00      	cmp	r4, #0
 8005988:	dd0f      	ble.n	80059aa <prvUnlockQueue+0x6a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800598a:	f105 0610 	add.w	r6, r5, #16
 800598e:	e002      	b.n	8005996 <prvUnlockQueue+0x56>
				--cRxLock;
 8005990:	3c01      	subs	r4, #1
 8005992:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005994:	b14c      	cbz	r4, 80059aa <prvUnlockQueue+0x6a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005996:	692b      	ldr	r3, [r5, #16]
 8005998:	b13b      	cbz	r3, 80059aa <prvUnlockQueue+0x6a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800599a:	4630      	mov	r0, r6
 800599c:	f000 ff0a 	bl	80067b4 <xTaskRemoveFromEventList>
 80059a0:	2800      	cmp	r0, #0
 80059a2:	d0f5      	beq.n	8005990 <prvUnlockQueue+0x50>
					vTaskMissedYield();
 80059a4:	f000 ffdc 	bl	8006960 <vTaskMissedYield>
 80059a8:	e7f2      	b.n	8005990 <prvUnlockQueue+0x50>
		pxQueue->cRxLock = queueUNLOCKED;
 80059aa:	23ff      	movs	r3, #255	; 0xff
 80059ac:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 80059b0:	f001 fad2 	bl	8006f58 <vPortExitCritical>
}
 80059b4:	bd70      	pop	{r4, r5, r6, pc}

080059b6 <xQueueGenericReset>:
{
 80059b6:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 80059b8:	b1e0      	cbz	r0, 80059f4 <xQueueGenericReset+0x3e>
 80059ba:	460d      	mov	r5, r1
 80059bc:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80059be:	f001 faa9 	bl	8006f14 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80059c2:	6822      	ldr	r2, [r4, #0]
 80059c4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80059c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80059c8:	fb01 f303 	mul.w	r3, r1, r3
 80059cc:	18d0      	adds	r0, r2, r3
 80059ce:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80059d0:	2000      	movs	r0, #0
 80059d2:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80059d4:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80059d6:	1a5b      	subs	r3, r3, r1
 80059d8:	4413      	add	r3, r2
 80059da:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80059dc:	23ff      	movs	r3, #255	; 0xff
 80059de:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80059e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80059e6:	b9fd      	cbnz	r5, 8005a28 <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059e8:	6923      	ldr	r3, [r4, #16]
 80059ea:	b963      	cbnz	r3, 8005a06 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 80059ec:	f001 fab4 	bl	8006f58 <vPortExitCritical>
}
 80059f0:	2001      	movs	r0, #1
 80059f2:	bd38      	pop	{r3, r4, r5, pc}
 80059f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f8:	f383 8811 	msr	BASEPRI, r3
 80059fc:	f3bf 8f6f 	isb	sy
 8005a00:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005a04:	e7fe      	b.n	8005a04 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a06:	f104 0010 	add.w	r0, r4, #16
 8005a0a:	f000 fed3 	bl	80067b4 <xTaskRemoveFromEventList>
 8005a0e:	2800      	cmp	r0, #0
 8005a10:	d0ec      	beq.n	80059ec <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8005a12:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a1a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005a1e:	f3bf 8f4f 	dsb	sy
 8005a22:	f3bf 8f6f 	isb	sy
 8005a26:	e7e1      	b.n	80059ec <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005a28:	f104 0010 	add.w	r0, r4, #16
 8005a2c:	f7ff feec 	bl	8005808 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005a30:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005a34:	f7ff fee8 	bl	8005808 <vListInitialise>
 8005a38:	e7d8      	b.n	80059ec <xQueueGenericReset+0x36>

08005a3a <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a3a:	b940      	cbnz	r0, 8005a4e <xQueueGenericCreateStatic+0x14>
 8005a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a40:	f383 8811 	msr	BASEPRI, r3
 8005a44:	f3bf 8f6f 	isb	sy
 8005a48:	f3bf 8f4f 	dsb	sy
 8005a4c:	e7fe      	b.n	8005a4c <xQueueGenericCreateStatic+0x12>
	{
 8005a4e:	b510      	push	{r4, lr}
 8005a50:	b082      	sub	sp, #8
 8005a52:	461c      	mov	r4, r3
 8005a54:	4603      	mov	r3, r0
		configASSERT( pxStaticQueue != NULL );
 8005a56:	b154      	cbz	r4, 8005a6e <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005a58:	b192      	cbz	r2, 8005a80 <xQueueGenericCreateStatic+0x46>
 8005a5a:	b9d9      	cbnz	r1, 8005a94 <xQueueGenericCreateStatic+0x5a>
 8005a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a60:	f383 8811 	msr	BASEPRI, r3
 8005a64:	f3bf 8f6f 	isb	sy
 8005a68:	f3bf 8f4f 	dsb	sy
 8005a6c:	e7fe      	b.n	8005a6c <xQueueGenericCreateStatic+0x32>
 8005a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a72:	f383 8811 	msr	BASEPRI, r3
 8005a76:	f3bf 8f6f 	isb	sy
 8005a7a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8005a7e:	e7fe      	b.n	8005a7e <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005a80:	b339      	cbz	r1, 8005ad2 <xQueueGenericCreateStatic+0x98>
 8005a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a86:	f383 8811 	msr	BASEPRI, r3
 8005a8a:	f3bf 8f6f 	isb	sy
 8005a8e:	f3bf 8f4f 	dsb	sy
 8005a92:	e7fe      	b.n	8005a92 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005a94:	2050      	movs	r0, #80	; 0x50
 8005a96:	9001      	str	r0, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005a98:	9801      	ldr	r0, [sp, #4]
 8005a9a:	2850      	cmp	r0, #80	; 0x50
 8005a9c:	d008      	beq.n	8005ab0 <xQueueGenericCreateStatic+0x76>
 8005a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa2:	f383 8811 	msr	BASEPRI, r3
 8005aa6:	f3bf 8f6f 	isb	sy
 8005aaa:	f3bf 8f4f 	dsb	sy
 8005aae:	e7fe      	b.n	8005aae <xQueueGenericCreateStatic+0x74>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005ab0:	2001      	movs	r0, #1
 8005ab2:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8005ab6:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8005ab8:	63e3      	str	r3, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005aba:	6421      	str	r1, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005abc:	2101      	movs	r1, #1
 8005abe:	4620      	mov	r0, r4
 8005ac0:	f7ff ff79 	bl	80059b6 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8005ac4:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8005ac8:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8005acc:	4620      	mov	r0, r4
 8005ace:	b002      	add	sp, #8
 8005ad0:	bd10      	pop	{r4, pc}
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005ad2:	2250      	movs	r2, #80	; 0x50
 8005ad4:	9201      	str	r2, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005ad6:	9a01      	ldr	r2, [sp, #4]
 8005ad8:	2a50      	cmp	r2, #80	; 0x50
 8005ada:	d1e0      	bne.n	8005a9e <xQueueGenericCreateStatic+0x64>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005adc:	2201      	movs	r2, #1
 8005ade:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005ae2:	4622      	mov	r2, r4
 8005ae4:	e7e7      	b.n	8005ab6 <xQueueGenericCreateStatic+0x7c>

08005ae6 <xQueueGenericSend>:
{
 8005ae6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005aea:	b085      	sub	sp, #20
 8005aec:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8005aee:	b188      	cbz	r0, 8005b14 <xQueueGenericSend+0x2e>
 8005af0:	460e      	mov	r6, r1
 8005af2:	461d      	mov	r5, r3
 8005af4:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005af6:	b1b1      	cbz	r1, 8005b26 <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005af8:	2d02      	cmp	r5, #2
 8005afa:	d120      	bne.n	8005b3e <xQueueGenericSend+0x58>
 8005afc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d01d      	beq.n	8005b3e <xQueueGenericSend+0x58>
 8005b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b06:	f383 8811 	msr	BASEPRI, r3
 8005b0a:	f3bf 8f6f 	isb	sy
 8005b0e:	f3bf 8f4f 	dsb	sy
 8005b12:	e7fe      	b.n	8005b12 <xQueueGenericSend+0x2c>
 8005b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b18:	f383 8811 	msr	BASEPRI, r3
 8005b1c:	f3bf 8f6f 	isb	sy
 8005b20:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005b24:	e7fe      	b.n	8005b24 <xQueueGenericSend+0x3e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b26:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d0e5      	beq.n	8005af8 <xQueueGenericSend+0x12>
 8005b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b30:	f383 8811 	msr	BASEPRI, r3
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	e7fe      	b.n	8005b3c <xQueueGenericSend+0x56>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b3e:	f000 ff15 	bl	800696c <xTaskGetSchedulerState>
 8005b42:	b950      	cbnz	r0, 8005b5a <xQueueGenericSend+0x74>
 8005b44:	9b01      	ldr	r3, [sp, #4]
 8005b46:	b163      	cbz	r3, 8005b62 <xQueueGenericSend+0x7c>
 8005b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b4c:	f383 8811 	msr	BASEPRI, r3
 8005b50:	f3bf 8f6f 	isb	sy
 8005b54:	f3bf 8f4f 	dsb	sy
 8005b58:	e7fe      	b.n	8005b58 <xQueueGenericSend+0x72>
 8005b5a:	f04f 0800 	mov.w	r8, #0
		prvLockQueue( pxQueue );
 8005b5e:	2700      	movs	r7, #0
 8005b60:	e03a      	b.n	8005bd8 <xQueueGenericSend+0xf2>
 8005b62:	f04f 0800 	mov.w	r8, #0
 8005b66:	e7fa      	b.n	8005b5e <xQueueGenericSend+0x78>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b68:	462a      	mov	r2, r5
 8005b6a:	4631      	mov	r1, r6
 8005b6c:	4620      	mov	r0, r4
 8005b6e:	f7ff fe9a 	bl	80058a6 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b74:	b983      	cbnz	r3, 8005b98 <xQueueGenericSend+0xb2>
					else if( xYieldRequired != pdFALSE )
 8005b76:	b148      	cbz	r0, 8005b8c <xQueueGenericSend+0xa6>
						queueYIELD_IF_USING_PREEMPTION();
 8005b78:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005b7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b80:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005b84:	f3bf 8f4f 	dsb	sy
 8005b88:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8005b8c:	f001 f9e4 	bl	8006f58 <vPortExitCritical>
				return pdPASS;
 8005b90:	2001      	movs	r0, #1
}
 8005b92:	b005      	add	sp, #20
 8005b94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b98:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005b9c:	f000 fe0a 	bl	80067b4 <xTaskRemoveFromEventList>
 8005ba0:	2800      	cmp	r0, #0
 8005ba2:	d0f3      	beq.n	8005b8c <xQueueGenericSend+0xa6>
							queueYIELD_IF_USING_PREEMPTION();
 8005ba4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005ba8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bac:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005bb0:	f3bf 8f4f 	dsb	sy
 8005bb4:	f3bf 8f6f 	isb	sy
 8005bb8:	e7e8      	b.n	8005b8c <xQueueGenericSend+0xa6>
					taskEXIT_CRITICAL();
 8005bba:	f001 f9cd 	bl	8006f58 <vPortExitCritical>
					return errQUEUE_FULL;
 8005bbe:	2000      	movs	r0, #0
 8005bc0:	e7e7      	b.n	8005b92 <xQueueGenericSend+0xac>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005bc2:	a802      	add	r0, sp, #8
 8005bc4:	f000 fe7e 	bl	80068c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005bc8:	e014      	b.n	8005bf4 <xQueueGenericSend+0x10e>
				prvUnlockQueue( pxQueue );
 8005bca:	4620      	mov	r0, r4
 8005bcc:	f7ff feb8 	bl	8005940 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005bd0:	f000 fc90 	bl	80064f4 <xTaskResumeAll>
 8005bd4:	f04f 0801 	mov.w	r8, #1
		taskENTER_CRITICAL();
 8005bd8:	f001 f99c 	bl	8006f14 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005bdc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005bde:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d3c1      	bcc.n	8005b68 <xQueueGenericSend+0x82>
 8005be4:	2d02      	cmp	r5, #2
 8005be6:	d0bf      	beq.n	8005b68 <xQueueGenericSend+0x82>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005be8:	9b01      	ldr	r3, [sp, #4]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d0e5      	beq.n	8005bba <xQueueGenericSend+0xd4>
				else if( xEntryTimeSet == pdFALSE )
 8005bee:	f1b8 0f00 	cmp.w	r8, #0
 8005bf2:	d0e6      	beq.n	8005bc2 <xQueueGenericSend+0xdc>
		taskEXIT_CRITICAL();
 8005bf4:	f001 f9b0 	bl	8006f58 <vPortExitCritical>
		vTaskSuspendAll();
 8005bf8:	f000 fbd4 	bl	80063a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005bfc:	f001 f98a 	bl	8006f14 <vPortEnterCritical>
 8005c00:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8005c04:	b252      	sxtb	r2, r2
 8005c06:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005c0a:	bf08      	it	eq
 8005c0c:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8005c10:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8005c14:	b252      	sxtb	r2, r2
 8005c16:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005c1a:	bf08      	it	eq
 8005c1c:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8005c20:	f001 f99a 	bl	8006f58 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c24:	a901      	add	r1, sp, #4
 8005c26:	a802      	add	r0, sp, #8
 8005c28:	f000 fe58 	bl	80068dc <xTaskCheckForTimeOut>
 8005c2c:	bb00      	cbnz	r0, 8005c70 <xQueueGenericSend+0x18a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c2e:	f001 f971 	bl	8006f14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005c32:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
 8005c36:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8005c3a:	f001 f98d 	bl	8006f58 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005c3e:	45c1      	cmp	r9, r8
 8005c40:	d1c3      	bne.n	8005bca <xQueueGenericSend+0xe4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005c42:	9901      	ldr	r1, [sp, #4]
 8005c44:	f104 0010 	add.w	r0, r4, #16
 8005c48:	f000 fd52 	bl	80066f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c4c:	4620      	mov	r0, r4
 8005c4e:	f7ff fe77 	bl	8005940 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c52:	f000 fc4f 	bl	80064f4 <xTaskResumeAll>
 8005c56:	2800      	cmp	r0, #0
 8005c58:	d1bc      	bne.n	8005bd4 <xQueueGenericSend+0xee>
					portYIELD_WITHIN_API();
 8005c5a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c62:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005c66:	f3bf 8f4f 	dsb	sy
 8005c6a:	f3bf 8f6f 	isb	sy
 8005c6e:	e7b1      	b.n	8005bd4 <xQueueGenericSend+0xee>
			prvUnlockQueue( pxQueue );
 8005c70:	4620      	mov	r0, r4
 8005c72:	f7ff fe65 	bl	8005940 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c76:	f000 fc3d 	bl	80064f4 <xTaskResumeAll>
			return errQUEUE_FULL;
 8005c7a:	2000      	movs	r0, #0
 8005c7c:	e789      	b.n	8005b92 <xQueueGenericSend+0xac>

08005c7e <xQueueGenericSendFromISR>:
{
 8005c7e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8005c82:	b190      	cbz	r0, 8005caa <xQueueGenericSendFromISR+0x2c>
 8005c84:	460f      	mov	r7, r1
 8005c86:	4616      	mov	r6, r2
 8005c88:	461c      	mov	r4, r3
 8005c8a:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c8c:	b1b1      	cbz	r1, 8005cbc <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c8e:	2c02      	cmp	r4, #2
 8005c90:	d120      	bne.n	8005cd4 <xQueueGenericSendFromISR+0x56>
 8005c92:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d01d      	beq.n	8005cd4 <xQueueGenericSendFromISR+0x56>
 8005c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9c:	f383 8811 	msr	BASEPRI, r3
 8005ca0:	f3bf 8f6f 	isb	sy
 8005ca4:	f3bf 8f4f 	dsb	sy
 8005ca8:	e7fe      	b.n	8005ca8 <xQueueGenericSendFromISR+0x2a>
 8005caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cae:	f383 8811 	msr	BASEPRI, r3
 8005cb2:	f3bf 8f6f 	isb	sy
 8005cb6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005cba:	e7fe      	b.n	8005cba <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cbc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d0e5      	beq.n	8005c8e <xQueueGenericSendFromISR+0x10>
 8005cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc6:	f383 8811 	msr	BASEPRI, r3
 8005cca:	f3bf 8f6f 	isb	sy
 8005cce:	f3bf 8f4f 	dsb	sy
 8005cd2:	e7fe      	b.n	8005cd2 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005cd4:	f001 fa0a 	bl	80070ec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005cd8:	f3ef 8911 	mrs	r9, BASEPRI
 8005cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce0:	f383 8811 	msr	BASEPRI, r3
 8005ce4:	f3bf 8f6f 	isb	sy
 8005ce8:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005cec:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8005cee:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d306      	bcc.n	8005d02 <xQueueGenericSendFromISR+0x84>
 8005cf4:	2c02      	cmp	r4, #2
 8005cf6:	d004      	beq.n	8005d02 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8005cf8:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005cfa:	f389 8811 	msr	BASEPRI, r9
}
 8005cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8005d02:	f895 8045 	ldrb.w	r8, [r5, #69]	; 0x45
 8005d06:	fa4f f888 	sxtb.w	r8, r8
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d0a:	4622      	mov	r2, r4
 8005d0c:	4639      	mov	r1, r7
 8005d0e:	4628      	mov	r0, r5
 8005d10:	f7ff fdc9 	bl	80058a6 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8005d14:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005d18:	d006      	beq.n	8005d28 <xQueueGenericSendFromISR+0xaa>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005d1a:	f108 0301 	add.w	r3, r8, #1
 8005d1e:	b25b      	sxtb	r3, r3
 8005d20:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 8005d24:	2001      	movs	r0, #1
 8005d26:	e7e8      	b.n	8005cfa <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d28:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005d2a:	b90b      	cbnz	r3, 8005d30 <xQueueGenericSendFromISR+0xb2>
			xReturn = pdPASS;
 8005d2c:	2001      	movs	r0, #1
 8005d2e:	e7e4      	b.n	8005cfa <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d30:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8005d34:	f000 fd3e 	bl	80067b4 <xTaskRemoveFromEventList>
 8005d38:	b118      	cbz	r0, 8005d42 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 8005d3a:	b126      	cbz	r6, 8005d46 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005d3c:	2001      	movs	r0, #1
 8005d3e:	6030      	str	r0, [r6, #0]
 8005d40:	e7db      	b.n	8005cfa <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8005d42:	2001      	movs	r0, #1
 8005d44:	e7d9      	b.n	8005cfa <xQueueGenericSendFromISR+0x7c>
 8005d46:	2001      	movs	r0, #1
 8005d48:	e7d7      	b.n	8005cfa <xQueueGenericSendFromISR+0x7c>

08005d4a <xQueueReceive>:
{
 8005d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8005d52:	b180      	cbz	r0, 8005d76 <xQueueReceive+0x2c>
 8005d54:	460e      	mov	r6, r1
 8005d56:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d58:	b1b1      	cbz	r1, 8005d88 <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d5a:	f000 fe07 	bl	800696c <xTaskGetSchedulerState>
 8005d5e:	b9f8      	cbnz	r0, 8005da0 <xQueueReceive+0x56>
 8005d60:	9b01      	ldr	r3, [sp, #4]
 8005d62:	b30b      	cbz	r3, 8005da8 <xQueueReceive+0x5e>
	__asm volatile
 8005d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d68:	f383 8811 	msr	BASEPRI, r3
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	f3bf 8f4f 	dsb	sy
 8005d74:	e7fe      	b.n	8005d74 <xQueueReceive+0x2a>
 8005d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7a:	f383 8811 	msr	BASEPRI, r3
 8005d7e:	f3bf 8f6f 	isb	sy
 8005d82:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8005d86:	e7fe      	b.n	8005d86 <xQueueReceive+0x3c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d88:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d0e5      	beq.n	8005d5a <xQueueReceive+0x10>
 8005d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	e7fe      	b.n	8005d9e <xQueueReceive+0x54>
 8005da0:	f04f 0800 	mov.w	r8, #0
		prvLockQueue( pxQueue );
 8005da4:	2700      	movs	r7, #0
 8005da6:	e03b      	b.n	8005e20 <xQueueReceive+0xd6>
 8005da8:	f04f 0800 	mov.w	r8, #0
 8005dac:	e7fa      	b.n	8005da4 <xQueueReceive+0x5a>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005dae:	4631      	mov	r1, r6
 8005db0:	4620      	mov	r0, r4
 8005db2:	f7ff fdb3 	bl	800591c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005db6:	3d01      	subs	r5, #1
 8005db8:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dba:	6923      	ldr	r3, [r4, #16]
 8005dbc:	b92b      	cbnz	r3, 8005dca <xQueueReceive+0x80>
				taskEXIT_CRITICAL();
 8005dbe:	f001 f8cb 	bl	8006f58 <vPortExitCritical>
				return pdPASS;
 8005dc2:	2001      	movs	r0, #1
}
 8005dc4:	b004      	add	sp, #16
 8005dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dca:	f104 0010 	add.w	r0, r4, #16
 8005dce:	f000 fcf1 	bl	80067b4 <xTaskRemoveFromEventList>
 8005dd2:	2800      	cmp	r0, #0
 8005dd4:	d0f3      	beq.n	8005dbe <xQueueReceive+0x74>
						queueYIELD_IF_USING_PREEMPTION();
 8005dd6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dde:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005de2:	f3bf 8f4f 	dsb	sy
 8005de6:	f3bf 8f6f 	isb	sy
 8005dea:	e7e8      	b.n	8005dbe <xQueueReceive+0x74>
					taskEXIT_CRITICAL();
 8005dec:	f001 f8b4 	bl	8006f58 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8005df0:	2000      	movs	r0, #0
 8005df2:	e7e7      	b.n	8005dc4 <xQueueReceive+0x7a>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005df4:	a802      	add	r0, sp, #8
 8005df6:	f000 fd65 	bl	80068c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005dfa:	e01c      	b.n	8005e36 <xQueueReceive+0xec>
				prvUnlockQueue( pxQueue );
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	f7ff fd9f 	bl	8005940 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e02:	f000 fb77 	bl	80064f4 <xTaskResumeAll>
 8005e06:	e009      	b.n	8005e1c <xQueueReceive+0xd2>
			prvUnlockQueue( pxQueue );
 8005e08:	4620      	mov	r0, r4
 8005e0a:	f7ff fd99 	bl	8005940 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e0e:	f000 fb71 	bl	80064f4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e12:	4620      	mov	r0, r4
 8005e14:	f7ff fd3c 	bl	8005890 <prvIsQueueEmpty>
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	d146      	bne.n	8005eaa <xQueueReceive+0x160>
 8005e1c:	f04f 0801 	mov.w	r8, #1
		taskENTER_CRITICAL();
 8005e20:	f001 f878 	bl	8006f14 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e24:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e26:	2d00      	cmp	r5, #0
 8005e28:	d1c1      	bne.n	8005dae <xQueueReceive+0x64>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e2a:	9b01      	ldr	r3, [sp, #4]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d0dd      	beq.n	8005dec <xQueueReceive+0xa2>
				else if( xEntryTimeSet == pdFALSE )
 8005e30:	f1b8 0f00 	cmp.w	r8, #0
 8005e34:	d0de      	beq.n	8005df4 <xQueueReceive+0xaa>
		taskEXIT_CRITICAL();
 8005e36:	f001 f88f 	bl	8006f58 <vPortExitCritical>
		vTaskSuspendAll();
 8005e3a:	f000 fab3 	bl	80063a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e3e:	f001 f869 	bl	8006f14 <vPortEnterCritical>
 8005e42:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005e46:	b25b      	sxtb	r3, r3
 8005e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e4c:	bf08      	it	eq
 8005e4e:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8005e52:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005e56:	b25b      	sxtb	r3, r3
 8005e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e5c:	bf08      	it	eq
 8005e5e:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8005e62:	f001 f879 	bl	8006f58 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e66:	a901      	add	r1, sp, #4
 8005e68:	a802      	add	r0, sp, #8
 8005e6a:	f000 fd37 	bl	80068dc <xTaskCheckForTimeOut>
 8005e6e:	2800      	cmp	r0, #0
 8005e70:	d1ca      	bne.n	8005e08 <xQueueReceive+0xbe>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e72:	4620      	mov	r0, r4
 8005e74:	f7ff fd0c 	bl	8005890 <prvIsQueueEmpty>
 8005e78:	2800      	cmp	r0, #0
 8005e7a:	d0bf      	beq.n	8005dfc <xQueueReceive+0xb2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e7c:	9901      	ldr	r1, [sp, #4]
 8005e7e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005e82:	f000 fc35 	bl	80066f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e86:	4620      	mov	r0, r4
 8005e88:	f7ff fd5a 	bl	8005940 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e8c:	f000 fb32 	bl	80064f4 <xTaskResumeAll>
 8005e90:	2800      	cmp	r0, #0
 8005e92:	d1c3      	bne.n	8005e1c <xQueueReceive+0xd2>
					portYIELD_WITHIN_API();
 8005e94:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005e98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e9c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005ea0:	f3bf 8f4f 	dsb	sy
 8005ea4:	f3bf 8f6f 	isb	sy
 8005ea8:	e7b8      	b.n	8005e1c <xQueueReceive+0xd2>
				return errQUEUE_EMPTY;
 8005eaa:	2000      	movs	r0, #0
 8005eac:	e78a      	b.n	8005dc4 <xQueueReceive+0x7a>
	...

08005eb0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005eb0:	b410      	push	{r4}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005eb2:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005eb4:	4c07      	ldr	r4, [pc, #28]	; (8005ed4 <vQueueAddToRegistry+0x24>)
 8005eb6:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
 8005eba:	b122      	cbz	r2, 8005ec6 <vQueueAddToRegistry+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	2b08      	cmp	r3, #8
 8005ec0:	d1f9      	bne.n	8005eb6 <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005ec2:	bc10      	pop	{r4}
 8005ec4:	4770      	bx	lr
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005ec6:	4a03      	ldr	r2, [pc, #12]	; (8005ed4 <vQueueAddToRegistry+0x24>)
 8005ec8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005ecc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005ed0:	6058      	str	r0, [r3, #4]
				break;
 8005ed2:	e7f6      	b.n	8005ec2 <vQueueAddToRegistry+0x12>
 8005ed4:	20001b54 	.word	0x20001b54

08005ed8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ed8:	b570      	push	{r4, r5, r6, lr}
 8005eda:	4604      	mov	r4, r0
 8005edc:	460d      	mov	r5, r1
 8005ede:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005ee0:	f001 f818 	bl	8006f14 <vPortEnterCritical>
 8005ee4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005ee8:	b25b      	sxtb	r3, r3
 8005eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eee:	bf04      	itt	eq
 8005ef0:	2300      	moveq	r3, #0
 8005ef2:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8005ef6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005efa:	b25b      	sxtb	r3, r3
 8005efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f00:	bf04      	itt	eq
 8005f02:	2300      	moveq	r3, #0
 8005f04:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8005f08:	f001 f826 	bl	8006f58 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005f0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005f0e:	b11b      	cbz	r3, 8005f18 <vQueueWaitForMessageRestricted+0x40>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005f10:	4620      	mov	r0, r4
 8005f12:	f7ff fd15 	bl	8005940 <prvUnlockQueue>
	}
 8005f16:	bd70      	pop	{r4, r5, r6, pc}
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005f18:	4632      	mov	r2, r6
 8005f1a:	4629      	mov	r1, r5
 8005f1c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005f20:	f000 fc2a 	bl	8006778 <vTaskPlaceOnEventListRestricted>
 8005f24:	e7f4      	b.n	8005f10 <vQueueWaitForMessageRestricted+0x38>
	...

08005f28 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f28:	4b08      	ldr	r3, [pc, #32]	; (8005f4c <prvResetNextTaskUnblockTime+0x24>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	b923      	cbnz	r3, 8005f3a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f30:	4b07      	ldr	r3, [pc, #28]	; (8005f50 <prvResetNextTaskUnblockTime+0x28>)
 8005f32:	f04f 32ff 	mov.w	r2, #4294967295
 8005f36:	601a      	str	r2, [r3, #0]
 8005f38:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005f3a:	4b04      	ldr	r3, [pc, #16]	; (8005f4c <prvResetNextTaskUnblockTime+0x24>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	685a      	ldr	r2, [r3, #4]
 8005f44:	4b02      	ldr	r3, [pc, #8]	; (8005f50 <prvResetNextTaskUnblockTime+0x28>)
 8005f46:	601a      	str	r2, [r3, #0]
	}
}
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	20001b98 	.word	0x20001b98
 8005f50:	20002040 	.word	0x20002040

08005f54 <prvInitialiseNewTask>:
{
 8005f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f58:	4606      	mov	r6, r0
 8005f5a:	4689      	mov	r9, r1
 8005f5c:	461f      	mov	r7, r3
 8005f5e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8005f62:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005f64:	0095      	lsls	r5, r2, #2
 8005f66:	462a      	mov	r2, r5
 8005f68:	21a5      	movs	r1, #165	; 0xa5
 8005f6a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005f6c:	f001 fa1c 	bl	80073a8 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005f70:	3d04      	subs	r5, #4
 8005f72:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005f74:	441d      	add	r5, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005f76:	f025 0507 	bic.w	r5, r5, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f7a:	f109 3cff 	add.w	ip, r9, #4294967295
 8005f7e:	f104 0e33 	add.w	lr, r4, #51	; 0x33
 8005f82:	f109 010f 	add.w	r1, r9, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f86:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 8005f8a:	f80e 2f01 	strb.w	r2, [lr, #1]!
		if( pcName[ x ] == 0x00 )
 8005f8e:	b10a      	cbz	r2, 8005f94 <prvInitialiseNewTask+0x40>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f90:	458c      	cmp	ip, r1
 8005f92:	d1f8      	bne.n	8005f86 <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f94:	f04f 0a00 	mov.w	sl, #0
 8005f98:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f9c:	9b08      	ldr	r3, [sp, #32]
 8005f9e:	2b37      	cmp	r3, #55	; 0x37
 8005fa0:	bf28      	it	cs
 8005fa2:	2337      	movcs	r3, #55	; 0x37
 8005fa4:	4699      	mov	r9, r3
	pxNewTCB->uxPriority = uxPriority;
 8005fa6:	62e3      	str	r3, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8005fa8:	64e3      	str	r3, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005faa:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005fae:	1d20      	adds	r0, r4, #4
 8005fb0:	f7ff fc35 	bl	800581e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005fb4:	f104 0018 	add.w	r0, r4, #24
 8005fb8:	f7ff fc31 	bl	800581e <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005fbc:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fbe:	f1c9 0338 	rsb	r3, r9, #56	; 0x38
 8005fc2:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005fc4:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8005fc6:	f8c4 a0b4 	str.w	sl, [r4, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005fca:	f884 a0b8 	strb.w	sl, [r4, #184]	; 0xb8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005fce:	2260      	movs	r2, #96	; 0x60
 8005fd0:	4651      	mov	r1, sl
 8005fd2:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8005fd6:	f001 f9e7 	bl	80073a8 <memset>
 8005fda:	4b09      	ldr	r3, [pc, #36]	; (8006000 <prvInitialiseNewTask+0xac>)
 8005fdc:	65a3      	str	r3, [r4, #88]	; 0x58
 8005fde:	4b09      	ldr	r3, [pc, #36]	; (8006004 <prvInitialiseNewTask+0xb0>)
 8005fe0:	65e3      	str	r3, [r4, #92]	; 0x5c
 8005fe2:	4b09      	ldr	r3, [pc, #36]	; (8006008 <prvInitialiseNewTask+0xb4>)
 8005fe4:	6623      	str	r3, [r4, #96]	; 0x60
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005fe6:	463a      	mov	r2, r7
 8005fe8:	4631      	mov	r1, r6
 8005fea:	4628      	mov	r0, r5
 8005fec:	f000 ff6c 	bl	8006ec8 <pxPortInitialiseStack>
 8005ff0:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8005ff2:	f1b8 0f00 	cmp.w	r8, #0
 8005ff6:	d001      	beq.n	8005ffc <prvInitialiseNewTask+0xa8>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005ff8:	f8c8 4000 	str.w	r4, [r8]
}
 8005ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006000:	08007a2c 	.word	0x08007a2c
 8006004:	08007a4c 	.word	0x08007a4c
 8006008:	08007a0c 	.word	0x08007a0c

0800600c <prvAddNewTaskToReadyList>:
{
 800600c:	b570      	push	{r4, r5, r6, lr}
 800600e:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8006010:	f000 ff80 	bl	8006f14 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8006014:	4a30      	ldr	r2, [pc, #192]	; (80060d8 <prvAddNewTaskToReadyList+0xcc>)
 8006016:	6813      	ldr	r3, [r2, #0]
 8006018:	3301      	adds	r3, #1
 800601a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800601c:	4b2f      	ldr	r3, [pc, #188]	; (80060dc <prvAddNewTaskToReadyList+0xd0>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d034      	beq.n	800608e <prvAddNewTaskToReadyList+0x82>
			if( xSchedulerRunning == pdFALSE )
 8006024:	4b2e      	ldr	r3, [pc, #184]	; (80060e0 <prvAddNewTaskToReadyList+0xd4>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	b93b      	cbnz	r3, 800603a <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800602a:	4b2c      	ldr	r3, [pc, #176]	; (80060dc <prvAddNewTaskToReadyList+0xd0>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006030:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006032:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8006034:	bf9c      	itt	ls
 8006036:	4b29      	ldrls	r3, [pc, #164]	; (80060dc <prvAddNewTaskToReadyList+0xd0>)
 8006038:	601d      	strls	r5, [r3, #0]
		uxTaskNumber++;
 800603a:	4a2a      	ldr	r2, [pc, #168]	; (80060e4 <prvAddNewTaskToReadyList+0xd8>)
 800603c:	6813      	ldr	r3, [r2, #0]
 800603e:	3301      	adds	r3, #1
 8006040:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006042:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8006044:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8006046:	4b28      	ldr	r3, [pc, #160]	; (80060e8 <prvAddNewTaskToReadyList+0xdc>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4298      	cmp	r0, r3
 800604c:	bf84      	itt	hi
 800604e:	4b26      	ldrhi	r3, [pc, #152]	; (80060e8 <prvAddNewTaskToReadyList+0xdc>)
 8006050:	6018      	strhi	r0, [r3, #0]
 8006052:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006056:	1d29      	adds	r1, r5, #4
 8006058:	4b24      	ldr	r3, [pc, #144]	; (80060ec <prvAddNewTaskToReadyList+0xe0>)
 800605a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800605e:	f7ff fbe1 	bl	8005824 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8006062:	f000 ff79 	bl	8006f58 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8006066:	4b1e      	ldr	r3, [pc, #120]	; (80060e0 <prvAddNewTaskToReadyList+0xd4>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	b17b      	cbz	r3, 800608c <prvAddNewTaskToReadyList+0x80>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800606c:	4b1b      	ldr	r3, [pc, #108]	; (80060dc <prvAddNewTaskToReadyList+0xd0>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006072:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006074:	429a      	cmp	r2, r3
 8006076:	d209      	bcs.n	800608c <prvAddNewTaskToReadyList+0x80>
			taskYIELD_IF_USING_PREEMPTION();
 8006078:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800607c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006080:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006084:	f3bf 8f4f 	dsb	sy
 8006088:	f3bf 8f6f 	isb	sy
}
 800608c:	bd70      	pop	{r4, r5, r6, pc}
			pxCurrentTCB = pxNewTCB;
 800608e:	4b13      	ldr	r3, [pc, #76]	; (80060dc <prvAddNewTaskToReadyList+0xd0>)
 8006090:	601d      	str	r5, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006092:	6813      	ldr	r3, [r2, #0]
 8006094:	2b01      	cmp	r3, #1
 8006096:	d1d0      	bne.n	800603a <prvAddNewTaskToReadyList+0x2e>
 8006098:	4c14      	ldr	r4, [pc, #80]	; (80060ec <prvAddNewTaskToReadyList+0xe0>)
 800609a:	f504 668c 	add.w	r6, r4, #1120	; 0x460
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800609e:	4620      	mov	r0, r4
 80060a0:	f7ff fbb2 	bl	8005808 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060a4:	3414      	adds	r4, #20
 80060a6:	42b4      	cmp	r4, r6
 80060a8:	d1f9      	bne.n	800609e <prvAddNewTaskToReadyList+0x92>
	vListInitialise( &xDelayedTaskList1 );
 80060aa:	4e11      	ldr	r6, [pc, #68]	; (80060f0 <prvAddNewTaskToReadyList+0xe4>)
 80060ac:	4630      	mov	r0, r6
 80060ae:	f7ff fbab 	bl	8005808 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80060b2:	4c10      	ldr	r4, [pc, #64]	; (80060f4 <prvAddNewTaskToReadyList+0xe8>)
 80060b4:	4620      	mov	r0, r4
 80060b6:	f7ff fba7 	bl	8005808 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80060ba:	480f      	ldr	r0, [pc, #60]	; (80060f8 <prvAddNewTaskToReadyList+0xec>)
 80060bc:	f7ff fba4 	bl	8005808 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80060c0:	480e      	ldr	r0, [pc, #56]	; (80060fc <prvAddNewTaskToReadyList+0xf0>)
 80060c2:	f7ff fba1 	bl	8005808 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80060c6:	480e      	ldr	r0, [pc, #56]	; (8006100 <prvAddNewTaskToReadyList+0xf4>)
 80060c8:	f7ff fb9e 	bl	8005808 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80060cc:	4b0d      	ldr	r3, [pc, #52]	; (8006104 <prvAddNewTaskToReadyList+0xf8>)
 80060ce:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80060d0:	4b0d      	ldr	r3, [pc, #52]	; (8006108 <prvAddNewTaskToReadyList+0xfc>)
 80060d2:	601c      	str	r4, [r3, #0]
}
 80060d4:	e7b1      	b.n	800603a <prvAddNewTaskToReadyList+0x2e>
 80060d6:	bf00      	nop
 80060d8:	20002000 	.word	0x20002000
 80060dc:	20001b94 	.word	0x20001b94
 80060e0:	2000205c 	.word	0x2000205c
 80060e4:	20002010 	.word	0x20002010
 80060e8:	20002014 	.word	0x20002014
 80060ec:	20001ba0 	.word	0x20001ba0
 80060f0:	20002018 	.word	0x20002018
 80060f4:	2000202c 	.word	0x2000202c
 80060f8:	20002048 	.word	0x20002048
 80060fc:	20002074 	.word	0x20002074
 8006100:	20002060 	.word	0x20002060
 8006104:	20001b98 	.word	0x20001b98
 8006108:	20001b9c 	.word	0x20001b9c

0800610c <prvDeleteTCB>:
	{
 800610c:	b510      	push	{r4, lr}
 800610e:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006110:	3054      	adds	r0, #84	; 0x54
 8006112:	f001 f95f 	bl	80073d4 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006116:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 800611a:	b163      	cbz	r3, 8006136 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800611c:	2b01      	cmp	r3, #1
 800611e:	d011      	beq.n	8006144 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006120:	2b02      	cmp	r3, #2
 8006122:	d00e      	beq.n	8006142 <prvDeleteTCB+0x36>
 8006124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006128:	f383 8811 	msr	BASEPRI, r3
 800612c:	f3bf 8f6f 	isb	sy
 8006130:	f3bf 8f4f 	dsb	sy
 8006134:	e7fe      	b.n	8006134 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 8006136:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006138:	f001 f8cc 	bl	80072d4 <vPortFree>
				vPortFree( pxTCB );
 800613c:	4620      	mov	r0, r4
 800613e:	f001 f8c9 	bl	80072d4 <vPortFree>
	}
 8006142:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8006144:	4620      	mov	r0, r4
 8006146:	f001 f8c5 	bl	80072d4 <vPortFree>
 800614a:	e7fa      	b.n	8006142 <prvDeleteTCB+0x36>

0800614c <prvIdleTask>:
{
 800614c:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800614e:	4c15      	ldr	r4, [pc, #84]	; (80061a4 <prvIdleTask+0x58>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006150:	4f15      	ldr	r7, [pc, #84]	; (80061a8 <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 8006152:	4e16      	ldr	r6, [pc, #88]	; (80061ac <prvIdleTask+0x60>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006154:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80061b0 <prvIdleTask+0x64>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006158:	6823      	ldr	r3, [r4, #0]
 800615a:	b1a3      	cbz	r3, 8006186 <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 800615c:	f000 feda 	bl	8006f14 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006164:	1d28      	adds	r0, r5, #4
 8006166:	f7ff fb81 	bl	800586c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800616a:	6833      	ldr	r3, [r6, #0]
 800616c:	3b01      	subs	r3, #1
 800616e:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006170:	6823      	ldr	r3, [r4, #0]
 8006172:	3b01      	subs	r3, #1
 8006174:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8006176:	f000 feef 	bl	8006f58 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800617a:	4628      	mov	r0, r5
 800617c:	f7ff ffc6 	bl	800610c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006180:	6823      	ldr	r3, [r4, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1ea      	bne.n	800615c <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006186:	f8d8 3000 	ldr.w	r3, [r8]
 800618a:	2b01      	cmp	r3, #1
 800618c:	d9e4      	bls.n	8006158 <prvIdleTask+0xc>
				taskYIELD();
 800618e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006196:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800619a:	f3bf 8f4f 	dsb	sy
 800619e:	f3bf 8f6f 	isb	sy
 80061a2:	e7d9      	b.n	8006158 <prvIdleTask+0xc>
 80061a4:	20002004 	.word	0x20002004
 80061a8:	20002074 	.word	0x20002074
 80061ac:	20002000 	.word	0x20002000
 80061b0:	20001ba0 	.word	0x20001ba0

080061b4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80061b4:	b570      	push	{r4, r5, r6, lr}
 80061b6:	4604      	mov	r4, r0
 80061b8:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80061ba:	4b17      	ldr	r3, [pc, #92]	; (8006218 <prvAddCurrentTaskToDelayedList+0x64>)
 80061bc:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061be:	4b17      	ldr	r3, [pc, #92]	; (800621c <prvAddCurrentTaskToDelayedList+0x68>)
 80061c0:	6818      	ldr	r0, [r3, #0]
 80061c2:	3004      	adds	r0, #4
 80061c4:	f7ff fb52 	bl	800586c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80061c8:	f1b4 3fff 	cmp.w	r4, #4294967295
 80061cc:	d00d      	beq.n	80061ea <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80061ce:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80061d0:	4b12      	ldr	r3, [pc, #72]	; (800621c <prvAddCurrentTaskToDelayedList+0x68>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80061d6:	42a6      	cmp	r6, r4
 80061d8:	d910      	bls.n	80061fc <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061da:	4b11      	ldr	r3, [pc, #68]	; (8006220 <prvAddCurrentTaskToDelayedList+0x6c>)
 80061dc:	6818      	ldr	r0, [r3, #0]
 80061de:	4b0f      	ldr	r3, [pc, #60]	; (800621c <prvAddCurrentTaskToDelayedList+0x68>)
 80061e0:	6819      	ldr	r1, [r3, #0]
 80061e2:	3104      	adds	r1, #4
 80061e4:	f7ff fb29 	bl	800583a <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80061e8:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80061ea:	2d00      	cmp	r5, #0
 80061ec:	d0ef      	beq.n	80061ce <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061ee:	4b0b      	ldr	r3, [pc, #44]	; (800621c <prvAddCurrentTaskToDelayedList+0x68>)
 80061f0:	6819      	ldr	r1, [r3, #0]
 80061f2:	3104      	adds	r1, #4
 80061f4:	480b      	ldr	r0, [pc, #44]	; (8006224 <prvAddCurrentTaskToDelayedList+0x70>)
 80061f6:	f7ff fb15 	bl	8005824 <vListInsertEnd>
 80061fa:	e7f5      	b.n	80061e8 <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061fc:	4b0a      	ldr	r3, [pc, #40]	; (8006228 <prvAddCurrentTaskToDelayedList+0x74>)
 80061fe:	6818      	ldr	r0, [r3, #0]
 8006200:	4b06      	ldr	r3, [pc, #24]	; (800621c <prvAddCurrentTaskToDelayedList+0x68>)
 8006202:	6819      	ldr	r1, [r3, #0]
 8006204:	3104      	adds	r1, #4
 8006206:	f7ff fb18 	bl	800583a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800620a:	4b08      	ldr	r3, [pc, #32]	; (800622c <prvAddCurrentTaskToDelayedList+0x78>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	42a3      	cmp	r3, r4
					xNextTaskUnblockTime = xTimeToWake;
 8006210:	bf84      	itt	hi
 8006212:	4b06      	ldrhi	r3, [pc, #24]	; (800622c <prvAddCurrentTaskToDelayedList+0x78>)
 8006214:	601c      	strhi	r4, [r3, #0]
}
 8006216:	e7e7      	b.n	80061e8 <prvAddCurrentTaskToDelayedList+0x34>
 8006218:	20002088 	.word	0x20002088
 800621c:	20001b94 	.word	0x20001b94
 8006220:	20001b9c 	.word	0x20001b9c
 8006224:	20002060 	.word	0x20002060
 8006228:	20001b98 	.word	0x20001b98
 800622c:	20002040 	.word	0x20002040

08006230 <xTaskCreateStatic>:
	{
 8006230:	b530      	push	{r4, r5, lr}
 8006232:	b087      	sub	sp, #28
 8006234:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8006236:	b17c      	cbz	r4, 8006258 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006238:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800623a:	b1b5      	cbz	r5, 800626a <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800623c:	25bc      	movs	r5, #188	; 0xbc
 800623e:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006240:	9d04      	ldr	r5, [sp, #16]
 8006242:	2dbc      	cmp	r5, #188	; 0xbc
 8006244:	d01a      	beq.n	800627c <xTaskCreateStatic+0x4c>
 8006246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624a:	f383 8811 	msr	BASEPRI, r3
 800624e:	f3bf 8f6f 	isb	sy
 8006252:	f3bf 8f4f 	dsb	sy
 8006256:	e7fe      	b.n	8006256 <xTaskCreateStatic+0x26>
 8006258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625c:	f383 8811 	msr	BASEPRI, r3
 8006260:	f3bf 8f6f 	isb	sy
 8006264:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8006268:	e7fe      	b.n	8006268 <xTaskCreateStatic+0x38>
 800626a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626e:	f383 8811 	msr	BASEPRI, r3
 8006272:	f3bf 8f6f 	isb	sy
 8006276:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800627a:	e7fe      	b.n	800627a <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800627c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800627e:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006280:	2402      	movs	r4, #2
 8006282:	f885 40b9 	strb.w	r4, [r5, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006286:	2400      	movs	r4, #0
 8006288:	9403      	str	r4, [sp, #12]
 800628a:	9502      	str	r5, [sp, #8]
 800628c:	ac05      	add	r4, sp, #20
 800628e:	9401      	str	r4, [sp, #4]
 8006290:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006292:	9400      	str	r4, [sp, #0]
 8006294:	f7ff fe5e 	bl	8005f54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006298:	980c      	ldr	r0, [sp, #48]	; 0x30
 800629a:	f7ff feb7 	bl	800600c <prvAddNewTaskToReadyList>
	}
 800629e:	9805      	ldr	r0, [sp, #20]
 80062a0:	b007      	add	sp, #28
 80062a2:	bd30      	pop	{r4, r5, pc}

080062a4 <xTaskCreate>:
	{
 80062a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80062a8:	b085      	sub	sp, #20
 80062aa:	4607      	mov	r7, r0
 80062ac:	4688      	mov	r8, r1
 80062ae:	4614      	mov	r4, r2
 80062b0:	461e      	mov	r6, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062b2:	0090      	lsls	r0, r2, #2
 80062b4:	f000 ff78 	bl	80071a8 <pvPortMalloc>
			if( pxStack != NULL )
 80062b8:	b308      	cbz	r0, 80062fe <xTaskCreate+0x5a>
 80062ba:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80062bc:	20bc      	movs	r0, #188	; 0xbc
 80062be:	f000 ff73 	bl	80071a8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80062c2:	4605      	mov	r5, r0
 80062c4:	b1a8      	cbz	r0, 80062f2 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 80062c6:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80062ca:	2300      	movs	r3, #0
 80062cc:	f880 30b9 	strb.w	r3, [r0, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80062d0:	9303      	str	r3, [sp, #12]
 80062d2:	9002      	str	r0, [sp, #8]
 80062d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062d6:	9301      	str	r3, [sp, #4]
 80062d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062da:	9300      	str	r3, [sp, #0]
 80062dc:	4633      	mov	r3, r6
 80062de:	4622      	mov	r2, r4
 80062e0:	4641      	mov	r1, r8
 80062e2:	4638      	mov	r0, r7
 80062e4:	f7ff fe36 	bl	8005f54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062e8:	4628      	mov	r0, r5
 80062ea:	f7ff fe8f 	bl	800600c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80062ee:	2001      	movs	r0, #1
 80062f0:	e007      	b.n	8006302 <xTaskCreate+0x5e>
					vPortFree( pxStack );
 80062f2:	4648      	mov	r0, r9
 80062f4:	f000 ffee 	bl	80072d4 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80062f8:	f04f 30ff 	mov.w	r0, #4294967295
 80062fc:	e001      	b.n	8006302 <xTaskCreate+0x5e>
 80062fe:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8006302:	b005      	add	sp, #20
 8006304:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006308 <vTaskStartScheduler>:
{
 8006308:	b510      	push	{r4, lr}
 800630a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800630c:	2400      	movs	r4, #0
 800630e:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006310:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006312:	aa07      	add	r2, sp, #28
 8006314:	a906      	add	r1, sp, #24
 8006316:	a805      	add	r0, sp, #20
 8006318:	f7ff f948 	bl	80055ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800631c:	9b05      	ldr	r3, [sp, #20]
 800631e:	9302      	str	r3, [sp, #8]
 8006320:	9b06      	ldr	r3, [sp, #24]
 8006322:	9301      	str	r3, [sp, #4]
 8006324:	9400      	str	r4, [sp, #0]
 8006326:	4623      	mov	r3, r4
 8006328:	9a07      	ldr	r2, [sp, #28]
 800632a:	4917      	ldr	r1, [pc, #92]	; (8006388 <vTaskStartScheduler+0x80>)
 800632c:	4817      	ldr	r0, [pc, #92]	; (800638c <vTaskStartScheduler+0x84>)
 800632e:	f7ff ff7f 	bl	8006230 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8006332:	b338      	cbz	r0, 8006384 <vTaskStartScheduler+0x7c>
			xReturn = xTimerCreateTimerTask();
 8006334:	f000 fbda 	bl	8006aec <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8006338:	2801      	cmp	r0, #1
 800633a:	d00b      	beq.n	8006354 <vTaskStartScheduler+0x4c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800633c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006340:	d120      	bne.n	8006384 <vTaskStartScheduler+0x7c>
 8006342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006346:	f383 8811 	msr	BASEPRI, r3
 800634a:	f3bf 8f6f 	isb	sy
 800634e:	f3bf 8f4f 	dsb	sy
 8006352:	e7fe      	b.n	8006352 <vTaskStartScheduler+0x4a>
 8006354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006358:	f383 8811 	msr	BASEPRI, r3
 800635c:	f3bf 8f6f 	isb	sy
 8006360:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006364:	4b0a      	ldr	r3, [pc, #40]	; (8006390 <vTaskStartScheduler+0x88>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	3354      	adds	r3, #84	; 0x54
 800636a:	4a0a      	ldr	r2, [pc, #40]	; (8006394 <vTaskStartScheduler+0x8c>)
 800636c:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800636e:	4b0a      	ldr	r3, [pc, #40]	; (8006398 <vTaskStartScheduler+0x90>)
 8006370:	f04f 32ff 	mov.w	r2, #4294967295
 8006374:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006376:	4b09      	ldr	r3, [pc, #36]	; (800639c <vTaskStartScheduler+0x94>)
 8006378:	2201      	movs	r2, #1
 800637a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800637c:	4b08      	ldr	r3, [pc, #32]	; (80063a0 <vTaskStartScheduler+0x98>)
 800637e:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8006380:	f000 fe52 	bl	8007028 <xPortStartScheduler>
}
 8006384:	b008      	add	sp, #32
 8006386:	bd10      	pop	{r4, pc}
 8006388:	080079f4 	.word	0x080079f4
 800638c:	0800614d 	.word	0x0800614d
 8006390:	20001b94 	.word	0x20001b94
 8006394:	200000c0 	.word	0x200000c0
 8006398:	20002040 	.word	0x20002040
 800639c:	2000205c 	.word	0x2000205c
 80063a0:	20002088 	.word	0x20002088

080063a4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80063a4:	4a02      	ldr	r2, [pc, #8]	; (80063b0 <vTaskSuspendAll+0xc>)
 80063a6:	6813      	ldr	r3, [r2, #0]
 80063a8:	3301      	adds	r3, #1
 80063aa:	6013      	str	r3, [r2, #0]
}
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop
 80063b0:	2000200c 	.word	0x2000200c

080063b4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80063b4:	4b01      	ldr	r3, [pc, #4]	; (80063bc <xTaskGetTickCount+0x8>)
 80063b6:	6818      	ldr	r0, [r3, #0]
}
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	20002088 	.word	0x20002088

080063c0 <xTaskIncrementTick>:
{
 80063c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063c4:	4b40      	ldr	r3, [pc, #256]	; (80064c8 <xTaskIncrementTick+0x108>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d170      	bne.n	80064ae <xTaskIncrementTick+0xee>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80063cc:	4b3f      	ldr	r3, [pc, #252]	; (80064cc <xTaskIncrementTick+0x10c>)
 80063ce:	681e      	ldr	r6, [r3, #0]
 80063d0:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 80063d2:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80063d4:	b9c6      	cbnz	r6, 8006408 <xTaskIncrementTick+0x48>
			taskSWITCH_DELAYED_LISTS();
 80063d6:	4b3e      	ldr	r3, [pc, #248]	; (80064d0 <xTaskIncrementTick+0x110>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	b143      	cbz	r3, 80063f0 <xTaskIncrementTick+0x30>
 80063de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e2:	f383 8811 	msr	BASEPRI, r3
 80063e6:	f3bf 8f6f 	isb	sy
 80063ea:	f3bf 8f4f 	dsb	sy
 80063ee:	e7fe      	b.n	80063ee <xTaskIncrementTick+0x2e>
 80063f0:	4a37      	ldr	r2, [pc, #220]	; (80064d0 <xTaskIncrementTick+0x110>)
 80063f2:	6811      	ldr	r1, [r2, #0]
 80063f4:	4b37      	ldr	r3, [pc, #220]	; (80064d4 <xTaskIncrementTick+0x114>)
 80063f6:	6818      	ldr	r0, [r3, #0]
 80063f8:	6010      	str	r0, [r2, #0]
 80063fa:	6019      	str	r1, [r3, #0]
 80063fc:	4a36      	ldr	r2, [pc, #216]	; (80064d8 <xTaskIncrementTick+0x118>)
 80063fe:	6813      	ldr	r3, [r2, #0]
 8006400:	3301      	adds	r3, #1
 8006402:	6013      	str	r3, [r2, #0]
 8006404:	f7ff fd90 	bl	8005f28 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006408:	4b34      	ldr	r3, [pc, #208]	; (80064dc <xTaskIncrementTick+0x11c>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	42b3      	cmp	r3, r6
 800640e:	d841      	bhi.n	8006494 <xTaskIncrementTick+0xd4>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006410:	4b2f      	ldr	r3, [pc, #188]	; (80064d0 <xTaskIncrementTick+0x110>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	b13b      	cbz	r3, 8006428 <xTaskIncrementTick+0x68>
BaseType_t xSwitchRequired = pdFALSE;
 8006418:	2500      	movs	r5, #0
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800641a:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 80064d0 <xTaskIncrementTick+0x110>
					prvAddTaskToReadyList( pxTCB );
 800641e:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 80064e0 <xTaskIncrementTick+0x120>
 8006422:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 80064e4 <xTaskIncrementTick+0x124>
 8006426:	e022      	b.n	800646e <xTaskIncrementTick+0xae>
BaseType_t xSwitchRequired = pdFALSE;
 8006428:	2500      	movs	r5, #0
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800642a:	4b2c      	ldr	r3, [pc, #176]	; (80064dc <xTaskIncrementTick+0x11c>)
 800642c:	f04f 32ff 	mov.w	r2, #4294967295
 8006430:	601a      	str	r2, [r3, #0]
					break;
 8006432:	e030      	b.n	8006496 <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = xItemValue;
 8006434:	4a29      	ldr	r2, [pc, #164]	; (80064dc <xTaskIncrementTick+0x11c>)
 8006436:	6013      	str	r3, [r2, #0]
						break;
 8006438:	e02d      	b.n	8006496 <xTaskIncrementTick+0xd6>
					prvAddTaskToReadyList( pxTCB );
 800643a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800643c:	f8d9 3000 	ldr.w	r3, [r9]
 8006440:	4298      	cmp	r0, r3
 8006442:	bf88      	it	hi
 8006444:	f8c9 0000 	strhi.w	r0, [r9]
 8006448:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800644c:	4639      	mov	r1, r7
 800644e:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 8006452:	f7ff f9e7 	bl	8005824 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006456:	4b24      	ldr	r3, [pc, #144]	; (80064e8 <xTaskIncrementTick+0x128>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800645c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800645e:	429a      	cmp	r2, r3
 8006460:	bf28      	it	cs
 8006462:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006464:	f8d8 3000 	ldr.w	r3, [r8]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d0dd      	beq.n	800642a <xTaskIncrementTick+0x6a>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800646e:	f8d8 3000 	ldr.w	r3, [r8]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006476:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8006478:	429e      	cmp	r6, r3
 800647a:	d3db      	bcc.n	8006434 <xTaskIncrementTick+0x74>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800647c:	1d27      	adds	r7, r4, #4
 800647e:	4638      	mov	r0, r7
 8006480:	f7ff f9f4 	bl	800586c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006484:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006486:	2b00      	cmp	r3, #0
 8006488:	d0d7      	beq.n	800643a <xTaskIncrementTick+0x7a>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800648a:	f104 0018 	add.w	r0, r4, #24
 800648e:	f7ff f9ed 	bl	800586c <uxListRemove>
 8006492:	e7d2      	b.n	800643a <xTaskIncrementTick+0x7a>
BaseType_t xSwitchRequired = pdFALSE;
 8006494:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006496:	4b14      	ldr	r3, [pc, #80]	; (80064e8 <xTaskIncrementTick+0x128>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	4a10      	ldr	r2, [pc, #64]	; (80064e4 <xTaskIncrementTick+0x124>)
 80064a4:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	bf28      	it	cs
 80064aa:	2501      	movcs	r5, #1
 80064ac:	e004      	b.n	80064b8 <xTaskIncrementTick+0xf8>
		++uxPendedTicks;
 80064ae:	4a0f      	ldr	r2, [pc, #60]	; (80064ec <xTaskIncrementTick+0x12c>)
 80064b0:	6813      	ldr	r3, [r2, #0]
 80064b2:	3301      	adds	r3, #1
 80064b4:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80064b6:	2500      	movs	r5, #0
		if( xYieldPending != pdFALSE )
 80064b8:	4b0d      	ldr	r3, [pc, #52]	; (80064f0 <xTaskIncrementTick+0x130>)
 80064ba:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 80064bc:	2b00      	cmp	r3, #0
}
 80064be:	bf0c      	ite	eq
 80064c0:	4628      	moveq	r0, r5
 80064c2:	2001      	movne	r0, #1
 80064c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064c8:	2000200c 	.word	0x2000200c
 80064cc:	20002088 	.word	0x20002088
 80064d0:	20001b98 	.word	0x20001b98
 80064d4:	20001b9c 	.word	0x20001b9c
 80064d8:	20002044 	.word	0x20002044
 80064dc:	20002040 	.word	0x20002040
 80064e0:	20002014 	.word	0x20002014
 80064e4:	20001ba0 	.word	0x20001ba0
 80064e8:	20001b94 	.word	0x20001b94
 80064ec:	20002008 	.word	0x20002008
 80064f0:	2000208c 	.word	0x2000208c

080064f4 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 80064f4:	4b38      	ldr	r3, [pc, #224]	; (80065d8 <xTaskResumeAll+0xe4>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	b943      	cbnz	r3, 800650c <xTaskResumeAll+0x18>
 80064fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fe:	f383 8811 	msr	BASEPRI, r3
 8006502:	f3bf 8f6f 	isb	sy
 8006506:	f3bf 8f4f 	dsb	sy
 800650a:	e7fe      	b.n	800650a <xTaskResumeAll+0x16>
{
 800650c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
 8006510:	f000 fd00 	bl	8006f14 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8006514:	4b30      	ldr	r3, [pc, #192]	; (80065d8 <xTaskResumeAll+0xe4>)
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	3a01      	subs	r2, #1
 800651a:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d149      	bne.n	80065b6 <xTaskResumeAll+0xc2>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006522:	4b2e      	ldr	r3, [pc, #184]	; (80065dc <xTaskResumeAll+0xe8>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d04b      	beq.n	80065c2 <xTaskResumeAll+0xce>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800652a:	4b2d      	ldr	r3, [pc, #180]	; (80065e0 <xTaskResumeAll+0xec>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d04b      	beq.n	80065ca <xTaskResumeAll+0xd6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006532:	4e2b      	ldr	r6, [pc, #172]	; (80065e0 <xTaskResumeAll+0xec>)
					prvAddTaskToReadyList( pxTCB );
 8006534:	4f2b      	ldr	r7, [pc, #172]	; (80065e4 <xTaskResumeAll+0xf0>)
 8006536:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80065e8 <xTaskResumeAll+0xf4>
 800653a:	e002      	b.n	8006542 <xTaskResumeAll+0x4e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800653c:	6833      	ldr	r3, [r6, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d041      	beq.n	80065c6 <xTaskResumeAll+0xd2>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006542:	68f3      	ldr	r3, [r6, #12]
 8006544:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006546:	f104 0018 	add.w	r0, r4, #24
 800654a:	f7ff f98f 	bl	800586c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800654e:	1d25      	adds	r5, r4, #4
 8006550:	4628      	mov	r0, r5
 8006552:	f7ff f98b 	bl	800586c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006556:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	4298      	cmp	r0, r3
 800655c:	bf88      	it	hi
 800655e:	6038      	strhi	r0, [r7, #0]
 8006560:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006564:	4629      	mov	r1, r5
 8006566:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 800656a:	f7ff f95b 	bl	8005824 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800656e:	4b1f      	ldr	r3, [pc, #124]	; (80065ec <xTaskResumeAll+0xf8>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006576:	429a      	cmp	r2, r3
 8006578:	d3e0      	bcc.n	800653c <xTaskResumeAll+0x48>
						xYieldPending = pdTRUE;
 800657a:	4b1d      	ldr	r3, [pc, #116]	; (80065f0 <xTaskResumeAll+0xfc>)
 800657c:	2201      	movs	r2, #1
 800657e:	601a      	str	r2, [r3, #0]
 8006580:	e7dc      	b.n	800653c <xTaskResumeAll+0x48>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006582:	3c01      	subs	r4, #1
 8006584:	d005      	beq.n	8006592 <xTaskResumeAll+0x9e>
							if( xTaskIncrementTick() != pdFALSE )
 8006586:	f7ff ff1b 	bl	80063c0 <xTaskIncrementTick>
 800658a:	2800      	cmp	r0, #0
 800658c:	d0f9      	beq.n	8006582 <xTaskResumeAll+0x8e>
								xYieldPending = pdTRUE;
 800658e:	6035      	str	r5, [r6, #0]
 8006590:	e7f7      	b.n	8006582 <xTaskResumeAll+0x8e>
						uxPendedTicks = 0;
 8006592:	4b18      	ldr	r3, [pc, #96]	; (80065f4 <xTaskResumeAll+0x100>)
 8006594:	2200      	movs	r2, #0
 8006596:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 8006598:	4b15      	ldr	r3, [pc, #84]	; (80065f0 <xTaskResumeAll+0xfc>)
 800659a:	681c      	ldr	r4, [r3, #0]
 800659c:	b164      	cbz	r4, 80065b8 <xTaskResumeAll+0xc4>
					taskYIELD_IF_USING_PREEMPTION();
 800659e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80065a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065a6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80065aa:	f3bf 8f4f 	dsb	sy
 80065ae:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80065b2:	2401      	movs	r4, #1
 80065b4:	e000      	b.n	80065b8 <xTaskResumeAll+0xc4>
BaseType_t xAlreadyYielded = pdFALSE;
 80065b6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80065b8:	f000 fcce 	bl	8006f58 <vPortExitCritical>
}
 80065bc:	4620      	mov	r0, r4
 80065be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 80065c2:	2400      	movs	r4, #0
 80065c4:	e7f8      	b.n	80065b8 <xTaskResumeAll+0xc4>
					prvResetNextTaskUnblockTime();
 80065c6:	f7ff fcaf 	bl	8005f28 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80065ca:	4b0a      	ldr	r3, [pc, #40]	; (80065f4 <xTaskResumeAll+0x100>)
 80065cc:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80065ce:	2c00      	cmp	r4, #0
 80065d0:	d0e2      	beq.n	8006598 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 80065d2:	4e07      	ldr	r6, [pc, #28]	; (80065f0 <xTaskResumeAll+0xfc>)
 80065d4:	2501      	movs	r5, #1
 80065d6:	e7d6      	b.n	8006586 <xTaskResumeAll+0x92>
 80065d8:	2000200c 	.word	0x2000200c
 80065dc:	20002000 	.word	0x20002000
 80065e0:	20002048 	.word	0x20002048
 80065e4:	20002014 	.word	0x20002014
 80065e8:	20001ba0 	.word	0x20001ba0
 80065ec:	20001b94 	.word	0x20001b94
 80065f0:	2000208c 	.word	0x2000208c
 80065f4:	20002008 	.word	0x20002008

080065f8 <vTaskDelay>:
	{
 80065f8:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80065fa:	b1a8      	cbz	r0, 8006628 <vTaskDelay+0x30>
 80065fc:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 80065fe:	4b10      	ldr	r3, [pc, #64]	; (8006640 <vTaskDelay+0x48>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	b143      	cbz	r3, 8006616 <vTaskDelay+0x1e>
 8006604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006608:	f383 8811 	msr	BASEPRI, r3
 800660c:	f3bf 8f6f 	isb	sy
 8006610:	f3bf 8f4f 	dsb	sy
 8006614:	e7fe      	b.n	8006614 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8006616:	f7ff fec5 	bl	80063a4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800661a:	2100      	movs	r1, #0
 800661c:	4620      	mov	r0, r4
 800661e:	f7ff fdc9 	bl	80061b4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8006622:	f7ff ff67 	bl	80064f4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8006626:	b948      	cbnz	r0, 800663c <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8006628:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800662c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006630:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006634:	f3bf 8f4f 	dsb	sy
 8006638:	f3bf 8f6f 	isb	sy
	}
 800663c:	bd10      	pop	{r4, pc}
 800663e:	bf00      	nop
 8006640:	2000200c 	.word	0x2000200c

08006644 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006644:	4b24      	ldr	r3, [pc, #144]	; (80066d8 <vTaskSwitchContext+0x94>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	b11b      	cbz	r3, 8006652 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800664a:	4b24      	ldr	r3, [pc, #144]	; (80066dc <vTaskSwitchContext+0x98>)
 800664c:	2201      	movs	r2, #1
 800664e:	601a      	str	r2, [r3, #0]
 8006650:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8006652:	4b22      	ldr	r3, [pc, #136]	; (80066dc <vTaskSwitchContext+0x98>)
 8006654:	2200      	movs	r2, #0
 8006656:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006658:	4b21      	ldr	r3, [pc, #132]	; (80066e0 <vTaskSwitchContext+0x9c>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006660:	0092      	lsls	r2, r2, #2
 8006662:	4920      	ldr	r1, [pc, #128]	; (80066e4 <vTaskSwitchContext+0xa0>)
 8006664:	588a      	ldr	r2, [r1, r2]
 8006666:	b98a      	cbnz	r2, 800668c <vTaskSwitchContext+0x48>
 8006668:	b13b      	cbz	r3, 800667a <vTaskSwitchContext+0x36>
 800666a:	3b01      	subs	r3, #1
 800666c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006670:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006674:	b952      	cbnz	r2, 800668c <vTaskSwitchContext+0x48>
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1f7      	bne.n	800666a <vTaskSwitchContext+0x26>
 800667a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667e:	f383 8811 	msr	BASEPRI, r3
 8006682:	f3bf 8f6f 	isb	sy
 8006686:	f3bf 8f4f 	dsb	sy
 800668a:	e7fe      	b.n	800668a <vTaskSwitchContext+0x46>
 800668c:	4a15      	ldr	r2, [pc, #84]	; (80066e4 <vTaskSwitchContext+0xa0>)
 800668e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006692:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8006696:	6848      	ldr	r0, [r1, #4]
 8006698:	6840      	ldr	r0, [r0, #4]
 800669a:	6048      	str	r0, [r1, #4]
 800669c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80066a0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80066a4:	3208      	adds	r2, #8
 80066a6:	4290      	cmp	r0, r2
 80066a8:	d00f      	beq.n	80066ca <vTaskSwitchContext+0x86>
 80066aa:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80066ae:	4a0d      	ldr	r2, [pc, #52]	; (80066e4 <vTaskSwitchContext+0xa0>)
 80066b0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80066b4:	6852      	ldr	r2, [r2, #4]
 80066b6:	68d1      	ldr	r1, [r2, #12]
 80066b8:	4a0b      	ldr	r2, [pc, #44]	; (80066e8 <vTaskSwitchContext+0xa4>)
 80066ba:	6011      	str	r1, [r2, #0]
 80066bc:	4908      	ldr	r1, [pc, #32]	; (80066e0 <vTaskSwitchContext+0x9c>)
 80066be:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80066c0:	6813      	ldr	r3, [r2, #0]
 80066c2:	3354      	adds	r3, #84	; 0x54
 80066c4:	4a09      	ldr	r2, [pc, #36]	; (80066ec <vTaskSwitchContext+0xa8>)
 80066c6:	6013      	str	r3, [r2, #0]
}
 80066c8:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80066ca:	6840      	ldr	r0, [r0, #4]
 80066cc:	4a05      	ldr	r2, [pc, #20]	; (80066e4 <vTaskSwitchContext+0xa0>)
 80066ce:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80066d2:	6050      	str	r0, [r2, #4]
 80066d4:	e7e9      	b.n	80066aa <vTaskSwitchContext+0x66>
 80066d6:	bf00      	nop
 80066d8:	2000200c 	.word	0x2000200c
 80066dc:	2000208c 	.word	0x2000208c
 80066e0:	20002014 	.word	0x20002014
 80066e4:	20001ba0 	.word	0x20001ba0
 80066e8:	20001b94 	.word	0x20001b94
 80066ec:	200000c0 	.word	0x200000c0

080066f0 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 80066f0:	b158      	cbz	r0, 800670a <vTaskPlaceOnEventList+0x1a>
{
 80066f2:	b510      	push	{r4, lr}
 80066f4:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80066f6:	4a09      	ldr	r2, [pc, #36]	; (800671c <vTaskPlaceOnEventList+0x2c>)
 80066f8:	6811      	ldr	r1, [r2, #0]
 80066fa:	3118      	adds	r1, #24
 80066fc:	f7ff f89d 	bl	800583a <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006700:	2101      	movs	r1, #1
 8006702:	4620      	mov	r0, r4
 8006704:	f7ff fd56 	bl	80061b4 <prvAddCurrentTaskToDelayedList>
}
 8006708:	bd10      	pop	{r4, pc}
 800670a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670e:	f383 8811 	msr	BASEPRI, r3
 8006712:	f3bf 8f6f 	isb	sy
 8006716:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 800671a:	e7fe      	b.n	800671a <vTaskPlaceOnEventList+0x2a>
 800671c:	20001b94 	.word	0x20001b94

08006720 <vTaskPlaceOnUnorderedEventList>:
	configASSERT( pxEventList );
 8006720:	b170      	cbz	r0, 8006740 <vTaskPlaceOnUnorderedEventList+0x20>
{
 8006722:	b510      	push	{r4, lr}
 8006724:	4614      	mov	r4, r2
 8006726:	4602      	mov	r2, r0
	configASSERT( uxSchedulerSuspended != 0 );
 8006728:	4b11      	ldr	r3, [pc, #68]	; (8006770 <vTaskPlaceOnUnorderedEventList+0x50>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	b98b      	cbnz	r3, 8006752 <vTaskPlaceOnUnorderedEventList+0x32>
 800672e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006732:	f383 8811 	msr	BASEPRI, r3
 8006736:	f3bf 8f6f 	isb	sy
 800673a:	f3bf 8f4f 	dsb	sy
 800673e:	e7fe      	b.n	800673e <vTaskPlaceOnUnorderedEventList+0x1e>
 8006740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006744:	f383 8811 	msr	BASEPRI, r3
 8006748:	f3bf 8f6f 	isb	sy
 800674c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8006750:	e7fe      	b.n	8006750 <vTaskPlaceOnUnorderedEventList+0x30>
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006752:	4b08      	ldr	r3, [pc, #32]	; (8006774 <vTaskPlaceOnUnorderedEventList+0x54>)
 8006754:	6818      	ldr	r0, [r3, #0]
 8006756:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800675a:	6181      	str	r1, [r0, #24]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800675c:	6819      	ldr	r1, [r3, #0]
 800675e:	3118      	adds	r1, #24
 8006760:	4610      	mov	r0, r2
 8006762:	f7ff f85f 	bl	8005824 <vListInsertEnd>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006766:	2101      	movs	r1, #1
 8006768:	4620      	mov	r0, r4
 800676a:	f7ff fd23 	bl	80061b4 <prvAddCurrentTaskToDelayedList>
}
 800676e:	bd10      	pop	{r4, pc}
 8006770:	2000200c 	.word	0x2000200c
 8006774:	20001b94 	.word	0x20001b94

08006778 <vTaskPlaceOnEventListRestricted>:
	{
 8006778:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800677a:	b178      	cbz	r0, 800679c <vTaskPlaceOnEventListRestricted+0x24>
 800677c:	460d      	mov	r5, r1
 800677e:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006780:	4a0b      	ldr	r2, [pc, #44]	; (80067b0 <vTaskPlaceOnEventListRestricted+0x38>)
 8006782:	6811      	ldr	r1, [r2, #0]
 8006784:	3118      	adds	r1, #24
 8006786:	f7ff f84d 	bl	8005824 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800678a:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800678c:	4621      	mov	r1, r4
 800678e:	bf0c      	ite	eq
 8006790:	4628      	moveq	r0, r5
 8006792:	f04f 30ff 	movne.w	r0, #4294967295
 8006796:	f7ff fd0d 	bl	80061b4 <prvAddCurrentTaskToDelayedList>
	}
 800679a:	bd38      	pop	{r3, r4, r5, pc}
 800679c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a0:	f383 8811 	msr	BASEPRI, r3
 80067a4:	f3bf 8f6f 	isb	sy
 80067a8:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 80067ac:	e7fe      	b.n	80067ac <vTaskPlaceOnEventListRestricted+0x34>
 80067ae:	bf00      	nop
 80067b0:	20001b94 	.word	0x20001b94

080067b4 <xTaskRemoveFromEventList>:
{
 80067b4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80067b6:	68c3      	ldr	r3, [r0, #12]
 80067b8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80067ba:	b32c      	cbz	r4, 8006808 <xTaskRemoveFromEventList+0x54>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80067bc:	f104 0518 	add.w	r5, r4, #24
 80067c0:	4628      	mov	r0, r5
 80067c2:	f7ff f853 	bl	800586c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067c6:	4b17      	ldr	r3, [pc, #92]	; (8006824 <xTaskRemoveFromEventList+0x70>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	bb33      	cbnz	r3, 800681a <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80067cc:	1d25      	adds	r5, r4, #4
 80067ce:	4628      	mov	r0, r5
 80067d0:	f7ff f84c 	bl	800586c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80067d4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80067d6:	4b14      	ldr	r3, [pc, #80]	; (8006828 <xTaskRemoveFromEventList+0x74>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4298      	cmp	r0, r3
 80067dc:	bf84      	itt	hi
 80067de:	4b12      	ldrhi	r3, [pc, #72]	; (8006828 <xTaskRemoveFromEventList+0x74>)
 80067e0:	6018      	strhi	r0, [r3, #0]
 80067e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80067e6:	4629      	mov	r1, r5
 80067e8:	4b10      	ldr	r3, [pc, #64]	; (800682c <xTaskRemoveFromEventList+0x78>)
 80067ea:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80067ee:	f7ff f819 	bl	8005824 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80067f2:	4b0f      	ldr	r3, [pc, #60]	; (8006830 <xTaskRemoveFromEventList+0x7c>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80067f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fa:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 80067fc:	bf83      	ittte	hi
 80067fe:	2001      	movhi	r0, #1
 8006800:	4b0c      	ldrhi	r3, [pc, #48]	; (8006834 <xTaskRemoveFromEventList+0x80>)
 8006802:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8006804:	2000      	movls	r0, #0
}
 8006806:	bd38      	pop	{r3, r4, r5, pc}
 8006808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680c:	f383 8811 	msr	BASEPRI, r3
 8006810:	f3bf 8f6f 	isb	sy
 8006814:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8006818:	e7fe      	b.n	8006818 <xTaskRemoveFromEventList+0x64>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800681a:	4629      	mov	r1, r5
 800681c:	4806      	ldr	r0, [pc, #24]	; (8006838 <xTaskRemoveFromEventList+0x84>)
 800681e:	f7ff f801 	bl	8005824 <vListInsertEnd>
 8006822:	e7e6      	b.n	80067f2 <xTaskRemoveFromEventList+0x3e>
 8006824:	2000200c 	.word	0x2000200c
 8006828:	20002014 	.word	0x20002014
 800682c:	20001ba0 	.word	0x20001ba0
 8006830:	20001b94 	.word	0x20001b94
 8006834:	2000208c 	.word	0x2000208c
 8006838:	20002048 	.word	0x20002048

0800683c <vTaskRemoveFromUnorderedEventList>:
{
 800683c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800683e:	4b1c      	ldr	r3, [pc, #112]	; (80068b0 <vTaskRemoveFromUnorderedEventList+0x74>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	b943      	cbnz	r3, 8006856 <vTaskRemoveFromUnorderedEventList+0x1a>
 8006844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006848:	f383 8811 	msr	BASEPRI, r3
 800684c:	f3bf 8f6f 	isb	sy
 8006850:	f3bf 8f4f 	dsb	sy
 8006854:	e7fe      	b.n	8006854 <vTaskRemoveFromUnorderedEventList+0x18>
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006856:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800685a:	6001      	str	r1, [r0, #0]
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 800685c:	68c4      	ldr	r4, [r0, #12]
	configASSERT( pxUnblockedTCB );
 800685e:	b1f4      	cbz	r4, 800689e <vTaskRemoveFromUnorderedEventList+0x62>
	( void ) uxListRemove( pxEventListItem );
 8006860:	f7ff f804 	bl	800586c <uxListRemove>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006864:	1d25      	adds	r5, r4, #4
 8006866:	4628      	mov	r0, r5
 8006868:	f7ff f800 	bl	800586c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800686c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800686e:	4b11      	ldr	r3, [pc, #68]	; (80068b4 <vTaskRemoveFromUnorderedEventList+0x78>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4298      	cmp	r0, r3
 8006874:	bf84      	itt	hi
 8006876:	4b0f      	ldrhi	r3, [pc, #60]	; (80068b4 <vTaskRemoveFromUnorderedEventList+0x78>)
 8006878:	6018      	strhi	r0, [r3, #0]
 800687a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800687e:	4629      	mov	r1, r5
 8006880:	4b0d      	ldr	r3, [pc, #52]	; (80068b8 <vTaskRemoveFromUnorderedEventList+0x7c>)
 8006882:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006886:	f7fe ffcd 	bl	8005824 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800688a:	4b0c      	ldr	r3, [pc, #48]	; (80068bc <vTaskRemoveFromUnorderedEventList+0x80>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006892:	429a      	cmp	r2, r3
 8006894:	d902      	bls.n	800689c <vTaskRemoveFromUnorderedEventList+0x60>
		xYieldPending = pdTRUE;
 8006896:	4b0a      	ldr	r3, [pc, #40]	; (80068c0 <vTaskRemoveFromUnorderedEventList+0x84>)
 8006898:	2201      	movs	r2, #1
 800689a:	601a      	str	r2, [r3, #0]
}
 800689c:	bd38      	pop	{r3, r4, r5, pc}
 800689e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a2:	f383 8811 	msr	BASEPRI, r3
 80068a6:	f3bf 8f6f 	isb	sy
 80068aa:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 80068ae:	e7fe      	b.n	80068ae <vTaskRemoveFromUnorderedEventList+0x72>
 80068b0:	2000200c 	.word	0x2000200c
 80068b4:	20002014 	.word	0x20002014
 80068b8:	20001ba0 	.word	0x20001ba0
 80068bc:	20001b94 	.word	0x20001b94
 80068c0:	2000208c 	.word	0x2000208c

080068c4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80068c4:	4b03      	ldr	r3, [pc, #12]	; (80068d4 <vTaskInternalSetTimeOutState+0x10>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80068ca:	4b03      	ldr	r3, [pc, #12]	; (80068d8 <vTaskInternalSetTimeOutState+0x14>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	6043      	str	r3, [r0, #4]
}
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	20002044 	.word	0x20002044
 80068d8:	20002088 	.word	0x20002088

080068dc <xTaskCheckForTimeOut>:
{
 80068dc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
 80068de:	b1d0      	cbz	r0, 8006916 <xTaskCheckForTimeOut+0x3a>
 80068e0:	460c      	mov	r4, r1
 80068e2:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 80068e4:	b301      	cbz	r1, 8006928 <xTaskCheckForTimeOut+0x4c>
	taskENTER_CRITICAL();
 80068e6:	f000 fb15 	bl	8006f14 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80068ea:	4b1b      	ldr	r3, [pc, #108]	; (8006958 <xTaskCheckForTimeOut+0x7c>)
 80068ec:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80068ee:	6823      	ldr	r3, [r4, #0]
 80068f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f4:	d029      	beq.n	800694a <xTaskCheckForTimeOut+0x6e>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80068f6:	6869      	ldr	r1, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80068f8:	4818      	ldr	r0, [pc, #96]	; (800695c <xTaskCheckForTimeOut+0x80>)
 80068fa:	6800      	ldr	r0, [r0, #0]
 80068fc:	f8d5 c000 	ldr.w	ip, [r5]
 8006900:	4584      	cmp	ip, r0
 8006902:	d001      	beq.n	8006908 <xTaskCheckForTimeOut+0x2c>
 8006904:	4291      	cmp	r1, r2
 8006906:	d925      	bls.n	8006954 <xTaskCheckForTimeOut+0x78>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006908:	1a50      	subs	r0, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800690a:	4283      	cmp	r3, r0
 800690c:	d815      	bhi.n	800693a <xTaskCheckForTimeOut+0x5e>
			*pxTicksToWait = 0;
 800690e:	2300      	movs	r3, #0
 8006910:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8006912:	2401      	movs	r4, #1
 8006914:	e01a      	b.n	800694c <xTaskCheckForTimeOut+0x70>
 8006916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691a:	f383 8811 	msr	BASEPRI, r3
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8006926:	e7fe      	b.n	8006926 <xTaskCheckForTimeOut+0x4a>
 8006928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692c:	f383 8811 	msr	BASEPRI, r3
 8006930:	f3bf 8f6f 	isb	sy
 8006934:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8006938:	e7fe      	b.n	8006938 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait -= xElapsedTime;
 800693a:	1a9b      	subs	r3, r3, r2
 800693c:	440b      	add	r3, r1
 800693e:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006940:	4628      	mov	r0, r5
 8006942:	f7ff ffbf 	bl	80068c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006946:	2400      	movs	r4, #0
 8006948:	e000      	b.n	800694c <xTaskCheckForTimeOut+0x70>
				xReturn = pdFALSE;
 800694a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800694c:	f000 fb04 	bl	8006f58 <vPortExitCritical>
}
 8006950:	4620      	mov	r0, r4
 8006952:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 8006954:	2401      	movs	r4, #1
 8006956:	e7f9      	b.n	800694c <xTaskCheckForTimeOut+0x70>
 8006958:	20002088 	.word	0x20002088
 800695c:	20002044 	.word	0x20002044

08006960 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8006960:	4b01      	ldr	r3, [pc, #4]	; (8006968 <vTaskMissedYield+0x8>)
 8006962:	2201      	movs	r2, #1
 8006964:	601a      	str	r2, [r3, #0]
}
 8006966:	4770      	bx	lr
 8006968:	2000208c 	.word	0x2000208c

0800696c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800696c:	4b05      	ldr	r3, [pc, #20]	; (8006984 <xTaskGetSchedulerState+0x18>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	b133      	cbz	r3, 8006980 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006972:	4b05      	ldr	r3, [pc, #20]	; (8006988 <xTaskGetSchedulerState+0x1c>)
 8006974:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 8006976:	2b00      	cmp	r3, #0
 8006978:	bf0c      	ite	eq
 800697a:	2002      	moveq	r0, #2
 800697c:	2000      	movne	r0, #0
 800697e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006980:	2001      	movs	r0, #1
	}
 8006982:	4770      	bx	lr
 8006984:	2000205c 	.word	0x2000205c
 8006988:	2000200c 	.word	0x2000200c

0800698c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800698c:	2800      	cmp	r0, #0
 800698e:	d03b      	beq.n	8006a08 <xTaskPriorityDisinherit+0x7c>
	{
 8006990:	b538      	push	{r3, r4, r5, lr}
 8006992:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8006994:	4b1e      	ldr	r3, [pc, #120]	; (8006a10 <xTaskPriorityDisinherit+0x84>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4283      	cmp	r3, r0
 800699a:	d008      	beq.n	80069ae <xTaskPriorityDisinherit+0x22>
 800699c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a0:	f383 8811 	msr	BASEPRI, r3
 80069a4:	f3bf 8f6f 	isb	sy
 80069a8:	f3bf 8f4f 	dsb	sy
 80069ac:	e7fe      	b.n	80069ac <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 80069ae:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80069b0:	b943      	cbnz	r3, 80069c4 <xTaskPriorityDisinherit+0x38>
 80069b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b6:	f383 8811 	msr	BASEPRI, r3
 80069ba:	f3bf 8f6f 	isb	sy
 80069be:	f3bf 8f4f 	dsb	sy
 80069c2:	e7fe      	b.n	80069c2 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 80069c4:	3b01      	subs	r3, #1
 80069c6:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80069c8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80069ca:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80069cc:	4291      	cmp	r1, r2
 80069ce:	d01d      	beq.n	8006a0c <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80069d0:	b10b      	cbz	r3, 80069d6 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 80069d2:	2000      	movs	r0, #0
	}
 80069d4:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069d6:	1d05      	adds	r5, r0, #4
 80069d8:	4628      	mov	r0, r5
 80069da:	f7fe ff47 	bl	800586c <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80069de:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80069e0:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069e2:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 80069e6:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80069e8:	4b0a      	ldr	r3, [pc, #40]	; (8006a14 <xTaskPriorityDisinherit+0x88>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4298      	cmp	r0, r3
 80069ee:	bf84      	itt	hi
 80069f0:	4b08      	ldrhi	r3, [pc, #32]	; (8006a14 <xTaskPriorityDisinherit+0x88>)
 80069f2:	6018      	strhi	r0, [r3, #0]
 80069f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80069f8:	4629      	mov	r1, r5
 80069fa:	4b07      	ldr	r3, [pc, #28]	; (8006a18 <xTaskPriorityDisinherit+0x8c>)
 80069fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006a00:	f7fe ff10 	bl	8005824 <vListInsertEnd>
					xReturn = pdTRUE;
 8006a04:	2001      	movs	r0, #1
 8006a06:	e7e5      	b.n	80069d4 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8006a08:	2000      	movs	r0, #0
	}
 8006a0a:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8006a0c:	2000      	movs	r0, #0
 8006a0e:	e7e1      	b.n	80069d4 <xTaskPriorityDisinherit+0x48>
 8006a10:	20001b94 	.word	0x20001b94
 8006a14:	20002014 	.word	0x20002014
 8006a18:	20001ba0 	.word	0x20001ba0

08006a1c <uxTaskResetEventItemValue>:
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8006a1c:	4b04      	ldr	r3, [pc, #16]	; (8006a30 <uxTaskResetEventItemValue+0x14>)
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	6990      	ldr	r0, [r2, #24]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a22:	6819      	ldr	r1, [r3, #0]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8006a28:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006a2c:	6193      	str	r3, [r2, #24]
}
 8006a2e:	4770      	bx	lr
 8006a30:	20001b94 	.word	0x20001b94

08006a34 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006a34:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006a36:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a38:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006a3a:	4291      	cmp	r1, r2
 8006a3c:	d80c      	bhi.n	8006a58 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a3e:	1ad2      	subs	r2, r2, r3
 8006a40:	6983      	ldr	r3, [r0, #24]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d301      	bcc.n	8006a4a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006a46:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8006a48:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006a4a:	1d01      	adds	r1, r0, #4
 8006a4c:	4b09      	ldr	r3, [pc, #36]	; (8006a74 <prvInsertTimerInActiveList+0x40>)
 8006a4e:	6818      	ldr	r0, [r3, #0]
 8006a50:	f7fe fef3 	bl	800583a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8006a54:	2000      	movs	r0, #0
 8006a56:	e7f7      	b.n	8006a48 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d201      	bcs.n	8006a60 <prvInsertTimerInActiveList+0x2c>
 8006a5c:	4299      	cmp	r1, r3
 8006a5e:	d206      	bcs.n	8006a6e <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a60:	1d01      	adds	r1, r0, #4
 8006a62:	4b05      	ldr	r3, [pc, #20]	; (8006a78 <prvInsertTimerInActiveList+0x44>)
 8006a64:	6818      	ldr	r0, [r3, #0]
 8006a66:	f7fe fee8 	bl	800583a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8006a6a:	2000      	movs	r0, #0
 8006a6c:	e7ec      	b.n	8006a48 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 8006a6e:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8006a70:	e7ea      	b.n	8006a48 <prvInsertTimerInActiveList+0x14>
 8006a72:	bf00      	nop
 8006a74:	20002094 	.word	0x20002094
 8006a78:	20002090 	.word	0x20002090

08006a7c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006a7c:	b530      	push	{r4, r5, lr}
 8006a7e:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006a80:	f000 fa48 	bl	8006f14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006a84:	4b11      	ldr	r3, [pc, #68]	; (8006acc <prvCheckForValidListAndQueue+0x50>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	b11b      	cbz	r3, 8006a92 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a8a:	f000 fa65 	bl	8006f58 <vPortExitCritical>
}
 8006a8e:	b003      	add	sp, #12
 8006a90:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 8006a92:	4d0f      	ldr	r5, [pc, #60]	; (8006ad0 <prvCheckForValidListAndQueue+0x54>)
 8006a94:	4628      	mov	r0, r5
 8006a96:	f7fe feb7 	bl	8005808 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006a9a:	4c0e      	ldr	r4, [pc, #56]	; (8006ad4 <prvCheckForValidListAndQueue+0x58>)
 8006a9c:	4620      	mov	r0, r4
 8006a9e:	f7fe feb3 	bl	8005808 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006aa2:	4b0d      	ldr	r3, [pc, #52]	; (8006ad8 <prvCheckForValidListAndQueue+0x5c>)
 8006aa4:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006aa6:	4b0d      	ldr	r3, [pc, #52]	; (8006adc <prvCheckForValidListAndQueue+0x60>)
 8006aa8:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006aaa:	2300      	movs	r3, #0
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	4b0c      	ldr	r3, [pc, #48]	; (8006ae0 <prvCheckForValidListAndQueue+0x64>)
 8006ab0:	4a0c      	ldr	r2, [pc, #48]	; (8006ae4 <prvCheckForValidListAndQueue+0x68>)
 8006ab2:	2110      	movs	r1, #16
 8006ab4:	200a      	movs	r0, #10
 8006ab6:	f7fe ffc0 	bl	8005a3a <xQueueGenericCreateStatic>
 8006aba:	4b04      	ldr	r3, [pc, #16]	; (8006acc <prvCheckForValidListAndQueue+0x50>)
 8006abc:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 8006abe:	2800      	cmp	r0, #0
 8006ac0:	d0e3      	beq.n	8006a8a <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006ac2:	4909      	ldr	r1, [pc, #36]	; (8006ae8 <prvCheckForValidListAndQueue+0x6c>)
 8006ac4:	f7ff f9f4 	bl	8005eb0 <vQueueAddToRegistry>
 8006ac8:	e7df      	b.n	8006a8a <prvCheckForValidListAndQueue+0xe>
 8006aca:	bf00      	nop
 8006acc:	200021b4 	.word	0x200021b4
 8006ad0:	20002138 	.word	0x20002138
 8006ad4:	2000214c 	.word	0x2000214c
 8006ad8:	20002090 	.word	0x20002090
 8006adc:	20002094 	.word	0x20002094
 8006ae0:	20002164 	.word	0x20002164
 8006ae4:	20002098 	.word	0x20002098
 8006ae8:	080079fc 	.word	0x080079fc

08006aec <xTimerCreateTimerTask>:
{
 8006aec:	b510      	push	{r4, lr}
 8006aee:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8006af0:	f7ff ffc4 	bl	8006a7c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8006af4:	4b12      	ldr	r3, [pc, #72]	; (8006b40 <xTimerCreateTimerTask+0x54>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	b1cb      	cbz	r3, 8006b2e <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006afa:	2400      	movs	r4, #0
 8006afc:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006afe:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006b00:	aa07      	add	r2, sp, #28
 8006b02:	a906      	add	r1, sp, #24
 8006b04:	a805      	add	r0, sp, #20
 8006b06:	f7fe fd5d 	bl	80055c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006b0a:	9b05      	ldr	r3, [sp, #20]
 8006b0c:	9302      	str	r3, [sp, #8]
 8006b0e:	9b06      	ldr	r3, [sp, #24]
 8006b10:	9301      	str	r3, [sp, #4]
 8006b12:	2302      	movs	r3, #2
 8006b14:	9300      	str	r3, [sp, #0]
 8006b16:	4623      	mov	r3, r4
 8006b18:	9a07      	ldr	r2, [sp, #28]
 8006b1a:	490a      	ldr	r1, [pc, #40]	; (8006b44 <xTimerCreateTimerTask+0x58>)
 8006b1c:	480a      	ldr	r0, [pc, #40]	; (8006b48 <xTimerCreateTimerTask+0x5c>)
 8006b1e:	f7ff fb87 	bl	8006230 <xTaskCreateStatic>
 8006b22:	4b0a      	ldr	r3, [pc, #40]	; (8006b4c <xTimerCreateTimerTask+0x60>)
 8006b24:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8006b26:	b110      	cbz	r0, 8006b2e <xTimerCreateTimerTask+0x42>
}
 8006b28:	2001      	movs	r0, #1
 8006b2a:	b008      	add	sp, #32
 8006b2c:	bd10      	pop	{r4, pc}
 8006b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b32:	f383 8811 	msr	BASEPRI, r3
 8006b36:	f3bf 8f6f 	isb	sy
 8006b3a:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8006b3e:	e7fe      	b.n	8006b3e <xTimerCreateTimerTask+0x52>
 8006b40:	200021b4 	.word	0x200021b4
 8006b44:	08007a04 	.word	0x08007a04
 8006b48:	08006c5d 	.word	0x08006c5d
 8006b4c:	200021b8 	.word	0x200021b8

08006b50 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8006b50:	b1d8      	cbz	r0, 8006b8a <xTimerGenericCommand+0x3a>
 8006b52:	469c      	mov	ip, r3
 8006b54:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 8006b56:	4815      	ldr	r0, [pc, #84]	; (8006bac <xTimerGenericCommand+0x5c>)
 8006b58:	6800      	ldr	r0, [r0, #0]
 8006b5a:	b328      	cbz	r0, 8006ba8 <xTimerGenericCommand+0x58>
{
 8006b5c:	b500      	push	{lr}
 8006b5e:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8006b60:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006b62:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006b64:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006b66:	2905      	cmp	r1, #5
 8006b68:	dc18      	bgt.n	8006b9c <xTimerGenericCommand+0x4c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006b6a:	f7ff feff 	bl	800696c <xTaskGetSchedulerState>
 8006b6e:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006b70:	f04f 0300 	mov.w	r3, #0
 8006b74:	bf0c      	ite	eq
 8006b76:	9a06      	ldreq	r2, [sp, #24]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006b78:	461a      	movne	r2, r3
 8006b7a:	4669      	mov	r1, sp
 8006b7c:	480b      	ldr	r0, [pc, #44]	; (8006bac <xTimerGenericCommand+0x5c>)
 8006b7e:	6800      	ldr	r0, [r0, #0]
 8006b80:	f7fe ffb1 	bl	8005ae6 <xQueueGenericSend>
}
 8006b84:	b005      	add	sp, #20
 8006b86:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8e:	f383 8811 	msr	BASEPRI, r3
 8006b92:	f3bf 8f6f 	isb	sy
 8006b96:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8006b9a:	e7fe      	b.n	8006b9a <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	4662      	mov	r2, ip
 8006ba0:	4669      	mov	r1, sp
 8006ba2:	f7ff f86c 	bl	8005c7e <xQueueGenericSendFromISR>
 8006ba6:	e7ed      	b.n	8006b84 <xTimerGenericCommand+0x34>
BaseType_t xReturn = pdFAIL;
 8006ba8:	2000      	movs	r0, #0
}
 8006baa:	4770      	bx	lr
 8006bac:	200021b4 	.word	0x200021b4

08006bb0 <prvSampleTimeNow>:
{
 8006bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bb4:	b082      	sub	sp, #8
 8006bb6:	4682      	mov	sl, r0
	xTimeNow = xTaskGetTickCount();
 8006bb8:	f7ff fbfc 	bl	80063b4 <xTaskGetTickCount>
 8006bbc:	4606      	mov	r6, r0
	if( xTimeNow < xLastTime )
 8006bbe:	4b24      	ldr	r3, [pc, #144]	; (8006c50 <prvSampleTimeNow+0xa0>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4283      	cmp	r3, r0
 8006bc4:	d808      	bhi.n	8006bd8 <prvSampleTimeNow+0x28>
		*pxTimerListsWereSwitched = pdFALSE;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	f8ca 3000 	str.w	r3, [sl]
	xLastTime = xTimeNow;
 8006bcc:	4b20      	ldr	r3, [pc, #128]	; (8006c50 <prvSampleTimeNow+0xa0>)
 8006bce:	601e      	str	r6, [r3, #0]
}
 8006bd0:	4630      	mov	r0, r6
 8006bd2:	b002      	add	sp, #8
 8006bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006bd8:	4d1e      	ldr	r5, [pc, #120]	; (8006c54 <prvSampleTimeNow+0xa4>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006bda:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006bde:	682b      	ldr	r3, [r5, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	b35a      	cbz	r2, 8006c3c <prvSampleTimeNow+0x8c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	681f      	ldr	r7, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006be8:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bea:	f104 0904 	add.w	r9, r4, #4
 8006bee:	4648      	mov	r0, r9
 8006bf0:	f7fe fe3c 	bl	800586c <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006bf4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006bfa:	69e3      	ldr	r3, [r4, #28]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d1ee      	bne.n	8006bde <prvSampleTimeNow+0x2e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006c00:	69a3      	ldr	r3, [r4, #24]
 8006c02:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 8006c04:	429f      	cmp	r7, r3
 8006c06:	d206      	bcs.n	8006c16 <prvSampleTimeNow+0x66>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006c08:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c0a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c0c:	4649      	mov	r1, r9
 8006c0e:	6828      	ldr	r0, [r5, #0]
 8006c10:	f7fe fe13 	bl	800583a <vListInsert>
 8006c14:	e7e3      	b.n	8006bde <prvSampleTimeNow+0x2e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c16:	f8cd 8000 	str.w	r8, [sp]
 8006c1a:	4643      	mov	r3, r8
 8006c1c:	463a      	mov	r2, r7
 8006c1e:	4641      	mov	r1, r8
 8006c20:	4620      	mov	r0, r4
 8006c22:	f7ff ff95 	bl	8006b50 <xTimerGenericCommand>
				configASSERT( xResult );
 8006c26:	2800      	cmp	r0, #0
 8006c28:	d1d9      	bne.n	8006bde <prvSampleTimeNow+0x2e>
 8006c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2e:	f383 8811 	msr	BASEPRI, r3
 8006c32:	f3bf 8f6f 	isb	sy
 8006c36:	f3bf 8f4f 	dsb	sy
 8006c3a:	e7fe      	b.n	8006c3a <prvSampleTimeNow+0x8a>
	pxCurrentTimerList = pxOverflowTimerList;
 8006c3c:	4a06      	ldr	r2, [pc, #24]	; (8006c58 <prvSampleTimeNow+0xa8>)
 8006c3e:	6810      	ldr	r0, [r2, #0]
 8006c40:	4904      	ldr	r1, [pc, #16]	; (8006c54 <prvSampleTimeNow+0xa4>)
 8006c42:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8006c44:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8006c46:	2301      	movs	r3, #1
 8006c48:	f8ca 3000 	str.w	r3, [sl]
 8006c4c:	e7be      	b.n	8006bcc <prvSampleTimeNow+0x1c>
 8006c4e:	bf00      	nop
 8006c50:	20002160 	.word	0x20002160
 8006c54:	20002090 	.word	0x20002090
 8006c58:	20002094 	.word	0x20002094

08006c5c <prvTimerTask>:
{
 8006c5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c60:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006c62:	4e74      	ldr	r6, [pc, #464]	; (8006e34 <prvTimerTask+0x1d8>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006c64:	4d74      	ldr	r5, [pc, #464]	; (8006e38 <prvTimerTask+0x1dc>)
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006c66:	4f75      	ldr	r7, [pc, #468]	; (8006e3c <prvTimerTask+0x1e0>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006c68:	6833      	ldr	r3, [r6, #0]
 8006c6a:	f8d3 8000 	ldr.w	r8, [r3]
	if( *pxListWasEmpty == pdFALSE )
 8006c6e:	f1b8 0f00 	cmp.w	r8, #0
 8006c72:	d00f      	beq.n	8006c94 <prvTimerTask+0x38>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 8006c7a:	f7ff fb93 	bl	80063a4 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c7e:	a804      	add	r0, sp, #16
 8006c80:	f7ff ff96 	bl	8006bb0 <prvSampleTimeNow>
 8006c84:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8006c86:	9b04      	ldr	r3, [sp, #16]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d154      	bne.n	8006d36 <prvTimerTask+0xda>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006c8c:	4580      	cmp	r8, r0
 8006c8e:	d923      	bls.n	8006cd8 <prvTimerTask+0x7c>
 8006c90:	2200      	movs	r2, #0
 8006c92:	e00d      	b.n	8006cb0 <prvTimerTask+0x54>
	vTaskSuspendAll();
 8006c94:	f7ff fb86 	bl	80063a4 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c98:	a804      	add	r0, sp, #16
 8006c9a:	f7ff ff89 	bl	8006bb0 <prvSampleTimeNow>
 8006c9e:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8006ca0:	9b04      	ldr	r3, [sp, #16]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d147      	bne.n	8006d36 <prvTimerTask+0xda>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	fab2 f282 	clz	r2, r2
 8006cae:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006cb0:	eba8 0104 	sub.w	r1, r8, r4
 8006cb4:	6828      	ldr	r0, [r5, #0]
 8006cb6:	f7ff f90f 	bl	8005ed8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006cba:	f7ff fc1b 	bl	80064f4 <xTaskResumeAll>
 8006cbe:	2800      	cmp	r0, #0
 8006cc0:	d13b      	bne.n	8006d3a <prvTimerTask+0xde>
					portYIELD_WITHIN_API();
 8006cc2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cca:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006cce:	f3bf 8f4f 	dsb	sy
 8006cd2:	f3bf 8f6f 	isb	sy
 8006cd6:	e030      	b.n	8006d3a <prvTimerTask+0xde>
				( void ) xTaskResumeAll();
 8006cd8:	f7ff fc0c 	bl	80064f4 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006cdc:	6833      	ldr	r3, [r6, #0]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	f8d3 900c 	ldr.w	r9, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ce4:	f109 0004 	add.w	r0, r9, #4
 8006ce8:	f7fe fdc0 	bl	800586c <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006cec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d004      	beq.n	8006cfe <prvTimerTask+0xa2>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006cf4:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8006cf8:	4648      	mov	r0, r9
 8006cfa:	4798      	blx	r3
}
 8006cfc:	e01d      	b.n	8006d3a <prvTimerTask+0xde>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006cfe:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8006d02:	4643      	mov	r3, r8
 8006d04:	4622      	mov	r2, r4
 8006d06:	4441      	add	r1, r8
 8006d08:	4648      	mov	r0, r9
 8006d0a:	f7ff fe93 	bl	8006a34 <prvInsertTimerInActiveList>
 8006d0e:	2800      	cmp	r0, #0
 8006d10:	d0f0      	beq.n	8006cf4 <prvTimerTask+0x98>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006d12:	2100      	movs	r1, #0
 8006d14:	9100      	str	r1, [sp, #0]
 8006d16:	460b      	mov	r3, r1
 8006d18:	4642      	mov	r2, r8
 8006d1a:	4648      	mov	r0, r9
 8006d1c:	f7ff ff18 	bl	8006b50 <xTimerGenericCommand>
			configASSERT( xResult );
 8006d20:	2800      	cmp	r0, #0
 8006d22:	d1e7      	bne.n	8006cf4 <prvTimerTask+0x98>
 8006d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d28:	f383 8811 	msr	BASEPRI, r3
 8006d2c:	f3bf 8f6f 	isb	sy
 8006d30:	f3bf 8f4f 	dsb	sy
 8006d34:	e7fe      	b.n	8006d34 <prvTimerTask+0xd8>
			( void ) xTaskResumeAll();
 8006d36:	f7ff fbdd 	bl	80064f4 <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d3a:	2400      	movs	r4, #0
}
 8006d3c:	e006      	b.n	8006d4c <prvTimerTask+0xf0>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006d3e:	9907      	ldr	r1, [sp, #28]
 8006d40:	9806      	ldr	r0, [sp, #24]
 8006d42:	9b05      	ldr	r3, [sp, #20]
 8006d44:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006d46:	9b04      	ldr	r3, [sp, #16]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	da09      	bge.n	8006d60 <prvTimerTask+0x104>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d4c:	4622      	mov	r2, r4
 8006d4e:	a904      	add	r1, sp, #16
 8006d50:	6828      	ldr	r0, [r5, #0]
 8006d52:	f7fe fffa 	bl	8005d4a <xQueueReceive>
 8006d56:	2800      	cmp	r0, #0
 8006d58:	d086      	beq.n	8006c68 <prvTimerTask+0xc>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006d5a:	9b04      	ldr	r3, [sp, #16]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	dbee      	blt.n	8006d3e <prvTimerTask+0xe2>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006d60:	f8dd 8018 	ldr.w	r8, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006d64:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8006d68:	b11b      	cbz	r3, 8006d72 <prvTimerTask+0x116>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d6a:	f108 0004 	add.w	r0, r8, #4
 8006d6e:	f7fe fd7d 	bl	800586c <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d72:	a803      	add	r0, sp, #12
 8006d74:	f7ff ff1c 	bl	8006bb0 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8006d78:	9b04      	ldr	r3, [sp, #16]
 8006d7a:	2b09      	cmp	r3, #9
 8006d7c:	d8e6      	bhi.n	8006d4c <prvTimerTask+0xf0>
 8006d7e:	a201      	add	r2, pc, #4	; (adr r2, 8006d84 <prvTimerTask+0x128>)
 8006d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d84:	08006dad 	.word	0x08006dad
 8006d88:	08006dad 	.word	0x08006dad
 8006d8c:	08006dad 	.word	0x08006dad
 8006d90:	08006d4d 	.word	0x08006d4d
 8006d94:	08006dfb 	.word	0x08006dfb
 8006d98:	08006e23 	.word	0x08006e23
 8006d9c:	08006dad 	.word	0x08006dad
 8006da0:	08006dad 	.word	0x08006dad
 8006da4:	08006d4d 	.word	0x08006d4d
 8006da8:	08006dfb 	.word	0x08006dfb
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006dac:	9b05      	ldr	r3, [sp, #20]
 8006dae:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8006db2:	4602      	mov	r2, r0
 8006db4:	4419      	add	r1, r3
 8006db6:	4640      	mov	r0, r8
 8006db8:	f7ff fe3c 	bl	8006a34 <prvInsertTimerInActiveList>
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	d0c5      	beq.n	8006d4c <prvTimerTask+0xf0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006dc0:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8006dc4:	4640      	mov	r0, r8
 8006dc6:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006dc8:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d1bd      	bne.n	8006d4c <prvTimerTask+0xf0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006dd0:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8006dd4:	9400      	str	r4, [sp, #0]
 8006dd6:	4623      	mov	r3, r4
 8006dd8:	9905      	ldr	r1, [sp, #20]
 8006dda:	440a      	add	r2, r1
 8006ddc:	4621      	mov	r1, r4
 8006dde:	4640      	mov	r0, r8
 8006de0:	f7ff feb6 	bl	8006b50 <xTimerGenericCommand>
							configASSERT( xResult );
 8006de4:	2800      	cmp	r0, #0
 8006de6:	d1b1      	bne.n	8006d4c <prvTimerTask+0xf0>
 8006de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dec:	f383 8811 	msr	BASEPRI, r3
 8006df0:	f3bf 8f6f 	isb	sy
 8006df4:	f3bf 8f4f 	dsb	sy
 8006df8:	e7fe      	b.n	8006df8 <prvTimerTask+0x19c>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006dfa:	9905      	ldr	r1, [sp, #20]
 8006dfc:	f8c8 1018 	str.w	r1, [r8, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006e00:	b131      	cbz	r1, 8006e10 <prvTimerTask+0x1b4>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006e02:	4603      	mov	r3, r0
 8006e04:	4602      	mov	r2, r0
 8006e06:	4401      	add	r1, r0
 8006e08:	4640      	mov	r0, r8
 8006e0a:	f7ff fe13 	bl	8006a34 <prvInsertTimerInActiveList>
					break;
 8006e0e:	e79d      	b.n	8006d4c <prvTimerTask+0xf0>
 8006e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e14:	f383 8811 	msr	BASEPRI, r3
 8006e18:	f3bf 8f6f 	isb	sy
 8006e1c:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006e20:	e7fe      	b.n	8006e20 <prvTimerTask+0x1c4>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006e22:	f898 302c 	ldrb.w	r3, [r8, #44]	; 0x2c
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d190      	bne.n	8006d4c <prvTimerTask+0xf0>
							vPortFree( pxTimer );
 8006e2a:	4640      	mov	r0, r8
 8006e2c:	f000 fa52 	bl	80072d4 <vPortFree>
 8006e30:	e78c      	b.n	8006d4c <prvTimerTask+0xf0>
 8006e32:	bf00      	nop
 8006e34:	20002090 	.word	0x20002090
 8006e38:	200021b4 	.word	0x200021b4
 8006e3c:	20002094 	.word	0x20002094

08006e40 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006e40:	b510      	push	{r4, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	4614      	mov	r4, r2
 8006e46:	461a      	mov	r2, r3
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8006e48:	f06f 0301 	mvn.w	r3, #1
 8006e4c:	9300      	str	r3, [sp, #0]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8006e4e:	9001      	str	r0, [sp, #4]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8006e50:	9102      	str	r1, [sp, #8]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8006e52:	9403      	str	r4, [sp, #12]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006e54:	2300      	movs	r3, #0
 8006e56:	4669      	mov	r1, sp
 8006e58:	4802      	ldr	r0, [pc, #8]	; (8006e64 <xTimerPendFunctionCallFromISR+0x24>)
 8006e5a:	6800      	ldr	r0, [r0, #0]
 8006e5c:	f7fe ff0f 	bl	8005c7e <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
 8006e60:	b004      	add	sp, #16
 8006e62:	bd10      	pop	{r4, pc}
 8006e64:	200021b4 	.word	0x200021b4

08006e68 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006e68:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006e6e:	4b0d      	ldr	r3, [pc, #52]	; (8006ea4 <prvTaskExitError+0x3c>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e76:	d008      	beq.n	8006e8a <prvTaskExitError+0x22>
 8006e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7c:	f383 8811 	msr	BASEPRI, r3
 8006e80:	f3bf 8f6f 	isb	sy
 8006e84:	f3bf 8f4f 	dsb	sy
 8006e88:	e7fe      	b.n	8006e88 <prvTaskExitError+0x20>
 8006e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8e:	f383 8811 	msr	BASEPRI, r3
 8006e92:	f3bf 8f6f 	isb	sy
 8006e96:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006e9a:	9b01      	ldr	r3, [sp, #4]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d0fc      	beq.n	8006e9a <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006ea0:	b002      	add	sp, #8
 8006ea2:	4770      	bx	lr
 8006ea4:	200000bc 	.word	0x200000bc

08006ea8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006ea8:	4806      	ldr	r0, [pc, #24]	; (8006ec4 <prvPortStartFirstTask+0x1c>)
 8006eaa:	6800      	ldr	r0, [r0, #0]
 8006eac:	6800      	ldr	r0, [r0, #0]
 8006eae:	f380 8808 	msr	MSP, r0
 8006eb2:	b662      	cpsie	i
 8006eb4:	b661      	cpsie	f
 8006eb6:	f3bf 8f4f 	dsb	sy
 8006eba:	f3bf 8f6f 	isb	sy
 8006ebe:	df00      	svc	0
 8006ec0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006ec2:	0000      	.short	0x0000
 8006ec4:	e000ed08 	.word	0xe000ed08

08006ec8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006ec8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ecc:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ed0:	f021 0101 	bic.w	r1, r1, #1
 8006ed4:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ed8:	4b03      	ldr	r3, [pc, #12]	; (8006ee8 <pxPortInitialiseStack+0x20>)
 8006eda:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ede:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8006ee2:	3840      	subs	r0, #64	; 0x40
 8006ee4:	4770      	bx	lr
 8006ee6:	bf00      	nop
 8006ee8:	08006e69 	.word	0x08006e69
 8006eec:	00000000 	.word	0x00000000

08006ef0 <SVC_Handler>:
	__asm volatile (
 8006ef0:	4b07      	ldr	r3, [pc, #28]	; (8006f10 <pxCurrentTCBConst2>)
 8006ef2:	6819      	ldr	r1, [r3, #0]
 8006ef4:	6808      	ldr	r0, [r1, #0]
 8006ef6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006efa:	f380 8809 	msr	PSP, r0
 8006efe:	f3bf 8f6f 	isb	sy
 8006f02:	f04f 0000 	mov.w	r0, #0
 8006f06:	f380 8811 	msr	BASEPRI, r0
 8006f0a:	f04e 0e0d 	orr.w	lr, lr, #13
 8006f0e:	4770      	bx	lr

08006f10 <pxCurrentTCBConst2>:
 8006f10:	20001b94 	.word	0x20001b94

08006f14 <vPortEnterCritical>:
 8006f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f18:	f383 8811 	msr	BASEPRI, r3
 8006f1c:	f3bf 8f6f 	isb	sy
 8006f20:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006f24:	4a0b      	ldr	r2, [pc, #44]	; (8006f54 <vPortEnterCritical+0x40>)
 8006f26:	6813      	ldr	r3, [r2, #0]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d000      	beq.n	8006f32 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8006f30:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006f32:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006f36:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8006f3a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006f3e:	d0f7      	beq.n	8006f30 <vPortEnterCritical+0x1c>
 8006f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f44:	f383 8811 	msr	BASEPRI, r3
 8006f48:	f3bf 8f6f 	isb	sy
 8006f4c:	f3bf 8f4f 	dsb	sy
 8006f50:	e7fe      	b.n	8006f50 <vPortEnterCritical+0x3c>
 8006f52:	bf00      	nop
 8006f54:	200000bc 	.word	0x200000bc

08006f58 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8006f58:	4b09      	ldr	r3, [pc, #36]	; (8006f80 <vPortExitCritical+0x28>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	b943      	cbnz	r3, 8006f70 <vPortExitCritical+0x18>
 8006f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f62:	f383 8811 	msr	BASEPRI, r3
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	e7fe      	b.n	8006f6e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8006f70:	3b01      	subs	r3, #1
 8006f72:	4a03      	ldr	r2, [pc, #12]	; (8006f80 <vPortExitCritical+0x28>)
 8006f74:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006f76:	b90b      	cbnz	r3, 8006f7c <vPortExitCritical+0x24>
	__asm volatile
 8006f78:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	200000bc 	.word	0x200000bc
	...

08006f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006f90:	f3ef 8009 	mrs	r0, PSP
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	4b0d      	ldr	r3, [pc, #52]	; (8006fd0 <pxCurrentTCBConst>)
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006fa0:	6010      	str	r0, [r2, #0]
 8006fa2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006fa6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006faa:	f380 8811 	msr	BASEPRI, r0
 8006fae:	f7ff fb49 	bl	8006644 <vTaskSwitchContext>
 8006fb2:	f04f 0000 	mov.w	r0, #0
 8006fb6:	f380 8811 	msr	BASEPRI, r0
 8006fba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006fbe:	6819      	ldr	r1, [r3, #0]
 8006fc0:	6808      	ldr	r0, [r1, #0]
 8006fc2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006fc6:	f380 8809 	msr	PSP, r0
 8006fca:	f3bf 8f6f 	isb	sy
 8006fce:	4770      	bx	lr

08006fd0 <pxCurrentTCBConst>:
 8006fd0:	20001b94 	.word	0x20001b94

08006fd4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006fd4:	b508      	push	{r3, lr}
	__asm volatile
 8006fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fda:	f383 8811 	msr	BASEPRI, r3
 8006fde:	f3bf 8f6f 	isb	sy
 8006fe2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006fe6:	f7ff f9eb 	bl	80063c0 <xTaskIncrementTick>
 8006fea:	b128      	cbz	r0, 8006ff8 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006fec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006ff0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ff4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ffe:	bd08      	pop	{r3, pc}

08007000 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007000:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8007004:	2300      	movs	r3, #0
 8007006:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007008:	6193      	str	r3, [r2, #24]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800700a:	4b05      	ldr	r3, [pc, #20]	; (8007020 <vPortSetupTimerInterrupt+0x20>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4905      	ldr	r1, [pc, #20]	; (8007024 <vPortSetupTimerInterrupt+0x24>)
 8007010:	fba1 1303 	umull	r1, r3, r1, r3
 8007014:	099b      	lsrs	r3, r3, #6
 8007016:	3b01      	subs	r3, #1
 8007018:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800701a:	2307      	movs	r3, #7
 800701c:	6113      	str	r3, [r2, #16]
}
 800701e:	4770      	bx	lr
 8007020:	20000024 	.word	0x20000024
 8007024:	10624dd3 	.word	0x10624dd3

08007028 <xPortStartScheduler>:
{
 8007028:	b510      	push	{r4, lr}
 800702a:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800702c:	4b2b      	ldr	r3, [pc, #172]	; (80070dc <xPortStartScheduler+0xb4>)
 800702e:	781a      	ldrb	r2, [r3, #0]
 8007030:	b2d2      	uxtb	r2, r2
 8007032:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007034:	22ff      	movs	r2, #255	; 0xff
 8007036:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	b2db      	uxtb	r3, r3
 800703c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007040:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007044:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007048:	4a25      	ldr	r2, [pc, #148]	; (80070e0 <xPortStartScheduler+0xb8>)
 800704a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800704c:	4b25      	ldr	r3, [pc, #148]	; (80070e4 <xPortStartScheduler+0xbc>)
 800704e:	2207      	movs	r2, #7
 8007050:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007052:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007056:	f013 0f80 	tst.w	r3, #128	; 0x80
 800705a:	d011      	beq.n	8007080 <xPortStartScheduler+0x58>
 800705c:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800705e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007062:	005b      	lsls	r3, r3, #1
 8007064:	b2db      	uxtb	r3, r3
 8007066:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800706a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800706e:	4611      	mov	r1, r2
 8007070:	3a01      	subs	r2, #1
 8007072:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007076:	d1f2      	bne.n	800705e <xPortStartScheduler+0x36>
 8007078:	4b1a      	ldr	r3, [pc, #104]	; (80070e4 <xPortStartScheduler+0xbc>)
 800707a:	6019      	str	r1, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800707c:	2903      	cmp	r1, #3
 800707e:	d008      	beq.n	8007092 <xPortStartScheduler+0x6a>
	__asm volatile
 8007080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007084:	f383 8811 	msr	BASEPRI, r3
 8007088:	f3bf 8f6f 	isb	sy
 800708c:	f3bf 8f4f 	dsb	sy
 8007090:	e7fe      	b.n	8007090 <xPortStartScheduler+0x68>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007092:	4b14      	ldr	r3, [pc, #80]	; (80070e4 <xPortStartScheduler+0xbc>)
 8007094:	f44f 7240 	mov.w	r2, #768	; 0x300
 8007098:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800709a:	9b01      	ldr	r3, [sp, #4]
 800709c:	b2db      	uxtb	r3, r3
 800709e:	4a0f      	ldr	r2, [pc, #60]	; (80070dc <xPortStartScheduler+0xb4>)
 80070a0:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80070a2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80070a6:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 80070aa:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80070ae:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80070b2:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 80070b6:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80070ba:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 80070be:	f7ff ff9f 	bl	8007000 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80070c2:	2400      	movs	r4, #0
 80070c4:	4b08      	ldr	r3, [pc, #32]	; (80070e8 <xPortStartScheduler+0xc0>)
 80070c6:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 80070c8:	f7ff feee 	bl	8006ea8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80070cc:	f7ff faba 	bl	8006644 <vTaskSwitchContext>
	prvTaskExitError();
 80070d0:	f7ff feca 	bl	8006e68 <prvTaskExitError>
}
 80070d4:	4620      	mov	r0, r4
 80070d6:	b002      	add	sp, #8
 80070d8:	bd10      	pop	{r4, pc}
 80070da:	bf00      	nop
 80070dc:	e000e400 	.word	0xe000e400
 80070e0:	200021bc 	.word	0x200021bc
 80070e4:	200021c0 	.word	0x200021c0
 80070e8:	200000bc 	.word	0x200000bc

080070ec <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80070ec:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80070f0:	2b0f      	cmp	r3, #15
 80070f2:	d90f      	bls.n	8007114 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80070f4:	4a11      	ldr	r2, [pc, #68]	; (800713c <vPortValidateInterruptPriority+0x50>)
 80070f6:	5c9b      	ldrb	r3, [r3, r2]
 80070f8:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80070fa:	4a11      	ldr	r2, [pc, #68]	; (8007140 <vPortValidateInterruptPriority+0x54>)
 80070fc:	7812      	ldrb	r2, [r2, #0]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d908      	bls.n	8007114 <vPortValidateInterruptPriority+0x28>
 8007102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007106:	f383 8811 	msr	BASEPRI, r3
 800710a:	f3bf 8f6f 	isb	sy
 800710e:	f3bf 8f4f 	dsb	sy
 8007112:	e7fe      	b.n	8007112 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007114:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007118:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800711c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007120:	4a08      	ldr	r2, [pc, #32]	; (8007144 <vPortValidateInterruptPriority+0x58>)
 8007122:	6812      	ldr	r2, [r2, #0]
 8007124:	4293      	cmp	r3, r2
 8007126:	d908      	bls.n	800713a <vPortValidateInterruptPriority+0x4e>
 8007128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712c:	f383 8811 	msr	BASEPRI, r3
 8007130:	f3bf 8f6f 	isb	sy
 8007134:	f3bf 8f4f 	dsb	sy
 8007138:	e7fe      	b.n	8007138 <vPortValidateInterruptPriority+0x4c>
	}
 800713a:	4770      	bx	lr
 800713c:	e000e3f0 	.word	0xe000e3f0
 8007140:	200021bc 	.word	0x200021bc
 8007144:	200021c0 	.word	0x200021c0

08007148 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007148:	4b15      	ldr	r3, [pc, #84]	; (80071a0 <prvInsertBlockIntoFreeList+0x58>)
 800714a:	461a      	mov	r2, r3
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4283      	cmp	r3, r0
 8007150:	d3fb      	bcc.n	800714a <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007152:	6851      	ldr	r1, [r2, #4]
 8007154:	eb02 0c01 	add.w	ip, r2, r1
 8007158:	4560      	cmp	r0, ip
 800715a:	d009      	beq.n	8007170 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800715c:	6841      	ldr	r1, [r0, #4]
 800715e:	eb00 0c01 	add.w	ip, r0, r1
 8007162:	4563      	cmp	r3, ip
 8007164:	d009      	beq.n	800717a <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007166:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007168:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800716a:	bf18      	it	ne
 800716c:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 800716e:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007170:	6840      	ldr	r0, [r0, #4]
 8007172:	4401      	add	r1, r0
 8007174:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8007176:	4610      	mov	r0, r2
 8007178:	e7f0      	b.n	800715c <prvInsertBlockIntoFreeList+0x14>
{
 800717a:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800717c:	4c09      	ldr	r4, [pc, #36]	; (80071a4 <prvInsertBlockIntoFreeList+0x5c>)
 800717e:	6824      	ldr	r4, [r4, #0]
 8007180:	42a3      	cmp	r3, r4
 8007182:	d00a      	beq.n	800719a <prvInsertBlockIntoFreeList+0x52>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	4419      	add	r1, r3
 8007188:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800718a:	6813      	ldr	r3, [r2, #0]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8007190:	4290      	cmp	r0, r2
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007192:	bf18      	it	ne
 8007194:	6010      	strne	r0, [r2, #0]
	}
}
 8007196:	bc10      	pop	{r4}
 8007198:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800719a:	6004      	str	r4, [r0, #0]
 800719c:	e7f8      	b.n	8007190 <prvInsertBlockIntoFreeList+0x48>
 800719e:	bf00      	nop
 80071a0:	20002dd4 	.word	0x20002dd4
 80071a4:	200021c4 	.word	0x200021c4

080071a8 <pvPortMalloc>:
{
 80071a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071aa:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80071ac:	f7ff f8fa 	bl	80063a4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80071b0:	4b42      	ldr	r3, [pc, #264]	; (80072bc <pvPortMalloc+0x114>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	b1b3      	cbz	r3, 80071e4 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80071b6:	4b42      	ldr	r3, [pc, #264]	; (80072c0 <pvPortMalloc+0x118>)
 80071b8:	681d      	ldr	r5, [r3, #0]
 80071ba:	4225      	tst	r5, r4
 80071bc:	d179      	bne.n	80072b2 <pvPortMalloc+0x10a>
			if( xWantedSize > 0 )
 80071be:	2c00      	cmp	r4, #0
 80071c0:	d077      	beq.n	80072b2 <pvPortMalloc+0x10a>
				xWantedSize += xHeapStructSize;
 80071c2:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80071c6:	f014 0f07 	tst.w	r4, #7
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80071ca:	bf1c      	itt	ne
 80071cc:	f022 0207 	bicne.w	r2, r2, #7
 80071d0:	3208      	addne	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80071d2:	2a00      	cmp	r2, #0
 80071d4:	d06d      	beq.n	80072b2 <pvPortMalloc+0x10a>
 80071d6:	4b3b      	ldr	r3, [pc, #236]	; (80072c4 <pvPortMalloc+0x11c>)
 80071d8:	681e      	ldr	r6, [r3, #0]
 80071da:	4296      	cmp	r6, r2
 80071dc:	d369      	bcc.n	80072b2 <pvPortMalloc+0x10a>
				pxBlock = xStart.pxNextFreeBlock;
 80071de:	493a      	ldr	r1, [pc, #232]	; (80072c8 <pvPortMalloc+0x120>)
 80071e0:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80071e2:	e027      	b.n	8007234 <pvPortMalloc+0x8c>
	uxAddress = ( size_t ) ucHeap;
 80071e4:	4a39      	ldr	r2, [pc, #228]	; (80072cc <pvPortMalloc+0x124>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80071e6:	f012 0f07 	tst.w	r2, #7
 80071ea:	d007      	beq.n	80071fc <pvPortMalloc+0x54>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80071ec:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071ee:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80071f2:	f502 6340 	add.w	r3, r2, #3072	; 0xc00
 80071f6:	1a5b      	subs	r3, r3, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071f8:	460a      	mov	r2, r1
 80071fa:	e001      	b.n	8007200 <pvPortMalloc+0x58>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80071fc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007200:	4831      	ldr	r0, [pc, #196]	; (80072c8 <pvPortMalloc+0x120>)
 8007202:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007204:	2100      	movs	r1, #0
 8007206:	6041      	str	r1, [r0, #4]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007208:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800720a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800720c:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8007210:	482a      	ldr	r0, [pc, #168]	; (80072bc <pvPortMalloc+0x114>)
 8007212:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8007214:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007216:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007218:	1a99      	subs	r1, r3, r2
 800721a:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800721c:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800721e:	4b2c      	ldr	r3, [pc, #176]	; (80072d0 <pvPortMalloc+0x128>)
 8007220:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007222:	4b28      	ldr	r3, [pc, #160]	; (80072c4 <pvPortMalloc+0x11c>)
 8007224:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007226:	4b26      	ldr	r3, [pc, #152]	; (80072c0 <pvPortMalloc+0x118>)
 8007228:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800722c:	601a      	str	r2, [r3, #0]
}
 800722e:	e7c2      	b.n	80071b6 <pvPortMalloc+0xe>
 8007230:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8007232:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007234:	6863      	ldr	r3, [r4, #4]
 8007236:	4293      	cmp	r3, r2
 8007238:	d202      	bcs.n	8007240 <pvPortMalloc+0x98>
 800723a:	6823      	ldr	r3, [r4, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d1f7      	bne.n	8007230 <pvPortMalloc+0x88>
				if( pxBlock != pxEnd )
 8007240:	4b1e      	ldr	r3, [pc, #120]	; (80072bc <pvPortMalloc+0x114>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	42a3      	cmp	r3, r4
 8007246:	d034      	beq.n	80072b2 <pvPortMalloc+0x10a>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007248:	680f      	ldr	r7, [r1, #0]
 800724a:	3708      	adds	r7, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800724c:	6823      	ldr	r3, [r4, #0]
 800724e:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007250:	6863      	ldr	r3, [r4, #4]
 8007252:	1a9b      	subs	r3, r3, r2
 8007254:	2b10      	cmp	r3, #16
 8007256:	d910      	bls.n	800727a <pvPortMalloc+0xd2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007258:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800725a:	f010 0f07 	tst.w	r0, #7
 800725e:	d008      	beq.n	8007272 <pvPortMalloc+0xca>
 8007260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007264:	f383 8811 	msr	BASEPRI, r3
 8007268:	f3bf 8f6f 	isb	sy
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	e7fe      	b.n	8007270 <pvPortMalloc+0xc8>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007272:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007274:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007276:	f7ff ff67 	bl	8007148 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800727a:	6863      	ldr	r3, [r4, #4]
 800727c:	1af6      	subs	r6, r6, r3
 800727e:	4a11      	ldr	r2, [pc, #68]	; (80072c4 <pvPortMalloc+0x11c>)
 8007280:	6016      	str	r6, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007282:	4a13      	ldr	r2, [pc, #76]	; (80072d0 <pvPortMalloc+0x128>)
 8007284:	6812      	ldr	r2, [r2, #0]
 8007286:	4296      	cmp	r6, r2
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007288:	bf3c      	itt	cc
 800728a:	4a11      	ldrcc	r2, [pc, #68]	; (80072d0 <pvPortMalloc+0x128>)
 800728c:	6016      	strcc	r6, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800728e:	431d      	orrs	r5, r3
 8007290:	6065      	str	r5, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007292:	2300      	movs	r3, #0
 8007294:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 8007296:	f7ff f92d 	bl	80064f4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800729a:	f017 0f07 	tst.w	r7, #7
 800729e:	d00b      	beq.n	80072b8 <pvPortMalloc+0x110>
 80072a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a4:	f383 8811 	msr	BASEPRI, r3
 80072a8:	f3bf 8f6f 	isb	sy
 80072ac:	f3bf 8f4f 	dsb	sy
 80072b0:	e7fe      	b.n	80072b0 <pvPortMalloc+0x108>
	( void ) xTaskResumeAll();
 80072b2:	f7ff f91f 	bl	80064f4 <xTaskResumeAll>
 80072b6:	2700      	movs	r7, #0
}
 80072b8:	4638      	mov	r0, r7
 80072ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072bc:	200021c4 	.word	0x200021c4
 80072c0:	20002dc8 	.word	0x20002dc8
 80072c4:	20002dcc 	.word	0x20002dcc
 80072c8:	20002dd4 	.word	0x20002dd4
 80072cc:	200021c8 	.word	0x200021c8
 80072d0:	20002dd0 	.word	0x20002dd0

080072d4 <vPortFree>:
	if( pv != NULL )
 80072d4:	b378      	cbz	r0, 8007336 <vPortFree+0x62>
{
 80072d6:	b510      	push	{r4, lr}
 80072d8:	4604      	mov	r4, r0
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80072da:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80072de:	4a16      	ldr	r2, [pc, #88]	; (8007338 <vPortFree+0x64>)
 80072e0:	6812      	ldr	r2, [r2, #0]
 80072e2:	4213      	tst	r3, r2
 80072e4:	d108      	bne.n	80072f8 <vPortFree+0x24>
 80072e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ea:	f383 8811 	msr	BASEPRI, r3
 80072ee:	f3bf 8f6f 	isb	sy
 80072f2:	f3bf 8f4f 	dsb	sy
 80072f6:	e7fe      	b.n	80072f6 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80072f8:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80072fc:	b141      	cbz	r1, 8007310 <vPortFree+0x3c>
 80072fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	e7fe      	b.n	800730e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007310:	ea23 0302 	bic.w	r3, r3, r2
 8007314:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8007318:	f7ff f844 	bl	80063a4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800731c:	4a07      	ldr	r2, [pc, #28]	; (800733c <vPortFree+0x68>)
 800731e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007322:	6811      	ldr	r1, [r2, #0]
 8007324:	440b      	add	r3, r1
 8007326:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007328:	f1a4 0008 	sub.w	r0, r4, #8
 800732c:	f7ff ff0c 	bl	8007148 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8007330:	f7ff f8e0 	bl	80064f4 <xTaskResumeAll>
}
 8007334:	bd10      	pop	{r4, pc}
 8007336:	4770      	bx	lr
 8007338:	20002dc8 	.word	0x20002dc8
 800733c:	20002dcc 	.word	0x20002dcc

08007340 <__libc_init_array>:
 8007340:	b570      	push	{r4, r5, r6, lr}
 8007342:	2600      	movs	r6, #0
 8007344:	4d0c      	ldr	r5, [pc, #48]	; (8007378 <__libc_init_array+0x38>)
 8007346:	4c0d      	ldr	r4, [pc, #52]	; (800737c <__libc_init_array+0x3c>)
 8007348:	1b64      	subs	r4, r4, r5
 800734a:	10a4      	asrs	r4, r4, #2
 800734c:	42a6      	cmp	r6, r4
 800734e:	d109      	bne.n	8007364 <__libc_init_array+0x24>
 8007350:	f000 f8f0 	bl	8007534 <_init>
 8007354:	2600      	movs	r6, #0
 8007356:	4d0a      	ldr	r5, [pc, #40]	; (8007380 <__libc_init_array+0x40>)
 8007358:	4c0a      	ldr	r4, [pc, #40]	; (8007384 <__libc_init_array+0x44>)
 800735a:	1b64      	subs	r4, r4, r5
 800735c:	10a4      	asrs	r4, r4, #2
 800735e:	42a6      	cmp	r6, r4
 8007360:	d105      	bne.n	800736e <__libc_init_array+0x2e>
 8007362:	bd70      	pop	{r4, r5, r6, pc}
 8007364:	f855 3b04 	ldr.w	r3, [r5], #4
 8007368:	4798      	blx	r3
 800736a:	3601      	adds	r6, #1
 800736c:	e7ee      	b.n	800734c <__libc_init_array+0xc>
 800736e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007372:	4798      	blx	r3
 8007374:	3601      	adds	r6, #1
 8007376:	e7f2      	b.n	800735e <__libc_init_array+0x1e>
 8007378:	08007a6c 	.word	0x08007a6c
 800737c:	08007a6c 	.word	0x08007a6c
 8007380:	08007a6c 	.word	0x08007a6c
 8007384:	08007a70 	.word	0x08007a70

08007388 <__retarget_lock_acquire_recursive>:
 8007388:	4770      	bx	lr

0800738a <__retarget_lock_release_recursive>:
 800738a:	4770      	bx	lr

0800738c <memcpy>:
 800738c:	440a      	add	r2, r1
 800738e:	4291      	cmp	r1, r2
 8007390:	f100 33ff 	add.w	r3, r0, #4294967295
 8007394:	d100      	bne.n	8007398 <memcpy+0xc>
 8007396:	4770      	bx	lr
 8007398:	b510      	push	{r4, lr}
 800739a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800739e:	4291      	cmp	r1, r2
 80073a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073a4:	d1f9      	bne.n	800739a <memcpy+0xe>
 80073a6:	bd10      	pop	{r4, pc}

080073a8 <memset>:
 80073a8:	4603      	mov	r3, r0
 80073aa:	4402      	add	r2, r0
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d100      	bne.n	80073b2 <memset+0xa>
 80073b0:	4770      	bx	lr
 80073b2:	f803 1b01 	strb.w	r1, [r3], #1
 80073b6:	e7f9      	b.n	80073ac <memset+0x4>

080073b8 <cleanup_glue>:
 80073b8:	b538      	push	{r3, r4, r5, lr}
 80073ba:	460c      	mov	r4, r1
 80073bc:	6809      	ldr	r1, [r1, #0]
 80073be:	4605      	mov	r5, r0
 80073c0:	b109      	cbz	r1, 80073c6 <cleanup_glue+0xe>
 80073c2:	f7ff fff9 	bl	80073b8 <cleanup_glue>
 80073c6:	4621      	mov	r1, r4
 80073c8:	4628      	mov	r0, r5
 80073ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073ce:	f000 b869 	b.w	80074a4 <_free_r>
	...

080073d4 <_reclaim_reent>:
 80073d4:	4b2c      	ldr	r3, [pc, #176]	; (8007488 <_reclaim_reent+0xb4>)
 80073d6:	b570      	push	{r4, r5, r6, lr}
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4604      	mov	r4, r0
 80073dc:	4283      	cmp	r3, r0
 80073de:	d051      	beq.n	8007484 <_reclaim_reent+0xb0>
 80073e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80073e2:	b143      	cbz	r3, 80073f6 <_reclaim_reent+0x22>
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d14a      	bne.n	8007480 <_reclaim_reent+0xac>
 80073ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073ec:	6819      	ldr	r1, [r3, #0]
 80073ee:	b111      	cbz	r1, 80073f6 <_reclaim_reent+0x22>
 80073f0:	4620      	mov	r0, r4
 80073f2:	f000 f857 	bl	80074a4 <_free_r>
 80073f6:	6961      	ldr	r1, [r4, #20]
 80073f8:	b111      	cbz	r1, 8007400 <_reclaim_reent+0x2c>
 80073fa:	4620      	mov	r0, r4
 80073fc:	f000 f852 	bl	80074a4 <_free_r>
 8007400:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007402:	b111      	cbz	r1, 800740a <_reclaim_reent+0x36>
 8007404:	4620      	mov	r0, r4
 8007406:	f000 f84d 	bl	80074a4 <_free_r>
 800740a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800740c:	b111      	cbz	r1, 8007414 <_reclaim_reent+0x40>
 800740e:	4620      	mov	r0, r4
 8007410:	f000 f848 	bl	80074a4 <_free_r>
 8007414:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007416:	b111      	cbz	r1, 800741e <_reclaim_reent+0x4a>
 8007418:	4620      	mov	r0, r4
 800741a:	f000 f843 	bl	80074a4 <_free_r>
 800741e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007420:	b111      	cbz	r1, 8007428 <_reclaim_reent+0x54>
 8007422:	4620      	mov	r0, r4
 8007424:	f000 f83e 	bl	80074a4 <_free_r>
 8007428:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800742a:	b111      	cbz	r1, 8007432 <_reclaim_reent+0x5e>
 800742c:	4620      	mov	r0, r4
 800742e:	f000 f839 	bl	80074a4 <_free_r>
 8007432:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007434:	b111      	cbz	r1, 800743c <_reclaim_reent+0x68>
 8007436:	4620      	mov	r0, r4
 8007438:	f000 f834 	bl	80074a4 <_free_r>
 800743c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800743e:	b111      	cbz	r1, 8007446 <_reclaim_reent+0x72>
 8007440:	4620      	mov	r0, r4
 8007442:	f000 f82f 	bl	80074a4 <_free_r>
 8007446:	69a3      	ldr	r3, [r4, #24]
 8007448:	b1e3      	cbz	r3, 8007484 <_reclaim_reent+0xb0>
 800744a:	4620      	mov	r0, r4
 800744c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800744e:	4798      	blx	r3
 8007450:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007452:	b1b9      	cbz	r1, 8007484 <_reclaim_reent+0xb0>
 8007454:	4620      	mov	r0, r4
 8007456:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800745a:	f7ff bfad 	b.w	80073b8 <cleanup_glue>
 800745e:	5949      	ldr	r1, [r1, r5]
 8007460:	b941      	cbnz	r1, 8007474 <_reclaim_reent+0xa0>
 8007462:	3504      	adds	r5, #4
 8007464:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007466:	2d80      	cmp	r5, #128	; 0x80
 8007468:	68d9      	ldr	r1, [r3, #12]
 800746a:	d1f8      	bne.n	800745e <_reclaim_reent+0x8a>
 800746c:	4620      	mov	r0, r4
 800746e:	f000 f819 	bl	80074a4 <_free_r>
 8007472:	e7ba      	b.n	80073ea <_reclaim_reent+0x16>
 8007474:	680e      	ldr	r6, [r1, #0]
 8007476:	4620      	mov	r0, r4
 8007478:	f000 f814 	bl	80074a4 <_free_r>
 800747c:	4631      	mov	r1, r6
 800747e:	e7ef      	b.n	8007460 <_reclaim_reent+0x8c>
 8007480:	2500      	movs	r5, #0
 8007482:	e7ef      	b.n	8007464 <_reclaim_reent+0x90>
 8007484:	bd70      	pop	{r4, r5, r6, pc}
 8007486:	bf00      	nop
 8007488:	200000c0 	.word	0x200000c0

0800748c <__malloc_lock>:
 800748c:	4801      	ldr	r0, [pc, #4]	; (8007494 <__malloc_lock+0x8>)
 800748e:	f7ff bf7b 	b.w	8007388 <__retarget_lock_acquire_recursive>
 8007492:	bf00      	nop
 8007494:	20002ddc 	.word	0x20002ddc

08007498 <__malloc_unlock>:
 8007498:	4801      	ldr	r0, [pc, #4]	; (80074a0 <__malloc_unlock+0x8>)
 800749a:	f7ff bf76 	b.w	800738a <__retarget_lock_release_recursive>
 800749e:	bf00      	nop
 80074a0:	20002ddc 	.word	0x20002ddc

080074a4 <_free_r>:
 80074a4:	b538      	push	{r3, r4, r5, lr}
 80074a6:	4605      	mov	r5, r0
 80074a8:	2900      	cmp	r1, #0
 80074aa:	d040      	beq.n	800752e <_free_r+0x8a>
 80074ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074b0:	1f0c      	subs	r4, r1, #4
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	bfb8      	it	lt
 80074b6:	18e4      	addlt	r4, r4, r3
 80074b8:	f7ff ffe8 	bl	800748c <__malloc_lock>
 80074bc:	4a1c      	ldr	r2, [pc, #112]	; (8007530 <_free_r+0x8c>)
 80074be:	6813      	ldr	r3, [r2, #0]
 80074c0:	b933      	cbnz	r3, 80074d0 <_free_r+0x2c>
 80074c2:	6063      	str	r3, [r4, #4]
 80074c4:	6014      	str	r4, [r2, #0]
 80074c6:	4628      	mov	r0, r5
 80074c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074cc:	f7ff bfe4 	b.w	8007498 <__malloc_unlock>
 80074d0:	42a3      	cmp	r3, r4
 80074d2:	d908      	bls.n	80074e6 <_free_r+0x42>
 80074d4:	6820      	ldr	r0, [r4, #0]
 80074d6:	1821      	adds	r1, r4, r0
 80074d8:	428b      	cmp	r3, r1
 80074da:	bf01      	itttt	eq
 80074dc:	6819      	ldreq	r1, [r3, #0]
 80074de:	685b      	ldreq	r3, [r3, #4]
 80074e0:	1809      	addeq	r1, r1, r0
 80074e2:	6021      	streq	r1, [r4, #0]
 80074e4:	e7ed      	b.n	80074c2 <_free_r+0x1e>
 80074e6:	461a      	mov	r2, r3
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	b10b      	cbz	r3, 80074f0 <_free_r+0x4c>
 80074ec:	42a3      	cmp	r3, r4
 80074ee:	d9fa      	bls.n	80074e6 <_free_r+0x42>
 80074f0:	6811      	ldr	r1, [r2, #0]
 80074f2:	1850      	adds	r0, r2, r1
 80074f4:	42a0      	cmp	r0, r4
 80074f6:	d10b      	bne.n	8007510 <_free_r+0x6c>
 80074f8:	6820      	ldr	r0, [r4, #0]
 80074fa:	4401      	add	r1, r0
 80074fc:	1850      	adds	r0, r2, r1
 80074fe:	4283      	cmp	r3, r0
 8007500:	6011      	str	r1, [r2, #0]
 8007502:	d1e0      	bne.n	80074c6 <_free_r+0x22>
 8007504:	6818      	ldr	r0, [r3, #0]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	4401      	add	r1, r0
 800750a:	6011      	str	r1, [r2, #0]
 800750c:	6053      	str	r3, [r2, #4]
 800750e:	e7da      	b.n	80074c6 <_free_r+0x22>
 8007510:	d902      	bls.n	8007518 <_free_r+0x74>
 8007512:	230c      	movs	r3, #12
 8007514:	602b      	str	r3, [r5, #0]
 8007516:	e7d6      	b.n	80074c6 <_free_r+0x22>
 8007518:	6820      	ldr	r0, [r4, #0]
 800751a:	1821      	adds	r1, r4, r0
 800751c:	428b      	cmp	r3, r1
 800751e:	bf01      	itttt	eq
 8007520:	6819      	ldreq	r1, [r3, #0]
 8007522:	685b      	ldreq	r3, [r3, #4]
 8007524:	1809      	addeq	r1, r1, r0
 8007526:	6021      	streq	r1, [r4, #0]
 8007528:	6063      	str	r3, [r4, #4]
 800752a:	6054      	str	r4, [r2, #4]
 800752c:	e7cb      	b.n	80074c6 <_free_r+0x22>
 800752e:	bd38      	pop	{r3, r4, r5, pc}
 8007530:	20002de0 	.word	0x20002de0

08007534 <_init>:
 8007534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007536:	bf00      	nop
 8007538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800753a:	bc08      	pop	{r3}
 800753c:	469e      	mov	lr, r3
 800753e:	4770      	bx	lr

08007540 <_fini>:
 8007540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007542:	bf00      	nop
 8007544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007546:	bc08      	pop	{r3}
 8007548:	469e      	mov	lr, r3
 800754a:	4770      	bx	lr


ThermoControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079ec  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000560  08007afc  08007afc  00017afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800805c  0800805c  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  0800805c  0800805c  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800805c  0800805c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800805c  0800805c  0001805c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008060  08008060  00018060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08008064  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003a50  20000080  080080e4  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003ad0  080080e4  00023ad0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bbbc  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000608e  00000000  00000000  0004bc65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001eb65  00000000  00000000  00051cf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001928  00000000  00000000  00070858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001f40  00000000  00000000  00072180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d368  00000000  00000000  000740c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002aaca  00000000  00000000  00091428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009d936  00000000  00000000  000bbef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00159828  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b74  00000000  00000000  00159878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	08007ae4 	.word	0x08007ae4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	08007ae4 	.word	0x08007ae4

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2f>:
 800071c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000720:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000724:	bf24      	itt	cs
 8000726:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800072a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800072e:	d90d      	bls.n	800074c <__aeabi_d2f+0x30>
 8000730:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000734:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000738:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800073c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000740:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000744:	bf08      	it	eq
 8000746:	f020 0001 	biceq.w	r0, r0, #1
 800074a:	4770      	bx	lr
 800074c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000750:	d121      	bne.n	8000796 <__aeabi_d2f+0x7a>
 8000752:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000756:	bfbc      	itt	lt
 8000758:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800075c:	4770      	bxlt	lr
 800075e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000762:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000766:	f1c2 0218 	rsb	r2, r2, #24
 800076a:	f1c2 0c20 	rsb	ip, r2, #32
 800076e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000772:	fa20 f002 	lsr.w	r0, r0, r2
 8000776:	bf18      	it	ne
 8000778:	f040 0001 	orrne.w	r0, r0, #1
 800077c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000780:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000784:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000788:	ea40 000c 	orr.w	r0, r0, ip
 800078c:	fa23 f302 	lsr.w	r3, r3, r2
 8000790:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000794:	e7cc      	b.n	8000730 <__aeabi_d2f+0x14>
 8000796:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800079a:	d107      	bne.n	80007ac <__aeabi_d2f+0x90>
 800079c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007a0:	bf1e      	ittt	ne
 80007a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007aa:	4770      	bxne	lr
 80007ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop

080007bc <__aeabi_frsub>:
 80007bc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80007c0:	e002      	b.n	80007c8 <__addsf3>
 80007c2:	bf00      	nop

080007c4 <__aeabi_fsub>:
 80007c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080007c8 <__addsf3>:
 80007c8:	0042      	lsls	r2, r0, #1
 80007ca:	bf1f      	itttt	ne
 80007cc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80007d0:	ea92 0f03 	teqne	r2, r3
 80007d4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80007d8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007dc:	d06a      	beq.n	80008b4 <__addsf3+0xec>
 80007de:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80007e2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80007e6:	bfc1      	itttt	gt
 80007e8:	18d2      	addgt	r2, r2, r3
 80007ea:	4041      	eorgt	r1, r0
 80007ec:	4048      	eorgt	r0, r1
 80007ee:	4041      	eorgt	r1, r0
 80007f0:	bfb8      	it	lt
 80007f2:	425b      	neglt	r3, r3
 80007f4:	2b19      	cmp	r3, #25
 80007f6:	bf88      	it	hi
 80007f8:	4770      	bxhi	lr
 80007fa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80007fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000802:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000806:	bf18      	it	ne
 8000808:	4240      	negne	r0, r0
 800080a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800080e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000812:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000816:	bf18      	it	ne
 8000818:	4249      	negne	r1, r1
 800081a:	ea92 0f03 	teq	r2, r3
 800081e:	d03f      	beq.n	80008a0 <__addsf3+0xd8>
 8000820:	f1a2 0201 	sub.w	r2, r2, #1
 8000824:	fa41 fc03 	asr.w	ip, r1, r3
 8000828:	eb10 000c 	adds.w	r0, r0, ip
 800082c:	f1c3 0320 	rsb	r3, r3, #32
 8000830:	fa01 f103 	lsl.w	r1, r1, r3
 8000834:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000838:	d502      	bpl.n	8000840 <__addsf3+0x78>
 800083a:	4249      	negs	r1, r1
 800083c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000840:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000844:	d313      	bcc.n	800086e <__addsf3+0xa6>
 8000846:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800084a:	d306      	bcc.n	800085a <__addsf3+0x92>
 800084c:	0840      	lsrs	r0, r0, #1
 800084e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000852:	f102 0201 	add.w	r2, r2, #1
 8000856:	2afe      	cmp	r2, #254	; 0xfe
 8000858:	d251      	bcs.n	80008fe <__addsf3+0x136>
 800085a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800085e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000862:	bf08      	it	eq
 8000864:	f020 0001 	biceq.w	r0, r0, #1
 8000868:	ea40 0003 	orr.w	r0, r0, r3
 800086c:	4770      	bx	lr
 800086e:	0049      	lsls	r1, r1, #1
 8000870:	eb40 0000 	adc.w	r0, r0, r0
 8000874:	3a01      	subs	r2, #1
 8000876:	bf28      	it	cs
 8000878:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800087c:	d2ed      	bcs.n	800085a <__addsf3+0x92>
 800087e:	fab0 fc80 	clz	ip, r0
 8000882:	f1ac 0c08 	sub.w	ip, ip, #8
 8000886:	ebb2 020c 	subs.w	r2, r2, ip
 800088a:	fa00 f00c 	lsl.w	r0, r0, ip
 800088e:	bfaa      	itet	ge
 8000890:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000894:	4252      	neglt	r2, r2
 8000896:	4318      	orrge	r0, r3
 8000898:	bfbc      	itt	lt
 800089a:	40d0      	lsrlt	r0, r2
 800089c:	4318      	orrlt	r0, r3
 800089e:	4770      	bx	lr
 80008a0:	f092 0f00 	teq	r2, #0
 80008a4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80008a8:	bf06      	itte	eq
 80008aa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80008ae:	3201      	addeq	r2, #1
 80008b0:	3b01      	subne	r3, #1
 80008b2:	e7b5      	b.n	8000820 <__addsf3+0x58>
 80008b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008bc:	bf18      	it	ne
 80008be:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008c2:	d021      	beq.n	8000908 <__addsf3+0x140>
 80008c4:	ea92 0f03 	teq	r2, r3
 80008c8:	d004      	beq.n	80008d4 <__addsf3+0x10c>
 80008ca:	f092 0f00 	teq	r2, #0
 80008ce:	bf08      	it	eq
 80008d0:	4608      	moveq	r0, r1
 80008d2:	4770      	bx	lr
 80008d4:	ea90 0f01 	teq	r0, r1
 80008d8:	bf1c      	itt	ne
 80008da:	2000      	movne	r0, #0
 80008dc:	4770      	bxne	lr
 80008de:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80008e2:	d104      	bne.n	80008ee <__addsf3+0x126>
 80008e4:	0040      	lsls	r0, r0, #1
 80008e6:	bf28      	it	cs
 80008e8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80008ec:	4770      	bx	lr
 80008ee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80008f2:	bf3c      	itt	cc
 80008f4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80008f8:	4770      	bxcc	lr
 80008fa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80008fe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000902:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000906:	4770      	bx	lr
 8000908:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800090c:	bf16      	itet	ne
 800090e:	4608      	movne	r0, r1
 8000910:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000914:	4601      	movne	r1, r0
 8000916:	0242      	lsls	r2, r0, #9
 8000918:	bf06      	itte	eq
 800091a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800091e:	ea90 0f01 	teqeq	r0, r1
 8000922:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000926:	4770      	bx	lr

08000928 <__aeabi_ui2f>:
 8000928:	f04f 0300 	mov.w	r3, #0
 800092c:	e004      	b.n	8000938 <__aeabi_i2f+0x8>
 800092e:	bf00      	nop

08000930 <__aeabi_i2f>:
 8000930:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000934:	bf48      	it	mi
 8000936:	4240      	negmi	r0, r0
 8000938:	ea5f 0c00 	movs.w	ip, r0
 800093c:	bf08      	it	eq
 800093e:	4770      	bxeq	lr
 8000940:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000944:	4601      	mov	r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	e01c      	b.n	8000986 <__aeabi_l2f+0x2a>

0800094c <__aeabi_ul2f>:
 800094c:	ea50 0201 	orrs.w	r2, r0, r1
 8000950:	bf08      	it	eq
 8000952:	4770      	bxeq	lr
 8000954:	f04f 0300 	mov.w	r3, #0
 8000958:	e00a      	b.n	8000970 <__aeabi_l2f+0x14>
 800095a:	bf00      	nop

0800095c <__aeabi_l2f>:
 800095c:	ea50 0201 	orrs.w	r2, r0, r1
 8000960:	bf08      	it	eq
 8000962:	4770      	bxeq	lr
 8000964:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000968:	d502      	bpl.n	8000970 <__aeabi_l2f+0x14>
 800096a:	4240      	negs	r0, r0
 800096c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000970:	ea5f 0c01 	movs.w	ip, r1
 8000974:	bf02      	ittt	eq
 8000976:	4684      	moveq	ip, r0
 8000978:	4601      	moveq	r1, r0
 800097a:	2000      	moveq	r0, #0
 800097c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000980:	bf08      	it	eq
 8000982:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000986:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800098a:	fabc f28c 	clz	r2, ip
 800098e:	3a08      	subs	r2, #8
 8000990:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000994:	db10      	blt.n	80009b8 <__aeabi_l2f+0x5c>
 8000996:	fa01 fc02 	lsl.w	ip, r1, r2
 800099a:	4463      	add	r3, ip
 800099c:	fa00 fc02 	lsl.w	ip, r0, r2
 80009a0:	f1c2 0220 	rsb	r2, r2, #32
 80009a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80009a8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ac:	eb43 0002 	adc.w	r0, r3, r2
 80009b0:	bf08      	it	eq
 80009b2:	f020 0001 	biceq.w	r0, r0, #1
 80009b6:	4770      	bx	lr
 80009b8:	f102 0220 	add.w	r2, r2, #32
 80009bc:	fa01 fc02 	lsl.w	ip, r1, r2
 80009c0:	f1c2 0220 	rsb	r2, r2, #32
 80009c4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80009c8:	fa21 f202 	lsr.w	r2, r1, r2
 80009cc:	eb43 0002 	adc.w	r0, r3, r2
 80009d0:	bf08      	it	eq
 80009d2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009d6:	4770      	bx	lr

080009d8 <__aeabi_fmul>:
 80009d8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009e0:	bf1e      	ittt	ne
 80009e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009e6:	ea92 0f0c 	teqne	r2, ip
 80009ea:	ea93 0f0c 	teqne	r3, ip
 80009ee:	d06f      	beq.n	8000ad0 <__aeabi_fmul+0xf8>
 80009f0:	441a      	add	r2, r3
 80009f2:	ea80 0c01 	eor.w	ip, r0, r1
 80009f6:	0240      	lsls	r0, r0, #9
 80009f8:	bf18      	it	ne
 80009fa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80009fe:	d01e      	beq.n	8000a3e <__aeabi_fmul+0x66>
 8000a00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a04:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000a08:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000a0c:	fba0 3101 	umull	r3, r1, r0, r1
 8000a10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a14:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000a18:	bf3e      	ittt	cc
 8000a1a:	0049      	lslcc	r1, r1, #1
 8000a1c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	ea40 0001 	orr.w	r0, r0, r1
 8000a26:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000a2a:	2afd      	cmp	r2, #253	; 0xfd
 8000a2c:	d81d      	bhi.n	8000a6a <__aeabi_fmul+0x92>
 8000a2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000a32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a36:	bf08      	it	eq
 8000a38:	f020 0001 	biceq.w	r0, r0, #1
 8000a3c:	4770      	bx	lr
 8000a3e:	f090 0f00 	teq	r0, #0
 8000a42:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a46:	bf08      	it	eq
 8000a48:	0249      	lsleq	r1, r1, #9
 8000a4a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a4e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a52:	3a7f      	subs	r2, #127	; 0x7f
 8000a54:	bfc2      	ittt	gt
 8000a56:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a5a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a5e:	4770      	bxgt	lr
 8000a60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a64:	f04f 0300 	mov.w	r3, #0
 8000a68:	3a01      	subs	r2, #1
 8000a6a:	dc5d      	bgt.n	8000b28 <__aeabi_fmul+0x150>
 8000a6c:	f112 0f19 	cmn.w	r2, #25
 8000a70:	bfdc      	itt	le
 8000a72:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000a76:	4770      	bxle	lr
 8000a78:	f1c2 0200 	rsb	r2, r2, #0
 8000a7c:	0041      	lsls	r1, r0, #1
 8000a7e:	fa21 f102 	lsr.w	r1, r1, r2
 8000a82:	f1c2 0220 	rsb	r2, r2, #32
 8000a86:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a8a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a8e:	f140 0000 	adc.w	r0, r0, #0
 8000a92:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a96:	bf08      	it	eq
 8000a98:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a9c:	4770      	bx	lr
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fmul+0xce>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fmul+0xe6>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e78f      	b.n	80009f0 <__aeabi_fmul+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	bf18      	it	ne
 8000ada:	ea93 0f0c 	teqne	r3, ip
 8000ade:	d00a      	beq.n	8000af6 <__aeabi_fmul+0x11e>
 8000ae0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ae4:	bf18      	it	ne
 8000ae6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000aea:	d1d8      	bne.n	8000a9e <__aeabi_fmul+0xc6>
 8000aec:	ea80 0001 	eor.w	r0, r0, r1
 8000af0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000af4:	4770      	bx	lr
 8000af6:	f090 0f00 	teq	r0, #0
 8000afa:	bf17      	itett	ne
 8000afc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000b00:	4608      	moveq	r0, r1
 8000b02:	f091 0f00 	teqne	r1, #0
 8000b06:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000b0a:	d014      	beq.n	8000b36 <__aeabi_fmul+0x15e>
 8000b0c:	ea92 0f0c 	teq	r2, ip
 8000b10:	d101      	bne.n	8000b16 <__aeabi_fmul+0x13e>
 8000b12:	0242      	lsls	r2, r0, #9
 8000b14:	d10f      	bne.n	8000b36 <__aeabi_fmul+0x15e>
 8000b16:	ea93 0f0c 	teq	r3, ip
 8000b1a:	d103      	bne.n	8000b24 <__aeabi_fmul+0x14c>
 8000b1c:	024b      	lsls	r3, r1, #9
 8000b1e:	bf18      	it	ne
 8000b20:	4608      	movne	r0, r1
 8000b22:	d108      	bne.n	8000b36 <__aeabi_fmul+0x15e>
 8000b24:	ea80 0001 	eor.w	r0, r0, r1
 8000b28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b34:	4770      	bx	lr
 8000b36:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_fdiv>:
 8000b40:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b48:	bf1e      	ittt	ne
 8000b4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b4e:	ea92 0f0c 	teqne	r2, ip
 8000b52:	ea93 0f0c 	teqne	r3, ip
 8000b56:	d069      	beq.n	8000c2c <__aeabi_fdiv+0xec>
 8000b58:	eba2 0203 	sub.w	r2, r2, r3
 8000b5c:	ea80 0c01 	eor.w	ip, r0, r1
 8000b60:	0249      	lsls	r1, r1, #9
 8000b62:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b66:	d037      	beq.n	8000bd8 <__aeabi_fdiv+0x98>
 8000b68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b6c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b70:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b74:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b78:	428b      	cmp	r3, r1
 8000b7a:	bf38      	it	cc
 8000b7c:	005b      	lslcc	r3, r3, #1
 8000b7e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000b82:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000b86:	428b      	cmp	r3, r1
 8000b88:	bf24      	itt	cs
 8000b8a:	1a5b      	subcs	r3, r3, r1
 8000b8c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b90:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b94:	bf24      	itt	cs
 8000b96:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b9a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b9e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ba2:	bf24      	itt	cs
 8000ba4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ba8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000bac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000bb0:	bf24      	itt	cs
 8000bb2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000bb6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bba:	011b      	lsls	r3, r3, #4
 8000bbc:	bf18      	it	ne
 8000bbe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000bc2:	d1e0      	bne.n	8000b86 <__aeabi_fdiv+0x46>
 8000bc4:	2afd      	cmp	r2, #253	; 0xfd
 8000bc6:	f63f af50 	bhi.w	8000a6a <__aeabi_fmul+0x92>
 8000bca:	428b      	cmp	r3, r1
 8000bcc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bdc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000be0:	327f      	adds	r2, #127	; 0x7f
 8000be2:	bfc2      	ittt	gt
 8000be4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000be8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bec:	4770      	bxgt	lr
 8000bee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf2:	f04f 0300 	mov.w	r3, #0
 8000bf6:	3a01      	subs	r2, #1
 8000bf8:	e737      	b.n	8000a6a <__aeabi_fmul+0x92>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c02:	bf02      	ittt	eq
 8000c04:	0040      	lsleq	r0, r0, #1
 8000c06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c0a:	3a01      	subeq	r2, #1
 8000c0c:	d0f9      	beq.n	8000c02 <__aeabi_fdiv+0xc2>
 8000c0e:	ea40 000c 	orr.w	r0, r0, ip
 8000c12:	f093 0f00 	teq	r3, #0
 8000c16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c1a:	bf02      	ittt	eq
 8000c1c:	0049      	lsleq	r1, r1, #1
 8000c1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c22:	3b01      	subeq	r3, #1
 8000c24:	d0f9      	beq.n	8000c1a <__aeabi_fdiv+0xda>
 8000c26:	ea41 010c 	orr.w	r1, r1, ip
 8000c2a:	e795      	b.n	8000b58 <__aeabi_fdiv+0x18>
 8000c2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c30:	ea92 0f0c 	teq	r2, ip
 8000c34:	d108      	bne.n	8000c48 <__aeabi_fdiv+0x108>
 8000c36:	0242      	lsls	r2, r0, #9
 8000c38:	f47f af7d 	bne.w	8000b36 <__aeabi_fmul+0x15e>
 8000c3c:	ea93 0f0c 	teq	r3, ip
 8000c40:	f47f af70 	bne.w	8000b24 <__aeabi_fmul+0x14c>
 8000c44:	4608      	mov	r0, r1
 8000c46:	e776      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c48:	ea93 0f0c 	teq	r3, ip
 8000c4c:	d104      	bne.n	8000c58 <__aeabi_fdiv+0x118>
 8000c4e:	024b      	lsls	r3, r1, #9
 8000c50:	f43f af4c 	beq.w	8000aec <__aeabi_fmul+0x114>
 8000c54:	4608      	mov	r0, r1
 8000c56:	e76e      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c58:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c5c:	bf18      	it	ne
 8000c5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c62:	d1ca      	bne.n	8000bfa <__aeabi_fdiv+0xba>
 8000c64:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000c68:	f47f af5c 	bne.w	8000b24 <__aeabi_fmul+0x14c>
 8000c6c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000c70:	f47f af3c 	bne.w	8000aec <__aeabi_fmul+0x114>
 8000c74:	e75f      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c76:	bf00      	nop

08000c78 <__gesf2>:
 8000c78:	f04f 3cff 	mov.w	ip, #4294967295
 8000c7c:	e006      	b.n	8000c8c <__cmpsf2+0x4>
 8000c7e:	bf00      	nop

08000c80 <__lesf2>:
 8000c80:	f04f 0c01 	mov.w	ip, #1
 8000c84:	e002      	b.n	8000c8c <__cmpsf2+0x4>
 8000c86:	bf00      	nop

08000c88 <__cmpsf2>:
 8000c88:	f04f 0c01 	mov.w	ip, #1
 8000c8c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c90:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c9c:	bf18      	it	ne
 8000c9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca2:	d011      	beq.n	8000cc8 <__cmpsf2+0x40>
 8000ca4:	b001      	add	sp, #4
 8000ca6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000caa:	bf18      	it	ne
 8000cac:	ea90 0f01 	teqne	r0, r1
 8000cb0:	bf58      	it	pl
 8000cb2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000cb6:	bf88      	it	hi
 8000cb8:	17c8      	asrhi	r0, r1, #31
 8000cba:	bf38      	it	cc
 8000cbc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000cc0:	bf18      	it	ne
 8000cc2:	f040 0001 	orrne.w	r0, r0, #1
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ccc:	d102      	bne.n	8000cd4 <__cmpsf2+0x4c>
 8000cce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000cd2:	d105      	bne.n	8000ce0 <__cmpsf2+0x58>
 8000cd4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000cd8:	d1e4      	bne.n	8000ca4 <__cmpsf2+0x1c>
 8000cda:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000cde:	d0e1      	beq.n	8000ca4 <__cmpsf2+0x1c>
 8000ce0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_cfrcmple>:
 8000ce8:	4684      	mov	ip, r0
 8000cea:	4608      	mov	r0, r1
 8000cec:	4661      	mov	r1, ip
 8000cee:	e7ff      	b.n	8000cf0 <__aeabi_cfcmpeq>

08000cf0 <__aeabi_cfcmpeq>:
 8000cf0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000cf2:	f7ff ffc9 	bl	8000c88 <__cmpsf2>
 8000cf6:	2800      	cmp	r0, #0
 8000cf8:	bf48      	it	mi
 8000cfa:	f110 0f00 	cmnmi.w	r0, #0
 8000cfe:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d00 <__aeabi_fcmpeq>:
 8000d00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d04:	f7ff fff4 	bl	8000cf0 <__aeabi_cfcmpeq>
 8000d08:	bf0c      	ite	eq
 8000d0a:	2001      	moveq	r0, #1
 8000d0c:	2000      	movne	r0, #0
 8000d0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d12:	bf00      	nop

08000d14 <__aeabi_fcmplt>:
 8000d14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d18:	f7ff ffea 	bl	8000cf0 <__aeabi_cfcmpeq>
 8000d1c:	bf34      	ite	cc
 8000d1e:	2001      	movcc	r0, #1
 8000d20:	2000      	movcs	r0, #0
 8000d22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d26:	bf00      	nop

08000d28 <__aeabi_fcmple>:
 8000d28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d2c:	f7ff ffe0 	bl	8000cf0 <__aeabi_cfcmpeq>
 8000d30:	bf94      	ite	ls
 8000d32:	2001      	movls	r0, #1
 8000d34:	2000      	movhi	r0, #0
 8000d36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d3a:	bf00      	nop

08000d3c <__aeabi_fcmpge>:
 8000d3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d40:	f7ff ffd2 	bl	8000ce8 <__aeabi_cfrcmple>
 8000d44:	bf94      	ite	ls
 8000d46:	2001      	movls	r0, #1
 8000d48:	2000      	movhi	r0, #0
 8000d4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d4e:	bf00      	nop

08000d50 <__aeabi_fcmpgt>:
 8000d50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d54:	f7ff ffc8 	bl	8000ce8 <__aeabi_cfrcmple>
 8000d58:	bf34      	ite	cc
 8000d5a:	2001      	movcc	r0, #1
 8000d5c:	2000      	movcs	r0, #0
 8000d5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d62:	bf00      	nop

08000d64 <__aeabi_f2uiz>:
 8000d64:	0042      	lsls	r2, r0, #1
 8000d66:	d20e      	bcs.n	8000d86 <__aeabi_f2uiz+0x22>
 8000d68:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d6c:	d30b      	bcc.n	8000d86 <__aeabi_f2uiz+0x22>
 8000d6e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d72:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d76:	d409      	bmi.n	8000d8c <__aeabi_f2uiz+0x28>
 8000d78:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d80:	fa23 f002 	lsr.w	r0, r3, r2
 8000d84:	4770      	bx	lr
 8000d86:	f04f 0000 	mov.w	r0, #0
 8000d8a:	4770      	bx	lr
 8000d8c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d90:	d101      	bne.n	8000d96 <__aeabi_f2uiz+0x32>
 8000d92:	0242      	lsls	r2, r0, #9
 8000d94:	d102      	bne.n	8000d9c <__aeabi_f2uiz+0x38>
 8000d96:	f04f 30ff 	mov.w	r0, #4294967295
 8000d9a:	4770      	bx	lr
 8000d9c:	f04f 0000 	mov.w	r0, #0
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop

08000da4 <fGetAinCalData>:
}
/*
 *
 */
float fGetAinCalData( AIN_NAME_t name, float raw_data)
{
 8000da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     float out_data = 0U;
      if ( name < AIN_NUMBER )
 8000da8:	2802      	cmp	r0, #2
 8000daa:	d833      	bhi.n	8000e14 <fGetAinCalData+0x70>
 8000dac:	460e      	mov	r6, r1
     {
          if ( xAinData[ name ].coof_count == 0 )
 8000dae:	4b1c      	ldr	r3, [pc, #112]	; (8000e20 <fGetAinCalData+0x7c>)
 8000db0:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 8000db4:	b90b      	cbnz	r3, 8000dba <fGetAinCalData+0x16>
           {
               out_data = raw_data;
 8000db6:	460f      	mov	r7, r1
 8000db8:	e02d      	b.n	8000e16 <fGetAinCalData+0x72>
    for (uint16_t i =  xAinData[ name ].index; i < (xAinData[ name ].index + xAinData[ name ].coof_count ); i++ )
 8000dba:	4a19      	ldr	r2, [pc, #100]	; (8000e20 <fGetAinCalData+0x7c>)
 8000dbc:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8000dc0:	7842      	ldrb	r2, [r0, #1]
 8000dc2:	b294      	uxth	r4, r2
 8000dc4:	4615      	mov	r5, r2
 8000dc6:	eb03 0802 	add.w	r8, r3, r2
 8000dca:	4542      	cmp	r2, r8
 8000dcc:	da26      	bge.n	8000e1c <fGetAinCalData+0x78>
    float out_data = 0;
 8000dce:	2700      	movs	r7, #0
        if ( (i ==  (xAinData[ name ].index + xAinData[ name ].coof_count)) || (in_data <= xKoofData[i].data ) )
 8000dd0:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8000e24 <fGetAinCalData+0x80>
 8000dd4:	e004      	b.n	8000de0 <fGetAinCalData+0x3c>
    for (uint16_t i =  xAinData[ name ].index; i < (xAinData[ name ].index + xAinData[ name ].coof_count ); i++ )
 8000dd6:	3401      	adds	r4, #1
 8000dd8:	b2a4      	uxth	r4, r4
 8000dda:	4625      	mov	r5, r4
 8000ddc:	4544      	cmp	r4, r8
 8000dde:	da1a      	bge.n	8000e16 <fGetAinCalData+0x72>
        if ( (i ==  (xAinData[ name ].index + xAinData[ name ].coof_count)) || (in_data <= xKoofData[i].data ) )
 8000de0:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000de4:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 8000de8:	4630      	mov	r0, r6
 8000dea:	f7ff ff9d 	bl	8000d28 <__aeabi_fcmple>
 8000dee:	2800      	cmp	r0, #0
 8000df0:	d0f1      	beq.n	8000dd6 <fGetAinCalData+0x32>
            out_data = xKoofData[i].k * in_data + xKoofData[i].b;
 8000df2:	006f      	lsls	r7, r5, #1
 8000df4:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000df8:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8000dfc:	6859      	ldr	r1, [r3, #4]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	f7ff fdea 	bl	80009d8 <__aeabi_fmul>
 8000e04:	442f      	add	r7, r5
 8000e06:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8000e0a:	68b9      	ldr	r1, [r7, #8]
 8000e0c:	f7ff fcdc 	bl	80007c8 <__addsf3>
 8000e10:	4607      	mov	r7, r0
 8000e12:	e7e0      	b.n	8000dd6 <fGetAinCalData+0x32>
     float out_data = 0U;
 8000e14:	2700      	movs	r7, #0
           {
               out_data = fConvertCalData( name, raw_data);
           }
      }
      return ( out_data );
}
 8000e16:	4638      	mov	r0, r7
 8000e18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    float out_data = 0;
 8000e1c:	2700      	movs	r7, #0
      return ( out_data );
 8000e1e:	e7fa      	b.n	8000e16 <fGetAinCalData+0x72>
 8000e20:	200000a0 	.word	0x200000a0
 8000e24:	200000a8 	.word	0x200000a8

08000e28 <eAinCalDataConfig>:

CAL_ERROR_CODE  eAinCalDataConfig(AIN_NAME_t name, uint8_t cal_point_count )
{
    CAL_ERROR_CODE res = CAL_SUCCESS;
    if (cal_point_count == 1)
 8000e28:	2901      	cmp	r1, #1
 8000e2a:	d01e      	beq.n	8000e6a <eAinCalDataConfig+0x42>
 8000e2c:	4603      	mov	r3, r0
    {
        res = CAL_POINT_COUNT_ERROR;
    }
    else
    {
        if (  xAinData[ name ].coof_count == 0 )
 8000e2e:	4a11      	ldr	r2, [pc, #68]	; (8000e74 <eAinCalDataConfig+0x4c>)
 8000e30:	f812 0010 	ldrb.w	r0, [r2, r0, lsl #1]
 8000e34:	b998      	cbnz	r0, 8000e5e <eAinCalDataConfig+0x36>
{
 8000e36:	b410      	push	{r4}
        {
            if  ( (cal_point_count +  usCurMaxIndex) > MAX_TOTAL_CAL_POINT )
 8000e38:	4a0f      	ldr	r2, [pc, #60]	; (8000e78 <eAinCalDataConfig+0x50>)
 8000e3a:	8812      	ldrh	r2, [r2, #0]
 8000e3c:	188c      	adds	r4, r1, r2
 8000e3e:	2c3c      	cmp	r4, #60	; 0x3c
 8000e40:	d815      	bhi.n	8000e6e <eAinCalDataConfig+0x46>
            {
                res = CAL_MEMORY_FULL;
            }
            else
            {
                xAinData[ name ].coof_count = cal_point_count - 1;
 8000e42:	4c0c      	ldr	r4, [pc, #48]	; (8000e74 <eAinCalDataConfig+0x4c>)
 8000e44:	f101 3cff 	add.w	ip, r1, #4294967295
 8000e48:	f804 c013 	strb.w	ip, [r4, r3, lsl #1]
                xAinData[ name ].index = usCurMaxIndex;
 8000e4c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8000e50:	705a      	strb	r2, [r3, #1]
                usCurMaxIndex += cal_point_count - 1;
 8000e52:	3a01      	subs	r2, #1
 8000e54:	4411      	add	r1, r2
 8000e56:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <eAinCalDataConfig+0x50>)
 8000e58:	8019      	strh	r1, [r3, #0]
                    res = CAL_OVERWRITE_ERROR;
                }
        }
    }
    return ( res );
}
 8000e5a:	bc10      	pop	{r4}
 8000e5c:	4770      	bx	lr
                if ( xAinData[ name ].coof_count != ( cal_point_count- 1))
 8000e5e:	3901      	subs	r1, #1
                    res = CAL_OVERWRITE_ERROR;
 8000e60:	4288      	cmp	r0, r1
 8000e62:	bf14      	ite	ne
 8000e64:	2002      	movne	r0, #2
 8000e66:	2000      	moveq	r0, #0
 8000e68:	4770      	bx	lr
        res = CAL_POINT_COUNT_ERROR;
 8000e6a:	2003      	movs	r0, #3
}
 8000e6c:	4770      	bx	lr
                res = CAL_MEMORY_FULL;
 8000e6e:	2001      	movs	r0, #1
 8000e70:	e7f3      	b.n	8000e5a <eAinCalDataConfig+0x32>
 8000e72:	bf00      	nop
 8000e74:	200000a0 	.word	0x200000a0
 8000e78:	2000009c 	.word	0x2000009c

08000e7c <vABLineKoofFinde>:

/*
 *
 */
void vABLineKoofFinde(float * k, float * b,  float x1, float x2, float y1, float y2)
{
 8000e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e80:	4607      	mov	r7, r0
 8000e82:	460e      	mov	r6, r1
 8000e84:	4615      	mov	r5, r2
 8000e86:	461c      	mov	r4, r3
 8000e88:	f8dd a020 	ldr.w	sl, [sp, #32]
 8000e8c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
		 *k = (float)( y1 - y2 ) /(float) (x1 - x2);
 8000e90:	4649      	mov	r1, r9
 8000e92:	4650      	mov	r0, sl
 8000e94:	f7ff fc96 	bl	80007c4 <__aeabi_fsub>
 8000e98:	4680      	mov	r8, r0
 8000e9a:	4621      	mov	r1, r4
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	f7ff fc91 	bl	80007c4 <__aeabi_fsub>
 8000ea2:	4601      	mov	r1, r0
 8000ea4:	4640      	mov	r0, r8
 8000ea6:	f7ff fe4b 	bl	8000b40 <__aeabi_fdiv>
 8000eaa:	6038      	str	r0, [r7, #0]
		 *b = (float)(y1*x2 - y2*x1) / (float) (x2-x1);
 8000eac:	4621      	mov	r1, r4
 8000eae:	4650      	mov	r0, sl
 8000eb0:	f7ff fd92 	bl	80009d8 <__aeabi_fmul>
 8000eb4:	4607      	mov	r7, r0
 8000eb6:	4629      	mov	r1, r5
 8000eb8:	4648      	mov	r0, r9
 8000eba:	f7ff fd8d 	bl	80009d8 <__aeabi_fmul>
 8000ebe:	4601      	mov	r1, r0
 8000ec0:	4638      	mov	r0, r7
 8000ec2:	f7ff fc7f 	bl	80007c4 <__aeabi_fsub>
 8000ec6:	4607      	mov	r7, r0
 8000ec8:	4629      	mov	r1, r5
 8000eca:	4620      	mov	r0, r4
 8000ecc:	f7ff fc7a 	bl	80007c4 <__aeabi_fsub>
 8000ed0:	4601      	mov	r1, r0
 8000ed2:	4638      	mov	r0, r7
 8000ed4:	f7ff fe34 	bl	8000b40 <__aeabi_fdiv>
 8000ed8:	6030      	str	r0, [r6, #0]
		 return;
}
 8000eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08000ee0 <eSetAinCalPoint>:
	if ( PointNumber < xAinData[ name ].coof_count)
 8000ee0:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <eSetAinCalPoint+0x54>)
 8000ee2:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d801      	bhi.n	8000eee <eSetAinCalPoint+0xe>
		res = CAL_OVERWRITE_ERROR;
 8000eea:	2002      	movs	r0, #2
}
 8000eec:	4770      	bx	lr
{
 8000eee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ef0:	b083      	sub	sp, #12
 8000ef2:	460d      	mov	r5, r1
		uint16_t index = PointNumber + xAinData[ name ].index;
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <eSetAinCalPoint+0x54>)
 8000ef6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8000efa:	7844      	ldrb	r4, [r0, #1]
 8000efc:	4422      	add	r2, r4
 8000efe:	b294      	uxth	r4, r2
		vABLineKoofFinde ( &xKoofData[index].k, &xKoofData[index].b,
 8000f00:	0067      	lsls	r7, r4, #1
 8000f02:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8000f06:	0080      	lsls	r0, r0, #2
 8000f08:	4e0b      	ldr	r6, [pc, #44]	; (8000f38 <eSetAinCalPoint+0x58>)
 8000f0a:	f100 0108 	add.w	r1, r0, #8
 8000f0e:	3004      	adds	r0, #4
 8000f10:	68ab      	ldr	r3, [r5, #8]
 8000f12:	9301      	str	r3, [sp, #4]
 8000f14:	682b      	ldr	r3, [r5, #0]
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	68eb      	ldr	r3, [r5, #12]
 8000f1a:	686a      	ldr	r2, [r5, #4]
 8000f1c:	4431      	add	r1, r6
 8000f1e:	4430      	add	r0, r6
 8000f20:	f7ff ffac 	bl	8000e7c <vABLineKoofFinde>
		xKoofData[index].data = cal_point[ 1 ].X;
 8000f24:	68eb      	ldr	r3, [r5, #12]
 8000f26:	443c      	add	r4, r7
 8000f28:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
	CAL_ERROR_CODE res = CAL_SUCCESS;
 8000f2c:	2000      	movs	r0, #0
}
 8000f2e:	b003      	add	sp, #12
 8000f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200000a0 	.word	0x200000a0
 8000f38:	200000a8 	.word	0x200000a8

08000f3c <eDinConfig>:
#endif
/*
 *
 */
DIN_FUNCTION_ERROR_t eDinConfig( uint8_t ucCh, DIN_INPUT_TYPE inType, uint32_t ulHFront, uint32_t ulLFront)
{
 8000f3c:	b570      	push	{r4, r5, r6, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	461d      	mov	r5, r3
	DIN_FUNCTION_ERROR_t eRes = DIN_WRONG_CHANNEL_NUMBER ;
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f42:	2300      	movs	r3, #0
 8000f44:	9301      	str	r3, [sp, #4]
 8000f46:	9303      	str	r3, [sp, #12]
	if ( ucCh < DIN_CHANNEL)
 8000f48:	280b      	cmp	r0, #11
 8000f4a:	d827      	bhi.n	8000f9c <eDinConfig+0x60>
 8000f4c:	4604      	mov	r4, r0
 8000f4e:	4616      	mov	r6, r2
	{
		xDinConfig[ucCh].eInputType = inType;
 8000f50:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <eDinConfig+0x64>)
 8000f52:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8000f56:	7399      	strb	r1, [r3, #14]
		xDinConfig[ucCh].ucValue 	= (xDinConfig[ucCh].eInputType == DIN_CONFIG_POSITIVE ) ? 0U : 1U;
 8000f58:	1e4a      	subs	r2, r1, #1
 8000f5a:	bf18      	it	ne
 8000f5c:	2201      	movne	r2, #1
 8000f5e:	731a      	strb	r2, [r3, #12]
		GPIO_InitStruct.Pin 		= xDinPortConfig[ucCh].Pin;
 8000f60:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <eDinConfig+0x68>)
 8000f62:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 8000f66:	9300      	str	r3, [sp, #0]

		if ( xDinConfig[ucCh].eInputType == RPM_CONFIG )
 8000f68:	2902      	cmp	r1, #2
 8000f6a:	d011      	beq.n	8000f90 <eDinConfig+0x54>
		{
			xDinConfig[ucCh].eInputType = DIN_CONFIG_POSITIVE;
		}
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	9302      	str	r3, [sp, #8]
		HAL_GPIO_Init(xDinPortConfig[ucCh].GPIOx,&GPIO_InitStruct);
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <eDinConfig+0x68>)
 8000f72:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8000f76:	4669      	mov	r1, sp
 8000f78:	6858      	ldr	r0, [r3, #4]
 8000f7a:	f001 fdbf 	bl	8002afc <HAL_GPIO_Init>
		xDinConfig[ucCh].ulHighCounter = ulHFront;
 8000f7e:	4808      	ldr	r0, [pc, #32]	; (8000fa0 <eDinConfig+0x64>)
 8000f80:	eb00 1404 	add.w	r4, r0, r4, lsl #4
 8000f84:	60a6      	str	r6, [r4, #8]
		xDinConfig[ucCh].ulLowCounter = ulLFront;
 8000f86:	6065      	str	r5, [r4, #4]
		xDinConfig[ucCh].ucTempValue = 0U;
 8000f88:	2000      	movs	r0, #0
 8000f8a:	7360      	strb	r0, [r4, #13]
		eRes = DIN_CONFIG_OK;
	}
	return ( eRes );
}
 8000f8c:	b004      	add	sp, #16
 8000f8e:	bd70      	pop	{r4, r5, r6, pc}
			xDinConfig[ucCh].eInputType = DIN_CONFIG_POSITIVE;
 8000f90:	4b03      	ldr	r3, [pc, #12]	; (8000fa0 <eDinConfig+0x64>)
 8000f92:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8000f96:	2201      	movs	r2, #1
 8000f98:	739a      	strb	r2, [r3, #14]
 8000f9a:	e7e7      	b.n	8000f6c <eDinConfig+0x30>
	DIN_FUNCTION_ERROR_t eRes = DIN_WRONG_CHANNEL_NUMBER ;
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	e7f5      	b.n	8000f8c <eDinConfig+0x50>
 8000fa0:	20000380 	.word	0x20000380
 8000fa4:	08007b78 	.word	0x08007b78

08000fa8 <vADCReady>:
	{
		 ADC_OLD_RAW[i] = 0x00;
	}
}
void vADCReady()
{
 8000fa8:	b510      	push	{r4, lr}
	 static portBASE_TYPE xHigherPriorityTaskWoken;
	 xHigherPriorityTaskWoken = pdFALSE;
 8000faa:	4c0b      	ldr	r4, [pc, #44]	; (8000fd8 <vADCReady+0x30>)
 8000fac:	2300      	movs	r3, #0
 8000fae:	6023      	str	r3, [r4, #0]
	 xEventGroupSetBitsFromISR(xSystemEventGroupHandle, AIN_READY, &xHigherPriorityTaskWoken );
 8000fb0:	4622      	mov	r2, r4
 8000fb2:	2102      	movs	r1, #2
 8000fb4:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <vADCReady+0x34>)
 8000fb6:	6818      	ldr	r0, [r3, #0]
 8000fb8:	f004 fcde 	bl	8005978 <xEventGroupSetBitsFromISR>
	 portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 8000fbc:	6823      	ldr	r3, [r4, #0]
 8000fbe:	b14b      	cbz	r3, 8000fd4 <vADCReady+0x2c>
 8000fc0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000fc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fc8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000fcc:	f3bf 8f4f 	dsb	sy
 8000fd0:	f3bf 8f6f 	isb	sy
	 return;
}
 8000fd4:	bd10      	pop	{r4, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000440 	.word	0x20000440
 8000fdc:	20000444 	.word	0x20000444

08000fe0 <vGetAverDataFromRAW>:
 /*
  * Функция вытаскивает из входного буфера Indata  (размером FrameSize*BufferSize) со смещением InIndex FrameSize отсчетов,
  * счетает среднее арефмитическое и записывает в буффер OutData со смещением OutIndex
  */
  void vGetAverDataFromRAW(uint16_t * InData, uint16_t *OutData, uint8_t InIndex, uint8_t OutIndex, uint8_t Size, uint16_t BufferSize)
 {
 8000fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	f89d 5020 	ldrb.w	r5, [sp, #32]
 	volatile uint32_t temp;
 	for (uint8_t i=0; i<Size; i++ )
 8000fea:	b345      	cbz	r5, 800103e <vGetAverDataFromRAW+0x5e>
 8000fec:	eb01 0e43 	add.w	lr, r1, r3, lsl #1
 8000ff0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8000ff4:	3d01      	subs	r5, #1
 8000ff6:	b2ec      	uxtb	r4, r5
 8000ff8:	4423      	add	r3, r4
 8000ffa:	3102      	adds	r1, #2
 8000ffc:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 8001000:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
 8001004:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 	{
 		temp = 0;
 8001008:	2700      	movs	r7, #0
 800100a:	f04f 0803 	mov.w	r8, #3
 		for (uint8_t j=0;j < ADC_FRAME_SIZE; j++ )
 		{
 		  temp += (InData[ InIndex + i + j * BufferSize ]);
 		}
 		OutData[ OutIndex + i ] = temp / ADC_FRAME_SIZE;
 800100e:	4d0d      	ldr	r5, [pc, #52]	; (8001044 <vGetAverDataFromRAW+0x64>)
 8001010:	e008      	b.n	8001024 <vGetAverDataFromRAW+0x44>
 8001012:	9b01      	ldr	r3, [sp, #4]
 8001014:	fba5 2303 	umull	r2, r3, r5, r3
 8001018:	085b      	lsrs	r3, r3, #1
 800101a:	f82e 3b02 	strh.w	r3, [lr], #2
 	for (uint8_t i=0; i<Size; i++ )
 800101e:	3002      	adds	r0, #2
 8001020:	45a6      	cmp	lr, r4
 8001022:	d00c      	beq.n	800103e <vGetAverDataFromRAW+0x5e>
 		temp = 0;
 8001024:	9701      	str	r7, [sp, #4]
 8001026:	4601      	mov	r1, r0
 8001028:	4643      	mov	r3, r8
 		  temp += (InData[ InIndex + i + j * BufferSize ]);
 800102a:	9e01      	ldr	r6, [sp, #4]
 800102c:	880a      	ldrh	r2, [r1, #0]
 800102e:	4432      	add	r2, r6
 8001030:	9201      	str	r2, [sp, #4]
 		for (uint8_t j=0;j < ADC_FRAME_SIZE; j++ )
 8001032:	3b01      	subs	r3, #1
 8001034:	4461      	add	r1, ip
 8001036:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800103a:	d1f6      	bne.n	800102a <vGetAverDataFromRAW+0x4a>
 800103c:	e7e9      	b.n	8001012 <vGetAverDataFromRAW+0x32>
 	}
 	return;
 }
 800103e:	b002      	add	sp, #8
 8001040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001044:	aaaaaaab 	.word	0xaaaaaaab

08001048 <vRCFilter>:

#define A 200


 uint16_t vRCFilter( uint16_t input,uint16_t * old_output)
{
 8001048:	b084      	sub	sp, #16

	volatile uint32_t new = input;
 800104a:	9003      	str	r0, [sp, #12]
	volatile uint32_t old = *old_output;
 800104c:	880b      	ldrh	r3, [r1, #0]
 800104e:	9302      	str	r3, [sp, #8]
	volatile uint16_t  output =  ( A * old + (256-A)*new )>>8;
 8001050:	9a02      	ldr	r2, [sp, #8]
 8001052:	9b03      	ldr	r3, [sp, #12]
 8001054:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	20c8      	movs	r0, #200	; 0xc8
 800105c:	fb00 3302 	mla	r3, r0, r2, r3
 8001060:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8001064:	f8ad 3006 	strh.w	r3, [sp, #6]
	*old_output = output;
 8001068:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800106c:	800b      	strh	r3, [r1, #0]
	return output;
 800106e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
 8001072:	b280      	uxth	r0, r0
 8001074:	b004      	add	sp, #16
 8001076:	4770      	bx	lr

08001078 <vAinGetData>:

uint16_t vAinGetData(AIN_INPUT_NAME channel)
 {
 8001078:	b570      	push	{r4, r5, r6, lr}
 800107a:	4604      	mov	r4, r0
	 float temp;
	 ADC_RAW[channel] = vRCFilter(ADC_RAW[channel], &ADC_OLD_RAW[channel]);
 800107c:	4e18      	ldr	r6, [pc, #96]	; (80010e0 <vAinGetData+0x68>)
 800107e:	4919      	ldr	r1, [pc, #100]	; (80010e4 <vAinGetData+0x6c>)
 8001080:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8001084:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
 8001088:	f7ff ffde 	bl	8001048 <vRCFilter>
 800108c:	4605      	mov	r5, r0
 800108e:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
	 temp =  (float)(ADC_RAW[channel]*RA)/(4095- ADC_RAW[channel]);
 8001092:	f7ff fad9 	bl	8000648 <__aeabi_i2d>
 8001096:	a310      	add	r3, pc, #64	; (adr r3, 80010d8 <vAinGetData+0x60>)
 8001098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109c:	f7ff f858 	bl	8000150 <__aeabi_dmul>
 80010a0:	f7ff fb3c 	bl	800071c <__aeabi_d2f>
 80010a4:	4604      	mov	r4, r0
 80010a6:	f5c5 607f 	rsb	r0, r5, #4080	; 0xff0
 80010aa:	300f      	adds	r0, #15
 80010ac:	f7ff fc40 	bl	8000930 <__aeabi_i2f>
 80010b0:	4601      	mov	r1, r0
 80010b2:	4620      	mov	r0, r4
 80010b4:	f7ff fd44 	bl	8000b40 <__aeabi_fdiv>
 80010b8:	4604      	mov	r4, r0
	 if (temp > 35000)
 80010ba:	490b      	ldr	r1, [pc, #44]	; (80010e8 <vAinGetData+0x70>)
 80010bc:	f7ff fe48 	bl	8000d50 <__aeabi_fcmpgt>
 80010c0:	b920      	cbnz	r0, 80010cc <vAinGetData+0x54>
		 return 35000;
	 else
	 return (uint16_t)temp;
 80010c2:	4620      	mov	r0, r4
 80010c4:	f7ff fe4e 	bl	8000d64 <__aeabi_f2uiz>
 80010c8:	b280      	uxth	r0, r0
 }
 80010ca:	bd70      	pop	{r4, r5, r6, pc}
		 return 35000;
 80010cc:	f648 00b8 	movw	r0, #35000	; 0x88b8
 80010d0:	e7fb      	b.n	80010ca <vAinGetData+0x52>
 80010d2:	bf00      	nop
 80010d4:	f3af 8000 	nop.w
 80010d8:	00000000 	.word	0x00000000
 80010dc:	40c38800 	.word	0x40c38800
 80010e0:	20000370 	.word	0x20000370
 80010e4:	20000368 	.word	0x20000368
 80010e8:	4708b800 	.word	0x4708b800

080010ec <uiGetDinMask>:
 }
 /*
  *
  */
 uint32_t uiGetDinMask()
 {
 80010ec:	b082      	sub	sp, #8
 	volatile uint32_t uiMask = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	9301      	str	r3, [sp, #4]
 	for (int8_t i = (DIN_CHANNEL -1);  i > -1 ; i--)
 80010f2:	4a09      	ldr	r2, [pc, #36]	; (8001118 <uiGetDinMask+0x2c>)
 80010f4:	f1a2 00c0 	sub.w	r0, r2, #192	; 0xc0
 	{
 		uiMask <<=1;
 80010f8:	9b01      	ldr	r3, [sp, #4]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	9301      	str	r3, [sp, #4]
 		uiMask |= ( xDinConfig[ i ].ucValue & 0x01 );
 80010fe:	9901      	ldr	r1, [sp, #4]
 8001100:	f892 30bc 	ldrb.w	r3, [r2, #188]	; 0xbc
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	430b      	orrs	r3, r1
 800110a:	9301      	str	r3, [sp, #4]
 	for (int8_t i = (DIN_CHANNEL -1);  i > -1 ; i--)
 800110c:	3a10      	subs	r2, #16
 800110e:	4282      	cmp	r2, r0
 8001110:	d1f2      	bne.n	80010f8 <uiGetDinMask+0xc>
 	}
 	return ( uiMask );
 8001112:	9801      	ldr	r0, [sp, #4]
 }
 8001114:	b002      	add	sp, #8
 8001116:	4770      	bx	lr
 8001118:	20000380 	.word	0x20000380

0800111c <vDTask>:
 {
 800111c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001120:	b089      	sub	sp, #36	; 0x24
	  xSystemEventGroupHandle =  xGetSystemControlEvent();
 8001122:	f000 fa81 	bl	8001628 <xGetSystemControlEvent>
 8001126:	4b8e      	ldr	r3, [pc, #568]	; (8001360 <vDTask+0x244>)
 8001128:	6018      	str	r0, [r3, #0]
	eDinConfig( INPUT_1, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 800112a:	230a      	movs	r3, #10
 800112c:	461a      	mov	r2, r3
 800112e:	2100      	movs	r1, #0
 8001130:	4608      	mov	r0, r1
 8001132:	f7ff ff03 	bl	8000f3c <eDinConfig>
	eDinConfig( INPUT_2, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 8001136:	230a      	movs	r3, #10
 8001138:	461a      	mov	r2, r3
 800113a:	2100      	movs	r1, #0
 800113c:	2001      	movs	r0, #1
 800113e:	f7ff fefd 	bl	8000f3c <eDinConfig>
	eDinConfig( INPUT_3, DIN_CONFIG_NEGATIVE, DEF_H_FRONT, DEF_L_FRONT );
 8001142:	230a      	movs	r3, #10
 8001144:	461a      	mov	r2, r3
 8001146:	2100      	movs	r1, #0
 8001148:	2002      	movs	r0, #2
 800114a:	f7ff fef7 	bl	8000f3c <eDinConfig>
	eDinConfig( INPUT_4, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 800114e:	230a      	movs	r3, #10
 8001150:	461a      	mov	r2, r3
 8001152:	2100      	movs	r1, #0
 8001154:	2003      	movs	r0, #3
 8001156:	f7ff fef1 	bl	8000f3c <eDinConfig>
	eDinConfig( INPUT_5, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 800115a:	230a      	movs	r3, #10
 800115c:	461a      	mov	r2, r3
 800115e:	2100      	movs	r1, #0
 8001160:	2004      	movs	r0, #4
 8001162:	f7ff feeb 	bl	8000f3c <eDinConfig>
	eDinConfig( INPUT_6, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 8001166:	230a      	movs	r3, #10
 8001168:	461a      	mov	r2, r3
 800116a:	2100      	movs	r1, #0
 800116c:	2005      	movs	r0, #5
 800116e:	f7ff fee5 	bl	8000f3c <eDinConfig>
	eDinConfig( INPUT_7, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 8001172:	230a      	movs	r3, #10
 8001174:	461a      	mov	r2, r3
 8001176:	2100      	movs	r1, #0
 8001178:	2006      	movs	r0, #6
 800117a:	f7ff fedf 	bl	8000f3c <eDinConfig>
	eDinConfig( INPUT_8, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 800117e:	230a      	movs	r3, #10
 8001180:	461a      	mov	r2, r3
 8001182:	2100      	movs	r1, #0
 8001184:	2007      	movs	r0, #7
 8001186:	f7ff fed9 	bl	8000f3c <eDinConfig>
	eDinConfig( INPUT_9, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 800118a:	230a      	movs	r3, #10
 800118c:	461a      	mov	r2, r3
 800118e:	2100      	movs	r1, #0
 8001190:	2008      	movs	r0, #8
 8001192:	f7ff fed3 	bl	8000f3c <eDinConfig>
	eDinConfig( INPUT_10, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 8001196:	230a      	movs	r3, #10
 8001198:	461a      	mov	r2, r3
 800119a:	2100      	movs	r1, #0
 800119c:	2009      	movs	r0, #9
 800119e:	f7ff fecd 	bl	8000f3c <eDinConfig>
	eDinConfig( INPUT_11, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 80011a2:	230a      	movs	r3, #10
 80011a4:	461a      	mov	r2, r3
 80011a6:	2100      	movs	r1, #0
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff fec7 	bl	8000f3c <eDinConfig>
	eDinConfig( INPUT_12, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 80011ae:	230a      	movs	r3, #10
 80011b0:	461a      	mov	r2, r3
 80011b2:	2100      	movs	r1, #0
 80011b4:	200b      	movs	r0, #11
 80011b6:	f7ff fec1 	bl	8000f3c <eDinConfig>
	eAinCalDataConfig(AIN_2,11);
 80011ba:	210b      	movs	r1, #11
 80011bc:	2001      	movs	r0, #1
 80011be:	f7ff fe33 	bl	8000e28 <eAinCalDataConfig>
		for (int i = 0;i<11;i++)
 80011c2:	4c68      	ldr	r4, [pc, #416]	; (8001364 <vDTask+0x248>)
	eAinCalDataConfig(AIN_2,11);
 80011c4:	2500      	movs	r5, #0
			eSetAinCalPoint(AIN_2,&d[0],i);
 80011c6:	2601      	movs	r6, #1
			d[0].X = B57164CalPoint[i][1];
 80011c8:	8860      	ldrh	r0, [r4, #2]
 80011ca:	f7ff fbad 	bl	8000928 <__aeabi_ui2f>
 80011ce:	9005      	str	r0, [sp, #20]
			d[0].Y = B57164CalPoint[i][0];
 80011d0:	8820      	ldrh	r0, [r4, #0]
 80011d2:	f7ff fba9 	bl	8000928 <__aeabi_ui2f>
 80011d6:	9004      	str	r0, [sp, #16]
			d[1].X = B57164CalPoint[i+1][1];
 80011d8:	88e0      	ldrh	r0, [r4, #6]
 80011da:	f7ff fba5 	bl	8000928 <__aeabi_ui2f>
 80011de:	9007      	str	r0, [sp, #28]
			d[1].Y = B57164CalPoint[i+1][0];
 80011e0:	f834 0f04 	ldrh.w	r0, [r4, #4]!
 80011e4:	f7ff fba0 	bl	8000928 <__aeabi_ui2f>
 80011e8:	9006      	str	r0, [sp, #24]
			eSetAinCalPoint(AIN_2,&d[0],i);
 80011ea:	b2aa      	uxth	r2, r5
 80011ec:	a904      	add	r1, sp, #16
 80011ee:	4630      	mov	r0, r6
 80011f0:	f7ff fe76 	bl	8000ee0 <eSetAinCalPoint>
		for (int i = 0;i<11;i++)
 80011f4:	3501      	adds	r5, #1
 80011f6:	2d0b      	cmp	r5, #11
 80011f8:	d1e6      	bne.n	80011c8 <vDTask+0xac>
		eAinCalDataConfig(AIN_3,20);
 80011fa:	2114      	movs	r1, #20
 80011fc:	2002      	movs	r0, #2
 80011fe:	f7ff fe13 	bl	8000e28 <eAinCalDataConfig>
		for (int i = 0;i<19;i++)
 8001202:	4c59      	ldr	r4, [pc, #356]	; (8001368 <vDTask+0x24c>)
		eAinCalDataConfig(AIN_3,20);
 8001204:	2500      	movs	r5, #0
			eSetAinCalPoint(AIN_3,&d[0],i);
 8001206:	2602      	movs	r6, #2
			d[0].X = CalPoint[i][1];
 8001208:	8860      	ldrh	r0, [r4, #2]
 800120a:	f7ff fb8d 	bl	8000928 <__aeabi_ui2f>
 800120e:	9005      	str	r0, [sp, #20]
			d[0].Y = CalPoint[i][0];
 8001210:	8820      	ldrh	r0, [r4, #0]
 8001212:	f7ff fb89 	bl	8000928 <__aeabi_ui2f>
 8001216:	9004      	str	r0, [sp, #16]
			d[1].X = CalPoint[i+1][1];
 8001218:	88e0      	ldrh	r0, [r4, #6]
 800121a:	f7ff fb85 	bl	8000928 <__aeabi_ui2f>
 800121e:	9007      	str	r0, [sp, #28]
			d[1].Y = CalPoint[i+1][0];
 8001220:	f834 0f04 	ldrh.w	r0, [r4, #4]!
 8001224:	f7ff fb80 	bl	8000928 <__aeabi_ui2f>
 8001228:	9006      	str	r0, [sp, #24]
			eSetAinCalPoint(AIN_3,&d[0],i);
 800122a:	b2aa      	uxth	r2, r5
 800122c:	a904      	add	r1, sp, #16
 800122e:	4630      	mov	r0, r6
 8001230:	f7ff fe56 	bl	8000ee0 <eSetAinCalPoint>
		for (int i = 0;i<19;i++)
 8001234:	3501      	adds	r5, #1
 8001236:	2d13      	cmp	r5, #19
 8001238:	d1e6      	bne.n	8001208 <vDTask+0xec>
		 ADC_OLD_RAW[i] = 0x00;
 800123a:	4a4c      	ldr	r2, [pc, #304]	; (800136c <vDTask+0x250>)
 800123c:	2300      	movs	r3, #0
 800123e:	8013      	strh	r3, [r2, #0]
 8001240:	8053      	strh	r3, [r2, #2]
 8001242:	8093      	strh	r3, [r2, #4]
	  uint8_t init_timer = 0;
 8001244:	9303      	str	r3, [sp, #12]
		  	    timer = 0U;
 8001246:	4698      	mov	r8, r3
		  	    		HAL_GPIO_WritePin( LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 8001248:	f04f 0901 	mov.w	r9, #1
		  	    			HAL_GPIO_WritePin( LED_G_GPIO_Port, LED_G_Pin,(usGetReg(WORK_TEMP) < usGetReg(AIR_TEMP)) ? GPIO_PIN_SET :GPIO_PIN_RESET  );
 800124c:	f04f 0a02 	mov.w	sl, #2
		    HAL_ADC_Start_DMA(&hadc1,&ADC1_DMABuffer[0], 9);
 8001250:	f8df b11c 	ldr.w	fp, [pc, #284]	; 8001370 <vDTask+0x254>
}
 8001254:	e156      	b.n	8001504 <vDTask+0x3e8>
			  timeout = usGetConnection() ? 250 : 0;
 8001256:	f000 fcf5 	bl	8001c44 <usGetConnection>
 800125a:	2800      	cmp	r0, #0
 800125c:	f000 8194 	beq.w	8001588 <vDTask+0x46c>
 8001260:	23fa      	movs	r3, #250	; 0xfa
 8001262:	4a44      	ldr	r2, [pc, #272]	; (8001374 <vDTask+0x258>)
 8001264:	8013      	strh	r3, [r2, #0]
 8001266:	461a      	mov	r2, r3
 8001268:	e158      	b.n	800151c <vDTask+0x400>
		  	    timer = 0U;
 800126a:	4b43      	ldr	r3, [pc, #268]	; (8001378 <vDTask+0x25c>)
 800126c:	f8a3 8000 	strh.w	r8, [r3]
		  	     HAL_GPIO_TogglePin( LED_G_GPIO_Port, LED_G_Pin);
 8001270:	4c42      	ldr	r4, [pc, #264]	; (800137c <vDTask+0x260>)
 8001272:	2110      	movs	r1, #16
 8001274:	4620      	mov	r0, r4
 8001276:	f001 fd87 	bl	8002d88 <HAL_GPIO_TogglePin>
		  	     HAL_GPIO_WritePin( LED_R_GPIO_Port, LED_R_Pin, HAL_GPIO_ReadPin( LED_G_GPIO_Port, LED_G_Pin));
 800127a:	2110      	movs	r1, #16
 800127c:	4620      	mov	r0, r4
 800127e:	f001 fd77 	bl	8002d70 <HAL_GPIO_ReadPin>
 8001282:	4602      	mov	r2, r0
 8001284:	2120      	movs	r1, #32
 8001286:	4620      	mov	r0, r4
 8001288:	f001 fd78 	bl	8002d7c <HAL_GPIO_WritePin>
 800128c:	e14f      	b.n	800152e <vDTask+0x412>
		  		   HAL_GPIO_WritePin( LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET );
 800128e:	4c3b      	ldr	r4, [pc, #236]	; (800137c <vDTask+0x260>)
 8001290:	4642      	mov	r2, r8
 8001292:	2120      	movs	r1, #32
 8001294:	4620      	mov	r0, r4
 8001296:	f001 fd71 	bl	8002d7c <HAL_GPIO_WritePin>
		  	       HAL_GPIO_WritePin( LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET );
 800129a:	4642      	mov	r2, r8
 800129c:	2110      	movs	r1, #16
 800129e:	4620      	mov	r0, r4
 80012a0:	f001 fd6c 	bl	8002d7c <HAL_GPIO_WritePin>
 80012a4:	e143      	b.n	800152e <vDTask+0x412>
		  	    		HAL_GPIO_WritePin( LED_R_GPIO_Port, LED_R_Pin, (usGetReg(MODE) != 1) ? GPIO_PIN_SET: GPIO_PIN_RESET);
 80012a6:	4640      	mov	r0, r8
 80012a8:	f000 fcd2 	bl	8001c50 <usGetReg>
 80012ac:	4c33      	ldr	r4, [pc, #204]	; (800137c <vDTask+0x260>)
 80012ae:	1e42      	subs	r2, r0, #1
 80012b0:	bf18      	it	ne
 80012b2:	2201      	movne	r2, #1
 80012b4:	2120      	movs	r1, #32
 80012b6:	4620      	mov	r0, r4
 80012b8:	f001 fd60 	bl	8002d7c <HAL_GPIO_WritePin>
		  	    		HAL_GPIO_WritePin( LED_G_GPIO_Port, LED_G_Pin, (usGetReg(MODE) != 1) ? GPIO_PIN_RESET: GPIO_PIN_SET);
 80012bc:	4640      	mov	r0, r8
 80012be:	f000 fcc7 	bl	8001c50 <usGetReg>
 80012c2:	2801      	cmp	r0, #1
 80012c4:	bf14      	ite	ne
 80012c6:	2200      	movne	r2, #0
 80012c8:	2201      	moveq	r2, #1
 80012ca:	2110      	movs	r1, #16
 80012cc:	4620      	mov	r0, r4
 80012ce:	f001 fd55 	bl	8002d7c <HAL_GPIO_WritePin>
 80012d2:	e12c      	b.n	800152e <vDTask+0x412>
		  	    				   timerR =0;
 80012d4:	4b2a      	ldr	r3, [pc, #168]	; (8001380 <vDTask+0x264>)
 80012d6:	f8a3 8000 	strh.w	r8, [r3]
		  	    				   HAL_GPIO_TogglePin( LED_G_GPIO_Port, LED_G_Pin);
 80012da:	2110      	movs	r1, #16
 80012dc:	4827      	ldr	r0, [pc, #156]	; (800137c <vDTask+0x260>)
 80012de:	f001 fd53 	bl	8002d88 <HAL_GPIO_TogglePin>
 80012e2:	e124      	b.n	800152e <vDTask+0x412>
		  	    			HAL_GPIO_WritePin( LED_G_GPIO_Port, LED_G_Pin,(usGetReg(WORK_TEMP) < usGetReg(AIR_TEMP)) ? GPIO_PIN_SET :GPIO_PIN_RESET  );
 80012e4:	4650      	mov	r0, sl
 80012e6:	f000 fcb3 	bl	8001c50 <usGetReg>
 80012ea:	4604      	mov	r4, r0
 80012ec:	2003      	movs	r0, #3
 80012ee:	f000 fcaf 	bl	8001c50 <usGetReg>
 80012f2:	4284      	cmp	r4, r0
 80012f4:	bf2c      	ite	cs
 80012f6:	2200      	movcs	r2, #0
 80012f8:	2201      	movcc	r2, #1
 80012fa:	2110      	movs	r1, #16
 80012fc:	481f      	ldr	r0, [pc, #124]	; (800137c <vDTask+0x260>)
 80012fe:	f001 fd3d 	bl	8002d7c <HAL_GPIO_WritePin>
 8001302:	e114      	b.n	800152e <vDTask+0x412>
				   DataReadyFlag = 1;
 8001304:	4b1f      	ldr	r3, [pc, #124]	; (8001384 <vDTask+0x268>)
 8001306:	f883 9000 	strb.w	r9, [r3]
				   xEventGroupSetBits(xSystemEventGroupHandle, DIN_READY );
 800130a:	4649      	mov	r1, r9
 800130c:	4b14      	ldr	r3, [pc, #80]	; (8001360 <vDTask+0x244>)
 800130e:	6818      	ldr	r0, [r3, #0]
 8001310:	f004 fae4 	bl	80058dc <xEventGroupSetBits>
 8001314:	e11d      	b.n	8001552 <vDTask+0x436>
									if (xDinConfig[i].ulCounter > ( (xDinConfig[i].ucTempValue == GPIO_PIN_RESET) ? xDinConfig[i].ulHighCounter : xDinConfig[i].ulLowCounter ) )
 8001316:	6862      	ldr	r2, [r4, #4]
 8001318:	e016      	b.n	8001348 <vDTask+0x22c>
									xDinConfig[i].ulCounter = 0U;
 800131a:	f8c4 8000 	str.w	r8, [r4]
			for (uint8_t i = 0U; i < DIN_CHANNEL; i++)
 800131e:	3410      	adds	r4, #16
 8001320:	3508      	adds	r5, #8
 8001322:	42bc      	cmp	r4, r7
 8001324:	d030      	beq.n	8001388 <vDTask+0x26c>
						if ( xDinConfig[i].eInputType != RPM_CONFIG )
 8001326:	4626      	mov	r6, r4
 8001328:	7ba3      	ldrb	r3, [r4, #14]
 800132a:	2b02      	cmp	r3, #2
 800132c:	d0f7      	beq.n	800131e <vDTask+0x202>
							uint8_t uсDinState = HAL_GPIO_ReadPin( xDinPortConfig[i].GPIOx, xDinPortConfig[i].Pin);
 800132e:	8829      	ldrh	r1, [r5, #0]
 8001330:	6868      	ldr	r0, [r5, #4]
 8001332:	f001 fd1d 	bl	8002d70 <HAL_GPIO_ReadPin>
							if (uсDinState != xDinConfig[i].ucTempValue )
 8001336:	7b62      	ldrb	r2, [r4, #13]
 8001338:	4282      	cmp	r2, r0
 800133a:	d0ee      	beq.n	800131a <vDTask+0x1fe>
									xDinConfig[i].ulCounter ++ ;
 800133c:	6823      	ldr	r3, [r4, #0]
 800133e:	3301      	adds	r3, #1
 8001340:	6023      	str	r3, [r4, #0]
									if (xDinConfig[i].ulCounter > ( (xDinConfig[i].ucTempValue == GPIO_PIN_RESET) ? xDinConfig[i].ulHighCounter : xDinConfig[i].ulLowCounter ) )
 8001342:	2a00      	cmp	r2, #0
 8001344:	d1e7      	bne.n	8001316 <vDTask+0x1fa>
 8001346:	68a2      	ldr	r2, [r4, #8]
 8001348:	4293      	cmp	r3, r2
 800134a:	d9e8      	bls.n	800131e <vDTask+0x202>
												xDinConfig[i].ucValue = uсDinState  ^ ( (~xDinConfig[i].eInputType) & 0x1);
 800134c:	7bb3      	ldrb	r3, [r6, #14]
 800134e:	f083 0301 	eor.w	r3, r3, #1
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	4043      	eors	r3, r0
 8001358:	7333      	strb	r3, [r6, #12]
												xDinConfig[i].ucTempValue = uсDinState ;
 800135a:	7370      	strb	r0, [r6, #13]
 800135c:	e7df      	b.n	800131e <vDTask+0x202>
 800135e:	bf00      	nop
 8001360:	20000444 	.word	0x20000444
 8001364:	08007afc 	.word	0x08007afc
 8001368:	08007b28 	.word	0x08007b28
 800136c:	20000368 	.word	0x20000368
 8001370:	20000354 	.word	0x20000354
 8001374:	20000378 	.word	0x20000378
 8001378:	2000037a 	.word	0x2000037a
 800137c:	40010800 	.word	0x40010800
 8001380:	2000037c 	.word	0x2000037c
 8001384:	20000376 	.word	0x20000376
			xEventGroupWaitBits(xSystemEventGroupHandle,  AIN_READY,  pdFALSE, pdTRUE, portMAX_DELAY );
 8001388:	f04f 33ff 	mov.w	r3, #4294967295
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	464b      	mov	r3, r9
 8001390:	4642      	mov	r2, r8
 8001392:	4651      	mov	r1, sl
 8001394:	488f      	ldr	r0, [pc, #572]	; (80015d4 <vDTask+0x4b8>)
 8001396:	6800      	ldr	r0, [r0, #0]
 8001398:	f004 fa15 	bl	80057c6 <xEventGroupWaitBits>
			HAL_ADC_Stop_DMA(&hadc1);
 800139c:	488e      	ldr	r0, [pc, #568]	; (80015d8 <vDTask+0x4bc>)
 800139e:	f001 f993 	bl	80026c8 <HAL_ADC_Stop_DMA>
			vGetAverDataFromRAW(&ADC1_DMABuffer[0],&ADC_RAW[0],0,0,3,3);
 80013a2:	4c8e      	ldr	r4, [pc, #568]	; (80015dc <vDTask+0x4c0>)
 80013a4:	2303      	movs	r3, #3
 80013a6:	9301      	str	r3, [sp, #4]
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	4643      	mov	r3, r8
 80013ac:	4642      	mov	r2, r8
 80013ae:	4621      	mov	r1, r4
 80013b0:	4658      	mov	r0, fp
 80013b2:	f7ff fe15 	bl	8000fe0 <vGetAverDataFromRAW>
			vSetReg(DEVICE_TYPE,  (uiGetDinMask() & DEVICE_MODE_MASK)>>DEVICE_MODE_OFFSET );
 80013b6:	f7ff fe99 	bl	80010ec <uiGetDinMask>
 80013ba:	f3c0 1101 	ubfx	r1, r0, #4, #2
 80013be:	2006      	movs	r0, #6
 80013c0:	f000 fc60 	bl	8001c84 <vSetReg>
			vSetReg(DEVICE_COUNT, (uiGetDinMask() & DEVICE_ADDR_MASK)>>DEVICE_ADDR_OFFSET);
 80013c4:	f7ff fe92 	bl	80010ec <uiGetDinMask>
 80013c8:	f000 010f 	and.w	r1, r0, #15
 80013cc:	2005      	movs	r0, #5
 80013ce:	f000 fc59 	bl	8001c84 <vSetReg>
			vSetReg(CONTROL_MODE, (uiGetDinMask() & DEVICE_MASTER_CONTROL_MASK)>>DEVICE_MASTER_CONTROL_OFFSET);
 80013d2:	f7ff fe8b 	bl	80010ec <uiGetDinMask>
 80013d6:	f3c0 1180 	ubfx	r1, r0, #6, #1
 80013da:	2004      	movs	r0, #4
 80013dc:	f000 fc52 	bl	8001c84 <vSetReg>
			vSetReg(ERROR_MASTER_STATUS, (uiGetDinMask() & DEVICE_MASTER_TEMP_MASK)>>DEVICE_MASTER_TEMP_OFFSET);
 80013e0:	f7ff fe84 	bl	80010ec <uiGetDinMask>
 80013e4:	f3c0 11c0 	ubfx	r1, r0, #7, #1
 80013e8:	2007      	movs	r0, #7
 80013ea:	f000 fc4b 	bl	8001c84 <vSetReg>
			ADC_RAW[0] = vRCFilter(ADC_RAW[0], &ADC_OLD_RAW[0]);
 80013ee:	497c      	ldr	r1, [pc, #496]	; (80015e0 <vDTask+0x4c4>)
 80013f0:	8820      	ldrh	r0, [r4, #0]
 80013f2:	f7ff fe29 	bl	8001048 <vRCFilter>
 80013f6:	8020      	strh	r0, [r4, #0]
			vSetReg(WORK_TEMP , (config_temp-150)/115 +5);
 80013f8:	f640 6356 	movw	r3, #3670	; 0xe56
 80013fc:	4298      	cmp	r0, r3
 80013fe:	bf28      	it	cs
 8001400:	4618      	movcs	r0, r3
 8001402:	2896      	cmp	r0, #150	; 0x96
 8001404:	bf38      	it	cc
 8001406:	2096      	movcc	r0, #150	; 0x96
 8001408:	f1a0 0396 	sub.w	r3, r0, #150	; 0x96
 800140c:	4a75      	ldr	r2, [pc, #468]	; (80015e4 <vDTask+0x4c8>)
 800140e:	fb82 1203 	smull	r1, r2, r2, r3
 8001412:	17d9      	asrs	r1, r3, #31
 8001414:	ebc1 1162 	rsb	r1, r1, r2, asr #5
 8001418:	3105      	adds	r1, #5
 800141a:	b289      	uxth	r1, r1
 800141c:	4650      	mov	r0, sl
 800141e:	f000 fc31 	bl	8001c84 <vSetReg>
			vSetReg(MODE,(uiGetDinMask() & DEVICE_TYPE_MASK)>>DEVICE_TYPE_OFFSET);
 8001422:	f7ff fe63 	bl	80010ec <uiGetDinMask>
 8001426:	f3c0 2181 	ubfx	r1, r0, #10, #2
 800142a:	4640      	mov	r0, r8
 800142c:	f000 fc2a 	bl	8001c84 <vSetReg>
			vSetReg(FAN_SPEED_CONFIG,(uiGetDinMask() & DEVICE_FAN_MASK)>>DEVICE_FAN_OFFSET);
 8001430:	f7ff fe5c 	bl	80010ec <uiGetDinMask>
 8001434:	f3c0 2101 	ubfx	r1, r0, #8, #2
 8001438:	4648      	mov	r0, r9
 800143a:	f000 fc23 	bl	8001c84 <vSetReg>
			temp = vAinGetData(AIN_3);
 800143e:	4650      	mov	r0, sl
 8001440:	f7ff fe1a 	bl	8001078 <vAinGetData>
			if  ((temp>=35000) || (temp <3500))
 8001444:	f6a0 53ac 	subw	r3, r0, #3500	; 0xdac
 8001448:	b29b      	uxth	r3, r3
 800144a:	f647 320b 	movw	r2, #31499	; 0x7b0b
 800144e:	4293      	cmp	r3, r2
 8001450:	d93c      	bls.n	80014cc <vDTask+0x3b0>
				if ( usGetReg(ERROR_MASTER_STATUS) )
 8001452:	2007      	movs	r0, #7
 8001454:	f000 fbfc 	bl	8001c50 <usGetReg>
 8001458:	b9c0      	cbnz	r0, 800148c <vDTask+0x370>
				temp = vAinGetData(AIN_2);
 800145a:	4648      	mov	r0, r9
 800145c:	f7ff fe0c 	bl	8001078 <vAinGetData>
				if  ((temp<35000) && (temp >3500))
 8001460:	f6a0 53ad 	subw	r3, r0, #3501	; 0xdad
 8001464:	b29b      	uxth	r3, r3
 8001466:	f647 320a 	movw	r2, #31498	; 0x7b0a
 800146a:	4293      	cmp	r3, r2
 800146c:	d976      	bls.n	800155c <vDTask+0x440>
					vSetReg(AIR_TEMP, -1);
 800146e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001472:	2003      	movs	r0, #3
 8001474:	f000 fc06 	bl	8001c84 <vSetReg>
					vSetRegInput(ERROR_STATUS,usGetRegInput(ERROR_STATUS) | AIR_TEMP_ERROR);
 8001478:	2007      	movs	r0, #7
 800147a:	f000 fbf7 	bl	8001c6c <usGetRegInput>
 800147e:	f040 0102 	orr.w	r1, r0, #2
 8001482:	b289      	uxth	r1, r1
 8001484:	2007      	movs	r0, #7
 8001486:	f000 fbf7 	bl	8001c78 <vSetRegInput>
 800148a:	e034      	b.n	80014f6 <vDTask+0x3da>
					vSetRegInput(ERROR_STATUS,usGetRegInput(ERROR_STATUS) | AIR_TEMP_ERROR);
 800148c:	2007      	movs	r0, #7
 800148e:	f000 fbed 	bl	8001c6c <usGetRegInput>
 8001492:	f040 0102 	orr.w	r1, r0, #2
 8001496:	b289      	uxth	r1, r1
 8001498:	2007      	movs	r0, #7
 800149a:	f000 fbed 	bl	8001c78 <vSetRegInput>
				temp = vAinGetData(AIN_2);
 800149e:	4648      	mov	r0, r9
 80014a0:	f7ff fdea 	bl	8001078 <vAinGetData>
				if  ((temp<35000) && (temp >3500))
 80014a4:	f6a0 53ad 	subw	r3, r0, #3501	; 0xdad
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	f647 320a 	movw	r2, #31498	; 0x7b0a
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d8dd      	bhi.n	800146e <vDTask+0x352>
					vSetReg(AIR_TEMP, (uint16_t)fGetAinCalData(AIN_2,temp));
 80014b2:	f7ff fa39 	bl	8000928 <__aeabi_ui2f>
 80014b6:	4601      	mov	r1, r0
 80014b8:	4648      	mov	r0, r9
 80014ba:	f7ff fc73 	bl	8000da4 <fGetAinCalData>
 80014be:	f7ff fc51 	bl	8000d64 <__aeabi_f2uiz>
 80014c2:	b281      	uxth	r1, r0
 80014c4:	2003      	movs	r0, #3
 80014c6:	f000 fbdd 	bl	8001c84 <vSetReg>
					if (error_flag ==0)
 80014ca:	e014      	b.n	80014f6 <vDTask+0x3da>
					vSetReg(AIR_TEMP, (uint16_t)fGetAinCalData(AIN_3,temp));
 80014cc:	f7ff fa2c 	bl	8000928 <__aeabi_ui2f>
 80014d0:	4601      	mov	r1, r0
 80014d2:	4650      	mov	r0, sl
 80014d4:	f7ff fc66 	bl	8000da4 <fGetAinCalData>
 80014d8:	f7ff fc44 	bl	8000d64 <__aeabi_f2uiz>
 80014dc:	b281      	uxth	r1, r0
 80014de:	2003      	movs	r0, #3
 80014e0:	f000 fbd0 	bl	8001c84 <vSetReg>
					vSetRegInput(ERROR_STATUS,usGetRegInput(ERROR_STATUS) & ~AIR_TEMP_ERROR);
 80014e4:	2007      	movs	r0, #7
 80014e6:	f000 fbc1 	bl	8001c6c <usGetRegInput>
 80014ea:	f020 0102 	bic.w	r1, r0, #2
 80014ee:	b289      	uxth	r1, r1
 80014f0:	2007      	movs	r0, #7
 80014f2:	f000 fbc1 	bl	8001c78 <vSetRegInput>
			vSetRegInput(TYPE, (uiGetDinMask() & DEVICE_MODE_MASK)>>DEVICE_MODE_OFFSET );
 80014f6:	f7ff fdf9 	bl	80010ec <uiGetDinMask>
 80014fa:	f3c0 1101 	ubfx	r1, r0, #4, #2
 80014fe:	4640      	mov	r0, r8
 8001500:	f000 fbba 	bl	8001c78 <vSetRegInput>
		 if (usGetRegInput(ERROR_STATUS) &  AIR_TEMP_ERROR )
 8001504:	2007      	movs	r0, #7
 8001506:	f000 fbb1 	bl	8001c6c <usGetRegInput>
 800150a:	f010 0f02 	tst.w	r0, #2
 800150e:	f43f aea2 	beq.w	8001256 <vDTask+0x13a>
		  	   timeout = 500;
 8001512:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001516:	4a34      	ldr	r2, [pc, #208]	; (80015e8 <vDTask+0x4cc>)
 8001518:	8013      	strh	r3, [r2, #0]
		  if ( timeout )
 800151a:	461a      	mov	r2, r3
		  	  if ( ++timer >= timeout )
 800151c:	4b33      	ldr	r3, [pc, #204]	; (80015ec <vDTask+0x4d0>)
 800151e:	881b      	ldrh	r3, [r3, #0]
 8001520:	3301      	adds	r3, #1
 8001522:	b29b      	uxth	r3, r3
 8001524:	4293      	cmp	r3, r2
 8001526:	f4bf aea0 	bcs.w	800126a <vDTask+0x14e>
 800152a:	4a30      	ldr	r2, [pc, #192]	; (80015ec <vDTask+0x4d0>)
 800152c:	8013      	strh	r3, [r2, #0]
		    HAL_ADC_Start_DMA(&hadc1,&ADC1_DMABuffer[0], 9);
 800152e:	2209      	movs	r2, #9
 8001530:	4659      	mov	r1, fp
 8001532:	4829      	ldr	r0, [pc, #164]	; (80015d8 <vDTask+0x4bc>)
 8001534:	f000 ff7e 	bl	8002434 <HAL_ADC_Start_DMA>
		  	vTaskDelay(1);
 8001538:	4648      	mov	r0, r9
 800153a:	f005 fa87 	bl	8006a4c <vTaskDelay>
			if (DataReadyFlag == 0)
 800153e:	4b2c      	ldr	r3, [pc, #176]	; (80015f0 <vDTask+0x4d4>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	b933      	cbnz	r3, 8001552 <vDTask+0x436>
			   init_timer++;
 8001544:	9b03      	ldr	r3, [sp, #12]
 8001546:	3301      	adds	r3, #1
 8001548:	b2db      	uxtb	r3, r3
 800154a:	9303      	str	r3, [sp, #12]
			   if (init_timer == 50)
 800154c:	2b32      	cmp	r3, #50	; 0x32
 800154e:	f43f aed9 	beq.w	8001304 <vDTask+0x1e8>
			for (uint8_t i = 0U; i < DIN_CHANNEL; i++)
 8001552:	4c28      	ldr	r4, [pc, #160]	; (80015f4 <vDTask+0x4d8>)
 8001554:	4d28      	ldr	r5, [pc, #160]	; (80015f8 <vDTask+0x4dc>)
 8001556:	f104 07c0 	add.w	r7, r4, #192	; 0xc0
 800155a:	e6e4      	b.n	8001326 <vDTask+0x20a>
					vSetReg(AIR_TEMP, (uint16_t)fGetAinCalData(AIN_2,temp));
 800155c:	f7ff f9e4 	bl	8000928 <__aeabi_ui2f>
 8001560:	4601      	mov	r1, r0
 8001562:	4648      	mov	r0, r9
 8001564:	f7ff fc1e 	bl	8000da4 <fGetAinCalData>
 8001568:	f7ff fbfc 	bl	8000d64 <__aeabi_f2uiz>
 800156c:	b281      	uxth	r1, r0
 800156e:	2003      	movs	r0, #3
 8001570:	f000 fb88 	bl	8001c84 <vSetReg>
						vSetRegInput(ERROR_STATUS,usGetRegInput(ERROR_STATUS) & ~AIR_TEMP_ERROR);
 8001574:	2007      	movs	r0, #7
 8001576:	f000 fb79 	bl	8001c6c <usGetRegInput>
 800157a:	f020 0102 	bic.w	r1, r0, #2
 800157e:	b289      	uxth	r1, r1
 8001580:	2007      	movs	r0, #7
 8001582:	f000 fb79 	bl	8001c78 <vSetRegInput>
 8001586:	e7b6      	b.n	80014f6 <vDTask+0x3da>
			  timeout = usGetConnection() ? 250 : 0;
 8001588:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <vDTask+0x4cc>)
 800158a:	f8a3 8000 	strh.w	r8, [r3]
		  	   if (usGetReg(MODE) == OFF_MODE)
 800158e:	4640      	mov	r0, r8
 8001590:	f000 fb5e 	bl	8001c50 <usGetReg>
 8001594:	2800      	cmp	r0, #0
 8001596:	f43f ae7a 	beq.w	800128e <vDTask+0x172>
		  	    	if (usGetRegInput(TYPE) == HWC)
 800159a:	4640      	mov	r0, r8
 800159c:	f000 fb66 	bl	8001c6c <usGetRegInput>
 80015a0:	2803      	cmp	r0, #3
 80015a2:	f43f ae80 	beq.w	80012a6 <vDTask+0x18a>
		  	    		HAL_GPIO_WritePin( LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 80015a6:	464a      	mov	r2, r9
 80015a8:	2120      	movs	r1, #32
 80015aa:	4814      	ldr	r0, [pc, #80]	; (80015fc <vDTask+0x4e0>)
 80015ac:	f001 fbe6 	bl	8002d7c <HAL_GPIO_WritePin>
		  	    		if ((usGetReg(MODE) == 1))
 80015b0:	4640      	mov	r0, r8
 80015b2:	f000 fb4d 	bl	8001c50 <usGetReg>
 80015b6:	2801      	cmp	r0, #1
 80015b8:	f47f ae94 	bne.w	80012e4 <vDTask+0x1c8>
		  	    			if (++timerR>=500)
 80015bc:	4b10      	ldr	r3, [pc, #64]	; (8001600 <vDTask+0x4e4>)
 80015be:	881b      	ldrh	r3, [r3, #0]
 80015c0:	3301      	adds	r3, #1
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015c8:	f4bf ae84 	bcs.w	80012d4 <vDTask+0x1b8>
 80015cc:	4a0c      	ldr	r2, [pc, #48]	; (8001600 <vDTask+0x4e4>)
 80015ce:	8013      	strh	r3, [r2, #0]
 80015d0:	e7ad      	b.n	800152e <vDTask+0x412>
 80015d2:	bf00      	nop
 80015d4:	20000444 	.word	0x20000444
 80015d8:	20001690 	.word	0x20001690
 80015dc:	20000370 	.word	0x20000370
 80015e0:	20000368 	.word	0x20000368
 80015e4:	473c1ab7 	.word	0x473c1ab7
 80015e8:	20000378 	.word	0x20000378
 80015ec:	2000037a 	.word	0x2000037a
 80015f0:	20000376 	.word	0x20000376
 80015f4:	20000380 	.word	0x20000380
 80015f8:	08007b78 	.word	0x08007b78
 80015fc:	40010800 	.word	0x40010800
 8001600:	2000037c 	.word	0x2000037c

08001604 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001604:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  for(;;)
  {
    osDelay(10);
 8001606:	240a      	movs	r4, #10
 8001608:	4620      	mov	r0, r4
 800160a:	f003 ffd3 	bl	80055b4 <osDelay>
  for(;;)
 800160e:	e7fb      	b.n	8001608 <StartDefaultTask+0x4>

08001610 <xGetOSEvent>:
}
 8001610:	4b01      	ldr	r3, [pc, #4]	; (8001618 <xGetOSEvent+0x8>)
 8001612:	6818      	ldr	r0, [r3, #0]
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	2000189c 	.word	0x2000189c

0800161c <xGetUARTEvent>:
 }
 800161c:	4b01      	ldr	r3, [pc, #4]	; (8001624 <xGetUARTEvent+0x8>)
 800161e:	6818      	ldr	r0, [r3, #0]
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	200018e4 	.word	0x200018e4

08001628 <xGetSystemControlEvent>:
 }
 8001628:	4b01      	ldr	r3, [pc, #4]	; (8001630 <xGetSystemControlEvent+0x8>)
 800162a:	6818      	ldr	r0, [r3, #0]
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	200018c0 	.word	0x200018c0

08001634 <xGetSystemSem>:
 }
 8001634:	4b01      	ldr	r3, [pc, #4]	; (800163c <xGetSystemSem+0x8>)
 8001636:	6818      	ldr	r0, [r3, #0]
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	20001874 	.word	0x20001874

08001640 <vTimerInit>:
{
 8001640:	b508      	push	{r3, lr}
	htim2.Init.Period = timeout;
 8001642:	4b0a      	ldr	r3, [pc, #40]	; (800166c <vTimerInit+0x2c>)
 8001644:	60d8      	str	r0, [r3, #12]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001646:	4618      	mov	r0, r3
 8001648:	f002 f944 	bl	80038d4 <HAL_TIM_Base_Init>
 800164c:	b948      	cbnz	r0, 8001662 <vTimerInit+0x22>
    htim4.Init.Prescaler = 3200;
 800164e:	4808      	ldr	r0, [pc, #32]	; (8001670 <vTimerInit+0x30>)
 8001650:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8001654:	6043      	str	r3, [r0, #4]
    htim4.Init.Period =20;
 8001656:	2314      	movs	r3, #20
 8001658:	60c3      	str	r3, [r0, #12]
        if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800165a:	f002 f93b 	bl	80038d4 <HAL_TIM_Base_Init>
 800165e:	b910      	cbnz	r0, 8001666 <vTimerInit+0x26>
}
 8001660:	bd08      	pop	{r3, pc}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001662:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001664:	e7fe      	b.n	8001664 <vTimerInit+0x24>
 8001666:	b672      	cpsid	i
 8001668:	e7fe      	b.n	8001668 <vTimerInit+0x28>
 800166a:	bf00      	nop
 800166c:	20001704 	.word	0x20001704
 8001670:	20001794 	.word	0x20001794

08001674 <vStartTimer>:
{
 8001674:	b510      	push	{r4, lr}
	HAL_TIM_Base_Stop_IT(&htim2);
 8001676:	4c05      	ldr	r4, [pc, #20]	; (800168c <vStartTimer+0x18>)
 8001678:	4620      	mov	r0, r4
 800167a:	f002 f801 	bl	8003680 <HAL_TIM_Base_Stop_IT>
	htim2.Instance->CNT=0;
 800167e:	6823      	ldr	r3, [r4, #0]
 8001680:	2200      	movs	r2, #0
 8001682:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim2);
 8001684:	4620      	mov	r0, r4
 8001686:	f001 ffc7 	bl	8003618 <HAL_TIM_Base_Start_IT>
}
 800168a:	bd10      	pop	{r4, pc}
 800168c:	20001704 	.word	0x20001704

08001690 <vStopTimer>:
{
 8001690:	b508      	push	{r3, lr}
	HAL_TIM_Base_Stop_IT(&htim2);
 8001692:	4802      	ldr	r0, [pc, #8]	; (800169c <vStopTimer+0xc>)
 8001694:	f001 fff4 	bl	8003680 <HAL_TIM_Base_Stop_IT>
}
 8001698:	bd08      	pop	{r3, pc}
 800169a:	bf00      	nop
 800169c:	20001704 	.word	0x20001704

080016a0 <vRespondInit>:
{
 80016a0:	b510      	push	{r4, lr}
 80016a2:	4604      	mov	r4, r0
	HAL_TIM_Base_Stop_IT(&htim4);
 80016a4:	4804      	ldr	r0, [pc, #16]	; (80016b8 <vRespondInit+0x18>)
 80016a6:	f001 ffeb 	bl	8003680 <HAL_TIM_Base_Stop_IT>
	respond_timeout =timeout;
 80016aa:	4b04      	ldr	r3, [pc, #16]	; (80016bc <vRespondInit+0x1c>)
 80016ac:	801c      	strh	r4, [r3, #0]
	timer_res = 0;
 80016ae:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <vRespondInit+0x20>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	801a      	strh	r2, [r3, #0]
}
 80016b4:	bd10      	pop	{r4, pc}
 80016b6:	bf00      	nop
 80016b8:	20001794 	.word	0x20001794
 80016bc:	20001878 	.word	0x20001878
 80016c0:	2000187a 	.word	0x2000187a

080016c4 <vStartRespond>:
{
 80016c4:	b510      	push	{r4, lr}
	HAL_TIM_Base_Stop_IT(&htim4);
 80016c6:	4c06      	ldr	r4, [pc, #24]	; (80016e0 <vStartRespond+0x1c>)
 80016c8:	4620      	mov	r0, r4
 80016ca:	f001 ffd9 	bl	8003680 <HAL_TIM_Base_Stop_IT>
	htim4.Instance->CNT=0;
 80016ce:	6822      	ldr	r2, [r4, #0]
 80016d0:	2300      	movs	r3, #0
 80016d2:	6253      	str	r3, [r2, #36]	; 0x24
	timer_res = 0;
 80016d4:	4a03      	ldr	r2, [pc, #12]	; (80016e4 <vStartRespond+0x20>)
 80016d6:	8013      	strh	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(&htim4);
 80016d8:	4620      	mov	r0, r4
 80016da:	f001 ff9d 	bl	8003618 <HAL_TIM_Base_Start_IT>
}
 80016de:	bd10      	pop	{r4, pc}
 80016e0:	20001794 	.word	0x20001794
 80016e4:	2000187a 	.word	0x2000187a

080016e8 <vStopRespond>:
{
 80016e8:	b508      	push	{r3, lr}
	timer_res = 0;
 80016ea:	4b03      	ldr	r3, [pc, #12]	; (80016f8 <vStopRespond+0x10>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim4);
 80016f0:	4802      	ldr	r0, [pc, #8]	; (80016fc <vStopRespond+0x14>)
 80016f2:	f001 ffc5 	bl	8003680 <HAL_TIM_Base_Stop_IT>
}
 80016f6:	bd08      	pop	{r3, pc}
 80016f8:	2000187a 	.word	0x2000187a
 80016fc:	20001794 	.word	0x20001794

08001700 <vResHeandler>:
{
 8001700:	b508      	push	{r3, lr}
	if (++timer_res == respond_timeout)
 8001702:	4a08      	ldr	r2, [pc, #32]	; (8001724 <vResHeandler+0x24>)
 8001704:	8813      	ldrh	r3, [r2, #0]
 8001706:	3301      	adds	r3, #1
 8001708:	b29b      	uxth	r3, r3
 800170a:	8013      	strh	r3, [r2, #0]
 800170c:	4a06      	ldr	r2, [pc, #24]	; (8001728 <vResHeandler+0x28>)
 800170e:	8812      	ldrh	r2, [r2, #0]
 8001710:	429a      	cmp	r2, r3
 8001712:	d000      	beq.n	8001716 <vResHeandler+0x16>
}
 8001714:	bd08      	pop	{r3, pc}
			timer_res = 0;
 8001716:	4b03      	ldr	r3, [pc, #12]	; (8001724 <vResHeandler+0x24>)
 8001718:	2200      	movs	r2, #0
 800171a:	801a      	strh	r2, [r3, #0]
			prvvTIMERExpiredISR();
 800171c:	f003 fd8c 	bl	8005238 <prvvTIMERExpiredISR>
}
 8001720:	e7f8      	b.n	8001714 <vResHeandler+0x14>
 8001722:	bf00      	nop
 8001724:	2000187a 	.word	0x2000187a
 8001728:	20001878 	.word	0x20001878

0800172c <SystemClock_Config>:
{
 800172c:	b500      	push	{lr}
 800172e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001730:	2220      	movs	r2, #32
 8001732:	2100      	movs	r1, #0
 8001734:	a80b      	add	r0, sp, #44	; 0x2c
 8001736:	f006 f90f 	bl	8007958 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800173a:	2300      	movs	r3, #0
 800173c:	9305      	str	r3, [sp, #20]
 800173e:	9306      	str	r3, [sp, #24]
 8001740:	9307      	str	r3, [sp, #28]
 8001742:	9308      	str	r3, [sp, #32]
 8001744:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001746:	9301      	str	r3, [sp, #4]
 8001748:	9302      	str	r3, [sp, #8]
 800174a:	9303      	str	r3, [sp, #12]
 800174c:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800174e:	2302      	movs	r3, #2
 8001750:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001752:	2201      	movs	r2, #1
 8001754:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001756:	2210      	movs	r2, #16
 8001758:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800175a:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800175c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001760:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001762:	a80a      	add	r0, sp, #40	; 0x28
 8001764:	f001 fb1a 	bl	8002d9c <HAL_RCC_OscConfig>
 8001768:	b9c8      	cbnz	r0, 800179e <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800176a:	230f      	movs	r3, #15
 800176c:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800176e:	2102      	movs	r1, #2
 8001770:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001772:	2300      	movs	r3, #0
 8001774:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001776:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800177a:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800177c:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800177e:	a805      	add	r0, sp, #20
 8001780:	f001 fd4c 	bl	800321c <HAL_RCC_ClockConfig>
 8001784:	b968      	cbnz	r0, 80017a2 <SystemClock_Config+0x76>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001786:	2302      	movs	r3, #2
 8001788:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800178a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800178e:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001790:	a801      	add	r0, sp, #4
 8001792:	f001 fe39 	bl	8003408 <HAL_RCCEx_PeriphCLKConfig>
 8001796:	b930      	cbnz	r0, 80017a6 <SystemClock_Config+0x7a>
}
 8001798:	b015      	add	sp, #84	; 0x54
 800179a:	f85d fb04 	ldr.w	pc, [sp], #4
 800179e:	b672      	cpsid	i
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <SystemClock_Config+0x74>
 80017a2:	b672      	cpsid	i
 80017a4:	e7fe      	b.n	80017a4 <SystemClock_Config+0x78>
 80017a6:	b672      	cpsid	i
 80017a8:	e7fe      	b.n	80017a8 <SystemClock_Config+0x7c>
	...

080017ac <main>:
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b092      	sub	sp, #72	; 0x48
  HAL_Init();
 80017b0:	f000 fcec 	bl	800218c <HAL_Init>
  SystemClock_Config();
 80017b4:	f7ff ffba 	bl	800172c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	2400      	movs	r4, #0
 80017ba:	940b      	str	r4, [sp, #44]	; 0x2c
 80017bc:	940c      	str	r4, [sp, #48]	; 0x30
 80017be:	940d      	str	r4, [sp, #52]	; 0x34
 80017c0:	940e      	str	r4, [sp, #56]	; 0x38
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c2:	4dad      	ldr	r5, [pc, #692]	; (8001a78 <main+0x2cc>)
 80017c4:	69ab      	ldr	r3, [r5, #24]
 80017c6:	f043 0310 	orr.w	r3, r3, #16
 80017ca:	61ab      	str	r3, [r5, #24]
 80017cc:	69ab      	ldr	r3, [r5, #24]
 80017ce:	f003 0310 	and.w	r3, r3, #16
 80017d2:	9301      	str	r3, [sp, #4]
 80017d4:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017d6:	69ab      	ldr	r3, [r5, #24]
 80017d8:	f043 0320 	orr.w	r3, r3, #32
 80017dc:	61ab      	str	r3, [r5, #24]
 80017de:	69ab      	ldr	r3, [r5, #24]
 80017e0:	f003 0320 	and.w	r3, r3, #32
 80017e4:	9302      	str	r3, [sp, #8]
 80017e6:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e8:	69ab      	ldr	r3, [r5, #24]
 80017ea:	f043 0304 	orr.w	r3, r3, #4
 80017ee:	61ab      	str	r3, [r5, #24]
 80017f0:	69ab      	ldr	r3, [r5, #24]
 80017f2:	f003 0304 	and.w	r3, r3, #4
 80017f6:	9303      	str	r3, [sp, #12]
 80017f8:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fa:	69ab      	ldr	r3, [r5, #24]
 80017fc:	f043 0308 	orr.w	r3, r3, #8
 8001800:	61ab      	str	r3, [r5, #24]
 8001802:	69ab      	ldr	r3, [r5, #24]
 8001804:	f003 0308 	and.w	r3, r3, #8
 8001808:	9304      	str	r3, [sp, #16]
 800180a:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, LED_G_Pin|LED_R_Pin|EN_Pin, GPIO_PIN_RESET);
 800180c:	4e9b      	ldr	r6, [pc, #620]	; (8001a7c <main+0x2d0>)
 800180e:	4622      	mov	r2, r4
 8001810:	f44f 7198 	mov.w	r1, #304	; 0x130
 8001814:	4630      	mov	r0, r6
 8001816:	f001 fab1 	bl	8002d7c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, K2_Pin|K4_Pin|K6_Pin|K8_Pin, GPIO_PIN_RESET);
 800181a:	4f99      	ldr	r7, [pc, #612]	; (8001a80 <main+0x2d4>)
 800181c:	4622      	mov	r2, r4
 800181e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001822:	4638      	mov	r0, r7
 8001824:	f001 faaa 	bl	8002d7c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin|EN_Pin;
 8001828:	f44f 7398 	mov.w	r3, #304	; 0x130
 800182c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182e:	f04f 0901 	mov.w	r9, #1
 8001832:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001838:	f04f 0802 	mov.w	r8, #2
 800183c:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001840:	a90b      	add	r1, sp, #44	; 0x2c
 8001842:	4630      	mov	r0, r6
 8001844:	f001 f95a 	bl	8002afc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = S1_Pin|S2_Pin|S3_Pin|S4_Pin
 8001848:	f640 73ff 	movw	r3, #4095	; 0xfff
 800184c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800184e:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001852:	a90b      	add	r1, sp, #44	; 0x2c
 8001854:	4638      	mov	r0, r7
 8001856:	f001 f951 	bl	8002afc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = K2_Pin|K4_Pin|K6_Pin|K8_Pin;
 800185a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800185e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001860:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001866:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186a:	a90b      	add	r1, sp, #44	; 0x2c
 800186c:	4638      	mov	r0, r7
 800186e:	f001 f945 	bl	8002afc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SW8_Pin;
 8001872:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001876:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001878:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(SW8_GPIO_Port, &GPIO_InitStruct);
 800187c:	a90b      	add	r1, sp, #44	; 0x2c
 800187e:	4630      	mov	r0, r6
 8001880:	f001 f93c 	bl	8002afc <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001884:	696b      	ldr	r3, [r5, #20]
 8001886:	ea43 0309 	orr.w	r3, r3, r9
 800188a:	616b      	str	r3, [r5, #20]
 800188c:	696b      	ldr	r3, [r5, #20]
 800188e:	ea03 0309 	and.w	r3, r3, r9
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001896:	4622      	mov	r2, r4
 8001898:	2105      	movs	r1, #5
 800189a:	200b      	movs	r0, #11
 800189c:	f000 ff56 	bl	800274c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80018a0:	200b      	movs	r0, #11
 80018a2:	f000 ff89 	bl	80027b8 <HAL_NVIC_EnableIRQ>
  huart1.Instance = USART1;
 80018a6:	4877      	ldr	r0, [pc, #476]	; (8001a84 <main+0x2d8>)
 80018a8:	4b77      	ldr	r3, [pc, #476]	; (8001a88 <main+0x2dc>)
 80018aa:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80018ac:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80018b0:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80018b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018b6:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018b8:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 80018ba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80018be:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018c0:	230c      	movs	r3, #12
 80018c2:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018c4:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c6:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018c8:	f002 fa64 	bl	8003d94 <HAL_UART_Init>
 80018cc:	2800      	cmp	r0, #0
 80018ce:	f040 8140 	bne.w	8001b52 <main+0x3a6>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018d2:	2300      	movs	r3, #0
 80018d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80018d6:	930c      	str	r3, [sp, #48]	; 0x30
 80018d8:	930d      	str	r3, [sp, #52]	; 0x34
 80018da:	930e      	str	r3, [sp, #56]	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018dc:	9307      	str	r3, [sp, #28]
 80018de:	9308      	str	r3, [sp, #32]
  htim2.Instance = TIM2;
 80018e0:	486a      	ldr	r0, [pc, #424]	; (8001a8c <main+0x2e0>)
 80018e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018e6:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 3264;
 80018e8:	f44f 624c 	mov.w	r2, #3264	; 0xcc0
 80018ec:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ee:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 1000;
 80018f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018f4:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f6:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f8:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018fa:	f001 ffeb 	bl	80038d4 <HAL_TIM_Base_Init>
 80018fe:	2800      	cmp	r0, #0
 8001900:	f040 8129 	bne.w	8001b56 <main+0x3aa>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001904:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001908:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800190a:	a90b      	add	r1, sp, #44	; 0x2c
 800190c:	485f      	ldr	r0, [pc, #380]	; (8001a8c <main+0x2e0>)
 800190e:	f002 f8e1 	bl	8003ad4 <HAL_TIM_ConfigClockSource>
 8001912:	2800      	cmp	r0, #0
 8001914:	f040 8121 	bne.w	8001b5a <main+0x3ae>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001918:	2320      	movs	r3, #32
 800191a:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800191c:	2300      	movs	r3, #0
 800191e:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001920:	a907      	add	r1, sp, #28
 8001922:	485a      	ldr	r0, [pc, #360]	; (8001a8c <main+0x2e0>)
 8001924:	f002 f98c 	bl	8003c40 <HAL_TIMEx_MasterConfigSynchronization>
 8001928:	2800      	cmp	r0, #0
 800192a:	f040 8118 	bne.w	8001b5e <main+0x3b2>
  ADC_ChannelConfTypeDef sConfig = {0};
 800192e:	2300      	movs	r3, #0
 8001930:	930b      	str	r3, [sp, #44]	; 0x2c
 8001932:	930c      	str	r3, [sp, #48]	; 0x30
 8001934:	930d      	str	r3, [sp, #52]	; 0x34
  hadc1.Instance = ADC1;
 8001936:	4856      	ldr	r0, [pc, #344]	; (8001a90 <main+0x2e4>)
 8001938:	4a56      	ldr	r2, [pc, #344]	; (8001a94 <main+0x2e8>)
 800193a:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800193c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001940:	6082      	str	r2, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001942:	2201      	movs	r2, #1
 8001944:	7302      	strb	r2, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001946:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001948:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800194c:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800194e:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 3;
 8001950:	2303      	movs	r3, #3
 8001952:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001954:	f000 fe34 	bl	80025c0 <HAL_ADC_Init>
 8001958:	2800      	cmp	r0, #0
 800195a:	f040 8102 	bne.w	8001b62 <main+0x3b6>
  sConfig.Channel = ADC_CHANNEL_0;
 800195e:	2300      	movs	r3, #0
 8001960:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001962:	2301      	movs	r3, #1
 8001964:	930c      	str	r3, [sp, #48]	; 0x30
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8001966:	2304      	movs	r3, #4
 8001968:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800196a:	a90b      	add	r1, sp, #44	; 0x2c
 800196c:	4848      	ldr	r0, [pc, #288]	; (8001a90 <main+0x2e4>)
 800196e:	f000 fc6f 	bl	8002250 <HAL_ADC_ConfigChannel>
 8001972:	2800      	cmp	r0, #0
 8001974:	f040 80f7 	bne.w	8001b66 <main+0x3ba>
  sConfig.Channel = ADC_CHANNEL_1;
 8001978:	2301      	movs	r3, #1
 800197a:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800197c:	2302      	movs	r3, #2
 800197e:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001980:	a90b      	add	r1, sp, #44	; 0x2c
 8001982:	4843      	ldr	r0, [pc, #268]	; (8001a90 <main+0x2e4>)
 8001984:	f000 fc64 	bl	8002250 <HAL_ADC_ConfigChannel>
 8001988:	2800      	cmp	r0, #0
 800198a:	f040 80ee 	bne.w	8001b6a <main+0x3be>
  sConfig.Channel = ADC_CHANNEL_2;
 800198e:	2302      	movs	r3, #2
 8001990:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001992:	2303      	movs	r3, #3
 8001994:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001996:	a90b      	add	r1, sp, #44	; 0x2c
 8001998:	483d      	ldr	r0, [pc, #244]	; (8001a90 <main+0x2e4>)
 800199a:	f000 fc59 	bl	8002250 <HAL_ADC_ConfigChannel>
 800199e:	2800      	cmp	r0, #0
 80019a0:	f040 80e5 	bne.w	8001b6e <main+0x3c2>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019a4:	2300      	movs	r3, #0
 80019a6:	9307      	str	r3, [sp, #28]
 80019a8:	9308      	str	r3, [sp, #32]
 80019aa:	9309      	str	r3, [sp, #36]	; 0x24
 80019ac:	930a      	str	r3, [sp, #40]	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ae:	9305      	str	r3, [sp, #20]
 80019b0:	9306      	str	r3, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80019b4:	930c      	str	r3, [sp, #48]	; 0x30
 80019b6:	930d      	str	r3, [sp, #52]	; 0x34
 80019b8:	930e      	str	r3, [sp, #56]	; 0x38
 80019ba:	930f      	str	r3, [sp, #60]	; 0x3c
 80019bc:	9310      	str	r3, [sp, #64]	; 0x40
 80019be:	9311      	str	r3, [sp, #68]	; 0x44
  htim3.Instance = TIM3;
 80019c0:	4835      	ldr	r0, [pc, #212]	; (8001a98 <main+0x2ec>)
 80019c2:	4a36      	ldr	r2, [pc, #216]	; (8001a9c <main+0x2f0>)
 80019c4:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 2;
 80019c6:	2202      	movs	r2, #2
 80019c8:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ca:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 1000;
 80019cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019d0:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019d2:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019d6:	f001 ff7d 	bl	80038d4 <HAL_TIM_Base_Init>
 80019da:	2800      	cmp	r0, #0
 80019dc:	f040 80c9 	bne.w	8001b72 <main+0x3c6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e4:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019e6:	a907      	add	r1, sp, #28
 80019e8:	482b      	ldr	r0, [pc, #172]	; (8001a98 <main+0x2ec>)
 80019ea:	f002 f873 	bl	8003ad4 <HAL_TIM_ConfigClockSource>
 80019ee:	2800      	cmp	r0, #0
 80019f0:	f040 80c1 	bne.w	8001b76 <main+0x3ca>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80019f4:	4828      	ldr	r0, [pc, #160]	; (8001a98 <main+0x2ec>)
 80019f6:	f001 ff99 	bl	800392c <HAL_TIM_PWM_Init>
 80019fa:	2800      	cmp	r0, #0
 80019fc:	f040 80bd 	bne.w	8001b7a <main+0x3ce>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a00:	2300      	movs	r3, #0
 8001a02:	9305      	str	r3, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a04:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a06:	a905      	add	r1, sp, #20
 8001a08:	4823      	ldr	r0, [pc, #140]	; (8001a98 <main+0x2ec>)
 8001a0a:	f002 f919 	bl	8003c40 <HAL_TIMEx_MasterConfigSynchronization>
 8001a0e:	2800      	cmp	r0, #0
 8001a10:	f040 80b5 	bne.w	8001b7e <main+0x3d2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a14:	2360      	movs	r3, #96	; 0x60
 8001a16:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8001a18:	2200      	movs	r2, #0
 8001a1a:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a1c:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001a1e:	2304      	movs	r3, #4
 8001a20:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a22:	a90b      	add	r1, sp, #44	; 0x2c
 8001a24:	481c      	ldr	r0, [pc, #112]	; (8001a98 <main+0x2ec>)
 8001a26:	f001 ffdb 	bl	80039e0 <HAL_TIM_PWM_ConfigChannel>
 8001a2a:	2800      	cmp	r0, #0
 8001a2c:	f040 80a9 	bne.w	8001b82 <main+0x3d6>
  sConfigOC.Pulse = 500;
 8001a30:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001a34:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a36:	2204      	movs	r2, #4
 8001a38:	a90b      	add	r1, sp, #44	; 0x2c
 8001a3a:	4817      	ldr	r0, [pc, #92]	; (8001a98 <main+0x2ec>)
 8001a3c:	f001 ffd0 	bl	80039e0 <HAL_TIM_PWM_ConfigChannel>
 8001a40:	2800      	cmp	r0, #0
 8001a42:	f040 80a0 	bne.w	8001b86 <main+0x3da>
  HAL_TIM_MspPostInit(&htim3);
 8001a46:	4814      	ldr	r0, [pc, #80]	; (8001a98 <main+0x2ec>)
 8001a48:	f000 fa8e 	bl	8001f68 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001a50:	930c      	str	r3, [sp, #48]	; 0x30
 8001a52:	930d      	str	r3, [sp, #52]	; 0x34
 8001a54:	930e      	str	r3, [sp, #56]	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a56:	9307      	str	r3, [sp, #28]
 8001a58:	9308      	str	r3, [sp, #32]
  htim4.Instance = TIM4;
 8001a5a:	4811      	ldr	r0, [pc, #68]	; (8001aa0 <main+0x2f4>)
 8001a5c:	4a11      	ldr	r2, [pc, #68]	; (8001aa4 <main+0x2f8>)
 8001a5e:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 32000;
 8001a60:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001a64:	6042      	str	r2, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a66:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 2000;
 8001a68:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001a6c:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a6e:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a70:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a72:	f001 ff2f 	bl	80038d4 <HAL_TIM_Base_Init>
 8001a76:	e017      	b.n	8001aa8 <main+0x2fc>
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	40010800 	.word	0x40010800
 8001a80:	40010c00 	.word	0x40010c00
 8001a84:	200017dc 	.word	0x200017dc
 8001a88:	40013800 	.word	0x40013800
 8001a8c:	20001704 	.word	0x20001704
 8001a90:	20001690 	.word	0x20001690
 8001a94:	40012400 	.word	0x40012400
 8001a98:	2000174c 	.word	0x2000174c
 8001a9c:	40000400 	.word	0x40000400
 8001aa0:	20001794 	.word	0x20001794
 8001aa4:	40000800 	.word	0x40000800
 8001aa8:	2800      	cmp	r0, #0
 8001aaa:	d16e      	bne.n	8001b8a <main+0x3de>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab0:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ab2:	a90b      	add	r1, sp, #44	; 0x2c
 8001ab4:	4838      	ldr	r0, [pc, #224]	; (8001b98 <main+0x3ec>)
 8001ab6:	f002 f80d 	bl	8003ad4 <HAL_TIM_ConfigClockSource>
 8001aba:	2800      	cmp	r0, #0
 8001abc:	d167      	bne.n	8001b8e <main+0x3e2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001abe:	2320      	movs	r3, #32
 8001ac0:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ac6:	a907      	add	r1, sp, #28
 8001ac8:	4833      	ldr	r0, [pc, #204]	; (8001b98 <main+0x3ec>)
 8001aca:	f002 f8b9 	bl	8003c40 <HAL_TIMEx_MasterConfigSynchronization>
 8001ace:	2800      	cmp	r0, #0
 8001ad0:	d15f      	bne.n	8001b92 <main+0x3e6>
  osKernelInitialize();
 8001ad2:	f003 fcbd 	bl	8005450 <osKernelInitialize>
  mbSemHandle = osSemaphoreNew(1, 1, &mbSem_attributes);
 8001ad6:	4a31      	ldr	r2, [pc, #196]	; (8001b9c <main+0x3f0>)
 8001ad8:	2101      	movs	r1, #1
 8001ada:	4608      	mov	r0, r1
 8001adc:	f003 fdb4 	bl	8005648 <osSemaphoreNew>
 8001ae0:	4b2f      	ldr	r3, [pc, #188]	; (8001ba0 <main+0x3f4>)
 8001ae2:	6018      	str	r0, [r3, #0]
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001ae4:	4a2f      	ldr	r2, [pc, #188]	; (8001ba4 <main+0x3f8>)
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	482f      	ldr	r0, [pc, #188]	; (8001ba8 <main+0x3fc>)
 8001aea:	f003 fcfd 	bl	80054e8 <osThreadNew>
 8001aee:	4b2f      	ldr	r3, [pc, #188]	; (8001bac <main+0x400>)
 8001af0:	6018      	str	r0, [r3, #0]
  DIN_DOUTHandle = osThreadNew(vDTask, NULL, &DIN_DOUT_attributes);
 8001af2:	4a2f      	ldr	r2, [pc, #188]	; (8001bb0 <main+0x404>)
 8001af4:	2100      	movs	r1, #0
 8001af6:	482f      	ldr	r0, [pc, #188]	; (8001bb4 <main+0x408>)
 8001af8:	f003 fcf6 	bl	80054e8 <osThreadNew>
 8001afc:	4b2e      	ldr	r3, [pc, #184]	; (8001bb8 <main+0x40c>)
 8001afe:	6018      	str	r0, [r3, #0]
  UARTTaskHandle = osThreadNew(StartUARTTask, NULL, &UARTTask_attributes);
 8001b00:	4a2e      	ldr	r2, [pc, #184]	; (8001bbc <main+0x410>)
 8001b02:	2100      	movs	r1, #0
 8001b04:	482e      	ldr	r0, [pc, #184]	; (8001bc0 <main+0x414>)
 8001b06:	f003 fcef 	bl	80054e8 <osThreadNew>
 8001b0a:	4b2e      	ldr	r3, [pc, #184]	; (8001bc4 <main+0x418>)
 8001b0c:	6018      	str	r0, [r3, #0]
  DataTaskHandle = osThreadNew(vDATATask, NULL, &DataTask_attributes);
 8001b0e:	4a2e      	ldr	r2, [pc, #184]	; (8001bc8 <main+0x41c>)
 8001b10:	2100      	movs	r1, #0
 8001b12:	482e      	ldr	r0, [pc, #184]	; (8001bcc <main+0x420>)
 8001b14:	f003 fce8 	bl	80054e8 <osThreadNew>
 8001b18:	4b2d      	ldr	r3, [pc, #180]	; (8001bd0 <main+0x424>)
 8001b1a:	6018      	str	r0, [r3, #0]
  MBTaskHandle = osThreadNew(vMBTask, NULL, &MBTask_attributes);
 8001b1c:	4a2d      	ldr	r2, [pc, #180]	; (8001bd4 <main+0x428>)
 8001b1e:	2100      	movs	r1, #0
 8001b20:	482d      	ldr	r0, [pc, #180]	; (8001bd8 <main+0x42c>)
 8001b22:	f003 fce1 	bl	80054e8 <osThreadNew>
 8001b26:	4b2d      	ldr	r3, [pc, #180]	; (8001bdc <main+0x430>)
 8001b28:	6018      	str	r0, [r3, #0]
  xOSEventHandle = osEventFlagsNew(&xOSEvent_attributes);
 8001b2a:	482d      	ldr	r0, [pc, #180]	; (8001be0 <main+0x434>)
 8001b2c:	f003 fd64 	bl	80055f8 <osEventFlagsNew>
 8001b30:	4b2c      	ldr	r3, [pc, #176]	; (8001be4 <main+0x438>)
 8001b32:	6018      	str	r0, [r3, #0]
  xUARTEvnetHandle = osEventFlagsNew(&xUARTEvnet_attributes);
 8001b34:	482c      	ldr	r0, [pc, #176]	; (8001be8 <main+0x43c>)
 8001b36:	f003 fd5f 	bl	80055f8 <osEventFlagsNew>
 8001b3a:	4b2c      	ldr	r3, [pc, #176]	; (8001bec <main+0x440>)
 8001b3c:	6018      	str	r0, [r3, #0]
  xSystemControlEventHandle = osEventFlagsNew(&xSystemControlEvent_attributes);
 8001b3e:	482c      	ldr	r0, [pc, #176]	; (8001bf0 <main+0x444>)
 8001b40:	f003 fd5a 	bl	80055f8 <osEventFlagsNew>
 8001b44:	4b2b      	ldr	r3, [pc, #172]	; (8001bf4 <main+0x448>)
 8001b46:	6018      	str	r0, [r3, #0]
  InitSystemEnvet(xSystemControlEventHandle);
 8001b48:	f000 f864 	bl	8001c14 <InitSystemEnvet>
  osKernelStart();
 8001b4c:	f003 fca4 	bl	8005498 <osKernelStart>
  while (1)
 8001b50:	e7fe      	b.n	8001b50 <main+0x3a4>
 8001b52:	b672      	cpsid	i
  while (1)
 8001b54:	e7fe      	b.n	8001b54 <main+0x3a8>
 8001b56:	b672      	cpsid	i
 8001b58:	e7fe      	b.n	8001b58 <main+0x3ac>
 8001b5a:	b672      	cpsid	i
 8001b5c:	e7fe      	b.n	8001b5c <main+0x3b0>
 8001b5e:	b672      	cpsid	i
 8001b60:	e7fe      	b.n	8001b60 <main+0x3b4>
 8001b62:	b672      	cpsid	i
 8001b64:	e7fe      	b.n	8001b64 <main+0x3b8>
 8001b66:	b672      	cpsid	i
 8001b68:	e7fe      	b.n	8001b68 <main+0x3bc>
 8001b6a:	b672      	cpsid	i
 8001b6c:	e7fe      	b.n	8001b6c <main+0x3c0>
 8001b6e:	b672      	cpsid	i
 8001b70:	e7fe      	b.n	8001b70 <main+0x3c4>
 8001b72:	b672      	cpsid	i
 8001b74:	e7fe      	b.n	8001b74 <main+0x3c8>
 8001b76:	b672      	cpsid	i
 8001b78:	e7fe      	b.n	8001b78 <main+0x3cc>
 8001b7a:	b672      	cpsid	i
 8001b7c:	e7fe      	b.n	8001b7c <main+0x3d0>
 8001b7e:	b672      	cpsid	i
 8001b80:	e7fe      	b.n	8001b80 <main+0x3d4>
 8001b82:	b672      	cpsid	i
 8001b84:	e7fe      	b.n	8001b84 <main+0x3d8>
 8001b86:	b672      	cpsid	i
 8001b88:	e7fe      	b.n	8001b88 <main+0x3dc>
 8001b8a:	b672      	cpsid	i
 8001b8c:	e7fe      	b.n	8001b8c <main+0x3e0>
 8001b8e:	b672      	cpsid	i
 8001b90:	e7fe      	b.n	8001b90 <main+0x3e4>
 8001b92:	b672      	cpsid	i
 8001b94:	e7fe      	b.n	8001b94 <main+0x3e8>
 8001b96:	bf00      	nop
 8001b98:	20001794 	.word	0x20001794
 8001b9c:	08007cf8 	.word	0x08007cf8
 8001ba0:	20001874 	.word	0x20001874
 8001ba4:	08007cd4 	.word	0x08007cd4
 8001ba8:	08001605 	.word	0x08001605
 8001bac:	2000168c 	.word	0x2000168c
 8001bb0:	08007c44 	.word	0x08007c44
 8001bb4:	0800111d 	.word	0x0800111d
 8001bb8:	20000784 	.word	0x20000784
 8001bbc:	08007cb0 	.word	0x08007cb0
 8001bc0:	08005189 	.word	0x08005189
 8001bc4:	200013cc 	.word	0x200013cc
 8001bc8:	08007c68 	.word	0x08007c68
 8001bcc:	08001cc1 	.word	0x08001cc1
 8001bd0:	20000c44 	.word	0x20000c44
 8001bd4:	08007c8c 	.word	0x08007c8c
 8001bd8:	08001c91 	.word	0x08001c91
 8001bdc:	2000110c 	.word	0x2000110c
 8001be0:	08007d08 	.word	0x08007d08
 8001be4:	2000189c 	.word	0x2000189c
 8001be8:	08007d28 	.word	0x08007d28
 8001bec:	200018e4 	.word	0x200018e4
 8001bf0:	08007d18 	.word	0x08007d18
 8001bf4:	200018c0 	.word	0x200018c0

08001bf8 <HAL_TIM_PeriodElapsedCallback>:
{
 8001bf8:	b508      	push	{r3, lr}
  if (htim->Instance == TIM1) {
 8001bfa:	6802      	ldr	r2, [r0, #0]
 8001bfc:	4b03      	ldr	r3, [pc, #12]	; (8001c0c <HAL_TIM_PeriodElapsedCallback+0x14>)
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d000      	beq.n	8001c04 <HAL_TIM_PeriodElapsedCallback+0xc>
}
 8001c02:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8001c04:	f000 fad4 	bl	80021b0 <HAL_IncTick>
}
 8001c08:	e7fb      	b.n	8001c02 <HAL_TIM_PeriodElapsedCallback+0xa>
 8001c0a:	bf00      	nop
 8001c0c:	40012c00 	.word	0x40012c00

08001c10 <Error_Handler>:
 8001c10:	b672      	cpsid	i
  while (1)
 8001c12:	e7fe      	b.n	8001c12 <Error_Handler+0x2>

08001c14 <InitSystemEnvet>:
extern TIM_HandleTypeDef htim4;
extern TIM_HandleTypeDef htim3;

void InitSystemEnvet(EventGroupHandle_t event)
{
	 xSystemEventGroupHandle = event;
 8001c14:	4b01      	ldr	r3, [pc, #4]	; (8001c1c <InitSystemEnvet+0x8>)
 8001c16:	6018      	str	r0, [r3, #0]
}
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	2000191c 	.word	0x2000191c

08001c20 <waitFlag>:
void waitFlag( uint32_t flag)
{
 8001c20:	b500      	push	{lr}
 8001c22:	b083      	sub	sp, #12
 8001c24:	4601      	mov	r1, r0
	xEventGroupWaitBits(xSystemEventGroupHandle,   flag ,  pdFALSE, pdTRUE, portMAX_DELAY );
 8001c26:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2a:	9300      	str	r3, [sp, #0]
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	2200      	movs	r2, #0
 8001c30:	4803      	ldr	r0, [pc, #12]	; (8001c40 <waitFlag+0x20>)
 8001c32:	6800      	ldr	r0, [r0, #0]
 8001c34:	f003 fdc7 	bl	80057c6 <xEventGroupWaitBits>
}
 8001c38:	b003      	add	sp, #12
 8001c3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c3e:	bf00      	nop
 8001c40:	2000191c 	.word	0x2000191c

08001c44 <usGetConnection>:
uint8_t connection;

uint8_t usGetConnection()
{
	return connection_error;
}
 8001c44:	4b01      	ldr	r3, [pc, #4]	; (8001c4c <usGetConnection+0x8>)
 8001c46:	7818      	ldrb	r0, [r3, #0]
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	200018ea 	.word	0x200018ea

08001c50 <usGetReg>:
 */
uint16_t usGetReg( REGS_t reg_addr)
{
	uint16_t usRes;

     if (reg_addr == MODE)
 8001c50:	4602      	mov	r2, r0
 8001c52:	b910      	cbnz	r0, 8001c5a <usGetReg+0xa>
	 {
			connection = 1;
 8001c54:	4b03      	ldr	r3, [pc, #12]	; (8001c64 <usGetReg+0x14>)
 8001c56:	2101      	movs	r1, #1
 8001c58:	7019      	strb	r1, [r3, #0]
		}
		usRes = system_regs[reg_addr];

	return  (usRes);
}
 8001c5a:	4b03      	ldr	r3, [pc, #12]	; (8001c68 <usGetReg+0x18>)
 8001c5c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	200018e9 	.word	0x200018e9
 8001c68:	20001908 	.word	0x20001908

08001c6c <usGetRegInput>:
uint16_t usGetRegInput( REGS_t reg_addr)
{
	uint16_t usRes;
    usRes = input_regs[reg_addr];
	return  (usRes);
}
 8001c6c:	4b01      	ldr	r3, [pc, #4]	; (8001c74 <usGetRegInput+0x8>)
 8001c6e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8001c72:	4770      	bx	lr
 8001c74:	200018f0 	.word	0x200018f0

08001c78 <vSetRegInput>:
		  if (input_regs[reg_addr] != data)
		  {
			  mode_restart = 1;
		  }
	  }
      input_regs[reg_addr] = data;
 8001c78:	4b01      	ldr	r3, [pc, #4]	; (8001c80 <vSetRegInput+0x8>)
 8001c7a:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
}
 8001c7e:	4770      	bx	lr
 8001c80:	200018f0 	.word	0x200018f0

08001c84 <vSetReg>:
				  if (system_regs[reg_addr] != data)
				  {
					  mode_restart = 1;
				  }
			  }
			  system_regs[reg_addr] = data;
 8001c84:	4b01      	ldr	r3, [pc, #4]	; (8001c8c <vSetReg+0x8>)
 8001c86:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
}
 8001c8a:	4770      	bx	lr
 8001c8c:	20001908 	.word	0x20001908

08001c90 <vMBTask>:


 void vMBTask(void *argument)
 {
 8001c90:	b508      	push	{r3, lr}
	 uint16_t addres = 0;
	 waitFlag( DIN_READY );
 8001c92:	2001      	movs	r0, #1
 8001c94:	f7ff ffc4 	bl	8001c20 <waitFlag>
	 addres = (uiGetDinMask() & DEVICE_ADDR_MASK)>>DEVICE_ADDR_OFFSET;
	 eMBInit(MB_RTU,addres,0,19200,MB_PAR_ODD );
	 eMBEnable(  );
#endif
#ifdef MASTER_MODE
	 eMBMasterInit(MB_RTU,0,19200,MB_PAR_ODD );
 8001c98:	2301      	movs	r3, #1
 8001c9a:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	4608      	mov	r0, r1
 8001ca2:	f002 fb53 	bl	800434c <eMBMasterInit>
	 eMBMasterEnable();
 8001ca6:	f002 fba3 	bl	80043f0 <eMBMasterEnable>
#endif
	 xEventGroupSetBits(xSystemEventGroupHandle,  MB_READY );
 8001caa:	2104      	movs	r1, #4
 8001cac:	4b03      	ldr	r3, [pc, #12]	; (8001cbc <vMBTask+0x2c>)
 8001cae:	6818      	ldr	r0, [r3, #0]
 8001cb0:	f003 fe14 	bl	80058dc <xEventGroupSetBits>
		 vTaskDelay(1);
		 eMBPoll();
#endif
#ifdef MASTER_MODE

		 eMBMasterPoll(  );
 8001cb4:	f002 fbae 	bl	8004414 <eMBMasterPoll>
	 while (1)
 8001cb8:	e7fc      	b.n	8001cb4 <vMBTask+0x24>
 8001cba:	bf00      	nop
 8001cbc:	2000191c 	.word	0x2000191c

08001cc0 <vDATATask>:
 }


void vDATATask(void *argument)

 {
 8001cc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001cc4:	b085      	sub	sp, #20
   //Инициализация типа системы
#ifdef MASTER_MODE
	uint16_t master_delay = 0;
#endif
	MAIN_FSM_STATE_t InitFSM = STANDBAY_STATE;
 8001cc6:	2400      	movs	r4, #0
      input_regs[reg_addr] = data;
 8001cc8:	4f3f      	ldr	r7, [pc, #252]	; (8001dc8 <vDATATask+0x108>)
 8001cca:	46a0      	mov	r8, r4
 8001ccc:	4626      	mov	r6, r4
			connection = 1;
 8001cce:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8001dcc <vDATATask+0x10c>
 8001cd2:	2501      	movs	r5, #1
 8001cd4:	e003      	b.n	8001cde <vDATATask+0x1e>
		 vTaskDelay(10);
		 switch (InitFSM)
		 {
		 	 case STANDBAY_STATE:
		 		 //Дожидаемся пока отработают все остальные процессы
		 		 waitFlag( DIN_READY | AIN_READY | MB_READY);
 8001cd6:	2007      	movs	r0, #7
 8001cd8:	f7ff ffa2 	bl	8001c20 <waitFlag>
 {
 8001cdc:	462c      	mov	r4, r5
      input_regs[reg_addr] = data;
 8001cde:	80fe      	strh	r6, [r7, #6]
		 vTaskDelay(10);
 8001ce0:	200a      	movs	r0, #10
 8001ce2:	f004 feb3 	bl	8006a4c <vTaskDelay>
		 switch (InitFSM)
 8001ce6:	2c00      	cmp	r4, #0
 8001ce8:	d0f5      	beq.n	8001cd6 <vDATATask+0x16>
			connection = 1;
 8001cea:	f889 5000 	strb.w	r5, [r9]
		usRes = system_regs[reg_addr];
 8001cee:	4b38      	ldr	r3, [pc, #224]	; (8001dd0 <vDATATask+0x110>)
 8001cf0:	885b      	ldrh	r3, [r3, #2]
    	case 2:
    		data[0] = MANUAL_MODE;
    		break;
    }

	switch (usGetReg(FAN_SPEED_CONFIG))
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d020      	beq.n	8001d38 <vDATATask+0x78>
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d01b      	beq.n	8001d32 <vDATATask+0x72>
 8001cfa:	b1b3      	cbz	r3, 8001d2a <vDATATask+0x6a>
		usRes = system_regs[reg_addr];
 8001cfc:	4b34      	ldr	r3, [pc, #208]	; (8001dd0 <vDATATask+0x110>)
		case 1:
			data[1] = FAN_SPEED_MAX;
			break;
	}

	data[2]=usGetReg(WORK_TEMP);
 8001cfe:	889a      	ldrh	r2, [r3, #4]
 8001d00:	f8ad 200c 	strh.w	r2, [sp, #12]
	data[3]=usGetReg(AIR_TEMP);
 8001d04:	88db      	ldrh	r3, [r3, #6]
 8001d06:	f8ad 300e 	strh.w	r3, [sp, #14]

	data[0]= datatemp;
 8001d0a:	4b32      	ldr	r3, [pc, #200]	; (8001dd4 <vDATATask+0x114>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	f8ad 3008 	strh.w	r3, [sp, #8]


	switch (mastersendFSM)
 8001d12:	4b31      	ldr	r3, [pc, #196]	; (8001dd8 <vDATATask+0x118>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	b19b      	cbz	r3, 8001d40 <vDATATask+0x80>
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d1df      	bne.n	8001cdc <vDATATask+0x1c>
		usRes = system_regs[reg_addr];
 8001d1c:	4b2c      	ldr	r3, [pc, #176]	; (8001dd0 <vDATATask+0x110>)
					}
					mastersendFSM = 1;
				}
				break;
			case 1:
				if (  usGetReg( CONTROL_MODE )  )
 8001d1e:	891b      	ldrh	r3, [r3, #8]
 8001d20:	bb43      	cbnz	r3, 8001d74 <vDATATask+0xb4>

					}
				}
				else
				{
					mastersendFSM = 0;
 8001d22:	4b2d      	ldr	r3, [pc, #180]	; (8001dd8 <vDATATask+0x118>)
 8001d24:	f883 8000 	strb.w	r8, [r3]
	//else
	//{*/
	//	connection_error = 0;

	//}
}
 8001d28:	e7d8      	b.n	8001cdc <vDATATask+0x1c>
			data[1] = FAN_SPEED_MID;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	f8ad 300a 	strh.w	r3, [sp, #10]
			break;
 8001d30:	e7e4      	b.n	8001cfc <vDATATask+0x3c>
			data[1] = FAN_SPEED_MIN;
 8001d32:	f8ad 500a 	strh.w	r5, [sp, #10]
			break;
 8001d36:	e7e1      	b.n	8001cfc <vDATATask+0x3c>
			data[1] = FAN_SPEED_MAX;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	f8ad 300a 	strh.w	r3, [sp, #10]
			break;
 8001d3e:	e7dd      	b.n	8001cfc <vDATATask+0x3c>
				errorCode = eMBMasterReqWriteMultipleHoldingRegister( 0, 13, 4, &data[0], 0);
 8001d40:	f8cd 8000 	str.w	r8, [sp]
 8001d44:	ab02      	add	r3, sp, #8
 8001d46:	2204      	movs	r2, #4
 8001d48:	210d      	movs	r1, #13
 8001d4a:	4640      	mov	r0, r8
 8001d4c:	f002 fd68 	bl	8004820 <eMBMasterReqWriteMultipleHoldingRegister>
 8001d50:	4b22      	ldr	r3, [pc, #136]	; (8001ddc <vDATATask+0x11c>)
 8001d52:	7018      	strb	r0, [r3, #0]
				if (errorCode==MB_MRE_NO_ERR)
 8001d54:	2800      	cmp	r0, #0
 8001d56:	d1c1      	bne.n	8001cdc <vDATATask+0x1c>
					if (++datatemp ==100)
 8001d58:	4b1e      	ldr	r3, [pc, #120]	; (8001dd4 <vDATATask+0x114>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b64      	cmp	r3, #100	; 0x64
 8001d62:	bf19      	ittee	ne
 8001d64:	4a1b      	ldrne	r2, [pc, #108]	; (8001dd4 <vDATATask+0x114>)
 8001d66:	7013      	strbne	r3, [r2, #0]
						datatemp = 0;
 8001d68:	4b1a      	ldreq	r3, [pc, #104]	; (8001dd4 <vDATATask+0x114>)
 8001d6a:	f883 8000 	strbeq.w	r8, [r3]
					mastersendFSM = 1;
 8001d6e:	4b1a      	ldr	r3, [pc, #104]	; (8001dd8 <vDATATask+0x118>)
 8001d70:	701d      	strb	r5, [r3, #0]
 8001d72:	e7b3      	b.n	8001cdc <vDATATask+0x1c>
					errorCode = eMBMasterReqReadInputRegister( mster_control_addres, 12, 1, 0 );
 8001d74:	4643      	mov	r3, r8
 8001d76:	462a      	mov	r2, r5
 8001d78:	210c      	movs	r1, #12
 8001d7a:	4819      	ldr	r0, [pc, #100]	; (8001de0 <vDATATask+0x120>)
 8001d7c:	7800      	ldrb	r0, [r0, #0]
 8001d7e:	f002 fe29 	bl	80049d4 <eMBMasterReqReadInputRegister>
 8001d82:	4b16      	ldr	r3, [pc, #88]	; (8001ddc <vDATATask+0x11c>)
 8001d84:	7018      	strb	r0, [r3, #0]
					switch (errorCode)
 8001d86:	b138      	cbz	r0, 8001d98 <vDATATask+0xd8>
 8001d88:	3803      	subs	r0, #3
 8001d8a:	b2c0      	uxtb	r0, r0
 8001d8c:	2801      	cmp	r0, #1
 8001d8e:	d8a5      	bhi.n	8001cdc <vDATATask+0x1c>
												con_err_count++;
 8001d90:	4a14      	ldr	r2, [pc, #80]	; (8001de4 <vDATATask+0x124>)
 8001d92:	7813      	ldrb	r3, [r2, #0]
 8001d94:	3301      	adds	r3, #1
 8001d96:	7013      	strb	r3, [r2, #0]
												mster_control_addres++;
 8001d98:	4a11      	ldr	r2, [pc, #68]	; (8001de0 <vDATATask+0x120>)
 8001d9a:	7813      	ldrb	r3, [r2, #0]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	7013      	strb	r3, [r2, #0]
												if ( mster_control_addres > usGetReg( DEVICE_COUNT ) )
 8001da2:	4a0b      	ldr	r2, [pc, #44]	; (8001dd0 <vDATATask+0x110>)
 8001da4:	8952      	ldrh	r2, [r2, #10]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d20a      	bcs.n	8001dc0 <vDATATask+0x100>
													mster_control_addres = 1;
 8001daa:	4b0d      	ldr	r3, [pc, #52]	; (8001de0 <vDATATask+0x120>)
 8001dac:	701d      	strb	r5, [r3, #0]
													if (con_err_count == 0)
 8001dae:	4a0d      	ldr	r2, [pc, #52]	; (8001de4 <vDATATask+0x124>)
 8001db0:	7813      	ldrb	r3, [r2, #0]
 8001db2:	3b00      	subs	r3, #0
 8001db4:	bf18      	it	ne
 8001db6:	2301      	movne	r3, #1
 8001db8:	490b      	ldr	r1, [pc, #44]	; (8001de8 <vDATATask+0x128>)
 8001dba:	700b      	strb	r3, [r1, #0]
													con_err_count = 0;
 8001dbc:	f882 8000 	strb.w	r8, [r2]
												mastersendFSM = 0;
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <vDATATask+0x118>)
 8001dc2:	f883 8000 	strb.w	r8, [r3]
												break;
 8001dc6:	e789      	b.n	8001cdc <vDATATask+0x1c>
 8001dc8:	200018f0 	.word	0x200018f0
 8001dcc:	200018e9 	.word	0x200018e9
 8001dd0:	20001908 	.word	0x20001908
 8001dd4:	200018eb 	.word	0x200018eb
 8001dd8:	20001904 	.word	0x20001904
 8001ddc:	200018ec 	.word	0x200018ec
 8001de0:	20000000 	.word	0x20000000
 8001de4:	200018e8 	.word	0x200018e8
 8001de8:	200018ea 	.word	0x200018ea

08001dec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dec:	b500      	push	{lr}
 8001dee:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001df0:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <HAL_MspInit+0x4c>)
 8001df2:	699a      	ldr	r2, [r3, #24]
 8001df4:	f042 0201 	orr.w	r2, r2, #1
 8001df8:	619a      	str	r2, [r3, #24]
 8001dfa:	699a      	ldr	r2, [r3, #24]
 8001dfc:	f002 0201 	and.w	r2, r2, #1
 8001e00:	9200      	str	r2, [sp, #0]
 8001e02:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e04:	69da      	ldr	r2, [r3, #28]
 8001e06:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e0a:	61da      	str	r2, [r3, #28]
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e12:	9301      	str	r3, [sp, #4]
 8001e14:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e16:	2200      	movs	r2, #0
 8001e18:	210f      	movs	r1, #15
 8001e1a:	f06f 0001 	mvn.w	r0, #1
 8001e1e:	f000 fc95 	bl	800274c <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e22:	4a06      	ldr	r2, [pc, #24]	; (8001e3c <HAL_MspInit+0x50>)
 8001e24:	6853      	ldr	r3, [r2, #4]
 8001e26:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e2e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e30:	b003      	add	sp, #12
 8001e32:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e36:	bf00      	nop
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	40010000 	.word	0x40010000

08001e40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e40:	b510      	push	{r4, lr}
 8001e42:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e44:	2300      	movs	r3, #0
 8001e46:	9302      	str	r3, [sp, #8]
 8001e48:	9303      	str	r3, [sp, #12]
 8001e4a:	9304      	str	r3, [sp, #16]
 8001e4c:	9305      	str	r3, [sp, #20]
  if(hadc->Instance==ADC1)
 8001e4e:	6802      	ldr	r2, [r0, #0]
 8001e50:	4b1d      	ldr	r3, [pc, #116]	; (8001ec8 <HAL_ADC_MspInit+0x88>)
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d001      	beq.n	8001e5a <HAL_ADC_MspInit+0x1a>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e56:	b006      	add	sp, #24
 8001e58:	bd10      	pop	{r4, pc}
 8001e5a:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e5c:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8001e60:	699a      	ldr	r2, [r3, #24]
 8001e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e66:	619a      	str	r2, [r3, #24]
 8001e68:	699a      	ldr	r2, [r3, #24]
 8001e6a:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001e6e:	9200      	str	r2, [sp, #0]
 8001e70:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e72:	699a      	ldr	r2, [r3, #24]
 8001e74:	f042 0204 	orr.w	r2, r2, #4
 8001e78:	619a      	str	r2, [r3, #24]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	9301      	str	r3, [sp, #4]
 8001e82:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001e84:	2307      	movs	r3, #7
 8001e86:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8c:	a902      	add	r1, sp, #8
 8001e8e:	480f      	ldr	r0, [pc, #60]	; (8001ecc <HAL_ADC_MspInit+0x8c>)
 8001e90:	f000 fe34 	bl	8002afc <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8001e94:	480e      	ldr	r0, [pc, #56]	; (8001ed0 <HAL_ADC_MspInit+0x90>)
 8001e96:	4b0f      	ldr	r3, [pc, #60]	; (8001ed4 <HAL_ADC_MspInit+0x94>)
 8001e98:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e9e:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ea0:	2280      	movs	r2, #128	; 0x80
 8001ea2:	60c2      	str	r2, [r0, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ea4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ea8:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001eaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eae:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001eb0:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001eb2:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001eb4:	f000 fc8e 	bl	80027d4 <HAL_DMA_Init>
 8001eb8:	b918      	cbnz	r0, 8001ec2 <HAL_ADC_MspInit+0x82>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001eba:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <HAL_ADC_MspInit+0x90>)
 8001ebc:	6223      	str	r3, [r4, #32]
 8001ebe:	625c      	str	r4, [r3, #36]	; 0x24
}
 8001ec0:	e7c9      	b.n	8001e56 <HAL_ADC_MspInit+0x16>
      Error_Handler();
 8001ec2:	f7ff fea5 	bl	8001c10 <Error_Handler>
 8001ec6:	e7f8      	b.n	8001eba <HAL_ADC_MspInit+0x7a>
 8001ec8:	40012400 	.word	0x40012400
 8001ecc:	40010800 	.word	0x40010800
 8001ed0:	200016c0 	.word	0x200016c0
 8001ed4:	40020008 	.word	0x40020008

08001ed8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ed8:	b500      	push	{lr}
 8001eda:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM2)
 8001edc:	6803      	ldr	r3, [r0, #0]
 8001ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ee2:	d008      	beq.n	8001ef6 <HAL_TIM_Base_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8001ee4:	4a1d      	ldr	r2, [pc, #116]	; (8001f5c <HAL_TIM_Base_MspInit+0x84>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d019      	beq.n	8001f1e <HAL_TIM_Base_MspInit+0x46>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8001eea:	4a1d      	ldr	r2, [pc, #116]	; (8001f60 <HAL_TIM_Base_MspInit+0x88>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d021      	beq.n	8001f34 <HAL_TIM_Base_MspInit+0x5c>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001ef0:	b005      	add	sp, #20
 8001ef2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ef6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001efa:	69da      	ldr	r2, [r3, #28]
 8001efc:	f042 0201 	orr.w	r2, r2, #1
 8001f00:	61da      	str	r2, [r3, #28]
 8001f02:	69db      	ldr	r3, [r3, #28]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	9301      	str	r3, [sp, #4]
 8001f0a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2105      	movs	r1, #5
 8001f10:	201c      	movs	r0, #28
 8001f12:	f000 fc1b 	bl	800274c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f16:	201c      	movs	r0, #28
 8001f18:	f000 fc4e 	bl	80027b8 <HAL_NVIC_EnableIRQ>
 8001f1c:	e7e8      	b.n	8001ef0 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f1e:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <HAL_TIM_Base_MspInit+0x8c>)
 8001f20:	69da      	ldr	r2, [r3, #28]
 8001f22:	f042 0202 	orr.w	r2, r2, #2
 8001f26:	61da      	str	r2, [r3, #28]
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	9302      	str	r3, [sp, #8]
 8001f30:	9b02      	ldr	r3, [sp, #8]
 8001f32:	e7dd      	b.n	8001ef0 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <HAL_TIM_Base_MspInit+0x8c>)
 8001f36:	69da      	ldr	r2, [r3, #28]
 8001f38:	f042 0204 	orr.w	r2, r2, #4
 8001f3c:	61da      	str	r2, [r3, #28]
 8001f3e:	69db      	ldr	r3, [r3, #28]
 8001f40:	f003 0304 	and.w	r3, r3, #4
 8001f44:	9303      	str	r3, [sp, #12]
 8001f46:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	2105      	movs	r1, #5
 8001f4c:	201e      	movs	r0, #30
 8001f4e:	f000 fbfd 	bl	800274c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001f52:	201e      	movs	r0, #30
 8001f54:	f000 fc30 	bl	80027b8 <HAL_NVIC_EnableIRQ>
}
 8001f58:	e7ca      	b.n	8001ef0 <HAL_TIM_Base_MspInit+0x18>
 8001f5a:	bf00      	nop
 8001f5c:	40000400 	.word	0x40000400
 8001f60:	40000800 	.word	0x40000800
 8001f64:	40021000 	.word	0x40021000

08001f68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f68:	b500      	push	{lr}
 8001f6a:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	9302      	str	r3, [sp, #8]
 8001f70:	9303      	str	r3, [sp, #12]
 8001f72:	9304      	str	r3, [sp, #16]
 8001f74:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM3)
 8001f76:	6802      	ldr	r2, [r0, #0]
 8001f78:	4b0d      	ldr	r3, [pc, #52]	; (8001fb0 <HAL_TIM_MspPostInit+0x48>)
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d002      	beq.n	8001f84 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001f7e:	b007      	add	sp, #28
 8001f80:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f84:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8001f88:	699a      	ldr	r2, [r3, #24]
 8001f8a:	f042 0204 	orr.w	r2, r2, #4
 8001f8e:	619a      	str	r2, [r3, #24]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	f003 0304 	and.w	r3, r3, #4
 8001f96:	9301      	str	r3, [sp, #4]
 8001f98:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f9a:	23c0      	movs	r3, #192	; 0xc0
 8001f9c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa6:	a902      	add	r1, sp, #8
 8001fa8:	4802      	ldr	r0, [pc, #8]	; (8001fb4 <HAL_TIM_MspPostInit+0x4c>)
 8001faa:	f000 fda7 	bl	8002afc <HAL_GPIO_Init>
}
 8001fae:	e7e6      	b.n	8001f7e <HAL_TIM_MspPostInit+0x16>
 8001fb0:	40000400 	.word	0x40000400
 8001fb4:	40010800 	.word	0x40010800

08001fb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fb8:	b530      	push	{r4, r5, lr}
 8001fba:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	9302      	str	r3, [sp, #8]
 8001fc0:	9303      	str	r3, [sp, #12]
 8001fc2:	9304      	str	r3, [sp, #16]
 8001fc4:	9305      	str	r3, [sp, #20]
  if(huart->Instance==USART1)
 8001fc6:	6802      	ldr	r2, [r0, #0]
 8001fc8:	4b1b      	ldr	r3, [pc, #108]	; (8002038 <HAL_UART_MspInit+0x80>)
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d001      	beq.n	8001fd2 <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001fce:	b007      	add	sp, #28
 8001fd0:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fd2:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001fd6:	699a      	ldr	r2, [r3, #24]
 8001fd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fdc:	619a      	str	r2, [r3, #24]
 8001fde:	699a      	ldr	r2, [r3, #24]
 8001fe0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001fe4:	9200      	str	r2, [sp, #0]
 8001fe6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe8:	699a      	ldr	r2, [r3, #24]
 8001fea:	f042 0204 	orr.w	r2, r2, #4
 8001fee:	619a      	str	r2, [r3, #24]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	f003 0304 	and.w	r3, r3, #4
 8001ff6:	9301      	str	r3, [sp, #4]
 8001ff8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ffa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ffe:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002000:	2302      	movs	r3, #2
 8002002:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002004:	2303      	movs	r3, #3
 8002006:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002008:	4d0c      	ldr	r5, [pc, #48]	; (800203c <HAL_UART_MspInit+0x84>)
 800200a:	a902      	add	r1, sp, #8
 800200c:	4628      	mov	r0, r5
 800200e:	f000 fd75 	bl	8002afc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002012:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002016:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002018:	2400      	movs	r4, #0
 800201a:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201c:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201e:	a902      	add	r1, sp, #8
 8002020:	4628      	mov	r0, r5
 8002022:	f000 fd6b 	bl	8002afc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002026:	4622      	mov	r2, r4
 8002028:	2105      	movs	r1, #5
 800202a:	2025      	movs	r0, #37	; 0x25
 800202c:	f000 fb8e 	bl	800274c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002030:	2025      	movs	r0, #37	; 0x25
 8002032:	f000 fbc1 	bl	80027b8 <HAL_NVIC_EnableIRQ>
}
 8002036:	e7ca      	b.n	8001fce <HAL_UART_MspInit+0x16>
 8002038:	40013800 	.word	0x40013800
 800203c:	40010800 	.word	0x40010800

08002040 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002040:	b530      	push	{r4, r5, lr}
 8002042:	b089      	sub	sp, #36	; 0x24
 8002044:	4604      	mov	r4, r0
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002046:	4b1e      	ldr	r3, [pc, #120]	; (80020c0 <HAL_InitTick+0x80>)
 8002048:	699a      	ldr	r2, [r3, #24]
 800204a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800204e:	619a      	str	r2, [r3, #24]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002056:	9301      	str	r3, [sp, #4]
 8002058:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800205a:	a902      	add	r1, sp, #8
 800205c:	a803      	add	r0, sp, #12
 800205e:	f001 f9b5 	bl	80033cc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002062:	f001 f9a3 	bl	80033ac <HAL_RCC_GetPCLK2Freq>
 8002066:	4603      	mov	r3, r0

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002068:	4816      	ldr	r0, [pc, #88]	; (80020c4 <HAL_InitTick+0x84>)
 800206a:	4a17      	ldr	r2, [pc, #92]	; (80020c8 <HAL_InitTick+0x88>)
 800206c:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800206e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002072:	60c2      	str	r2, [r0, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002074:	4a15      	ldr	r2, [pc, #84]	; (80020cc <HAL_InitTick+0x8c>)
 8002076:	fba2 2303 	umull	r2, r3, r2, r3
 800207a:	0c9b      	lsrs	r3, r3, #18
 800207c:	3b01      	subs	r3, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 800207e:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 8002080:	2300      	movs	r3, #0
 8002082:	6103      	str	r3, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002084:	6083      	str	r3, [r0, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002086:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002088:	f001 fc24 	bl	80038d4 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 800208c:	4605      	mov	r5, r0
 800208e:	b110      	cbz	r0, 8002096 <HAL_InitTick+0x56>
    }
  }

 /* Return function status */
  return status;
}
 8002090:	4628      	mov	r0, r5
 8002092:	b009      	add	sp, #36	; 0x24
 8002094:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002096:	480b      	ldr	r0, [pc, #44]	; (80020c4 <HAL_InitTick+0x84>)
 8002098:	f001 fabe 	bl	8003618 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 800209c:	4605      	mov	r5, r0
 800209e:	2800      	cmp	r0, #0
 80020a0:	d1f6      	bne.n	8002090 <HAL_InitTick+0x50>
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80020a2:	2019      	movs	r0, #25
 80020a4:	f000 fb88 	bl	80027b8 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020a8:	2c0f      	cmp	r4, #15
 80020aa:	d901      	bls.n	80020b0 <HAL_InitTick+0x70>
        status = HAL_ERROR;
 80020ac:	2501      	movs	r5, #1
 80020ae:	e7ef      	b.n	8002090 <HAL_InitTick+0x50>
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80020b0:	2200      	movs	r2, #0
 80020b2:	4621      	mov	r1, r4
 80020b4:	2019      	movs	r0, #25
 80020b6:	f000 fb49 	bl	800274c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020ba:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <HAL_InitTick+0x90>)
 80020bc:	601c      	str	r4, [r3, #0]
 80020be:	e7e7      	b.n	8002090 <HAL_InitTick+0x50>
 80020c0:	40021000 	.word	0x40021000
 80020c4:	20001920 	.word	0x20001920
 80020c8:	40012c00 	.word	0x40012c00
 80020cc:	431bde83 	.word	0x431bde83
 80020d0:	2000000c 	.word	0x2000000c

080020d4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020d4:	e7fe      	b.n	80020d4 <NMI_Handler>

080020d6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020d6:	e7fe      	b.n	80020d6 <HardFault_Handler>

080020d8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020d8:	e7fe      	b.n	80020d8 <MemManage_Handler>

080020da <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020da:	e7fe      	b.n	80020da <BusFault_Handler>

080020dc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020dc:	e7fe      	b.n	80020dc <UsageFault_Handler>

080020de <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020de:	4770      	bx	lr

080020e0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80020e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	vADCReady();
 80020e2:	f7fe ff61 	bl	8000fa8 <vADCReady>
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020e6:	4802      	ldr	r0, [pc, #8]	; (80020f0 <DMA1_Channel1_IRQHandler+0x10>)
 80020e8:	f000 fc68 	bl	80029bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80020ec:	bd08      	pop	{r3, pc}
 80020ee:	bf00      	nop
 80020f0:	200016c0 	.word	0x200016c0

080020f4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80020f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020f6:	4802      	ldr	r0, [pc, #8]	; (8002100 <TIM1_UP_IRQHandler+0xc>)
 80020f8:	f001 fae0 	bl	80036bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80020fc:	bd08      	pop	{r3, pc}
 80020fe:	bf00      	nop
 8002100:	20001920 	.word	0x20001920

08002104 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002104:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */
#ifdef MASTER_MODE
	 prvvTIMERExpiredISR();
 8002106:	f003 f897 	bl	8005238 <prvvTIMERExpiredISR>
#endif
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800210a:	4802      	ldr	r0, [pc, #8]	; (8002114 <TIM2_IRQHandler+0x10>)
 800210c:	f001 fad6 	bl	80036bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002110:	bd08      	pop	{r3, pc}
 8002112:	bf00      	nop
 8002114:	20001704 	.word	0x20001704

08002118 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002118:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */
#ifdef SLAVE_MODE
   vTimer1sInc();
#endif
#ifdef MASTER_MODE
   vResHeandler();
 800211a:	f7ff faf1 	bl	8001700 <vResHeandler>
#endif
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800211e:	4802      	ldr	r0, [pc, #8]	; (8002128 <TIM4_IRQHandler+0x10>)
 8002120:	f001 facc 	bl	80036bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002124:	bd08      	pop	{r3, pc}
 8002126:	bf00      	nop
 8002128:	20001794 	.word	0x20001794

0800212c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800212c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800212e:	4802      	ldr	r0, [pc, #8]	; (8002138 <USART1_IRQHandler+0xc>)
 8002130:	f001 ff60 	bl	8003ff4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002134:	bd08      	pop	{r3, pc}
 8002136:	bf00      	nop
 8002138:	200017dc 	.word	0x200017dc

0800213c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800213c:	4770      	bx	lr
	...

08002140 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002140:	f7ff fffc 	bl	800213c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002144:	480b      	ldr	r0, [pc, #44]	; (8002174 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002146:	490c      	ldr	r1, [pc, #48]	; (8002178 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002148:	4a0c      	ldr	r2, [pc, #48]	; (800217c <LoopFillZerobss+0x16>)
  movs r3, #0
 800214a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800214c:	e002      	b.n	8002154 <LoopCopyDataInit>

0800214e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800214e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002150:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002152:	3304      	adds	r3, #4

08002154 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002154:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002156:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002158:	d3f9      	bcc.n	800214e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800215a:	4a09      	ldr	r2, [pc, #36]	; (8002180 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800215c:	4c09      	ldr	r4, [pc, #36]	; (8002184 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800215e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002160:	e001      	b.n	8002166 <LoopFillZerobss>

08002162 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002162:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002164:	3204      	adds	r2, #4

08002166 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002166:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002168:	d3fb      	bcc.n	8002162 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800216a:	f005 fbc1 	bl	80078f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800216e:	f7ff fb1d 	bl	80017ac <main>
  bx lr
 8002172:	4770      	bx	lr
  ldr r0, =_sdata
 8002174:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002178:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800217c:	08008064 	.word	0x08008064
  ldr r2, =_sbss
 8002180:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002184:	20003ad0 	.word	0x20003ad0

08002188 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002188:	e7fe      	b.n	8002188 <ADC1_2_IRQHandler>
	...

0800218c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800218c:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800218e:	4a07      	ldr	r2, [pc, #28]	; (80021ac <HAL_Init+0x20>)
 8002190:	6813      	ldr	r3, [r2, #0]
 8002192:	f043 0310 	orr.w	r3, r3, #16
 8002196:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002198:	2003      	movs	r0, #3
 800219a:	f000 fac5 	bl	8002728 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800219e:	200f      	movs	r0, #15
 80021a0:	f7ff ff4e 	bl	8002040 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021a4:	f7ff fe22 	bl	8001dec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80021a8:	2000      	movs	r0, #0
 80021aa:	bd08      	pop	{r3, pc}
 80021ac:	40022000 	.word	0x40022000

080021b0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80021b0:	4a03      	ldr	r2, [pc, #12]	; (80021c0 <HAL_IncTick+0x10>)
 80021b2:	6811      	ldr	r1, [r2, #0]
 80021b4:	4b03      	ldr	r3, [pc, #12]	; (80021c4 <HAL_IncTick+0x14>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	440b      	add	r3, r1
 80021ba:	6013      	str	r3, [r2, #0]
}
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	20001968 	.word	0x20001968
 80021c4:	20000008 	.word	0x20000008

080021c8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80021c8:	4b01      	ldr	r3, [pc, #4]	; (80021d0 <HAL_GetTick+0x8>)
 80021ca:	6818      	ldr	r0, [r3, #0]
}
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	20001968 	.word	0x20001968

080021d4 <HAL_ADC_ConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80021d4:	4770      	bx	lr

080021d6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80021d6:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80021da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021dc:	f012 0f50 	tst.w	r2, #80	; 0x50
 80021e0:	d11e      	bne.n	8002220 <ADC_DMAConvCplt+0x4a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021e8:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	6892      	ldr	r2, [r2, #8]
 80021ee:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80021f2:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80021f6:	d003      	beq.n	8002200 <ADC_DMAConvCplt+0x2a>
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff ffeb 	bl	80021d4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80021fe:	bd08      	pop	{r3, pc}
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002200:	7b1a      	ldrb	r2, [r3, #12]
 8002202:	2a00      	cmp	r2, #0
 8002204:	d1f8      	bne.n	80021f8 <ADC_DMAConvCplt+0x22>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002206:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002208:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800220c:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800220e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002210:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8002214:	d1f0      	bne.n	80021f8 <ADC_DMAConvCplt+0x22>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002216:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002218:	f042 0201 	orr.w	r2, r2, #1
 800221c:	629a      	str	r2, [r3, #40]	; 0x28
 800221e:	e7eb      	b.n	80021f8 <ADC_DMAConvCplt+0x22>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002224:	4798      	blx	r3
}
 8002226:	e7ea      	b.n	80021fe <ADC_DMAConvCplt+0x28>

08002228 <HAL_ADC_ConvHalfCpltCallback>:
}
 8002228:	4770      	bx	lr

0800222a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800222a:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800222c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800222e:	f7ff fffb 	bl	8002228 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002232:	bd08      	pop	{r3, pc}

08002234 <HAL_ADC_ErrorCallback>:
}
 8002234:	4770      	bx	lr

08002236 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002236:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002238:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800223a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800223c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002240:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002242:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002244:	f043 0304 	orr.w	r3, r3, #4
 8002248:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800224a:	f7ff fff3 	bl	8002234 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800224e:	bd08      	pop	{r3, pc}

08002250 <HAL_ADC_ConfigChannel>:
{ 
 8002250:	b430      	push	{r4, r5}
 8002252:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8002254:	2200      	movs	r2, #0
 8002256:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8002258:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 800225c:	2a01      	cmp	r2, #1
 800225e:	f000 8095 	beq.w	800238c <HAL_ADC_ConfigChannel+0x13c>
 8002262:	4603      	mov	r3, r0
 8002264:	2201      	movs	r2, #1
 8002266:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800226a:	684a      	ldr	r2, [r1, #4]
 800226c:	2a06      	cmp	r2, #6
 800226e:	d82d      	bhi.n	80022cc <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002270:	6804      	ldr	r4, [r0, #0]
 8002272:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002274:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002278:	3a05      	subs	r2, #5
 800227a:	f04f 0c1f 	mov.w	ip, #31
 800227e:	fa0c fc02 	lsl.w	ip, ip, r2
 8002282:	ea20 000c 	bic.w	r0, r0, ip
 8002286:	680d      	ldr	r5, [r1, #0]
 8002288:	fa05 f202 	lsl.w	r2, r5, r2
 800228c:	4302      	orrs	r2, r0
 800228e:	6362      	str	r2, [r4, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002290:	680a      	ldr	r2, [r1, #0]
 8002292:	2a09      	cmp	r2, #9
 8002294:	d93a      	bls.n	800230c <HAL_ADC_ConfigChannel+0xbc>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002296:	681c      	ldr	r4, [r3, #0]
 8002298:	68e0      	ldr	r0, [r4, #12]
 800229a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800229e:	3a1e      	subs	r2, #30
 80022a0:	f04f 0c07 	mov.w	ip, #7
 80022a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80022a8:	ea20 000c 	bic.w	r0, r0, ip
 80022ac:	688d      	ldr	r5, [r1, #8]
 80022ae:	fa05 f202 	lsl.w	r2, r5, r2
 80022b2:	4302      	orrs	r2, r0
 80022b4:	60e2      	str	r2, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80022b6:	680a      	ldr	r2, [r1, #0]
 80022b8:	3a10      	subs	r2, #16
 80022ba:	2a01      	cmp	r2, #1
 80022bc:	d936      	bls.n	800232c <HAL_ADC_ConfigChannel+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022be:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 80022c6:	b002      	add	sp, #8
 80022c8:	bc30      	pop	{r4, r5}
 80022ca:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 80022cc:	2a0c      	cmp	r2, #12
 80022ce:	d80e      	bhi.n	80022ee <HAL_ADC_ConfigChannel+0x9e>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80022d0:	6805      	ldr	r5, [r0, #0]
 80022d2:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80022d4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80022d8:	3a23      	subs	r2, #35	; 0x23
 80022da:	241f      	movs	r4, #31
 80022dc:	4094      	lsls	r4, r2
 80022de:	ea20 0004 	bic.w	r0, r0, r4
 80022e2:	680c      	ldr	r4, [r1, #0]
 80022e4:	fa04 f202 	lsl.w	r2, r4, r2
 80022e8:	4302      	orrs	r2, r0
 80022ea:	632a      	str	r2, [r5, #48]	; 0x30
 80022ec:	e7d0      	b.n	8002290 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80022ee:	6805      	ldr	r5, [r0, #0]
 80022f0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80022f2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80022f6:	3a41      	subs	r2, #65	; 0x41
 80022f8:	241f      	movs	r4, #31
 80022fa:	4094      	lsls	r4, r2
 80022fc:	ea20 0004 	bic.w	r0, r0, r4
 8002300:	680c      	ldr	r4, [r1, #0]
 8002302:	fa04 f202 	lsl.w	r2, r4, r2
 8002306:	4302      	orrs	r2, r0
 8002308:	62ea      	str	r2, [r5, #44]	; 0x2c
 800230a:	e7c1      	b.n	8002290 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800230c:	681c      	ldr	r4, [r3, #0]
 800230e:	6920      	ldr	r0, [r4, #16]
 8002310:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002314:	f04f 0c07 	mov.w	ip, #7
 8002318:	fa0c fc02 	lsl.w	ip, ip, r2
 800231c:	ea20 000c 	bic.w	r0, r0, ip
 8002320:	688d      	ldr	r5, [r1, #8]
 8002322:	fa05 f202 	lsl.w	r2, r5, r2
 8002326:	4302      	orrs	r2, r0
 8002328:	6122      	str	r2, [r4, #16]
 800232a:	e7c4      	b.n	80022b6 <HAL_ADC_ConfigChannel+0x66>
    if (hadc->Instance == ADC1)
 800232c:	6818      	ldr	r0, [r3, #0]
 800232e:	4a18      	ldr	r2, [pc, #96]	; (8002390 <HAL_ADC_ConfigChannel+0x140>)
 8002330:	4290      	cmp	r0, r2
 8002332:	d005      	beq.n	8002340 <HAL_ADC_ConfigChannel+0xf0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002334:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002336:	f042 0220 	orr.w	r2, r2, #32
 800233a:	629a      	str	r2, [r3, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 800233c:	2001      	movs	r0, #1
 800233e:	e7bf      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x70>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002340:	6892      	ldr	r2, [r2, #8]
 8002342:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
 8002346:	d11d      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x134>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002348:	4811      	ldr	r0, [pc, #68]	; (8002390 <HAL_ADC_ConfigChannel+0x140>)
 800234a:	6882      	ldr	r2, [r0, #8]
 800234c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002350:	6082      	str	r2, [r0, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002352:	680a      	ldr	r2, [r1, #0]
 8002354:	2a10      	cmp	r2, #16
 8002356:	d001      	beq.n	800235c <HAL_ADC_ConfigChannel+0x10c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002358:	2000      	movs	r0, #0
 800235a:	e7b1      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800235c:	4a0d      	ldr	r2, [pc, #52]	; (8002394 <HAL_ADC_ConfigChannel+0x144>)
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	490d      	ldr	r1, [pc, #52]	; (8002398 <HAL_ADC_ConfigChannel+0x148>)
 8002362:	fba1 1202 	umull	r1, r2, r1, r2
 8002366:	0c92      	lsrs	r2, r2, #18
 8002368:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800236c:	0052      	lsls	r2, r2, #1
 800236e:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8002370:	9a01      	ldr	r2, [sp, #4]
 8002372:	b14a      	cbz	r2, 8002388 <HAL_ADC_ConfigChannel+0x138>
            wait_loop_index--;
 8002374:	9a01      	ldr	r2, [sp, #4]
 8002376:	3a01      	subs	r2, #1
 8002378:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 800237a:	9a01      	ldr	r2, [sp, #4]
 800237c:	2a00      	cmp	r2, #0
 800237e:	d1f9      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x124>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002380:	2000      	movs	r0, #0
 8002382:	e79d      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x70>
 8002384:	2000      	movs	r0, #0
 8002386:	e79b      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x70>
 8002388:	2000      	movs	r0, #0
 800238a:	e799      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 800238c:	2002      	movs	r0, #2
 800238e:	e79a      	b.n	80022c6 <HAL_ADC_ConfigChannel+0x76>
 8002390:	40012400 	.word	0x40012400
 8002394:	20000004 	.word	0x20000004
 8002398:	431bde83 	.word	0x431bde83

0800239c <ADC_Enable>:
{
 800239c:	b530      	push	{r4, r5, lr}
 800239e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023a4:	6803      	ldr	r3, [r0, #0]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	f012 0f01 	tst.w	r2, #1
 80023ac:	d13b      	bne.n	8002426 <ADC_Enable+0x8a>
 80023ae:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 80023b0:	689a      	ldr	r2, [r3, #8]
 80023b2:	f042 0201 	orr.w	r2, r2, #1
 80023b6:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023b8:	4b1c      	ldr	r3, [pc, #112]	; (800242c <ADC_Enable+0x90>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a1c      	ldr	r2, [pc, #112]	; (8002430 <ADC_Enable+0x94>)
 80023be:	fba2 2303 	umull	r2, r3, r2, r3
 80023c2:	0c9b      	lsrs	r3, r3, #18
 80023c4:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80023c6:	9b01      	ldr	r3, [sp, #4]
 80023c8:	b12b      	cbz	r3, 80023d6 <ADC_Enable+0x3a>
      wait_loop_index--;
 80023ca:	9b01      	ldr	r3, [sp, #4]
 80023cc:	3b01      	subs	r3, #1
 80023ce:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80023d0:	9b01      	ldr	r3, [sp, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1f9      	bne.n	80023ca <ADC_Enable+0x2e>
    tickstart = HAL_GetTick();
 80023d6:	f7ff fef7 	bl	80021c8 <HAL_GetTick>
 80023da:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80023dc:	6823      	ldr	r3, [r4, #0]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f013 0f01 	tst.w	r3, #1
 80023e4:	d006      	beq.n	80023f4 <ADC_Enable+0x58>
  return HAL_OK;
 80023e6:	2000      	movs	r0, #0
 80023e8:	e01e      	b.n	8002428 <ADC_Enable+0x8c>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80023ea:	6823      	ldr	r3, [r4, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f013 0f01 	tst.w	r3, #1
 80023f2:	d116      	bne.n	8002422 <ADC_Enable+0x86>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023f4:	f7ff fee8 	bl	80021c8 <HAL_GetTick>
 80023f8:	1b43      	subs	r3, r0, r5
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d9f5      	bls.n	80023ea <ADC_Enable+0x4e>
        if(ADC_IS_ENABLE(hadc) == RESET)
 80023fe:	6823      	ldr	r3, [r4, #0]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f013 0f01 	tst.w	r3, #1
 8002406:	d1f0      	bne.n	80023ea <ADC_Enable+0x4e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002408:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800240a:	f043 0310 	orr.w	r3, r3, #16
 800240e:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002410:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002412:	f043 0301 	orr.w	r3, r3, #1
 8002416:	62e3      	str	r3, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 8002418:	2300      	movs	r3, #0
 800241a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          return HAL_ERROR;
 800241e:	2001      	movs	r0, #1
 8002420:	e002      	b.n	8002428 <ADC_Enable+0x8c>
  return HAL_OK;
 8002422:	2000      	movs	r0, #0
 8002424:	e000      	b.n	8002428 <ADC_Enable+0x8c>
 8002426:	2000      	movs	r0, #0
}
 8002428:	b003      	add	sp, #12
 800242a:	bd30      	pop	{r4, r5, pc}
 800242c:	20000004 	.word	0x20000004
 8002430:	431bde83 	.word	0x431bde83

08002434 <HAL_ADC_Start_DMA>:
{
 8002434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002436:	4604      	mov	r4, r0
 8002438:	460d      	mov	r5, r1
 800243a:	4616      	mov	r6, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800243c:	6801      	ldr	r1, [r0, #0]
 800243e:	4842      	ldr	r0, [pc, #264]	; (8002548 <HAL_ADC_Start_DMA+0x114>)
 8002440:	4281      	cmp	r1, r0
 8002442:	d05d      	beq.n	8002500 <HAL_ADC_Start_DMA+0xcc>
 8002444:	4b41      	ldr	r3, [pc, #260]	; (800254c <HAL_ADC_Start_DMA+0x118>)
 8002446:	4299      	cmp	r1, r3
 8002448:	d05a      	beq.n	8002500 <HAL_ADC_Start_DMA+0xcc>
    __HAL_LOCK(hadc);
 800244a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800244e:	2b01      	cmp	r3, #1
 8002450:	d077      	beq.n	8002542 <HAL_ADC_Start_DMA+0x10e>
 8002452:	2301      	movs	r3, #1
 8002454:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8002458:	4620      	mov	r0, r4
 800245a:	f7ff ff9f 	bl	800239c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800245e:	4607      	mov	r7, r0
 8002460:	2800      	cmp	r0, #0
 8002462:	d16a      	bne.n	800253a <HAL_ADC_Start_DMA+0x106>
      ADC_STATE_CLR_SET(hadc->State,
 8002464:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002466:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00
 800246a:	f021 0101 	bic.w	r1, r1, #1
 800246e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002472:	62a1      	str	r1, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002474:	6822      	ldr	r2, [r4, #0]
 8002476:	4b35      	ldr	r3, [pc, #212]	; (800254c <HAL_ADC_Start_DMA+0x118>)
 8002478:	429a      	cmp	r2, r3
 800247a:	d048      	beq.n	800250e <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800247c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800247e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002482:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002484:	6853      	ldr	r3, [r2, #4]
 8002486:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800248a:	d005      	beq.n	8002498 <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800248c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800248e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002492:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002496:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002498:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800249a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800249e:	bf1a      	itte	ne
 80024a0:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
 80024a2:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 80024a6:	2300      	moveq	r3, #0
 80024a8:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 80024aa:	2300      	movs	r3, #0
 80024ac:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024b0:	6a23      	ldr	r3, [r4, #32]
 80024b2:	4a27      	ldr	r2, [pc, #156]	; (8002550 <HAL_ADC_Start_DMA+0x11c>)
 80024b4:	629a      	str	r2, [r3, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80024b6:	6a23      	ldr	r3, [r4, #32]
 80024b8:	4a26      	ldr	r2, [pc, #152]	; (8002554 <HAL_ADC_Start_DMA+0x120>)
 80024ba:	62da      	str	r2, [r3, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024bc:	6a23      	ldr	r3, [r4, #32]
 80024be:	4a26      	ldr	r2, [pc, #152]	; (8002558 <HAL_ADC_Start_DMA+0x124>)
 80024c0:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80024c2:	6823      	ldr	r3, [r4, #0]
 80024c4:	f06f 0202 	mvn.w	r2, #2
 80024c8:	601a      	str	r2, [r3, #0]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80024ca:	6822      	ldr	r2, [r4, #0]
 80024cc:	6893      	ldr	r3, [r2, #8]
 80024ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d2:	6093      	str	r3, [r2, #8]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024d4:	6821      	ldr	r1, [r4, #0]
 80024d6:	4633      	mov	r3, r6
 80024d8:	462a      	mov	r2, r5
 80024da:	314c      	adds	r1, #76	; 0x4c
 80024dc:	6a20      	ldr	r0, [r4, #32]
 80024de:	f000 f9af 	bl	8002840 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80024e2:	6823      	ldr	r3, [r4, #0]
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80024ea:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	bf0c      	ite	eq
 80024f2:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80024f6:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 80024fa:	609a      	str	r2, [r3, #8]
}
 80024fc:	4638      	mov	r0, r7
 80024fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002500:	4b11      	ldr	r3, [pc, #68]	; (8002548 <HAL_ADC_Start_DMA+0x114>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8002508:	d09f      	beq.n	800244a <HAL_ADC_Start_DMA+0x16>
    tmp_hal_status = HAL_ERROR;
 800250a:	2701      	movs	r7, #1
 800250c:	e7f6      	b.n	80024fc <HAL_ADC_Start_DMA+0xc8>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800250e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8002518:	d0b0      	beq.n	800247c <HAL_ADC_Start_DMA+0x48>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800251a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800251c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002520:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002522:	4b09      	ldr	r3, [pc, #36]	; (8002548 <HAL_ADC_Start_DMA+0x114>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800252a:	d0b5      	beq.n	8002498 <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800252c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800252e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002532:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002536:	62a3      	str	r3, [r4, #40]	; 0x28
 8002538:	e7ae      	b.n	8002498 <HAL_ADC_Start_DMA+0x64>
      __HAL_UNLOCK(hadc);
 800253a:	2300      	movs	r3, #0
 800253c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8002540:	e7dc      	b.n	80024fc <HAL_ADC_Start_DMA+0xc8>
    __HAL_LOCK(hadc);
 8002542:	2702      	movs	r7, #2
 8002544:	e7da      	b.n	80024fc <HAL_ADC_Start_DMA+0xc8>
 8002546:	bf00      	nop
 8002548:	40012400 	.word	0x40012400
 800254c:	40012800 	.word	0x40012800
 8002550:	080021d7 	.word	0x080021d7
 8002554:	0800222b 	.word	0x0800222b
 8002558:	08002237 	.word	0x08002237

0800255c <ADC_ConversionStop_Disable>:
{
 800255c:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800255e:	6803      	ldr	r3, [r0, #0]
 8002560:	689a      	ldr	r2, [r3, #8]
 8002562:	f012 0f01 	tst.w	r2, #1
 8002566:	d101      	bne.n	800256c <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8002568:	2000      	movs	r0, #0
}
 800256a:	bd38      	pop	{r3, r4, r5, pc}
 800256c:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	f022 0201 	bic.w	r2, r2, #1
 8002574:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002576:	f7ff fe27 	bl	80021c8 <HAL_GetTick>
 800257a:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800257c:	6823      	ldr	r3, [r4, #0]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f013 0f01 	tst.w	r3, #1
 8002584:	d106      	bne.n	8002594 <ADC_ConversionStop_Disable+0x38>
  return HAL_OK;
 8002586:	2000      	movs	r0, #0
 8002588:	e7ef      	b.n	800256a <ADC_ConversionStop_Disable+0xe>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800258a:	6823      	ldr	r3, [r4, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f013 0f01 	tst.w	r3, #1
 8002592:	d013      	beq.n	80025bc <ADC_ConversionStop_Disable+0x60>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002594:	f7ff fe18 	bl	80021c8 <HAL_GetTick>
 8002598:	1b43      	subs	r3, r0, r5
 800259a:	2b02      	cmp	r3, #2
 800259c:	d9f5      	bls.n	800258a <ADC_ConversionStop_Disable+0x2e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 800259e:	6823      	ldr	r3, [r4, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f013 0f01 	tst.w	r3, #1
 80025a6:	d0f0      	beq.n	800258a <ADC_ConversionStop_Disable+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80025aa:	f043 0310 	orr.w	r3, r3, #16
 80025ae:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80025b2:	f043 0301 	orr.w	r3, r3, #1
 80025b6:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 80025b8:	2001      	movs	r0, #1
 80025ba:	e7d6      	b.n	800256a <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 80025bc:	2000      	movs	r0, #0
 80025be:	e7d4      	b.n	800256a <ADC_ConversionStop_Disable+0xe>

080025c0 <HAL_ADC_Init>:
  if(hadc == NULL)
 80025c0:	2800      	cmp	r0, #0
 80025c2:	d07a      	beq.n	80026ba <HAL_ADC_Init+0xfa>
{
 80025c4:	b570      	push	{r4, r5, r6, lr}
 80025c6:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025c8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d04f      	beq.n	800266e <HAL_ADC_Init+0xae>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80025ce:	4620      	mov	r0, r4
 80025d0:	f7ff ffc4 	bl	800255c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80025d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80025d6:	f013 0310 	ands.w	r3, r3, #16
 80025da:	d168      	bne.n	80026ae <HAL_ADC_Init+0xee>
 80025dc:	2800      	cmp	r0, #0
 80025de:	d166      	bne.n	80026ae <HAL_ADC_Init+0xee>
    ADC_STATE_CLR_SET(hadc->State,
 80025e0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80025e2:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80025e6:	f022 0202 	bic.w	r2, r2, #2
 80025ea:	f042 0202 	orr.w	r2, r2, #2
 80025ee:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80025f0:	7b21      	ldrb	r1, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025f2:	6862      	ldr	r2, [r4, #4]
 80025f4:	69e5      	ldr	r5, [r4, #28]
 80025f6:	432a      	orrs	r2, r5
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80025f8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80025fc:	68a5      	ldr	r5, [r4, #8]
 80025fe:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8002602:	d004      	beq.n	800260e <HAL_ADC_Init+0x4e>
 8002604:	2d01      	cmp	r5, #1
 8002606:	bf14      	ite	ne
 8002608:	461d      	movne	r5, r3
 800260a:	f44f 7580 	moveq.w	r5, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800260e:	7d26      	ldrb	r6, [r4, #20]
 8002610:	2e01      	cmp	r6, #1
 8002612:	d032      	beq.n	800267a <HAL_ADC_Init+0xba>
      MODIFY_REG(hadc->Instance->CR1,
 8002614:	6826      	ldr	r6, [r4, #0]
 8002616:	6871      	ldr	r1, [r6, #4]
 8002618:	f421 4169 	bic.w	r1, r1, #59648	; 0xe900
 800261c:	4329      	orrs	r1, r5
 800261e:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002620:	6825      	ldr	r5, [r4, #0]
 8002622:	68ae      	ldr	r6, [r5, #8]
 8002624:	4926      	ldr	r1, [pc, #152]	; (80026c0 <HAL_ADC_Init+0x100>)
 8002626:	4031      	ands	r1, r6
 8002628:	4311      	orrs	r1, r2
 800262a:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800262c:	68a1      	ldr	r1, [r4, #8]
 800262e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002632:	d001      	beq.n	8002638 <HAL_ADC_Init+0x78>
 8002634:	2901      	cmp	r1, #1
 8002636:	d102      	bne.n	800263e <HAL_ADC_Init+0x7e>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002638:	6923      	ldr	r3, [r4, #16]
 800263a:	3b01      	subs	r3, #1
 800263c:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 800263e:	6825      	ldr	r5, [r4, #0]
 8002640:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8002642:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 8002646:	430b      	orrs	r3, r1
 8002648:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800264a:	6823      	ldr	r3, [r4, #0]
 800264c:	6899      	ldr	r1, [r3, #8]
 800264e:	4b1d      	ldr	r3, [pc, #116]	; (80026c4 <HAL_ADC_Init+0x104>)
 8002650:	400b      	ands	r3, r1
 8002652:	429a      	cmp	r2, r3
 8002654:	d022      	beq.n	800269c <HAL_ADC_Init+0xdc>
      ADC_STATE_CLR_SET(hadc->State,
 8002656:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002658:	f023 0312 	bic.w	r3, r3, #18
 800265c:	f043 0310 	orr.w	r3, r3, #16
 8002660:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002662:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 800266a:	2001      	movs	r0, #1
 800266c:	e024      	b.n	80026b8 <HAL_ADC_Init+0xf8>
    ADC_CLEAR_ERRORCODE(hadc);
 800266e:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8002670:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8002674:	f7ff fbe4 	bl	8001e40 <HAL_ADC_MspInit>
 8002678:	e7a9      	b.n	80025ce <HAL_ADC_Init+0xe>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800267a:	b931      	cbnz	r1, 800268a <HAL_ADC_Init+0xca>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800267c:	69a1      	ldr	r1, [r4, #24]
 800267e:	3901      	subs	r1, #1
 8002680:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 8002684:	f441 6500 	orr.w	r5, r1, #2048	; 0x800
 8002688:	e7c4      	b.n	8002614 <HAL_ADC_Init+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800268a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800268c:	f041 0120 	orr.w	r1, r1, #32
 8002690:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002692:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002694:	f041 0101 	orr.w	r1, r1, #1
 8002698:	62e1      	str	r1, [r4, #44]	; 0x2c
 800269a:	e7bb      	b.n	8002614 <HAL_ADC_Init+0x54>
      ADC_CLEAR_ERRORCODE(hadc);
 800269c:	2300      	movs	r3, #0
 800269e:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80026a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80026a2:	f023 0303 	bic.w	r3, r3, #3
 80026a6:	f043 0301 	orr.w	r3, r3, #1
 80026aa:	62a3      	str	r3, [r4, #40]	; 0x28
 80026ac:	e004      	b.n	80026b8 <HAL_ADC_Init+0xf8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80026b0:	f043 0310 	orr.w	r3, r3, #16
 80026b4:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 80026b6:	2001      	movs	r0, #1
}
 80026b8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80026ba:	2001      	movs	r0, #1
}
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	ffe1f7fd 	.word	0xffe1f7fd
 80026c4:	ff1f0efe 	.word	0xff1f0efe

080026c8 <HAL_ADC_Stop_DMA>:
  __HAL_LOCK(hadc);
 80026c8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d028      	beq.n	8002722 <HAL_ADC_Stop_DMA+0x5a>
{
 80026d0:	b510      	push	{r4, lr}
 80026d2:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80026d4:	2301      	movs	r3, #1
 80026d6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80026da:	f7ff ff3f 	bl	800255c <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 80026de:	b950      	cbnz	r0, 80026f6 <HAL_ADC_Stop_DMA+0x2e>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80026e0:	6822      	ldr	r2, [r4, #0]
 80026e2:	6893      	ldr	r3, [r2, #8]
 80026e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026e8:	6093      	str	r3, [r2, #8]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80026ea:	6a22      	ldr	r2, [r4, #32]
 80026ec:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d003      	beq.n	80026fe <HAL_ADC_Stop_DMA+0x36>
  __HAL_UNLOCK(hadc);
 80026f6:	2300      	movs	r3, #0
 80026f8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80026fc:	bd10      	pop	{r4, pc}
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80026fe:	4610      	mov	r0, r2
 8002700:	f000 f8ed 	bl	80028de <HAL_DMA_Abort>
      if (tmp_hal_status == HAL_OK)
 8002704:	b940      	cbnz	r0, 8002718 <HAL_ADC_Stop_DMA+0x50>
        ADC_STATE_CLR_SET(hadc->State,
 8002706:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002708:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800270c:	f023 0301 	bic.w	r3, r3, #1
 8002710:	f043 0301 	orr.w	r3, r3, #1
 8002714:	62a3      	str	r3, [r4, #40]	; 0x28
 8002716:	e7ee      	b.n	80026f6 <HAL_ADC_Stop_DMA+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002718:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800271a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800271e:	62a3      	str	r3, [r4, #40]	; 0x28
 8002720:	e7e9      	b.n	80026f6 <HAL_ADC_Stop_DMA+0x2e>
  __HAL_LOCK(hadc);
 8002722:	2002      	movs	r0, #2
}
 8002724:	4770      	bx	lr
	...

08002728 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002728:	4907      	ldr	r1, [pc, #28]	; (8002748 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800272a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800272c:	0203      	lsls	r3, r0, #8
 800272e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002732:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002736:	0412      	lsls	r2, r2, #16
 8002738:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800273a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800273c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002744:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002746:	4770      	bx	lr
 8002748:	e000ed00 	.word	0xe000ed00

0800274c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800274c:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800274e:	4b18      	ldr	r3, [pc, #96]	; (80027b0 <HAL_NVIC_SetPriority+0x64>)
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002756:	f1c3 0c07 	rsb	ip, r3, #7
 800275a:	f1bc 0f04 	cmp.w	ip, #4
 800275e:	bf28      	it	cs
 8002760:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002764:	f103 0e04 	add.w	lr, r3, #4
 8002768:	f1be 0f06 	cmp.w	lr, #6
 800276c:	bf8c      	ite	hi
 800276e:	3b03      	subhi	r3, #3
 8002770:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002772:	f04f 3eff 	mov.w	lr, #4294967295
 8002776:	fa0e fc0c 	lsl.w	ip, lr, ip
 800277a:	ea21 010c 	bic.w	r1, r1, ip
 800277e:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002780:	fa0e f303 	lsl.w	r3, lr, r3
 8002784:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002788:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 800278a:	2800      	cmp	r0, #0
 800278c:	db09      	blt.n	80027a2 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800278e:	0109      	lsls	r1, r1, #4
 8002790:	b2c9      	uxtb	r1, r1
 8002792:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002796:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800279a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800279e:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a2:	f000 000f 	and.w	r0, r0, #15
 80027a6:	0109      	lsls	r1, r1, #4
 80027a8:	b2c9      	uxtb	r1, r1
 80027aa:	4b02      	ldr	r3, [pc, #8]	; (80027b4 <HAL_NVIC_SetPriority+0x68>)
 80027ac:	5419      	strb	r1, [r3, r0]
 80027ae:	e7f6      	b.n	800279e <HAL_NVIC_SetPriority+0x52>
 80027b0:	e000ed00 	.word	0xe000ed00
 80027b4:	e000ed14 	.word	0xe000ed14

080027b8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80027b8:	2800      	cmp	r0, #0
 80027ba:	db08      	blt.n	80027ce <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027bc:	0942      	lsrs	r2, r0, #5
 80027be:	f000 001f 	and.w	r0, r0, #31
 80027c2:	2301      	movs	r3, #1
 80027c4:	fa03 f000 	lsl.w	r0, r3, r0
 80027c8:	4b01      	ldr	r3, [pc, #4]	; (80027d0 <HAL_NVIC_EnableIRQ+0x18>)
 80027ca:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80027ce:	4770      	bx	lr
 80027d0:	e000e100 	.word	0xe000e100

080027d4 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80027d4:	b360      	cbz	r0, 8002830 <HAL_DMA_Init+0x5c>
{
 80027d6:	b410      	push	{r4}
 80027d8:	4602      	mov	r2, r0
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80027da:	6801      	ldr	r1, [r0, #0]
 80027dc:	4b15      	ldr	r3, [pc, #84]	; (8002834 <HAL_DMA_Init+0x60>)
 80027de:	440b      	add	r3, r1
 80027e0:	4815      	ldr	r0, [pc, #84]	; (8002838 <HAL_DMA_Init+0x64>)
 80027e2:	fba0 0303 	umull	r0, r3, r0, r3
 80027e6:	091b      	lsrs	r3, r3, #4
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	6413      	str	r3, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80027ec:	4b13      	ldr	r3, [pc, #76]	; (800283c <HAL_DMA_Init+0x68>)
 80027ee:	63d3      	str	r3, [r2, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027f0:	2302      	movs	r3, #2
 80027f2:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80027f6:	6808      	ldr	r0, [r1, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80027f8:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
 80027fc:	f020 0030 	bic.w	r0, r0, #48	; 0x30
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002800:	6853      	ldr	r3, [r2, #4]
 8002802:	6894      	ldr	r4, [r2, #8]
 8002804:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002806:	68d4      	ldr	r4, [r2, #12]
 8002808:	4323      	orrs	r3, r4
 800280a:	6914      	ldr	r4, [r2, #16]
 800280c:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800280e:	6954      	ldr	r4, [r2, #20]
 8002810:	4323      	orrs	r3, r4
 8002812:	6994      	ldr	r4, [r2, #24]
 8002814:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8002816:	69d4      	ldr	r4, [r2, #28]
 8002818:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 800281a:	4303      	orrs	r3, r0

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800281c:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800281e:	2000      	movs	r0, #0
 8002820:	6390      	str	r0, [r2, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002822:	2301      	movs	r3, #1
 8002824:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002828:	f882 0020 	strb.w	r0, [r2, #32]

  return HAL_OK;
}
 800282c:	bc10      	pop	{r4}
 800282e:	4770      	bx	lr
    return HAL_ERROR;
 8002830:	2001      	movs	r0, #1
}
 8002832:	4770      	bx	lr
 8002834:	bffdfff8 	.word	0xbffdfff8
 8002838:	cccccccd 	.word	0xcccccccd
 800283c:	40020000 	.word	0x40020000

08002840 <HAL_DMA_Start_IT>:

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002840:	f890 c020 	ldrb.w	ip, [r0, #32]
 8002844:	f1bc 0f01 	cmp.w	ip, #1
 8002848:	d047      	beq.n	80028da <HAL_DMA_Start_IT+0x9a>
 800284a:	f04f 0c01 	mov.w	ip, #1
 800284e:	f880 c020 	strb.w	ip, [r0, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002852:	f890 c021 	ldrb.w	ip, [r0, #33]	; 0x21
 8002856:	fa5f fc8c 	uxtb.w	ip, ip
 800285a:	f1bc 0f01 	cmp.w	ip, #1
 800285e:	d004      	beq.n	800286a <HAL_DMA_Start_IT+0x2a>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002860:	2300      	movs	r3, #0
 8002862:	f880 3020 	strb.w	r3, [r0, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002866:	2002      	movs	r0, #2
 8002868:	4770      	bx	lr
{
 800286a:	b470      	push	{r4, r5, r6}
    hdma->State = HAL_DMA_STATE_BUSY;
 800286c:	2402      	movs	r4, #2
 800286e:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002872:	2400      	movs	r4, #0
 8002874:	6384      	str	r4, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8002876:	6805      	ldr	r5, [r0, #0]
 8002878:	682c      	ldr	r4, [r5, #0]
 800287a:	f024 0401 	bic.w	r4, r4, #1
 800287e:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002880:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8002882:	2401      	movs	r4, #1
 8002884:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8002886:	40b4      	lsls	r4, r6
 8002888:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800288a:	6804      	ldr	r4, [r0, #0]
 800288c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800288e:	6843      	ldr	r3, [r0, #4]
 8002890:	2b10      	cmp	r3, #16
 8002892:	d012      	beq.n	80028ba <HAL_DMA_Start_IT+0x7a>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002894:	6803      	ldr	r3, [r0, #0]
 8002896:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002898:	6803      	ldr	r3, [r0, #0]
 800289a:	60da      	str	r2, [r3, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 800289c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800289e:	b18b      	cbz	r3, 80028c4 <HAL_DMA_Start_IT+0x84>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028a0:	6802      	ldr	r2, [r0, #0]
 80028a2:	6813      	ldr	r3, [r2, #0]
 80028a4:	f043 030e 	orr.w	r3, r3, #14
 80028a8:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80028aa:	6802      	ldr	r2, [r0, #0]
 80028ac:	6813      	ldr	r3, [r2, #0]
 80028ae:	f043 0301 	orr.w	r3, r3, #1
 80028b2:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028b4:	2000      	movs	r0, #0
}
 80028b6:	bc70      	pop	{r4, r5, r6}
 80028b8:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80028ba:	6803      	ldr	r3, [r0, #0]
 80028bc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80028be:	6803      	ldr	r3, [r0, #0]
 80028c0:	60d9      	str	r1, [r3, #12]
 80028c2:	e7eb      	b.n	800289c <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028c4:	6802      	ldr	r2, [r0, #0]
 80028c6:	6813      	ldr	r3, [r2, #0]
 80028c8:	f023 0304 	bic.w	r3, r3, #4
 80028cc:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80028ce:	6802      	ldr	r2, [r0, #0]
 80028d0:	6813      	ldr	r3, [r2, #0]
 80028d2:	f043 030a 	orr.w	r3, r3, #10
 80028d6:	6013      	str	r3, [r2, #0]
 80028d8:	e7e7      	b.n	80028aa <HAL_DMA_Start_IT+0x6a>
  __HAL_LOCK(hdma);
 80028da:	2002      	movs	r0, #2
}
 80028dc:	4770      	bx	lr

080028de <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028de:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d006      	beq.n	80028f6 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028e8:	2304      	movs	r3, #4
 80028ea:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80028ec:	2300      	movs	r3, #0
 80028ee:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 80028f2:	2001      	movs	r0, #1
 80028f4:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028f6:	6802      	ldr	r2, [r0, #0]
 80028f8:	6813      	ldr	r3, [r2, #0]
 80028fa:	f023 030e 	bic.w	r3, r3, #14
 80028fe:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002900:	6802      	ldr	r2, [r0, #0]
 8002902:	6813      	ldr	r3, [r2, #0]
 8002904:	f023 0301 	bic.w	r3, r3, #1
 8002908:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800290a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800290c:	2201      	movs	r2, #1
 800290e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	604b      	str	r3, [r1, #4]
  hdma->State = HAL_DMA_STATE_READY;
 8002916:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  __HAL_UNLOCK(hdma);      
 800291a:	2300      	movs	r3, #0
 800291c:	f880 3020 	strb.w	r3, [r0, #32]
  return status; 
 8002920:	4618      	mov	r0, r3
}
 8002922:	4770      	bx	lr

08002924 <HAL_DMA_Abort_IT>:
{  
 8002924:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002926:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d003      	beq.n	8002938 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002930:	2304      	movs	r3, #4
 8002932:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8002934:	2001      	movs	r0, #1
}
 8002936:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002938:	6802      	ldr	r2, [r0, #0]
 800293a:	6813      	ldr	r3, [r2, #0]
 800293c:	f023 030e 	bic.w	r3, r3, #14
 8002940:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002942:	6802      	ldr	r2, [r0, #0]
 8002944:	6813      	ldr	r3, [r2, #0]
 8002946:	f023 0301 	bic.w	r3, r3, #1
 800294a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800294c:	6803      	ldr	r3, [r0, #0]
 800294e:	4a19      	ldr	r2, [pc, #100]	; (80029b4 <HAL_DMA_Abort_IT+0x90>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d013      	beq.n	800297c <HAL_DMA_Abort_IT+0x58>
 8002954:	3214      	adds	r2, #20
 8002956:	4293      	cmp	r3, r2
 8002958:	d01e      	beq.n	8002998 <HAL_DMA_Abort_IT+0x74>
 800295a:	3214      	adds	r2, #20
 800295c:	4293      	cmp	r3, r2
 800295e:	d01d      	beq.n	800299c <HAL_DMA_Abort_IT+0x78>
 8002960:	3214      	adds	r2, #20
 8002962:	4293      	cmp	r3, r2
 8002964:	d01d      	beq.n	80029a2 <HAL_DMA_Abort_IT+0x7e>
 8002966:	3214      	adds	r2, #20
 8002968:	4293      	cmp	r3, r2
 800296a:	d01d      	beq.n	80029a8 <HAL_DMA_Abort_IT+0x84>
 800296c:	3214      	adds	r2, #20
 800296e:	4293      	cmp	r3, r2
 8002970:	bf0c      	ite	eq
 8002972:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8002976:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 800297a:	e000      	b.n	800297e <HAL_DMA_Abort_IT+0x5a>
 800297c:	2301      	movs	r3, #1
 800297e:	4a0e      	ldr	r2, [pc, #56]	; (80029b8 <HAL_DMA_Abort_IT+0x94>)
 8002980:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002982:	2301      	movs	r3, #1
 8002984:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002988:	2300      	movs	r3, #0
 800298a:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800298e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002990:	b16b      	cbz	r3, 80029ae <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 8002992:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002994:	2000      	movs	r0, #0
 8002996:	e7ce      	b.n	8002936 <HAL_DMA_Abort_IT+0x12>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002998:	2310      	movs	r3, #16
 800299a:	e7f0      	b.n	800297e <HAL_DMA_Abort_IT+0x5a>
 800299c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029a0:	e7ed      	b.n	800297e <HAL_DMA_Abort_IT+0x5a>
 80029a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029a6:	e7ea      	b.n	800297e <HAL_DMA_Abort_IT+0x5a>
 80029a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029ac:	e7e7      	b.n	800297e <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 80029ae:	2000      	movs	r0, #0
 80029b0:	e7c1      	b.n	8002936 <HAL_DMA_Abort_IT+0x12>
 80029b2:	bf00      	nop
 80029b4:	40020008 	.word	0x40020008
 80029b8:	40020000 	.word	0x40020000

080029bc <HAL_DMA_IRQHandler>:
{
 80029bc:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029be:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80029c0:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80029c2:	6804      	ldr	r4, [r0, #0]
 80029c4:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80029c6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80029c8:	2304      	movs	r3, #4
 80029ca:	408b      	lsls	r3, r1
 80029cc:	4213      	tst	r3, r2
 80029ce:	d034      	beq.n	8002a3a <HAL_DMA_IRQHandler+0x7e>
 80029d0:	f015 0f04 	tst.w	r5, #4
 80029d4:	d031      	beq.n	8002a3a <HAL_DMA_IRQHandler+0x7e>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029d6:	6823      	ldr	r3, [r4, #0]
 80029d8:	f013 0f20 	tst.w	r3, #32
 80029dc:	d103      	bne.n	80029e6 <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029de:	6823      	ldr	r3, [r4, #0]
 80029e0:	f023 0304 	bic.w	r3, r3, #4
 80029e4:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80029e6:	6803      	ldr	r3, [r0, #0]
 80029e8:	4a42      	ldr	r2, [pc, #264]	; (8002af4 <HAL_DMA_IRQHandler+0x138>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d013      	beq.n	8002a16 <HAL_DMA_IRQHandler+0x5a>
 80029ee:	3214      	adds	r2, #20
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d017      	beq.n	8002a24 <HAL_DMA_IRQHandler+0x68>
 80029f4:	3214      	adds	r2, #20
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d016      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x6c>
 80029fa:	3214      	adds	r2, #20
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d016      	beq.n	8002a2e <HAL_DMA_IRQHandler+0x72>
 8002a00:	3214      	adds	r2, #20
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d016      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x78>
 8002a06:	3214      	adds	r2, #20
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	bf0c      	ite	eq
 8002a0c:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8002a10:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8002a14:	e000      	b.n	8002a18 <HAL_DMA_IRQHandler+0x5c>
 8002a16:	2304      	movs	r3, #4
 8002a18:	4a37      	ldr	r2, [pc, #220]	; (8002af8 <HAL_DMA_IRQHandler+0x13c>)
 8002a1a:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8002a1c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002a1e:	b103      	cbz	r3, 8002a22 <HAL_DMA_IRQHandler+0x66>
      hdma->XferHalfCpltCallback(hdma);
 8002a20:	4798      	blx	r3
}
 8002a22:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002a24:	2340      	movs	r3, #64	; 0x40
 8002a26:	e7f7      	b.n	8002a18 <HAL_DMA_IRQHandler+0x5c>
 8002a28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a2c:	e7f4      	b.n	8002a18 <HAL_DMA_IRQHandler+0x5c>
 8002a2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a32:	e7f1      	b.n	8002a18 <HAL_DMA_IRQHandler+0x5c>
 8002a34:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002a38:	e7ee      	b.n	8002a18 <HAL_DMA_IRQHandler+0x5c>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	408b      	lsls	r3, r1
 8002a3e:	4213      	tst	r3, r2
 8002a40:	d03b      	beq.n	8002aba <HAL_DMA_IRQHandler+0xfe>
 8002a42:	f015 0f02 	tst.w	r5, #2
 8002a46:	d038      	beq.n	8002aba <HAL_DMA_IRQHandler+0xfe>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a48:	6823      	ldr	r3, [r4, #0]
 8002a4a:	f013 0f20 	tst.w	r3, #32
 8002a4e:	d106      	bne.n	8002a5e <HAL_DMA_IRQHandler+0xa2>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002a50:	6823      	ldr	r3, [r4, #0]
 8002a52:	f023 030a 	bic.w	r3, r3, #10
 8002a56:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a5e:	6803      	ldr	r3, [r0, #0]
 8002a60:	4a24      	ldr	r2, [pc, #144]	; (8002af4 <HAL_DMA_IRQHandler+0x138>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d013      	beq.n	8002a8e <HAL_DMA_IRQHandler+0xd2>
 8002a66:	3214      	adds	r2, #20
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d01b      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0xe8>
 8002a6c:	3214      	adds	r2, #20
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d01a      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0xec>
 8002a72:	3214      	adds	r2, #20
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d01a      	beq.n	8002aae <HAL_DMA_IRQHandler+0xf2>
 8002a78:	3214      	adds	r2, #20
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d01a      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0xf8>
 8002a7e:	3214      	adds	r2, #20
 8002a80:	4293      	cmp	r3, r2
 8002a82:	bf0c      	ite	eq
 8002a84:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8002a88:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8002a8c:	e000      	b.n	8002a90 <HAL_DMA_IRQHandler+0xd4>
 8002a8e:	2302      	movs	r3, #2
 8002a90:	4a19      	ldr	r2, [pc, #100]	; (8002af8 <HAL_DMA_IRQHandler+0x13c>)
 8002a92:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8002a94:	2300      	movs	r3, #0
 8002a96:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8002a9a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0c0      	beq.n	8002a22 <HAL_DMA_IRQHandler+0x66>
      hdma->XferCpltCallback(hdma);
 8002aa0:	4798      	blx	r3
 8002aa2:	e7be      	b.n	8002a22 <HAL_DMA_IRQHandler+0x66>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002aa4:	2320      	movs	r3, #32
 8002aa6:	e7f3      	b.n	8002a90 <HAL_DMA_IRQHandler+0xd4>
 8002aa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002aac:	e7f0      	b.n	8002a90 <HAL_DMA_IRQHandler+0xd4>
 8002aae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ab2:	e7ed      	b.n	8002a90 <HAL_DMA_IRQHandler+0xd4>
 8002ab4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ab8:	e7ea      	b.n	8002a90 <HAL_DMA_IRQHandler+0xd4>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002aba:	2308      	movs	r3, #8
 8002abc:	fa03 f101 	lsl.w	r1, r3, r1
 8002ac0:	4211      	tst	r1, r2
 8002ac2:	d0ae      	beq.n	8002a22 <HAL_DMA_IRQHandler+0x66>
 8002ac4:	f015 0f08 	tst.w	r5, #8
 8002ac8:	d0ab      	beq.n	8002a22 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002aca:	6823      	ldr	r3, [r4, #0]
 8002acc:	f023 030e 	bic.w	r3, r3, #14
 8002ad0:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ad2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002ad8:	fa03 f202 	lsl.w	r2, r3, r2
 8002adc:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ade:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8002ae0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8002aea:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d098      	beq.n	8002a22 <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 8002af0:	4798      	blx	r3
  return;
 8002af2:	e796      	b.n	8002a22 <HAL_DMA_IRQHandler+0x66>
 8002af4:	40020008 	.word	0x40020008
 8002af8:	40020000 	.word	0x40020000

08002afc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b00:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b02:	f8d1 9000 	ldr.w	r9, [r1]
 8002b06:	f1b9 0f00 	cmp.w	r9, #0
 8002b0a:	f000 811f 	beq.w	8002d4c <HAL_GPIO_Init+0x250>
 8002b0e:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8002b10:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b12:	4e90      	ldr	r6, [pc, #576]	; (8002d54 <HAL_GPIO_Init+0x258>)
        {
          SET_BIT(EXTI->IMR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b14:	4c90      	ldr	r4, [pc, #576]	; (8002d58 <HAL_GPIO_Init+0x25c>)
      switch (GPIO_Init->Mode)
 8002b16:	4d91      	ldr	r5, [pc, #580]	; (8002d5c <HAL_GPIO_Init+0x260>)
 8002b18:	f8df e244 	ldr.w	lr, [pc, #580]	; 8002d60 <HAL_GPIO_Init+0x264>
 8002b1c:	4694      	mov	ip, r2
 8002b1e:	e0ba      	b.n	8002c96 <HAL_GPIO_Init+0x19a>
 8002b20:	f04f 0c00 	mov.w	ip, #0
 8002b24:	e025      	b.n	8002b72 <HAL_GPIO_Init+0x76>
 8002b26:	45a9      	cmp	r9, r5
 8002b28:	d00f      	beq.n	8002b4a <HAL_GPIO_Init+0x4e>
 8002b2a:	d906      	bls.n	8002b3a <HAL_GPIO_Init+0x3e>
 8002b2c:	45f1      	cmp	r9, lr
 8002b2e:	d00c      	beq.n	8002b4a <HAL_GPIO_Init+0x4e>
 8002b30:	f8df a230 	ldr.w	sl, [pc, #560]	; 8002d64 <HAL_GPIO_Init+0x268>
 8002b34:	45d1      	cmp	r9, sl
 8002b36:	d008      	beq.n	8002b4a <HAL_GPIO_Init+0x4e>
 8002b38:	e01b      	b.n	8002b72 <HAL_GPIO_Init+0x76>
 8002b3a:	f8df a22c 	ldr.w	sl, [pc, #556]	; 8002d68 <HAL_GPIO_Init+0x26c>
 8002b3e:	45d1      	cmp	r9, sl
 8002b40:	d003      	beq.n	8002b4a <HAL_GPIO_Init+0x4e>
 8002b42:	f50a 2a70 	add.w	sl, sl, #983040	; 0xf0000
 8002b46:	45d1      	cmp	r9, sl
 8002b48:	d10f      	bne.n	8002b6a <HAL_GPIO_Init+0x6e>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b4a:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8002b4e:	f1bc 0f00 	cmp.w	ip, #0
 8002b52:	f000 80ef 	beq.w	8002d34 <HAL_GPIO_Init+0x238>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b56:	f1bc 0f01 	cmp.w	ip, #1
            GPIOx->BSRR = ioposition;
 8002b5a:	bf0c      	ite	eq
 8002b5c:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8002b60:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b64:	f04f 0c08 	mov.w	ip, #8
 8002b68:	e003      	b.n	8002b72 <HAL_GPIO_Init+0x76>
      switch (GPIO_Init->Mode)
 8002b6a:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
 8002b6e:	45d1      	cmp	r9, sl
 8002b70:	d0eb      	beq.n	8002b4a <HAL_GPIO_Init+0x4e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b72:	2fff      	cmp	r7, #255	; 0xff
 8002b74:	bf99      	ittee	ls
 8002b76:	4681      	movls	r9, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b78:	4692      	movls	sl, r2
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b7a:	f100 0904 	addhi.w	r9, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b7e:	f1a2 0a20 	subhi.w	sl, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b82:	f8d9 8000 	ldr.w	r8, [r9]
 8002b86:	f04f 0b0f 	mov.w	fp, #15
 8002b8a:	fa0b fb0a 	lsl.w	fp, fp, sl
 8002b8e:	ea28 080b 	bic.w	r8, r8, fp
 8002b92:	fa0c fa0a 	lsl.w	sl, ip, sl
 8002b96:	ea48 080a 	orr.w	r8, r8, sl
 8002b9a:	f8c9 8000 	str.w	r8, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b9e:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002ba2:	f018 5f80 	tst.w	r8, #268435456	; 0x10000000
 8002ba6:	d06f      	beq.n	8002c88 <HAL_GPIO_Init+0x18c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ba8:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8002bac:	f048 0801 	orr.w	r8, r8, #1
 8002bb0:	f8c6 8018 	str.w	r8, [r6, #24]
 8002bb4:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8002bb8:	f008 0801 	and.w	r8, r8, #1
 8002bbc:	f8cd 8004 	str.w	r8, [sp, #4]
 8002bc0:	f8dd 8004 	ldr.w	r8, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8002bc4:	f023 0803 	bic.w	r8, r3, #3
 8002bc8:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8002bcc:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8002bd0:	f8d8 a008 	ldr.w	sl, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002bd4:	f003 0903 	and.w	r9, r3, #3
 8002bd8:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 8002bdc:	f04f 090f 	mov.w	r9, #15
 8002be0:	fa09 f90b 	lsl.w	r9, r9, fp
 8002be4:	ea2a 0a09 	bic.w	sl, sl, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002be8:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8002d6c <HAL_GPIO_Init+0x270>
 8002bec:	4548      	cmp	r0, r9
 8002bee:	f000 80a4 	beq.w	8002d3a <HAL_GPIO_Init+0x23e>
 8002bf2:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8002bf6:	4548      	cmp	r0, r9
 8002bf8:	f000 80a2 	beq.w	8002d40 <HAL_GPIO_Init+0x244>
 8002bfc:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8002c00:	4548      	cmp	r0, r9
 8002c02:	f000 80a0 	beq.w	8002d46 <HAL_GPIO_Init+0x24a>
 8002c06:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8002c0a:	4548      	cmp	r0, r9
 8002c0c:	bf0c      	ite	eq
 8002c0e:	f04f 0903 	moveq.w	r9, #3
 8002c12:	f04f 0904 	movne.w	r9, #4
 8002c16:	fa09 f90b 	lsl.w	r9, r9, fp
 8002c1a:	ea49 090a 	orr.w	r9, r9, sl
        AFIO->EXTICR[position >> 2u] = temp;
 8002c1e:	f8c8 9008 	str.w	r9, [r8, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c22:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002c26:	f418 1f80 	tst.w	r8, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c2a:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8002c2e:	bf14      	ite	ne
 8002c30:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c34:	ea28 0807 	biceq.w	r8, r8, r7
 8002c38:	f8c4 8008 	str.w	r8, [r4, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c3c:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002c40:	f418 1f00 	tst.w	r8, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c44:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8002c48:	bf14      	ite	ne
 8002c4a:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c4e:	ea28 0807 	biceq.w	r8, r8, r7
 8002c52:	f8c4 800c 	str.w	r8, [r4, #12]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c56:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002c5a:	f418 3f00 	tst.w	r8, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002c5e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8002c62:	bf14      	ite	ne
 8002c64:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c68:	ea28 0807 	biceq.w	r8, r8, r7
 8002c6c:	f8c4 8004 	str.w	r8, [r4, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c70:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002c74:	f418 3f80 	tst.w	r8, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002c78:	f8d4 8000 	ldr.w	r8, [r4]
 8002c7c:	bf14      	ite	ne
 8002c7e:	ea48 0707 	orrne.w	r7, r8, r7
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c82:	ea28 0707 	biceq.w	r7, r8, r7
 8002c86:	6027      	str	r7, [r4, #0]
        }
      }
    }

	position++;
 8002c88:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c8a:	f8d1 9000 	ldr.w	r9, [r1]
 8002c8e:	3204      	adds	r2, #4
 8002c90:	fa39 f703 	lsrs.w	r7, r9, r3
 8002c94:	d05a      	beq.n	8002d4c <HAL_GPIO_Init+0x250>
    ioposition = (0x01uL << position);
 8002c96:	f04f 0801 	mov.w	r8, #1
 8002c9a:	fa08 f803 	lsl.w	r8, r8, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c9e:	ea08 0709 	and.w	r7, r8, r9
    if (iocurrent == ioposition)
 8002ca2:	ea38 0909 	bics.w	r9, r8, r9
 8002ca6:	d1ef      	bne.n	8002c88 <HAL_GPIO_Init+0x18c>
      switch (GPIO_Init->Mode)
 8002ca8:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8002cac:	f1b9 0f12 	cmp.w	r9, #18
 8002cb0:	f63f af39 	bhi.w	8002b26 <HAL_GPIO_Init+0x2a>
 8002cb4:	f1b9 0f12 	cmp.w	r9, #18
 8002cb8:	f63f af5b 	bhi.w	8002b72 <HAL_GPIO_Init+0x76>
 8002cbc:	f20f 0a04 	addw	sl, pc, #4
 8002cc0:	f85a f029 	ldr.w	pc, [sl, r9, lsl #2]
 8002cc4:	08002b4b 	.word	0x08002b4b
 8002cc8:	08002d11 	.word	0x08002d11
 8002ccc:	08002d21 	.word	0x08002d21
 8002cd0:	08002b21 	.word	0x08002b21
 8002cd4:	08002b73 	.word	0x08002b73
 8002cd8:	08002b73 	.word	0x08002b73
 8002cdc:	08002b73 	.word	0x08002b73
 8002ce0:	08002b73 	.word	0x08002b73
 8002ce4:	08002b73 	.word	0x08002b73
 8002ce8:	08002b73 	.word	0x08002b73
 8002cec:	08002b73 	.word	0x08002b73
 8002cf0:	08002b73 	.word	0x08002b73
 8002cf4:	08002b73 	.word	0x08002b73
 8002cf8:	08002b73 	.word	0x08002b73
 8002cfc:	08002b73 	.word	0x08002b73
 8002d00:	08002b73 	.word	0x08002b73
 8002d04:	08002b73 	.word	0x08002b73
 8002d08:	08002d17 	.word	0x08002d17
 8002d0c:	08002d2b 	.word	0x08002d2b
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d10:	f8d1 c00c 	ldr.w	ip, [r1, #12]
          break;
 8002d14:	e72d      	b.n	8002b72 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d16:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8002d1a:	f10c 0c04 	add.w	ip, ip, #4
          break;
 8002d1e:	e728      	b.n	8002b72 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d20:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8002d24:	f10c 0c08 	add.w	ip, ip, #8
          break;
 8002d28:	e723      	b.n	8002b72 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d2a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8002d2e:	f10c 0c0c 	add.w	ip, ip, #12
          break;
 8002d32:	e71e      	b.n	8002b72 <HAL_GPIO_Init+0x76>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d34:	f04f 0c04 	mov.w	ip, #4
 8002d38:	e71b      	b.n	8002b72 <HAL_GPIO_Init+0x76>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d3a:	f04f 0900 	mov.w	r9, #0
 8002d3e:	e76a      	b.n	8002c16 <HAL_GPIO_Init+0x11a>
 8002d40:	f04f 0901 	mov.w	r9, #1
 8002d44:	e767      	b.n	8002c16 <HAL_GPIO_Init+0x11a>
 8002d46:	f04f 0902 	mov.w	r9, #2
 8002d4a:	e764      	b.n	8002c16 <HAL_GPIO_Init+0x11a>
  }
}
 8002d4c:	b003      	add	sp, #12
 8002d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d52:	bf00      	nop
 8002d54:	40021000 	.word	0x40021000
 8002d58:	40010400 	.word	0x40010400
 8002d5c:	10220000 	.word	0x10220000
 8002d60:	10310000 	.word	0x10310000
 8002d64:	10320000 	.word	0x10320000
 8002d68:	10120000 	.word	0x10120000
 8002d6c:	40010800 	.word	0x40010800

08002d70 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d70:	6883      	ldr	r3, [r0, #8]
 8002d72:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002d74:	bf14      	ite	ne
 8002d76:	2001      	movne	r0, #1
 8002d78:	2000      	moveq	r0, #0
 8002d7a:	4770      	bx	lr

08002d7c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d7c:	b10a      	cbz	r2, 8002d82 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d7e:	6101      	str	r1, [r0, #16]
 8002d80:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d82:	0409      	lsls	r1, r1, #16
 8002d84:	6101      	str	r1, [r0, #16]
  }
}
 8002d86:	4770      	bx	lr

08002d88 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d88:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d8a:	ea01 0203 	and.w	r2, r1, r3
 8002d8e:	ea21 0103 	bic.w	r1, r1, r3
 8002d92:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002d96:	6101      	str	r1, [r0, #16]
}
 8002d98:	4770      	bx	lr
	...

08002d9c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d9c:	2800      	cmp	r0, #0
 8002d9e:	f000 8201 	beq.w	80031a4 <HAL_RCC_OscConfig+0x408>
{
 8002da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002daa:	6803      	ldr	r3, [r0, #0]
 8002dac:	f013 0f01 	tst.w	r3, #1
 8002db0:	d02c      	beq.n	8002e0c <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002db2:	4b9f      	ldr	r3, [pc, #636]	; (8003030 <HAL_RCC_OscConfig+0x294>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f003 030c 	and.w	r3, r3, #12
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	d01d      	beq.n	8002dfa <HAL_RCC_OscConfig+0x5e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002dbe:	4b9c      	ldr	r3, [pc, #624]	; (8003030 <HAL_RCC_OscConfig+0x294>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f003 030c 	and.w	r3, r3, #12
 8002dc6:	2b08      	cmp	r3, #8
 8002dc8:	d012      	beq.n	8002df0 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dca:	6863      	ldr	r3, [r4, #4]
 8002dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd0:	d041      	beq.n	8002e56 <HAL_RCC_OscConfig+0xba>
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d155      	bne.n	8002e82 <HAL_RCC_OscConfig+0xe6>
 8002dd6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002dda:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	e037      	b.n	8002e60 <HAL_RCC_OscConfig+0xc4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002df0:	4b8f      	ldr	r3, [pc, #572]	; (8003030 <HAL_RCC_OscConfig+0x294>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002df8:	d0e7      	beq.n	8002dca <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dfa:	4b8d      	ldr	r3, [pc, #564]	; (8003030 <HAL_RCC_OscConfig+0x294>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002e02:	d003      	beq.n	8002e0c <HAL_RCC_OscConfig+0x70>
 8002e04:	6863      	ldr	r3, [r4, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 81ce 	beq.w	80031a8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e0c:	6823      	ldr	r3, [r4, #0]
 8002e0e:	f013 0f02 	tst.w	r3, #2
 8002e12:	d075      	beq.n	8002f00 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e14:	4b86      	ldr	r3, [pc, #536]	; (8003030 <HAL_RCC_OscConfig+0x294>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f013 0f0c 	tst.w	r3, #12
 8002e1c:	d05f      	beq.n	8002ede <HAL_RCC_OscConfig+0x142>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e1e:	4b84      	ldr	r3, [pc, #528]	; (8003030 <HAL_RCC_OscConfig+0x294>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f003 030c 	and.w	r3, r3, #12
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	d054      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e2a:	6923      	ldr	r3, [r4, #16]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 808a 	beq.w	8002f46 <HAL_RCC_OscConfig+0x1aa>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e32:	4b80      	ldr	r3, [pc, #512]	; (8003034 <HAL_RCC_OscConfig+0x298>)
 8002e34:	2201      	movs	r2, #1
 8002e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e38:	f7ff f9c6 	bl	80021c8 <HAL_GetTick>
 8002e3c:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e3e:	4e7c      	ldr	r6, [pc, #496]	; (8003030 <HAL_RCC_OscConfig+0x294>)
 8002e40:	6833      	ldr	r3, [r6, #0]
 8002e42:	f013 0f02 	tst.w	r3, #2
 8002e46:	d175      	bne.n	8002f34 <HAL_RCC_OscConfig+0x198>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e48:	f7ff f9be 	bl	80021c8 <HAL_GetTick>
 8002e4c:	1b40      	subs	r0, r0, r5
 8002e4e:	2802      	cmp	r0, #2
 8002e50:	d9f6      	bls.n	8002e40 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_TIMEOUT;
 8002e52:	2003      	movs	r0, #3
 8002e54:	e1ad      	b.n	80031b2 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e56:	4a76      	ldr	r2, [pc, #472]	; (8003030 <HAL_RCC_OscConfig+0x294>)
 8002e58:	6813      	ldr	r3, [r2, #0]
 8002e5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e5e:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e60:	6863      	ldr	r3, [r4, #4]
 8002e62:	b343      	cbz	r3, 8002eb6 <HAL_RCC_OscConfig+0x11a>
        tickstart = HAL_GetTick();
 8002e64:	f7ff f9b0 	bl	80021c8 <HAL_GetTick>
 8002e68:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6a:	4e71      	ldr	r6, [pc, #452]	; (8003030 <HAL_RCC_OscConfig+0x294>)
 8002e6c:	6833      	ldr	r3, [r6, #0]
 8002e6e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002e72:	d1cb      	bne.n	8002e0c <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e74:	f7ff f9a8 	bl	80021c8 <HAL_GetTick>
 8002e78:	1b40      	subs	r0, r0, r5
 8002e7a:	2864      	cmp	r0, #100	; 0x64
 8002e7c:	d9f6      	bls.n	8002e6c <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 8002e7e:	2003      	movs	r0, #3
 8002e80:	e197      	b.n	80031b2 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e86:	d009      	beq.n	8002e9c <HAL_RCC_OscConfig+0x100>
 8002e88:	4b69      	ldr	r3, [pc, #420]	; (8003030 <HAL_RCC_OscConfig+0x294>)
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	e7e1      	b.n	8002e60 <HAL_RCC_OscConfig+0xc4>
 8002e9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ea0:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	e7d4      	b.n	8002e60 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8002eb6:	f7ff f987 	bl	80021c8 <HAL_GetTick>
 8002eba:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ebc:	4e5c      	ldr	r6, [pc, #368]	; (8003030 <HAL_RCC_OscConfig+0x294>)
 8002ebe:	6833      	ldr	r3, [r6, #0]
 8002ec0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002ec4:	d0a2      	beq.n	8002e0c <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ec6:	f7ff f97f 	bl	80021c8 <HAL_GetTick>
 8002eca:	1b40      	subs	r0, r0, r5
 8002ecc:	2864      	cmp	r0, #100	; 0x64
 8002ece:	d9f6      	bls.n	8002ebe <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 8002ed0:	2003      	movs	r0, #3
 8002ed2:	e16e      	b.n	80031b2 <HAL_RCC_OscConfig+0x416>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ed4:	4b56      	ldr	r3, [pc, #344]	; (8003030 <HAL_RCC_OscConfig+0x294>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002edc:	d1a5      	bne.n	8002e2a <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ede:	4b54      	ldr	r3, [pc, #336]	; (8003030 <HAL_RCC_OscConfig+0x294>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f013 0f02 	tst.w	r3, #2
 8002ee6:	d003      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x154>
 8002ee8:	6923      	ldr	r3, [r4, #16]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	f040 815e 	bne.w	80031ac <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef0:	4a4f      	ldr	r2, [pc, #316]	; (8003030 <HAL_RCC_OscConfig+0x294>)
 8002ef2:	6813      	ldr	r3, [r2, #0]
 8002ef4:	6961      	ldr	r1, [r4, #20]
 8002ef6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002efa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002efe:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f00:	6823      	ldr	r3, [r4, #0]
 8002f02:	f013 0f08 	tst.w	r3, #8
 8002f06:	d03d      	beq.n	8002f84 <HAL_RCC_OscConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f08:	69a3      	ldr	r3, [r4, #24]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d066      	beq.n	8002fdc <HAL_RCC_OscConfig+0x240>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f0e:	4b49      	ldr	r3, [pc, #292]	; (8003034 <HAL_RCC_OscConfig+0x298>)
 8002f10:	2201      	movs	r2, #1
 8002f12:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f16:	f7ff f957 	bl	80021c8 <HAL_GetTick>
 8002f1a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f1c:	4e44      	ldr	r6, [pc, #272]	; (8003030 <HAL_RCC_OscConfig+0x294>)
 8002f1e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002f20:	f013 0f02 	tst.w	r3, #2
 8002f24:	d121      	bne.n	8002f6a <HAL_RCC_OscConfig+0x1ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f26:	f7ff f94f 	bl	80021c8 <HAL_GetTick>
 8002f2a:	1b40      	subs	r0, r0, r5
 8002f2c:	2802      	cmp	r0, #2
 8002f2e:	d9f6      	bls.n	8002f1e <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 8002f30:	2003      	movs	r0, #3
 8002f32:	e13e      	b.n	80031b2 <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f34:	4a3e      	ldr	r2, [pc, #248]	; (8003030 <HAL_RCC_OscConfig+0x294>)
 8002f36:	6813      	ldr	r3, [r2, #0]
 8002f38:	6961      	ldr	r1, [r4, #20]
 8002f3a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002f3e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002f42:	6013      	str	r3, [r2, #0]
 8002f44:	e7dc      	b.n	8002f00 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8002f46:	4b3b      	ldr	r3, [pc, #236]	; (8003034 <HAL_RCC_OscConfig+0x298>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002f4c:	f7ff f93c 	bl	80021c8 <HAL_GetTick>
 8002f50:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f52:	4e37      	ldr	r6, [pc, #220]	; (8003030 <HAL_RCC_OscConfig+0x294>)
 8002f54:	6833      	ldr	r3, [r6, #0]
 8002f56:	f013 0f02 	tst.w	r3, #2
 8002f5a:	d0d1      	beq.n	8002f00 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f5c:	f7ff f934 	bl	80021c8 <HAL_GetTick>
 8002f60:	1b40      	subs	r0, r0, r5
 8002f62:	2802      	cmp	r0, #2
 8002f64:	d9f6      	bls.n	8002f54 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 8002f66:	2003      	movs	r0, #3
 8002f68:	e123      	b.n	80031b2 <HAL_RCC_OscConfig+0x416>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f6a:	4b33      	ldr	r3, [pc, #204]	; (8003038 <HAL_RCC_OscConfig+0x29c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a33      	ldr	r2, [pc, #204]	; (800303c <HAL_RCC_OscConfig+0x2a0>)
 8002f70:	fba2 2303 	umull	r2, r3, r2, r3
 8002f74:	0a5b      	lsrs	r3, r3, #9
 8002f76:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8002f78:	bf00      	nop
  }
  while (Delay --);
 8002f7a:	9b01      	ldr	r3, [sp, #4]
 8002f7c:	1e5a      	subs	r2, r3, #1
 8002f7e:	9201      	str	r2, [sp, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1f9      	bne.n	8002f78 <HAL_RCC_OscConfig+0x1dc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f84:	6823      	ldr	r3, [r4, #0]
 8002f86:	f013 0f04 	tst.w	r3, #4
 8002f8a:	f000 809b 	beq.w	80030c4 <HAL_RCC_OscConfig+0x328>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f8e:	4b28      	ldr	r3, [pc, #160]	; (8003030 <HAL_RCC_OscConfig+0x294>)
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002f96:	d134      	bne.n	8003002 <HAL_RCC_OscConfig+0x266>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f98:	4b25      	ldr	r3, [pc, #148]	; (8003030 <HAL_RCC_OscConfig+0x294>)
 8002f9a:	69da      	ldr	r2, [r3, #28]
 8002f9c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002fa0:	61da      	str	r2, [r3, #28]
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa8:	9300      	str	r3, [sp, #0]
 8002faa:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8002fac:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fae:	4b24      	ldr	r3, [pc, #144]	; (8003040 <HAL_RCC_OscConfig+0x2a4>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002fb6:	d026      	beq.n	8003006 <HAL_RCC_OscConfig+0x26a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fb8:	68e3      	ldr	r3, [r4, #12]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d042      	beq.n	8003044 <HAL_RCC_OscConfig+0x2a8>
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d158      	bne.n	8003074 <HAL_RCC_OscConfig+0x2d8>
 8002fc2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002fc6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002fca:	6a1a      	ldr	r2, [r3, #32]
 8002fcc:	f022 0201 	bic.w	r2, r2, #1
 8002fd0:	621a      	str	r2, [r3, #32]
 8002fd2:	6a1a      	ldr	r2, [r3, #32]
 8002fd4:	f022 0204 	bic.w	r2, r2, #4
 8002fd8:	621a      	str	r2, [r3, #32]
 8002fda:	e038      	b.n	800304e <HAL_RCC_OscConfig+0x2b2>
      __HAL_RCC_LSI_DISABLE();
 8002fdc:	4b15      	ldr	r3, [pc, #84]	; (8003034 <HAL_RCC_OscConfig+0x298>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8002fe4:	f7ff f8f0 	bl	80021c8 <HAL_GetTick>
 8002fe8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fea:	4e11      	ldr	r6, [pc, #68]	; (8003030 <HAL_RCC_OscConfig+0x294>)
 8002fec:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002fee:	f013 0f02 	tst.w	r3, #2
 8002ff2:	d0c7      	beq.n	8002f84 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ff4:	f7ff f8e8 	bl	80021c8 <HAL_GetTick>
 8002ff8:	1b40      	subs	r0, r0, r5
 8002ffa:	2802      	cmp	r0, #2
 8002ffc:	d9f6      	bls.n	8002fec <HAL_RCC_OscConfig+0x250>
          return HAL_TIMEOUT;
 8002ffe:	2003      	movs	r0, #3
 8003000:	e0d7      	b.n	80031b2 <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 8003002:	2500      	movs	r5, #0
 8003004:	e7d3      	b.n	8002fae <HAL_RCC_OscConfig+0x212>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003006:	4a0e      	ldr	r2, [pc, #56]	; (8003040 <HAL_RCC_OscConfig+0x2a4>)
 8003008:	6813      	ldr	r3, [r2, #0]
 800300a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800300e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003010:	f7ff f8da 	bl	80021c8 <HAL_GetTick>
 8003014:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003016:	4f0a      	ldr	r7, [pc, #40]	; (8003040 <HAL_RCC_OscConfig+0x2a4>)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800301e:	d1cb      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003020:	f7ff f8d2 	bl	80021c8 <HAL_GetTick>
 8003024:	1b80      	subs	r0, r0, r6
 8003026:	2864      	cmp	r0, #100	; 0x64
 8003028:	d9f6      	bls.n	8003018 <HAL_RCC_OscConfig+0x27c>
          return HAL_TIMEOUT;
 800302a:	2003      	movs	r0, #3
 800302c:	e0c1      	b.n	80031b2 <HAL_RCC_OscConfig+0x416>
 800302e:	bf00      	nop
 8003030:	40021000 	.word	0x40021000
 8003034:	42420000 	.word	0x42420000
 8003038:	20000004 	.word	0x20000004
 800303c:	10624dd3 	.word	0x10624dd3
 8003040:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003044:	4a5e      	ldr	r2, [pc, #376]	; (80031c0 <HAL_RCC_OscConfig+0x424>)
 8003046:	6a13      	ldr	r3, [r2, #32]
 8003048:	f043 0301 	orr.w	r3, r3, #1
 800304c:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800304e:	68e3      	ldr	r3, [r4, #12]
 8003050:	b333      	cbz	r3, 80030a0 <HAL_RCC_OscConfig+0x304>
      tickstart = HAL_GetTick();
 8003052:	f7ff f8b9 	bl	80021c8 <HAL_GetTick>
 8003056:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003058:	4f59      	ldr	r7, [pc, #356]	; (80031c0 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800305a:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	f013 0f02 	tst.w	r3, #2
 8003064:	d12d      	bne.n	80030c2 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003066:	f7ff f8af 	bl	80021c8 <HAL_GetTick>
 800306a:	1b80      	subs	r0, r0, r6
 800306c:	4540      	cmp	r0, r8
 800306e:	d9f6      	bls.n	800305e <HAL_RCC_OscConfig+0x2c2>
          return HAL_TIMEOUT;
 8003070:	2003      	movs	r0, #3
 8003072:	e09e      	b.n	80031b2 <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003074:	2b05      	cmp	r3, #5
 8003076:	d009      	beq.n	800308c <HAL_RCC_OscConfig+0x2f0>
 8003078:	4b51      	ldr	r3, [pc, #324]	; (80031c0 <HAL_RCC_OscConfig+0x424>)
 800307a:	6a1a      	ldr	r2, [r3, #32]
 800307c:	f022 0201 	bic.w	r2, r2, #1
 8003080:	621a      	str	r2, [r3, #32]
 8003082:	6a1a      	ldr	r2, [r3, #32]
 8003084:	f022 0204 	bic.w	r2, r2, #4
 8003088:	621a      	str	r2, [r3, #32]
 800308a:	e7e0      	b.n	800304e <HAL_RCC_OscConfig+0x2b2>
 800308c:	4b4c      	ldr	r3, [pc, #304]	; (80031c0 <HAL_RCC_OscConfig+0x424>)
 800308e:	6a1a      	ldr	r2, [r3, #32]
 8003090:	f042 0204 	orr.w	r2, r2, #4
 8003094:	621a      	str	r2, [r3, #32]
 8003096:	6a1a      	ldr	r2, [r3, #32]
 8003098:	f042 0201 	orr.w	r2, r2, #1
 800309c:	621a      	str	r2, [r3, #32]
 800309e:	e7d6      	b.n	800304e <HAL_RCC_OscConfig+0x2b2>
      tickstart = HAL_GetTick();
 80030a0:	f7ff f892 	bl	80021c8 <HAL_GetTick>
 80030a4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030a6:	4f46      	ldr	r7, [pc, #280]	; (80031c0 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030a8:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ac:	6a3b      	ldr	r3, [r7, #32]
 80030ae:	f013 0f02 	tst.w	r3, #2
 80030b2:	d006      	beq.n	80030c2 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b4:	f7ff f888 	bl	80021c8 <HAL_GetTick>
 80030b8:	1b80      	subs	r0, r0, r6
 80030ba:	4540      	cmp	r0, r8
 80030bc:	d9f6      	bls.n	80030ac <HAL_RCC_OscConfig+0x310>
          return HAL_TIMEOUT;
 80030be:	2003      	movs	r0, #3
 80030c0:	e077      	b.n	80031b2 <HAL_RCC_OscConfig+0x416>
    if (pwrclkchanged == SET)
 80030c2:	b9e5      	cbnz	r5, 80030fe <HAL_RCC_OscConfig+0x362>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030c4:	69e3      	ldr	r3, [r4, #28]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d072      	beq.n	80031b0 <HAL_RCC_OscConfig+0x414>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030ca:	4a3d      	ldr	r2, [pc, #244]	; (80031c0 <HAL_RCC_OscConfig+0x424>)
 80030cc:	6852      	ldr	r2, [r2, #4]
 80030ce:	f002 020c 	and.w	r2, r2, #12
 80030d2:	2a08      	cmp	r2, #8
 80030d4:	d056      	beq.n	8003184 <HAL_RCC_OscConfig+0x3e8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d017      	beq.n	800310a <HAL_RCC_OscConfig+0x36e>
        __HAL_RCC_PLL_DISABLE();
 80030da:	4b3a      	ldr	r3, [pc, #232]	; (80031c4 <HAL_RCC_OscConfig+0x428>)
 80030dc:	2200      	movs	r2, #0
 80030de:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80030e0:	f7ff f872 	bl	80021c8 <HAL_GetTick>
 80030e4:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030e6:	4d36      	ldr	r5, [pc, #216]	; (80031c0 <HAL_RCC_OscConfig+0x424>)
 80030e8:	682b      	ldr	r3, [r5, #0]
 80030ea:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80030ee:	d047      	beq.n	8003180 <HAL_RCC_OscConfig+0x3e4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f0:	f7ff f86a 	bl	80021c8 <HAL_GetTick>
 80030f4:	1b00      	subs	r0, r0, r4
 80030f6:	2802      	cmp	r0, #2
 80030f8:	d9f6      	bls.n	80030e8 <HAL_RCC_OscConfig+0x34c>
            return HAL_TIMEOUT;
 80030fa:	2003      	movs	r0, #3
 80030fc:	e059      	b.n	80031b2 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 80030fe:	4a30      	ldr	r2, [pc, #192]	; (80031c0 <HAL_RCC_OscConfig+0x424>)
 8003100:	69d3      	ldr	r3, [r2, #28]
 8003102:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003106:	61d3      	str	r3, [r2, #28]
 8003108:	e7dc      	b.n	80030c4 <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_PLL_DISABLE();
 800310a:	4b2e      	ldr	r3, [pc, #184]	; (80031c4 <HAL_RCC_OscConfig+0x428>)
 800310c:	2200      	movs	r2, #0
 800310e:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003110:	f7ff f85a 	bl	80021c8 <HAL_GetTick>
 8003114:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003116:	4e2a      	ldr	r6, [pc, #168]	; (80031c0 <HAL_RCC_OscConfig+0x424>)
 8003118:	6833      	ldr	r3, [r6, #0]
 800311a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800311e:	d006      	beq.n	800312e <HAL_RCC_OscConfig+0x392>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003120:	f7ff f852 	bl	80021c8 <HAL_GetTick>
 8003124:	1b40      	subs	r0, r0, r5
 8003126:	2802      	cmp	r0, #2
 8003128:	d9f6      	bls.n	8003118 <HAL_RCC_OscConfig+0x37c>
            return HAL_TIMEOUT;
 800312a:	2003      	movs	r0, #3
 800312c:	e041      	b.n	80031b2 <HAL_RCC_OscConfig+0x416>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800312e:	6a23      	ldr	r3, [r4, #32]
 8003130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003134:	d01a      	beq.n	800316c <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003136:	4922      	ldr	r1, [pc, #136]	; (80031c0 <HAL_RCC_OscConfig+0x424>)
 8003138:	684a      	ldr	r2, [r1, #4]
 800313a:	6a23      	ldr	r3, [r4, #32]
 800313c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800313e:	4303      	orrs	r3, r0
 8003140:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8003144:	4313      	orrs	r3, r2
 8003146:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8003148:	4b1e      	ldr	r3, [pc, #120]	; (80031c4 <HAL_RCC_OscConfig+0x428>)
 800314a:	2201      	movs	r2, #1
 800314c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800314e:	f7ff f83b 	bl	80021c8 <HAL_GetTick>
 8003152:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003154:	4d1a      	ldr	r5, [pc, #104]	; (80031c0 <HAL_RCC_OscConfig+0x424>)
 8003156:	682b      	ldr	r3, [r5, #0]
 8003158:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800315c:	d10e      	bne.n	800317c <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800315e:	f7ff f833 	bl	80021c8 <HAL_GetTick>
 8003162:	1b00      	subs	r0, r0, r4
 8003164:	2802      	cmp	r0, #2
 8003166:	d9f6      	bls.n	8003156 <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 8003168:	2003      	movs	r0, #3
 800316a:	e022      	b.n	80031b2 <HAL_RCC_OscConfig+0x416>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800316c:	4a14      	ldr	r2, [pc, #80]	; (80031c0 <HAL_RCC_OscConfig+0x424>)
 800316e:	6853      	ldr	r3, [r2, #4]
 8003170:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003174:	68a1      	ldr	r1, [r4, #8]
 8003176:	430b      	orrs	r3, r1
 8003178:	6053      	str	r3, [r2, #4]
 800317a:	e7dc      	b.n	8003136 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 800317c:	2000      	movs	r0, #0
 800317e:	e018      	b.n	80031b2 <HAL_RCC_OscConfig+0x416>
 8003180:	2000      	movs	r0, #0
 8003182:	e016      	b.n	80031b2 <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003184:	2b01      	cmp	r3, #1
 8003186:	d017      	beq.n	80031b8 <HAL_RCC_OscConfig+0x41c>
        pll_config = RCC->CFGR;
 8003188:	4b0d      	ldr	r3, [pc, #52]	; (80031c0 <HAL_RCC_OscConfig+0x424>)
 800318a:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800318c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003190:	6a22      	ldr	r2, [r4, #32]
 8003192:	4291      	cmp	r1, r2
 8003194:	d112      	bne.n	80031bc <HAL_RCC_OscConfig+0x420>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003196:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800319a:	6a60      	ldr	r0, [r4, #36]	; 0x24
        return HAL_ERROR;
 800319c:	1a18      	subs	r0, r3, r0
 800319e:	bf18      	it	ne
 80031a0:	2001      	movne	r0, #1
 80031a2:	e006      	b.n	80031b2 <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 80031a4:	2001      	movs	r0, #1
}
 80031a6:	4770      	bx	lr
        return HAL_ERROR;
 80031a8:	2001      	movs	r0, #1
 80031aa:	e002      	b.n	80031b2 <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 80031ac:	2001      	movs	r0, #1
 80031ae:	e000      	b.n	80031b2 <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 80031b0:	2000      	movs	r0, #0
}
 80031b2:	b002      	add	sp, #8
 80031b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 80031b8:	2001      	movs	r0, #1
 80031ba:	e7fa      	b.n	80031b2 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 80031bc:	2001      	movs	r0, #1
 80031be:	e7f8      	b.n	80031b2 <HAL_RCC_OscConfig+0x416>
 80031c0:	40021000 	.word	0x40021000
 80031c4:	42420000 	.word	0x42420000

080031c8 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80031c8:	4b0f      	ldr	r3, [pc, #60]	; (8003208 <HAL_RCC_GetSysClockFreq+0x40>)
 80031ca:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80031cc:	f003 020c 	and.w	r2, r3, #12
 80031d0:	2a08      	cmp	r2, #8
 80031d2:	d001      	beq.n	80031d8 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 80031d4:	480d      	ldr	r0, [pc, #52]	; (800320c <HAL_RCC_GetSysClockFreq+0x44>)
}
 80031d6:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031d8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80031dc:	490c      	ldr	r1, [pc, #48]	; (8003210 <HAL_RCC_GetSysClockFreq+0x48>)
 80031de:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031e0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80031e4:	d00b      	beq.n	80031fe <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031e6:	4b08      	ldr	r3, [pc, #32]	; (8003208 <HAL_RCC_GetSysClockFreq+0x40>)
 80031e8:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031ea:	4a08      	ldr	r2, [pc, #32]	; (800320c <HAL_RCC_GetSysClockFreq+0x44>)
 80031ec:	fb02 f000 	mul.w	r0, r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031f0:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80031f4:	4a07      	ldr	r2, [pc, #28]	; (8003214 <HAL_RCC_GetSysClockFreq+0x4c>)
 80031f6:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031f8:	fbb0 f0f3 	udiv	r0, r0, r3
 80031fc:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031fe:	4b06      	ldr	r3, [pc, #24]	; (8003218 <HAL_RCC_GetSysClockFreq+0x50>)
 8003200:	fb03 f000 	mul.w	r0, r3, r0
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	40021000 	.word	0x40021000
 800320c:	007a1200 	.word	0x007a1200
 8003210:	08007d50 	.word	0x08007d50
 8003214:	08007d60 	.word	0x08007d60
 8003218:	003d0900 	.word	0x003d0900

0800321c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800321c:	2800      	cmp	r0, #0
 800321e:	f000 80a2 	beq.w	8003366 <HAL_RCC_ClockConfig+0x14a>
{
 8003222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003226:	460d      	mov	r5, r1
 8003228:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800322a:	4b53      	ldr	r3, [pc, #332]	; (8003378 <HAL_RCC_ClockConfig+0x15c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0307 	and.w	r3, r3, #7
 8003232:	428b      	cmp	r3, r1
 8003234:	d20b      	bcs.n	800324e <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003236:	4a50      	ldr	r2, [pc, #320]	; (8003378 <HAL_RCC_ClockConfig+0x15c>)
 8003238:	6813      	ldr	r3, [r2, #0]
 800323a:	f023 0307 	bic.w	r3, r3, #7
 800323e:	430b      	orrs	r3, r1
 8003240:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003242:	6813      	ldr	r3, [r2, #0]
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	428b      	cmp	r3, r1
 800324a:	f040 808e 	bne.w	800336a <HAL_RCC_ClockConfig+0x14e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800324e:	6823      	ldr	r3, [r4, #0]
 8003250:	f013 0f02 	tst.w	r3, #2
 8003254:	d017      	beq.n	8003286 <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003256:	f013 0f04 	tst.w	r3, #4
 800325a:	d004      	beq.n	8003266 <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800325c:	4a47      	ldr	r2, [pc, #284]	; (800337c <HAL_RCC_ClockConfig+0x160>)
 800325e:	6853      	ldr	r3, [r2, #4]
 8003260:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003264:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003266:	6823      	ldr	r3, [r4, #0]
 8003268:	f013 0f08 	tst.w	r3, #8
 800326c:	d004      	beq.n	8003278 <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800326e:	4a43      	ldr	r2, [pc, #268]	; (800337c <HAL_RCC_ClockConfig+0x160>)
 8003270:	6853      	ldr	r3, [r2, #4]
 8003272:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003276:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003278:	4a40      	ldr	r2, [pc, #256]	; (800337c <HAL_RCC_ClockConfig+0x160>)
 800327a:	6853      	ldr	r3, [r2, #4]
 800327c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003280:	68a1      	ldr	r1, [r4, #8]
 8003282:	430b      	orrs	r3, r1
 8003284:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003286:	6823      	ldr	r3, [r4, #0]
 8003288:	f013 0f01 	tst.w	r3, #1
 800328c:	d031      	beq.n	80032f2 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800328e:	6862      	ldr	r2, [r4, #4]
 8003290:	2a01      	cmp	r2, #1
 8003292:	d020      	beq.n	80032d6 <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003294:	2a02      	cmp	r2, #2
 8003296:	d025      	beq.n	80032e4 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003298:	4b38      	ldr	r3, [pc, #224]	; (800337c <HAL_RCC_ClockConfig+0x160>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f013 0f02 	tst.w	r3, #2
 80032a0:	d065      	beq.n	800336e <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032a2:	4936      	ldr	r1, [pc, #216]	; (800337c <HAL_RCC_ClockConfig+0x160>)
 80032a4:	684b      	ldr	r3, [r1, #4]
 80032a6:	f023 0303 	bic.w	r3, r3, #3
 80032aa:	4313      	orrs	r3, r2
 80032ac:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80032ae:	f7fe ff8b 	bl	80021c8 <HAL_GetTick>
 80032b2:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032b4:	4f31      	ldr	r7, [pc, #196]	; (800337c <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032b6:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f003 030c 	and.w	r3, r3, #12
 80032c0:	6862      	ldr	r2, [r4, #4]
 80032c2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80032c6:	d014      	beq.n	80032f2 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c8:	f7fe ff7e 	bl	80021c8 <HAL_GetTick>
 80032cc:	1b80      	subs	r0, r0, r6
 80032ce:	4540      	cmp	r0, r8
 80032d0:	d9f3      	bls.n	80032ba <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 80032d2:	2003      	movs	r0, #3
 80032d4:	e045      	b.n	8003362 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032d6:	4b29      	ldr	r3, [pc, #164]	; (800337c <HAL_RCC_ClockConfig+0x160>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80032de:	d1e0      	bne.n	80032a2 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80032e0:	2001      	movs	r0, #1
 80032e2:	e03e      	b.n	8003362 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032e4:	4b25      	ldr	r3, [pc, #148]	; (800337c <HAL_RCC_ClockConfig+0x160>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80032ec:	d1d9      	bne.n	80032a2 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80032ee:	2001      	movs	r0, #1
 80032f0:	e037      	b.n	8003362 <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032f2:	4b21      	ldr	r3, [pc, #132]	; (8003378 <HAL_RCC_ClockConfig+0x15c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	42ab      	cmp	r3, r5
 80032fc:	d90a      	bls.n	8003314 <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032fe:	4a1e      	ldr	r2, [pc, #120]	; (8003378 <HAL_RCC_ClockConfig+0x15c>)
 8003300:	6813      	ldr	r3, [r2, #0]
 8003302:	f023 0307 	bic.w	r3, r3, #7
 8003306:	432b      	orrs	r3, r5
 8003308:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800330a:	6813      	ldr	r3, [r2, #0]
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	42ab      	cmp	r3, r5
 8003312:	d12e      	bne.n	8003372 <HAL_RCC_ClockConfig+0x156>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003314:	6823      	ldr	r3, [r4, #0]
 8003316:	f013 0f04 	tst.w	r3, #4
 800331a:	d006      	beq.n	800332a <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800331c:	4a17      	ldr	r2, [pc, #92]	; (800337c <HAL_RCC_ClockConfig+0x160>)
 800331e:	6853      	ldr	r3, [r2, #4]
 8003320:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003324:	68e1      	ldr	r1, [r4, #12]
 8003326:	430b      	orrs	r3, r1
 8003328:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800332a:	6823      	ldr	r3, [r4, #0]
 800332c:	f013 0f08 	tst.w	r3, #8
 8003330:	d007      	beq.n	8003342 <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003332:	4a12      	ldr	r2, [pc, #72]	; (800337c <HAL_RCC_ClockConfig+0x160>)
 8003334:	6853      	ldr	r3, [r2, #4]
 8003336:	6921      	ldr	r1, [r4, #16]
 8003338:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800333c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003340:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003342:	f7ff ff41 	bl	80031c8 <HAL_RCC_GetSysClockFreq>
 8003346:	4b0d      	ldr	r3, [pc, #52]	; (800337c <HAL_RCC_ClockConfig+0x160>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800334e:	4a0c      	ldr	r2, [pc, #48]	; (8003380 <HAL_RCC_ClockConfig+0x164>)
 8003350:	5cd3      	ldrb	r3, [r2, r3]
 8003352:	40d8      	lsrs	r0, r3
 8003354:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <HAL_RCC_ClockConfig+0x168>)
 8003356:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003358:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <HAL_RCC_ClockConfig+0x16c>)
 800335a:	6818      	ldr	r0, [r3, #0]
 800335c:	f7fe fe70 	bl	8002040 <HAL_InitTick>
  return HAL_OK;
 8003360:	2000      	movs	r0, #0
}
 8003362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8003366:	2001      	movs	r0, #1
}
 8003368:	4770      	bx	lr
    return HAL_ERROR;
 800336a:	2001      	movs	r0, #1
 800336c:	e7f9      	b.n	8003362 <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 800336e:	2001      	movs	r0, #1
 8003370:	e7f7      	b.n	8003362 <HAL_RCC_ClockConfig+0x146>
    return HAL_ERROR;
 8003372:	2001      	movs	r0, #1
 8003374:	e7f5      	b.n	8003362 <HAL_RCC_ClockConfig+0x146>
 8003376:	bf00      	nop
 8003378:	40022000 	.word	0x40022000
 800337c:	40021000 	.word	0x40021000
 8003380:	08007d38 	.word	0x08007d38
 8003384:	20000004 	.word	0x20000004
 8003388:	2000000c 	.word	0x2000000c

0800338c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800338c:	4b04      	ldr	r3, [pc, #16]	; (80033a0 <HAL_RCC_GetPCLK1Freq+0x14>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003394:	4a03      	ldr	r2, [pc, #12]	; (80033a4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003396:	5cd3      	ldrb	r3, [r2, r3]
 8003398:	4a03      	ldr	r2, [pc, #12]	; (80033a8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800339a:	6810      	ldr	r0, [r2, #0]
}
 800339c:	40d8      	lsrs	r0, r3
 800339e:	4770      	bx	lr
 80033a0:	40021000 	.word	0x40021000
 80033a4:	08007d48 	.word	0x08007d48
 80033a8:	20000004 	.word	0x20000004

080033ac <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033ac:	4b04      	ldr	r3, [pc, #16]	; (80033c0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80033b4:	4a03      	ldr	r2, [pc, #12]	; (80033c4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80033b6:	5cd3      	ldrb	r3, [r2, r3]
 80033b8:	4a03      	ldr	r2, [pc, #12]	; (80033c8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80033ba:	6810      	ldr	r0, [r2, #0]
}
 80033bc:	40d8      	lsrs	r0, r3
 80033be:	4770      	bx	lr
 80033c0:	40021000 	.word	0x40021000
 80033c4:	08007d48 	.word	0x08007d48
 80033c8:	20000004 	.word	0x20000004

080033cc <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80033cc:	230f      	movs	r3, #15
 80033ce:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80033d0:	4b0b      	ldr	r3, [pc, #44]	; (8003400 <HAL_RCC_GetClockConfig+0x34>)
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	f002 0203 	and.w	r2, r2, #3
 80033d8:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80033e0:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80033e8:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	08db      	lsrs	r3, r3, #3
 80033ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033f2:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80033f4:	4b03      	ldr	r3, [pc, #12]	; (8003404 <HAL_RCC_GetClockConfig+0x38>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0307 	and.w	r3, r3, #7
 80033fc:	600b      	str	r3, [r1, #0]
}
 80033fe:	4770      	bx	lr
 8003400:	40021000 	.word	0x40021000
 8003404:	40022000 	.word	0x40022000

08003408 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800340c:	b082      	sub	sp, #8
 800340e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003410:	6803      	ldr	r3, [r0, #0]
 8003412:	f013 0f01 	tst.w	r3, #1
 8003416:	d036      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003418:	4b3f      	ldr	r3, [pc, #252]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800341a:	69db      	ldr	r3, [r3, #28]
 800341c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003420:	d149      	bne.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0xae>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003422:	4b3d      	ldr	r3, [pc, #244]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003424:	69da      	ldr	r2, [r3, #28]
 8003426:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800342a:	61da      	str	r2, [r3, #28]
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003432:	9301      	str	r3, [sp, #4]
 8003434:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003436:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003438:	4b38      	ldr	r3, [pc, #224]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003440:	d03b      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003442:	4b35      	ldr	r3, [pc, #212]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003444:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003446:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800344a:	d013      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800344c:	6862      	ldr	r2, [r4, #4]
 800344e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003452:	429a      	cmp	r2, r3
 8003454:	d00e      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003456:	4a30      	ldr	r2, [pc, #192]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003458:	6a13      	ldr	r3, [r2, #32]
 800345a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800345e:	4930      	ldr	r1, [pc, #192]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003460:	2601      	movs	r6, #1
 8003462:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003466:	2600      	movs	r6, #0
 8003468:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800346c:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800346e:	f013 0f01 	tst.w	r3, #1
 8003472:	d136      	bne.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0xda>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003474:	4a28      	ldr	r2, [pc, #160]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003476:	6a13      	ldr	r3, [r2, #32]
 8003478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800347c:	6861      	ldr	r1, [r4, #4]
 800347e:	430b      	orrs	r3, r1
 8003480:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003482:	2d00      	cmp	r5, #0
 8003484:	d13e      	bne.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003486:	6823      	ldr	r3, [r4, #0]
 8003488:	f013 0f02 	tst.w	r3, #2
 800348c:	d006      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800348e:	4a22      	ldr	r2, [pc, #136]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003490:	6853      	ldr	r3, [r2, #4]
 8003492:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003496:	68a1      	ldr	r1, [r4, #8]
 8003498:	430b      	orrs	r3, r1
 800349a:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800349c:	6823      	ldr	r3, [r4, #0]
 800349e:	f013 0f10 	tst.w	r3, #16
 80034a2:	d034      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034a4:	4a1c      	ldr	r2, [pc, #112]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80034a6:	6853      	ldr	r3, [r2, #4]
 80034a8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80034ac:	68e1      	ldr	r1, [r4, #12]
 80034ae:	430b      	orrs	r3, r1
 80034b0:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80034b2:	2000      	movs	r0, #0
 80034b4:	e02c      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x108>
    FlagStatus pwrclkchanged = RESET;
 80034b6:	2500      	movs	r5, #0
 80034b8:	e7be      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034ba:	4a18      	ldr	r2, [pc, #96]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80034bc:	6813      	ldr	r3, [r2, #0]
 80034be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80034c4:	f7fe fe80 	bl	80021c8 <HAL_GetTick>
 80034c8:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ca:	4f14      	ldr	r7, [pc, #80]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	f413 7f80 	tst.w	r3, #256	; 0x100
 80034d2:	d1b6      	bne.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034d4:	f7fe fe78 	bl	80021c8 <HAL_GetTick>
 80034d8:	1b80      	subs	r0, r0, r6
 80034da:	2864      	cmp	r0, #100	; 0x64
 80034dc:	d9f6      	bls.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0xc4>
          return HAL_TIMEOUT;
 80034de:	2003      	movs	r0, #3
 80034e0:	e016      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x108>
        tickstart = HAL_GetTick();
 80034e2:	f7fe fe71 	bl	80021c8 <HAL_GetTick>
 80034e6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e8:	4f0b      	ldr	r7, [pc, #44]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x110>)
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ea:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	f013 0f02 	tst.w	r3, #2
 80034f4:	d1be      	bne.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034f6:	f7fe fe67 	bl	80021c8 <HAL_GetTick>
 80034fa:	1b80      	subs	r0, r0, r6
 80034fc:	4540      	cmp	r0, r8
 80034fe:	d9f6      	bls.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0xe6>
            return HAL_TIMEOUT;
 8003500:	2003      	movs	r0, #3
 8003502:	e005      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x108>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003504:	69d3      	ldr	r3, [r2, #28]
 8003506:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800350a:	61d3      	str	r3, [r2, #28]
 800350c:	e7bb      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x7e>
  return HAL_OK;
 800350e:	2000      	movs	r0, #0
}
 8003510:	b002      	add	sp, #8
 8003512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003516:	bf00      	nop
 8003518:	40021000 	.word	0x40021000
 800351c:	40007000 	.word	0x40007000
 8003520:	42420000 	.word	0x42420000

08003524 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003524:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003526:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003528:	6a02      	ldr	r2, [r0, #32]
 800352a:	f022 0201 	bic.w	r2, r2, #1
 800352e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003530:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003532:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003534:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003538:	680d      	ldr	r5, [r1, #0]
 800353a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800353c:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003540:	688d      	ldr	r5, [r1, #8]
 8003542:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003544:	4d0b      	ldr	r5, [pc, #44]	; (8003574 <TIM_OC1_SetConfig+0x50>)
 8003546:	42a8      	cmp	r0, r5
 8003548:	d006      	beq.n	8003558 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800354a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800354c:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800354e:	684a      	ldr	r2, [r1, #4]
 8003550:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003552:	6203      	str	r3, [r0, #32]
}
 8003554:	bc70      	pop	{r4, r5, r6}
 8003556:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8003558:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800355c:	68cd      	ldr	r5, [r1, #12]
 800355e:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8003560:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003564:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8003568:	694d      	ldr	r5, [r1, #20]
 800356a:	698e      	ldr	r6, [r1, #24]
 800356c:	4335      	orrs	r5, r6
 800356e:	432c      	orrs	r4, r5
 8003570:	e7eb      	b.n	800354a <TIM_OC1_SetConfig+0x26>
 8003572:	bf00      	nop
 8003574:	40012c00 	.word	0x40012c00

08003578 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003578:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800357a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800357c:	6a02      	ldr	r2, [r0, #32]
 800357e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003582:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003584:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003586:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003588:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800358c:	680d      	ldr	r5, [r1, #0]
 800358e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003590:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003594:	688d      	ldr	r5, [r1, #8]
 8003596:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800359a:	4d0c      	ldr	r5, [pc, #48]	; (80035cc <TIM_OC3_SetConfig+0x54>)
 800359c:	42a8      	cmp	r0, r5
 800359e:	d006      	beq.n	80035ae <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035a0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035a2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035a4:	684a      	ldr	r2, [r1, #4]
 80035a6:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035a8:	6203      	str	r3, [r0, #32]
}
 80035aa:	bc70      	pop	{r4, r5, r6}
 80035ac:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 80035ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035b2:	68cd      	ldr	r5, [r1, #12]
 80035b4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80035b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035bc:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035c0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035c2:	698e      	ldr	r6, [r1, #24]
 80035c4:	4335      	orrs	r5, r6
 80035c6:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 80035ca:	e7e9      	b.n	80035a0 <TIM_OC3_SetConfig+0x28>
 80035cc:	40012c00 	.word	0x40012c00

080035d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035d0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035d2:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035d4:	6a02      	ldr	r2, [r0, #32]
 80035d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80035da:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035dc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035de:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035e0:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035e4:	680d      	ldr	r5, [r1, #0]
 80035e6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035ee:	688d      	ldr	r5, [r1, #8]
 80035f0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035f4:	4d07      	ldr	r5, [pc, #28]	; (8003614 <TIM_OC4_SetConfig+0x44>)
 80035f6:	42a8      	cmp	r0, r5
 80035f8:	d006      	beq.n	8003608 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035fa:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035fc:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035fe:	684a      	ldr	r2, [r1, #4]
 8003600:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003602:	6203      	str	r3, [r0, #32]
}
 8003604:	bc30      	pop	{r4, r5}
 8003606:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003608:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800360c:	694d      	ldr	r5, [r1, #20]
 800360e:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8003612:	e7f2      	b.n	80035fa <TIM_OC4_SetConfig+0x2a>
 8003614:	40012c00 	.word	0x40012c00

08003618 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003618:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b01      	cmp	r3, #1
 8003620:	d127      	bne.n	8003672 <HAL_TIM_Base_Start_IT+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003622:	2302      	movs	r3, #2
 8003624:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003628:	6802      	ldr	r2, [r0, #0]
 800362a:	68d3      	ldr	r3, [r2, #12]
 800362c:	f043 0301 	orr.w	r3, r3, #1
 8003630:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003632:	6803      	ldr	r3, [r0, #0]
 8003634:	4a11      	ldr	r2, [pc, #68]	; (800367c <HAL_TIM_Base_Start_IT+0x64>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d010      	beq.n	800365c <HAL_TIM_Base_Start_IT+0x44>
 800363a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800363e:	d00d      	beq.n	800365c <HAL_TIM_Base_Start_IT+0x44>
 8003640:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003644:	4293      	cmp	r3, r2
 8003646:	d009      	beq.n	800365c <HAL_TIM_Base_Start_IT+0x44>
 8003648:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800364c:	4293      	cmp	r3, r2
 800364e:	d005      	beq.n	800365c <HAL_TIM_Base_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	f042 0201 	orr.w	r2, r2, #1
 8003656:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003658:	2000      	movs	r0, #0
 800365a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800365c:	689a      	ldr	r2, [r3, #8]
 800365e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003662:	2a06      	cmp	r2, #6
 8003664:	d007      	beq.n	8003676 <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	f042 0201 	orr.w	r2, r2, #1
 800366c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800366e:	2000      	movs	r0, #0
 8003670:	4770      	bx	lr
    return HAL_ERROR;
 8003672:	2001      	movs	r0, #1
 8003674:	4770      	bx	lr
  return HAL_OK;
 8003676:	2000      	movs	r0, #0
}
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	40012c00 	.word	0x40012c00

08003680 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003680:	6802      	ldr	r2, [r0, #0]
 8003682:	68d3      	ldr	r3, [r2, #12]
 8003684:	f023 0301 	bic.w	r3, r3, #1
 8003688:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 800368a:	6803      	ldr	r3, [r0, #0]
 800368c:	6a19      	ldr	r1, [r3, #32]
 800368e:	f241 1211 	movw	r2, #4369	; 0x1111
 8003692:	4211      	tst	r1, r2
 8003694:	d108      	bne.n	80036a8 <HAL_TIM_Base_Stop_IT+0x28>
 8003696:	6a19      	ldr	r1, [r3, #32]
 8003698:	f240 4244 	movw	r2, #1092	; 0x444
 800369c:	4211      	tst	r1, r2
 800369e:	d103      	bne.n	80036a8 <HAL_TIM_Base_Stop_IT+0x28>
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	f022 0201 	bic.w	r2, r2, #1
 80036a6:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80036a8:	2301      	movs	r3, #1
 80036aa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 80036ae:	2000      	movs	r0, #0
 80036b0:	4770      	bx	lr

080036b2 <HAL_TIM_PWM_MspInit>:
}
 80036b2:	4770      	bx	lr

080036b4 <HAL_TIM_OC_DelayElapsedCallback>:
}
 80036b4:	4770      	bx	lr

080036b6 <HAL_TIM_IC_CaptureCallback>:
}
 80036b6:	4770      	bx	lr

080036b8 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80036b8:	4770      	bx	lr

080036ba <HAL_TIM_TriggerCallback>:
}
 80036ba:	4770      	bx	lr

080036bc <HAL_TIM_IRQHandler>:
{
 80036bc:	b510      	push	{r4, lr}
 80036be:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036c0:	6803      	ldr	r3, [r0, #0]
 80036c2:	691a      	ldr	r2, [r3, #16]
 80036c4:	f012 0f02 	tst.w	r2, #2
 80036c8:	d011      	beq.n	80036ee <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036ca:	68da      	ldr	r2, [r3, #12]
 80036cc:	f012 0f02 	tst.w	r2, #2
 80036d0:	d00d      	beq.n	80036ee <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036d2:	f06f 0202 	mvn.w	r2, #2
 80036d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036d8:	2301      	movs	r3, #1
 80036da:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036dc:	6803      	ldr	r3, [r0, #0]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	f013 0f03 	tst.w	r3, #3
 80036e4:	d070      	beq.n	80037c8 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80036e6:	f7ff ffe6 	bl	80036b6 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ea:	2300      	movs	r3, #0
 80036ec:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036ee:	6823      	ldr	r3, [r4, #0]
 80036f0:	691a      	ldr	r2, [r3, #16]
 80036f2:	f012 0f04 	tst.w	r2, #4
 80036f6:	d012      	beq.n	800371e <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036f8:	68da      	ldr	r2, [r3, #12]
 80036fa:	f012 0f04 	tst.w	r2, #4
 80036fe:	d00e      	beq.n	800371e <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003700:	f06f 0204 	mvn.w	r2, #4
 8003704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003706:	2302      	movs	r3, #2
 8003708:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800370a:	6823      	ldr	r3, [r4, #0]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003712:	d05f      	beq.n	80037d4 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8003714:	4620      	mov	r0, r4
 8003716:	f7ff ffce 	bl	80036b6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800371a:	2300      	movs	r3, #0
 800371c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800371e:	6823      	ldr	r3, [r4, #0]
 8003720:	691a      	ldr	r2, [r3, #16]
 8003722:	f012 0f08 	tst.w	r2, #8
 8003726:	d012      	beq.n	800374e <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003728:	68da      	ldr	r2, [r3, #12]
 800372a:	f012 0f08 	tst.w	r2, #8
 800372e:	d00e      	beq.n	800374e <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003730:	f06f 0208 	mvn.w	r2, #8
 8003734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003736:	2304      	movs	r3, #4
 8003738:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800373a:	6823      	ldr	r3, [r4, #0]
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	f013 0f03 	tst.w	r3, #3
 8003742:	d04e      	beq.n	80037e2 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8003744:	4620      	mov	r0, r4
 8003746:	f7ff ffb6 	bl	80036b6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800374a:	2300      	movs	r3, #0
 800374c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800374e:	6823      	ldr	r3, [r4, #0]
 8003750:	691a      	ldr	r2, [r3, #16]
 8003752:	f012 0f10 	tst.w	r2, #16
 8003756:	d012      	beq.n	800377e <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	f012 0f10 	tst.w	r2, #16
 800375e:	d00e      	beq.n	800377e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003760:	f06f 0210 	mvn.w	r2, #16
 8003764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003766:	2308      	movs	r3, #8
 8003768:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800376a:	6823      	ldr	r3, [r4, #0]
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003772:	d03d      	beq.n	80037f0 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8003774:	4620      	mov	r0, r4
 8003776:	f7ff ff9e 	bl	80036b6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800377a:	2300      	movs	r3, #0
 800377c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800377e:	6823      	ldr	r3, [r4, #0]
 8003780:	691a      	ldr	r2, [r3, #16]
 8003782:	f012 0f01 	tst.w	r2, #1
 8003786:	d003      	beq.n	8003790 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003788:	68da      	ldr	r2, [r3, #12]
 800378a:	f012 0f01 	tst.w	r2, #1
 800378e:	d136      	bne.n	80037fe <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003790:	6823      	ldr	r3, [r4, #0]
 8003792:	691a      	ldr	r2, [r3, #16]
 8003794:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003798:	d003      	beq.n	80037a2 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800379a:	68da      	ldr	r2, [r3, #12]
 800379c:	f012 0f80 	tst.w	r2, #128	; 0x80
 80037a0:	d134      	bne.n	800380c <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037a2:	6823      	ldr	r3, [r4, #0]
 80037a4:	691a      	ldr	r2, [r3, #16]
 80037a6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80037aa:	d003      	beq.n	80037b4 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037ac:	68da      	ldr	r2, [r3, #12]
 80037ae:	f012 0f40 	tst.w	r2, #64	; 0x40
 80037b2:	d132      	bne.n	800381a <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037b4:	6823      	ldr	r3, [r4, #0]
 80037b6:	691a      	ldr	r2, [r3, #16]
 80037b8:	f012 0f20 	tst.w	r2, #32
 80037bc:	d003      	beq.n	80037c6 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037be:	68da      	ldr	r2, [r3, #12]
 80037c0:	f012 0f20 	tst.w	r2, #32
 80037c4:	d130      	bne.n	8003828 <HAL_TIM_IRQHandler+0x16c>
}
 80037c6:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037c8:	f7ff ff74 	bl	80036b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037cc:	4620      	mov	r0, r4
 80037ce:	f7ff ff73 	bl	80036b8 <HAL_TIM_PWM_PulseFinishedCallback>
 80037d2:	e78a      	b.n	80036ea <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037d4:	4620      	mov	r0, r4
 80037d6:	f7ff ff6d 	bl	80036b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037da:	4620      	mov	r0, r4
 80037dc:	f7ff ff6c 	bl	80036b8 <HAL_TIM_PWM_PulseFinishedCallback>
 80037e0:	e79b      	b.n	800371a <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037e2:	4620      	mov	r0, r4
 80037e4:	f7ff ff66 	bl	80036b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e8:	4620      	mov	r0, r4
 80037ea:	f7ff ff65 	bl	80036b8 <HAL_TIM_PWM_PulseFinishedCallback>
 80037ee:	e7ac      	b.n	800374a <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037f0:	4620      	mov	r0, r4
 80037f2:	f7ff ff5f 	bl	80036b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f6:	4620      	mov	r0, r4
 80037f8:	f7ff ff5e 	bl	80036b8 <HAL_TIM_PWM_PulseFinishedCallback>
 80037fc:	e7bd      	b.n	800377a <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037fe:	f06f 0201 	mvn.w	r2, #1
 8003802:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003804:	4620      	mov	r0, r4
 8003806:	f7fe f9f7 	bl	8001bf8 <HAL_TIM_PeriodElapsedCallback>
 800380a:	e7c1      	b.n	8003790 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800380c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003810:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003812:	4620      	mov	r0, r4
 8003814:	f000 fa49 	bl	8003caa <HAL_TIMEx_BreakCallback>
 8003818:	e7c3      	b.n	80037a2 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800381a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800381e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003820:	4620      	mov	r0, r4
 8003822:	f7ff ff4a 	bl	80036ba <HAL_TIM_TriggerCallback>
 8003826:	e7c5      	b.n	80037b4 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003828:	f06f 0220 	mvn.w	r2, #32
 800382c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800382e:	4620      	mov	r0, r4
 8003830:	f000 fa3a 	bl	8003ca8 <HAL_TIMEx_CommutCallback>
}
 8003834:	e7c7      	b.n	80037c6 <HAL_TIM_IRQHandler+0x10a>
	...

08003838 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003838:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800383a:	4a25      	ldr	r2, [pc, #148]	; (80038d0 <TIM_Base_SetConfig+0x98>)
 800383c:	4290      	cmp	r0, r2
 800383e:	d014      	beq.n	800386a <TIM_Base_SetConfig+0x32>
 8003840:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003844:	d02b      	beq.n	800389e <TIM_Base_SetConfig+0x66>
 8003846:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800384a:	4290      	cmp	r0, r2
 800384c:	d022      	beq.n	8003894 <TIM_Base_SetConfig+0x5c>
 800384e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003852:	4290      	cmp	r0, r2
 8003854:	d037      	beq.n	80038c6 <TIM_Base_SetConfig+0x8e>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003856:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800385a:	694a      	ldr	r2, [r1, #20]
 800385c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800385e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003860:	688b      	ldr	r3, [r1, #8]
 8003862:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003864:	680b      	ldr	r3, [r1, #0]
 8003866:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003868:	e02a      	b.n	80038c0 <TIM_Base_SetConfig+0x88>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800386a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800386e:	684a      	ldr	r2, [r1, #4]
 8003870:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8003872:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003876:	68ca      	ldr	r2, [r1, #12]
 8003878:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800387a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800387e:	694a      	ldr	r2, [r1, #20]
 8003880:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003882:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003884:	688b      	ldr	r3, [r1, #8]
 8003886:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003888:	680b      	ldr	r3, [r1, #0]
 800388a:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800388c:	690a      	ldr	r2, [r1, #16]
 800388e:	4b10      	ldr	r3, [pc, #64]	; (80038d0 <TIM_Base_SetConfig+0x98>)
 8003890:	631a      	str	r2, [r3, #48]	; 0x30
 8003892:	e015      	b.n	80038c0 <TIM_Base_SetConfig+0x88>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003898:	684a      	ldr	r2, [r1, #4]
 800389a:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800389c:	e003      	b.n	80038a6 <TIM_Base_SetConfig+0x6e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800389e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80038a2:	684a      	ldr	r2, [r1, #4]
 80038a4:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80038a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038aa:	68ca      	ldr	r2, [r1, #12]
 80038ac:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038b2:	694a      	ldr	r2, [r1, #20]
 80038b4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80038b6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038b8:	688b      	ldr	r3, [r1, #8]
 80038ba:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80038bc:	680b      	ldr	r3, [r1, #0]
 80038be:	6283      	str	r3, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80038c0:	2301      	movs	r3, #1
 80038c2:	6143      	str	r3, [r0, #20]
}
 80038c4:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80038ca:	684a      	ldr	r2, [r1, #4]
 80038cc:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038ce:	e7ea      	b.n	80038a6 <TIM_Base_SetConfig+0x6e>
 80038d0:	40012c00 	.word	0x40012c00

080038d4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80038d4:	b340      	cbz	r0, 8003928 <HAL_TIM_Base_Init+0x54>
{
 80038d6:	b510      	push	{r4, lr}
 80038d8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80038da:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80038de:	b1f3      	cbz	r3, 800391e <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80038e0:	2302      	movs	r3, #2
 80038e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038e6:	4621      	mov	r1, r4
 80038e8:	f851 0b04 	ldr.w	r0, [r1], #4
 80038ec:	f7ff ffa4 	bl	8003838 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038f0:	2301      	movs	r3, #1
 80038f2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038f6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80038fa:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80038fe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003902:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003906:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800390a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800390e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003912:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003916:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800391a:	2000      	movs	r0, #0
}
 800391c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800391e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003922:	f7fe fad9 	bl	8001ed8 <HAL_TIM_Base_MspInit>
 8003926:	e7db      	b.n	80038e0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003928:	2001      	movs	r0, #1
}
 800392a:	4770      	bx	lr

0800392c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800392c:	b340      	cbz	r0, 8003980 <HAL_TIM_PWM_Init+0x54>
{
 800392e:	b510      	push	{r4, lr}
 8003930:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003932:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003936:	b1f3      	cbz	r3, 8003976 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003938:	2302      	movs	r3, #2
 800393a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800393e:	4621      	mov	r1, r4
 8003940:	f851 0b04 	ldr.w	r0, [r1], #4
 8003944:	f7ff ff78 	bl	8003838 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003948:	2301      	movs	r3, #1
 800394a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800394e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003952:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003956:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800395a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800395e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003962:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003966:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800396a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800396e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003972:	2000      	movs	r0, #0
}
 8003974:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003976:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800397a:	f7ff fe9a 	bl	80036b2 <HAL_TIM_PWM_MspInit>
 800397e:	e7db      	b.n	8003938 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8003980:	2001      	movs	r0, #1
}
 8003982:	4770      	bx	lr

08003984 <TIM_OC2_SetConfig>:
{
 8003984:	b470      	push	{r4, r5, r6}
  tmpccer = TIMx->CCER;
 8003986:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003988:	6a02      	ldr	r2, [r0, #32]
 800398a:	f022 0210 	bic.w	r2, r2, #16
 800398e:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003990:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003992:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003994:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003998:	680d      	ldr	r5, [r1, #0]
 800399a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800399e:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039a2:	688d      	ldr	r5, [r1, #8]
 80039a4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039a8:	4d0c      	ldr	r5, [pc, #48]	; (80039dc <TIM_OC2_SetConfig+0x58>)
 80039aa:	42a8      	cmp	r0, r5
 80039ac:	d006      	beq.n	80039bc <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 80039ae:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80039b0:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80039b2:	684a      	ldr	r2, [r1, #4]
 80039b4:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80039b6:	6203      	str	r3, [r0, #32]
}
 80039b8:	bc70      	pop	{r4, r5, r6}
 80039ba:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 80039bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039c0:	68cd      	ldr	r5, [r1, #12]
 80039c2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80039c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039ca:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039ce:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039d0:	698e      	ldr	r6, [r1, #24]
 80039d2:	4335      	orrs	r5, r6
 80039d4:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 80039d8:	e7e9      	b.n	80039ae <TIM_OC2_SetConfig+0x2a>
 80039da:	bf00      	nop
 80039dc:	40012c00 	.word	0x40012c00

080039e0 <HAL_TIM_PWM_ConfigChannel>:
{
 80039e0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80039e2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d066      	beq.n	8003ab8 <HAL_TIM_PWM_ConfigChannel+0xd8>
 80039ea:	4604      	mov	r4, r0
 80039ec:	460d      	mov	r5, r1
 80039ee:	2301      	movs	r3, #1
 80039f0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80039f4:	2a0c      	cmp	r2, #12
 80039f6:	d85a      	bhi.n	8003aae <HAL_TIM_PWM_ConfigChannel+0xce>
 80039f8:	e8df f002 	tbb	[pc, r2]
 80039fc:	59595907 	.word	0x59595907
 8003a00:	5959591b 	.word	0x5959591b
 8003a04:	59595930 	.word	0x59595930
 8003a08:	44          	.byte	0x44
 8003a09:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a0a:	6800      	ldr	r0, [r0, #0]
 8003a0c:	f7ff fd8a 	bl	8003524 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a10:	6822      	ldr	r2, [r4, #0]
 8003a12:	6993      	ldr	r3, [r2, #24]
 8003a14:	f043 0308 	orr.w	r3, r3, #8
 8003a18:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a1a:	6822      	ldr	r2, [r4, #0]
 8003a1c:	6993      	ldr	r3, [r2, #24]
 8003a1e:	f023 0304 	bic.w	r3, r3, #4
 8003a22:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a24:	6822      	ldr	r2, [r4, #0]
 8003a26:	6993      	ldr	r3, [r2, #24]
 8003a28:	6929      	ldr	r1, [r5, #16]
 8003a2a:	430b      	orrs	r3, r1
 8003a2c:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003a2e:	2000      	movs	r0, #0
      break;
 8003a30:	e03e      	b.n	8003ab0 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a32:	6800      	ldr	r0, [r0, #0]
 8003a34:	f7ff ffa6 	bl	8003984 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a38:	6822      	ldr	r2, [r4, #0]
 8003a3a:	6993      	ldr	r3, [r2, #24]
 8003a3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003a40:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a42:	6822      	ldr	r2, [r4, #0]
 8003a44:	6993      	ldr	r3, [r2, #24]
 8003a46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a4a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a4c:	6822      	ldr	r2, [r4, #0]
 8003a4e:	6993      	ldr	r3, [r2, #24]
 8003a50:	6929      	ldr	r1, [r5, #16]
 8003a52:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003a56:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003a58:	2000      	movs	r0, #0
      break;
 8003a5a:	e029      	b.n	8003ab0 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a5c:	6800      	ldr	r0, [r0, #0]
 8003a5e:	f7ff fd8b 	bl	8003578 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a62:	6822      	ldr	r2, [r4, #0]
 8003a64:	69d3      	ldr	r3, [r2, #28]
 8003a66:	f043 0308 	orr.w	r3, r3, #8
 8003a6a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a6c:	6822      	ldr	r2, [r4, #0]
 8003a6e:	69d3      	ldr	r3, [r2, #28]
 8003a70:	f023 0304 	bic.w	r3, r3, #4
 8003a74:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a76:	6822      	ldr	r2, [r4, #0]
 8003a78:	69d3      	ldr	r3, [r2, #28]
 8003a7a:	6929      	ldr	r1, [r5, #16]
 8003a7c:	430b      	orrs	r3, r1
 8003a7e:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003a80:	2000      	movs	r0, #0
      break;
 8003a82:	e015      	b.n	8003ab0 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a84:	6800      	ldr	r0, [r0, #0]
 8003a86:	f7ff fda3 	bl	80035d0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a8a:	6822      	ldr	r2, [r4, #0]
 8003a8c:	69d3      	ldr	r3, [r2, #28]
 8003a8e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003a92:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a94:	6822      	ldr	r2, [r4, #0]
 8003a96:	69d3      	ldr	r3, [r2, #28]
 8003a98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a9c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a9e:	6822      	ldr	r2, [r4, #0]
 8003aa0:	69d3      	ldr	r3, [r2, #28]
 8003aa2:	6929      	ldr	r1, [r5, #16]
 8003aa4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003aa8:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003aaa:	2000      	movs	r0, #0
      break;
 8003aac:	e000      	b.n	8003ab0 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8003aae:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003ab6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8003ab8:	2002      	movs	r0, #2
 8003aba:	e7fc      	b.n	8003ab6 <HAL_TIM_PWM_ConfigChannel+0xd6>

08003abc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003abc:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003abe:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ac0:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003aca:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ace:	6082      	str	r2, [r0, #8]
}
 8003ad0:	bc10      	pop	{r4}
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003ad4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	f000 80ae 	beq.w	8003c3a <HAL_TIM_ConfigClockSource+0x166>
{
 8003ade:	b570      	push	{r4, r5, r6, lr}
 8003ae0:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003ae8:	2302      	movs	r3, #2
 8003aea:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003aee:	6802      	ldr	r2, [r0, #0]
 8003af0:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003af2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003af6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003afa:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003afc:	680b      	ldr	r3, [r1, #0]
 8003afe:	2b60      	cmp	r3, #96	; 0x60
 8003b00:	d060      	beq.n	8003bc4 <HAL_TIM_ConfigClockSource+0xf0>
 8003b02:	d83d      	bhi.n	8003b80 <HAL_TIM_ConfigClockSource+0xac>
 8003b04:	2b40      	cmp	r3, #64	; 0x40
 8003b06:	d079      	beq.n	8003bfc <HAL_TIM_ConfigClockSource+0x128>
 8003b08:	d91c      	bls.n	8003b44 <HAL_TIM_ConfigClockSource+0x70>
 8003b0a:	2b50      	cmp	r3, #80	; 0x50
 8003b0c:	d136      	bne.n	8003b7c <HAL_TIM_ConfigClockSource+0xa8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b0e:	6803      	ldr	r3, [r0, #0]
 8003b10:	6848      	ldr	r0, [r1, #4]
 8003b12:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8003b14:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b16:	6a1a      	ldr	r2, [r3, #32]
 8003b18:	f022 0201 	bic.w	r2, r2, #1
 8003b1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b1e:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b20:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b24:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b28:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8003b2c:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8003b2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b30:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b32:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8003b34:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b3a:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8003b3e:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003b40:	2000      	movs	r0, #0
}
 8003b42:	e012      	b.n	8003b6a <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8003b44:	2b20      	cmp	r3, #32
 8003b46:	d002      	beq.n	8003b4e <HAL_TIM_ConfigClockSource+0x7a>
 8003b48:	d90b      	bls.n	8003b62 <HAL_TIM_ConfigClockSource+0x8e>
 8003b4a:	2b30      	cmp	r3, #48	; 0x30
 8003b4c:	d114      	bne.n	8003b78 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b4e:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8003b50:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b52:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b56:	4313      	orrs	r3, r2
 8003b58:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8003b5c:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003b5e:	2000      	movs	r0, #0
}
 8003b60:	e003      	b.n	8003b6a <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8003b62:	f033 0210 	bics.w	r2, r3, #16
 8003b66:	d0f2      	beq.n	8003b4e <HAL_TIM_ConfigClockSource+0x7a>
 8003b68:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003b70:	2300      	movs	r3, #0
 8003b72:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003b76:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8003b78:	2001      	movs	r0, #1
 8003b7a:	e7f6      	b.n	8003b6a <HAL_TIM_ConfigClockSource+0x96>
 8003b7c:	2001      	movs	r0, #1
 8003b7e:	e7f4      	b.n	8003b6a <HAL_TIM_ConfigClockSource+0x96>
 8003b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b84:	d055      	beq.n	8003c32 <HAL_TIM_ConfigClockSource+0x15e>
 8003b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b8a:	d10c      	bne.n	8003ba6 <HAL_TIM_ConfigClockSource+0xd2>
      TIM_ETR_SetConfig(htim->Instance,
 8003b8c:	68cb      	ldr	r3, [r1, #12]
 8003b8e:	684a      	ldr	r2, [r1, #4]
 8003b90:	6889      	ldr	r1, [r1, #8]
 8003b92:	6800      	ldr	r0, [r0, #0]
 8003b94:	f7ff ff92 	bl	8003abc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b98:	6822      	ldr	r2, [r4, #0]
 8003b9a:	6893      	ldr	r3, [r2, #8]
 8003b9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ba0:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003ba2:	2000      	movs	r0, #0
      break;
 8003ba4:	e7e1      	b.n	8003b6a <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8003ba6:	2b70      	cmp	r3, #112	; 0x70
 8003ba8:	d145      	bne.n	8003c36 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ETR_SetConfig(htim->Instance,
 8003baa:	68cb      	ldr	r3, [r1, #12]
 8003bac:	684a      	ldr	r2, [r1, #4]
 8003bae:	6889      	ldr	r1, [r1, #8]
 8003bb0:	6800      	ldr	r0, [r0, #0]
 8003bb2:	f7ff ff83 	bl	8003abc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003bb6:	6822      	ldr	r2, [r4, #0]
 8003bb8:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003bbe:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003bc0:	2000      	movs	r0, #0
      break;
 8003bc2:	e7d2      	b.n	8003b6a <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bc4:	6803      	ldr	r3, [r0, #0]
 8003bc6:	684d      	ldr	r5, [r1, #4]
 8003bc8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8003bca:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bcc:	6a18      	ldr	r0, [r3, #32]
 8003bce:	f020 0010 	bic.w	r0, r0, #16
 8003bd2:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bd4:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bd6:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bda:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bde:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003be2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8003be6:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8003be8:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bea:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8003bec:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bf2:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8003bf6:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003bf8:	2000      	movs	r0, #0
}
 8003bfa:	e7b6      	b.n	8003b6a <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bfc:	6803      	ldr	r3, [r0, #0]
 8003bfe:	6848      	ldr	r0, [r1, #4]
 8003c00:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8003c02:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c04:	6a1a      	ldr	r2, [r3, #32]
 8003c06:	f022 0201 	bic.w	r2, r2, #1
 8003c0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c0c:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c0e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c12:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c16:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8003c1a:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8003c1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c1e:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c20:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8003c22:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c28:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8003c2c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003c2e:	2000      	movs	r0, #0
}
 8003c30:	e79b      	b.n	8003b6a <HAL_TIM_ConfigClockSource+0x96>
  HAL_StatusTypeDef status = HAL_OK;
 8003c32:	2000      	movs	r0, #0
 8003c34:	e799      	b.n	8003b6a <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8003c36:	2001      	movs	r0, #1
 8003c38:	e797      	b.n	8003b6a <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 8003c3a:	2002      	movs	r0, #2
}
 8003c3c:	4770      	bx	lr
	...

08003c40 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c40:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d02b      	beq.n	8003ca0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 8003c48:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c50:	2302      	movs	r3, #2
 8003c52:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c56:	6804      	ldr	r4, [r0, #0]
 8003c58:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c5a:	68a2      	ldr	r2, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c60:	680d      	ldr	r5, [r1, #0]
 8003c62:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c64:	6063      	str	r3, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c66:	6803      	ldr	r3, [r0, #0]
 8003c68:	4c0e      	ldr	r4, [pc, #56]	; (8003ca4 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8003c6a:	42a3      	cmp	r3, r4
 8003c6c:	d00a      	beq.n	8003c84 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8003c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c72:	d007      	beq.n	8003c84 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8003c74:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8003c78:	42a3      	cmp	r3, r4
 8003c7a:	d003      	beq.n	8003c84 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8003c7c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003c80:	42a3      	cmp	r3, r4
 8003c82:	d104      	bne.n	8003c8e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c88:	6849      	ldr	r1, [r1, #4]
 8003c8a:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c94:	2300      	movs	r3, #0
 8003c96:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003c9a:	4618      	mov	r0, r3
}
 8003c9c:	bc30      	pop	{r4, r5}
 8003c9e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003ca0:	2002      	movs	r0, #2
}
 8003ca2:	4770      	bx	lr
 8003ca4:	40012c00 	.word	0x40012c00

08003ca8 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ca8:	4770      	bx	lr

08003caa <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003caa:	4770      	bx	lr

08003cac <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cac:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cae:	f102 030c 	add.w	r3, r2, #12
 8003cb2:	e853 3f00 	ldrex	r3, [r3]
 8003cb6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cba:	320c      	adds	r2, #12
 8003cbc:	e842 3100 	strex	r1, r3, [r2]
 8003cc0:	2900      	cmp	r1, #0
 8003cc2:	d1f3      	bne.n	8003cac <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cc4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc6:	f102 0314 	add.w	r3, r2, #20
 8003cca:	e853 3f00 	ldrex	r3, [r3]
 8003cce:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd2:	3214      	adds	r2, #20
 8003cd4:	e842 3100 	strex	r1, r3, [r2]
 8003cd8:	2900      	cmp	r1, #0
 8003cda:	d1f3      	bne.n	8003cc4 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cdc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d005      	beq.n	8003cee <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ce2:	2320      	movs	r3, #32
 8003ce4:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	6303      	str	r3, [r0, #48]	; 0x30
}
 8003cec:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cee:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf0:	f102 030c 	add.w	r3, r2, #12
 8003cf4:	e853 3f00 	ldrex	r3, [r3]
 8003cf8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfc:	320c      	adds	r2, #12
 8003cfe:	e842 3100 	strex	r1, r3, [r2]
 8003d02:	2900      	cmp	r1, #0
 8003d04:	d1f3      	bne.n	8003cee <UART_EndRxTransfer+0x42>
 8003d06:	e7ec      	b.n	8003ce2 <UART_EndRxTransfer+0x36>

08003d08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d08:	b510      	push	{r4, lr}
 8003d0a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d0c:	6802      	ldr	r2, [r0, #0]
 8003d0e:	6913      	ldr	r3, [r2, #16]
 8003d10:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003d14:	68c1      	ldr	r1, [r0, #12]
 8003d16:	430b      	orrs	r3, r1
 8003d18:	6113      	str	r3, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
  MODIFY_REG(huart->Instance->CR1,
 8003d1a:	6801      	ldr	r1, [r0, #0]
 8003d1c:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003d1e:	6883      	ldr	r3, [r0, #8]
 8003d20:	6900      	ldr	r0, [r0, #16]
 8003d22:	4303      	orrs	r3, r0
 8003d24:	6960      	ldr	r0, [r4, #20]
 8003d26:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8003d28:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8003d2c:	f022 020c 	bic.w	r2, r2, #12
 8003d30:	4313      	orrs	r3, r2
 8003d32:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d34:	6822      	ldr	r2, [r4, #0]
 8003d36:	6953      	ldr	r3, [r2, #20]
 8003d38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d3c:	69a1      	ldr	r1, [r4, #24]
 8003d3e:	430b      	orrs	r3, r1
 8003d40:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8003d42:	6822      	ldr	r2, [r4, #0]
 8003d44:	4b11      	ldr	r3, [pc, #68]	; (8003d8c <UART_SetConfig+0x84>)
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d01b      	beq.n	8003d82 <UART_SetConfig+0x7a>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003d4a:	f7ff fb1f 	bl	800338c <HAL_RCC_GetPCLK1Freq>
 8003d4e:	4603      	mov	r3, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d50:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003d54:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003d58:	6862      	ldr	r2, [r4, #4]
 8003d5a:	0092      	lsls	r2, r2, #2
 8003d5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d60:	6820      	ldr	r0, [r4, #0]
 8003d62:	490b      	ldr	r1, [pc, #44]	; (8003d90 <UART_SetConfig+0x88>)
 8003d64:	fba1 4203 	umull	r4, r2, r1, r3
 8003d68:	0952      	lsrs	r2, r2, #5
 8003d6a:	2464      	movs	r4, #100	; 0x64
 8003d6c:	fb04 3312 	mls	r3, r4, r2, r3
 8003d70:	011b      	lsls	r3, r3, #4
 8003d72:	3332      	adds	r3, #50	; 0x32
 8003d74:	fba1 1303 	umull	r1, r3, r1, r3
 8003d78:	0112      	lsls	r2, r2, #4
 8003d7a:	eb02 1353 	add.w	r3, r2, r3, lsr #5
 8003d7e:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8003d80:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8003d82:	f7ff fb13 	bl	80033ac <HAL_RCC_GetPCLK2Freq>
 8003d86:	4603      	mov	r3, r0
 8003d88:	e7e2      	b.n	8003d50 <UART_SetConfig+0x48>
 8003d8a:	bf00      	nop
 8003d8c:	40013800 	.word	0x40013800
 8003d90:	51eb851f 	.word	0x51eb851f

08003d94 <HAL_UART_Init>:
  if (huart == NULL)
 8003d94:	b360      	cbz	r0, 8003df0 <HAL_UART_Init+0x5c>
{
 8003d96:	b510      	push	{r4, lr}
 8003d98:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8003d9a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003d9e:	b313      	cbz	r3, 8003de6 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8003da0:	2324      	movs	r3, #36	; 0x24
 8003da2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8003da6:	6822      	ldr	r2, [r4, #0]
 8003da8:	68d3      	ldr	r3, [r2, #12]
 8003daa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dae:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003db0:	4620      	mov	r0, r4
 8003db2:	f7ff ffa9 	bl	8003d08 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003db6:	6822      	ldr	r2, [r4, #0]
 8003db8:	6913      	ldr	r3, [r2, #16]
 8003dba:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003dbe:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dc0:	6822      	ldr	r2, [r4, #0]
 8003dc2:	6953      	ldr	r3, [r2, #20]
 8003dc4:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8003dc8:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8003dca:	6822      	ldr	r2, [r4, #0]
 8003dcc:	68d3      	ldr	r3, [r2, #12]
 8003dce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003dd2:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd4:	2000      	movs	r0, #0
 8003dd6:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003dd8:	2320      	movs	r3, #32
 8003dda:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003dde:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003de2:	6360      	str	r0, [r4, #52]	; 0x34
}
 8003de4:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003de6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 8003dea:	f7fe f8e5 	bl	8001fb8 <HAL_UART_MspInit>
 8003dee:	e7d7      	b.n	8003da0 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8003df0:	2001      	movs	r0, #1
}
 8003df2:	4770      	bx	lr

08003df4 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8003df4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b20      	cmp	r3, #32
 8003dfc:	d110      	bne.n	8003e20 <HAL_UART_Transmit_IT+0x2c>
    if ((pData == NULL) || (Size == 0U))
 8003dfe:	b189      	cbz	r1, 8003e24 <HAL_UART_Transmit_IT+0x30>
 8003e00:	b192      	cbz	r2, 8003e28 <HAL_UART_Transmit_IT+0x34>
    huart->pTxBuffPtr = pData;
 8003e02:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8003e04:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e06:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	6443      	str	r3, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e0c:	2221      	movs	r2, #33	; 0x21
 8003e0e:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003e12:	6801      	ldr	r1, [r0, #0]
 8003e14:	68ca      	ldr	r2, [r1, #12]
 8003e16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e1a:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	4770      	bx	lr
    return HAL_BUSY;
 8003e20:	2002      	movs	r0, #2
 8003e22:	4770      	bx	lr
      return HAL_ERROR;
 8003e24:	2001      	movs	r0, #1
 8003e26:	4770      	bx	lr
 8003e28:	2001      	movs	r0, #1
}
 8003e2a:	4770      	bx	lr

08003e2c <HAL_UART_ErrorCallback>:
}
 8003e2c:	4770      	bx	lr

08003e2e <UART_DMAAbortOnError>:
{
 8003e2e:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e30:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8003e32:	2300      	movs	r3, #0
 8003e34:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e36:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8003e38:	f7ff fff8 	bl	8003e2c <HAL_UART_ErrorCallback>
}
 8003e3c:	bd08      	pop	{r3, pc}

08003e3e <HAL_UART_AbortReceiveCpltCallback>:
}
 8003e3e:	4770      	bx	lr

08003e40 <HAL_UART_AbortReceive_IT>:
{
 8003e40:	b510      	push	{r4, lr}
 8003e42:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e44:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e46:	f102 030c 	add.w	r3, r2, #12
 8003e4a:	e853 3f00 	ldrex	r3, [r3]
 8003e4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e52:	320c      	adds	r2, #12
 8003e54:	e842 3100 	strex	r1, r3, [r2]
 8003e58:	2900      	cmp	r1, #0
 8003e5a:	d1f3      	bne.n	8003e44 <HAL_UART_AbortReceive_IT+0x4>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e5c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5e:	f102 0314 	add.w	r3, r2, #20
 8003e62:	e853 3f00 	ldrex	r3, [r3]
 8003e66:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6a:	3214      	adds	r2, #20
 8003e6c:	e842 3100 	strex	r1, r3, [r2]
 8003e70:	2900      	cmp	r1, #0
 8003e72:	d1f3      	bne.n	8003e5c <HAL_UART_AbortReceive_IT+0x1c>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e74:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d01c      	beq.n	8003eb4 <HAL_UART_AbortReceive_IT+0x74>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e7a:	6823      	ldr	r3, [r4, #0]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003e82:	d02e      	beq.n	8003ee2 <HAL_UART_AbortReceive_IT+0xa2>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e84:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e86:	f102 0314 	add.w	r3, r2, #20
 8003e8a:	e853 3f00 	ldrex	r3, [r3]
 8003e8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e92:	3214      	adds	r2, #20
 8003e94:	e842 3100 	strex	r1, r3, [r2]
 8003e98:	2900      	cmp	r1, #0
 8003e9a:	d1f3      	bne.n	8003e84 <HAL_UART_AbortReceive_IT+0x44>
    if (huart->hdmarx != NULL)
 8003e9c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003e9e:	b1b3      	cbz	r3, 8003ece <HAL_UART_AbortReceive_IT+0x8e>
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8003ea0:	4a15      	ldr	r2, [pc, #84]	; (8003ef8 <HAL_UART_AbortReceive_IT+0xb8>)
 8003ea2:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ea4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003ea6:	f7fe fd3d 	bl	8002924 <HAL_DMA_Abort_IT>
 8003eaa:	b318      	cbz	r0, 8003ef4 <HAL_UART_AbortReceive_IT+0xb4>
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003eac:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003eae:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003eb0:	4798      	blx	r3
 8003eb2:	e01f      	b.n	8003ef4 <HAL_UART_AbortReceive_IT+0xb4>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8003eb4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb6:	f102 030c 	add.w	r3, r2, #12
 8003eba:	e853 3f00 	ldrex	r3, [r3]
 8003ebe:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec2:	320c      	adds	r2, #12
 8003ec4:	e842 3100 	strex	r1, r3, [r2]
 8003ec8:	2900      	cmp	r1, #0
 8003eca:	d1f3      	bne.n	8003eb4 <HAL_UART_AbortReceive_IT+0x74>
 8003ecc:	e7d5      	b.n	8003e7a <HAL_UART_AbortReceive_IT+0x3a>
      huart->RxXferCount = 0x00U;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	85e3      	strh	r3, [r4, #46]	; 0x2e
      huart->RxState = HAL_UART_STATE_READY;
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ed8:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_UART_AbortReceiveCpltCallback(huart);
 8003eda:	4620      	mov	r0, r4
 8003edc:	f7ff ffaf 	bl	8003e3e <HAL_UART_AbortReceiveCpltCallback>
 8003ee0:	e008      	b.n	8003ef4 <HAL_UART_AbortReceive_IT+0xb4>
    huart->RxXferCount = 0x00U;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	85e3      	strh	r3, [r4, #46]	; 0x2e
    huart->RxState = HAL_UART_STATE_READY;
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eec:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_UART_AbortReceiveCpltCallback(huart);
 8003eee:	4620      	mov	r0, r4
 8003ef0:	f7ff ffa5 	bl	8003e3e <HAL_UART_AbortReceiveCpltCallback>
}
 8003ef4:	2000      	movs	r0, #0
 8003ef6:	bd10      	pop	{r4, pc}
 8003ef8:	08003efd 	.word	0x08003efd

08003efc <UART_DMARxOnlyAbortCallback>:
{
 8003efc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003efe:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8003f00:	2300      	movs	r3, #0
 8003f02:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->RxState = HAL_UART_STATE_READY;
 8003f04:	2220      	movs	r2, #32
 8003f06:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f0a:	6303      	str	r3, [r0, #48]	; 0x30
  HAL_UART_AbortReceiveCpltCallback(huart);
 8003f0c:	f7ff ff97 	bl	8003e3e <HAL_UART_AbortReceiveCpltCallback>
}
 8003f10:	bd08      	pop	{r3, pc}

08003f12 <HAL_UARTEx_RxEventCallback>:
}
 8003f12:	4770      	bx	lr

08003f14 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f14:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b22      	cmp	r3, #34	; 0x22
 8003f1c:	d11e      	bne.n	8003f5c <UART_Receive_IT+0x48>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f1e:	6883      	ldr	r3, [r0, #8]
 8003f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f24:	d006      	beq.n	8003f34 <UART_Receive_IT+0x20>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f26:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f28:	b183      	cbz	r3, 8003f4c <UART_Receive_IT+0x38>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f2a:	6803      	ldr	r3, [r0, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f32:	e01b      	b.n	8003f6c <UART_Receive_IT+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f34:	6903      	ldr	r3, [r0, #16]
 8003f36:	b9ab      	cbnz	r3, 8003f64 <UART_Receive_IT+0x50>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f38:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f3a:	6803      	ldr	r3, [r0, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f42:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8003f44:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003f46:	3302      	adds	r3, #2
 8003f48:	6283      	str	r3, [r0, #40]	; 0x28
 8003f4a:	e013      	b.n	8003f74 <UART_Receive_IT+0x60>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f4c:	6903      	ldr	r3, [r0, #16]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1eb      	bne.n	8003f2a <UART_Receive_IT+0x16>
 8003f52:	e008      	b.n	8003f66 <UART_Receive_IT+0x52>
        HAL_UART_RxCpltCallback(huart);
 8003f54:	f001 f934 	bl	80051c0 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8003f58:	2000      	movs	r0, #0
 8003f5a:	e048      	b.n	8003fee <UART_Receive_IT+0xda>
    return HAL_BUSY;
 8003f5c:	2002      	movs	r0, #2
 8003f5e:	4770      	bx	lr
    return HAL_OK;
 8003f60:	2000      	movs	r0, #0
}
 8003f62:	4770      	bx	lr
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f64:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f66:	6803      	ldr	r3, [r0, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8003f6e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003f70:	3301      	adds	r3, #1
 8003f72:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8003f74:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8003f76:	3b01      	subs	r3, #1
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1ef      	bne.n	8003f60 <UART_Receive_IT+0x4c>
{
 8003f80:	b500      	push	{lr}
 8003f82:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f84:	6802      	ldr	r2, [r0, #0]
 8003f86:	68d3      	ldr	r3, [r2, #12]
 8003f88:	f023 0320 	bic.w	r3, r3, #32
 8003f8c:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f8e:	6802      	ldr	r2, [r0, #0]
 8003f90:	68d3      	ldr	r3, [r2, #12]
 8003f92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f96:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f98:	6802      	ldr	r2, [r0, #0]
 8003f9a:	6953      	ldr	r3, [r2, #20]
 8003f9c:	f023 0301 	bic.w	r3, r3, #1
 8003fa0:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003fa2:	2320      	movs	r3, #32
 8003fa4:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	6343      	str	r3, [r0, #52]	; 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fac:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d1d0      	bne.n	8003f54 <UART_Receive_IT+0x40>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	6303      	str	r3, [r0, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fb6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb8:	f102 030c 	add.w	r3, r2, #12
 8003fbc:	e853 3f00 	ldrex	r3, [r3]
 8003fc0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc4:	320c      	adds	r2, #12
 8003fc6:	e842 3100 	strex	r1, r3, [r2]
 8003fca:	2900      	cmp	r1, #0
 8003fcc:	d1f3      	bne.n	8003fb6 <UART_Receive_IT+0xa2>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003fce:	6803      	ldr	r3, [r0, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	f012 0f10 	tst.w	r2, #16
 8003fd6:	d006      	beq.n	8003fe6 <UART_Receive_IT+0xd2>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fd8:	2200      	movs	r2, #0
 8003fda:	9201      	str	r2, [sp, #4]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	9201      	str	r2, [sp, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	9301      	str	r3, [sp, #4]
 8003fe4:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fe6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8003fe8:	f7ff ff93 	bl	8003f12 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8003fec:	2000      	movs	r0, #0
}
 8003fee:	b003      	add	sp, #12
 8003ff0:	f85d fb04 	ldr.w	pc, [sp], #4

08003ff4 <HAL_UART_IRQHandler>:
{
 8003ff4:	b510      	push	{r4, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ffa:	6802      	ldr	r2, [r0, #0]
 8003ffc:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ffe:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004000:	6950      	ldr	r0, [r2, #20]
  if (errorflags == RESET)
 8004002:	f013 0f0f 	tst.w	r3, #15
 8004006:	d109      	bne.n	800401c <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004008:	f013 0f20 	tst.w	r3, #32
 800400c:	d00d      	beq.n	800402a <HAL_UART_IRQHandler+0x36>
 800400e:	f011 0f20 	tst.w	r1, #32
 8004012:	d00a      	beq.n	800402a <HAL_UART_IRQHandler+0x36>
      UART_Receive_IT(huart);
 8004014:	4620      	mov	r0, r4
 8004016:	f7ff ff7d 	bl	8003f14 <UART_Receive_IT>
      return;
 800401a:	e017      	b.n	800404c <HAL_UART_IRQHandler+0x58>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800401c:	f000 0001 	and.w	r0, r0, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004020:	f401 7c90 	and.w	ip, r1, #288	; 0x120
 8004024:	ea5c 0c00 	orrs.w	ip, ip, r0
 8004028:	d112      	bne.n	8004050 <HAL_UART_IRQHandler+0x5c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800402a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800402c:	2801      	cmp	r0, #1
 800402e:	d07f      	beq.n	8004130 <HAL_UART_IRQHandler+0x13c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004030:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004034:	d003      	beq.n	800403e <HAL_UART_IRQHandler+0x4a>
 8004036:	f011 0f80 	tst.w	r1, #128	; 0x80
 800403a:	f040 8119 	bne.w	8004270 <HAL_UART_IRQHandler+0x27c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800403e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004042:	d003      	beq.n	800404c <HAL_UART_IRQHandler+0x58>
 8004044:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004048:	f040 813f 	bne.w	80042ca <HAL_UART_IRQHandler+0x2d6>
}
 800404c:	b002      	add	sp, #8
 800404e:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004050:	f013 0f01 	tst.w	r3, #1
 8004054:	d006      	beq.n	8004064 <HAL_UART_IRQHandler+0x70>
 8004056:	f411 7f80 	tst.w	r1, #256	; 0x100
 800405a:	d003      	beq.n	8004064 <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800405c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800405e:	f042 0201 	orr.w	r2, r2, #1
 8004062:	6462      	str	r2, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004064:	f013 0f04 	tst.w	r3, #4
 8004068:	d02f      	beq.n	80040ca <HAL_UART_IRQHandler+0xd6>
 800406a:	b158      	cbz	r0, 8004084 <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800406c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800406e:	f042 0202 	orr.w	r2, r2, #2
 8004072:	6462      	str	r2, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004074:	f013 0f02 	tst.w	r3, #2
 8004078:	f000 8132 	beq.w	80042e0 <HAL_UART_IRQHandler+0x2ec>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800407c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800407e:	f042 0204 	orr.w	r2, r2, #4
 8004082:	6462      	str	r2, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004084:	f013 0f08 	tst.w	r3, #8
 8004088:	d007      	beq.n	800409a <HAL_UART_IRQHandler+0xa6>
 800408a:	f001 0220 	and.w	r2, r1, #32
 800408e:	4302      	orrs	r2, r0
 8004090:	d003      	beq.n	800409a <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004092:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004094:	f042 0208 	orr.w	r2, r2, #8
 8004098:	6462      	str	r2, [r4, #68]	; 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800409a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800409c:	2a00      	cmp	r2, #0
 800409e:	d0d5      	beq.n	800404c <HAL_UART_IRQHandler+0x58>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040a0:	f013 0f20 	tst.w	r3, #32
 80040a4:	d002      	beq.n	80040ac <HAL_UART_IRQHandler+0xb8>
 80040a6:	f011 0f20 	tst.w	r1, #32
 80040aa:	d114      	bne.n	80040d6 <HAL_UART_IRQHandler+0xe2>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040ac:	6823      	ldr	r3, [r4, #0]
 80040ae:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040b2:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040b6:	f003 0308 	and.w	r3, r3, #8
 80040ba:	4313      	orrs	r3, r2
 80040bc:	d10f      	bne.n	80040de <HAL_UART_IRQHandler+0xea>
        HAL_UART_ErrorCallback(huart);
 80040be:	4620      	mov	r0, r4
 80040c0:	f7ff feb4 	bl	8003e2c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040c4:	2300      	movs	r3, #0
 80040c6:	6463      	str	r3, [r4, #68]	; 0x44
 80040c8:	e7c0      	b.n	800404c <HAL_UART_IRQHandler+0x58>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040ca:	f013 0f02 	tst.w	r3, #2
 80040ce:	d0d9      	beq.n	8004084 <HAL_UART_IRQHandler+0x90>
 80040d0:	2800      	cmp	r0, #0
 80040d2:	d0d7      	beq.n	8004084 <HAL_UART_IRQHandler+0x90>
 80040d4:	e7d2      	b.n	800407c <HAL_UART_IRQHandler+0x88>
        UART_Receive_IT(huart);
 80040d6:	4620      	mov	r0, r4
 80040d8:	f7ff ff1c 	bl	8003f14 <UART_Receive_IT>
 80040dc:	e7e6      	b.n	80040ac <HAL_UART_IRQHandler+0xb8>
        UART_EndRxTransfer(huart);
 80040de:	4620      	mov	r0, r4
 80040e0:	f7ff fde4 	bl	8003cac <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e4:	6823      	ldr	r3, [r4, #0]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80040ec:	d01c      	beq.n	8004128 <HAL_UART_IRQHandler+0x134>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040ee:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f0:	f102 0314 	add.w	r3, r2, #20
 80040f4:	e853 3f00 	ldrex	r3, [r3]
 80040f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fc:	3214      	adds	r2, #20
 80040fe:	e842 3100 	strex	r1, r3, [r2]
 8004102:	2900      	cmp	r1, #0
 8004104:	d1f3      	bne.n	80040ee <HAL_UART_IRQHandler+0xfa>
          if (huart->hdmarx != NULL)
 8004106:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004108:	b153      	cbz	r3, 8004120 <HAL_UART_IRQHandler+0x12c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800410a:	4a78      	ldr	r2, [pc, #480]	; (80042ec <HAL_UART_IRQHandler+0x2f8>)
 800410c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800410e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004110:	f7fe fc08 	bl	8002924 <HAL_DMA_Abort_IT>
 8004114:	2800      	cmp	r0, #0
 8004116:	d099      	beq.n	800404c <HAL_UART_IRQHandler+0x58>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004118:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800411a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800411c:	4798      	blx	r3
 800411e:	e795      	b.n	800404c <HAL_UART_IRQHandler+0x58>
            HAL_UART_ErrorCallback(huart);
 8004120:	4620      	mov	r0, r4
 8004122:	f7ff fe83 	bl	8003e2c <HAL_UART_ErrorCallback>
 8004126:	e791      	b.n	800404c <HAL_UART_IRQHandler+0x58>
          HAL_UART_ErrorCallback(huart);
 8004128:	4620      	mov	r0, r4
 800412a:	f7ff fe7f 	bl	8003e2c <HAL_UART_ErrorCallback>
 800412e:	e78d      	b.n	800404c <HAL_UART_IRQHandler+0x58>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004130:	f013 0f10 	tst.w	r3, #16
 8004134:	f43f af7c 	beq.w	8004030 <HAL_UART_IRQHandler+0x3c>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004138:	f011 0f10 	tst.w	r1, #16
 800413c:	f43f af78 	beq.w	8004030 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004140:	2300      	movs	r3, #0
 8004142:	9301      	str	r3, [sp, #4]
 8004144:	6813      	ldr	r3, [r2, #0]
 8004146:	9301      	str	r3, [sp, #4]
 8004148:	6853      	ldr	r3, [r2, #4]
 800414a:	9301      	str	r3, [sp, #4]
 800414c:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800414e:	6953      	ldr	r3, [r2, #20]
 8004150:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004154:	d050      	beq.n	80041f8 <HAL_UART_IRQHandler+0x204>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004156:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004158:	6813      	ldr	r3, [r2, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800415e:	2b00      	cmp	r3, #0
 8004160:	f43f af74 	beq.w	800404c <HAL_UART_IRQHandler+0x58>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004164:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8004166:	4299      	cmp	r1, r3
 8004168:	f67f af70 	bls.w	800404c <HAL_UART_IRQHandler+0x58>
        huart->RxXferCount = nb_remaining_rx_data;
 800416c:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800416e:	6993      	ldr	r3, [r2, #24]
 8004170:	2b20      	cmp	r3, #32
 8004172:	d037      	beq.n	80041e4 <HAL_UART_IRQHandler+0x1f0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004174:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004176:	f102 030c 	add.w	r3, r2, #12
 800417a:	e853 3f00 	ldrex	r3, [r3]
 800417e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004182:	320c      	adds	r2, #12
 8004184:	e842 3100 	strex	r1, r3, [r2]
 8004188:	2900      	cmp	r1, #0
 800418a:	d1f3      	bne.n	8004174 <HAL_UART_IRQHandler+0x180>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800418c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418e:	f102 0314 	add.w	r3, r2, #20
 8004192:	e853 3f00 	ldrex	r3, [r3]
 8004196:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419a:	3214      	adds	r2, #20
 800419c:	e842 3100 	strex	r1, r3, [r2]
 80041a0:	2900      	cmp	r1, #0
 80041a2:	d1f3      	bne.n	800418c <HAL_UART_IRQHandler+0x198>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041a4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a6:	f102 0314 	add.w	r3, r2, #20
 80041aa:	e853 3f00 	ldrex	r3, [r3]
 80041ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b2:	3214      	adds	r2, #20
 80041b4:	e842 3100 	strex	r1, r3, [r2]
 80041b8:	2900      	cmp	r1, #0
 80041ba:	d1f3      	bne.n	80041a4 <HAL_UART_IRQHandler+0x1b0>
          huart->RxState = HAL_UART_STATE_READY;
 80041bc:	2320      	movs	r3, #32
 80041be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041c2:	2300      	movs	r3, #0
 80041c4:	6323      	str	r3, [r4, #48]	; 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041c6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c8:	f102 030c 	add.w	r3, r2, #12
 80041cc:	e853 3f00 	ldrex	r3, [r3]
 80041d0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d4:	320c      	adds	r2, #12
 80041d6:	e842 3100 	strex	r1, r3, [r2]
 80041da:	2900      	cmp	r1, #0
 80041dc:	d1f3      	bne.n	80041c6 <HAL_UART_IRQHandler+0x1d2>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041de:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80041e0:	f7fe fb7d 	bl	80028de <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041e4:	2302      	movs	r3, #2
 80041e6:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041e8:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80041ea:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80041ec:	1ac9      	subs	r1, r1, r3
 80041ee:	b289      	uxth	r1, r1
 80041f0:	4620      	mov	r0, r4
 80041f2:	f7ff fe8e 	bl	8003f12 <HAL_UARTEx_RxEventCallback>
 80041f6:	e729      	b.n	800404c <HAL_UART_IRQHandler+0x58>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80041f8:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80041fa:	b29a      	uxth	r2, r3
      if ((huart->RxXferCount > 0U)
 80041fc:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80041fe:	b29b      	uxth	r3, r3
 8004200:	2b00      	cmp	r3, #0
 8004202:	f43f af23 	beq.w	800404c <HAL_UART_IRQHandler+0x58>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004206:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8004208:	1a9b      	subs	r3, r3, r2
 800420a:	b299      	uxth	r1, r3
          && (nb_rx_data > 0U))
 800420c:	2900      	cmp	r1, #0
 800420e:	f43f af1d 	beq.w	800404c <HAL_UART_IRQHandler+0x58>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004212:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004214:	f102 030c 	add.w	r3, r2, #12
 8004218:	e853 3f00 	ldrex	r3, [r3]
 800421c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004220:	320c      	adds	r2, #12
 8004222:	e842 3000 	strex	r0, r3, [r2]
 8004226:	2800      	cmp	r0, #0
 8004228:	d1f3      	bne.n	8004212 <HAL_UART_IRQHandler+0x21e>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800422a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422c:	f102 0314 	add.w	r3, r2, #20
 8004230:	e853 3f00 	ldrex	r3, [r3]
 8004234:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004238:	3214      	adds	r2, #20
 800423a:	e842 3000 	strex	r0, r3, [r2]
 800423e:	2800      	cmp	r0, #0
 8004240:	d1f3      	bne.n	800422a <HAL_UART_IRQHandler+0x236>
        huart->RxState = HAL_UART_STATE_READY;
 8004242:	2320      	movs	r3, #32
 8004244:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004248:	2300      	movs	r3, #0
 800424a:	6323      	str	r3, [r4, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800424c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424e:	f102 030c 	add.w	r3, r2, #12
 8004252:	e853 3f00 	ldrex	r3, [r3]
 8004256:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425a:	320c      	adds	r2, #12
 800425c:	e842 3000 	strex	r0, r3, [r2]
 8004260:	2800      	cmp	r0, #0
 8004262:	d1f3      	bne.n	800424c <HAL_UART_IRQHandler+0x258>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004264:	2302      	movs	r3, #2
 8004266:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004268:	4620      	mov	r0, r4
 800426a:	f7ff fe52 	bl	8003f12 <HAL_UARTEx_RxEventCallback>
 800426e:	e6ed      	b.n	800404c <HAL_UART_IRQHandler+0x58>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004270:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b21      	cmp	r3, #33	; 0x21
 8004278:	f47f aee8 	bne.w	800404c <HAL_UART_IRQHandler+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800427c:	68a3      	ldr	r3, [r4, #8]
 800427e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004282:	d016      	beq.n	80042b2 <HAL_UART_IRQHandler+0x2be>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004284:	6a23      	ldr	r3, [r4, #32]
 8004286:	1c59      	adds	r1, r3, #1
 8004288:	6221      	str	r1, [r4, #32]
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	6053      	str	r3, [r2, #4]
    if (--huart->TxXferCount == 0U)
 800428e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004290:	3b01      	subs	r3, #1
 8004292:	b29b      	uxth	r3, r3
 8004294:	84e3      	strh	r3, [r4, #38]	; 0x26
 8004296:	2b00      	cmp	r3, #0
 8004298:	f47f aed8 	bne.w	800404c <HAL_UART_IRQHandler+0x58>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800429c:	6822      	ldr	r2, [r4, #0]
 800429e:	68d3      	ldr	r3, [r2, #12]
 80042a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042a4:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80042a6:	6822      	ldr	r2, [r4, #0]
 80042a8:	68d3      	ldr	r3, [r2, #12]
 80042aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042ae:	60d3      	str	r3, [r2, #12]
 80042b0:	e6cc      	b.n	800404c <HAL_UART_IRQHandler+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042b2:	6923      	ldr	r3, [r4, #16]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1e5      	bne.n	8004284 <HAL_UART_IRQHandler+0x290>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80042b8:	6a23      	ldr	r3, [r4, #32]
 80042ba:	881b      	ldrh	r3, [r3, #0]
 80042bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042c0:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 80042c2:	6a23      	ldr	r3, [r4, #32]
 80042c4:	3302      	adds	r3, #2
 80042c6:	6223      	str	r3, [r4, #32]
 80042c8:	e7e1      	b.n	800428e <HAL_UART_IRQHandler+0x29a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80042ca:	68d3      	ldr	r3, [r2, #12]
 80042cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042d0:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 80042d2:	2320      	movs	r3, #32
 80042d4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  HAL_UART_TxCpltCallback(huart);
 80042d8:	4620      	mov	r0, r4
 80042da:	f000 ff39 	bl	8005150 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 80042de:	e6b5      	b.n	800404c <HAL_UART_IRQHandler+0x58>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80042e0:	f013 0f08 	tst.w	r3, #8
 80042e4:	f47f aed5 	bne.w	8004092 <HAL_UART_IRQHandler+0x9e>
 80042e8:	e6d7      	b.n	800409a <HAL_UART_IRQHandler+0xa6>
 80042ea:	bf00      	nop
 80042ec:	08003e2f 	.word	0x08003e2f

080042f0 <UART_Start_Receive_IT>:
  huart->pRxBuffPtr = pData;
 80042f0:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 80042f2:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxXferCount = Size;
 80042f4:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042f6:	2300      	movs	r3, #0
 80042f8:	6443      	str	r3, [r0, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042fa:	2322      	movs	r3, #34	; 0x22
 80042fc:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004300:	6903      	ldr	r3, [r0, #16]
 8004302:	b123      	cbz	r3, 800430e <UART_Start_Receive_IT+0x1e>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004304:	6802      	ldr	r2, [r0, #0]
 8004306:	68d3      	ldr	r3, [r2, #12]
 8004308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800430c:	60d3      	str	r3, [r2, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800430e:	6802      	ldr	r2, [r0, #0]
 8004310:	6953      	ldr	r3, [r2, #20]
 8004312:	f043 0301 	orr.w	r3, r3, #1
 8004316:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004318:	6802      	ldr	r2, [r0, #0]
 800431a:	68d3      	ldr	r3, [r2, #12]
 800431c:	f043 0320 	orr.w	r3, r3, #32
 8004320:	60d3      	str	r3, [r2, #12]
}
 8004322:	2000      	movs	r0, #0
 8004324:	4770      	bx	lr

08004326 <HAL_UART_Receive_IT>:
{
 8004326:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8004328:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b20      	cmp	r3, #32
 8004330:	d108      	bne.n	8004344 <HAL_UART_Receive_IT+0x1e>
    if ((pData == NULL) || (Size == 0U))
 8004332:	b149      	cbz	r1, 8004348 <HAL_UART_Receive_IT+0x22>
 8004334:	b90a      	cbnz	r2, 800433a <HAL_UART_Receive_IT+0x14>
      return HAL_ERROR;
 8004336:	2001      	movs	r0, #1
}
 8004338:	bd08      	pop	{r3, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800433a:	2300      	movs	r3, #0
 800433c:	6303      	str	r3, [r0, #48]	; 0x30
    return (UART_Start_Receive_IT(huart, pData, Size));
 800433e:	f7ff ffd7 	bl	80042f0 <UART_Start_Receive_IT>
 8004342:	e7f9      	b.n	8004338 <HAL_UART_Receive_IT+0x12>
    return HAL_BUSY;
 8004344:	2002      	movs	r0, #2
 8004346:	e7f7      	b.n	8004338 <HAL_UART_Receive_IT+0x12>
      return HAL_ERROR;
 8004348:	2001      	movs	r0, #1
 800434a:	e7f5      	b.n	8004338 <HAL_UART_Receive_IT+0x12>

0800434c <eMBMasterInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBMasterInit( eMBMode eMode, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 800434c:	b510      	push	{r4, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    switch (eMode)
 800434e:	b110      	cbz	r0, 8004356 <eMBMasterInit+0xa>

        eStatus = eMBMasterASCIIInit(ucPort, ulBaudRate, eParity );
        break;
#endif
    default:
        eStatus = MB_EINVAL;
 8004350:	2402      	movs	r4, #2
        }
        /* initialize the OS resource for modbus master. */
        vMBMasterOsResInit();
    }
    return eStatus;
}
 8004352:	4620      	mov	r0, r4
 8004354:	bd10      	pop	{r4, pc}
 8004356:	460c      	mov	r4, r1
 8004358:	4611      	mov	r1, r2
        pvMBMasterFrameStartCur = eMBMasterRTUStart;
 800435a:	4a15      	ldr	r2, [pc, #84]	; (80043b0 <eMBMasterInit+0x64>)
 800435c:	4815      	ldr	r0, [pc, #84]	; (80043b4 <eMBMasterInit+0x68>)
 800435e:	6010      	str	r0, [r2, #0]
        pvMBMasterFrameStopCur = eMBMasterRTUStop;
 8004360:	4a15      	ldr	r2, [pc, #84]	; (80043b8 <eMBMasterInit+0x6c>)
 8004362:	4816      	ldr	r0, [pc, #88]	; (80043bc <eMBMasterInit+0x70>)
 8004364:	6010      	str	r0, [r2, #0]
        peMBMasterFrameSendCur = eMBMasterRTUSend;
 8004366:	4a16      	ldr	r2, [pc, #88]	; (80043c0 <eMBMasterInit+0x74>)
 8004368:	4816      	ldr	r0, [pc, #88]	; (80043c4 <eMBMasterInit+0x78>)
 800436a:	6010      	str	r0, [r2, #0]
        peMBMasterFrameReceiveCur = eMBMasterRTUReceive;
 800436c:	4a16      	ldr	r2, [pc, #88]	; (80043c8 <eMBMasterInit+0x7c>)
 800436e:	4817      	ldr	r0, [pc, #92]	; (80043cc <eMBMasterInit+0x80>)
 8004370:	6010      	str	r0, [r2, #0]
        pvMBMasterFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBMasterPortClose : NULL;
 8004372:	4a17      	ldr	r2, [pc, #92]	; (80043d0 <eMBMasterInit+0x84>)
 8004374:	2000      	movs	r0, #0
 8004376:	6010      	str	r0, [r2, #0]
        pxMBMasterFrameCBByteReceived = xMBMasterRTUReceiveFSM;
 8004378:	4a16      	ldr	r2, [pc, #88]	; (80043d4 <eMBMasterInit+0x88>)
 800437a:	4817      	ldr	r0, [pc, #92]	; (80043d8 <eMBMasterInit+0x8c>)
 800437c:	6010      	str	r0, [r2, #0]
        pxMBMasterFrameCBTransmitterEmpty = xMBMasterRTUTransmitFSM;
 800437e:	4a17      	ldr	r2, [pc, #92]	; (80043dc <eMBMasterInit+0x90>)
 8004380:	4817      	ldr	r0, [pc, #92]	; (80043e0 <eMBMasterInit+0x94>)
 8004382:	6010      	str	r0, [r2, #0]
        pxMBMasterPortCBTimerExpired = xMBMasterRTUTimerExpired;
 8004384:	4a17      	ldr	r2, [pc, #92]	; (80043e4 <eMBMasterInit+0x98>)
 8004386:	4818      	ldr	r0, [pc, #96]	; (80043e8 <eMBMasterInit+0x9c>)
 8004388:	6010      	str	r0, [r2, #0]
        eStatus = eMBMasterRTUInit(ucPort, ulBaudRate, eParity);
 800438a:	461a      	mov	r2, r3
 800438c:	4620      	mov	r0, r4
 800438e:	f000 fb8d 	bl	8004aac <eMBMasterRTUInit>
    if (eStatus == MB_ENOERR)
 8004392:	4604      	mov	r4, r0
 8004394:	2800      	cmp	r0, #0
 8004396:	d1dc      	bne.n	8004352 <eMBMasterInit+0x6>
        if (!xMBMasterPortEventInit())
 8004398:	f000 fd60 	bl	8004e5c <xMBMasterPortEventInit>
 800439c:	b118      	cbz	r0, 80043a6 <eMBMasterInit+0x5a>
            eMBState = STATE_DISABLED;
 800439e:	4b13      	ldr	r3, [pc, #76]	; (80043ec <eMBMasterInit+0xa0>)
 80043a0:	2201      	movs	r2, #1
 80043a2:	701a      	strb	r2, [r3, #0]
 80043a4:	e000      	b.n	80043a8 <eMBMasterInit+0x5c>
            eStatus = MB_EPORTERR;
 80043a6:	2403      	movs	r4, #3
        vMBMasterOsResInit();
 80043a8:	f000 fdee 	bl	8004f88 <vMBMasterOsResInit>
 80043ac:	e7d1      	b.n	8004352 <eMBMasterInit+0x6>
 80043ae:	bf00      	nop
 80043b0:	2000197c 	.word	0x2000197c
 80043b4:	08004ae5 	.word	0x08004ae5
 80043b8:	20001980 	.word	0x20001980
 80043bc:	08004b05 	.word	0x08004b05
 80043c0:	20001974 	.word	0x20001974
 80043c4:	08004b6d 	.word	0x08004b6d
 80043c8:	20001970 	.word	0x20001970
 80043cc:	08004b1d 	.word	0x08004b1d
 80043d0:	20001978 	.word	0x20001978
 80043d4:	20001984 	.word	0x20001984
 80043d8:	08004c09 	.word	0x08004c09
 80043dc:	20001988 	.word	0x20001988
 80043e0:	08004ca1 	.word	0x08004ca1
 80043e4:	2000198c 	.word	0x2000198c
 80043e8:	08004d29 	.word	0x08004d29
 80043ec:	20000010 	.word	0x20000010

080043f0 <eMBMasterEnable>:
    return eStatus;
}

eMBErrorCode
eMBMasterEnable( void )
{
 80043f0:	b508      	push	{r3, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( eMBState == STATE_DISABLED )
 80043f2:	4b06      	ldr	r3, [pc, #24]	; (800440c <eMBMasterEnable+0x1c>)
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d001      	beq.n	80043fe <eMBMasterEnable+0xe>
        pvMBMasterFrameStartCur(  );
        eMBState = STATE_ENABLED;
    }
    else
    {
        eStatus = MB_EILLSTATE;
 80043fa:	2006      	movs	r0, #6
    }
    return eStatus;
}
 80043fc:	bd08      	pop	{r3, pc}
        pvMBMasterFrameStartCur(  );
 80043fe:	4b04      	ldr	r3, [pc, #16]	; (8004410 <eMBMasterEnable+0x20>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 8004404:	2000      	movs	r0, #0
 8004406:	4b01      	ldr	r3, [pc, #4]	; (800440c <eMBMasterEnable+0x1c>)
 8004408:	7018      	strb	r0, [r3, #0]
 800440a:	e7f7      	b.n	80043fc <eMBMasterEnable+0xc>
 800440c:	20000010 	.word	0x20000010
 8004410:	2000197c 	.word	0x2000197c

08004414 <eMBMasterPoll>:
}


eMBErrorCode
eMBMasterPoll( void )
{
 8004414:	b570      	push	{r4, r5, r6, lr}
 8004416:	b082      	sub	sp, #8
    eMBErrorCode    eStatus = MB_ENOERR;
    eMBMasterEventType    eEvent;
    eMBMasterErrorEventType errorType;

    /* Check if the protocol stack is ready. */
    if(( eMBState != STATE_ENABLED ) && ( eMBState != STATE_ESTABLISHED))
 8004418:	4b6b      	ldr	r3, [pc, #428]	; (80045c8 <eMBMasterPoll+0x1b4>)
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	b113      	cbz	r3, 8004424 <eMBMasterPoll+0x10>
 800441e:	2b03      	cmp	r3, #3
 8004420:	f040 80cd 	bne.w	80045be <eMBMasterPoll+0x1aa>
        return MB_EILLSTATE;
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBMasterPortEventGet( &eEvent ) == TRUE )
 8004424:	f10d 0006 	add.w	r0, sp, #6
 8004428:	f000 fd80 	bl	8004f2c <xMBMasterPortEventGet>
 800442c:	2801      	cmp	r0, #1
 800442e:	d003      	beq.n	8004438 <eMBMasterPoll+0x24>
        default:
            break;
        }

    }
    return MB_ENOERR;
 8004430:	2400      	movs	r4, #0
}
 8004432:	4620      	mov	r0, r4
 8004434:	b002      	add	sp, #8
 8004436:	bd70      	pop	{r4, r5, r6, pc}
        switch ( eEvent )
 8004438:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800443c:	3b01      	subs	r3, #1
 800443e:	2b0f      	cmp	r3, #15
 8004440:	f200 80bf 	bhi.w	80045c2 <eMBMasterPoll+0x1ae>
 8004444:	e8df f003 	tbb	[pc, r3]
 8004448:	27bd0d08 	.word	0x27bd0d08
 800444c:	78bdbdbd 	.word	0x78bdbdbd
 8004450:	bdbdbdbd 	.word	0xbdbdbdbd
 8004454:	89bdbdbd 	.word	0x89bdbdbd
            eMBState = STATE_ESTABLISHED;
 8004458:	4b5b      	ldr	r3, [pc, #364]	; (80045c8 <eMBMasterPoll+0x1b4>)
 800445a:	2203      	movs	r2, #3
 800445c:	701a      	strb	r2, [r3, #0]
    return MB_ENOERR;
 800445e:	2400      	movs	r4, #0
            break;
 8004460:	e7e7      	b.n	8004432 <eMBMasterPoll+0x1e>
            eStatus = peMBMasterFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8004462:	4b5a      	ldr	r3, [pc, #360]	; (80045cc <eMBMasterPoll+0x1b8>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a5a      	ldr	r2, [pc, #360]	; (80045d0 <eMBMasterPoll+0x1bc>)
 8004468:	495a      	ldr	r1, [pc, #360]	; (80045d4 <eMBMasterPoll+0x1c0>)
 800446a:	485b      	ldr	r0, [pc, #364]	; (80045d8 <eMBMasterPoll+0x1c4>)
 800446c:	4798      	blx	r3
            if ( ( eStatus == MB_ENOERR ) && ( ucRcvAddress == ucMBMasterGetDestAddress() ) )
 800446e:	4604      	mov	r4, r0
 8004470:	b928      	cbnz	r0, 800447e <eMBMasterPoll+0x6a>
 8004472:	4b59      	ldr	r3, [pc, #356]	; (80045d8 <eMBMasterPoll+0x1c4>)
 8004474:	781a      	ldrb	r2, [r3, #0]
 8004476:	4b59      	ldr	r3, [pc, #356]	; (80045dc <eMBMasterPoll+0x1c8>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	429a      	cmp	r2, r3
 800447c:	d007      	beq.n	800448e <eMBMasterPoll+0x7a>
    return eMBMasterCurErrorType;
}
/* Set Modbus Master current error event type. */
void vMBMasterSetErrorType( eMBMasterErrorEventType errorType )
{
    eMBMasterCurErrorType = errorType;
 800447e:	4b58      	ldr	r3, [pc, #352]	; (80045e0 <eMBMasterPoll+0x1cc>)
 8004480:	2201      	movs	r2, #1
 8004482:	701a      	strb	r2, [r3, #0]
                ( void ) xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
 8004484:	2010      	movs	r0, #16
 8004486:	f000 fcf3 	bl	8004e70 <xMBMasterPortEventPost>
    return MB_ENOERR;
 800448a:	2400      	movs	r4, #0
 800448c:	e7d1      	b.n	8004432 <eMBMasterPoll+0x1e>
                ( void ) xMBMasterPortEventPost( EV_MASTER_EXECUTE );
 800448e:	2004      	movs	r0, #4
 8004490:	f000 fcee 	bl	8004e70 <xMBMasterPortEventPost>
 8004494:	e7cd      	b.n	8004432 <eMBMasterPoll+0x1e>
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8004496:	4b4f      	ldr	r3, [pc, #316]	; (80045d4 <eMBMasterPoll+0x1c0>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	781a      	ldrb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 800449c:	4951      	ldr	r1, [pc, #324]	; (80045e4 <eMBMasterPoll+0x1d0>)
 800449e:	2001      	movs	r0, #1
 80044a0:	7008      	strb	r0, [r1, #0]
            if(ucFunctionCode >> 7) {
 80044a2:	f993 1000 	ldrsb.w	r1, [r3]
 80044a6:	2900      	cmp	r1, #0
 80044a8:	db11      	blt.n	80044ce <eMBMasterPoll+0xba>
                for (i = 0; i < MB_FUNC_HANDLERS_MAX; i++)
 80044aa:	2400      	movs	r4, #0
                    if (xMasterFuncHandlers[i].ucFunctionCode == 0) {
 80044ac:	494e      	ldr	r1, [pc, #312]	; (80045e8 <eMBMasterPoll+0x1d4>)
 80044ae:	f811 3034 	ldrb.w	r3, [r1, r4, lsl #3]
 80044b2:	b123      	cbz	r3, 80044be <eMBMasterPoll+0xaa>
                    else if (xMasterFuncHandlers[i].ucFunctionCode == ucFunctionCode) {
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d016      	beq.n	80044e6 <eMBMasterPoll+0xd2>
                for (i = 0; i < MB_FUNC_HANDLERS_MAX; i++)
 80044b8:	3401      	adds	r4, #1
 80044ba:	2c10      	cmp	r4, #16
 80044bc:	d1f7      	bne.n	80044ae <eMBMasterPoll+0x9a>
    eMBMasterCurErrorType = errorType;
 80044be:	4b48      	ldr	r3, [pc, #288]	; (80045e0 <eMBMasterPoll+0x1cc>)
 80044c0:	2202      	movs	r2, #2
 80044c2:	701a      	strb	r2, [r3, #0]
                ( void ) xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
 80044c4:	2010      	movs	r0, #16
 80044c6:	f000 fcd3 	bl	8004e70 <xMBMasterPortEventPost>
    return MB_ENOERR;
 80044ca:	2400      	movs	r4, #0
 80044cc:	e7b1      	b.n	8004432 <eMBMasterPoll+0x1e>
                eException = (eMBException)ucMBFrame[MB_PDU_DATA_OFF];
 80044ce:	785a      	ldrb	r2, [r3, #1]
 80044d0:	4b44      	ldr	r3, [pc, #272]	; (80045e4 <eMBMasterPoll+0x1d0>)
 80044d2:	701a      	strb	r2, [r3, #0]
            if (eException != MB_EX_NONE) {
 80044d4:	4b43      	ldr	r3, [pc, #268]	; (80045e4 <eMBMasterPoll+0x1d0>)
 80044d6:	781c      	ldrb	r4, [r3, #0]
 80044d8:	2c00      	cmp	r4, #0
 80044da:	d1f0      	bne.n	80044be <eMBMasterPoll+0xaa>
                vMBMasterCBRequestScuuess( );
 80044dc:	f000 fd92 	bl	8005004 <vMBMasterCBRequestScuuess>
                vMBMasterRunResRelease( );
 80044e0:	f000 fd66 	bl	8004fb0 <vMBMasterRunResRelease>
 80044e4:	e7a5      	b.n	8004432 <eMBMasterPoll+0x1e>
    xMBRunInMasterMode = IsMasterMode;
 80044e6:	4b41      	ldr	r3, [pc, #260]	; (80045ec <eMBMasterPoll+0x1d8>)
 80044e8:	2201      	movs	r2, #1
 80044ea:	701a      	strb	r2, [r3, #0]
                        if ( xMBMasterRequestIsBroadcast() ) {
 80044ec:	f000 fc80 	bl	8004df0 <xMBMasterRequestIsBroadcast>
 80044f0:	b968      	cbnz	r0, 800450e <eMBMasterPoll+0xfa>
                            eException = xMasterFuncHandlers[i].pxHandler(ucMBFrame, &usLength);
 80044f2:	4b3d      	ldr	r3, [pc, #244]	; (80045e8 <eMBMasterPoll+0x1d4>)
 80044f4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80044f8:	6863      	ldr	r3, [r4, #4]
 80044fa:	4935      	ldr	r1, [pc, #212]	; (80045d0 <eMBMasterPoll+0x1bc>)
 80044fc:	4a35      	ldr	r2, [pc, #212]	; (80045d4 <eMBMasterPoll+0x1c0>)
 80044fe:	6810      	ldr	r0, [r2, #0]
 8004500:	4798      	blx	r3
 8004502:	4b38      	ldr	r3, [pc, #224]	; (80045e4 <eMBMasterPoll+0x1d0>)
 8004504:	7018      	strb	r0, [r3, #0]
    xMBRunInMasterMode = IsMasterMode;
 8004506:	4b39      	ldr	r3, [pc, #228]	; (80045ec <eMBMasterPoll+0x1d8>)
 8004508:	2200      	movs	r2, #0
 800450a:	701a      	strb	r2, [r3, #0]
}
 800450c:	e7e2      	b.n	80044d4 <eMBMasterPoll+0xc0>
                            usLength = usMBMasterGetPDUSndLength();
 800450e:	f000 fc63 	bl	8004dd8 <usMBMasterGetPDUSndLength>
 8004512:	4b2f      	ldr	r3, [pc, #188]	; (80045d0 <eMBMasterPoll+0x1bc>)
 8004514:	8018      	strh	r0, [r3, #0]
                            for(j = 1; j <= MB_MASTER_TOTAL_SLAVE_NUM; j++){
 8004516:	2501      	movs	r5, #1
    ucMBMasterDestAddress = Address;
 8004518:	4e30      	ldr	r6, [pc, #192]	; (80045dc <eMBMasterPoll+0x1c8>)
                                eException = xMasterFuncHandlers[i].pxHandler(ucMBFrame, &usLength);
 800451a:	4b33      	ldr	r3, [pc, #204]	; (80045e8 <eMBMasterPoll+0x1d4>)
 800451c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8004520:	6864      	ldr	r4, [r4, #4]
    ucMBMasterDestAddress = Address;
 8004522:	7035      	strb	r5, [r6, #0]
                                eException = xMasterFuncHandlers[i].pxHandler(ucMBFrame, &usLength);
 8004524:	492a      	ldr	r1, [pc, #168]	; (80045d0 <eMBMasterPoll+0x1bc>)
 8004526:	4b2b      	ldr	r3, [pc, #172]	; (80045d4 <eMBMasterPoll+0x1c0>)
 8004528:	6818      	ldr	r0, [r3, #0]
 800452a:	47a0      	blx	r4
 800452c:	4b2d      	ldr	r3, [pc, #180]	; (80045e4 <eMBMasterPoll+0x1d0>)
 800452e:	7018      	strb	r0, [r3, #0]
                            for(j = 1; j <= MB_MASTER_TOTAL_SLAVE_NUM; j++){
 8004530:	3501      	adds	r5, #1
 8004532:	2d11      	cmp	r5, #17
 8004534:	d1f5      	bne.n	8004522 <eMBMasterPoll+0x10e>
 8004536:	e7e6      	b.n	8004506 <eMBMasterPoll+0xf2>
            vMBMasterGetPDUSndBuf( &ucMBFrame );
 8004538:	4c26      	ldr	r4, [pc, #152]	; (80045d4 <eMBMasterPoll+0x1c0>)
 800453a:	4620      	mov	r0, r4
 800453c:	f000 fc40 	bl	8004dc0 <vMBMasterGetPDUSndBuf>
            eStatus = peMBMasterFrameSendCur( ucMBMasterGetDestAddress(), ucMBFrame, usMBMasterGetPDUSndLength() );
 8004540:	4b2b      	ldr	r3, [pc, #172]	; (80045f0 <eMBMasterPoll+0x1dc>)
 8004542:	681d      	ldr	r5, [r3, #0]
    return ucMBMasterDestAddress;
 8004544:	4b25      	ldr	r3, [pc, #148]	; (80045dc <eMBMasterPoll+0x1c8>)
 8004546:	781e      	ldrb	r6, [r3, #0]
            eStatus = peMBMasterFrameSendCur( ucMBMasterGetDestAddress(), ucMBFrame, usMBMasterGetPDUSndLength() );
 8004548:	6824      	ldr	r4, [r4, #0]
 800454a:	f000 fc45 	bl	8004dd8 <usMBMasterGetPDUSndLength>
 800454e:	4602      	mov	r2, r0
 8004550:	4621      	mov	r1, r4
 8004552:	4630      	mov	r0, r6
 8004554:	47a8      	blx	r5
    return MB_ENOERR;
 8004556:	2400      	movs	r4, #0
            break;
 8004558:	e76b      	b.n	8004432 <eMBMasterPoll+0x1e>
    return eMBMasterCurErrorType;
 800455a:	4b21      	ldr	r3, [pc, #132]	; (80045e0 <eMBMasterPoll+0x1cc>)
 800455c:	781c      	ldrb	r4, [r3, #0]
            vMBMasterGetPDUSndBuf( &ucMBFrame );
 800455e:	481d      	ldr	r0, [pc, #116]	; (80045d4 <eMBMasterPoll+0x1c0>)
 8004560:	f000 fc2e 	bl	8004dc0 <vMBMasterGetPDUSndBuf>
            switch (errorType) {
 8004564:	2c01      	cmp	r4, #1
 8004566:	d012      	beq.n	800458e <eMBMasterPoll+0x17a>
 8004568:	2c02      	cmp	r4, #2
 800456a:	d01c      	beq.n	80045a6 <eMBMasterPoll+0x192>
 800456c:	b11c      	cbz	r4, 8004576 <eMBMasterPoll+0x162>
            vMBMasterRunResRelease();
 800456e:	f000 fd1f 	bl	8004fb0 <vMBMasterRunResRelease>
    return MB_ENOERR;
 8004572:	2400      	movs	r4, #0
            break;
 8004574:	e75d      	b.n	8004432 <eMBMasterPoll+0x1e>
    return ucMBMasterDestAddress;
 8004576:	4b19      	ldr	r3, [pc, #100]	; (80045dc <eMBMasterPoll+0x1c8>)
 8004578:	781c      	ldrb	r4, [r3, #0]
                vMBMasterErrorCBRespondTimeout(ucMBMasterGetDestAddress(),
 800457a:	4b16      	ldr	r3, [pc, #88]	; (80045d4 <eMBMasterPoll+0x1c0>)
 800457c:	681d      	ldr	r5, [r3, #0]
 800457e:	f000 fc2b 	bl	8004dd8 <usMBMasterGetPDUSndLength>
 8004582:	4602      	mov	r2, r0
 8004584:	4629      	mov	r1, r5
 8004586:	4620      	mov	r0, r4
 8004588:	f000 fd1e 	bl	8004fc8 <vMBMasterErrorCBRespondTimeout>
                break;
 800458c:	e7ef      	b.n	800456e <eMBMasterPoll+0x15a>
    return ucMBMasterDestAddress;
 800458e:	4b13      	ldr	r3, [pc, #76]	; (80045dc <eMBMasterPoll+0x1c8>)
 8004590:	781c      	ldrb	r4, [r3, #0]
                vMBMasterErrorCBReceiveData(ucMBMasterGetDestAddress(),
 8004592:	4b10      	ldr	r3, [pc, #64]	; (80045d4 <eMBMasterPoll+0x1c0>)
 8004594:	681d      	ldr	r5, [r3, #0]
 8004596:	f000 fc1f 	bl	8004dd8 <usMBMasterGetPDUSndLength>
 800459a:	4602      	mov	r2, r0
 800459c:	4629      	mov	r1, r5
 800459e:	4620      	mov	r0, r4
 80045a0:	f000 fd1c 	bl	8004fdc <vMBMasterErrorCBReceiveData>
                break;
 80045a4:	e7e3      	b.n	800456e <eMBMasterPoll+0x15a>
    return ucMBMasterDestAddress;
 80045a6:	4b0d      	ldr	r3, [pc, #52]	; (80045dc <eMBMasterPoll+0x1c8>)
 80045a8:	781c      	ldrb	r4, [r3, #0]
                vMBMasterErrorCBExecuteFunction(ucMBMasterGetDestAddress(),
 80045aa:	4b0a      	ldr	r3, [pc, #40]	; (80045d4 <eMBMasterPoll+0x1c0>)
 80045ac:	681d      	ldr	r5, [r3, #0]
 80045ae:	f000 fc13 	bl	8004dd8 <usMBMasterGetPDUSndLength>
 80045b2:	4602      	mov	r2, r0
 80045b4:	4629      	mov	r1, r5
 80045b6:	4620      	mov	r0, r4
 80045b8:	f000 fd1a 	bl	8004ff0 <vMBMasterErrorCBExecuteFunction>
                break;
 80045bc:	e7d7      	b.n	800456e <eMBMasterPoll+0x15a>
        return MB_EILLSTATE;
 80045be:	2406      	movs	r4, #6
 80045c0:	e737      	b.n	8004432 <eMBMasterPoll+0x1e>
        switch ( eEvent )
 80045c2:	2400      	movs	r4, #0
 80045c4:	e735      	b.n	8004432 <eMBMasterPoll+0x1e>
 80045c6:	bf00      	nop
 80045c8:	20000010 	.word	0x20000010
 80045cc:	20001970 	.word	0x20001970
 80045d0:	20001996 	.word	0x20001996
 80045d4:	20001990 	.word	0x20001990
 80045d8:	20001995 	.word	0x20001995
 80045dc:	20001994 	.word	0x20001994
 80045e0:	2000196d 	.word	0x2000196d
 80045e4:	2000196c 	.word	0x2000196c
 80045e8:	08007d64 	.word	0x08007d64
 80045ec:	20001998 	.word	0x20001998
 80045f0:	20001974 	.word	0x20001974

080045f4 <ucMBMasterGetDestAddress>:
}
 80045f4:	4b01      	ldr	r3, [pc, #4]	; (80045fc <ucMBMasterGetDestAddress+0x8>)
 80045f6:	7818      	ldrb	r0, [r3, #0]
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	20001994 	.word	0x20001994

08004600 <vMBMasterSetDestAddress>:
    ucMBMasterDestAddress = Address;
 8004600:	4b01      	ldr	r3, [pc, #4]	; (8004608 <vMBMasterSetDestAddress+0x8>)
 8004602:	7018      	strb	r0, [r3, #0]
}
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	20001994 	.word	0x20001994

0800460c <vMBMasterSetErrorType>:
    eMBMasterCurErrorType = errorType;
 800460c:	4b01      	ldr	r3, [pc, #4]	; (8004614 <vMBMasterSetErrorType+0x8>)
 800460e:	7018      	strb	r0, [r3, #0]
}
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	2000196d 	.word	0x2000196d

08004618 <usMBCRC16>:
{
    UCHAR           ucCRCHi = 0xFF;
    UCHAR           ucCRCLo = 0xFF;
    int             iIndex;

    while( usLen-- )
 8004618:	b1b9      	cbz	r1, 800464a <usMBCRC16+0x32>
{
 800461a:	b430      	push	{r4, r5}
 800461c:	f101 3cff 	add.w	ip, r1, #4294967295
 8004620:	fa1f fc8c 	uxth.w	ip, ip
 8004624:	f10c 0c01 	add.w	ip, ip, #1
 8004628:	4484      	add	ip, r0
    UCHAR           ucCRCLo = 0xFF;
 800462a:	22ff      	movs	r2, #255	; 0xff
    UCHAR           ucCRCHi = 0xFF;
 800462c:	4611      	mov	r1, r2
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 800462e:	4d09      	ldr	r5, [pc, #36]	; (8004654 <usMBCRC16+0x3c>)
        ucCRCHi = aucCRCLo[iIndex];
 8004630:	4c09      	ldr	r4, [pc, #36]	; (8004658 <usMBCRC16+0x40>)
        iIndex = ucCRCLo ^ *( pucFrame++ );
 8004632:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004636:	4053      	eors	r3, r2
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 8004638:	5cea      	ldrb	r2, [r5, r3]
 800463a:	404a      	eors	r2, r1
        ucCRCHi = aucCRCLo[iIndex];
 800463c:	5ce1      	ldrb	r1, [r4, r3]
    while( usLen-- )
 800463e:	4560      	cmp	r0, ip
 8004640:	d1f7      	bne.n	8004632 <usMBCRC16+0x1a>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
}
 8004642:	ea42 2001 	orr.w	r0, r2, r1, lsl #8
 8004646:	bc30      	pop	{r4, r5}
 8004648:	4770      	bx	lr
    UCHAR           ucCRCLo = 0xFF;
 800464a:	22ff      	movs	r2, #255	; 0xff
}
 800464c:	ea42 2002 	orr.w	r0, r2, r2, lsl #8
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	08007de4 	.word	0x08007de4
 8004658:	08007ee4 	.word	0x08007ee4

0800465c <eMBMasterFuncReadCoils>:
    return eErrStatus;
}

eMBException
eMBMasterFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 800465c:	b530      	push	{r4, r5, lr}
 800465e:	b083      	sub	sp, #12
 8004660:	4605      	mov	r5, r0
 8004662:	460c      	mov	r4, r1

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 8004664:	f000 fbc4 	bl	8004df0 <xMBMasterRequestIsBroadcast>
 8004668:	bb48      	cbnz	r0, 80046be <eMBMasterFuncReadCoils+0x62>
    {
        eStatus = MB_EX_NONE;
    }
    else if ( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 800466a:	8823      	ldrh	r3, [r4, #0]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d929      	bls.n	80046c4 <eMBMasterFuncReadCoils+0x68>
    {
        vMBMasterGetPDUSndBuf(&ucMBFrame);
 8004670:	a801      	add	r0, sp, #4
 8004672:	f000 fba5 	bl	8004dc0 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 8004676:	9b01      	ldr	r3, [sp, #4]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usCoilCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_COILCNT_OFF] << 8 );
 8004678:	78da      	ldrb	r2, [r3, #3]
        usCoilCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_COILCNT_OFF + 1] );
 800467a:	7919      	ldrb	r1, [r3, #4]
 800467c:	ea41 2202 	orr.w	r2, r1, r2, lsl #8

        /* Test if the quantity of coils is a multiple of 8. If not last
         * byte is only partially field with unused coils set to zero. */
        if( ( usCoilCount & 0x0007 ) != 0 )
 8004680:	f011 0f07 	tst.w	r1, #7
 8004684:	d007      	beq.n	8004696 <eMBMasterFuncReadCoils+0x3a>
        {
            ucByteCount = ( UCHAR )( usCoilCount / 8 + 1 );
 8004686:	08d1      	lsrs	r1, r2, #3
 8004688:	3101      	adds	r1, #1
 800468a:	b2c9      	uxtb	r1, r1
        }

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception.
         */
        if( ( usCoilCount >= 1 ) &&
 800468c:	7868      	ldrb	r0, [r5, #1]
 800468e:	4288      	cmp	r0, r1
 8004690:	d007      	beq.n	80046a2 <eMBMasterFuncReadCoils+0x46>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004692:	2003      	movs	r0, #3
 8004694:	e014      	b.n	80046c0 <eMBMasterFuncReadCoils+0x64>
        if( ( usCoilCount >= 1 ) &&
 8004696:	b90a      	cbnz	r2, 800469c <eMBMasterFuncReadCoils+0x40>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004698:	2003      	movs	r0, #3
 800469a:	e011      	b.n	80046c0 <eMBMasterFuncReadCoils+0x64>
            ucByteCount = ( UCHAR )( usCoilCount / 8 );
 800469c:	f3c2 01c7 	ubfx	r1, r2, #3, #8
 80046a0:	e7f4      	b.n	800468c <eMBMasterFuncReadCoils+0x30>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 80046a2:	7858      	ldrb	r0, [r3, #1]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 80046a4:	7899      	ldrb	r1, [r3, #2]
 80046a6:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
        usRegAddress++;
 80046aa:	3101      	adds	r1, #1
            eRegStatus = eMBMasterRegCoilsCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usCoilCount, MB_REG_READ );
 80046ac:	2300      	movs	r3, #0
 80046ae:	b289      	uxth	r1, r1
 80046b0:	1ca8      	adds	r0, r5, #2
 80046b2:	f000 fe33 	bl	800531c <eMBMasterRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 80046b6:	b118      	cbz	r0, 80046c0 <eMBMasterFuncReadCoils+0x64>
                eStatus = prveMBError2Exception( eRegStatus );
 80046b8:	f000 fbc2 	bl	8004e40 <prveMBError2Exception>
 80046bc:	e000      	b.n	80046c0 <eMBMasterFuncReadCoils+0x64>
        eStatus = MB_EX_NONE;
 80046be:	2000      	movs	r0, #0
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 80046c0:	b003      	add	sp, #12
 80046c2:	bd30      	pop	{r4, r5, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80046c4:	2003      	movs	r0, #3
 80046c6:	e7fb      	b.n	80046c0 <eMBMasterFuncReadCoils+0x64>

080046c8 <eMBMasterFuncWriteCoil>:
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80046c8:	880b      	ldrh	r3, [r1, #0]
 80046ca:	2b05      	cmp	r3, #5
 80046cc:	d001      	beq.n	80046d2 <eMBMasterFuncWriteCoil+0xa>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80046ce:	2003      	movs	r0, #3
 80046d0:	4770      	bx	lr
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 80046d2:	7903      	ldrb	r3, [r0, #4]
 80046d4:	bb0b      	cbnz	r3, 800471a <eMBMasterFuncWriteCoil+0x52>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 80046d6:	78c2      	ldrb	r2, [r0, #3]
 80046d8:	1e53      	subs	r3, r2, #1
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	2bfd      	cmp	r3, #253	; 0xfd
 80046de:	d91e      	bls.n	800471e <eMBMasterFuncWriteCoil+0x56>
{
 80046e0:	b500      	push	{lr}
 80046e2:	b083      	sub	sp, #12
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 80046e4:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 80046e6:	7881      	ldrb	r1, [r0, #2]
            ucBuf[1] = 0;
 80046e8:	2000      	movs	r0, #0
 80046ea:	f88d 0005 	strb.w	r0, [sp, #5]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 80046ee:	2aff      	cmp	r2, #255	; 0xff
 80046f0:	bf14      	ite	ne
 80046f2:	2200      	movne	r2, #0
 80046f4:	2201      	moveq	r2, #1
 80046f6:	f88d 2004 	strb.w	r2, [sp, #4]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 80046fa:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 80046fe:	3101      	adds	r1, #1
                eMBMasterRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 8004700:	2301      	movs	r3, #1
 8004702:	461a      	mov	r2, r3
 8004704:	b289      	uxth	r1, r1
 8004706:	a801      	add	r0, sp, #4
 8004708:	f000 fe08 	bl	800531c <eMBMasterRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 800470c:	b910      	cbnz	r0, 8004714 <eMBMasterFuncWriteCoil+0x4c>
    }
    return eStatus;
}
 800470e:	b003      	add	sp, #12
 8004710:	f85d fb04 	ldr.w	pc, [sp], #4
                eStatus = prveMBError2Exception( eRegStatus );
 8004714:	f000 fb94 	bl	8004e40 <prveMBError2Exception>
 8004718:	e7f9      	b.n	800470e <eMBMasterFuncWriteCoil+0x46>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800471a:	2003      	movs	r0, #3
 800471c:	4770      	bx	lr
 800471e:	2003      	movs	r0, #3
}
 8004720:	4770      	bx	lr

08004722 <eMBMasterFuncWriteMultipleCoils>:
    return eErrStatus;
}

eMBException
eMBMasterFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8004722:	b510      	push	{r4, lr}
 8004724:	b082      	sub	sp, #8
 8004726:	4604      	mov	r4, r0

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
 8004728:	880b      	ldrh	r3, [r1, #0]
 800472a:	2b05      	cmp	r3, #5
 800472c:	d002      	beq.n	8004734 <eMBMasterFuncWriteMultipleCoils+0x12>
 800472e:	f000 fb5f 	bl	8004df0 <xMBMasterRequestIsBroadcast>
 8004732:	b340      	cbz	r0, 8004786 <eMBMasterFuncWriteMultipleCoils+0x64>
    {
        vMBMasterGetPDUSndBuf(&ucMBFrame);
 8004734:	a801      	add	r0, sp, #4
 8004736:	f000 fb43 	bl	8004dc0 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 800473a:	78e2      	ldrb	r2, [r4, #3]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 800473c:	7923      	ldrb	r3, [r4, #4]
 800473e:	ea43 2202 	orr.w	r2, r3, r2, lsl #8

        ucByteCount = ucMBFrame[MB_PDU_REQ_WRITE_MUL_BYTECNT_OFF];

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8004742:	f013 0f07 	tst.w	r3, #7
 8004746:	d009      	beq.n	800475c <eMBMasterFuncWriteMultipleCoils+0x3a>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 8004748:	08d3      	lsrs	r3, r2, #3
 800474a:	3301      	adds	r3, #1
 800474c:	b2db      	uxtb	r3, r3
        ucByteCount = ucMBFrame[MB_PDU_REQ_WRITE_MUL_BYTECNT_OFF];
 800474e:	9801      	ldr	r0, [sp, #4]
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
        }

        if( ( usCoilCnt >= 1 ) && ( ucByteCountVerify == ucByteCount ) )
 8004750:	7941      	ldrb	r1, [r0, #5]
 8004752:	4299      	cmp	r1, r3
 8004754:	d008      	beq.n	8004768 <eMBMasterFuncWriteMultipleCoils+0x46>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004756:	2003      	movs	r0, #3
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8004758:	b002      	add	sp, #8
 800475a:	bd10      	pop	{r4, pc}
        if( ( usCoilCnt >= 1 ) && ( ucByteCountVerify == ucByteCount ) )
 800475c:	b90a      	cbnz	r2, 8004762 <eMBMasterFuncWriteMultipleCoils+0x40>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800475e:	2003      	movs	r0, #3
 8004760:	e7fa      	b.n	8004758 <eMBMasterFuncWriteMultipleCoils+0x36>
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 8004762:	f3c2 03c7 	ubfx	r3, r2, #3, #8
 8004766:	e7f2      	b.n	800474e <eMBMasterFuncWriteMultipleCoils+0x2c>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8004768:	7863      	ldrb	r3, [r4, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 800476a:	78a1      	ldrb	r1, [r4, #2]
 800476c:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8004770:	3101      	adds	r1, #1
                eMBMasterRegCoilsCB( &ucMBFrame[MB_PDU_REQ_WRITE_MUL_VALUES_OFF],
 8004772:	2301      	movs	r3, #1
 8004774:	b289      	uxth	r1, r1
 8004776:	3006      	adds	r0, #6
 8004778:	f000 fdd0 	bl	800531c <eMBMasterRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 800477c:	2800      	cmp	r0, #0
 800477e:	d0eb      	beq.n	8004758 <eMBMasterFuncWriteMultipleCoils+0x36>
                eStatus = prveMBError2Exception( eRegStatus );
 8004780:	f000 fb5e 	bl	8004e40 <prveMBError2Exception>
 8004784:	e7e8      	b.n	8004758 <eMBMasterFuncWriteMultipleCoils+0x36>
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004786:	2003      	movs	r0, #3
 8004788:	e7e6      	b.n	8004758 <eMBMasterFuncWriteMultipleCoils+0x36>

0800478a <eMBMasterFuncReadDiscreteInputs>:
    return eErrStatus;
}

eMBException
eMBMasterFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 800478a:	b530      	push	{r4, r5, lr}
 800478c:	b083      	sub	sp, #12
 800478e:	4605      	mov	r5, r0
 8004790:	460c      	mov	r4, r1

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 8004792:	f000 fb2d 	bl	8004df0 <xMBMasterRequestIsBroadcast>
 8004796:	bb40      	cbnz	r0, 80047ea <eMBMasterFuncReadDiscreteInputs+0x60>
    {
        eStatus = MB_EX_NONE;
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 8004798:	8823      	ldrh	r3, [r4, #0]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d928      	bls.n	80047f0 <eMBMasterFuncReadDiscreteInputs+0x66>
    {
        vMBMasterGetPDUSndBuf(&ucMBFrame);
 800479e:	a801      	add	r0, sp, #4
 80047a0:	f000 fb0e 	bl	8004dc0 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 80047a4:	9b01      	ldr	r3, [sp, #4]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usDiscreteCnt = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_DISCCNT_OFF] << 8 );
 80047a6:	78da      	ldrb	r2, [r3, #3]
        usDiscreteCnt |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_DISCCNT_OFF + 1] );
 80047a8:	7919      	ldrb	r1, [r3, #4]
 80047aa:	ea41 2202 	orr.w	r2, r1, r2, lsl #8

        /* Test if the quantity of coils is a multiple of 8. If not last
         * byte is only partially field with unused coils set to zero. */
        if( ( usDiscreteCnt & 0x0007 ) != 0 )
 80047ae:	f011 0f07 	tst.w	r1, #7
 80047b2:	d007      	beq.n	80047c4 <eMBMasterFuncReadDiscreteInputs+0x3a>
        {
            ucNBytes = ( UCHAR )( usDiscreteCnt / 8 + 1 );
 80047b4:	08d1      	lsrs	r1, r2, #3
 80047b6:	3101      	adds	r1, #1
 80047b8:	b2c9      	uxtb	r1, r1
        }

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception.
         */
        if ((usDiscreteCnt >= 1) && ucNBytes == pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF])
 80047ba:	7868      	ldrb	r0, [r5, #1]
 80047bc:	4288      	cmp	r0, r1
 80047be:	d007      	beq.n	80047d0 <eMBMasterFuncReadDiscreteInputs+0x46>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80047c0:	2003      	movs	r0, #3
 80047c2:	e013      	b.n	80047ec <eMBMasterFuncReadDiscreteInputs+0x62>
        if ((usDiscreteCnt >= 1) && ucNBytes == pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF])
 80047c4:	b90a      	cbnz	r2, 80047ca <eMBMasterFuncReadDiscreteInputs+0x40>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80047c6:	2003      	movs	r0, #3
 80047c8:	e010      	b.n	80047ec <eMBMasterFuncReadDiscreteInputs+0x62>
            ucNBytes = ( UCHAR )( usDiscreteCnt / 8 );
 80047ca:	f3c2 01c7 	ubfx	r1, r2, #3, #8
 80047ce:	e7f4      	b.n	80047ba <eMBMasterFuncReadDiscreteInputs+0x30>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 80047d0:	7858      	ldrb	r0, [r3, #1]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 80047d2:	7899      	ldrb	r1, [r3, #2]
 80047d4:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
        usRegAddress++;
 80047d8:	3101      	adds	r1, #1
            eRegStatus = eMBMasterRegDiscreteCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usDiscreteCnt );
 80047da:	b289      	uxth	r1, r1
 80047dc:	1ca8      	adds	r0, r5, #2
 80047de:	f000 fdeb 	bl	80053b8 <eMBMasterRegDiscreteCB>
            if( eRegStatus != MB_ENOERR )
 80047e2:	b118      	cbz	r0, 80047ec <eMBMasterFuncReadDiscreteInputs+0x62>
                eStatus = prveMBError2Exception( eRegStatus );
 80047e4:	f000 fb2c 	bl	8004e40 <prveMBError2Exception>
 80047e8:	e000      	b.n	80047ec <eMBMasterFuncReadDiscreteInputs+0x62>
        eStatus = MB_EX_NONE;
 80047ea:	2000      	movs	r0, #0
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 80047ec:	b003      	add	sp, #12
 80047ee:	bd30      	pop	{r4, r5, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80047f0:	2003      	movs	r0, #3
 80047f2:	e7fb      	b.n	80047ec <eMBMasterFuncReadDiscreteInputs+0x62>

080047f4 <eMBMasterFuncWriteHoldingRegister>:
    return eErrStatus;
}

eMBException
eMBMasterFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80047f4:	b508      	push	{r3, lr}
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_SIZE_MIN + MB_PDU_FUNC_WRITE_SIZE ) )
 80047f6:	880b      	ldrh	r3, [r1, #0]
 80047f8:	2b05      	cmp	r3, #5
 80047fa:	d001      	beq.n	8004800 <eMBMasterFuncWriteHoldingRegister+0xc>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80047fc:	2003      	movs	r0, #3
    }
    return eStatus;
}
 80047fe:	bd08      	pop	{r3, pc}
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8004800:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8004802:	7881      	ldrb	r1, [r0, #2]
 8004804:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8004808:	3101      	adds	r1, #1
        eRegStatus = eMBMasterRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 800480a:	2301      	movs	r3, #1
 800480c:	461a      	mov	r2, r3
 800480e:	b289      	uxth	r1, r1
 8004810:	3003      	adds	r0, #3
 8004812:	f000 fd4d 	bl	80052b0 <eMBMasterRegHoldingCB>
        if( eRegStatus != MB_ENOERR )
 8004816:	2800      	cmp	r0, #0
 8004818:	d0f1      	beq.n	80047fe <eMBMasterFuncWriteHoldingRegister+0xa>
            eStatus = prveMBError2Exception( eRegStatus );
 800481a:	f000 fb11 	bl	8004e40 <prveMBError2Exception>
 800481e:	e7ee      	b.n	80047fe <eMBMasterFuncWriteHoldingRegister+0xa>

08004820 <eMBMasterReqWriteMultipleHoldingRegister>:
{
    UCHAR                 *ucMBFrame;
    USHORT                 usRegIndex = 0;
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;

    if ( ucSndAddr > MB_MASTER_TOTAL_SLAVE_NUM ) eErrStatus = MB_MRE_ILL_ARG;
 8004820:	2810      	cmp	r0, #16
 8004822:	d901      	bls.n	8004828 <eMBMasterReqWriteMultipleHoldingRegister+0x8>
 8004824:	2002      	movs	r0, #2
        vMBMasterSetPDUSndLength( MB_PDU_SIZE_MIN + MB_PDU_REQ_WRITE_MUL_SIZE_MIN + 2*usNRegs );
        ( void ) xMBMasterPortEventPost( EV_MASTER_FRAME_SENT );
        eErrStatus = eMBMasterWaitRequestFinish( );
    }
    return eErrStatus;
}
 8004826:	4770      	bx	lr
{
 8004828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800482a:	b083      	sub	sp, #12
 800482c:	4605      	mov	r5, r0
 800482e:	460f      	mov	r7, r1
 8004830:	4614      	mov	r4, r2
 8004832:	461e      	mov	r6, r3
    else if ( xMBMasterRunResTake( lTimeOut ) == FALSE ) eErrStatus = MB_MRE_MASTER_BUSY;
 8004834:	9808      	ldr	r0, [sp, #32]
 8004836:	f000 fbaf 	bl	8004f98 <xMBMasterRunResTake>
 800483a:	b910      	cbnz	r0, 8004842 <eMBMasterReqWriteMultipleHoldingRegister+0x22>
 800483c:	2005      	movs	r0, #5
}
 800483e:	b003      	add	sp, #12
 8004840:	bdf0      	pop	{r4, r5, r6, r7, pc}
        vMBMasterGetPDUSndBuf(&ucMBFrame);
 8004842:	a801      	add	r0, sp, #4
 8004844:	f000 fabc 	bl	8004dc0 <vMBMasterGetPDUSndBuf>
        vMBMasterSetDestAddress(ucSndAddr);
 8004848:	4628      	mov	r0, r5
 800484a:	f7ff fed9 	bl	8004600 <vMBMasterSetDestAddress>
        ucMBFrame[MB_PDU_FUNC_OFF]                     = MB_FUNC_WRITE_MULTIPLE_REGISTERS;
 800484e:	9b01      	ldr	r3, [sp, #4]
 8004850:	2210      	movs	r2, #16
 8004852:	701a      	strb	r2, [r3, #0]
        ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF]       = usRegAddr >> 8;
 8004854:	0a3a      	lsrs	r2, r7, #8
 8004856:	9b01      	ldr	r3, [sp, #4]
 8004858:	705a      	strb	r2, [r3, #1]
        ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF + 1]   = usRegAddr;
 800485a:	9b01      	ldr	r3, [sp, #4]
 800485c:	709f      	strb	r7, [r3, #2]
        ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF]     = usNRegs >> 8;
 800485e:	0a23      	lsrs	r3, r4, #8
 8004860:	9a01      	ldr	r2, [sp, #4]
 8004862:	70d3      	strb	r3, [r2, #3]
        ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF + 1] = usNRegs ;
 8004864:	9b01      	ldr	r3, [sp, #4]
 8004866:	b2e2      	uxtb	r2, r4
 8004868:	711a      	strb	r2, [r3, #4]
        ucMBFrame[MB_PDU_REQ_WRITE_MUL_BYTECNT_OFF]    = usNRegs * 2;
 800486a:	0052      	lsls	r2, r2, #1
 800486c:	715a      	strb	r2, [r3, #5]
        ucMBFrame += MB_PDU_REQ_WRITE_MUL_VALUES_OFF;
 800486e:	3306      	adds	r3, #6
 8004870:	9301      	str	r3, [sp, #4]
        while( usNRegs > usRegIndex)
 8004872:	b194      	cbz	r4, 800489a <eMBMasterReqWriteMultipleHoldingRegister+0x7a>
 8004874:	1eb1      	subs	r1, r6, #2
 8004876:	1e65      	subs	r5, r4, #1
 8004878:	b2ad      	uxth	r5, r5
 800487a:	eb06 0545 	add.w	r5, r6, r5, lsl #1
            *ucMBFrame++ = pusDataBuffer[usRegIndex] >> 8;
 800487e:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8004882:	0a1b      	lsrs	r3, r3, #8
 8004884:	9801      	ldr	r0, [sp, #4]
 8004886:	1c42      	adds	r2, r0, #1
 8004888:	9201      	str	r2, [sp, #4]
 800488a:	7003      	strb	r3, [r0, #0]
            *ucMBFrame++ = pusDataBuffer[usRegIndex++] ;
 800488c:	880a      	ldrh	r2, [r1, #0]
 800488e:	9b01      	ldr	r3, [sp, #4]
 8004890:	1c58      	adds	r0, r3, #1
 8004892:	9001      	str	r0, [sp, #4]
 8004894:	701a      	strb	r2, [r3, #0]
        while( usNRegs > usRegIndex)
 8004896:	42a9      	cmp	r1, r5
 8004898:	d1f1      	bne.n	800487e <eMBMasterReqWriteMultipleHoldingRegister+0x5e>
        vMBMasterSetPDUSndLength( MB_PDU_SIZE_MIN + MB_PDU_REQ_WRITE_MUL_SIZE_MIN + 2*usNRegs );
 800489a:	1ce0      	adds	r0, r4, #3
 800489c:	0040      	lsls	r0, r0, #1
 800489e:	b280      	uxth	r0, r0
 80048a0:	f000 fa94 	bl	8004dcc <vMBMasterSetPDUSndLength>
        ( void ) xMBMasterPortEventPost( EV_MASTER_FRAME_SENT );
 80048a4:	2008      	movs	r0, #8
 80048a6:	f000 fae3 	bl	8004e70 <xMBMasterPortEventPost>
        eErrStatus = eMBMasterWaitRequestFinish( );
 80048aa:	f000 fbb5 	bl	8005018 <eMBMasterWaitRequestFinish>
 80048ae:	e7c6      	b.n	800483e <eMBMasterReqWriteMultipleHoldingRegister+0x1e>

080048b0 <eMBMasterFuncWriteMultipleHoldingRegister>:

eMBException
eMBMasterFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80048b0:	b500      	push	{lr}
 80048b2:	b083      	sub	sp, #12

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_SIZE_MIN + MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
 80048b4:	880b      	ldrh	r3, [r1, #0]
 80048b6:	2b05      	cmp	r3, #5
 80048b8:	d002      	beq.n	80048c0 <eMBMasterFuncWriteMultipleHoldingRegister+0x10>
 80048ba:	f000 fa99 	bl	8004df0 <xMBMasterRequestIsBroadcast>
 80048be:	b1f0      	cbz	r0, 80048fe <eMBMasterFuncWriteMultipleHoldingRegister+0x4e>
    {
        vMBMasterGetPDUSndBuf(&ucMBFrame);
 80048c0:	a801      	add	r0, sp, #4
 80048c2:	f000 fa7d 	bl	8004dc0 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF] << 8 );
 80048c6:	9801      	ldr	r0, [sp, #4]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF] << 8 );
 80048c8:	78c3      	ldrb	r3, [r0, #3]
        usRegCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF + 1] );
 80048ca:	7902      	ldrb	r2, [r0, #4]
 80048cc:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        ucRegByteCount = ucMBFrame[MB_PDU_REQ_WRITE_MUL_BYTECNT_OFF];

        if( ucRegByteCount == 2 * usRegCount )
 80048d0:	7943      	ldrb	r3, [r0, #5]
 80048d2:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80048d6:	d003      	beq.n	80048e0 <eMBMasterFuncWriteMultipleHoldingRegister+0x30>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80048d8:	2003      	movs	r0, #3
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 80048da:	b003      	add	sp, #12
 80048dc:	f85d fb04 	ldr.w	pc, [sp], #4
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF] << 8 );
 80048e0:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF + 1] );
 80048e2:	7881      	ldrb	r1, [r0, #2]
 80048e4:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 80048e8:	3101      	adds	r1, #1
                eMBMasterRegHoldingCB( &ucMBFrame[MB_PDU_REQ_WRITE_MUL_VALUES_OFF],
 80048ea:	2301      	movs	r3, #1
 80048ec:	b289      	uxth	r1, r1
 80048ee:	3006      	adds	r0, #6
 80048f0:	f000 fcde 	bl	80052b0 <eMBMasterRegHoldingCB>
            if( eRegStatus != MB_ENOERR )
 80048f4:	2800      	cmp	r0, #0
 80048f6:	d0f0      	beq.n	80048da <eMBMasterFuncWriteMultipleHoldingRegister+0x2a>
                eStatus = prveMBError2Exception( eRegStatus );
 80048f8:	f000 faa2 	bl	8004e40 <prveMBError2Exception>
 80048fc:	e7ed      	b.n	80048da <eMBMasterFuncWriteMultipleHoldingRegister+0x2a>
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80048fe:	2003      	movs	r0, #3
 8004900:	e7eb      	b.n	80048da <eMBMasterFuncWriteMultipleHoldingRegister+0x2a>

08004902 <eMBMasterFuncReadHoldingRegister>:
    return eErrStatus;
}

eMBException
eMBMasterFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8004902:	b530      	push	{r4, r5, lr}
 8004904:	b083      	sub	sp, #12
 8004906:	4605      	mov	r5, r0
 8004908:	460c      	mov	r4, r1

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 800490a:	f000 fa71 	bl	8004df0 <xMBMasterRequestIsBroadcast>
 800490e:	b9f8      	cbnz	r0, 8004950 <eMBMasterFuncReadHoldingRegister+0x4e>
    {
        eStatus = MB_EX_NONE;
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 8004910:	8823      	ldrh	r3, [r4, #0]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d91f      	bls.n	8004956 <eMBMasterFuncReadHoldingRegister+0x54>
    {
        vMBMasterGetPDUSndBuf(&ucMBFrame);
 8004916:	a801      	add	r0, sp, #4
 8004918:	f000 fa52 	bl	8004dc0 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 800491c:	9b01      	ldr	r3, [sp, #4]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF] << 8 );
 800491e:	78d9      	ldrb	r1, [r3, #3]
        usRegCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF + 1] );
 8004920:	791a      	ldrb	r2, [r3, #4]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception.
         */
        if( ( usRegCount >= 1 ) && ( 2 * usRegCount == pucFrame[MB_PDU_FUNC_READ_BYTECNT_OFF] ) )
 8004922:	ea52 2201 	orrs.w	r2, r2, r1, lsl #8
 8004926:	d018      	beq.n	800495a <eMBMasterFuncReadHoldingRegister+0x58>
 8004928:	7869      	ldrb	r1, [r5, #1]
 800492a:	ebb1 0f42 	cmp.w	r1, r2, lsl #1
 800492e:	d001      	beq.n	8004934 <eMBMasterFuncReadHoldingRegister+0x32>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004930:	2003      	movs	r0, #3
 8004932:	e00e      	b.n	8004952 <eMBMasterFuncReadHoldingRegister+0x50>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 8004934:	7858      	ldrb	r0, [r3, #1]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 8004936:	7899      	ldrb	r1, [r3, #2]
 8004938:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
        usRegAddress++;
 800493c:	3101      	adds	r1, #1
            eRegStatus = eMBMasterRegHoldingCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usRegCount, MB_REG_READ );
 800493e:	2300      	movs	r3, #0
 8004940:	b289      	uxth	r1, r1
 8004942:	1ca8      	adds	r0, r5, #2
 8004944:	f000 fcb4 	bl	80052b0 <eMBMasterRegHoldingCB>
            if( eRegStatus != MB_ENOERR )
 8004948:	b118      	cbz	r0, 8004952 <eMBMasterFuncReadHoldingRegister+0x50>
                eStatus = prveMBError2Exception( eRegStatus );
 800494a:	f000 fa79 	bl	8004e40 <prveMBError2Exception>
 800494e:	e000      	b.n	8004952 <eMBMasterFuncReadHoldingRegister+0x50>
        eStatus = MB_EX_NONE;
 8004950:	2000      	movs	r0, #0
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8004952:	b003      	add	sp, #12
 8004954:	bd30      	pop	{r4, r5, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004956:	2003      	movs	r0, #3
 8004958:	e7fb      	b.n	8004952 <eMBMasterFuncReadHoldingRegister+0x50>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800495a:	2003      	movs	r0, #3
 800495c:	e7f9      	b.n	8004952 <eMBMasterFuncReadHoldingRegister+0x50>

0800495e <eMBMasterFuncReadWriteMultipleHoldingRegister>:
    return eErrStatus;
}

eMBException
eMBMasterFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800495e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004960:	b083      	sub	sp, #12
 8004962:	4605      	mov	r5, r0
 8004964:	460c      	mov	r4, r1

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 8004966:	f000 fa43 	bl	8004df0 <xMBMasterRequestIsBroadcast>
 800496a:	bb80      	cbnz	r0, 80049ce <eMBMasterFuncReadWriteMultipleHoldingRegister+0x70>
    {
        eStatus = MB_EX_NONE;
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READWRITE_SIZE_MIN )
 800496c:	8823      	ldrh	r3, [r4, #0]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d92e      	bls.n	80049d0 <eMBMasterFuncReadWriteMultipleHoldingRegister+0x72>
    {
        vMBMasterGetPDUSndBuf(&ucMBFrame);
 8004972:	a801      	add	r0, sp, #4
 8004974:	f000 fa24 	bl	8004dc0 <vMBMasterGetPDUSndBuf>
        usRegReadAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF] << 8U );
 8004978:	9801      	ldr	r0, [sp, #4]
        usRegReadAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF + 1] );
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF] << 8U );
 800497a:	78c3      	ldrb	r3, [r0, #3]
        usRegReadCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF + 1] );
 800497c:	7904      	ldrb	r4, [r0, #4]
 800497e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
        usRegWriteAddress++;

        usRegWriteCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF] << 8U );
        usRegWriteCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF + 1] );

        if( ( 2 * usRegReadCount ) == pucFrame[MB_PDU_FUNC_READWRITE_READ_BYTECNT_OFF] )
 8004982:	786b      	ldrb	r3, [r5, #1]
 8004984:	ebb3 0f44 	cmp.w	r3, r4, lsl #1
 8004988:	d001      	beq.n	800498e <eMBMasterFuncReadWriteMultipleHoldingRegister+0x30>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800498a:	2003      	movs	r0, #3
 800498c:	e020      	b.n	80049d0 <eMBMasterFuncReadWriteMultipleHoldingRegister+0x72>
        usRegReadAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF] << 8U );
 800498e:	7847      	ldrb	r7, [r0, #1]
        usRegReadAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF + 1] );
 8004990:	7886      	ldrb	r6, [r0, #2]
        usRegWriteCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8004992:	f890 c007 	ldrb.w	ip, [r0, #7]
        usRegWriteAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_ADDR_OFF] << 8U );
 8004996:	7943      	ldrb	r3, [r0, #5]
        usRegWriteAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_ADDR_OFF + 1] );
 8004998:	7981      	ldrb	r1, [r0, #6]
 800499a:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegWriteCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF + 1] );
 800499e:	7a02      	ldrb	r2, [r0, #8]
        usRegWriteAddress++;
 80049a0:	3101      	adds	r1, #1
            eRegStatus = eMBMasterRegHoldingCB( &ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_VALUES_OFF],
 80049a2:	2301      	movs	r3, #1
 80049a4:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 80049a8:	b289      	uxth	r1, r1
 80049aa:	300a      	adds	r0, #10
 80049ac:	f000 fc80 	bl	80052b0 <eMBMasterRegHoldingCB>
 80049b0:	4603      	mov	r3, r0
            if( eRegStatus == MB_ENOERR )
 80049b2:	b110      	cbz	r0, 80049ba <eMBMasterFuncReadWriteMultipleHoldingRegister+0x5c>
                eStatus = prveMBError2Exception( eRegStatus );
 80049b4:	f000 fa44 	bl	8004e40 <prveMBError2Exception>
 80049b8:	e00a      	b.n	80049d0 <eMBMasterFuncReadWriteMultipleHoldingRegister+0x72>
        usRegReadAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF + 1] );
 80049ba:	ea46 2107 	orr.w	r1, r6, r7, lsl #8
        usRegReadAddress++;
 80049be:	3101      	adds	r1, #1
                eRegStatus = eMBMasterRegHoldingCB(&pucFrame[MB_PDU_FUNC_READWRITE_READ_VALUES_OFF],
 80049c0:	4622      	mov	r2, r4
 80049c2:	b289      	uxth	r1, r1
 80049c4:	1ca8      	adds	r0, r5, #2
 80049c6:	f000 fc73 	bl	80052b0 <eMBMasterRegHoldingCB>
            if( eRegStatus != MB_ENOERR )
 80049ca:	b108      	cbz	r0, 80049d0 <eMBMasterFuncReadWriteMultipleHoldingRegister+0x72>
 80049cc:	e7f2      	b.n	80049b4 <eMBMasterFuncReadWriteMultipleHoldingRegister+0x56>
        eStatus = MB_EX_NONE;
 80049ce:	2000      	movs	r0, #0
        }
    }
    return eStatus;
}
 80049d0:	b003      	add	sp, #12
 80049d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049d4 <eMBMasterReqReadInputRegister>:
eMBMasterReqReadInputRegister( UCHAR ucSndAddr, USHORT usRegAddr, USHORT usNRegs, LONG lTimeOut )
{
    UCHAR                 *ucMBFrame;
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;

    if ( ucSndAddr > MB_MASTER_TOTAL_SLAVE_NUM ) eErrStatus = MB_MRE_ILL_ARG;
 80049d4:	2810      	cmp	r0, #16
 80049d6:	d901      	bls.n	80049dc <eMBMasterReqReadInputRegister+0x8>
 80049d8:	2002      	movs	r0, #2
        vMBMasterSetPDUSndLength( MB_PDU_SIZE_MIN + MB_PDU_REQ_READ_SIZE );
        ( void ) xMBMasterPortEventPost( EV_MASTER_FRAME_SENT );
        eErrStatus = eMBMasterWaitRequestFinish( );
    }
    return eErrStatus;
}
 80049da:	4770      	bx	lr
{
 80049dc:	b570      	push	{r4, r5, r6, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	4604      	mov	r4, r0
 80049e2:	460e      	mov	r6, r1
 80049e4:	4615      	mov	r5, r2
    else if ( xMBMasterRunResTake( lTimeOut ) == FALSE ) eErrStatus = MB_MRE_MASTER_BUSY;
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 fad6 	bl	8004f98 <xMBMasterRunResTake>
 80049ec:	b910      	cbnz	r0, 80049f4 <eMBMasterReqReadInputRegister+0x20>
 80049ee:	2005      	movs	r0, #5
}
 80049f0:	b002      	add	sp, #8
 80049f2:	bd70      	pop	{r4, r5, r6, pc}
        vMBMasterGetPDUSndBuf(&ucMBFrame);
 80049f4:	a801      	add	r0, sp, #4
 80049f6:	f000 f9e3 	bl	8004dc0 <vMBMasterGetPDUSndBuf>
        vMBMasterSetDestAddress(ucSndAddr);
 80049fa:	4620      	mov	r0, r4
 80049fc:	f7ff fe00 	bl	8004600 <vMBMasterSetDestAddress>
        ucMBFrame[MB_PDU_FUNC_OFF]                = MB_FUNC_READ_INPUT_REGISTER;
 8004a00:	9b01      	ldr	r3, [sp, #4]
 8004a02:	2204      	movs	r2, #4
 8004a04:	701a      	strb	r2, [r3, #0]
        ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF]       = usRegAddr >> 8;
 8004a06:	0a32      	lsrs	r2, r6, #8
 8004a08:	9b01      	ldr	r3, [sp, #4]
 8004a0a:	705a      	strb	r2, [r3, #1]
        ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1]   = usRegAddr;
 8004a0c:	9b01      	ldr	r3, [sp, #4]
 8004a0e:	709e      	strb	r6, [r3, #2]
        ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF]     = usNRegs >> 8;
 8004a10:	0a2a      	lsrs	r2, r5, #8
 8004a12:	9b01      	ldr	r3, [sp, #4]
 8004a14:	70da      	strb	r2, [r3, #3]
        ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF + 1] = usNRegs;
 8004a16:	9b01      	ldr	r3, [sp, #4]
 8004a18:	711d      	strb	r5, [r3, #4]
        vMBMasterSetPDUSndLength( MB_PDU_SIZE_MIN + MB_PDU_REQ_READ_SIZE );
 8004a1a:	2005      	movs	r0, #5
 8004a1c:	f000 f9d6 	bl	8004dcc <vMBMasterSetPDUSndLength>
        ( void ) xMBMasterPortEventPost( EV_MASTER_FRAME_SENT );
 8004a20:	2008      	movs	r0, #8
 8004a22:	f000 fa25 	bl	8004e70 <xMBMasterPortEventPost>
        eErrStatus = eMBMasterWaitRequestFinish( );
 8004a26:	f000 faf7 	bl	8005018 <eMBMasterWaitRequestFinish>
 8004a2a:	e7e1      	b.n	80049f0 <eMBMasterReqReadInputRegister+0x1c>

08004a2c <eMBMasterFuncReadInputRegister>:

eMBException
eMBMasterFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8004a2c:	b530      	push	{r4, r5, lr}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	4605      	mov	r5, r0
 8004a32:	460c      	mov	r4, r1

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 8004a34:	f000 f9dc 	bl	8004df0 <xMBMasterRequestIsBroadcast>
 8004a38:	b9f0      	cbnz	r0, 8004a78 <eMBMasterFuncReadInputRegister+0x4c>
    {
        eStatus = MB_EX_NONE;
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 8004a3a:	8823      	ldrh	r3, [r4, #0]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d91e      	bls.n	8004a7e <eMBMasterFuncReadInputRegister+0x52>
    {
        vMBMasterGetPDUSndBuf(&ucMBFrame);
 8004a40:	a801      	add	r0, sp, #4
 8004a42:	f000 f9bd 	bl	8004dc0 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 8004a46:	9b01      	ldr	r3, [sp, #4]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF] << 8 );
 8004a48:	78d9      	ldrb	r1, [r3, #3]
        usRegCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF + 1] );
 8004a4a:	791a      	ldrb	r2, [r3, #4]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception.
         */
        if( ( usRegCount >= 1 ) && ( 2 * usRegCount == pucFrame[MB_PDU_FUNC_READ_BYTECNT_OFF] ) )
 8004a4c:	ea52 2201 	orrs.w	r2, r2, r1, lsl #8
 8004a50:	d017      	beq.n	8004a82 <eMBMasterFuncReadInputRegister+0x56>
 8004a52:	7869      	ldrb	r1, [r5, #1]
 8004a54:	ebb1 0f42 	cmp.w	r1, r2, lsl #1
 8004a58:	d001      	beq.n	8004a5e <eMBMasterFuncReadInputRegister+0x32>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004a5a:	2003      	movs	r0, #3
 8004a5c:	e00d      	b.n	8004a7a <eMBMasterFuncReadInputRegister+0x4e>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 8004a5e:	7858      	ldrb	r0, [r3, #1]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 8004a60:	7899      	ldrb	r1, [r3, #2]
 8004a62:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
        usRegAddress++;
 8004a66:	3101      	adds	r1, #1
            eRegStatus = eMBMasterRegInputCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usRegCount );
 8004a68:	b289      	uxth	r1, r1
 8004a6a:	1ca8      	adds	r0, r5, #2
 8004a6c:	f000 fbec 	bl	8005248 <eMBMasterRegInputCB>
            if( eRegStatus != MB_ENOERR )
 8004a70:	b118      	cbz	r0, 8004a7a <eMBMasterFuncReadInputRegister+0x4e>
                eStatus = prveMBError2Exception( eRegStatus );
 8004a72:	f000 f9e5 	bl	8004e40 <prveMBError2Exception>
 8004a76:	e000      	b.n	8004a7a <eMBMasterFuncReadInputRegister+0x4e>
        eStatus = MB_EX_NONE;
 8004a78:	2000      	movs	r0, #0
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8004a7a:	b003      	add	sp, #12
 8004a7c:	bd30      	pop	{r4, r5, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004a7e:	2003      	movs	r0, #3
 8004a80:	e7fb      	b.n	8004a7a <eMBMasterFuncReadInputRegister+0x4e>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004a82:	2003      	movs	r0, #3
 8004a84:	e7f9      	b.n	8004a7a <eMBMasterFuncReadInputRegister+0x4e>
	...

08004a88 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8004a88:	b538      	push	{r3, r4, r5, lr}
 8004a8a:	460d      	mov	r5, r1
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8004a8c:	4b05      	ldr	r3, [pc, #20]	; (8004aa4 <eMBFuncReportSlaveID+0x1c>)
 8004a8e:	881c      	ldrh	r4, [r3, #0]
 8004a90:	4622      	mov	r2, r4
 8004a92:	4905      	ldr	r1, [pc, #20]	; (8004aa8 <eMBFuncReportSlaveID+0x20>)
 8004a94:	3001      	adds	r0, #1
 8004a96:	f002 ff51 	bl	800793c <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 8004a9a:	3401      	adds	r4, #1
 8004a9c:	802c      	strh	r4, [r5, #0]
    return MB_EX_NONE;
}
 8004a9e:	2000      	movs	r0, #0
 8004aa0:	bd38      	pop	{r3, r4, r5, pc}
 8004aa2:	bf00      	nop
 8004aa4:	200019bc 	.word	0x200019bc
 8004aa8:	2000199c 	.word	0x2000199c

08004aac <eMBMasterRTUInit>:
static volatile eMBMasterTimerMode eMasterCurTimerMode;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBMasterRTUInit(UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8004aac:	b570      	push	{r4, r5, r6, lr}
 8004aae:	4604      	mov	r4, r0
 8004ab0:	460d      	mov	r5, r1
 8004ab2:	4616      	mov	r6, r2
    eMBErrorCode    eStatus = MB_ENOERR;
    ULONG           usTimerT35_50us;

    ENTER_CRITICAL_SECTION(  );
 8004ab4:	f000 f9d0 	bl	8004e58 <EnterCriticalSection>

    /* Modbus RTU uses 8 Databits. */
    if( xMBMasterPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 8004ab8:	4633      	mov	r3, r6
 8004aba:	2208      	movs	r2, #8
 8004abc:	4629      	mov	r1, r5
 8004abe:	4620      	mov	r0, r4
 8004ac0:	f000 fad0 	bl	8005064 <xMBMasterPortSerialInit>
 8004ac4:	2801      	cmp	r0, #1
 8004ac6:	d004      	beq.n	8004ad2 <eMBMasterRTUInit+0x26>
    {
        eStatus = MB_EPORTERR;
 8004ac8:	2403      	movs	r4, #3
        if( xMBMasterPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
        {
            eStatus = MB_EPORTERR;
        }
    }
    EXIT_CRITICAL_SECTION(  );
 8004aca:	f000 f9c6 	bl	8004e5a <ExitCriticalSection>

    return eStatus;
}
 8004ace:	4620      	mov	r0, r4
 8004ad0:	bd70      	pop	{r4, r5, r6, pc}
        if( xMBMasterPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 8004ad2:	2023      	movs	r0, #35	; 0x23
 8004ad4:	f000 fb8a 	bl	80051ec <xMBMasterPortTimersInit>
            eStatus = MB_EPORTERR;
 8004ad8:	2801      	cmp	r0, #1
 8004ada:	bf0c      	ite	eq
 8004adc:	2400      	moveq	r4, #0
 8004ade:	2403      	movne	r4, #3
 8004ae0:	e7f3      	b.n	8004aca <eMBMasterRTUInit+0x1e>
	...

08004ae4 <eMBMasterRTUStart>:

void
eMBMasterRTUStart( void )
{
 8004ae4:	b508      	push	{r3, lr}
    ENTER_CRITICAL_SECTION(  );
 8004ae6:	f000 f9b7 	bl	8004e58 <EnterCriticalSection>
    /* Initially the receiver is in the state STATE_M_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_M_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_M_RX_INIT;
 8004aea:	2100      	movs	r1, #0
 8004aec:	4b04      	ldr	r3, [pc, #16]	; (8004b00 <eMBMasterRTUStart+0x1c>)
 8004aee:	7019      	strb	r1, [r3, #0]
    vMBMasterPortSerialEnable( TRUE, FALSE );
 8004af0:	2001      	movs	r0, #1
 8004af2:	f000 fae3 	bl	80050bc <vMBMasterPortSerialEnable>
    vMBMasterPortTimersT35Enable(  );
 8004af6:	f000 fb7e 	bl	80051f6 <vMBMasterPortTimersT35Enable>

    EXIT_CRITICAL_SECTION(  );
 8004afa:	f000 f9ae 	bl	8004e5a <ExitCriticalSection>
}
 8004afe:	bd08      	pop	{r3, pc}
 8004b00:	200019bf 	.word	0x200019bf

08004b04 <eMBMasterRTUStop>:

void
eMBMasterRTUStop( void )
{
 8004b04:	b508      	push	{r3, lr}
    ENTER_CRITICAL_SECTION(  );
 8004b06:	f000 f9a7 	bl	8004e58 <EnterCriticalSection>
    vMBMasterPortSerialEnable( FALSE, FALSE );
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	4608      	mov	r0, r1
 8004b0e:	f000 fad5 	bl	80050bc <vMBMasterPortSerialEnable>
    vMBMasterPortTimersDisable(  );
 8004b12:	f000 fb8b 	bl	800522c <vMBMasterPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
 8004b16:	f000 f9a0 	bl	8004e5a <ExitCriticalSection>
}
 8004b1a:	bd08      	pop	{r3, pc}

08004b1c <eMBMasterRTUReceive>:

eMBErrorCode
eMBMasterRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 8004b1c:	b570      	push	{r4, r5, r6, lr}
 8004b1e:	4606      	mov	r6, r0
 8004b20:	460d      	mov	r5, r1
 8004b22:	4614      	mov	r4, r2
    eMBErrorCode    eStatus = MB_ENOERR;

    ENTER_CRITICAL_SECTION(  );
 8004b24:	f000 f998 	bl	8004e58 <EnterCriticalSection>
   // assert_param( usMasterRcvBufferPos < MB_SER_PDU_SIZE_MAX );

    /* Length and CRC check */
    if( ( usMasterRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 8004b28:	4b0e      	ldr	r3, [pc, #56]	; (8004b64 <eMBMasterRTUReceive+0x48>)
 8004b2a:	881b      	ldrh	r3, [r3, #0]
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	2b03      	cmp	r3, #3
 8004b30:	d804      	bhi.n	8004b3c <eMBMasterRTUReceive+0x20>
        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucMasterRTURcvBuf[MB_SER_PDU_PDU_OFF];
    }
    else
    {
        eStatus = MB_EIO;
 8004b32:	2405      	movs	r4, #5
    }

    EXIT_CRITICAL_SECTION(  );
 8004b34:	f000 f991 	bl	8004e5a <ExitCriticalSection>
    return eStatus;
}
 8004b38:	4620      	mov	r0, r4
 8004b3a:	bd70      	pop	{r4, r5, r6, pc}
        && ( usMBCRC16( ( UCHAR * ) ucMasterRTURcvBuf, usMasterRcvBufferPos ) == 0 ) )
 8004b3c:	4b09      	ldr	r3, [pc, #36]	; (8004b64 <eMBMasterRTUReceive+0x48>)
 8004b3e:	8819      	ldrh	r1, [r3, #0]
 8004b40:	b289      	uxth	r1, r1
 8004b42:	4809      	ldr	r0, [pc, #36]	; (8004b68 <eMBMasterRTUReceive+0x4c>)
 8004b44:	f7ff fd68 	bl	8004618 <usMBCRC16>
 8004b48:	b950      	cbnz	r0, 8004b60 <eMBMasterRTUReceive+0x44>
        *pucRcvAddress = ucMasterRTURcvBuf[MB_SER_PDU_ADDR_OFF];
 8004b4a:	4b07      	ldr	r3, [pc, #28]	; (8004b68 <eMBMasterRTUReceive+0x4c>)
 8004b4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b50:	7032      	strb	r2, [r6, #0]
        *pusLength = ( USHORT )( usMasterRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 8004b52:	4a04      	ldr	r2, [pc, #16]	; (8004b64 <eMBMasterRTUReceive+0x48>)
 8004b54:	8812      	ldrh	r2, [r2, #0]
 8004b56:	3a03      	subs	r2, #3
 8004b58:	8022      	strh	r2, [r4, #0]
        *pucFrame = ( UCHAR * ) & ucMasterRTURcvBuf[MB_SER_PDU_PDU_OFF];
 8004b5a:	602b      	str	r3, [r5, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8004b5c:	2400      	movs	r4, #0
        *pucFrame = ( UCHAR * ) & ucMasterRTURcvBuf[MB_SER_PDU_PDU_OFF];
 8004b5e:	e7e9      	b.n	8004b34 <eMBMasterRTUReceive+0x18>
        eStatus = MB_EIO;
 8004b60:	2405      	movs	r4, #5
 8004b62:	e7e7      	b.n	8004b34 <eMBMasterRTUReceive+0x18>
 8004b64:	20001bc6 	.word	0x20001bc6
 8004b68:	200019c8 	.word	0x200019c8

08004b6c <eMBMasterRTUSend>:

eMBErrorCode
eMBMasterRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 8004b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eMBErrorCode    eStatus = MB_ENOERR;
    USHORT          usCRC16;

    if ( ucSlaveAddress > MB_MASTER_TOTAL_SLAVE_NUM ) return MB_EINVAL;
 8004b70:	2810      	cmp	r0, #16
 8004b72:	d83c      	bhi.n	8004bee <eMBMasterRTUSend+0x82>
 8004b74:	4604      	mov	r4, r0
 8004b76:	460e      	mov	r6, r1
 8004b78:	4615      	mov	r5, r2

    ENTER_CRITICAL_SECTION(  );
 8004b7a:	f000 f96d 	bl	8004e58 <EnterCriticalSection>

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_M_RX_IDLE )
 8004b7e:	4b1d      	ldr	r3, [pc, #116]	; (8004bf4 <eMBMasterRTUSend+0x88>)
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d005      	beq.n	8004b94 <eMBMasterRTUSend+0x28>
        eSndState = STATE_M_TX_XMIT;
        vMBMasterPortSerialEnable( FALSE, TRUE );
    }
    else
    {
        eStatus = MB_EIO;
 8004b88:	2405      	movs	r4, #5
    }
    EXIT_CRITICAL_SECTION(  );
 8004b8a:	f000 f966 	bl	8004e5a <ExitCriticalSection>
    return eStatus;
}
 8004b8e:	4620      	mov	r0, r4
 8004b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        pucMasterSndBufferCur = ( UCHAR * ) pucFrame - 1;
 8004b94:	1e70      	subs	r0, r6, #1
 8004b96:	4b18      	ldr	r3, [pc, #96]	; (8004bf8 <eMBMasterRTUSend+0x8c>)
 8004b98:	6018      	str	r0, [r3, #0]
        usMasterSndBufferCount = 1;
 8004b9a:	4f18      	ldr	r7, [pc, #96]	; (8004bfc <eMBMasterRTUSend+0x90>)
 8004b9c:	f04f 0801 	mov.w	r8, #1
 8004ba0:	f8a7 8000 	strh.w	r8, [r7]
        pucMasterSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 8004ba4:	f806 4c01 	strb.w	r4, [r6, #-1]
        usMasterSndBufferCount += usLength;
 8004ba8:	883a      	ldrh	r2, [r7, #0]
 8004baa:	442a      	add	r2, r5
 8004bac:	b292      	uxth	r2, r2
 8004bae:	803a      	strh	r2, [r7, #0]
        usCRC16 = usMBCRC16( ( UCHAR * ) pucMasterSndBufferCur, usMasterSndBufferCount );
 8004bb0:	8839      	ldrh	r1, [r7, #0]
 8004bb2:	b289      	uxth	r1, r1
 8004bb4:	f7ff fd30 	bl	8004618 <usMBCRC16>
        ucMasterRTUSndBuf[usMasterSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 8004bb8:	883b      	ldrh	r3, [r7, #0]
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	eb03 0208 	add.w	r2, r3, r8
 8004bc0:	b292      	uxth	r2, r2
 8004bc2:	803a      	strh	r2, [r7, #0]
 8004bc4:	b2c2      	uxtb	r2, r0
 8004bc6:	490e      	ldr	r1, [pc, #56]	; (8004c00 <eMBMasterRTUSend+0x94>)
 8004bc8:	54ca      	strb	r2, [r1, r3]
        ucMasterRTUSndBuf[usMasterSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 8004bca:	883b      	ldrh	r3, [r7, #0]
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	eb03 0208 	add.w	r2, r3, r8
 8004bd2:	b292      	uxth	r2, r2
 8004bd4:	803a      	strh	r2, [r7, #0]
 8004bd6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8004bda:	54c8      	strb	r0, [r1, r3]
        eSndState = STATE_M_TX_XMIT;
 8004bdc:	4b09      	ldr	r3, [pc, #36]	; (8004c04 <eMBMasterRTUSend+0x98>)
 8004bde:	f883 8000 	strb.w	r8, [r3]
        vMBMasterPortSerialEnable( FALSE, TRUE );
 8004be2:	4641      	mov	r1, r8
 8004be4:	2000      	movs	r0, #0
 8004be6:	f000 fa69 	bl	80050bc <vMBMasterPortSerialEnable>
    eMBErrorCode    eStatus = MB_ENOERR;
 8004bea:	2400      	movs	r4, #0
 8004bec:	e7cd      	b.n	8004b8a <eMBMasterRTUSend+0x1e>
    if ( ucSlaveAddress > MB_MASTER_TOTAL_SLAVE_NUM ) return MB_EINVAL;
 8004bee:	2402      	movs	r4, #2
 8004bf0:	e7cd      	b.n	8004b8e <eMBMasterRTUSend+0x22>
 8004bf2:	bf00      	nop
 8004bf4:	200019bf 	.word	0x200019bf
 8004bf8:	200019c4 	.word	0x200019c4
 8004bfc:	20001bca 	.word	0x20001bca
 8004c00:	20001ac8 	.word	0x20001ac8
 8004c04:	200019c0 	.word	0x200019c0

08004c08 <xMBMasterRTUReceiveFSM>:

BOOL
xMBMasterRTUReceiveFSM( void )
{
 8004c08:	b500      	push	{lr}
 8004c0a:	b083      	sub	sp, #12
    UCHAR           ucByte;

    //assert_param(( eSndState == STATE_M_TX_IDLE ) || ( eSndState == STATE_M_TX_XFWR ));

    /* Always read the character. */
    ( void )xMBMasterPortSerialGetByte( ( CHAR * ) & ucByte );
 8004c0c:	f10d 0007 	add.w	r0, sp, #7
 8004c10:	f000 fa96 	bl	8005140 <xMBMasterPortSerialGetByte>

    switch ( eRcvState )
 8004c14:	4b1e      	ldr	r3, [pc, #120]	; (8004c90 <xMBMasterRTUReceiveFSM+0x88>)
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b03      	cmp	r3, #3
 8004c1c:	d805      	bhi.n	8004c2a <xMBMasterRTUReceiveFSM+0x22>
 8004c1e:	e8df f003 	tbb	[pc, r3]
 8004c22:	0b02      	.short	0x0b02
 8004c24:	0821      	.short	0x0821
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_M_RX_INIT:
        vMBMasterPortTimersT35Enable( );
 8004c26:	f000 fae6 	bl	80051f6 <vMBMasterPortTimersT35Enable>
        }
        vMBMasterPortTimersT35Enable();
        break;
    }
    return xTaskNeedSwitch;
}
 8004c2a:	2000      	movs	r0, #0
 8004c2c:	b003      	add	sp, #12
 8004c2e:	f85d fb04 	ldr.w	pc, [sp], #4
        vMBMasterPortTimersT35Enable( );
 8004c32:	f000 fae0 	bl	80051f6 <vMBMasterPortTimersT35Enable>
        break;
 8004c36:	e7f8      	b.n	8004c2a <xMBMasterRTUReceiveFSM+0x22>
        vMBMasterPortTimersDisable( );
 8004c38:	f000 faf8 	bl	800522c <vMBMasterPortTimersDisable>
        eSndState = STATE_M_TX_IDLE;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	4a15      	ldr	r2, [pc, #84]	; (8004c94 <xMBMasterRTUReceiveFSM+0x8c>)
 8004c40:	7013      	strb	r3, [r2, #0]
        usMasterRcvBufferPos = 0;
 8004c42:	4a15      	ldr	r2, [pc, #84]	; (8004c98 <xMBMasterRTUReceiveFSM+0x90>)
 8004c44:	8013      	strh	r3, [r2, #0]
        ucMasterRTURcvBuf[usMasterRcvBufferPos++] = ucByte;
 8004c46:	8813      	ldrh	r3, [r2, #0]
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	1c59      	adds	r1, r3, #1
 8004c4c:	b289      	uxth	r1, r1
 8004c4e:	8011      	strh	r1, [r2, #0]
 8004c50:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8004c54:	4a11      	ldr	r2, [pc, #68]	; (8004c9c <xMBMasterRTUReceiveFSM+0x94>)
 8004c56:	54d1      	strb	r1, [r2, r3]
        eRcvState = STATE_M_RX_RCV;
 8004c58:	4b0d      	ldr	r3, [pc, #52]	; (8004c90 <xMBMasterRTUReceiveFSM+0x88>)
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	701a      	strb	r2, [r3, #0]
        vMBMasterPortTimersT35Enable( );
 8004c5e:	f000 faca 	bl	80051f6 <vMBMasterPortTimersT35Enable>
        break;
 8004c62:	e7e2      	b.n	8004c2a <xMBMasterRTUReceiveFSM+0x22>
        if( usMasterRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 8004c64:	4b0c      	ldr	r3, [pc, #48]	; (8004c98 <xMBMasterRTUReceiveFSM+0x90>)
 8004c66:	881b      	ldrh	r3, [r3, #0]
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	2bff      	cmp	r3, #255	; 0xff
 8004c6c:	d80c      	bhi.n	8004c88 <xMBMasterRTUReceiveFSM+0x80>
            ucMasterRTURcvBuf[usMasterRcvBufferPos++] = ucByte;
 8004c6e:	490a      	ldr	r1, [pc, #40]	; (8004c98 <xMBMasterRTUReceiveFSM+0x90>)
 8004c70:	880b      	ldrh	r3, [r1, #0]
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	1c5a      	adds	r2, r3, #1
 8004c76:	b292      	uxth	r2, r2
 8004c78:	800a      	strh	r2, [r1, #0]
 8004c7a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8004c7e:	4a07      	ldr	r2, [pc, #28]	; (8004c9c <xMBMasterRTUReceiveFSM+0x94>)
 8004c80:	54d1      	strb	r1, [r2, r3]
        vMBMasterPortTimersT35Enable();
 8004c82:	f000 fab8 	bl	80051f6 <vMBMasterPortTimersT35Enable>
        break;
 8004c86:	e7d0      	b.n	8004c2a <xMBMasterRTUReceiveFSM+0x22>
            eRcvState = STATE_M_RX_ERROR;
 8004c88:	4b01      	ldr	r3, [pc, #4]	; (8004c90 <xMBMasterRTUReceiveFSM+0x88>)
 8004c8a:	2203      	movs	r2, #3
 8004c8c:	701a      	strb	r2, [r3, #0]
 8004c8e:	e7f8      	b.n	8004c82 <xMBMasterRTUReceiveFSM+0x7a>
 8004c90:	200019bf 	.word	0x200019bf
 8004c94:	200019c0 	.word	0x200019c0
 8004c98:	20001bc6 	.word	0x20001bc6
 8004c9c:	200019c8 	.word	0x200019c8

08004ca0 <xMBMasterRTUTransmitFSM>:

BOOL
xMBMasterRTUTransmitFSM( void )
{
 8004ca0:	b510      	push	{r4, lr}
    BOOL            xNeedPoll = FALSE;

    //assert_param( eRcvState == STATE_M_RX_IDLE );

    switch ( eSndState )
 8004ca2:	4b1c      	ldr	r3, [pc, #112]	; (8004d14 <xMBMasterRTUTransmitFSM+0x74>)
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	b12b      	cbz	r3, 8004cb4 <xMBMasterRTUTransmitFSM+0x14>
 8004ca8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004cac:	2a01      	cmp	r2, #1
 8004cae:	d006      	beq.n	8004cbe <xMBMasterRTUTransmitFSM+0x1e>
    default:
        break;
    }

    return xNeedPoll;
}
 8004cb0:	2000      	movs	r0, #0
 8004cb2:	bd10      	pop	{r4, pc}
        vMBMasterPortSerialEnable( TRUE, FALSE );
 8004cb4:	2100      	movs	r1, #0
 8004cb6:	2001      	movs	r0, #1
 8004cb8:	f000 fa00 	bl	80050bc <vMBMasterPortSerialEnable>
        break;
 8004cbc:	e7f8      	b.n	8004cb0 <xMBMasterRTUTransmitFSM+0x10>
        if( usMasterSndBufferCount != 0 )
 8004cbe:	4b16      	ldr	r3, [pc, #88]	; (8004d18 <xMBMasterRTUTransmitFSM+0x78>)
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	b16b      	cbz	r3, 8004ce2 <xMBMasterRTUTransmitFSM+0x42>
            xMBMasterPortSerialPutByte( ( CHAR )*pucMasterSndBufferCur );
 8004cc6:	4c15      	ldr	r4, [pc, #84]	; (8004d1c <xMBMasterRTUTransmitFSM+0x7c>)
 8004cc8:	6823      	ldr	r3, [r4, #0]
 8004cca:	7818      	ldrb	r0, [r3, #0]
 8004ccc:	f000 fa28 	bl	8005120 <xMBMasterPortSerialPutByte>
            pucMasterSndBufferCur++;  /* next byte in sendbuffer. */
 8004cd0:	6823      	ldr	r3, [r4, #0]
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	6023      	str	r3, [r4, #0]
            usMasterSndBufferCount--;
 8004cd6:	4a10      	ldr	r2, [pc, #64]	; (8004d18 <xMBMasterRTUTransmitFSM+0x78>)
 8004cd8:	8813      	ldrh	r3, [r2, #0]
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	8013      	strh	r3, [r2, #0]
 8004ce0:	e7e6      	b.n	8004cb0 <xMBMasterRTUTransmitFSM+0x10>
            xFrameIsBroadcast = ( ucMasterRTUSndBuf[MB_SER_PDU_ADDR_OFF] == MB_ADDRESS_BROADCAST ) ? TRUE : FALSE;
 8004ce2:	4b0f      	ldr	r3, [pc, #60]	; (8004d20 <xMBMasterRTUTransmitFSM+0x80>)
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	fab3 f383 	clz	r3, r3
 8004cea:	095b      	lsrs	r3, r3, #5
 8004cec:	4c0d      	ldr	r4, [pc, #52]	; (8004d24 <xMBMasterRTUTransmitFSM+0x84>)
 8004cee:	7023      	strb	r3, [r4, #0]
            vMBMasterPortSerialEnable( TRUE, FALSE );
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	2001      	movs	r0, #1
 8004cf4:	f000 f9e2 	bl	80050bc <vMBMasterPortSerialEnable>
            eSndState = STATE_M_TX_XFWR;
 8004cf8:	4b06      	ldr	r3, [pc, #24]	; (8004d14 <xMBMasterRTUTransmitFSM+0x74>)
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	701a      	strb	r2, [r3, #0]
            if ( xFrameIsBroadcast == TRUE )
 8004cfe:	7823      	ldrb	r3, [r4, #0]
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d002      	beq.n	8004d0c <xMBMasterRTUTransmitFSM+0x6c>
                vMBMasterPortTimersRespondTimeoutEnable( );
 8004d06:	f000 fa87 	bl	8005218 <vMBMasterPortTimersRespondTimeoutEnable>
 8004d0a:	e7d1      	b.n	8004cb0 <xMBMasterRTUTransmitFSM+0x10>
                vMBMasterPortTimersConvertDelayEnable( );
 8004d0c:	f000 fa7a 	bl	8005204 <vMBMasterPortTimersConvertDelayEnable>
 8004d10:	e7ce      	b.n	8004cb0 <xMBMasterRTUTransmitFSM+0x10>
 8004d12:	bf00      	nop
 8004d14:	200019c0 	.word	0x200019c0
 8004d18:	20001bca 	.word	0x20001bca
 8004d1c:	200019c4 	.word	0x200019c4
 8004d20:	20001ac8 	.word	0x20001ac8
 8004d24:	20001bcc 	.word	0x20001bcc

08004d28 <xMBMasterRTUTimerExpired>:

BOOL
xMBMasterRTUTimerExpired(void)
{
 8004d28:	b510      	push	{r4, lr}
    BOOL xNeedPoll = FALSE;

    switch (eRcvState)
 8004d2a:	4b21      	ldr	r3, [pc, #132]	; (8004db0 <xMBMasterRTUTimerExpired+0x88>)
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d01c      	beq.n	8004d6e <xMBMasterRTUTimerExpired+0x46>
 8004d34:	2b03      	cmp	r3, #3
 8004d36:	d01f      	beq.n	8004d78 <xMBMasterRTUTimerExpired+0x50>
 8004d38:	b1a3      	cbz	r3, 8004d64 <xMBMasterRTUTimerExpired+0x3c>
 8004d3a:	2400      	movs	r4, #0
      //  assert_param(
      //          ( eRcvState == STATE_M_RX_INIT ) || ( eRcvState == STATE_M_RX_RCV ) ||
      //          ( eRcvState == STATE_M_RX_ERROR ) || ( eRcvState == STATE_M_RX_IDLE ));
        break;
    }
    eRcvState = STATE_M_RX_IDLE;
 8004d3c:	4b1c      	ldr	r3, [pc, #112]	; (8004db0 <xMBMasterRTUTimerExpired+0x88>)
 8004d3e:	2201      	movs	r2, #1
 8004d40:	701a      	strb	r2, [r3, #0]

    switch (eSndState)
 8004d42:	4b1c      	ldr	r3, [pc, #112]	; (8004db4 <xMBMasterRTUTimerExpired+0x8c>)
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d01e      	beq.n	8004d8a <xMBMasterRTUTimerExpired+0x62>
    default:
       // assert_param(
          //      ( eSndState == STATE_M_TX_XFWR ) || ( eSndState == STATE_M_TX_IDLE ));
        break;
    }
    eSndState = STATE_M_TX_IDLE;
 8004d4c:	4b19      	ldr	r3, [pc, #100]	; (8004db4 <xMBMasterRTUTimerExpired+0x8c>)
 8004d4e:	2200      	movs	r2, #0
 8004d50:	701a      	strb	r2, [r3, #0]

    vMBMasterPortTimersDisable( );
 8004d52:	f000 fa6b 	bl	800522c <vMBMasterPortTimersDisable>
    /* If timer mode is convert delay, the master event then turns EV_MASTER_EXECUTE status. */
    if (eMasterCurTimerMode == MB_TMODE_CONVERT_DELAY) {
 8004d56:	4b18      	ldr	r3, [pc, #96]	; (8004db8 <xMBMasterRTUTimerExpired+0x90>)
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d021      	beq.n	8004da4 <xMBMasterRTUTimerExpired+0x7c>
        xNeedPoll = xMBMasterPortEventPost( EV_MASTER_EXECUTE_ISR );
    }

    return xNeedPoll;
}
 8004d60:	4620      	mov	r0, r4
 8004d62:	bd10      	pop	{r4, pc}
        xNeedPoll = xMBMasterPortEventPost(EV_MASTER_READY_ISR);
 8004d64:	2001      	movs	r0, #1
 8004d66:	f000 f883 	bl	8004e70 <xMBMasterPortEventPost>
 8004d6a:	4604      	mov	r4, r0
        break;
 8004d6c:	e7e6      	b.n	8004d3c <xMBMasterRTUTimerExpired+0x14>
        xNeedPoll = xMBMasterPortEventPost(EV_MASTER_FRAME_RECEIVED_ISR);
 8004d6e:	2002      	movs	r0, #2
 8004d70:	f000 f87e 	bl	8004e70 <xMBMasterPortEventPost>
 8004d74:	4604      	mov	r4, r0
        break;
 8004d76:	e7e1      	b.n	8004d3c <xMBMasterRTUTimerExpired+0x14>
        vMBMasterSetErrorType(EV_ERROR_RECEIVE_DATA);
 8004d78:	2001      	movs	r0, #1
 8004d7a:	f7ff fc47 	bl	800460c <vMBMasterSetErrorType>
        xNeedPoll = xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS_ISR );
 8004d7e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004d82:	f000 f875 	bl	8004e70 <xMBMasterPortEventPost>
 8004d86:	4604      	mov	r4, r0
        break;
 8004d88:	e7d8      	b.n	8004d3c <xMBMasterRTUTimerExpired+0x14>
        if ( xFrameIsBroadcast == FALSE ) {
 8004d8a:	4b0c      	ldr	r3, [pc, #48]	; (8004dbc <xMBMasterRTUTimerExpired+0x94>)
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1dc      	bne.n	8004d4c <xMBMasterRTUTimerExpired+0x24>
            vMBMasterSetErrorType(EV_ERROR_RESPOND_TIMEOUT);
 8004d92:	2000      	movs	r0, #0
 8004d94:	f7ff fc3a 	bl	800460c <vMBMasterSetErrorType>
            xNeedPoll = xMBMasterPortEventPost(EV_MASTER_ERROR_PROCESS_ISR);
 8004d98:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004d9c:	f000 f868 	bl	8004e70 <xMBMasterPortEventPost>
 8004da0:	4604      	mov	r4, r0
 8004da2:	e7d3      	b.n	8004d4c <xMBMasterRTUTimerExpired+0x24>
        xNeedPoll = xMBMasterPortEventPost( EV_MASTER_EXECUTE_ISR );
 8004da4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004da8:	f000 f862 	bl	8004e70 <xMBMasterPortEventPost>
 8004dac:	4604      	mov	r4, r0
 8004dae:	e7d7      	b.n	8004d60 <xMBMasterRTUTimerExpired+0x38>
 8004db0:	200019bf 	.word	0x200019bf
 8004db4:	200019c0 	.word	0x200019c0
 8004db8:	200019be 	.word	0x200019be
 8004dbc:	20001bcc 	.word	0x20001bcc

08004dc0 <vMBMasterGetPDUSndBuf>:
}

/* Get Modbus Master send PDU's buffer address pointer.*/
void vMBMasterGetPDUSndBuf( UCHAR ** pucFrame )
{
    *pucFrame = ( UCHAR * ) &ucMasterRTUSndBuf[MB_SER_PDU_PDU_OFF];
 8004dc0:	4b01      	ldr	r3, [pc, #4]	; (8004dc8 <vMBMasterGetPDUSndBuf+0x8>)
 8004dc2:	6003      	str	r3, [r0, #0]
}
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	20001ac9 	.word	0x20001ac9

08004dcc <vMBMasterSetPDUSndLength>:

/* Set Modbus Master send PDU's buffer length.*/
void vMBMasterSetPDUSndLength( USHORT SendPDULength )
{
    usMasterSendPDULength = SendPDULength;
 8004dcc:	4b01      	ldr	r3, [pc, #4]	; (8004dd4 <vMBMasterSetPDUSndLength+0x8>)
 8004dce:	8018      	strh	r0, [r3, #0]
}
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	20001bc8 	.word	0x20001bc8

08004dd8 <usMBMasterGetPDUSndLength>:

/* Get Modbus Master send PDU's buffer length.*/
USHORT usMBMasterGetPDUSndLength( void )
{
    return usMasterSendPDULength;
 8004dd8:	4b01      	ldr	r3, [pc, #4]	; (8004de0 <usMBMasterGetPDUSndLength+0x8>)
 8004dda:	8818      	ldrh	r0, [r3, #0]
}
 8004ddc:	b280      	uxth	r0, r0
 8004dde:	4770      	bx	lr
 8004de0:	20001bc8 	.word	0x20001bc8

08004de4 <vMBMasterSetCurTimerMode>:

/* Set Modbus Master current timer mode.*/
void vMBMasterSetCurTimerMode( eMBMasterTimerMode eMBTimerMode )
{
    eMasterCurTimerMode = eMBTimerMode;
 8004de4:	4b01      	ldr	r3, [pc, #4]	; (8004dec <vMBMasterSetCurTimerMode+0x8>)
 8004de6:	7018      	strb	r0, [r3, #0]
}
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	200019be 	.word	0x200019be

08004df0 <xMBMasterRequestIsBroadcast>:

/* The master request is broadcast? */
BOOL xMBMasterRequestIsBroadcast( void ){
    return xFrameIsBroadcast;
 8004df0:	4b01      	ldr	r3, [pc, #4]	; (8004df8 <xMBMasterRequestIsBroadcast+0x8>)
 8004df2:	7818      	ldrb	r0, [r3, #0]
}
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	20001bcc 	.word	0x20001bcc

08004dfc <xMBUtilSetBits>:

/* ----------------------- Start implementation -----------------------------*/
void
xMBUtilSetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits,
                UCHAR ucValue )
{
 8004dfc:	b530      	push	{r4, r5, lr}
  //  assert_param( ucNBits <= 8 );
  //  assert_param( ( size_t )BITS_UCHAR == sizeof( UCHAR ) * 8 );

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 8004dfe:	08cc      	lsrs	r4, r1, #3
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8004e00:	f104 0e01 	add.w	lr, r4, #1
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8004e04:	f04f 0c01 	mov.w	ip, #1
 8004e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8004e0c:	f10c 3cff 	add.w	ip, ip, #4294967295
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;
 8004e10:	fa1f fc8c 	uxth.w	ip, ip
 8004e14:	eba1 02c4 	sub.w	r2, r1, r4, lsl #3
 8004e18:	fa0c fc02 	lsl.w	ip, ip, r2
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8004e1c:	f810 500e 	ldrb.w	r5, [r0, lr]
 8004e20:	5d02      	ldrb	r2, [r0, r4]
 8004e22:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 8004e26:	ea22 020c 	bic.w	r2, r2, ip
    usValue <<= usNPreBits;
 8004e2a:	f001 0107 	and.w	r1, r1, #7
 8004e2e:	408b      	lsls	r3, r1
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 8004e30:	4313      	orrs	r3, r2
 8004e32:	b21b      	sxth	r3, r3

    /* move bits back into storage */
    ucByteBuf[usByteOffset] = ( UCHAR )( usWordBuf & 0xFF );
 8004e34:	5503      	strb	r3, [r0, r4]
    ucByteBuf[usByteOffset + 1] = ( UCHAR )( usWordBuf >> BITS_UCHAR );
 8004e36:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004e3a:	f800 300e 	strb.w	r3, [r0, lr]
}
 8004e3e:	bd30      	pop	{r4, r5, pc}

08004e40 <prveMBError2Exception>:
eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
    eMBException    eStatus;

    switch ( eErrorCode )
 8004e40:	2801      	cmp	r0, #1
 8004e42:	d005      	beq.n	8004e50 <prveMBError2Exception+0x10>
 8004e44:	2807      	cmp	r0, #7
 8004e46:	d005      	beq.n	8004e54 <prveMBError2Exception+0x14>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 8004e48:	2800      	cmp	r0, #0
 8004e4a:	bf18      	it	ne
 8004e4c:	2004      	movne	r0, #4
 8004e4e:	4770      	bx	lr
    switch ( eErrorCode )
 8004e50:	2002      	movs	r0, #2
 8004e52:	4770      	bx	lr
        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
            break;

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 8004e54:	2006      	movs	r0, #6
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
            break;
    }

    return eStatus;
}
 8004e56:	4770      	bx	lr

08004e58 <EnterCriticalSection>:

/* ----------------------- Start implementation -----------------------------*/
void EnterCriticalSection(void)
{
  //  rt_enter_critical();
}
 8004e58:	4770      	bx	lr

08004e5a <ExitCriticalSection>:

void ExitCriticalSection(void)
{
   // rt_exit_critical();
}
 8004e5a:	4770      	bx	lr

08004e5c <xMBMasterPortEventInit>:
//static struct rt_semaphore xMasterRunRes;
//static struct rt_event     xMasterOsEvent;
/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBMasterPortEventInit( void )
{
 8004e5c:	b508      	push	{r3, lr}
	xMasterOsEventGroupHandle = xGetOSEvent();
 8004e5e:	f7fc fbd7 	bl	8001610 <xGetOSEvent>
 8004e62:	4b02      	ldr	r3, [pc, #8]	; (8004e6c <xMBMasterPortEventInit+0x10>)
 8004e64:	6018      	str	r0, [r3, #0]
   // rt_event_init(&xMasterOsEvent,"master event",RT_IPC_FLAG_PRIO);
    return TRUE;
}
 8004e66:	2001      	movs	r0, #1
 8004e68:	bd08      	pop	{r3, pc}
 8004e6a:	bf00      	nop
 8004e6c:	20001bd0 	.word	0x20001bd0

08004e70 <xMBMasterPortEventPost>:

BOOL
xMBMasterPortEventPost( eMBMasterEventType eEvent )
{
 8004e70:	b500      	push	{lr}
 8004e72:	b083      	sub	sp, #12
 8004e74:	4601      	mov	r1, r0
	BaseType_t xHigherPriorityTaskWoken, xResult;
	eMBMasterEventType xEvent = eEvent;

	    switch (xEvent)
 8004e76:	2840      	cmp	r0, #64	; 0x40
 8004e78:	d029      	beq.n	8004ece <xMBMasterPortEventPost+0x5e>
 8004e7a:	d90a      	bls.n	8004e92 <xMBMasterPortEventPost+0x22>
 8004e7c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004e80:	d04e      	beq.n	8004f20 <xMBMasterPortEventPost+0xb0>
 8004e82:	d91f      	bls.n	8004ec4 <xMBMasterPortEventPost+0x54>
 8004e84:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004e88:	d125      	bne.n	8004ed6 <xMBMasterPortEventPost+0x66>
		    case EV_MASTER_FRAME_RECEIVED_ISR:
		    case EV_MASTER_ERROR_PROCESS_ISR:
		    case EV_MASTER_EXECUTE_ISR:

		    		/* xHigherPriorityTaskWoken must be initialised to pdFALSE. */
		    		xHigherPriorityTaskWoken = pdFALSE;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	9301      	str	r3, [sp, #4]
		    		 {
		    			 xEvent = EV_MASTER_EXECUTE;
		    		 }
		    		 if (xEvent == EV_MASTER_ERROR_PROCESS_ISR)
		    		 {
		    				   xEvent = EV_MASTER_ERROR_PROCESS;
 8004e8e:	2110      	movs	r1, #16
 8004e90:	e02f      	b.n	8004ef2 <xMBMasterPortEventPost+0x82>
	    switch (xEvent)
 8004e92:	1e43      	subs	r3, r0, #1
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	2b1f      	cmp	r3, #31
 8004e98:	d81d      	bhi.n	8004ed6 <xMBMasterPortEventPost+0x66>
 8004e9a:	1e43      	subs	r3, r0, #1
 8004e9c:	2b1f      	cmp	r3, #31
 8004e9e:	d81a      	bhi.n	8004ed6 <xMBMasterPortEventPost+0x66>
 8004ea0:	e8df f003 	tbb	[pc, r3]
 8004ea4:	15191d1d 	.word	0x15191d1d
 8004ea8:	15191919 	.word	0x15191919
 8004eac:	19191919 	.word	0x19191919
 8004eb0:	15191919 	.word	0x15191919
 8004eb4:	19191919 	.word	0x19191919
 8004eb8:	19191919 	.word	0x19191919
 8004ebc:	19191919 	.word	0x19191919
 8004ec0:	15191919 	.word	0x15191919
 8004ec4:	2880      	cmp	r0, #128	; 0x80
 8004ec6:	d002      	beq.n	8004ece <xMBMasterPortEventPost+0x5e>
 8004ec8:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8004ecc:	d103      	bne.n	8004ed6 <xMBMasterPortEventPost+0x66>
		    case EV_MASTER_ERROR_RECEIVE_DATA:
		    case EV_MASTER_ERROR_EXECUTE_FUNCTION:
		    case EV_MASTER_EXECUTE:
		    case EV_MASTER_FRAME_SENT:
		    case EV_MASTER_PROCESS_SUCESS:
		    	xEventGroupSetBits(xMasterOsEventGroupHandle,xEvent);
 8004ece:	4b16      	ldr	r3, [pc, #88]	; (8004f28 <xMBMasterPortEventPost+0xb8>)
 8004ed0:	6818      	ldr	r0, [r3, #0]
 8004ed2:	f000 fd03 	bl	80058dc <xEventGroupSetBits>
		    default:
		    	break;
		}
 //   rt_event_send(&xMasterOsEvent, eEvent);
    return (TRUE);
}
 8004ed6:	2001      	movs	r0, #1
 8004ed8:	b003      	add	sp, #12
 8004eda:	f85d fb04 	ldr.w	pc, [sp], #4
		    		xHigherPriorityTaskWoken = pdFALSE;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	9301      	str	r3, [sp, #4]
		    		 if (xEvent == EV_MASTER_EXECUTE_ISR)
 8004ee2:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004ee6:	d019      	beq.n	8004f1c <xMBMasterPortEventPost+0xac>
		    				   xEvent = EV_MASTER_ERROR_PROCESS;
 8004ee8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004eec:	bf14      	ite	ne
 8004eee:	4601      	movne	r1, r0
 8004ef0:	2110      	moveq	r1, #16
		    		 xResult = xEventGroupSetBitsFromISR(
 8004ef2:	aa01      	add	r2, sp, #4
 8004ef4:	4b0c      	ldr	r3, [pc, #48]	; (8004f28 <xMBMasterPortEventPost+0xb8>)
 8004ef6:	6818      	ldr	r0, [r3, #0]
 8004ef8:	f000 fd3e 	bl	8005978 <xEventGroupSetBitsFromISR>
		    		  if( xResult != pdFAIL )
 8004efc:	2800      	cmp	r0, #0
 8004efe:	d0ea      	beq.n	8004ed6 <xMBMasterPortEventPost+0x66>
		    		      portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8004f00:	9b01      	ldr	r3, [sp, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d0e7      	beq.n	8004ed6 <xMBMasterPortEventPost+0x66>
 8004f06:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004f0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f0e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004f12:	f3bf 8f4f 	dsb	sy
 8004f16:	f3bf 8f6f 	isb	sy
 8004f1a:	e7dc      	b.n	8004ed6 <xMBMasterPortEventPost+0x66>
		    			 xEvent = EV_MASTER_EXECUTE;
 8004f1c:	2104      	movs	r1, #4
 8004f1e:	e7e8      	b.n	8004ef2 <xMBMasterPortEventPost+0x82>
		    		xHigherPriorityTaskWoken = pdFALSE;
 8004f20:	2300      	movs	r3, #0
 8004f22:	9301      	str	r3, [sp, #4]
		    			 xEvent = EV_MASTER_EXECUTE;
 8004f24:	2104      	movs	r1, #4
 8004f26:	e7e4      	b.n	8004ef2 <xMBMasterPortEventPost+0x82>
 8004f28:	20001bd0 	.word	0x20001bd0

08004f2c <xMBMasterPortEventGet>:

BOOL
xMBMasterPortEventGet( eMBMasterEventType * eEvent )
{
 8004f2c:	b530      	push	{r4, r5, lr}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	4605      	mov	r5, r0

	 EventBits_t recvedEvent;
	 recvedEvent = xEventGroupWaitBits(xMasterOsEventGroupHandle,    EV_MASTER_READY_ISR | EV_MASTER_FRAME_RECEIVED_ISR | EV_MASTER_EXECUTE |
 8004f32:	f04f 33ff 	mov.w	r3, #4294967295
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	2300      	movs	r3, #0
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	211f      	movs	r1, #31
 8004f3e:	4c11      	ldr	r4, [pc, #68]	; (8004f84 <xMBMasterPortEventGet+0x58>)
 8004f40:	6820      	ldr	r0, [r4, #0]
 8004f42:	f000 fc40 	bl	80057c6 <xEventGroupWaitBits>
            EV_MASTER_READY | EV_MASTER_FRAME_RECEIVED | EV_MASTER_EXECUTE |
            EV_MASTER_FRAME_SENT | EV_MASTER_ERROR_PROCESS,
            RT_EVENT_FLAG_OR | RT_EVENT_FLAG_CLEAR, RT_WAITING_FOREVER,
            &recvedEvent);
    /the enum type couldn't convert to int type */
    switch (recvedEvent)
 8004f46:	1e43      	subs	r3, r0, #1
 8004f48:	2b0f      	cmp	r3, #15
 8004f4a:	d80b      	bhi.n	8004f64 <xMBMasterPortEventGet+0x38>
 8004f4c:	e8df f003 	tbb	[pc, r3]
 8004f50:	100a0d08 	.word	0x100a0d08
 8004f54:	130a0a0a 	.word	0x130a0a0a
 8004f58:	0a0a0a0a 	.word	0x0a0a0a0a
 8004f5c:	160a0a0a 	.word	0x160a0a0a
    {
    case EV_MASTER_READY_ISR:
        *eEvent = EV_MASTER_READY_ISR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	802b      	strh	r3, [r5, #0]
    case EV_MASTER_ERROR_PROCESS:
        *eEvent = EV_MASTER_ERROR_PROCESS;
        break;
    }
    return TRUE;
}
 8004f64:	2001      	movs	r0, #1
 8004f66:	b003      	add	sp, #12
 8004f68:	bd30      	pop	{r4, r5, pc}
        *eEvent = EV_MASTER_FRAME_RECEIVED_ISR;
 8004f6a:	2302      	movs	r3, #2
 8004f6c:	802b      	strh	r3, [r5, #0]
        break;
 8004f6e:	e7f9      	b.n	8004f64 <xMBMasterPortEventGet+0x38>
        *eEvent = EV_MASTER_EXECUTE;
 8004f70:	2304      	movs	r3, #4
 8004f72:	802b      	strh	r3, [r5, #0]
        break;
 8004f74:	e7f6      	b.n	8004f64 <xMBMasterPortEventGet+0x38>
        *eEvent = EV_MASTER_FRAME_SENT;
 8004f76:	2308      	movs	r3, #8
 8004f78:	802b      	strh	r3, [r5, #0]
        break;
 8004f7a:	e7f3      	b.n	8004f64 <xMBMasterPortEventGet+0x38>
        *eEvent = EV_MASTER_ERROR_PROCESS;
 8004f7c:	2310      	movs	r3, #16
 8004f7e:	802b      	strh	r3, [r5, #0]
        break;
 8004f80:	e7f0      	b.n	8004f64 <xMBMasterPortEventGet+0x38>
 8004f82:	bf00      	nop
 8004f84:	20001bd0 	.word	0x20001bd0

08004f88 <vMBMasterOsResInit>:
 * This function is initialize the OS resource for modbus master.
 * Note:The resource is define by OS.If you not use OS this function can be empty.
 *
 */
void vMBMasterOsResInit( void )
{
 8004f88:	b508      	push	{r3, lr}
	xSem = xGetSystemSem();
 8004f8a:	f7fc fb53 	bl	8001634 <xGetSystemSem>
 8004f8e:	4b01      	ldr	r3, [pc, #4]	; (8004f94 <vMBMasterOsResInit+0xc>)
 8004f90:	6018      	str	r0, [r3, #0]
   // rt_sem_init(&xMasterRunRes, "master res", 0x01 , RT_IPC_FLAG_PRIO);
}
 8004f92:	bd08      	pop	{r3, pc}
 8004f94:	20001bd4 	.word	0x20001bd4

08004f98 <xMBMasterRunResTake>:
 * @param lTimeOut the waiting time.
 *
 * @return resource taked result
 */
BOOL xMBMasterRunResTake( LONG lTimeOut )
{
 8004f98:	b508      	push	{r3, lr}
 8004f9a:	4601      	mov	r1, r0
	//xSemaphoreTake(xSem, lTimeOut );
    //If waiting time is -1 .It will wait forever
    return xSemaphoreTake(xSem, portTICK_PERIOD_MS*lTimeOut  ) ? FALSE: TRUE ;
 8004f9c:	4b03      	ldr	r3, [pc, #12]	; (8004fac <xMBMasterRunResTake+0x14>)
 8004f9e:	6818      	ldr	r0, [r3, #0]
 8004fa0:	f001 f8b0 	bl	8006104 <xQueueSemaphoreTake>
	//return TRUE;
}
 8004fa4:	fab0 f080 	clz	r0, r0
 8004fa8:	0940      	lsrs	r0, r0, #5
 8004faa:	bd08      	pop	{r3, pc}
 8004fac:	20001bd4 	.word	0x20001bd4

08004fb0 <vMBMasterRunResRelease>:
 * This function is release Mobus Master running resource.
 * Note:The resource is define by Operating System.If you not use OS this function can be empty.
 *
 */
void vMBMasterRunResRelease( void )
{
 8004fb0:	b508      	push	{r3, lr}
    /* release resource */
	xSemaphoreGive(xSem);
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	4802      	ldr	r0, [pc, #8]	; (8004fc4 <vMBMasterRunResRelease+0x14>)
 8004fba:	6800      	ldr	r0, [r0, #0]
 8004fbc:	f000 febe 	bl	8005d3c <xQueueGenericSend>
   // rt_sem_release(&xMasterRunRes);
}
 8004fc0:	bd08      	pop	{r3, pc}
 8004fc2:	bf00      	nop
 8004fc4:	20001bd4 	.word	0x20001bd4

08004fc8 <vMBMasterErrorCBRespondTimeout>:
 * @param pucPDUData PDU buffer data
 * @param ucPDULength PDU buffer length
 *
 */
void vMBMasterErrorCBRespondTimeout(UCHAR ucDestAddress, const UCHAR* pucPDUData,
        USHORT ucPDULength) {
 8004fc8:	b508      	push	{r3, lr}
    /**
     * @note This code is use OS's event mechanism for modbus master protocol stack.
     * If you don't use OS, you can change it.
     */
   // rt_event_send(&xMasterOsEvent, EV_MASTER_ERROR_RESPOND_TIMEOUT);
	xEventGroupSetBits(xMasterOsEventGroupHandle,EV_MASTER_ERROR_RESPOND_TIMEOUT);
 8004fca:	2140      	movs	r1, #64	; 0x40
 8004fcc:	4b02      	ldr	r3, [pc, #8]	; (8004fd8 <vMBMasterErrorCBRespondTimeout+0x10>)
 8004fce:	6818      	ldr	r0, [r3, #0]
 8004fd0:	f000 fc84 	bl	80058dc <xEventGroupSetBits>
    /* You can add your code under here. */

}
 8004fd4:	bd08      	pop	{r3, pc}
 8004fd6:	bf00      	nop
 8004fd8:	20001bd0 	.word	0x20001bd0

08004fdc <vMBMasterErrorCBReceiveData>:
 * @param pucPDUData PDU buffer data
 * @param ucPDULength PDU buffer length
 *
 */
void vMBMasterErrorCBReceiveData(UCHAR ucDestAddress, const UCHAR* pucPDUData,
        USHORT ucPDULength) {
 8004fdc:	b508      	push	{r3, lr}
    /**
     * @note This code is use OS's event mechanism for modbus master protocol stack.
     * If you don't use OS, you can change it.
     */
  //  rt_event_send(&xMasterOsEvent, EV_MASTER_ERROR_RECEIVE_DATA);
	xEventGroupSetBits(xMasterOsEventGroupHandle,EV_MASTER_ERROR_RECEIVE_DATA);
 8004fde:	2180      	movs	r1, #128	; 0x80
 8004fe0:	4b02      	ldr	r3, [pc, #8]	; (8004fec <vMBMasterErrorCBReceiveData+0x10>)
 8004fe2:	6818      	ldr	r0, [r3, #0]
 8004fe4:	f000 fc7a 	bl	80058dc <xEventGroupSetBits>
    /* You can add your code under here. */

}
 8004fe8:	bd08      	pop	{r3, pc}
 8004fea:	bf00      	nop
 8004fec:	20001bd0 	.word	0x20001bd0

08004ff0 <vMBMasterErrorCBExecuteFunction>:
 * @param pucPDUData PDU buffer data
 * @param ucPDULength PDU buffer length
 *
 */
void vMBMasterErrorCBExecuteFunction(UCHAR ucDestAddress, const UCHAR* pucPDUData,
        USHORT ucPDULength) {
 8004ff0:	b508      	push	{r3, lr}
    /**
     * @note This code is use OS's event mechanism for modbus master protocol stack.
     * If you don't use OS, you can change it.
     */
   // rt_event_send(&xMasterOsEvent, EV_MASTER_ERROR_EXECUTE_FUNCTION);
	xEventGroupSetBits(xMasterOsEventGroupHandle,EV_MASTER_ERROR_EXECUTE_FUNCTION);
 8004ff2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ff6:	4b02      	ldr	r3, [pc, #8]	; (8005000 <vMBMasterErrorCBExecuteFunction+0x10>)
 8004ff8:	6818      	ldr	r0, [r3, #0]
 8004ffa:	f000 fc6f 	bl	80058dc <xEventGroupSetBits>
    /* You can add your code under here. */

}
 8004ffe:	bd08      	pop	{r3, pc}
 8005000:	20001bd0 	.word	0x20001bd0

08005004 <vMBMasterCBRequestScuuess>:
 * This is modbus master request process success callback function.
 * @note There functions will block modbus master poll while execute OS waiting.
 * So,for real-time of system.Do not execute too much waiting process.
 *
 */
void vMBMasterCBRequestScuuess( void ) {
 8005004:	b508      	push	{r3, lr}
    /**
     * @note This code is use OS's event mechanism for modbus master protocol stack.
     * If you don't use OS, you can change it.
     */
  //  rt_event_send(&xMasterOsEvent, EV_MASTER_PROCESS_SUCESS);
	xEventGroupSetBits(xMasterOsEventGroupHandle,EV_MASTER_PROCESS_SUCESS);
 8005006:	2120      	movs	r1, #32
 8005008:	4b02      	ldr	r3, [pc, #8]	; (8005014 <vMBMasterCBRequestScuuess+0x10>)
 800500a:	6818      	ldr	r0, [r3, #0]
 800500c:	f000 fc66 	bl	80058dc <xEventGroupSetBits>
    /* You can add your code under here. */

}
 8005010:	bd08      	pop	{r3, pc}
 8005012:	bf00      	nop
 8005014:	20001bd0 	.word	0x20001bd0

08005018 <eMBMasterWaitRequestFinish>:
 * @note If you are use OS, you can use OS's event mechanism. Otherwise you have to run
 * much user custom delay for waiting.
 *
 * @return request error code
 */
eMBMasterReqErrCode eMBMasterWaitRequestFinish( void ) {
 8005018:	b500      	push	{lr}
 800501a:	b083      	sub	sp, #12
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;
 //   rt_uint32_t recvedEvent;
    /* waiting for OS event */

    EventBits_t recvedEvent;
   	 recvedEvent = xEventGroupWaitBits(xMasterOsEventGroupHandle,   EV_MASTER_PROCESS_SUCESS | EV_MASTER_ERROR_RESPOND_TIMEOUT
 800501c:	f04f 33ff 	mov.w	r3, #4294967295
 8005020:	9300      	str	r3, [sp, #0]
 8005022:	2300      	movs	r3, #0
 8005024:	2201      	movs	r2, #1
 8005026:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800502a:	480d      	ldr	r0, [pc, #52]	; (8005060 <eMBMasterWaitRequestFinish+0x48>)
 800502c:	6800      	ldr	r0, [r0, #0]
 800502e:	f000 fbca 	bl	80057c6 <xEventGroupWaitBits>
                    | EV_MASTER_ERROR_RECEIVE_DATA
                    | EV_MASTER_ERROR_EXECUTE_FUNCTION,
            RT_EVENT_FLAG_OR | RT_EVENT_FLAG_CLEAR, RT_WAITING_FOREVER,
            &recvedEvent);
            */
    switch (recvedEvent)
 8005032:	2880      	cmp	r0, #128	; 0x80
 8005034:	d00f      	beq.n	8005056 <eMBMasterWaitRequestFinish+0x3e>
 8005036:	d808      	bhi.n	800504a <eMBMasterWaitRequestFinish+0x32>
 8005038:	2820      	cmp	r0, #32
 800503a:	d00e      	beq.n	800505a <eMBMasterWaitRequestFinish+0x42>
 800503c:	2840      	cmp	r0, #64	; 0x40
 800503e:	bf14      	ite	ne
 8005040:	2037      	movne	r0, #55	; 0x37
 8005042:	2004      	moveq	r0, #4
    default:
    	eErrStatus = 55;
    	break;
    }
    return eErrStatus;
}
 8005044:	b003      	add	sp, #12
 8005046:	f85d fb04 	ldr.w	pc, [sp], #4
        eErrStatus = MB_MRE_EXE_FUN;
 800504a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800504e:	bf14      	ite	ne
 8005050:	2037      	movne	r0, #55	; 0x37
 8005052:	2006      	moveq	r0, #6
 8005054:	e7f6      	b.n	8005044 <eMBMasterWaitRequestFinish+0x2c>
        eErrStatus = MB_MRE_REV_DATA;
 8005056:	2003      	movs	r0, #3
 8005058:	e7f4      	b.n	8005044 <eMBMasterWaitRequestFinish+0x2c>
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;
 800505a:	2000      	movs	r0, #0
 800505c:	e7f2      	b.n	8005044 <eMBMasterWaitRequestFinish+0x2c>
 800505e:	bf00      	nop
 8005060:	20001bd0 	.word	0x20001bd0

08005064 <xMBMasterPortSerialInit>:
//static rt_err_t serial_rx_ind(rt_device_t dev, rt_size_t size);
//static void serial_soft_trans_irq(void* parameter);

/* ----------------------- Start implementation -----------------------------*/
BOOL xMBMasterPortSerialInit(UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity)
{
 8005064:	b538      	push	{r3, r4, r5, lr}
 8005066:	460d      	mov	r5, r1
 8005068:	461c      	mov	r4, r3
	xSerialEventGroupHandle = xGetUARTEvent();
 800506a:	f7fc fad7 	bl	800161c <xGetUARTEvent>
 800506e:	4b11      	ldr	r3, [pc, #68]	; (80050b4 <xMBMasterPortSerialInit+0x50>)
 8005070:	6018      	str	r0, [r3, #0]
     * set 485 mode receive and transmit control IO
     * @note MODBUS_MASTER_RT_CONTROL_PIN_INDEX need be defined by user
     */
   // rt_pin_mode(MODBUS_MASTER_RT_CONTROL_PIN_INDEX, PIN_MODE_OUTPUT);

    huart1.Init.BaudRate = ulBaudRate;
 8005072:	4b11      	ldr	r3, [pc, #68]	; (80050b8 <xMBMasterPortSerialInit+0x54>)
 8005074:	605d      	str	r5, [r3, #4]
     huart1.Init.StopBits = UART_STOPBITS_1;
 8005076:	2200      	movs	r2, #0
 8005078:	60da      	str	r2, [r3, #12]

    switch(eParity)
 800507a:	2c01      	cmp	r4, #1
 800507c:	d00a      	beq.n	8005094 <xMBMasterPortSerialInit+0x30>
 800507e:	2c02      	cmp	r4, #2
 8005080:	d010      	beq.n	80050a4 <xMBMasterPortSerialInit+0x40>
 8005082:	b124      	cbz	r4, 800508e <xMBMasterPortSerialInit+0x2a>
    		huart1.Init.Parity = UART_PARITY_EVEN;
    		break;
    }
    /* set serial configure */

    HAL_UART_Init(&huart1);
 8005084:	480c      	ldr	r0, [pc, #48]	; (80050b8 <xMBMasterPortSerialInit+0x54>)
 8005086:	f7fe fe85 	bl	8003d94 <HAL_UART_Init>
        //           sizeof(serial_soft_trans_irq_stack),
         //          10, 5);
    //rt_thread_startup(&thread_serial_soft_trans_irq);

    return TRUE;
}
 800508a:	2001      	movs	r0, #1
 800508c:	bd38      	pop	{r3, r4, r5, pc}
    		huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800508e:	609a      	str	r2, [r3, #8]
    		huart1.Init.Parity = UART_PARITY_NONE;
 8005090:	611a      	str	r2, [r3, #16]
    		break;
 8005092:	e7f7      	b.n	8005084 <xMBMasterPortSerialInit+0x20>
    		huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8005094:	4b08      	ldr	r3, [pc, #32]	; (80050b8 <xMBMasterPortSerialInit+0x54>)
 8005096:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800509a:	609a      	str	r2, [r3, #8]
    	  	huart1.Init.Parity = UART_PARITY_ODD;
 800509c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80050a0:	611a      	str	r2, [r3, #16]
    	  	break;
 80050a2:	e7ef      	b.n	8005084 <xMBMasterPortSerialInit+0x20>
    		huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80050a4:	4b04      	ldr	r3, [pc, #16]	; (80050b8 <xMBMasterPortSerialInit+0x54>)
 80050a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80050aa:	609a      	str	r2, [r3, #8]
    		huart1.Init.Parity = UART_PARITY_EVEN;
 80050ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050b0:	611a      	str	r2, [r3, #16]
    		break;
 80050b2:	e7e7      	b.n	8005084 <xMBMasterPortSerialInit+0x20>
 80050b4:	20001bdc 	.word	0x20001bdc
 80050b8:	200017dc 	.word	0x200017dc

080050bc <vMBMasterPortSerialEnable>:

void vMBMasterPortSerialEnable(BOOL xRxEnable, BOOL xTxEnable)
{
 80050bc:	b510      	push	{r4, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	460c      	mov	r4, r1
 //   rt_uint32_t recved_event;
    if (xRxEnable)
 80050c2:	b190      	cbz	r0, 80050ea <vMBMasterPortSerialEnable+0x2e>
    {
    	HAL_UART_Receive_IT(&huart1,&rx_data_buf,1);
 80050c4:	2201      	movs	r2, #1
 80050c6:	4912      	ldr	r1, [pc, #72]	; (8005110 <vMBMasterPortSerialEnable+0x54>)
 80050c8:	4812      	ldr	r0, [pc, #72]	; (8005114 <vMBMasterPortSerialEnable+0x58>)
 80050ca:	f7ff f92c 	bl	8004326 <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(GPIOA,EN_Pin,GPIO_PIN_RESET);
 80050ce:	2200      	movs	r2, #0
 80050d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050d4:	4810      	ldr	r0, [pc, #64]	; (8005118 <vMBMasterPortSerialEnable+0x5c>)
 80050d6:	f7fd fe51 	bl	8002d7c <HAL_GPIO_WritePin>
        /* switch 485 to transmit mode */
    //    rt_pin_write(MODBUS_MASTER_RT_CONTROL_PIN_INDEX, PIN_HIGH);
        /* disable RX interrupt */
      //  serial->ops->control(serial, RT_DEVICE_CTRL_CLR_INT, (void *)RT_DEVICE_FLAG_INT_RX);
    }
    if (xTxEnable)
 80050da:	b184      	cbz	r4, 80050fe <vMBMasterPortSerialEnable+0x42>
    {
        /* start serial transmit */

    	xEventGroupSetBits(xSerialEventGroupHandle,EVENT_SERIAL_TRANS_START);
 80050dc:	2101      	movs	r1, #1
 80050de:	4b0f      	ldr	r3, [pc, #60]	; (800511c <vMBMasterPortSerialEnable+0x60>)
 80050e0:	6818      	ldr	r0, [r3, #0]
 80050e2:	f000 fbfb 	bl	80058dc <xEventGroupSetBits>
    	xEventGroupWaitBits( xSerialEventGroupHandle,  EVENT_SERIAL_TRANS_START,  pdTRUE, pdFALSE, 0 );
      //  rt_event_recv(&event_serial, EVENT_SERIAL_TRANS_START,
       //         RT_EVENT_FLAG_OR | RT_EVENT_FLAG_CLEAR, 0,
        //        &recved_event);
    }
}
 80050e6:	b002      	add	sp, #8
 80050e8:	bd10      	pop	{r4, pc}
	HAL_GPIO_WritePin(GPIOA,EN_Pin,GPIO_PIN_SET);
 80050ea:	2201      	movs	r2, #1
 80050ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050f0:	4809      	ldr	r0, [pc, #36]	; (8005118 <vMBMasterPortSerialEnable+0x5c>)
 80050f2:	f7fd fe43 	bl	8002d7c <HAL_GPIO_WritePin>
    	HAL_UART_AbortReceive_IT(&huart1);
 80050f6:	4807      	ldr	r0, [pc, #28]	; (8005114 <vMBMasterPortSerialEnable+0x58>)
 80050f8:	f7fe fea2 	bl	8003e40 <HAL_UART_AbortReceive_IT>
 80050fc:	e7ed      	b.n	80050da <vMBMasterPortSerialEnable+0x1e>
    	xEventGroupWaitBits( xSerialEventGroupHandle,  EVENT_SERIAL_TRANS_START,  pdTRUE, pdFALSE, 0 );
 80050fe:	2300      	movs	r3, #0
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	2201      	movs	r2, #1
 8005104:	4611      	mov	r1, r2
 8005106:	4805      	ldr	r0, [pc, #20]	; (800511c <vMBMasterPortSerialEnable+0x60>)
 8005108:	6800      	ldr	r0, [r0, #0]
 800510a:	f000 fb5c 	bl	80057c6 <xEventGroupWaitBits>
}
 800510e:	e7ea      	b.n	80050e6 <vMBMasterPortSerialEnable+0x2a>
 8005110:	20001bd9 	.word	0x20001bd9
 8005114:	200017dc 	.word	0x200017dc
 8005118:	40010800 	.word	0x40010800
 800511c:	20001bdc 	.word	0x20001bdc

08005120 <xMBMasterPortSerialPutByte>:
{
   // serial->parent.close(&(serial->parent));
}

BOOL xMBMasterPortSerialPutByte(CHAR ucByte)
{
 8005120:	b500      	push	{lr}
 8005122:	b083      	sub	sp, #12
 8005124:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_UART_Transmit_IT(&huart1,(uint8_t *) &ucByte, 1);
 8005128:	2201      	movs	r2, #1
 800512a:	f10d 0107 	add.w	r1, sp, #7
 800512e:	4803      	ldr	r0, [pc, #12]	; (800513c <xMBMasterPortSerialPutByte+0x1c>)
 8005130:	f7fe fe60 	bl	8003df4 <HAL_UART_Transmit_IT>
  //  serial->parent.write(&(serial->parent), 0, &ucByte, 1);
    return TRUE;
}
 8005134:	2001      	movs	r0, #1
 8005136:	b003      	add	sp, #12
 8005138:	f85d fb04 	ldr.w	pc, [sp], #4
 800513c:	200017dc 	.word	0x200017dc

08005140 <xMBMasterPortSerialGetByte>:

BOOL xMBMasterPortSerialGetByte(CHAR * pucByte)
{
	* pucByte = rx_data;
 8005140:	4b02      	ldr	r3, [pc, #8]	; (800514c <xMBMasterPortSerialGetByte+0xc>)
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	7003      	strb	r3, [r0, #0]
 //   serial->parent.read(&(serial->parent), 0, pucByte, 1);
    return TRUE;
}
 8005146:	2001      	movs	r0, #1
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	20001bd8 	.word	0x20001bd8

08005150 <HAL_UART_TxCpltCallback>:


#ifdef MASTER_MODE

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005150:	b500      	push	{lr}
 8005152:	b083      	sub	sp, #12

	BaseType_t xHigherPriorityTaskWoken, xResult;
	/* xHigherPriorityTaskWoken must be initialised to pdFALSE. */
	xHigherPriorityTaskWoken = pdFALSE;
 8005154:	2300      	movs	r3, #0
 8005156:	9301      	str	r3, [sp, #4]

	 /* Set bit 0 and bit 4 in xEventGroup. */
	 xResult = xEventGroupSetBitsFromISR(
 8005158:	aa01      	add	r2, sp, #4
 800515a:	2101      	movs	r1, #1
 800515c:	4b09      	ldr	r3, [pc, #36]	; (8005184 <HAL_UART_TxCpltCallback+0x34>)
 800515e:	6818      	ldr	r0, [r3, #0]
 8005160:	f000 fc0a 	bl	8005978 <xEventGroupSetBitsFromISR>
			 	 	 	 	 	   xSerialEventGroupHandle,   /* The event group being updated. */
								   EVENT_SERIAL_TRANS_START, /* The bits being set. */
	                              &xHigherPriorityTaskWoken );

	  /* Was the message posted successfully? */
	  if( xResult != pdFAIL )
 8005164:	b158      	cbz	r0, 800517e <HAL_UART_TxCpltCallback+0x2e>
	  {
	      /* If xHigherPriorityTaskWoken is now set to pdTRUE then a context
	      switch should be requested.  The macro used is port specific and will
	      be either portYIELD_FROM_ISR() or portEND_SWITCHING_ISR() - refer to
	      the documentation page for the port being used. */
	      portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8005166:	9b01      	ldr	r3, [sp, #4]
 8005168:	b14b      	cbz	r3, 800517e <HAL_UART_TxCpltCallback+0x2e>
 800516a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800516e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005172:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005176:	f3bf 8f4f 	dsb	sy
 800517a:	f3bf 8f6f 	isb	sy
	  }
}
 800517e:	b003      	add	sp, #12
 8005180:	f85d fb04 	ldr.w	pc, [sp], #4
 8005184:	20001bdc 	.word	0x20001bdc

08005188 <StartUARTTask>:



void StartUARTTask(void *argument)
{
 8005188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800518a:	b083      	sub	sp, #12
	  EventBits_t uxBits;
	  xSerialEventGroupHandle = xGetUARTEvent();
 800518c:	f7fc fa46 	bl	800161c <xGetUARTEvent>
 8005190:	4b09      	ldr	r3, [pc, #36]	; (80051b8 <StartUARTTask+0x30>)
 8005192:	6018      	str	r0, [r3, #0]
	  while(1)
	  {
		  uxBits = xEventGroupWaitBits( xSerialEventGroupHandle,  EVENT_SERIAL_TRANS_START,  pdTRUE, pdTRUE, portMAX_DELAY );
 8005194:	461e      	mov	r6, r3
 8005196:	f04f 35ff 	mov.w	r5, #4294967295
		  switch (uxBits)
		  {
		  	  	  case EVENT_SERIAL_TRANS_START:
		  	  		 pxMBMasterFrameCBTransmitterEmpty();
 800519a:	4f08      	ldr	r7, [pc, #32]	; (80051bc <StartUARTTask+0x34>)
		  uxBits = xEventGroupWaitBits( xSerialEventGroupHandle,  EVENT_SERIAL_TRANS_START,  pdTRUE, pdTRUE, portMAX_DELAY );
 800519c:	2401      	movs	r4, #1
 800519e:	9500      	str	r5, [sp, #0]
 80051a0:	4623      	mov	r3, r4
 80051a2:	4622      	mov	r2, r4
 80051a4:	4621      	mov	r1, r4
 80051a6:	6830      	ldr	r0, [r6, #0]
 80051a8:	f000 fb0d 	bl	80057c6 <xEventGroupWaitBits>
		  switch (uxBits)
 80051ac:	2801      	cmp	r0, #1
 80051ae:	d1f6      	bne.n	800519e <StartUARTTask+0x16>
		  	  		 pxMBMasterFrameCBTransmitterEmpty();
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	4798      	blx	r3

		  	  		  break;
 80051b4:	e7f2      	b.n	800519c <StartUARTTask+0x14>
 80051b6:	bf00      	nop
 80051b8:	20001bdc 	.word	0x20001bdc
 80051bc:	20001988 	.word	0x20001988

080051c0 <HAL_UART_RxCpltCallback>:


}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80051c0:	b508      	push	{r3, lr}
	rx_data = rx_data_buf;
 80051c2:	4906      	ldr	r1, [pc, #24]	; (80051dc <HAL_UART_RxCpltCallback+0x1c>)
 80051c4:	780a      	ldrb	r2, [r1, #0]
 80051c6:	4b06      	ldr	r3, [pc, #24]	; (80051e0 <HAL_UART_RxCpltCallback+0x20>)
 80051c8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1,&rx_data_buf,1);
 80051ca:	2201      	movs	r2, #1
 80051cc:	4805      	ldr	r0, [pc, #20]	; (80051e4 <HAL_UART_RxCpltCallback+0x24>)
 80051ce:	f7ff f8aa 	bl	8004326 <HAL_UART_Receive_IT>
	pxMBMasterFrameCBByteReceived();
 80051d2:	4b05      	ldr	r3, [pc, #20]	; (80051e8 <HAL_UART_RxCpltCallback+0x28>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4798      	blx	r3
}
 80051d8:	bd08      	pop	{r3, pc}
 80051da:	bf00      	nop
 80051dc:	20001bd9 	.word	0x20001bd9
 80051e0:	20001bd8 	.word	0x20001bd8
 80051e4:	200017dc 	.word	0x200017dc
 80051e8:	20001984 	.word	0x20001984

080051ec <xMBMasterPortTimersInit>:
/* ----------------------- static functions ---------------------------------*/


/* ----------------------- Start implementation -----------------------------*/
BOOL xMBMasterPortTimersInit(USHORT usTimeOut50us)
{
 80051ec:	b508      	push	{r3, lr}
    /* backup T35 ticks */
    usT35TimeOut50us = usTimeOut50us;
    vTimerInit( usT35TimeOut50us);
 80051ee:	f7fc fa27 	bl	8001640 <vTimerInit>
 //                  RT_NULL,
 //                  (50 * usT35TimeOut50us) / (1000 * 1000 / RT_TICK_PER_SECOND) + 1,
 //                  RT_TIMER_FLAG_ONE_SHOT); /* one shot */

    return TRUE;
}
 80051f2:	2001      	movs	r0, #1
 80051f4:	bd08      	pop	{r3, pc}

080051f6 <vMBMasterPortTimersT35Enable>:

void vMBMasterPortTimersT35Enable()
{
 80051f6:	b508      	push	{r3, lr}
   // rt_tick_t timer_tick = (50 * usT35TimeOut50us)
   //         / (1000 * 1000 / RT_TICK_PER_SECOND);
//
    /* Set current timer mode, don't change it.*/
    vMBMasterSetCurTimerMode(MB_TMODE_T35);
 80051f8:	2000      	movs	r0, #0
 80051fa:	f7ff fdf3 	bl	8004de4 <vMBMasterSetCurTimerMode>
 //   vTimerInit( usT35TimeOut50us);
   // rt_timer_control(&timer, RT_TIMER_CTRL_SET_TIME, &timer_tick);

    vStartTimer();
 80051fe:	f7fc fa39 	bl	8001674 <vStartTimer>
  //  rt_timer_start(&timer);
}
 8005202:	bd08      	pop	{r3, pc}

08005204 <vMBMasterPortTimersConvertDelayEnable>:

void vMBMasterPortTimersConvertDelayEnable()
{
 8005204:	b508      	push	{r3, lr}
 //  rt_tick_t timer_tick = MB_MASTER_DELAY_MS_CONVERT * RT_TICK_PER_SECOND / 1000;

    /* Set current timer mode, don't change it.*/
    vMBMasterSetCurTimerMode(MB_TMODE_CONVERT_DELAY);
 8005206:	2002      	movs	r0, #2
 8005208:	f7ff fdec 	bl	8004de4 <vMBMasterSetCurTimerMode>
    vRespondInit(MB_MASTER_DELAY_MS_CONVERT);
 800520c:	20c8      	movs	r0, #200	; 0xc8
 800520e:	f7fc fa47 	bl	80016a0 <vRespondInit>
 //   rt_timer_control(&timer, RT_TIMER_CTRL_SET_TIME, &timer_tick);

    vStartRespond();
 8005212:	f7fc fa57 	bl	80016c4 <vStartRespond>
 //   rt_timer_start(&timer);
}
 8005216:	bd08      	pop	{r3, pc}

08005218 <vMBMasterPortTimersRespondTimeoutEnable>:

void vMBMasterPortTimersRespondTimeoutEnable()
{
 8005218:	b508      	push	{r3, lr}
  //  rt_tick_t timer_tick = MB_MASTER_TIMEOUT_MS_RESPOND * RT_TICK_PER_SECOND / 1000;

    /* Set current timer mode, don't change it.*/
    vMBMasterSetCurTimerMode(MB_TMODE_RESPOND_TIMEOUT);
 800521a:	2001      	movs	r0, #1
 800521c:	f7ff fde2 	bl	8004de4 <vMBMasterSetCurTimerMode>
    vRespondInit(MB_MASTER_TIMEOUT_MS_RESPOND);
 8005220:	2064      	movs	r0, #100	; 0x64
 8005222:	f7fc fa3d 	bl	80016a0 <vRespondInit>

    vStartRespond();
 8005226:	f7fc fa4d 	bl	80016c4 <vStartRespond>
  //  rt_timer_control(&timer, RT_TIMER_CTRL_SET_TIME, &timer_tick);

  //  rt_timer_start(&timer);
}
 800522a:	bd08      	pop	{r3, pc}

0800522c <vMBMasterPortTimersDisable>:

void vMBMasterPortTimersDisable()
{
 800522c:	b508      	push	{r3, lr}
	vStopTimer();
 800522e:	f7fc fa2f 	bl	8001690 <vStopTimer>
	vStopRespond();
 8005232:	f7fc fa59 	bl	80016e8 <vStopRespond>
  //  rt_timer_stop(&timer);
}
 8005236:	bd08      	pop	{r3, pc}

08005238 <prvvTIMERExpiredISR>:
#ifdef MASTER_MODE
void prvvTIMERExpiredISR(void)
{
 8005238:	b508      	push	{r3, lr}
    (void) pxMBMasterPortCBTimerExpired();
 800523a:	4b02      	ldr	r3, [pc, #8]	; (8005244 <prvvTIMERExpiredISR+0xc>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4798      	blx	r3
}
 8005240:	bd08      	pop	{r3, pc}
 8005242:	bf00      	nop
 8005244:	2000198c 	.word	0x2000198c

08005248 <eMBMasterRegInputCB>:
 * @param usNRegs input register number
 *
 * @return result
 */
eMBErrorCode eMBMasterRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
 8005248:	b570      	push	{r4, r5, r6, lr}
 800524a:	4605      	mov	r5, r0
 800524c:	460c      	mov	r4, r1
 800524e:	4616      	mov	r6, r2
    USHORT *        pusRegInputBuf;
    USHORT          REG_INPUT_START;
    USHORT          REG_INPUT_NREGS;
    USHORT          usRegInStart;

    pusRegInputBuf = usMRegInBuf[ucMBMasterGetDestAddress() - 1];
 8005250:	f7ff f9d0 	bl	80045f4 <ucMBMasterGetDestAddress>
    REG_INPUT_START = M_REG_INPUT_START;
    REG_INPUT_NREGS = M_REG_INPUT_NREGS;
    usRegInStart = usMRegInStart;

    /* it already plus one in modbus function method. */
    usAddress--;
 8005254:	1e63      	subs	r3, r4, #1
 8005256:	b29b      	uxth	r3, r3

    if ((usAddress >= REG_INPUT_START)
 8005258:	2b04      	cmp	r3, #4
 800525a:	d91f      	bls.n	800529c <eMBMasterRegInputCB+0x54>
            && (usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS))
 800525c:	199a      	adds	r2, r3, r6
 800525e:	2a0d      	cmp	r2, #13
 8005260:	dc1e      	bgt.n	80052a0 <eMBMasterRegInputCB+0x58>
    usRegInStart = usMRegInStart;
 8005262:	4a11      	ldr	r2, [pc, #68]	; (80052a8 <eMBMasterRegInputCB+0x60>)
    {
        iRegIndex = usAddress - usRegInStart;
 8005264:	8812      	ldrh	r2, [r2, #0]
 8005266:	1a9b      	subs	r3, r3, r2
 8005268:	b29b      	uxth	r3, r3
        while (usNRegs > 0)
 800526a:	b1de      	cbz	r6, 80052a4 <eMBMasterRegInputCB+0x5c>
    pusRegInputBuf = usMRegInBuf[ucMBMasterGetDestAddress() - 1];
 800526c:	3801      	subs	r0, #1
 800526e:	0104      	lsls	r4, r0, #4
 8005270:	1ca8      	adds	r0, r5, #2
 8005272:	441e      	add	r6, r3
 8005274:	b2b6      	uxth	r6, r6
        {
            pusRegInputBuf[iRegIndex] = *pucRegBuffer++ << 8;
 8005276:	4d0d      	ldr	r5, [pc, #52]	; (80052ac <eMBMasterRegInputCB+0x64>)
 8005278:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 800527c:	f810 2c02 	ldrb.w	r2, [r0, #-2]
 8005280:	0212      	lsls	r2, r2, #8
 8005282:	526a      	strh	r2, [r5, r1]
            pusRegInputBuf[iRegIndex] |= *pucRegBuffer++;
 8005284:	f810 cc01 	ldrb.w	ip, [r0, #-1]
 8005288:	ea42 020c 	orr.w	r2, r2, ip
 800528c:	526a      	strh	r2, [r5, r1]
            iRegIndex++;
 800528e:	3301      	adds	r3, #1
 8005290:	b29b      	uxth	r3, r3
        while (usNRegs > 0)
 8005292:	3002      	adds	r0, #2
 8005294:	42b3      	cmp	r3, r6
 8005296:	d1ef      	bne.n	8005278 <eMBMasterRegInputCB+0x30>
    eMBErrorCode    eStatus = MB_ENOERR;
 8005298:	2000      	movs	r0, #0
 800529a:	e000      	b.n	800529e <eMBMasterRegInputCB+0x56>
            usNRegs--;
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 800529c:	2001      	movs	r0, #1
    }

    return eStatus;
}
 800529e:	bd70      	pop	{r4, r5, r6, pc}
        eStatus = MB_ENOREG;
 80052a0:	2001      	movs	r0, #1
 80052a2:	e7fc      	b.n	800529e <eMBMasterRegInputCB+0x56>
    eMBErrorCode    eStatus = MB_ENOERR;
 80052a4:	2000      	movs	r0, #0
 80052a6:	e7fa      	b.n	800529e <eMBMasterRegInputCB+0x56>
 80052a8:	20000016 	.word	0x20000016
 80052ac:	20001fc4 	.word	0x20001fc4

080052b0 <eMBMasterRegHoldingCB>:
 *
 * @return result
 */
eMBErrorCode eMBMasterRegHoldingCB(UCHAR * pucRegBuffer, USHORT usAddress,
        USHORT usNRegs, eMBRegisterMode eMode)
{
 80052b0:	b570      	push	{r4, r5, r6, lr}
 80052b2:	4605      	mov	r5, r0
 80052b4:	460c      	mov	r4, r1
 80052b6:	4616      	mov	r6, r2
    USHORT *        pusRegHoldingBuf;
    USHORT          REG_HOLDING_START;
    USHORT          REG_HOLDING_NREGS;
    USHORT          usRegHoldStart;

    pusRegHoldingBuf = usMRegHoldBuf[ucMBMasterGetDestAddress() - 1];
 80052b8:	f7ff f99c 	bl	80045f4 <ucMBMasterGetDestAddress>
    usRegHoldStart = usMRegHoldStart;
    /* if mode is read, the master will write the received date to buffer. */
    eMode = MB_REG_WRITE;

    /* it already plus one in modbus function method. */
    usAddress--;
 80052bc:	1e63      	subs	r3, r4, #1
 80052be:	b29b      	uxth	r3, r3

    if ((usAddress >= REG_HOLDING_START)
 80052c0:	2b0c      	cmp	r3, #12
 80052c2:	d921      	bls.n	8005308 <eMBMasterRegHoldingCB+0x58>
            && (usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS))
 80052c4:	199a      	adds	r2, r3, r6
 80052c6:	2a2b      	cmp	r2, #43	; 0x2b
 80052c8:	dc20      	bgt.n	800530c <eMBMasterRegHoldingCB+0x5c>
    usRegHoldStart = usMRegHoldStart;
 80052ca:	4a12      	ldr	r2, [pc, #72]	; (8005314 <eMBMasterRegHoldingCB+0x64>)
    {
        iRegIndex = usAddress - usRegHoldStart;
 80052cc:	8812      	ldrh	r2, [r2, #0]
 80052ce:	1a9b      	subs	r3, r3, r2
 80052d0:	b29b      	uxth	r3, r3
                usNRegs--;
            }
            break;
        /* write current register values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (usNRegs > 0)
 80052d2:	b1ee      	cbz	r6, 8005310 <eMBMasterRegHoldingCB+0x60>
    pusRegHoldingBuf = usMRegHoldBuf[ucMBMasterGetDestAddress() - 1];
 80052d4:	3801      	subs	r0, #1
 80052d6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80052da:	0081      	lsls	r1, r0, #2
 80052dc:	1ca8      	adds	r0, r5, #2
 80052de:	441e      	add	r6, r3
 80052e0:	b2b6      	uxth	r6, r6
            {
                pusRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
 80052e2:	4d0d      	ldr	r5, [pc, #52]	; (8005318 <eMBMasterRegHoldingCB+0x68>)
 80052e4:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 80052e8:	f810 2c02 	ldrb.w	r2, [r0, #-2]
 80052ec:	0212      	lsls	r2, r2, #8
 80052ee:	532a      	strh	r2, [r5, r4]
                pusRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
 80052f0:	f810 cc01 	ldrb.w	ip, [r0, #-1]
 80052f4:	ea42 020c 	orr.w	r2, r2, ip
 80052f8:	532a      	strh	r2, [r5, r4]
                iRegIndex++;
 80052fa:	3301      	adds	r3, #1
 80052fc:	b29b      	uxth	r3, r3
            while (usNRegs > 0)
 80052fe:	3002      	adds	r0, #2
 8005300:	42b3      	cmp	r3, r6
 8005302:	d1ef      	bne.n	80052e4 <eMBMasterRegHoldingCB+0x34>
    eMBErrorCode    eStatus = MB_ENOERR;
 8005304:	2000      	movs	r0, #0
 8005306:	e000      	b.n	800530a <eMBMasterRegHoldingCB+0x5a>
            break;
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8005308:	2001      	movs	r0, #1
    }
    return eStatus;
}
 800530a:	bd70      	pop	{r4, r5, r6, pc}
        eStatus = MB_ENOREG;
 800530c:	2001      	movs	r0, #1
 800530e:	e7fc      	b.n	800530a <eMBMasterRegHoldingCB+0x5a>
    eMBErrorCode    eStatus = MB_ENOERR;
 8005310:	2000      	movs	r0, #0
 8005312:	e7fa      	b.n	800530a <eMBMasterRegHoldingCB+0x5a>
 8005314:	20000014 	.word	0x20000014
 8005318:	20001c04 	.word	0x20001c04

0800531c <eMBMasterRegCoilsCB>:
 *
 * @return result
 */
eMBErrorCode eMBMasterRegCoilsCB(UCHAR * pucRegBuffer, USHORT usAddress,
        USHORT usNCoils, eMBRegisterMode eMode)
{
 800531c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005320:	b083      	sub	sp, #12
 8005322:	4606      	mov	r6, r0
 8005324:	460c      	mov	r4, r1
 8005326:	4690      	mov	r8, r2
    USHORT          COIL_START;
    USHORT          COIL_NCOILS;
    USHORT          usCoilStart;
    iNReg =  usNCoils / 8 + 1;

    pucCoilBuf = ucMCoilBuf[ucMBMasterGetDestAddress() - 1];
 8005328:	f7ff f964 	bl	80045f4 <ucMBMasterGetDestAddress>

    /* if mode is read,the master will write the received date to buffer. */
    eMode = MB_REG_WRITE;

    /* it already plus one in modbus function method. */
    usAddress--;
 800532c:	3c01      	subs	r4, #1
 800532e:	b2a4      	uxth	r4, r4

    if ((usAddress >= COIL_START)
 8005330:	b3c4      	cbz	r4, 80053a4 <eMBMasterRegCoilsCB+0x88>
            && (usAddress + usNCoils <= COIL_START + COIL_NCOILS))
 8005332:	eb04 0308 	add.w	r3, r4, r8
 8005336:	2b05      	cmp	r3, #5
 8005338:	dc38      	bgt.n	80053ac <eMBMasterRegCoilsCB+0x90>
    iNReg =  usNCoils / 8 + 1;
 800533a:	ea4f 02d8 	mov.w	r2, r8, lsr #3
 800533e:	9201      	str	r2, [sp, #4]
    pucCoilBuf = ucMCoilBuf[ucMBMasterGetDestAddress() - 1];
 8005340:	4f1b      	ldr	r7, [pc, #108]	; (80053b0 <eMBMasterRegCoilsCB+0x94>)
 8005342:	4407      	add	r7, r0
    usCoilStart = usMCoilStart;
 8005344:	4b1b      	ldr	r3, [pc, #108]	; (80053b4 <eMBMasterRegCoilsCB+0x98>)
    {
        iRegIndex = (USHORT) (usAddress - usCoilStart) / 8;
 8005346:	881b      	ldrh	r3, [r3, #0]
 8005348:	1ae4      	subs	r4, r4, r3
 800534a:	f3c4 0bcc 	ubfx	fp, r4, #3, #13
        iRegBitIndex = (USHORT) (usAddress - usCoilStart) % 8;
 800534e:	f004 0407 	and.w	r4, r4, #7
            *pucRegBuffer = *pucRegBuffer >> (8 - usNCoils);
            break;

        /* write current coil values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (iNReg > 1)
 8005352:	1c53      	adds	r3, r2, #1
 8005354:	2b01      	cmp	r3, #1
 8005356:	d91a      	bls.n	800538e <eMBMasterRegCoilsCB+0x72>
 8005358:	eb06 0902 	add.w	r9, r6, r2
 800535c:	4635      	mov	r5, r6
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
 800535e:	ebab 0606 	sub.w	r6, fp, r6
 8005362:	f04f 0a08 	mov.w	sl, #8
 8005366:	19a8      	adds	r0, r5, r6
 8005368:	b280      	uxth	r0, r0
 800536a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800536e:	4652      	mov	r2, sl
 8005370:	4621      	mov	r1, r4
 8005372:	4438      	add	r0, r7
 8005374:	f7ff fd42 	bl	8004dfc <xMBUtilSetBits>
            while (iNReg > 1)
 8005378:	454d      	cmp	r5, r9
 800537a:	d1f4      	bne.n	8005366 <eMBMasterRegCoilsCB+0x4a>
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
 800537c:	9b01      	ldr	r3, [sp, #4]
 800537e:	445b      	add	r3, fp
 8005380:	fa1f fb83 	uxth.w	fp, r3
                iNReg--;
            }
            /* last coils */
            usNCoils = usNCoils % 8;
            /* xMBUtilSetBits has bug when ucNBits is zero */
            if (usNCoils != 0)
 8005384:	f018 0207 	ands.w	r2, r8, #7
 8005388:	d103      	bne.n	8005392 <eMBMasterRegCoilsCB+0x76>
    eMBErrorCode    eStatus = MB_ENOERR;
 800538a:	2000      	movs	r0, #0
 800538c:	e00b      	b.n	80053a6 <eMBMasterRegCoilsCB+0x8a>
            while (iNReg > 1)
 800538e:	46b1      	mov	r9, r6
 8005390:	e7f8      	b.n	8005384 <eMBMasterRegCoilsCB+0x68>
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, usNCoils,
 8005392:	f899 3000 	ldrb.w	r3, [r9]
 8005396:	4621      	mov	r1, r4
 8005398:	eb07 000b 	add.w	r0, r7, fp
 800539c:	f7ff fd2e 	bl	8004dfc <xMBUtilSetBits>
    eMBErrorCode    eStatus = MB_ENOERR;
 80053a0:	2000      	movs	r0, #0
 80053a2:	e000      	b.n	80053a6 <eMBMasterRegCoilsCB+0x8a>
            break;
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 80053a4:	2001      	movs	r0, #1
    }
    return eStatus;
}
 80053a6:	b003      	add	sp, #12
 80053a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        eStatus = MB_ENOREG;
 80053ac:	2001      	movs	r0, #1
 80053ae:	e7fa      	b.n	80053a6 <eMBMasterRegCoilsCB+0x8a>
 80053b0:	20001bdf 	.word	0x20001bdf
 80053b4:	20000012 	.word	0x20000012

080053b8 <eMBMasterRegDiscreteCB>:
 * @param usNDiscrete discrete number
 *
 * @return result
 */
eMBErrorCode eMBMasterRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
 80053b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053bc:	b083      	sub	sp, #12
 80053be:	4606      	mov	r6, r0
 80053c0:	460d      	mov	r5, r1
 80053c2:	4690      	mov	r8, r2
    USHORT          DISCRETE_INPUT_START;
    USHORT          DISCRETE_INPUT_NDISCRETES;
    USHORT          usDiscreteInputStart;
    iNReg =  usNDiscrete / 8 + 1;

    pucDiscreteInputBuf = ucMDiscInBuf[ucMBMasterGetDestAddress() - 1];
 80053c4:	f7ff f916 	bl	80045f4 <ucMBMasterGetDestAddress>
    DISCRETE_INPUT_START = M_DISCRETE_INPUT_START;
    DISCRETE_INPUT_NDISCRETES = M_DISCRETE_INPUT_NDISCRETES;
    usDiscreteInputStart = usMDiscInStart;

    /* it already plus one in modbus function method. */
    usAddress--;
 80053c8:	3d01      	subs	r5, #1
 80053ca:	b2ad      	uxth	r5, r5

    if ((usAddress >= DISCRETE_INPUT_START)
            && (usAddress + usNDiscrete    <= DISCRETE_INPUT_START + DISCRETE_INPUT_NDISCRETES))
 80053cc:	eb05 0308 	add.w	r3, r5, r8
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	dd03      	ble.n	80053dc <eMBMasterRegDiscreteCB+0x24>
                    usNDiscrete, *pucRegBuffer++);
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 80053d4:	2001      	movs	r0, #1
    }

    return eStatus;
}
 80053d6:	b003      	add	sp, #12
 80053d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iNReg =  usNDiscrete / 8 + 1;
 80053dc:	ea4f 02d8 	mov.w	r2, r8, lsr #3
 80053e0:	9201      	str	r2, [sp, #4]
    pucDiscreteInputBuf = ucMDiscInBuf[ucMBMasterGetDestAddress() - 1];
 80053e2:	4f19      	ldr	r7, [pc, #100]	; (8005448 <eMBMasterRegDiscreteCB+0x90>)
 80053e4:	4407      	add	r7, r0
    usDiscreteInputStart = usMDiscInStart;
 80053e6:	4b19      	ldr	r3, [pc, #100]	; (800544c <eMBMasterRegDiscreteCB+0x94>)
        iRegIndex = (USHORT) (usAddress - usDiscreteInputStart) / 8;
 80053e8:	881b      	ldrh	r3, [r3, #0]
 80053ea:	1aed      	subs	r5, r5, r3
 80053ec:	f3c5 0bcc 	ubfx	fp, r5, #3, #13
        iRegBitIndex = (USHORT) (usAddress - usDiscreteInputStart) % 8;
 80053f0:	f005 0507 	and.w	r5, r5, #7
        while (iNReg > 1)
 80053f4:	1c53      	adds	r3, r2, #1
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d91a      	bls.n	8005430 <eMBMasterRegDiscreteCB+0x78>
 80053fa:	eb06 0902 	add.w	r9, r6, r2
 80053fe:	4634      	mov	r4, r6
            xMBUtilSetBits(&pucDiscreteInputBuf[iRegIndex++], iRegBitIndex, 8,
 8005400:	ebab 0606 	sub.w	r6, fp, r6
 8005404:	f04f 0a08 	mov.w	sl, #8
 8005408:	19a0      	adds	r0, r4, r6
 800540a:	b280      	uxth	r0, r0
 800540c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005410:	4652      	mov	r2, sl
 8005412:	4629      	mov	r1, r5
 8005414:	4438      	add	r0, r7
 8005416:	f7ff fcf1 	bl	8004dfc <xMBUtilSetBits>
        while (iNReg > 1)
 800541a:	454c      	cmp	r4, r9
 800541c:	d1f4      	bne.n	8005408 <eMBMasterRegDiscreteCB+0x50>
            xMBUtilSetBits(&pucDiscreteInputBuf[iRegIndex++], iRegBitIndex, 8,
 800541e:	9b01      	ldr	r3, [sp, #4]
 8005420:	445b      	add	r3, fp
 8005422:	fa1f fb83 	uxth.w	fp, r3
        if (usNDiscrete != 0)
 8005426:	f018 0207 	ands.w	r2, r8, #7
 800542a:	d103      	bne.n	8005434 <eMBMasterRegDiscreteCB+0x7c>
    eMBErrorCode    eStatus = MB_ENOERR;
 800542c:	2000      	movs	r0, #0
 800542e:	e7d2      	b.n	80053d6 <eMBMasterRegDiscreteCB+0x1e>
        while (iNReg > 1)
 8005430:	46b1      	mov	r9, r6
 8005432:	e7f8      	b.n	8005426 <eMBMasterRegDiscreteCB+0x6e>
            xMBUtilSetBits(&pucDiscreteInputBuf[iRegIndex++], iRegBitIndex,
 8005434:	f899 3000 	ldrb.w	r3, [r9]
 8005438:	4629      	mov	r1, r5
 800543a:	eb07 000b 	add.w	r0, r7, fp
 800543e:	f7ff fcdd 	bl	8004dfc <xMBUtilSetBits>
    eMBErrorCode    eStatus = MB_ENOERR;
 8005442:	2000      	movs	r0, #0
 8005444:	e7c7      	b.n	80053d6 <eMBMasterRegDiscreteCB+0x1e>
 8005446:	bf00      	nop
 8005448:	20001bef 	.word	0x20001bef
 800544c:	20001c00 	.word	0x20001c00

08005450 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005450:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8005454:	b9a3      	cbnz	r3, 8005480 <osKernelInitialize+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005456:	f3ef 8310 	mrs	r3, PRIMASK
 800545a:	b9a3      	cbnz	r3, 8005486 <osKernelInitialize+0x36>
 800545c:	4b0d      	ldr	r3, [pc, #52]	; (8005494 <osKernelInitialize+0x44>)
 800545e:	6818      	ldr	r0, [r3, #0]
 8005460:	2802      	cmp	r0, #2
 8005462:	d004      	beq.n	800546e <osKernelInitialize+0x1e>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8005464:	b990      	cbnz	r0, 800548c <osKernelInitialize+0x3c>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005466:	4b0b      	ldr	r3, [pc, #44]	; (8005494 <osKernelInitialize+0x44>)
 8005468:	2201      	movs	r2, #1
 800546a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800546c:	4770      	bx	lr
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800546e:	f3ef 8311 	mrs	r3, BASEPRI
    } else {
      stat = osError;
 8005472:	2b00      	cmp	r3, #0
 8005474:	bf14      	ite	ne
 8005476:	f06f 0005 	mvnne.w	r0, #5
 800547a:	f04f 30ff 	moveq.w	r0, #4294967295
 800547e:	4770      	bx	lr
    stat = osErrorISR;
 8005480:	f06f 0005 	mvn.w	r0, #5
 8005484:	4770      	bx	lr
 8005486:	f06f 0005 	mvn.w	r0, #5
 800548a:	4770      	bx	lr
      stat = osError;
 800548c:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	20002380 	.word	0x20002380

08005498 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005498:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800549a:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800549e:	b9c3      	cbnz	r3, 80054d2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054a0:	f3ef 8310 	mrs	r3, PRIMASK
 80054a4:	b9c3      	cbnz	r3, 80054d8 <osKernelStart+0x40>
 80054a6:	4b0f      	ldr	r3, [pc, #60]	; (80054e4 <osKernelStart+0x4c>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d008      	beq.n	80054c0 <osKernelStart+0x28>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d115      	bne.n	80054de <osKernelStart+0x46>
      KernelState = osKernelRunning;
 80054b2:	4b0c      	ldr	r3, [pc, #48]	; (80054e4 <osKernelStart+0x4c>)
 80054b4:	2202      	movs	r2, #2
 80054b6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80054b8:	f001 f950 	bl	800675c <vTaskStartScheduler>
      stat = osOK;
 80054bc:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 80054be:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80054c0:	f3ef 8311 	mrs	r3, BASEPRI
      stat = osError;
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	bf14      	ite	ne
 80054c8:	f06f 0005 	mvnne.w	r0, #5
 80054cc:	f04f 30ff 	moveq.w	r0, #4294967295
 80054d0:	e7f5      	b.n	80054be <osKernelStart+0x26>
    stat = osErrorISR;
 80054d2:	f06f 0005 	mvn.w	r0, #5
 80054d6:	e7f2      	b.n	80054be <osKernelStart+0x26>
 80054d8:	f06f 0005 	mvn.w	r0, #5
 80054dc:	e7ef      	b.n	80054be <osKernelStart+0x26>
      stat = osError;
 80054de:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 80054e2:	e7ec      	b.n	80054be <osKernelStart+0x26>
 80054e4:	20002380 	.word	0x20002380

080054e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80054e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054ea:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80054ec:	2400      	movs	r4, #0
 80054ee:	9404      	str	r4, [sp, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054f0:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80054f4:	b9d4      	cbnz	r4, 800552c <osThreadNew+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054f6:	f3ef 8310 	mrs	r3, PRIMASK
 80054fa:	b9bb      	cbnz	r3, 800552c <osThreadNew+0x44>
 80054fc:	4b2c      	ldr	r3, [pc, #176]	; (80055b0 <osThreadNew+0xc8>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2b02      	cmp	r3, #2
 8005502:	d00f      	beq.n	8005524 <osThreadNew+0x3c>
 8005504:	b190      	cbz	r0, 800552c <osThreadNew+0x44>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 8005506:	2300      	movs	r3, #0
 8005508:	f88d 3017 	strb.w	r3, [sp, #23]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 800550c:	2a00      	cmp	r2, #0
 800550e:	d03a      	beq.n	8005586 <osThreadNew+0x9e>
      if (attr->name != NULL) {
 8005510:	6814      	ldr	r4, [r2, #0]
 8005512:	b174      	cbz	r4, 8005532 <osThreadNew+0x4a>
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8005514:	6993      	ldr	r3, [r2, #24]
 8005516:	b17b      	cbz	r3, 8005538 <osThreadNew+0x50>
        prio = (UBaseType_t)attr->priority;
 8005518:	461d      	mov	r5, r3
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800551a:	3b01      	subs	r3, #1
 800551c:	2b37      	cmp	r3, #55	; 0x37
 800551e:	d90c      	bls.n	800553a <osThreadNew+0x52>
        return (NULL);
 8005520:	2000      	movs	r0, #0
 8005522:	e004      	b.n	800552e <osThreadNew+0x46>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005524:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (func != NULL)) {
 8005528:	2b00      	cmp	r3, #0
 800552a:	d0eb      	beq.n	8005504 <osThreadNew+0x1c>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800552c:	9804      	ldr	r0, [sp, #16]
}
 800552e:	b007      	add	sp, #28
 8005530:	bdf0      	pop	{r4, r5, r6, r7, pc}
    name  = &empty;
 8005532:	f10d 0417 	add.w	r4, sp, #23
 8005536:	e7ed      	b.n	8005514 <osThreadNew+0x2c>
 8005538:	2518      	movs	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800553a:	6853      	ldr	r3, [r2, #4]
 800553c:	f013 0f01 	tst.w	r3, #1
 8005540:	d134      	bne.n	80055ac <osThreadNew+0xc4>
      if (attr->stack_size > 0U) {
 8005542:	6953      	ldr	r3, [r2, #20]
 8005544:	b113      	cbz	r3, 800554c <osThreadNew+0x64>
        stack = attr->stack_size / sizeof(StackType_t);
 8005546:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 800554a:	e001      	b.n	8005550 <osThreadNew+0x68>
    stack = configMINIMAL_STACK_SIZE;
 800554c:	f04f 0c80 	mov.w	ip, #128	; 0x80
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005550:	6896      	ldr	r6, [r2, #8]
 8005552:	b18e      	cbz	r6, 8005578 <osThreadNew+0x90>
 8005554:	68d7      	ldr	r7, [r2, #12]
 8005556:	2fbb      	cmp	r7, #187	; 0xbb
 8005558:	d9e8      	bls.n	800552c <osThreadNew+0x44>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800555a:	6912      	ldr	r2, [r2, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800555c:	2a00      	cmp	r2, #0
 800555e:	d0e5      	beq.n	800552c <osThreadNew+0x44>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005560:	2b00      	cmp	r3, #0
 8005562:	d0e3      	beq.n	800552c <osThreadNew+0x44>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005564:	9602      	str	r6, [sp, #8]
 8005566:	9201      	str	r2, [sp, #4]
 8005568:	9500      	str	r5, [sp, #0]
 800556a:	460b      	mov	r3, r1
 800556c:	4662      	mov	r2, ip
 800556e:	4621      	mov	r1, r4
 8005570:	f001 f888 	bl	8006684 <xTaskCreateStatic>
 8005574:	9004      	str	r0, [sp, #16]
 8005576:	e7d9      	b.n	800552c <osThreadNew+0x44>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005578:	68d3      	ldr	r3, [r2, #12]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1d6      	bne.n	800552c <osThreadNew+0x44>
      if (mem == 0) {
 800557e:	6913      	ldr	r3, [r2, #16]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1d3      	bne.n	800552c <osThreadNew+0x44>
 8005584:	e004      	b.n	8005590 <osThreadNew+0xa8>
    prio  = (UBaseType_t)osPriorityNormal;
 8005586:	2518      	movs	r5, #24
    stack = configMINIMAL_STACK_SIZE;
 8005588:	f04f 0c80 	mov.w	ip, #128	; 0x80
    name  = &empty;
 800558c:	f10d 0417 	add.w	r4, sp, #23
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005590:	ab04      	add	r3, sp, #16
 8005592:	9301      	str	r3, [sp, #4]
 8005594:	9500      	str	r5, [sp, #0]
 8005596:	460b      	mov	r3, r1
 8005598:	fa1f f28c 	uxth.w	r2, ip
 800559c:	4621      	mov	r1, r4
 800559e:	f001 f8ab 	bl	80066f8 <xTaskCreate>
 80055a2:	2801      	cmp	r0, #1
          hTask = NULL;
 80055a4:	bf1c      	itt	ne
 80055a6:	2300      	movne	r3, #0
 80055a8:	9304      	strne	r3, [sp, #16]
 80055aa:	e7bf      	b.n	800552c <osThreadNew+0x44>
        return (NULL);
 80055ac:	2000      	movs	r0, #0
 80055ae:	e7be      	b.n	800552e <osThreadNew+0x46>
 80055b0:	20002380 	.word	0x20002380

080055b4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80055b4:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055b6:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80055ba:	b9a3      	cbnz	r3, 80055e6 <osDelay+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055bc:	f3ef 8310 	mrs	r3, PRIMASK
 80055c0:	b9a3      	cbnz	r3, 80055ec <osDelay+0x38>
 80055c2:	4b0c      	ldr	r3, [pc, #48]	; (80055f4 <osDelay+0x40>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d002      	beq.n	80055d0 <osDelay+0x1c>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 80055ca:	b940      	cbnz	r0, 80055de <osDelay+0x2a>
    stat = osOK;
 80055cc:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 80055ce:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80055d0:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d0f8      	beq.n	80055ca <osDelay+0x16>
    stat = osErrorISR;
 80055d8:	f06f 0005 	mvn.w	r0, #5
 80055dc:	e7f7      	b.n	80055ce <osDelay+0x1a>
      vTaskDelay(ticks);
 80055de:	f001 fa35 	bl	8006a4c <vTaskDelay>
    stat = osOK;
 80055e2:	2000      	movs	r0, #0
 80055e4:	e7f3      	b.n	80055ce <osDelay+0x1a>
    stat = osErrorISR;
 80055e6:	f06f 0005 	mvn.w	r0, #5
 80055ea:	e7f0      	b.n	80055ce <osDelay+0x1a>
 80055ec:	f06f 0005 	mvn.w	r0, #5
 80055f0:	e7ed      	b.n	80055ce <osDelay+0x1a>
 80055f2:	bf00      	nop
 80055f4:	20002380 	.word	0x20002380

080055f8 <osEventFlagsNew>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055f8:	f3ef 8205 	mrs	r2, IPSR
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;

  if (!IS_IRQ()) {
 80055fc:	b9f2      	cbnz	r2, 800563c <osEventFlagsNew+0x44>
osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80055fe:	b508      	push	{r3, lr}
 8005600:	4603      	mov	r3, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005602:	f3ef 8210 	mrs	r2, PRIMASK
  if (!IS_IRQ()) {
 8005606:	b9da      	cbnz	r2, 8005640 <osEventFlagsNew+0x48>
 8005608:	4a0e      	ldr	r2, [pc, #56]	; (8005644 <osEventFlagsNew+0x4c>)
 800560a:	6812      	ldr	r2, [r2, #0]
 800560c:	2a02      	cmp	r2, #2
 800560e:	d007      	beq.n	8005620 <osEventFlagsNew+0x28>
    mem = -1;

    if (attr != NULL) {
 8005610:	b173      	cbz	r3, 8005630 <osEventFlagsNew+0x38>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8005612:	6898      	ldr	r0, [r3, #8]
 8005614:	b150      	cbz	r0, 800562c <osEventFlagsNew+0x34>
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	2b1f      	cmp	r3, #31
 800561a:	d80c      	bhi.n	8005636 <osEventFlagsNew+0x3e>
  hEventGroup = NULL;
 800561c:	2000      	movs	r0, #0
 800561e:	e009      	b.n	8005634 <osEventFlagsNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005620:	f3ef 8211 	mrs	r2, BASEPRI
  if (!IS_IRQ()) {
 8005624:	2a00      	cmp	r2, #0
 8005626:	d0f3      	beq.n	8005610 <osEventFlagsNew+0x18>
  hEventGroup = NULL;
 8005628:	2000      	movs	r0, #0
        hEventGroup = xEventGroupCreate();
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800562a:	e003      	b.n	8005634 <osEventFlagsNew+0x3c>
      if (mem == 0) {
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	b90b      	cbnz	r3, 8005634 <osEventFlagsNew+0x3c>
        hEventGroup = xEventGroupCreate();
 8005630:	f000 f8bb 	bl	80057aa <xEventGroupCreate>
}
 8005634:	bd08      	pop	{r3, pc}
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8005636:	f000 f893 	bl	8005760 <xEventGroupCreateStatic>
 800563a:	e7fb      	b.n	8005634 <osEventFlagsNew+0x3c>
  hEventGroup = NULL;
 800563c:	2000      	movs	r0, #0
}
 800563e:	4770      	bx	lr
  hEventGroup = NULL;
 8005640:	2000      	movs	r0, #0
 8005642:	e7f7      	b.n	8005634 <osEventFlagsNew+0x3c>
 8005644:	20002380 	.word	0x20002380

08005648 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005648:	b570      	push	{r4, r5, r6, lr}
 800564a:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800564c:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005650:	2b00      	cmp	r3, #0
 8005652:	d146      	bne.n	80056e2 <osSemaphoreNew+0x9a>
 8005654:	460e      	mov	r6, r1
 8005656:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005658:	f3ef 8310 	mrs	r3, PRIMASK
 800565c:	2b00      	cmp	r3, #0
 800565e:	d144      	bne.n	80056ea <osSemaphoreNew+0xa2>
 8005660:	4b32      	ldr	r3, [pc, #200]	; (800572c <osSemaphoreNew+0xe4>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2b02      	cmp	r3, #2
 8005666:	d00c      	beq.n	8005682 <osSemaphoreNew+0x3a>
 8005668:	2800      	cmp	r0, #0
 800566a:	d040      	beq.n	80056ee <osSemaphoreNew+0xa6>
 800566c:	42b0      	cmp	r0, r6
 800566e:	d340      	bcc.n	80056f2 <osSemaphoreNew+0xaa>
    mem = -1;

    if (attr != NULL) {
 8005670:	2d00      	cmp	r5, #0
 8005672:	d04a      	beq.n	800570a <osSemaphoreNew+0xc2>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005674:	68ac      	ldr	r4, [r5, #8]
 8005676:	b154      	cbz	r4, 800568e <osSemaphoreNew+0x46>
 8005678:	68eb      	ldr	r3, [r5, #12]
 800567a:	2b4f      	cmp	r3, #79	; 0x4f
 800567c:	d83b      	bhi.n	80056f6 <osSemaphoreNew+0xae>
  hSemaphore = NULL;
 800567e:	2400      	movs	r4, #0
 8005680:	e030      	b.n	80056e4 <osSemaphoreNew+0x9c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005682:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005686:	2b00      	cmp	r3, #0
 8005688:	d0ee      	beq.n	8005668 <osSemaphoreNew+0x20>
  hSemaphore = NULL;
 800568a:	2400      	movs	r4, #0
 800568c:	e02a      	b.n	80056e4 <osSemaphoreNew+0x9c>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800568e:	68eb      	ldr	r3, [r5, #12]
 8005690:	bb43      	cbnz	r3, 80056e4 <osSemaphoreNew+0x9c>
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
 8005692:	2801      	cmp	r0, #1
 8005694:	d142      	bne.n	800571c <osSemaphoreNew+0xd4>
        if (mem == 1) {
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8005696:	2203      	movs	r2, #3
 8005698:	2100      	movs	r1, #0
 800569a:	2001      	movs	r0, #1
 800569c:	f000 fae5 	bl	8005c6a <xQueueGenericCreate>
 80056a0:	4604      	mov	r4, r0
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80056a2:	b1fc      	cbz	r4, 80056e4 <osSemaphoreNew+0x9c>
 80056a4:	b986      	cbnz	r6, 80056c8 <osSemaphoreNew+0x80>
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
        if (attr != NULL) {
 80056a6:	b105      	cbz	r5, 80056aa <osSemaphoreNew+0x62>
          name = attr->name;
 80056a8:	682d      	ldr	r5, [r5, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 80056aa:	4629      	mov	r1, r5
 80056ac:	4620      	mov	r0, r4
 80056ae:	f000 fdfd 	bl	80062ac <vQueueAddToRegistry>
 80056b2:	e017      	b.n	80056e4 <osSemaphoreNew+0x9c>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80056b4:	2303      	movs	r3, #3
 80056b6:	9300      	str	r3, [sp, #0]
 80056b8:	4623      	mov	r3, r4
 80056ba:	2200      	movs	r2, #0
 80056bc:	4611      	mov	r1, r2
 80056be:	2001      	movs	r0, #1
 80056c0:	f000 fa7d 	bl	8005bbe <xQueueGenericCreateStatic>
 80056c4:	4604      	mov	r4, r0
 80056c6:	e7ec      	b.n	80056a2 <osSemaphoreNew+0x5a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80056c8:	2300      	movs	r3, #0
 80056ca:	461a      	mov	r2, r3
 80056cc:	4619      	mov	r1, r3
 80056ce:	4620      	mov	r0, r4
 80056d0:	f000 fb34 	bl	8005d3c <xQueueGenericSend>
 80056d4:	2801      	cmp	r0, #1
 80056d6:	d0e6      	beq.n	80056a6 <osSemaphoreNew+0x5e>
            vSemaphoreDelete (hSemaphore);
 80056d8:	4620      	mov	r0, r4
 80056da:	f000 fe11 	bl	8006300 <vQueueDelete>
            hSemaphore = NULL;
 80056de:	2400      	movs	r4, #0
 80056e0:	e000      	b.n	80056e4 <osSemaphoreNew+0x9c>
  hSemaphore = NULL;
 80056e2:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 80056e4:	4620      	mov	r0, r4
 80056e6:	b002      	add	sp, #8
 80056e8:	bd70      	pop	{r4, r5, r6, pc}
  hSemaphore = NULL;
 80056ea:	2400      	movs	r4, #0
 80056ec:	e7fa      	b.n	80056e4 <osSemaphoreNew+0x9c>
 80056ee:	2400      	movs	r4, #0
 80056f0:	e7f8      	b.n	80056e4 <osSemaphoreNew+0x9c>
 80056f2:	2400      	movs	r4, #0
  return ((osSemaphoreId_t)hSemaphore);
 80056f4:	e7f6      	b.n	80056e4 <osSemaphoreNew+0x9c>
      if (max_count == 1U) {
 80056f6:	2801      	cmp	r0, #1
 80056f8:	d0dc      	beq.n	80056b4 <osSemaphoreNew+0x6c>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80056fa:	4622      	mov	r2, r4
 80056fc:	4631      	mov	r1, r6
 80056fe:	f000 fadc 	bl	8005cba <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 8005702:	4604      	mov	r4, r0
 8005704:	2800      	cmp	r0, #0
 8005706:	d1cf      	bne.n	80056a8 <osSemaphoreNew+0x60>
 8005708:	e7ec      	b.n	80056e4 <osSemaphoreNew+0x9c>
      if (max_count == 1U) {
 800570a:	2801      	cmp	r0, #1
 800570c:	d0c3      	beq.n	8005696 <osSemaphoreNew+0x4e>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800570e:	4631      	mov	r1, r6
 8005710:	f000 faf6 	bl	8005d00 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 8005714:	4604      	mov	r4, r0
 8005716:	2800      	cmp	r0, #0
 8005718:	d0e4      	beq.n	80056e4 <osSemaphoreNew+0x9c>
 800571a:	e7c6      	b.n	80056aa <osSemaphoreNew+0x62>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800571c:	4631      	mov	r1, r6
 800571e:	f000 faef 	bl	8005d00 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 8005722:	4604      	mov	r4, r0
 8005724:	2800      	cmp	r0, #0
 8005726:	d1bf      	bne.n	80056a8 <osSemaphoreNew+0x60>
 8005728:	e7dc      	b.n	80056e4 <osSemaphoreNew+0x9c>
 800572a:	bf00      	nop
 800572c:	20002380 	.word	0x20002380

08005730 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005730:	4b03      	ldr	r3, [pc, #12]	; (8005740 <vApplicationGetIdleTaskMemory+0x10>)
 8005732:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005734:	4b03      	ldr	r3, [pc, #12]	; (8005744 <vApplicationGetIdleTaskMemory+0x14>)
 8005736:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005738:	2380      	movs	r3, #128	; 0x80
 800573a:	6013      	str	r3, [r2, #0]
}
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	200022c4 	.word	0x200022c4
 8005744:	200020c4 	.word	0x200020c4

08005748 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005748:	4b03      	ldr	r3, [pc, #12]	; (8005758 <vApplicationGetTimerTaskMemory+0x10>)
 800574a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800574c:	4b03      	ldr	r3, [pc, #12]	; (800575c <vApplicationGetTimerTaskMemory+0x14>)
 800574e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005750:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005754:	6013      	str	r3, [r2, #0]
}
 8005756:	4770      	bx	lr
 8005758:	20002784 	.word	0x20002784
 800575c:	20002384 	.word	0x20002384

08005760 <xEventGroupCreateStatic>:
	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8005760:	b180      	cbz	r0, 8005784 <xEventGroupCreateStatic+0x24>
	{
 8005762:	b510      	push	{r4, lr}
 8005764:	b082      	sub	sp, #8
 8005766:	4604      	mov	r4, r0
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8005768:	2320      	movs	r3, #32
 800576a:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800576c:	9b01      	ldr	r3, [sp, #4]
 800576e:	2b20      	cmp	r3, #32
 8005770:	d011      	beq.n	8005796 <xEventGroupCreateStatic+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005776:	f383 8811 	msr	BASEPRI, r3
 800577a:	f3bf 8f6f 	isb	sy
 800577e:	f3bf 8f4f 	dsb	sy
 8005782:	e7fe      	b.n	8005782 <xEventGroupCreateStatic+0x22>
 8005784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005788:	f383 8811 	msr	BASEPRI, r3
 800578c:	f3bf 8f6f 	isb	sy
 8005790:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventGroupBuffer );
 8005794:	e7fe      	b.n	8005794 <xEventGroupCreateStatic+0x34>
		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */

		if( pxEventBits != NULL )
		{
			pxEventBits->uxEventBits = 0;
 8005796:	2300      	movs	r3, #0
 8005798:	f840 3b04 	str.w	r3, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800579c:	f000 f8f6 	bl	800598c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80057a0:	2301      	movs	r3, #1
 80057a2:	7723      	strb	r3, [r4, #28]
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
	}
 80057a4:	4620      	mov	r0, r4
 80057a6:	b002      	add	sp, #8
 80057a8:	bd10      	pop	{r4, pc}

080057aa <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80057aa:	b538      	push	{r3, r4, r5, lr}
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 80057ac:	2020      	movs	r0, #32
 80057ae:	f001 ffd3 	bl	8007758 <pvPortMalloc>

		if( pxEventBits != NULL )
 80057b2:	4604      	mov	r4, r0
 80057b4:	b128      	cbz	r0, 80057c2 <xEventGroupCreate+0x18>
		{
			pxEventBits->uxEventBits = 0;
 80057b6:	2500      	movs	r5, #0
 80057b8:	f840 5b04 	str.w	r5, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80057bc:	f000 f8e6 	bl	800598c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80057c0:	7725      	strb	r5, [r4, #28]
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
	}
 80057c2:	4620      	mov	r0, r4
 80057c4:	bd38      	pop	{r3, r4, r5, pc}

080057c6 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80057c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80057ca:	b178      	cbz	r0, 80057ec <xEventGroupWaitBits+0x26>
 80057cc:	460c      	mov	r4, r1
 80057ce:	4616      	mov	r6, r2
 80057d0:	461d      	mov	r5, r3
 80057d2:	4607      	mov	r7, r0
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80057d4:	f011 487f 	ands.w	r8, r1, #4278190080	; 0xff000000
 80057d8:	d011      	beq.n	80057fe <xEventGroupWaitBits+0x38>
 80057da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057de:	f383 8811 	msr	BASEPRI, r3
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	f3bf 8f4f 	dsb	sy
 80057ea:	e7fe      	b.n	80057ea <xEventGroupWaitBits+0x24>
 80057ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f0:	f383 8811 	msr	BASEPRI, r3
 80057f4:	f3bf 8f6f 	isb	sy
 80057f8:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 80057fc:	e7fe      	b.n	80057fc <xEventGroupWaitBits+0x36>
	configASSERT( uxBitsToWaitFor != 0 );
 80057fe:	b941      	cbnz	r1, 8005812 <xEventGroupWaitBits+0x4c>
 8005800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005804:	f383 8811 	msr	BASEPRI, r3
 8005808:	f3bf 8f6f 	isb	sy
 800580c:	f3bf 8f4f 	dsb	sy
 8005810:	e7fe      	b.n	8005810 <xEventGroupWaitBits+0x4a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005812:	f001 fad5 	bl	8006dc0 <xTaskGetSchedulerState>
 8005816:	b950      	cbnz	r0, 800582e <xEventGroupWaitBits+0x68>
 8005818:	9b08      	ldr	r3, [sp, #32]
 800581a:	b143      	cbz	r3, 800582e <xEventGroupWaitBits+0x68>
 800581c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005820:	f383 8811 	msr	BASEPRI, r3
 8005824:	f3bf 8f6f 	isb	sy
 8005828:	f3bf 8f4f 	dsb	sy
 800582c:	e7fe      	b.n	800582c <xEventGroupWaitBits+0x66>
	}
	#endif

	vTaskSuspendAll();
 800582e:	f000 ffe3 	bl	80067f8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8005832:	f8d7 9000 	ldr.w	r9, [r7]

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
 8005836:	bb55      	cbnz	r5, 800588e <xEventGroupWaitBits+0xc8>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8005838:	ea14 0f09 	tst.w	r4, r9
 800583c:	bf14      	ite	ne
 800583e:	2001      	movne	r0, #1
 8005840:	2000      	moveq	r0, #0
		if( xWaitConditionMet != pdFALSE )
 8005842:	bb50      	cbnz	r0, 800589a <xEventGroupWaitBits+0xd4>
		else if( xTicksToWait == ( TickType_t ) 0 )
 8005844:	9b08      	ldr	r3, [sp, #32]
 8005846:	b363      	cbz	r3, 80058a2 <xEventGroupWaitBits+0xdc>
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8005848:	2e00      	cmp	r6, #0
 800584a:	bf18      	it	ne
 800584c:	f04f 7880 	movne.w	r8, #16777216	; 0x1000000
			if( xWaitForAllBits != pdFALSE )
 8005850:	b10d      	cbz	r5, 8005856 <xEventGroupWaitBits+0x90>
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8005852:	f048 6880 	orr.w	r8, r8, #67108864	; 0x4000000
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8005856:	9a08      	ldr	r2, [sp, #32]
 8005858:	ea48 0104 	orr.w	r1, r8, r4
 800585c:	1d38      	adds	r0, r7, #4
 800585e:	f001 f989 	bl	8006b74 <vTaskPlaceOnUnorderedEventList>
	xAlreadyYielded = xTaskResumeAll();
 8005862:	f001 f871 	bl	8006948 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8005866:	b948      	cbnz	r0, 800587c <xEventGroupWaitBits+0xb6>
			portYIELD_WITHIN_API();
 8005868:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800586c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005870:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005874:	f3bf 8f4f 	dsb	sy
 8005878:	f3bf 8f6f 	isb	sy
		uxReturn = uxTaskResetEventItemValue();
 800587c:	f001 fb94 	bl	8006fa8 <uxTaskResetEventItemValue>
 8005880:	4681      	mov	r9, r0
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8005882:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8005886:	d011      	beq.n	80058ac <xEventGroupWaitBits+0xe6>
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005888:	f029 497f 	bic.w	r9, r9, #4278190080	; 0xff000000
	return uxReturn;
 800588c:	e00b      	b.n	80058a6 <xEventGroupWaitBits+0xe0>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800588e:	ea34 0309 	bics.w	r3, r4, r9
 8005892:	bf0c      	ite	eq
 8005894:	2001      	moveq	r0, #1
 8005896:	2000      	movne	r0, #0
 8005898:	e7d3      	b.n	8005842 <xEventGroupWaitBits+0x7c>
			if( xClearOnExit != pdFALSE )
 800589a:	b116      	cbz	r6, 80058a2 <xEventGroupWaitBits+0xdc>
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800589c:	ea29 0404 	bic.w	r4, r9, r4
 80058a0:	603c      	str	r4, [r7, #0]
	xAlreadyYielded = xTaskResumeAll();
 80058a2:	f001 f851 	bl	8006948 <xTaskResumeAll>
}
 80058a6:	4648      	mov	r0, r9
 80058a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			taskENTER_CRITICAL();
 80058ac:	f001 fe0a 	bl	80074c4 <vPortEnterCritical>
				uxReturn = pxEventBits->uxEventBits;
 80058b0:	f8d7 9000 	ldr.w	r9, [r7]
	if( xWaitForAllBits == pdFALSE )
 80058b4:	b965      	cbnz	r5, 80058d0 <xEventGroupWaitBits+0x10a>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80058b6:	ea14 0f09 	tst.w	r4, r9
 80058ba:	bf14      	ite	ne
 80058bc:	2301      	movne	r3, #1
 80058be:	2300      	moveq	r3, #0
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80058c0:	b11b      	cbz	r3, 80058ca <xEventGroupWaitBits+0x104>
					if( xClearOnExit != pdFALSE )
 80058c2:	b116      	cbz	r6, 80058ca <xEventGroupWaitBits+0x104>
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80058c4:	ea29 0404 	bic.w	r4, r9, r4
 80058c8:	603c      	str	r4, [r7, #0]
			taskEXIT_CRITICAL();
 80058ca:	f001 fe1d 	bl	8007508 <vPortExitCritical>
 80058ce:	e7db      	b.n	8005888 <xEventGroupWaitBits+0xc2>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80058d0:	ea34 0309 	bics.w	r3, r4, r9
 80058d4:	bf0c      	ite	eq
 80058d6:	2301      	moveq	r3, #1
 80058d8:	2300      	movne	r3, #0
 80058da:	e7f1      	b.n	80058c0 <xEventGroupWaitBits+0xfa>

080058dc <xEventGroupSetBits>:
	configASSERT( xEventGroup );
 80058dc:	b178      	cbz	r0, 80058fe <xEventGroupSetBits+0x22>
{
 80058de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058e2:	460e      	mov	r6, r1
 80058e4:	4605      	mov	r5, r0
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80058e6:	f011 487f 	ands.w	r8, r1, #4278190080	; 0xff000000
 80058ea:	d011      	beq.n	8005910 <xEventGroupSetBits+0x34>
 80058ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f0:	f383 8811 	msr	BASEPRI, r3
 80058f4:	f3bf 8f6f 	isb	sy
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	e7fe      	b.n	80058fc <xEventGroupSetBits+0x20>
 80058fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005902:	f383 8811 	msr	BASEPRI, r3
 8005906:	f3bf 8f6f 	isb	sy
 800590a:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 800590e:	e7fe      	b.n	800590e <xEventGroupSetBits+0x32>
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005910:	f100 070c 	add.w	r7, r0, #12
	vTaskSuspendAll();
 8005914:	f000 ff70 	bl	80067f8 <vTaskSuspendAll>
		pxListItem = listGET_HEAD_ENTRY( pxList );
 8005918:	692c      	ldr	r4, [r5, #16]
		pxEventBits->uxEventBits |= uxBitsToSet;
 800591a:	682b      	ldr	r3, [r5, #0]
 800591c:	4333      	orrs	r3, r6
 800591e:	602b      	str	r3, [r5, #0]
		while( pxListItem != pxListEnd )
 8005920:	42a7      	cmp	r7, r4
 8005922:	d118      	bne.n	8005956 <xEventGroupSetBits+0x7a>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005924:	682b      	ldr	r3, [r5, #0]
 8005926:	ea23 0308 	bic.w	r3, r3, r8
 800592a:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800592c:	f001 f80c 	bl	8006948 <xTaskResumeAll>
}
 8005930:	6828      	ldr	r0, [r5, #0]
 8005932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8005936:	6829      	ldr	r1, [r5, #0]
 8005938:	ea32 0101 	bics.w	r1, r2, r1
 800593c:	d109      	bne.n	8005952 <xEventGroupSetBits+0x76>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800593e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
					uxBitsToClear |= uxBitsWaitedFor;
 8005942:	bf18      	it	ne
 8005944:	ea48 0802 	orrne.w	r8, r8, r2
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8005948:	6829      	ldr	r1, [r5, #0]
 800594a:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800594e:	f001 f99f 	bl	8006c90 <vTaskRemoveFromUnorderedEventList>
		while( pxListItem != pxListEnd )
 8005952:	42a7      	cmp	r7, r4
 8005954:	d0e6      	beq.n	8005924 <xEventGroupSetBits+0x48>
			pxNext = listGET_NEXT( pxListItem );
 8005956:	4620      	mov	r0, r4
 8005958:	6864      	ldr	r4, [r4, #4]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800595a:	6803      	ldr	r3, [r0, #0]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800595c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8005960:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8005964:	d1e7      	bne.n	8005936 <xEventGroupSetBits+0x5a>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8005966:	6829      	ldr	r1, [r5, #0]
 8005968:	420a      	tst	r2, r1
 800596a:	d1e8      	bne.n	800593e <xEventGroupSetBits+0x62>
 800596c:	e7f1      	b.n	8005952 <xEventGroupSetBits+0x76>

0800596e <vEventGroupSetBitsCallback>:
{
 800596e:	b508      	push	{r3, lr}
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8005970:	f7ff ffb4 	bl	80058dc <xEventGroupSetBits>
}
 8005974:	bd08      	pop	{r3, pc}
	...

08005978 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005978:	b508      	push	{r3, lr}
 800597a:	4613      	mov	r3, r2
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 800597c:	460a      	mov	r2, r1
 800597e:	4601      	mov	r1, r0
 8005980:	4801      	ldr	r0, [pc, #4]	; (8005988 <xEventGroupSetBitsFromISR+0x10>)
 8005982:	f001 fd31 	bl	80073e8 <xTimerPendFunctionCallFromISR>

		return xReturn;
	}
 8005986:	bd08      	pop	{r3, pc}
 8005988:	0800596f 	.word	0x0800596f

0800598c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800598c:	f100 0308 	add.w	r3, r0, #8
 8005990:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005992:	f04f 32ff 	mov.w	r2, #4294967295
 8005996:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005998:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800599a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800599c:	2300      	movs	r3, #0
 800599e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80059a0:	4770      	bx	lr

080059a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80059a2:	2300      	movs	r3, #0
 80059a4:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80059a6:	4770      	bx	lr

080059a8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80059a8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80059aa:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80059ac:	689a      	ldr	r2, [r3, #8]
 80059ae:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80059b0:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80059b2:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80059b4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80059b6:	6803      	ldr	r3, [r0, #0]
 80059b8:	3301      	adds	r3, #1
 80059ba:	6003      	str	r3, [r0, #0]
}
 80059bc:	4770      	bx	lr

080059be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80059be:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80059c0:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80059c2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80059c6:	d011      	beq.n	80059ec <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059c8:	f100 0308 	add.w	r3, r0, #8
 80059cc:	461c      	mov	r4, r3
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	42aa      	cmp	r2, r5
 80059d4:	d9fa      	bls.n	80059cc <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80059d6:	6863      	ldr	r3, [r4, #4]
 80059d8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80059da:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80059dc:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80059de:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80059e0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80059e2:	6803      	ldr	r3, [r0, #0]
 80059e4:	3301      	adds	r3, #1
 80059e6:	6003      	str	r3, [r0, #0]
}
 80059e8:	bc30      	pop	{r4, r5}
 80059ea:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80059ec:	6904      	ldr	r4, [r0, #16]
 80059ee:	e7f2      	b.n	80059d6 <vListInsert+0x18>

080059f0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80059f0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80059f2:	6841      	ldr	r1, [r0, #4]
 80059f4:	6882      	ldr	r2, [r0, #8]
 80059f6:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80059f8:	6841      	ldr	r1, [r0, #4]
 80059fa:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80059fc:	685a      	ldr	r2, [r3, #4]
 80059fe:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005a00:	bf04      	itt	eq
 8005a02:	6882      	ldreq	r2, [r0, #8]
 8005a04:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005a06:	2200      	movs	r2, #0
 8005a08:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	3a01      	subs	r2, #1
 8005a0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005a10:	6818      	ldr	r0, [r3, #0]
}
 8005a12:	4770      	bx	lr

08005a14 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005a14:	b510      	push	{r4, lr}
 8005a16:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a18:	f001 fd54 	bl	80074c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005a1c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8005a1e:	f001 fd73 	bl	8007508 <vPortExitCritical>

	return xReturn;
}
 8005a22:	fab4 f084 	clz	r0, r4
 8005a26:	0940      	lsrs	r0, r0, #5
 8005a28:	bd10      	pop	{r4, pc}

08005a2a <prvCopyDataToQueue>:
{
 8005a2a:	b570      	push	{r4, r5, r6, lr}
 8005a2c:	4604      	mov	r4, r0
 8005a2e:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a30:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005a32:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005a34:	b95a      	cbnz	r2, 8005a4e <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a36:	6803      	ldr	r3, [r0, #0]
 8005a38:	b11b      	cbz	r3, 8005a42 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8005a3a:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005a3c:	3601      	adds	r6, #1
 8005a3e:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8005a40:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005a42:	6840      	ldr	r0, [r0, #4]
 8005a44:	f001 fa18 	bl	8006e78 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	6063      	str	r3, [r4, #4]
 8005a4c:	e7f6      	b.n	8005a3c <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8005a4e:	b96d      	cbnz	r5, 8005a6c <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005a50:	6880      	ldr	r0, [r0, #8]
 8005a52:	f001 ff73 	bl	800793c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005a56:	68a3      	ldr	r3, [r4, #8]
 8005a58:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005a5a:	4413      	add	r3, r2
 8005a5c:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a5e:	6862      	ldr	r2, [r4, #4]
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d319      	bcc.n	8005a98 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a64:	6823      	ldr	r3, [r4, #0]
 8005a66:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8005a68:	4628      	mov	r0, r5
 8005a6a:	e7e7      	b.n	8005a3c <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a6c:	68c0      	ldr	r0, [r0, #12]
 8005a6e:	f001 ff65 	bl	800793c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005a72:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005a74:	4251      	negs	r1, r2
 8005a76:	68e3      	ldr	r3, [r4, #12]
 8005a78:	1a9b      	subs	r3, r3, r2
 8005a7a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a7c:	6822      	ldr	r2, [r4, #0]
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d202      	bcs.n	8005a88 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005a82:	6863      	ldr	r3, [r4, #4]
 8005a84:	440b      	add	r3, r1
 8005a86:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8005a88:	2d02      	cmp	r5, #2
 8005a8a:	d001      	beq.n	8005a90 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8005a8c:	2000      	movs	r0, #0
 8005a8e:	e7d5      	b.n	8005a3c <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a90:	b126      	cbz	r6, 8005a9c <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8005a92:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8005a94:	2000      	movs	r0, #0
 8005a96:	e7d1      	b.n	8005a3c <prvCopyDataToQueue+0x12>
 8005a98:	4628      	mov	r0, r5
 8005a9a:	e7cf      	b.n	8005a3c <prvCopyDataToQueue+0x12>
 8005a9c:	2000      	movs	r0, #0
 8005a9e:	e7cd      	b.n	8005a3c <prvCopyDataToQueue+0x12>

08005aa0 <prvCopyDataFromQueue>:
{
 8005aa0:	b508      	push	{r3, lr}
 8005aa2:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005aa4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005aa6:	b162      	cbz	r2, 8005ac2 <prvCopyDataFromQueue+0x22>
 8005aa8:	4608      	mov	r0, r1
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005aaa:	68d9      	ldr	r1, [r3, #12]
 8005aac:	4411      	add	r1, r2
 8005aae:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005ab0:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8005ab4:	4561      	cmp	r1, ip
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005ab6:	bf24      	itt	cs
 8005ab8:	6819      	ldrcs	r1, [r3, #0]
 8005aba:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005abc:	68d9      	ldr	r1, [r3, #12]
 8005abe:	f001 ff3d 	bl	800793c <memcpy>
}
 8005ac2:	bd08      	pop	{r3, pc}

08005ac4 <prvUnlockQueue>:
{
 8005ac4:	b570      	push	{r4, r5, r6, lr}
 8005ac6:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8005ac8:	f001 fcfc 	bl	80074c4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005acc:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8005ad0:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ad2:	2c00      	cmp	r4, #0
 8005ad4:	dd0f      	ble.n	8005af6 <prvUnlockQueue+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ad6:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8005ada:	e002      	b.n	8005ae2 <prvUnlockQueue+0x1e>
			--cTxLock;
 8005adc:	3c01      	subs	r4, #1
 8005ade:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ae0:	b14c      	cbz	r4, 8005af6 <prvUnlockQueue+0x32>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ae2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005ae4:	b13b      	cbz	r3, 8005af6 <prvUnlockQueue+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ae6:	4630      	mov	r0, r6
 8005ae8:	f001 f88e 	bl	8006c08 <xTaskRemoveFromEventList>
 8005aec:	2800      	cmp	r0, #0
 8005aee:	d0f5      	beq.n	8005adc <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8005af0:	f001 f960 	bl	8006db4 <vTaskMissedYield>
 8005af4:	e7f2      	b.n	8005adc <prvUnlockQueue+0x18>
		pxQueue->cTxLock = queueUNLOCKED;
 8005af6:	23ff      	movs	r3, #255	; 0xff
 8005af8:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8005afc:	f001 fd04 	bl	8007508 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005b00:	f001 fce0 	bl	80074c4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005b04:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8005b08:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b0a:	2c00      	cmp	r4, #0
 8005b0c:	dd0f      	ble.n	8005b2e <prvUnlockQueue+0x6a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b0e:	f105 0610 	add.w	r6, r5, #16
 8005b12:	e002      	b.n	8005b1a <prvUnlockQueue+0x56>
				--cRxLock;
 8005b14:	3c01      	subs	r4, #1
 8005b16:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b18:	b14c      	cbz	r4, 8005b2e <prvUnlockQueue+0x6a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b1a:	692b      	ldr	r3, [r5, #16]
 8005b1c:	b13b      	cbz	r3, 8005b2e <prvUnlockQueue+0x6a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b1e:	4630      	mov	r0, r6
 8005b20:	f001 f872 	bl	8006c08 <xTaskRemoveFromEventList>
 8005b24:	2800      	cmp	r0, #0
 8005b26:	d0f5      	beq.n	8005b14 <prvUnlockQueue+0x50>
					vTaskMissedYield();
 8005b28:	f001 f944 	bl	8006db4 <vTaskMissedYield>
 8005b2c:	e7f2      	b.n	8005b14 <prvUnlockQueue+0x50>
		pxQueue->cRxLock = queueUNLOCKED;
 8005b2e:	23ff      	movs	r3, #255	; 0xff
 8005b30:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8005b34:	f001 fce8 	bl	8007508 <vPortExitCritical>
}
 8005b38:	bd70      	pop	{r4, r5, r6, pc}

08005b3a <xQueueGenericReset>:
{
 8005b3a:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8005b3c:	b1e0      	cbz	r0, 8005b78 <xQueueGenericReset+0x3e>
 8005b3e:	460d      	mov	r5, r1
 8005b40:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8005b42:	f001 fcbf 	bl	80074c4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005b46:	6822      	ldr	r2, [r4, #0]
 8005b48:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005b4a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005b4c:	fb01 f303 	mul.w	r3, r1, r3
 8005b50:	18d0      	adds	r0, r2, r3
 8005b52:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005b54:	2000      	movs	r0, #0
 8005b56:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b58:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005b5a:	1a5b      	subs	r3, r3, r1
 8005b5c:	4413      	add	r3, r2
 8005b5e:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005b60:	23ff      	movs	r3, #255	; 0xff
 8005b62:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005b66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8005b6a:	b9fd      	cbnz	r5, 8005bac <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b6c:	6923      	ldr	r3, [r4, #16]
 8005b6e:	b963      	cbnz	r3, 8005b8a <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8005b70:	f001 fcca 	bl	8007508 <vPortExitCritical>
}
 8005b74:	2001      	movs	r0, #1
 8005b76:	bd38      	pop	{r3, r4, r5, pc}
 8005b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7c:	f383 8811 	msr	BASEPRI, r3
 8005b80:	f3bf 8f6f 	isb	sy
 8005b84:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005b88:	e7fe      	b.n	8005b88 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b8a:	f104 0010 	add.w	r0, r4, #16
 8005b8e:	f001 f83b 	bl	8006c08 <xTaskRemoveFromEventList>
 8005b92:	2800      	cmp	r0, #0
 8005b94:	d0ec      	beq.n	8005b70 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8005b96:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005b9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b9e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005ba2:	f3bf 8f4f 	dsb	sy
 8005ba6:	f3bf 8f6f 	isb	sy
 8005baa:	e7e1      	b.n	8005b70 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005bac:	f104 0010 	add.w	r0, r4, #16
 8005bb0:	f7ff feec 	bl	800598c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005bb4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005bb8:	f7ff fee8 	bl	800598c <vListInitialise>
 8005bbc:	e7d8      	b.n	8005b70 <xQueueGenericReset+0x36>

08005bbe <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005bbe:	b940      	cbnz	r0, 8005bd2 <xQueueGenericCreateStatic+0x14>
 8005bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc4:	f383 8811 	msr	BASEPRI, r3
 8005bc8:	f3bf 8f6f 	isb	sy
 8005bcc:	f3bf 8f4f 	dsb	sy
 8005bd0:	e7fe      	b.n	8005bd0 <xQueueGenericCreateStatic+0x12>
	{
 8005bd2:	b510      	push	{r4, lr}
 8005bd4:	b082      	sub	sp, #8
 8005bd6:	461c      	mov	r4, r3
 8005bd8:	4603      	mov	r3, r0
		configASSERT( pxStaticQueue != NULL );
 8005bda:	b154      	cbz	r4, 8005bf2 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005bdc:	b192      	cbz	r2, 8005c04 <xQueueGenericCreateStatic+0x46>
 8005bde:	b9d9      	cbnz	r1, 8005c18 <xQueueGenericCreateStatic+0x5a>
 8005be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be4:	f383 8811 	msr	BASEPRI, r3
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	e7fe      	b.n	8005bf0 <xQueueGenericCreateStatic+0x32>
 8005bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf6:	f383 8811 	msr	BASEPRI, r3
 8005bfa:	f3bf 8f6f 	isb	sy
 8005bfe:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8005c02:	e7fe      	b.n	8005c02 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005c04:	b339      	cbz	r1, 8005c56 <xQueueGenericCreateStatic+0x98>
 8005c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0a:	f383 8811 	msr	BASEPRI, r3
 8005c0e:	f3bf 8f6f 	isb	sy
 8005c12:	f3bf 8f4f 	dsb	sy
 8005c16:	e7fe      	b.n	8005c16 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005c18:	2050      	movs	r0, #80	; 0x50
 8005c1a:	9001      	str	r0, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005c1c:	9801      	ldr	r0, [sp, #4]
 8005c1e:	2850      	cmp	r0, #80	; 0x50
 8005c20:	d008      	beq.n	8005c34 <xQueueGenericCreateStatic+0x76>
 8005c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c26:	f383 8811 	msr	BASEPRI, r3
 8005c2a:	f3bf 8f6f 	isb	sy
 8005c2e:	f3bf 8f4f 	dsb	sy
 8005c32:	e7fe      	b.n	8005c32 <xQueueGenericCreateStatic+0x74>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005c34:	2001      	movs	r0, #1
 8005c36:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8005c3a:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8005c3c:	63e3      	str	r3, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005c3e:	6421      	str	r1, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005c40:	2101      	movs	r1, #1
 8005c42:	4620      	mov	r0, r4
 8005c44:	f7ff ff79 	bl	8005b3a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8005c48:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8005c4c:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8005c50:	4620      	mov	r0, r4
 8005c52:	b002      	add	sp, #8
 8005c54:	bd10      	pop	{r4, pc}
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005c56:	2250      	movs	r2, #80	; 0x50
 8005c58:	9201      	str	r2, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005c5a:	9a01      	ldr	r2, [sp, #4]
 8005c5c:	2a50      	cmp	r2, #80	; 0x50
 8005c5e:	d1e0      	bne.n	8005c22 <xQueueGenericCreateStatic+0x64>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005c60:	2201      	movs	r2, #1
 8005c62:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005c66:	4622      	mov	r2, r4
 8005c68:	e7e7      	b.n	8005c3a <xQueueGenericCreateStatic+0x7c>

08005c6a <xQueueGenericCreate>:
	{
 8005c6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005c6c:	b940      	cbnz	r0, 8005c80 <xQueueGenericCreate+0x16>
 8005c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c72:	f383 8811 	msr	BASEPRI, r3
 8005c76:	f3bf 8f6f 	isb	sy
 8005c7a:	f3bf 8f4f 	dsb	sy
 8005c7e:	e7fe      	b.n	8005c7e <xQueueGenericCreate+0x14>
 8005c80:	460c      	mov	r4, r1
 8005c82:	4616      	mov	r6, r2
 8005c84:	4607      	mov	r7, r0
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c86:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005c8a:	3050      	adds	r0, #80	; 0x50
 8005c8c:	f001 fd64 	bl	8007758 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8005c90:	4605      	mov	r5, r0
 8005c92:	b170      	cbz	r0, 8005cb2 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005c94:	2300      	movs	r3, #0
 8005c96:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8005c9a:	b164      	cbz	r4, 8005cb6 <xQueueGenericCreate+0x4c>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005c9c:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005ca0:	602b      	str	r3, [r5, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8005ca2:	63ef      	str	r7, [r5, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005ca4:	642c      	str	r4, [r5, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005ca6:	2101      	movs	r1, #1
 8005ca8:	4628      	mov	r0, r5
 8005caa:	f7ff ff46 	bl	8005b3a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8005cae:	f885 604c 	strb.w	r6, [r5, #76]	; 0x4c
	}
 8005cb2:	4628      	mov	r0, r5
 8005cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	e7f2      	b.n	8005ca0 <xQueueGenericCreate+0x36>

08005cba <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 8005cba:	b940      	cbnz	r0, 8005cce <xQueueCreateCountingSemaphoreStatic+0x14>
 8005cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc0:	f383 8811 	msr	BASEPRI, r3
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	e7fe      	b.n	8005ccc <xQueueCreateCountingSemaphoreStatic+0x12>
	{
 8005cce:	b510      	push	{r4, lr}
 8005cd0:	b082      	sub	sp, #8
 8005cd2:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 8005cd4:	4288      	cmp	r0, r1
 8005cd6:	d208      	bcs.n	8005cea <xQueueCreateCountingSemaphoreStatic+0x30>
 8005cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cdc:	f383 8811 	msr	BASEPRI, r3
 8005ce0:	f3bf 8f6f 	isb	sy
 8005ce4:	f3bf 8f4f 	dsb	sy
 8005ce8:	e7fe      	b.n	8005ce8 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005cea:	2302      	movs	r3, #2
 8005cec:	9300      	str	r3, [sp, #0]
 8005cee:	4613      	mov	r3, r2
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	4611      	mov	r1, r2
 8005cf4:	f7ff ff63 	bl	8005bbe <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8005cf8:	b100      	cbz	r0, 8005cfc <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005cfa:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8005cfc:	b002      	add	sp, #8
 8005cfe:	bd10      	pop	{r4, pc}

08005d00 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 8005d00:	b940      	cbnz	r0, 8005d14 <xQueueCreateCountingSemaphore+0x14>
 8005d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d06:	f383 8811 	msr	BASEPRI, r3
 8005d0a:	f3bf 8f6f 	isb	sy
 8005d0e:	f3bf 8f4f 	dsb	sy
 8005d12:	e7fe      	b.n	8005d12 <xQueueCreateCountingSemaphore+0x12>
	{
 8005d14:	b510      	push	{r4, lr}
 8005d16:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 8005d18:	4288      	cmp	r0, r1
 8005d1a:	d208      	bcs.n	8005d2e <xQueueCreateCountingSemaphore+0x2e>
 8005d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d20:	f383 8811 	msr	BASEPRI, r3
 8005d24:	f3bf 8f6f 	isb	sy
 8005d28:	f3bf 8f4f 	dsb	sy
 8005d2c:	e7fe      	b.n	8005d2c <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005d2e:	2202      	movs	r2, #2
 8005d30:	2100      	movs	r1, #0
 8005d32:	f7ff ff9a 	bl	8005c6a <xQueueGenericCreate>
		if( xHandle != NULL )
 8005d36:	b100      	cbz	r0, 8005d3a <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005d38:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8005d3a:	bd10      	pop	{r4, pc}

08005d3c <xQueueGenericSend>:
{
 8005d3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d40:	b085      	sub	sp, #20
 8005d42:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8005d44:	b188      	cbz	r0, 8005d6a <xQueueGenericSend+0x2e>
 8005d46:	460e      	mov	r6, r1
 8005d48:	461d      	mov	r5, r3
 8005d4a:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d4c:	b1b1      	cbz	r1, 8005d7c <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d4e:	2d02      	cmp	r5, #2
 8005d50:	d120      	bne.n	8005d94 <xQueueGenericSend+0x58>
 8005d52:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d01d      	beq.n	8005d94 <xQueueGenericSend+0x58>
 8005d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5c:	f383 8811 	msr	BASEPRI, r3
 8005d60:	f3bf 8f6f 	isb	sy
 8005d64:	f3bf 8f4f 	dsb	sy
 8005d68:	e7fe      	b.n	8005d68 <xQueueGenericSend+0x2c>
 8005d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6e:	f383 8811 	msr	BASEPRI, r3
 8005d72:	f3bf 8f6f 	isb	sy
 8005d76:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005d7a:	e7fe      	b.n	8005d7a <xQueueGenericSend+0x3e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d7c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d0e5      	beq.n	8005d4e <xQueueGenericSend+0x12>
 8005d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d86:	f383 8811 	msr	BASEPRI, r3
 8005d8a:	f3bf 8f6f 	isb	sy
 8005d8e:	f3bf 8f4f 	dsb	sy
 8005d92:	e7fe      	b.n	8005d92 <xQueueGenericSend+0x56>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d94:	f001 f814 	bl	8006dc0 <xTaskGetSchedulerState>
 8005d98:	b950      	cbnz	r0, 8005db0 <xQueueGenericSend+0x74>
 8005d9a:	9b01      	ldr	r3, [sp, #4]
 8005d9c:	b163      	cbz	r3, 8005db8 <xQueueGenericSend+0x7c>
 8005d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da2:	f383 8811 	msr	BASEPRI, r3
 8005da6:	f3bf 8f6f 	isb	sy
 8005daa:	f3bf 8f4f 	dsb	sy
 8005dae:	e7fe      	b.n	8005dae <xQueueGenericSend+0x72>
 8005db0:	f04f 0800 	mov.w	r8, #0
		prvLockQueue( pxQueue );
 8005db4:	2700      	movs	r7, #0
 8005db6:	e03a      	b.n	8005e2e <xQueueGenericSend+0xf2>
 8005db8:	f04f 0800 	mov.w	r8, #0
 8005dbc:	e7fa      	b.n	8005db4 <xQueueGenericSend+0x78>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005dbe:	462a      	mov	r2, r5
 8005dc0:	4631      	mov	r1, r6
 8005dc2:	4620      	mov	r0, r4
 8005dc4:	f7ff fe31 	bl	8005a2a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005dc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dca:	b983      	cbnz	r3, 8005dee <xQueueGenericSend+0xb2>
					else if( xYieldRequired != pdFALSE )
 8005dcc:	b148      	cbz	r0, 8005de2 <xQueueGenericSend+0xa6>
						queueYIELD_IF_USING_PREEMPTION();
 8005dce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dd6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005dda:	f3bf 8f4f 	dsb	sy
 8005dde:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8005de2:	f001 fb91 	bl	8007508 <vPortExitCritical>
				return pdPASS;
 8005de6:	2001      	movs	r0, #1
}
 8005de8:	b005      	add	sp, #20
 8005dea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005dee:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005df2:	f000 ff09 	bl	8006c08 <xTaskRemoveFromEventList>
 8005df6:	2800      	cmp	r0, #0
 8005df8:	d0f3      	beq.n	8005de2 <xQueueGenericSend+0xa6>
							queueYIELD_IF_USING_PREEMPTION();
 8005dfa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e02:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005e06:	f3bf 8f4f 	dsb	sy
 8005e0a:	f3bf 8f6f 	isb	sy
 8005e0e:	e7e8      	b.n	8005de2 <xQueueGenericSend+0xa6>
					taskEXIT_CRITICAL();
 8005e10:	f001 fb7a 	bl	8007508 <vPortExitCritical>
					return errQUEUE_FULL;
 8005e14:	2000      	movs	r0, #0
 8005e16:	e7e7      	b.n	8005de8 <xQueueGenericSend+0xac>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e18:	a802      	add	r0, sp, #8
 8005e1a:	f000 ff7d 	bl	8006d18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e1e:	e014      	b.n	8005e4a <xQueueGenericSend+0x10e>
				prvUnlockQueue( pxQueue );
 8005e20:	4620      	mov	r0, r4
 8005e22:	f7ff fe4f 	bl	8005ac4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e26:	f000 fd8f 	bl	8006948 <xTaskResumeAll>
 8005e2a:	f04f 0801 	mov.w	r8, #1
		taskENTER_CRITICAL();
 8005e2e:	f001 fb49 	bl	80074c4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e32:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005e34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d3c1      	bcc.n	8005dbe <xQueueGenericSend+0x82>
 8005e3a:	2d02      	cmp	r5, #2
 8005e3c:	d0bf      	beq.n	8005dbe <xQueueGenericSend+0x82>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e3e:	9b01      	ldr	r3, [sp, #4]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d0e5      	beq.n	8005e10 <xQueueGenericSend+0xd4>
				else if( xEntryTimeSet == pdFALSE )
 8005e44:	f1b8 0f00 	cmp.w	r8, #0
 8005e48:	d0e6      	beq.n	8005e18 <xQueueGenericSend+0xdc>
		taskEXIT_CRITICAL();
 8005e4a:	f001 fb5d 	bl	8007508 <vPortExitCritical>
		vTaskSuspendAll();
 8005e4e:	f000 fcd3 	bl	80067f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e52:	f001 fb37 	bl	80074c4 <vPortEnterCritical>
 8005e56:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8005e5a:	b252      	sxtb	r2, r2
 8005e5c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005e60:	bf08      	it	eq
 8005e62:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8005e66:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8005e6a:	b252      	sxtb	r2, r2
 8005e6c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005e70:	bf08      	it	eq
 8005e72:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8005e76:	f001 fb47 	bl	8007508 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e7a:	a901      	add	r1, sp, #4
 8005e7c:	a802      	add	r0, sp, #8
 8005e7e:	f000 ff57 	bl	8006d30 <xTaskCheckForTimeOut>
 8005e82:	bb00      	cbnz	r0, 8005ec6 <xQueueGenericSend+0x18a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e84:	f001 fb1e 	bl	80074c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005e88:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
 8005e8c:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8005e90:	f001 fb3a 	bl	8007508 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005e94:	45c1      	cmp	r9, r8
 8005e96:	d1c3      	bne.n	8005e20 <xQueueGenericSend+0xe4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005e98:	9901      	ldr	r1, [sp, #4]
 8005e9a:	f104 0010 	add.w	r0, r4, #16
 8005e9e:	f000 fe51 	bl	8006b44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	f7ff fe0e 	bl	8005ac4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ea8:	f000 fd4e 	bl	8006948 <xTaskResumeAll>
 8005eac:	2800      	cmp	r0, #0
 8005eae:	d1bc      	bne.n	8005e2a <xQueueGenericSend+0xee>
					portYIELD_WITHIN_API();
 8005eb0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005eb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eb8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005ebc:	f3bf 8f4f 	dsb	sy
 8005ec0:	f3bf 8f6f 	isb	sy
 8005ec4:	e7b1      	b.n	8005e2a <xQueueGenericSend+0xee>
			prvUnlockQueue( pxQueue );
 8005ec6:	4620      	mov	r0, r4
 8005ec8:	f7ff fdfc 	bl	8005ac4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ecc:	f000 fd3c 	bl	8006948 <xTaskResumeAll>
			return errQUEUE_FULL;
 8005ed0:	2000      	movs	r0, #0
 8005ed2:	e789      	b.n	8005de8 <xQueueGenericSend+0xac>

08005ed4 <xQueueGenericSendFromISR>:
{
 8005ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8005ed8:	b190      	cbz	r0, 8005f00 <xQueueGenericSendFromISR+0x2c>
 8005eda:	460f      	mov	r7, r1
 8005edc:	4616      	mov	r6, r2
 8005ede:	461c      	mov	r4, r3
 8005ee0:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ee2:	b1b1      	cbz	r1, 8005f12 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ee4:	2c02      	cmp	r4, #2
 8005ee6:	d120      	bne.n	8005f2a <xQueueGenericSendFromISR+0x56>
 8005ee8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d01d      	beq.n	8005f2a <xQueueGenericSendFromISR+0x56>
 8005eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef2:	f383 8811 	msr	BASEPRI, r3
 8005ef6:	f3bf 8f6f 	isb	sy
 8005efa:	f3bf 8f4f 	dsb	sy
 8005efe:	e7fe      	b.n	8005efe <xQueueGenericSendFromISR+0x2a>
 8005f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f04:	f383 8811 	msr	BASEPRI, r3
 8005f08:	f3bf 8f6f 	isb	sy
 8005f0c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005f10:	e7fe      	b.n	8005f10 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f12:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d0e5      	beq.n	8005ee4 <xQueueGenericSendFromISR+0x10>
 8005f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1c:	f383 8811 	msr	BASEPRI, r3
 8005f20:	f3bf 8f6f 	isb	sy
 8005f24:	f3bf 8f4f 	dsb	sy
 8005f28:	e7fe      	b.n	8005f28 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f2a:	f001 fbb7 	bl	800769c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005f2e:	f3ef 8911 	mrs	r9, BASEPRI
 8005f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f36:	f383 8811 	msr	BASEPRI, r3
 8005f3a:	f3bf 8f6f 	isb	sy
 8005f3e:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f42:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8005f44:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d306      	bcc.n	8005f58 <xQueueGenericSendFromISR+0x84>
 8005f4a:	2c02      	cmp	r4, #2
 8005f4c:	d004      	beq.n	8005f58 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8005f4e:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f50:	f389 8811 	msr	BASEPRI, r9
}
 8005f54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8005f58:	f895 8045 	ldrb.w	r8, [r5, #69]	; 0x45
 8005f5c:	fa4f f888 	sxtb.w	r8, r8
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f60:	4622      	mov	r2, r4
 8005f62:	4639      	mov	r1, r7
 8005f64:	4628      	mov	r0, r5
 8005f66:	f7ff fd60 	bl	8005a2a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8005f6a:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005f6e:	d006      	beq.n	8005f7e <xQueueGenericSendFromISR+0xaa>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f70:	f108 0301 	add.w	r3, r8, #1
 8005f74:	b25b      	sxtb	r3, r3
 8005f76:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 8005f7a:	2001      	movs	r0, #1
 8005f7c:	e7e8      	b.n	8005f50 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005f80:	b90b      	cbnz	r3, 8005f86 <xQueueGenericSendFromISR+0xb2>
			xReturn = pdPASS;
 8005f82:	2001      	movs	r0, #1
 8005f84:	e7e4      	b.n	8005f50 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f86:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8005f8a:	f000 fe3d 	bl	8006c08 <xTaskRemoveFromEventList>
 8005f8e:	b118      	cbz	r0, 8005f98 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 8005f90:	b126      	cbz	r6, 8005f9c <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f92:	2001      	movs	r0, #1
 8005f94:	6030      	str	r0, [r6, #0]
 8005f96:	e7db      	b.n	8005f50 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8005f98:	2001      	movs	r0, #1
 8005f9a:	e7d9      	b.n	8005f50 <xQueueGenericSendFromISR+0x7c>
 8005f9c:	2001      	movs	r0, #1
 8005f9e:	e7d7      	b.n	8005f50 <xQueueGenericSendFromISR+0x7c>

08005fa0 <xQueueReceive>:
{
 8005fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fa4:	b084      	sub	sp, #16
 8005fa6:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8005fa8:	b180      	cbz	r0, 8005fcc <xQueueReceive+0x2c>
 8005faa:	460e      	mov	r6, r1
 8005fac:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fae:	b1b1      	cbz	r1, 8005fde <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fb0:	f000 ff06 	bl	8006dc0 <xTaskGetSchedulerState>
 8005fb4:	b9f8      	cbnz	r0, 8005ff6 <xQueueReceive+0x56>
 8005fb6:	9b01      	ldr	r3, [sp, #4]
 8005fb8:	b30b      	cbz	r3, 8005ffe <xQueueReceive+0x5e>
	__asm volatile
 8005fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbe:	f383 8811 	msr	BASEPRI, r3
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	e7fe      	b.n	8005fca <xQueueReceive+0x2a>
 8005fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd0:	f383 8811 	msr	BASEPRI, r3
 8005fd4:	f3bf 8f6f 	isb	sy
 8005fd8:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8005fdc:	e7fe      	b.n	8005fdc <xQueueReceive+0x3c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fde:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d0e5      	beq.n	8005fb0 <xQueueReceive+0x10>
 8005fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe8:	f383 8811 	msr	BASEPRI, r3
 8005fec:	f3bf 8f6f 	isb	sy
 8005ff0:	f3bf 8f4f 	dsb	sy
 8005ff4:	e7fe      	b.n	8005ff4 <xQueueReceive+0x54>
 8005ff6:	f04f 0800 	mov.w	r8, #0
		prvLockQueue( pxQueue );
 8005ffa:	2700      	movs	r7, #0
 8005ffc:	e03b      	b.n	8006076 <xQueueReceive+0xd6>
 8005ffe:	f04f 0800 	mov.w	r8, #0
 8006002:	e7fa      	b.n	8005ffa <xQueueReceive+0x5a>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006004:	4631      	mov	r1, r6
 8006006:	4620      	mov	r0, r4
 8006008:	f7ff fd4a 	bl	8005aa0 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800600c:	3d01      	subs	r5, #1
 800600e:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006010:	6923      	ldr	r3, [r4, #16]
 8006012:	b92b      	cbnz	r3, 8006020 <xQueueReceive+0x80>
				taskEXIT_CRITICAL();
 8006014:	f001 fa78 	bl	8007508 <vPortExitCritical>
				return pdPASS;
 8006018:	2001      	movs	r0, #1
}
 800601a:	b004      	add	sp, #16
 800601c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006020:	f104 0010 	add.w	r0, r4, #16
 8006024:	f000 fdf0 	bl	8006c08 <xTaskRemoveFromEventList>
 8006028:	2800      	cmp	r0, #0
 800602a:	d0f3      	beq.n	8006014 <xQueueReceive+0x74>
						queueYIELD_IF_USING_PREEMPTION();
 800602c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006034:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006038:	f3bf 8f4f 	dsb	sy
 800603c:	f3bf 8f6f 	isb	sy
 8006040:	e7e8      	b.n	8006014 <xQueueReceive+0x74>
					taskEXIT_CRITICAL();
 8006042:	f001 fa61 	bl	8007508 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8006046:	2000      	movs	r0, #0
 8006048:	e7e7      	b.n	800601a <xQueueReceive+0x7a>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800604a:	a802      	add	r0, sp, #8
 800604c:	f000 fe64 	bl	8006d18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006050:	e01c      	b.n	800608c <xQueueReceive+0xec>
				prvUnlockQueue( pxQueue );
 8006052:	4620      	mov	r0, r4
 8006054:	f7ff fd36 	bl	8005ac4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006058:	f000 fc76 	bl	8006948 <xTaskResumeAll>
 800605c:	e009      	b.n	8006072 <xQueueReceive+0xd2>
			prvUnlockQueue( pxQueue );
 800605e:	4620      	mov	r0, r4
 8006060:	f7ff fd30 	bl	8005ac4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006064:	f000 fc70 	bl	8006948 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006068:	4620      	mov	r0, r4
 800606a:	f7ff fcd3 	bl	8005a14 <prvIsQueueEmpty>
 800606e:	2800      	cmp	r0, #0
 8006070:	d146      	bne.n	8006100 <xQueueReceive+0x160>
 8006072:	f04f 0801 	mov.w	r8, #1
		taskENTER_CRITICAL();
 8006076:	f001 fa25 	bl	80074c4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800607a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800607c:	2d00      	cmp	r5, #0
 800607e:	d1c1      	bne.n	8006004 <xQueueReceive+0x64>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006080:	9b01      	ldr	r3, [sp, #4]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d0dd      	beq.n	8006042 <xQueueReceive+0xa2>
				else if( xEntryTimeSet == pdFALSE )
 8006086:	f1b8 0f00 	cmp.w	r8, #0
 800608a:	d0de      	beq.n	800604a <xQueueReceive+0xaa>
		taskEXIT_CRITICAL();
 800608c:	f001 fa3c 	bl	8007508 <vPortExitCritical>
		vTaskSuspendAll();
 8006090:	f000 fbb2 	bl	80067f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006094:	f001 fa16 	bl	80074c4 <vPortEnterCritical>
 8006098:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800609c:	b25b      	sxtb	r3, r3
 800609e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a2:	bf08      	it	eq
 80060a4:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 80060a8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80060ac:	b25b      	sxtb	r3, r3
 80060ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b2:	bf08      	it	eq
 80060b4:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 80060b8:	f001 fa26 	bl	8007508 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060bc:	a901      	add	r1, sp, #4
 80060be:	a802      	add	r0, sp, #8
 80060c0:	f000 fe36 	bl	8006d30 <xTaskCheckForTimeOut>
 80060c4:	2800      	cmp	r0, #0
 80060c6:	d1ca      	bne.n	800605e <xQueueReceive+0xbe>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060c8:	4620      	mov	r0, r4
 80060ca:	f7ff fca3 	bl	8005a14 <prvIsQueueEmpty>
 80060ce:	2800      	cmp	r0, #0
 80060d0:	d0bf      	beq.n	8006052 <xQueueReceive+0xb2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80060d2:	9901      	ldr	r1, [sp, #4]
 80060d4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80060d8:	f000 fd34 	bl	8006b44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80060dc:	4620      	mov	r0, r4
 80060de:	f7ff fcf1 	bl	8005ac4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80060e2:	f000 fc31 	bl	8006948 <xTaskResumeAll>
 80060e6:	2800      	cmp	r0, #0
 80060e8:	d1c3      	bne.n	8006072 <xQueueReceive+0xd2>
					portYIELD_WITHIN_API();
 80060ea:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80060ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060f2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80060f6:	f3bf 8f4f 	dsb	sy
 80060fa:	f3bf 8f6f 	isb	sy
 80060fe:	e7b8      	b.n	8006072 <xQueueReceive+0xd2>
				return errQUEUE_EMPTY;
 8006100:	2000      	movs	r0, #0
 8006102:	e78a      	b.n	800601a <xQueueReceive+0x7a>

08006104 <xQueueSemaphoreTake>:
{
 8006104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006106:	b085      	sub	sp, #20
 8006108:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800610a:	b158      	cbz	r0, 8006124 <xQueueSemaphoreTake+0x20>
 800610c:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800610e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006110:	b18b      	cbz	r3, 8006136 <xQueueSemaphoreTake+0x32>
 8006112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006116:	f383 8811 	msr	BASEPRI, r3
 800611a:	f3bf 8f6f 	isb	sy
 800611e:	f3bf 8f4f 	dsb	sy
 8006122:	e7fe      	b.n	8006122 <xQueueSemaphoreTake+0x1e>
 8006124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006128:	f383 8811 	msr	BASEPRI, r3
 800612c:	f3bf 8f6f 	isb	sy
 8006130:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8006134:	e7fe      	b.n	8006134 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006136:	f000 fe43 	bl	8006dc0 <xTaskGetSchedulerState>
 800613a:	b950      	cbnz	r0, 8006152 <xQueueSemaphoreTake+0x4e>
 800613c:	9b01      	ldr	r3, [sp, #4]
 800613e:	b163      	cbz	r3, 800615a <xQueueSemaphoreTake+0x56>
 8006140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006144:	f383 8811 	msr	BASEPRI, r3
 8006148:	f3bf 8f6f 	isb	sy
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	e7fe      	b.n	8006150 <xQueueSemaphoreTake+0x4c>
 8006152:	2600      	movs	r6, #0
 8006154:	4637      	mov	r7, r6
		prvLockQueue( pxQueue );
 8006156:	2500      	movs	r5, #0
 8006158:	e04e      	b.n	80061f8 <xQueueSemaphoreTake+0xf4>
 800615a:	2600      	movs	r6, #0
 800615c:	4637      	mov	r7, r6
 800615e:	e7fa      	b.n	8006156 <xQueueSemaphoreTake+0x52>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006160:	3b01      	subs	r3, #1
 8006162:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006164:	6823      	ldr	r3, [r4, #0]
 8006166:	b13b      	cbz	r3, 8006178 <xQueueSemaphoreTake+0x74>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006168:	6923      	ldr	r3, [r4, #16]
 800616a:	b94b      	cbnz	r3, 8006180 <xQueueSemaphoreTake+0x7c>
				taskEXIT_CRITICAL();
 800616c:	f001 f9cc 	bl	8007508 <vPortExitCritical>
				return pdPASS;
 8006170:	2601      	movs	r6, #1
}
 8006172:	4630      	mov	r0, r6
 8006174:	b005      	add	sp, #20
 8006176:	bdf0      	pop	{r4, r5, r6, r7, pc}
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006178:	f000 ff22 	bl	8006fc0 <pvTaskIncrementMutexHeldCount>
 800617c:	6060      	str	r0, [r4, #4]
 800617e:	e7f3      	b.n	8006168 <xQueueSemaphoreTake+0x64>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006180:	f104 0010 	add.w	r0, r4, #16
 8006184:	f000 fd40 	bl	8006c08 <xTaskRemoveFromEventList>
 8006188:	2800      	cmp	r0, #0
 800618a:	d0ef      	beq.n	800616c <xQueueSemaphoreTake+0x68>
						queueYIELD_IF_USING_PREEMPTION();
 800618c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006194:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006198:	f3bf 8f4f 	dsb	sy
 800619c:	f3bf 8f6f 	isb	sy
 80061a0:	e7e4      	b.n	800616c <xQueueSemaphoreTake+0x68>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80061a2:	b146      	cbz	r6, 80061b6 <xQueueSemaphoreTake+0xb2>
 80061a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a8:	f383 8811 	msr	BASEPRI, r3
 80061ac:	f3bf 8f6f 	isb	sy
 80061b0:	f3bf 8f4f 	dsb	sy
 80061b4:	e7fe      	b.n	80061b4 <xQueueSemaphoreTake+0xb0>
					taskEXIT_CRITICAL();
 80061b6:	f001 f9a7 	bl	8007508 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80061ba:	e7da      	b.n	8006172 <xQueueSemaphoreTake+0x6e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80061bc:	a802      	add	r0, sp, #8
 80061be:	f000 fdab 	bl	8006d18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80061c2:	e023      	b.n	800620c <xQueueSemaphoreTake+0x108>
						taskENTER_CRITICAL();
 80061c4:	f001 f97e 	bl	80074c4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80061c8:	6860      	ldr	r0, [r4, #4]
 80061ca:	f000 fe09 	bl	8006de0 <xTaskPriorityInherit>
 80061ce:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 80061d0:	f001 f99a 	bl	8007508 <vPortExitCritical>
 80061d4:	e040      	b.n	8006258 <xQueueSemaphoreTake+0x154>
				prvUnlockQueue( pxQueue );
 80061d6:	4620      	mov	r0, r4
 80061d8:	f7ff fc74 	bl	8005ac4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80061dc:	f000 fbb4 	bl	8006948 <xTaskResumeAll>
 80061e0:	e009      	b.n	80061f6 <xQueueSemaphoreTake+0xf2>
			prvUnlockQueue( pxQueue );
 80061e2:	4620      	mov	r0, r4
 80061e4:	f7ff fc6e 	bl	8005ac4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80061e8:	f000 fbae 	bl	8006948 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061ec:	4620      	mov	r0, r4
 80061ee:	f7ff fc11 	bl	8005a14 <prvIsQueueEmpty>
 80061f2:	2800      	cmp	r0, #0
 80061f4:	d147      	bne.n	8006286 <xQueueSemaphoreTake+0x182>
 80061f6:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 80061f8:	f001 f964 	bl	80074c4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80061fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1ae      	bne.n	8006160 <xQueueSemaphoreTake+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006202:	9b01      	ldr	r3, [sp, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d0cc      	beq.n	80061a2 <xQueueSemaphoreTake+0x9e>
				else if( xEntryTimeSet == pdFALSE )
 8006208:	2f00      	cmp	r7, #0
 800620a:	d0d7      	beq.n	80061bc <xQueueSemaphoreTake+0xb8>
		taskEXIT_CRITICAL();
 800620c:	f001 f97c 	bl	8007508 <vPortExitCritical>
		vTaskSuspendAll();
 8006210:	f000 faf2 	bl	80067f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006214:	f001 f956 	bl	80074c4 <vPortEnterCritical>
 8006218:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800621c:	b25b      	sxtb	r3, r3
 800621e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006222:	bf08      	it	eq
 8006224:	f884 5044 	strbeq.w	r5, [r4, #68]	; 0x44
 8006228:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800622c:	b25b      	sxtb	r3, r3
 800622e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006232:	bf08      	it	eq
 8006234:	f884 5045 	strbeq.w	r5, [r4, #69]	; 0x45
 8006238:	f001 f966 	bl	8007508 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800623c:	a901      	add	r1, sp, #4
 800623e:	a802      	add	r0, sp, #8
 8006240:	f000 fd76 	bl	8006d30 <xTaskCheckForTimeOut>
 8006244:	2800      	cmp	r0, #0
 8006246:	d1cc      	bne.n	80061e2 <xQueueSemaphoreTake+0xde>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006248:	4620      	mov	r0, r4
 800624a:	f7ff fbe3 	bl	8005a14 <prvIsQueueEmpty>
 800624e:	2800      	cmp	r0, #0
 8006250:	d0c1      	beq.n	80061d6 <xQueueSemaphoreTake+0xd2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006252:	6823      	ldr	r3, [r4, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d0b5      	beq.n	80061c4 <xQueueSemaphoreTake+0xc0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006258:	9901      	ldr	r1, [sp, #4]
 800625a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800625e:	f000 fc71 	bl	8006b44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006262:	4620      	mov	r0, r4
 8006264:	f7ff fc2e 	bl	8005ac4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006268:	f000 fb6e 	bl	8006948 <xTaskResumeAll>
 800626c:	2800      	cmp	r0, #0
 800626e:	d1c2      	bne.n	80061f6 <xQueueSemaphoreTake+0xf2>
					portYIELD_WITHIN_API();
 8006270:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006274:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006278:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800627c:	f3bf 8f4f 	dsb	sy
 8006280:	f3bf 8f6f 	isb	sy
 8006284:	e7b7      	b.n	80061f6 <xQueueSemaphoreTake+0xf2>
					if( xInheritanceOccurred != pdFALSE )
 8006286:	2e00      	cmp	r6, #0
 8006288:	f43f af73 	beq.w	8006172 <xQueueSemaphoreTake+0x6e>
						taskENTER_CRITICAL();
 800628c:	f001 f91a 	bl	80074c4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8006290:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006292:	b119      	cbz	r1, 800629c <xQueueSemaphoreTake+0x198>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006294:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006296:	6819      	ldr	r1, [r3, #0]
 8006298:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800629c:	6860      	ldr	r0, [r4, #4]
 800629e:	f000 fe33 	bl	8006f08 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80062a2:	f001 f931 	bl	8007508 <vPortExitCritical>
				return errQUEUE_EMPTY;
 80062a6:	2600      	movs	r6, #0
 80062a8:	e763      	b.n	8006172 <xQueueSemaphoreTake+0x6e>
	...

080062ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80062ac:	b410      	push	{r4}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80062ae:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80062b0:	4c07      	ldr	r4, [pc, #28]	; (80062d0 <vQueueAddToRegistry+0x24>)
 80062b2:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
 80062b6:	b122      	cbz	r2, 80062c2 <vQueueAddToRegistry+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80062b8:	3301      	adds	r3, #1
 80062ba:	2b08      	cmp	r3, #8
 80062bc:	d1f9      	bne.n	80062b2 <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80062be:	bc10      	pop	{r4}
 80062c0:	4770      	bx	lr
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80062c2:	4a03      	ldr	r2, [pc, #12]	; (80062d0 <vQueueAddToRegistry+0x24>)
 80062c4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80062c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80062cc:	6058      	str	r0, [r3, #4]
				break;
 80062ce:	e7f6      	b.n	80062be <vQueueAddToRegistry+0x12>
 80062d0:	20002840 	.word	0x20002840

080062d4 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80062d4:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80062d6:	4909      	ldr	r1, [pc, #36]	; (80062fc <vQueueUnregisterQueue+0x28>)
 80062d8:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 80062dc:	6852      	ldr	r2, [r2, #4]
 80062de:	4282      	cmp	r2, r0
 80062e0:	d003      	beq.n	80062ea <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80062e2:	3301      	adds	r3, #1
 80062e4:	2b08      	cmp	r3, #8
 80062e6:	d1f7      	bne.n	80062d8 <vQueueUnregisterQueue+0x4>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80062e8:	4770      	bx	lr
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80062ea:	4a04      	ldr	r2, [pc, #16]	; (80062fc <vQueueUnregisterQueue+0x28>)
 80062ec:	2100      	movs	r1, #0
 80062ee:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80062f2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80062f6:	6059      	str	r1, [r3, #4]
				break;
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	20002840 	.word	0x20002840

08006300 <vQueueDelete>:
	configASSERT( pxQueue );
 8006300:	b138      	cbz	r0, 8006312 <vQueueDelete+0x12>
{
 8006302:	b510      	push	{r4, lr}
 8006304:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 8006306:	f7ff ffe5 	bl	80062d4 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800630a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800630e:	b14b      	cbz	r3, 8006324 <vQueueDelete+0x24>
}
 8006310:	bd10      	pop	{r4, pc}
 8006312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006316:	f383 8811 	msr	BASEPRI, r3
 800631a:	f3bf 8f6f 	isb	sy
 800631e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8006322:	e7fe      	b.n	8006322 <vQueueDelete+0x22>
			vPortFree( pxQueue );
 8006324:	4620      	mov	r0, r4
 8006326:	f001 faad 	bl	8007884 <vPortFree>
}
 800632a:	e7f1      	b.n	8006310 <vQueueDelete+0x10>

0800632c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800632c:	b570      	push	{r4, r5, r6, lr}
 800632e:	4604      	mov	r4, r0
 8006330:	460d      	mov	r5, r1
 8006332:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006334:	f001 f8c6 	bl	80074c4 <vPortEnterCritical>
 8006338:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800633c:	b25b      	sxtb	r3, r3
 800633e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006342:	bf04      	itt	eq
 8006344:	2300      	moveq	r3, #0
 8006346:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 800634a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800634e:	b25b      	sxtb	r3, r3
 8006350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006354:	bf04      	itt	eq
 8006356:	2300      	moveq	r3, #0
 8006358:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 800635c:	f001 f8d4 	bl	8007508 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006360:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006362:	b11b      	cbz	r3, 800636c <vQueueWaitForMessageRestricted+0x40>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006364:	4620      	mov	r0, r4
 8006366:	f7ff fbad 	bl	8005ac4 <prvUnlockQueue>
	}
 800636a:	bd70      	pop	{r4, r5, r6, pc}
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800636c:	4632      	mov	r2, r6
 800636e:	4629      	mov	r1, r5
 8006370:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006374:	f000 fc2a 	bl	8006bcc <vTaskPlaceOnEventListRestricted>
 8006378:	e7f4      	b.n	8006364 <vQueueWaitForMessageRestricted+0x38>
	...

0800637c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800637c:	4b08      	ldr	r3, [pc, #32]	; (80063a0 <prvResetNextTaskUnblockTime+0x24>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	b923      	cbnz	r3, 800638e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006384:	4b07      	ldr	r3, [pc, #28]	; (80063a4 <prvResetNextTaskUnblockTime+0x28>)
 8006386:	f04f 32ff 	mov.w	r2, #4294967295
 800638a:	601a      	str	r2, [r3, #0]
 800638c:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800638e:	4b04      	ldr	r3, [pc, #16]	; (80063a0 <prvResetNextTaskUnblockTime+0x24>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	685a      	ldr	r2, [r3, #4]
 8006398:	4b02      	ldr	r3, [pc, #8]	; (80063a4 <prvResetNextTaskUnblockTime+0x28>)
 800639a:	601a      	str	r2, [r3, #0]
	}
}
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	20002884 	.word	0x20002884
 80063a4:	20002d2c 	.word	0x20002d2c

080063a8 <prvInitialiseNewTask>:
{
 80063a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063ac:	4606      	mov	r6, r0
 80063ae:	4689      	mov	r9, r1
 80063b0:	461f      	mov	r7, r3
 80063b2:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80063b6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80063b8:	0095      	lsls	r5, r2, #2
 80063ba:	462a      	mov	r2, r5
 80063bc:	21a5      	movs	r1, #165	; 0xa5
 80063be:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80063c0:	f001 faca 	bl	8007958 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80063c4:	3d04      	subs	r5, #4
 80063c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80063c8:	441d      	add	r5, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80063ca:	f025 0507 	bic.w	r5, r5, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063ce:	f109 3cff 	add.w	ip, r9, #4294967295
 80063d2:	f104 0e33 	add.w	lr, r4, #51	; 0x33
 80063d6:	f109 010f 	add.w	r1, r9, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80063da:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 80063de:	f80e 2f01 	strb.w	r2, [lr, #1]!
		if( pcName[ x ] == 0x00 )
 80063e2:	b10a      	cbz	r2, 80063e8 <prvInitialiseNewTask+0x40>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063e4:	458c      	cmp	ip, r1
 80063e6:	d1f8      	bne.n	80063da <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80063e8:	f04f 0a00 	mov.w	sl, #0
 80063ec:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80063f0:	9b08      	ldr	r3, [sp, #32]
 80063f2:	2b37      	cmp	r3, #55	; 0x37
 80063f4:	bf28      	it	cs
 80063f6:	2337      	movcs	r3, #55	; 0x37
 80063f8:	4699      	mov	r9, r3
	pxNewTCB->uxPriority = uxPriority;
 80063fa:	62e3      	str	r3, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80063fc:	64e3      	str	r3, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80063fe:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006402:	1d20      	adds	r0, r4, #4
 8006404:	f7ff facd 	bl	80059a2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006408:	f104 0018 	add.w	r0, r4, #24
 800640c:	f7ff fac9 	bl	80059a2 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006410:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006412:	f1c9 0338 	rsb	r3, r9, #56	; 0x38
 8006416:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006418:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800641a:	f8c4 a0b4 	str.w	sl, [r4, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800641e:	f884 a0b8 	strb.w	sl, [r4, #184]	; 0xb8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006422:	2260      	movs	r2, #96	; 0x60
 8006424:	4651      	mov	r1, sl
 8006426:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800642a:	f001 fa95 	bl	8007958 <memset>
 800642e:	4b09      	ldr	r3, [pc, #36]	; (8006454 <prvInitialiseNewTask+0xac>)
 8006430:	65a3      	str	r3, [r4, #88]	; 0x58
 8006432:	4b09      	ldr	r3, [pc, #36]	; (8006458 <prvInitialiseNewTask+0xb0>)
 8006434:	65e3      	str	r3, [r4, #92]	; 0x5c
 8006436:	4b09      	ldr	r3, [pc, #36]	; (800645c <prvInitialiseNewTask+0xb4>)
 8006438:	6623      	str	r3, [r4, #96]	; 0x60
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800643a:	463a      	mov	r2, r7
 800643c:	4631      	mov	r1, r6
 800643e:	4628      	mov	r0, r5
 8006440:	f001 f816 	bl	8007470 <pxPortInitialiseStack>
 8006444:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8006446:	f1b8 0f00 	cmp.w	r8, #0
 800644a:	d001      	beq.n	8006450 <prvInitialiseNewTask+0xa8>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800644c:	f8c8 4000 	str.w	r4, [r8]
}
 8006450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006454:	0800801c 	.word	0x0800801c
 8006458:	0800803c 	.word	0x0800803c
 800645c:	08007ffc 	.word	0x08007ffc

08006460 <prvAddNewTaskToReadyList>:
{
 8006460:	b570      	push	{r4, r5, r6, lr}
 8006462:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8006464:	f001 f82e 	bl	80074c4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8006468:	4a30      	ldr	r2, [pc, #192]	; (800652c <prvAddNewTaskToReadyList+0xcc>)
 800646a:	6813      	ldr	r3, [r2, #0]
 800646c:	3301      	adds	r3, #1
 800646e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006470:	4b2f      	ldr	r3, [pc, #188]	; (8006530 <prvAddNewTaskToReadyList+0xd0>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d034      	beq.n	80064e2 <prvAddNewTaskToReadyList+0x82>
			if( xSchedulerRunning == pdFALSE )
 8006478:	4b2e      	ldr	r3, [pc, #184]	; (8006534 <prvAddNewTaskToReadyList+0xd4>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	b93b      	cbnz	r3, 800648e <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800647e:	4b2c      	ldr	r3, [pc, #176]	; (8006530 <prvAddNewTaskToReadyList+0xd0>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006484:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006486:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8006488:	bf9c      	itt	ls
 800648a:	4b29      	ldrls	r3, [pc, #164]	; (8006530 <prvAddNewTaskToReadyList+0xd0>)
 800648c:	601d      	strls	r5, [r3, #0]
		uxTaskNumber++;
 800648e:	4a2a      	ldr	r2, [pc, #168]	; (8006538 <prvAddNewTaskToReadyList+0xd8>)
 8006490:	6813      	ldr	r3, [r2, #0]
 8006492:	3301      	adds	r3, #1
 8006494:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006496:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8006498:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800649a:	4b28      	ldr	r3, [pc, #160]	; (800653c <prvAddNewTaskToReadyList+0xdc>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4298      	cmp	r0, r3
 80064a0:	bf84      	itt	hi
 80064a2:	4b26      	ldrhi	r3, [pc, #152]	; (800653c <prvAddNewTaskToReadyList+0xdc>)
 80064a4:	6018      	strhi	r0, [r3, #0]
 80064a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80064aa:	1d29      	adds	r1, r5, #4
 80064ac:	4b24      	ldr	r3, [pc, #144]	; (8006540 <prvAddNewTaskToReadyList+0xe0>)
 80064ae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80064b2:	f7ff fa79 	bl	80059a8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80064b6:	f001 f827 	bl	8007508 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80064ba:	4b1e      	ldr	r3, [pc, #120]	; (8006534 <prvAddNewTaskToReadyList+0xd4>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	b17b      	cbz	r3, 80064e0 <prvAddNewTaskToReadyList+0x80>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80064c0:	4b1b      	ldr	r3, [pc, #108]	; (8006530 <prvAddNewTaskToReadyList+0xd0>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d209      	bcs.n	80064e0 <prvAddNewTaskToReadyList+0x80>
			taskYIELD_IF_USING_PREEMPTION();
 80064cc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80064d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064d4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80064d8:	f3bf 8f4f 	dsb	sy
 80064dc:	f3bf 8f6f 	isb	sy
}
 80064e0:	bd70      	pop	{r4, r5, r6, pc}
			pxCurrentTCB = pxNewTCB;
 80064e2:	4b13      	ldr	r3, [pc, #76]	; (8006530 <prvAddNewTaskToReadyList+0xd0>)
 80064e4:	601d      	str	r5, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80064e6:	6813      	ldr	r3, [r2, #0]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d1d0      	bne.n	800648e <prvAddNewTaskToReadyList+0x2e>
 80064ec:	4c14      	ldr	r4, [pc, #80]	; (8006540 <prvAddNewTaskToReadyList+0xe0>)
 80064ee:	f504 668c 	add.w	r6, r4, #1120	; 0x460
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80064f2:	4620      	mov	r0, r4
 80064f4:	f7ff fa4a 	bl	800598c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064f8:	3414      	adds	r4, #20
 80064fa:	42b4      	cmp	r4, r6
 80064fc:	d1f9      	bne.n	80064f2 <prvAddNewTaskToReadyList+0x92>
	vListInitialise( &xDelayedTaskList1 );
 80064fe:	4e11      	ldr	r6, [pc, #68]	; (8006544 <prvAddNewTaskToReadyList+0xe4>)
 8006500:	4630      	mov	r0, r6
 8006502:	f7ff fa43 	bl	800598c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006506:	4c10      	ldr	r4, [pc, #64]	; (8006548 <prvAddNewTaskToReadyList+0xe8>)
 8006508:	4620      	mov	r0, r4
 800650a:	f7ff fa3f 	bl	800598c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800650e:	480f      	ldr	r0, [pc, #60]	; (800654c <prvAddNewTaskToReadyList+0xec>)
 8006510:	f7ff fa3c 	bl	800598c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8006514:	480e      	ldr	r0, [pc, #56]	; (8006550 <prvAddNewTaskToReadyList+0xf0>)
 8006516:	f7ff fa39 	bl	800598c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800651a:	480e      	ldr	r0, [pc, #56]	; (8006554 <prvAddNewTaskToReadyList+0xf4>)
 800651c:	f7ff fa36 	bl	800598c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8006520:	4b0d      	ldr	r3, [pc, #52]	; (8006558 <prvAddNewTaskToReadyList+0xf8>)
 8006522:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006524:	4b0d      	ldr	r3, [pc, #52]	; (800655c <prvAddNewTaskToReadyList+0xfc>)
 8006526:	601c      	str	r4, [r3, #0]
}
 8006528:	e7b1      	b.n	800648e <prvAddNewTaskToReadyList+0x2e>
 800652a:	bf00      	nop
 800652c:	20002cec 	.word	0x20002cec
 8006530:	20002880 	.word	0x20002880
 8006534:	20002d48 	.word	0x20002d48
 8006538:	20002cfc 	.word	0x20002cfc
 800653c:	20002d00 	.word	0x20002d00
 8006540:	2000288c 	.word	0x2000288c
 8006544:	20002d04 	.word	0x20002d04
 8006548:	20002d18 	.word	0x20002d18
 800654c:	20002d34 	.word	0x20002d34
 8006550:	20002d60 	.word	0x20002d60
 8006554:	20002d4c 	.word	0x20002d4c
 8006558:	20002884 	.word	0x20002884
 800655c:	20002888 	.word	0x20002888

08006560 <prvDeleteTCB>:
	{
 8006560:	b510      	push	{r4, lr}
 8006562:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006564:	3054      	adds	r0, #84	; 0x54
 8006566:	f001 fa0d 	bl	8007984 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800656a:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 800656e:	b163      	cbz	r3, 800658a <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006570:	2b01      	cmp	r3, #1
 8006572:	d011      	beq.n	8006598 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006574:	2b02      	cmp	r3, #2
 8006576:	d00e      	beq.n	8006596 <prvDeleteTCB+0x36>
 8006578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657c:	f383 8811 	msr	BASEPRI, r3
 8006580:	f3bf 8f6f 	isb	sy
 8006584:	f3bf 8f4f 	dsb	sy
 8006588:	e7fe      	b.n	8006588 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 800658a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800658c:	f001 f97a 	bl	8007884 <vPortFree>
				vPortFree( pxTCB );
 8006590:	4620      	mov	r0, r4
 8006592:	f001 f977 	bl	8007884 <vPortFree>
	}
 8006596:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8006598:	4620      	mov	r0, r4
 800659a:	f001 f973 	bl	8007884 <vPortFree>
 800659e:	e7fa      	b.n	8006596 <prvDeleteTCB+0x36>

080065a0 <prvIdleTask>:
{
 80065a0:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065a2:	4c15      	ldr	r4, [pc, #84]	; (80065f8 <prvIdleTask+0x58>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80065a4:	4f15      	ldr	r7, [pc, #84]	; (80065fc <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 80065a6:	4e16      	ldr	r6, [pc, #88]	; (8006600 <prvIdleTask+0x60>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80065a8:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8006604 <prvIdleTask+0x64>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065ac:	6823      	ldr	r3, [r4, #0]
 80065ae:	b1a3      	cbz	r3, 80065da <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 80065b0:	f000 ff88 	bl	80074c4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065b8:	1d28      	adds	r0, r5, #4
 80065ba:	f7ff fa19 	bl	80059f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80065be:	6833      	ldr	r3, [r6, #0]
 80065c0:	3b01      	subs	r3, #1
 80065c2:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 80065c4:	6823      	ldr	r3, [r4, #0]
 80065c6:	3b01      	subs	r3, #1
 80065c8:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80065ca:	f000 ff9d 	bl	8007508 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80065ce:	4628      	mov	r0, r5
 80065d0:	f7ff ffc6 	bl	8006560 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065d4:	6823      	ldr	r3, [r4, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1ea      	bne.n	80065b0 <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80065da:	f8d8 3000 	ldr.w	r3, [r8]
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d9e4      	bls.n	80065ac <prvIdleTask+0xc>
				taskYIELD();
 80065e2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80065e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065ea:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80065ee:	f3bf 8f4f 	dsb	sy
 80065f2:	f3bf 8f6f 	isb	sy
 80065f6:	e7d9      	b.n	80065ac <prvIdleTask+0xc>
 80065f8:	20002cf0 	.word	0x20002cf0
 80065fc:	20002d60 	.word	0x20002d60
 8006600:	20002cec 	.word	0x20002cec
 8006604:	2000288c 	.word	0x2000288c

08006608 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006608:	b570      	push	{r4, r5, r6, lr}
 800660a:	4604      	mov	r4, r0
 800660c:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800660e:	4b17      	ldr	r3, [pc, #92]	; (800666c <prvAddCurrentTaskToDelayedList+0x64>)
 8006610:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006612:	4b17      	ldr	r3, [pc, #92]	; (8006670 <prvAddCurrentTaskToDelayedList+0x68>)
 8006614:	6818      	ldr	r0, [r3, #0]
 8006616:	3004      	adds	r0, #4
 8006618:	f7ff f9ea 	bl	80059f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800661c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006620:	d00d      	beq.n	800663e <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006622:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006624:	4b12      	ldr	r3, [pc, #72]	; (8006670 <prvAddCurrentTaskToDelayedList+0x68>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800662a:	42a6      	cmp	r6, r4
 800662c:	d910      	bls.n	8006650 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800662e:	4b11      	ldr	r3, [pc, #68]	; (8006674 <prvAddCurrentTaskToDelayedList+0x6c>)
 8006630:	6818      	ldr	r0, [r3, #0]
 8006632:	4b0f      	ldr	r3, [pc, #60]	; (8006670 <prvAddCurrentTaskToDelayedList+0x68>)
 8006634:	6819      	ldr	r1, [r3, #0]
 8006636:	3104      	adds	r1, #4
 8006638:	f7ff f9c1 	bl	80059be <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800663c:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800663e:	2d00      	cmp	r5, #0
 8006640:	d0ef      	beq.n	8006622 <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006642:	4b0b      	ldr	r3, [pc, #44]	; (8006670 <prvAddCurrentTaskToDelayedList+0x68>)
 8006644:	6819      	ldr	r1, [r3, #0]
 8006646:	3104      	adds	r1, #4
 8006648:	480b      	ldr	r0, [pc, #44]	; (8006678 <prvAddCurrentTaskToDelayedList+0x70>)
 800664a:	f7ff f9ad 	bl	80059a8 <vListInsertEnd>
 800664e:	e7f5      	b.n	800663c <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006650:	4b0a      	ldr	r3, [pc, #40]	; (800667c <prvAddCurrentTaskToDelayedList+0x74>)
 8006652:	6818      	ldr	r0, [r3, #0]
 8006654:	4b06      	ldr	r3, [pc, #24]	; (8006670 <prvAddCurrentTaskToDelayedList+0x68>)
 8006656:	6819      	ldr	r1, [r3, #0]
 8006658:	3104      	adds	r1, #4
 800665a:	f7ff f9b0 	bl	80059be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800665e:	4b08      	ldr	r3, [pc, #32]	; (8006680 <prvAddCurrentTaskToDelayedList+0x78>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	42a3      	cmp	r3, r4
					xNextTaskUnblockTime = xTimeToWake;
 8006664:	bf84      	itt	hi
 8006666:	4b06      	ldrhi	r3, [pc, #24]	; (8006680 <prvAddCurrentTaskToDelayedList+0x78>)
 8006668:	601c      	strhi	r4, [r3, #0]
}
 800666a:	e7e7      	b.n	800663c <prvAddCurrentTaskToDelayedList+0x34>
 800666c:	20002d74 	.word	0x20002d74
 8006670:	20002880 	.word	0x20002880
 8006674:	20002888 	.word	0x20002888
 8006678:	20002d4c 	.word	0x20002d4c
 800667c:	20002884 	.word	0x20002884
 8006680:	20002d2c 	.word	0x20002d2c

08006684 <xTaskCreateStatic>:
	{
 8006684:	b530      	push	{r4, r5, lr}
 8006686:	b087      	sub	sp, #28
 8006688:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800668a:	b17c      	cbz	r4, 80066ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800668c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800668e:	b1b5      	cbz	r5, 80066be <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8006690:	25bc      	movs	r5, #188	; 0xbc
 8006692:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006694:	9d04      	ldr	r5, [sp, #16]
 8006696:	2dbc      	cmp	r5, #188	; 0xbc
 8006698:	d01a      	beq.n	80066d0 <xTaskCreateStatic+0x4c>
 800669a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669e:	f383 8811 	msr	BASEPRI, r3
 80066a2:	f3bf 8f6f 	isb	sy
 80066a6:	f3bf 8f4f 	dsb	sy
 80066aa:	e7fe      	b.n	80066aa <xTaskCreateStatic+0x26>
 80066ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b0:	f383 8811 	msr	BASEPRI, r3
 80066b4:	f3bf 8f6f 	isb	sy
 80066b8:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 80066bc:	e7fe      	b.n	80066bc <xTaskCreateStatic+0x38>
 80066be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c2:	f383 8811 	msr	BASEPRI, r3
 80066c6:	f3bf 8f6f 	isb	sy
 80066ca:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 80066ce:	e7fe      	b.n	80066ce <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80066d0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80066d2:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80066d4:	2402      	movs	r4, #2
 80066d6:	f885 40b9 	strb.w	r4, [r5, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80066da:	2400      	movs	r4, #0
 80066dc:	9403      	str	r4, [sp, #12]
 80066de:	9502      	str	r5, [sp, #8]
 80066e0:	ac05      	add	r4, sp, #20
 80066e2:	9401      	str	r4, [sp, #4]
 80066e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80066e6:	9400      	str	r4, [sp, #0]
 80066e8:	f7ff fe5e 	bl	80063a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066ec:	980c      	ldr	r0, [sp, #48]	; 0x30
 80066ee:	f7ff feb7 	bl	8006460 <prvAddNewTaskToReadyList>
	}
 80066f2:	9805      	ldr	r0, [sp, #20]
 80066f4:	b007      	add	sp, #28
 80066f6:	bd30      	pop	{r4, r5, pc}

080066f8 <xTaskCreate>:
	{
 80066f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80066fc:	b085      	sub	sp, #20
 80066fe:	4607      	mov	r7, r0
 8006700:	4688      	mov	r8, r1
 8006702:	4614      	mov	r4, r2
 8006704:	461e      	mov	r6, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006706:	0090      	lsls	r0, r2, #2
 8006708:	f001 f826 	bl	8007758 <pvPortMalloc>
			if( pxStack != NULL )
 800670c:	b308      	cbz	r0, 8006752 <xTaskCreate+0x5a>
 800670e:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006710:	20bc      	movs	r0, #188	; 0xbc
 8006712:	f001 f821 	bl	8007758 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8006716:	4605      	mov	r5, r0
 8006718:	b1a8      	cbz	r0, 8006746 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 800671a:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800671e:	2300      	movs	r3, #0
 8006720:	f880 30b9 	strb.w	r3, [r0, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006724:	9303      	str	r3, [sp, #12]
 8006726:	9002      	str	r0, [sp, #8]
 8006728:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800672a:	9301      	str	r3, [sp, #4]
 800672c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800672e:	9300      	str	r3, [sp, #0]
 8006730:	4633      	mov	r3, r6
 8006732:	4622      	mov	r2, r4
 8006734:	4641      	mov	r1, r8
 8006736:	4638      	mov	r0, r7
 8006738:	f7ff fe36 	bl	80063a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800673c:	4628      	mov	r0, r5
 800673e:	f7ff fe8f 	bl	8006460 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006742:	2001      	movs	r0, #1
 8006744:	e007      	b.n	8006756 <xTaskCreate+0x5e>
					vPortFree( pxStack );
 8006746:	4648      	mov	r0, r9
 8006748:	f001 f89c 	bl	8007884 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800674c:	f04f 30ff 	mov.w	r0, #4294967295
 8006750:	e001      	b.n	8006756 <xTaskCreate+0x5e>
 8006752:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8006756:	b005      	add	sp, #20
 8006758:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800675c <vTaskStartScheduler>:
{
 800675c:	b510      	push	{r4, lr}
 800675e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006760:	2400      	movs	r4, #0
 8006762:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006764:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006766:	aa07      	add	r2, sp, #28
 8006768:	a906      	add	r1, sp, #24
 800676a:	a805      	add	r0, sp, #20
 800676c:	f7fe ffe0 	bl	8005730 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006770:	9b05      	ldr	r3, [sp, #20]
 8006772:	9302      	str	r3, [sp, #8]
 8006774:	9b06      	ldr	r3, [sp, #24]
 8006776:	9301      	str	r3, [sp, #4]
 8006778:	9400      	str	r4, [sp, #0]
 800677a:	4623      	mov	r3, r4
 800677c:	9a07      	ldr	r2, [sp, #28]
 800677e:	4917      	ldr	r1, [pc, #92]	; (80067dc <vTaskStartScheduler+0x80>)
 8006780:	4817      	ldr	r0, [pc, #92]	; (80067e0 <vTaskStartScheduler+0x84>)
 8006782:	f7ff ff7f 	bl	8006684 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8006786:	b338      	cbz	r0, 80067d8 <vTaskStartScheduler+0x7c>
			xReturn = xTimerCreateTimerTask();
 8006788:	f000 fc84 	bl	8007094 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800678c:	2801      	cmp	r0, #1
 800678e:	d00b      	beq.n	80067a8 <vTaskStartScheduler+0x4c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006790:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006794:	d120      	bne.n	80067d8 <vTaskStartScheduler+0x7c>
 8006796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679a:	f383 8811 	msr	BASEPRI, r3
 800679e:	f3bf 8f6f 	isb	sy
 80067a2:	f3bf 8f4f 	dsb	sy
 80067a6:	e7fe      	b.n	80067a6 <vTaskStartScheduler+0x4a>
 80067a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ac:	f383 8811 	msr	BASEPRI, r3
 80067b0:	f3bf 8f6f 	isb	sy
 80067b4:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80067b8:	4b0a      	ldr	r3, [pc, #40]	; (80067e4 <vTaskStartScheduler+0x88>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	3354      	adds	r3, #84	; 0x54
 80067be:	4a0a      	ldr	r2, [pc, #40]	; (80067e8 <vTaskStartScheduler+0x8c>)
 80067c0:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 80067c2:	4b0a      	ldr	r3, [pc, #40]	; (80067ec <vTaskStartScheduler+0x90>)
 80067c4:	f04f 32ff 	mov.w	r2, #4294967295
 80067c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80067ca:	4b09      	ldr	r3, [pc, #36]	; (80067f0 <vTaskStartScheduler+0x94>)
 80067cc:	2201      	movs	r2, #1
 80067ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80067d0:	4b08      	ldr	r3, [pc, #32]	; (80067f4 <vTaskStartScheduler+0x98>)
 80067d2:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80067d4:	f000 ff00 	bl	80075d8 <xPortStartScheduler>
}
 80067d8:	b008      	add	sp, #32
 80067da:	bd10      	pop	{r4, pc}
 80067dc:	08007fe4 	.word	0x08007fe4
 80067e0:	080065a1 	.word	0x080065a1
 80067e4:	20002880 	.word	0x20002880
 80067e8:	2000001c 	.word	0x2000001c
 80067ec:	20002d2c 	.word	0x20002d2c
 80067f0:	20002d48 	.word	0x20002d48
 80067f4:	20002d74 	.word	0x20002d74

080067f8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80067f8:	4a02      	ldr	r2, [pc, #8]	; (8006804 <vTaskSuspendAll+0xc>)
 80067fa:	6813      	ldr	r3, [r2, #0]
 80067fc:	3301      	adds	r3, #1
 80067fe:	6013      	str	r3, [r2, #0]
}
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	20002cf8 	.word	0x20002cf8

08006808 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8006808:	4b01      	ldr	r3, [pc, #4]	; (8006810 <xTaskGetTickCount+0x8>)
 800680a:	6818      	ldr	r0, [r3, #0]
}
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	20002d74 	.word	0x20002d74

08006814 <xTaskIncrementTick>:
{
 8006814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006818:	4b40      	ldr	r3, [pc, #256]	; (800691c <xTaskIncrementTick+0x108>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d170      	bne.n	8006902 <xTaskIncrementTick+0xee>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006820:	4b3f      	ldr	r3, [pc, #252]	; (8006920 <xTaskIncrementTick+0x10c>)
 8006822:	681e      	ldr	r6, [r3, #0]
 8006824:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8006826:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006828:	b9c6      	cbnz	r6, 800685c <xTaskIncrementTick+0x48>
			taskSWITCH_DELAYED_LISTS();
 800682a:	4b3e      	ldr	r3, [pc, #248]	; (8006924 <xTaskIncrementTick+0x110>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	b143      	cbz	r3, 8006844 <xTaskIncrementTick+0x30>
 8006832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006836:	f383 8811 	msr	BASEPRI, r3
 800683a:	f3bf 8f6f 	isb	sy
 800683e:	f3bf 8f4f 	dsb	sy
 8006842:	e7fe      	b.n	8006842 <xTaskIncrementTick+0x2e>
 8006844:	4a37      	ldr	r2, [pc, #220]	; (8006924 <xTaskIncrementTick+0x110>)
 8006846:	6811      	ldr	r1, [r2, #0]
 8006848:	4b37      	ldr	r3, [pc, #220]	; (8006928 <xTaskIncrementTick+0x114>)
 800684a:	6818      	ldr	r0, [r3, #0]
 800684c:	6010      	str	r0, [r2, #0]
 800684e:	6019      	str	r1, [r3, #0]
 8006850:	4a36      	ldr	r2, [pc, #216]	; (800692c <xTaskIncrementTick+0x118>)
 8006852:	6813      	ldr	r3, [r2, #0]
 8006854:	3301      	adds	r3, #1
 8006856:	6013      	str	r3, [r2, #0]
 8006858:	f7ff fd90 	bl	800637c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800685c:	4b34      	ldr	r3, [pc, #208]	; (8006930 <xTaskIncrementTick+0x11c>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	42b3      	cmp	r3, r6
 8006862:	d841      	bhi.n	80068e8 <xTaskIncrementTick+0xd4>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006864:	4b2f      	ldr	r3, [pc, #188]	; (8006924 <xTaskIncrementTick+0x110>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	b13b      	cbz	r3, 800687c <xTaskIncrementTick+0x68>
BaseType_t xSwitchRequired = pdFALSE;
 800686c:	2500      	movs	r5, #0
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800686e:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8006924 <xTaskIncrementTick+0x110>
					prvAddTaskToReadyList( pxTCB );
 8006872:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8006934 <xTaskIncrementTick+0x120>
 8006876:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8006938 <xTaskIncrementTick+0x124>
 800687a:	e022      	b.n	80068c2 <xTaskIncrementTick+0xae>
BaseType_t xSwitchRequired = pdFALSE;
 800687c:	2500      	movs	r5, #0
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800687e:	4b2c      	ldr	r3, [pc, #176]	; (8006930 <xTaskIncrementTick+0x11c>)
 8006880:	f04f 32ff 	mov.w	r2, #4294967295
 8006884:	601a      	str	r2, [r3, #0]
					break;
 8006886:	e030      	b.n	80068ea <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = xItemValue;
 8006888:	4a29      	ldr	r2, [pc, #164]	; (8006930 <xTaskIncrementTick+0x11c>)
 800688a:	6013      	str	r3, [r2, #0]
						break;
 800688c:	e02d      	b.n	80068ea <xTaskIncrementTick+0xd6>
					prvAddTaskToReadyList( pxTCB );
 800688e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006890:	f8d9 3000 	ldr.w	r3, [r9]
 8006894:	4298      	cmp	r0, r3
 8006896:	bf88      	it	hi
 8006898:	f8c9 0000 	strhi.w	r0, [r9]
 800689c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80068a0:	4639      	mov	r1, r7
 80068a2:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 80068a6:	f7ff f87f 	bl	80059a8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068aa:	4b24      	ldr	r3, [pc, #144]	; (800693c <xTaskIncrementTick+0x128>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80068b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80068b2:	429a      	cmp	r2, r3
 80068b4:	bf28      	it	cs
 80068b6:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068b8:	f8d8 3000 	ldr.w	r3, [r8]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d0dd      	beq.n	800687e <xTaskIncrementTick+0x6a>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80068c2:	f8d8 3000 	ldr.w	r3, [r8]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80068ca:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 80068cc:	429e      	cmp	r6, r3
 80068ce:	d3db      	bcc.n	8006888 <xTaskIncrementTick+0x74>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068d0:	1d27      	adds	r7, r4, #4
 80068d2:	4638      	mov	r0, r7
 80068d4:	f7ff f88c 	bl	80059f0 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80068d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d0d7      	beq.n	800688e <xTaskIncrementTick+0x7a>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80068de:	f104 0018 	add.w	r0, r4, #24
 80068e2:	f7ff f885 	bl	80059f0 <uxListRemove>
 80068e6:	e7d2      	b.n	800688e <xTaskIncrementTick+0x7a>
BaseType_t xSwitchRequired = pdFALSE;
 80068e8:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80068ea:	4b14      	ldr	r3, [pc, #80]	; (800693c <xTaskIncrementTick+0x128>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	4a10      	ldr	r2, [pc, #64]	; (8006938 <xTaskIncrementTick+0x124>)
 80068f8:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	bf28      	it	cs
 80068fe:	2501      	movcs	r5, #1
 8006900:	e004      	b.n	800690c <xTaskIncrementTick+0xf8>
		++uxPendedTicks;
 8006902:	4a0f      	ldr	r2, [pc, #60]	; (8006940 <xTaskIncrementTick+0x12c>)
 8006904:	6813      	ldr	r3, [r2, #0]
 8006906:	3301      	adds	r3, #1
 8006908:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800690a:	2500      	movs	r5, #0
		if( xYieldPending != pdFALSE )
 800690c:	4b0d      	ldr	r3, [pc, #52]	; (8006944 <xTaskIncrementTick+0x130>)
 800690e:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8006910:	2b00      	cmp	r3, #0
}
 8006912:	bf0c      	ite	eq
 8006914:	4628      	moveq	r0, r5
 8006916:	2001      	movne	r0, #1
 8006918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800691c:	20002cf8 	.word	0x20002cf8
 8006920:	20002d74 	.word	0x20002d74
 8006924:	20002884 	.word	0x20002884
 8006928:	20002888 	.word	0x20002888
 800692c:	20002d30 	.word	0x20002d30
 8006930:	20002d2c 	.word	0x20002d2c
 8006934:	20002d00 	.word	0x20002d00
 8006938:	2000288c 	.word	0x2000288c
 800693c:	20002880 	.word	0x20002880
 8006940:	20002cf4 	.word	0x20002cf4
 8006944:	20002d78 	.word	0x20002d78

08006948 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8006948:	4b38      	ldr	r3, [pc, #224]	; (8006a2c <xTaskResumeAll+0xe4>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	b943      	cbnz	r3, 8006960 <xTaskResumeAll+0x18>
 800694e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006952:	f383 8811 	msr	BASEPRI, r3
 8006956:	f3bf 8f6f 	isb	sy
 800695a:	f3bf 8f4f 	dsb	sy
 800695e:	e7fe      	b.n	800695e <xTaskResumeAll+0x16>
{
 8006960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
 8006964:	f000 fdae 	bl	80074c4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8006968:	4b30      	ldr	r3, [pc, #192]	; (8006a2c <xTaskResumeAll+0xe4>)
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	3a01      	subs	r2, #1
 800696e:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d149      	bne.n	8006a0a <xTaskResumeAll+0xc2>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006976:	4b2e      	ldr	r3, [pc, #184]	; (8006a30 <xTaskResumeAll+0xe8>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d04b      	beq.n	8006a16 <xTaskResumeAll+0xce>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800697e:	4b2d      	ldr	r3, [pc, #180]	; (8006a34 <xTaskResumeAll+0xec>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d04b      	beq.n	8006a1e <xTaskResumeAll+0xd6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006986:	4e2b      	ldr	r6, [pc, #172]	; (8006a34 <xTaskResumeAll+0xec>)
					prvAddTaskToReadyList( pxTCB );
 8006988:	4f2b      	ldr	r7, [pc, #172]	; (8006a38 <xTaskResumeAll+0xf0>)
 800698a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8006a3c <xTaskResumeAll+0xf4>
 800698e:	e002      	b.n	8006996 <xTaskResumeAll+0x4e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006990:	6833      	ldr	r3, [r6, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d041      	beq.n	8006a1a <xTaskResumeAll+0xd2>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006996:	68f3      	ldr	r3, [r6, #12]
 8006998:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800699a:	f104 0018 	add.w	r0, r4, #24
 800699e:	f7ff f827 	bl	80059f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069a2:	1d25      	adds	r5, r4, #4
 80069a4:	4628      	mov	r0, r5
 80069a6:	f7ff f823 	bl	80059f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80069aa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	4298      	cmp	r0, r3
 80069b0:	bf88      	it	hi
 80069b2:	6038      	strhi	r0, [r7, #0]
 80069b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80069b8:	4629      	mov	r1, r5
 80069ba:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 80069be:	f7fe fff3 	bl	80059a8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80069c2:	4b1f      	ldr	r3, [pc, #124]	; (8006a40 <xTaskResumeAll+0xf8>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80069c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d3e0      	bcc.n	8006990 <xTaskResumeAll+0x48>
						xYieldPending = pdTRUE;
 80069ce:	4b1d      	ldr	r3, [pc, #116]	; (8006a44 <xTaskResumeAll+0xfc>)
 80069d0:	2201      	movs	r2, #1
 80069d2:	601a      	str	r2, [r3, #0]
 80069d4:	e7dc      	b.n	8006990 <xTaskResumeAll+0x48>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80069d6:	3c01      	subs	r4, #1
 80069d8:	d005      	beq.n	80069e6 <xTaskResumeAll+0x9e>
							if( xTaskIncrementTick() != pdFALSE )
 80069da:	f7ff ff1b 	bl	8006814 <xTaskIncrementTick>
 80069de:	2800      	cmp	r0, #0
 80069e0:	d0f9      	beq.n	80069d6 <xTaskResumeAll+0x8e>
								xYieldPending = pdTRUE;
 80069e2:	6035      	str	r5, [r6, #0]
 80069e4:	e7f7      	b.n	80069d6 <xTaskResumeAll+0x8e>
						uxPendedTicks = 0;
 80069e6:	4b18      	ldr	r3, [pc, #96]	; (8006a48 <xTaskResumeAll+0x100>)
 80069e8:	2200      	movs	r2, #0
 80069ea:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 80069ec:	4b15      	ldr	r3, [pc, #84]	; (8006a44 <xTaskResumeAll+0xfc>)
 80069ee:	681c      	ldr	r4, [r3, #0]
 80069f0:	b164      	cbz	r4, 8006a0c <xTaskResumeAll+0xc4>
					taskYIELD_IF_USING_PREEMPTION();
 80069f2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80069f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069fa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80069fe:	f3bf 8f4f 	dsb	sy
 8006a02:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8006a06:	2401      	movs	r4, #1
 8006a08:	e000      	b.n	8006a0c <xTaskResumeAll+0xc4>
BaseType_t xAlreadyYielded = pdFALSE;
 8006a0a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006a0c:	f000 fd7c 	bl	8007508 <vPortExitCritical>
}
 8006a10:	4620      	mov	r0, r4
 8006a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 8006a16:	2400      	movs	r4, #0
 8006a18:	e7f8      	b.n	8006a0c <xTaskResumeAll+0xc4>
					prvResetNextTaskUnblockTime();
 8006a1a:	f7ff fcaf 	bl	800637c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006a1e:	4b0a      	ldr	r3, [pc, #40]	; (8006a48 <xTaskResumeAll+0x100>)
 8006a20:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006a22:	2c00      	cmp	r4, #0
 8006a24:	d0e2      	beq.n	80069ec <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 8006a26:	4e07      	ldr	r6, [pc, #28]	; (8006a44 <xTaskResumeAll+0xfc>)
 8006a28:	2501      	movs	r5, #1
 8006a2a:	e7d6      	b.n	80069da <xTaskResumeAll+0x92>
 8006a2c:	20002cf8 	.word	0x20002cf8
 8006a30:	20002cec 	.word	0x20002cec
 8006a34:	20002d34 	.word	0x20002d34
 8006a38:	20002d00 	.word	0x20002d00
 8006a3c:	2000288c 	.word	0x2000288c
 8006a40:	20002880 	.word	0x20002880
 8006a44:	20002d78 	.word	0x20002d78
 8006a48:	20002cf4 	.word	0x20002cf4

08006a4c <vTaskDelay>:
	{
 8006a4c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006a4e:	b1a8      	cbz	r0, 8006a7c <vTaskDelay+0x30>
 8006a50:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8006a52:	4b10      	ldr	r3, [pc, #64]	; (8006a94 <vTaskDelay+0x48>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	b143      	cbz	r3, 8006a6a <vTaskDelay+0x1e>
 8006a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5c:	f383 8811 	msr	BASEPRI, r3
 8006a60:	f3bf 8f6f 	isb	sy
 8006a64:	f3bf 8f4f 	dsb	sy
 8006a68:	e7fe      	b.n	8006a68 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8006a6a:	f7ff fec5 	bl	80067f8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006a6e:	2100      	movs	r1, #0
 8006a70:	4620      	mov	r0, r4
 8006a72:	f7ff fdc9 	bl	8006608 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8006a76:	f7ff ff67 	bl	8006948 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8006a7a:	b948      	cbnz	r0, 8006a90 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8006a7c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006a80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a84:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006a88:	f3bf 8f4f 	dsb	sy
 8006a8c:	f3bf 8f6f 	isb	sy
	}
 8006a90:	bd10      	pop	{r4, pc}
 8006a92:	bf00      	nop
 8006a94:	20002cf8 	.word	0x20002cf8

08006a98 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006a98:	4b24      	ldr	r3, [pc, #144]	; (8006b2c <vTaskSwitchContext+0x94>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	b11b      	cbz	r3, 8006aa6 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8006a9e:	4b24      	ldr	r3, [pc, #144]	; (8006b30 <vTaskSwitchContext+0x98>)
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	601a      	str	r2, [r3, #0]
 8006aa4:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8006aa6:	4b22      	ldr	r3, [pc, #136]	; (8006b30 <vTaskSwitchContext+0x98>)
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006aac:	4b21      	ldr	r3, [pc, #132]	; (8006b34 <vTaskSwitchContext+0x9c>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006ab4:	0092      	lsls	r2, r2, #2
 8006ab6:	4920      	ldr	r1, [pc, #128]	; (8006b38 <vTaskSwitchContext+0xa0>)
 8006ab8:	588a      	ldr	r2, [r1, r2]
 8006aba:	b98a      	cbnz	r2, 8006ae0 <vTaskSwitchContext+0x48>
 8006abc:	b13b      	cbz	r3, 8006ace <vTaskSwitchContext+0x36>
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006ac4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006ac8:	b952      	cbnz	r2, 8006ae0 <vTaskSwitchContext+0x48>
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1f7      	bne.n	8006abe <vTaskSwitchContext+0x26>
 8006ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad2:	f383 8811 	msr	BASEPRI, r3
 8006ad6:	f3bf 8f6f 	isb	sy
 8006ada:	f3bf 8f4f 	dsb	sy
 8006ade:	e7fe      	b.n	8006ade <vTaskSwitchContext+0x46>
 8006ae0:	4a15      	ldr	r2, [pc, #84]	; (8006b38 <vTaskSwitchContext+0xa0>)
 8006ae2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006ae6:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8006aea:	6848      	ldr	r0, [r1, #4]
 8006aec:	6840      	ldr	r0, [r0, #4]
 8006aee:	6048      	str	r0, [r1, #4]
 8006af0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006af4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006af8:	3208      	adds	r2, #8
 8006afa:	4290      	cmp	r0, r2
 8006afc:	d00f      	beq.n	8006b1e <vTaskSwitchContext+0x86>
 8006afe:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006b02:	4a0d      	ldr	r2, [pc, #52]	; (8006b38 <vTaskSwitchContext+0xa0>)
 8006b04:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006b08:	6852      	ldr	r2, [r2, #4]
 8006b0a:	68d1      	ldr	r1, [r2, #12]
 8006b0c:	4a0b      	ldr	r2, [pc, #44]	; (8006b3c <vTaskSwitchContext+0xa4>)
 8006b0e:	6011      	str	r1, [r2, #0]
 8006b10:	4908      	ldr	r1, [pc, #32]	; (8006b34 <vTaskSwitchContext+0x9c>)
 8006b12:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006b14:	6813      	ldr	r3, [r2, #0]
 8006b16:	3354      	adds	r3, #84	; 0x54
 8006b18:	4a09      	ldr	r2, [pc, #36]	; (8006b40 <vTaskSwitchContext+0xa8>)
 8006b1a:	6013      	str	r3, [r2, #0]
}
 8006b1c:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006b1e:	6840      	ldr	r0, [r0, #4]
 8006b20:	4a05      	ldr	r2, [pc, #20]	; (8006b38 <vTaskSwitchContext+0xa0>)
 8006b22:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006b26:	6050      	str	r0, [r2, #4]
 8006b28:	e7e9      	b.n	8006afe <vTaskSwitchContext+0x66>
 8006b2a:	bf00      	nop
 8006b2c:	20002cf8 	.word	0x20002cf8
 8006b30:	20002d78 	.word	0x20002d78
 8006b34:	20002d00 	.word	0x20002d00
 8006b38:	2000288c 	.word	0x2000288c
 8006b3c:	20002880 	.word	0x20002880
 8006b40:	2000001c 	.word	0x2000001c

08006b44 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8006b44:	b158      	cbz	r0, 8006b5e <vTaskPlaceOnEventList+0x1a>
{
 8006b46:	b510      	push	{r4, lr}
 8006b48:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b4a:	4a09      	ldr	r2, [pc, #36]	; (8006b70 <vTaskPlaceOnEventList+0x2c>)
 8006b4c:	6811      	ldr	r1, [r2, #0]
 8006b4e:	3118      	adds	r1, #24
 8006b50:	f7fe ff35 	bl	80059be <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006b54:	2101      	movs	r1, #1
 8006b56:	4620      	mov	r0, r4
 8006b58:	f7ff fd56 	bl	8006608 <prvAddCurrentTaskToDelayedList>
}
 8006b5c:	bd10      	pop	{r4, pc}
 8006b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b62:	f383 8811 	msr	BASEPRI, r3
 8006b66:	f3bf 8f6f 	isb	sy
 8006b6a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8006b6e:	e7fe      	b.n	8006b6e <vTaskPlaceOnEventList+0x2a>
 8006b70:	20002880 	.word	0x20002880

08006b74 <vTaskPlaceOnUnorderedEventList>:
	configASSERT( pxEventList );
 8006b74:	b170      	cbz	r0, 8006b94 <vTaskPlaceOnUnorderedEventList+0x20>
{
 8006b76:	b510      	push	{r4, lr}
 8006b78:	4614      	mov	r4, r2
 8006b7a:	4602      	mov	r2, r0
	configASSERT( uxSchedulerSuspended != 0 );
 8006b7c:	4b11      	ldr	r3, [pc, #68]	; (8006bc4 <vTaskPlaceOnUnorderedEventList+0x50>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	b98b      	cbnz	r3, 8006ba6 <vTaskPlaceOnUnorderedEventList+0x32>
 8006b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b86:	f383 8811 	msr	BASEPRI, r3
 8006b8a:	f3bf 8f6f 	isb	sy
 8006b8e:	f3bf 8f4f 	dsb	sy
 8006b92:	e7fe      	b.n	8006b92 <vTaskPlaceOnUnorderedEventList+0x1e>
 8006b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b98:	f383 8811 	msr	BASEPRI, r3
 8006b9c:	f3bf 8f6f 	isb	sy
 8006ba0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8006ba4:	e7fe      	b.n	8006ba4 <vTaskPlaceOnUnorderedEventList+0x30>
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006ba6:	4b08      	ldr	r3, [pc, #32]	; (8006bc8 <vTaskPlaceOnUnorderedEventList+0x54>)
 8006ba8:	6818      	ldr	r0, [r3, #0]
 8006baa:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8006bae:	6181      	str	r1, [r0, #24]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006bb0:	6819      	ldr	r1, [r3, #0]
 8006bb2:	3118      	adds	r1, #24
 8006bb4:	4610      	mov	r0, r2
 8006bb6:	f7fe fef7 	bl	80059a8 <vListInsertEnd>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006bba:	2101      	movs	r1, #1
 8006bbc:	4620      	mov	r0, r4
 8006bbe:	f7ff fd23 	bl	8006608 <prvAddCurrentTaskToDelayedList>
}
 8006bc2:	bd10      	pop	{r4, pc}
 8006bc4:	20002cf8 	.word	0x20002cf8
 8006bc8:	20002880 	.word	0x20002880

08006bcc <vTaskPlaceOnEventListRestricted>:
	{
 8006bcc:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8006bce:	b178      	cbz	r0, 8006bf0 <vTaskPlaceOnEventListRestricted+0x24>
 8006bd0:	460d      	mov	r5, r1
 8006bd2:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006bd4:	4a0b      	ldr	r2, [pc, #44]	; (8006c04 <vTaskPlaceOnEventListRestricted+0x38>)
 8006bd6:	6811      	ldr	r1, [r2, #0]
 8006bd8:	3118      	adds	r1, #24
 8006bda:	f7fe fee5 	bl	80059a8 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8006bde:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006be0:	4621      	mov	r1, r4
 8006be2:	bf0c      	ite	eq
 8006be4:	4628      	moveq	r0, r5
 8006be6:	f04f 30ff 	movne.w	r0, #4294967295
 8006bea:	f7ff fd0d 	bl	8006608 <prvAddCurrentTaskToDelayedList>
	}
 8006bee:	bd38      	pop	{r3, r4, r5, pc}
 8006bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf4:	f383 8811 	msr	BASEPRI, r3
 8006bf8:	f3bf 8f6f 	isb	sy
 8006bfc:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8006c00:	e7fe      	b.n	8006c00 <vTaskPlaceOnEventListRestricted+0x34>
 8006c02:	bf00      	nop
 8006c04:	20002880 	.word	0x20002880

08006c08 <xTaskRemoveFromEventList>:
{
 8006c08:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006c0a:	68c3      	ldr	r3, [r0, #12]
 8006c0c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8006c0e:	b32c      	cbz	r4, 8006c5c <xTaskRemoveFromEventList+0x54>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006c10:	f104 0518 	add.w	r5, r4, #24
 8006c14:	4628      	mov	r0, r5
 8006c16:	f7fe feeb 	bl	80059f0 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c1a:	4b17      	ldr	r3, [pc, #92]	; (8006c78 <xTaskRemoveFromEventList+0x70>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	bb33      	cbnz	r3, 8006c6e <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006c20:	1d25      	adds	r5, r4, #4
 8006c22:	4628      	mov	r0, r5
 8006c24:	f7fe fee4 	bl	80059f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006c28:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006c2a:	4b14      	ldr	r3, [pc, #80]	; (8006c7c <xTaskRemoveFromEventList+0x74>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4298      	cmp	r0, r3
 8006c30:	bf84      	itt	hi
 8006c32:	4b12      	ldrhi	r3, [pc, #72]	; (8006c7c <xTaskRemoveFromEventList+0x74>)
 8006c34:	6018      	strhi	r0, [r3, #0]
 8006c36:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006c3a:	4629      	mov	r1, r5
 8006c3c:	4b10      	ldr	r3, [pc, #64]	; (8006c80 <xTaskRemoveFromEventList+0x78>)
 8006c3e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006c42:	f7fe feb1 	bl	80059a8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c46:	4b0f      	ldr	r3, [pc, #60]	; (8006c84 <xTaskRemoveFromEventList+0x7c>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c4e:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8006c50:	bf83      	ittte	hi
 8006c52:	2001      	movhi	r0, #1
 8006c54:	4b0c      	ldrhi	r3, [pc, #48]	; (8006c88 <xTaskRemoveFromEventList+0x80>)
 8006c56:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8006c58:	2000      	movls	r0, #0
}
 8006c5a:	bd38      	pop	{r3, r4, r5, pc}
 8006c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c60:	f383 8811 	msr	BASEPRI, r3
 8006c64:	f3bf 8f6f 	isb	sy
 8006c68:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8006c6c:	e7fe      	b.n	8006c6c <xTaskRemoveFromEventList+0x64>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006c6e:	4629      	mov	r1, r5
 8006c70:	4806      	ldr	r0, [pc, #24]	; (8006c8c <xTaskRemoveFromEventList+0x84>)
 8006c72:	f7fe fe99 	bl	80059a8 <vListInsertEnd>
 8006c76:	e7e6      	b.n	8006c46 <xTaskRemoveFromEventList+0x3e>
 8006c78:	20002cf8 	.word	0x20002cf8
 8006c7c:	20002d00 	.word	0x20002d00
 8006c80:	2000288c 	.word	0x2000288c
 8006c84:	20002880 	.word	0x20002880
 8006c88:	20002d78 	.word	0x20002d78
 8006c8c:	20002d34 	.word	0x20002d34

08006c90 <vTaskRemoveFromUnorderedEventList>:
{
 8006c90:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8006c92:	4b1c      	ldr	r3, [pc, #112]	; (8006d04 <vTaskRemoveFromUnorderedEventList+0x74>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	b943      	cbnz	r3, 8006caa <vTaskRemoveFromUnorderedEventList+0x1a>
 8006c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9c:	f383 8811 	msr	BASEPRI, r3
 8006ca0:	f3bf 8f6f 	isb	sy
 8006ca4:	f3bf 8f4f 	dsb	sy
 8006ca8:	e7fe      	b.n	8006ca8 <vTaskRemoveFromUnorderedEventList+0x18>
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006caa:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8006cae:	6001      	str	r1, [r0, #0]
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8006cb0:	68c4      	ldr	r4, [r0, #12]
	configASSERT( pxUnblockedTCB );
 8006cb2:	b1f4      	cbz	r4, 8006cf2 <vTaskRemoveFromUnorderedEventList+0x62>
	( void ) uxListRemove( pxEventListItem );
 8006cb4:	f7fe fe9c 	bl	80059f0 <uxListRemove>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006cb8:	1d25      	adds	r5, r4, #4
 8006cba:	4628      	mov	r0, r5
 8006cbc:	f7fe fe98 	bl	80059f0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006cc0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006cc2:	4b11      	ldr	r3, [pc, #68]	; (8006d08 <vTaskRemoveFromUnorderedEventList+0x78>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4298      	cmp	r0, r3
 8006cc8:	bf84      	itt	hi
 8006cca:	4b0f      	ldrhi	r3, [pc, #60]	; (8006d08 <vTaskRemoveFromUnorderedEventList+0x78>)
 8006ccc:	6018      	strhi	r0, [r3, #0]
 8006cce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006cd2:	4629      	mov	r1, r5
 8006cd4:	4b0d      	ldr	r3, [pc, #52]	; (8006d0c <vTaskRemoveFromUnorderedEventList+0x7c>)
 8006cd6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006cda:	f7fe fe65 	bl	80059a8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006cde:	4b0c      	ldr	r3, [pc, #48]	; (8006d10 <vTaskRemoveFromUnorderedEventList+0x80>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d902      	bls.n	8006cf0 <vTaskRemoveFromUnorderedEventList+0x60>
		xYieldPending = pdTRUE;
 8006cea:	4b0a      	ldr	r3, [pc, #40]	; (8006d14 <vTaskRemoveFromUnorderedEventList+0x84>)
 8006cec:	2201      	movs	r2, #1
 8006cee:	601a      	str	r2, [r3, #0]
}
 8006cf0:	bd38      	pop	{r3, r4, r5, pc}
 8006cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf6:	f383 8811 	msr	BASEPRI, r3
 8006cfa:	f3bf 8f6f 	isb	sy
 8006cfe:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8006d02:	e7fe      	b.n	8006d02 <vTaskRemoveFromUnorderedEventList+0x72>
 8006d04:	20002cf8 	.word	0x20002cf8
 8006d08:	20002d00 	.word	0x20002d00
 8006d0c:	2000288c 	.word	0x2000288c
 8006d10:	20002880 	.word	0x20002880
 8006d14:	20002d78 	.word	0x20002d78

08006d18 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006d18:	4b03      	ldr	r3, [pc, #12]	; (8006d28 <vTaskInternalSetTimeOutState+0x10>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006d1e:	4b03      	ldr	r3, [pc, #12]	; (8006d2c <vTaskInternalSetTimeOutState+0x14>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	6043      	str	r3, [r0, #4]
}
 8006d24:	4770      	bx	lr
 8006d26:	bf00      	nop
 8006d28:	20002d30 	.word	0x20002d30
 8006d2c:	20002d74 	.word	0x20002d74

08006d30 <xTaskCheckForTimeOut>:
{
 8006d30:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
 8006d32:	b1d0      	cbz	r0, 8006d6a <xTaskCheckForTimeOut+0x3a>
 8006d34:	460c      	mov	r4, r1
 8006d36:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8006d38:	b301      	cbz	r1, 8006d7c <xTaskCheckForTimeOut+0x4c>
	taskENTER_CRITICAL();
 8006d3a:	f000 fbc3 	bl	80074c4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8006d3e:	4b1b      	ldr	r3, [pc, #108]	; (8006dac <xTaskCheckForTimeOut+0x7c>)
 8006d40:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8006d42:	6823      	ldr	r3, [r4, #0]
 8006d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d48:	d029      	beq.n	8006d9e <xTaskCheckForTimeOut+0x6e>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006d4a:	6869      	ldr	r1, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006d4c:	4818      	ldr	r0, [pc, #96]	; (8006db0 <xTaskCheckForTimeOut+0x80>)
 8006d4e:	6800      	ldr	r0, [r0, #0]
 8006d50:	f8d5 c000 	ldr.w	ip, [r5]
 8006d54:	4584      	cmp	ip, r0
 8006d56:	d001      	beq.n	8006d5c <xTaskCheckForTimeOut+0x2c>
 8006d58:	4291      	cmp	r1, r2
 8006d5a:	d925      	bls.n	8006da8 <xTaskCheckForTimeOut+0x78>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006d5c:	1a50      	subs	r0, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006d5e:	4283      	cmp	r3, r0
 8006d60:	d815      	bhi.n	8006d8e <xTaskCheckForTimeOut+0x5e>
			*pxTicksToWait = 0;
 8006d62:	2300      	movs	r3, #0
 8006d64:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8006d66:	2401      	movs	r4, #1
 8006d68:	e01a      	b.n	8006da0 <xTaskCheckForTimeOut+0x70>
 8006d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6e:	f383 8811 	msr	BASEPRI, r3
 8006d72:	f3bf 8f6f 	isb	sy
 8006d76:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8006d7a:	e7fe      	b.n	8006d7a <xTaskCheckForTimeOut+0x4a>
 8006d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d80:	f383 8811 	msr	BASEPRI, r3
 8006d84:	f3bf 8f6f 	isb	sy
 8006d88:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8006d8c:	e7fe      	b.n	8006d8c <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait -= xElapsedTime;
 8006d8e:	1a9b      	subs	r3, r3, r2
 8006d90:	440b      	add	r3, r1
 8006d92:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006d94:	4628      	mov	r0, r5
 8006d96:	f7ff ffbf 	bl	8006d18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006d9a:	2400      	movs	r4, #0
 8006d9c:	e000      	b.n	8006da0 <xTaskCheckForTimeOut+0x70>
				xReturn = pdFALSE;
 8006d9e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006da0:	f000 fbb2 	bl	8007508 <vPortExitCritical>
}
 8006da4:	4620      	mov	r0, r4
 8006da6:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 8006da8:	2401      	movs	r4, #1
 8006daa:	e7f9      	b.n	8006da0 <xTaskCheckForTimeOut+0x70>
 8006dac:	20002d74 	.word	0x20002d74
 8006db0:	20002d30 	.word	0x20002d30

08006db4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8006db4:	4b01      	ldr	r3, [pc, #4]	; (8006dbc <vTaskMissedYield+0x8>)
 8006db6:	2201      	movs	r2, #1
 8006db8:	601a      	str	r2, [r3, #0]
}
 8006dba:	4770      	bx	lr
 8006dbc:	20002d78 	.word	0x20002d78

08006dc0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8006dc0:	4b05      	ldr	r3, [pc, #20]	; (8006dd8 <xTaskGetSchedulerState+0x18>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	b133      	cbz	r3, 8006dd4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dc6:	4b05      	ldr	r3, [pc, #20]	; (8006ddc <xTaskGetSchedulerState+0x1c>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	bf0c      	ite	eq
 8006dce:	2002      	moveq	r0, #2
 8006dd0:	2000      	movne	r0, #0
 8006dd2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006dd4:	2001      	movs	r0, #1
	}
 8006dd6:	4770      	bx	lr
 8006dd8:	20002d48 	.word	0x20002d48
 8006ddc:	20002cf8 	.word	0x20002cf8

08006de0 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8006de0:	2800      	cmp	r0, #0
 8006de2:	d040      	beq.n	8006e66 <xTaskPriorityInherit+0x86>
	{
 8006de4:	b538      	push	{r3, r4, r5, lr}
 8006de6:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006de8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006dea:	4a20      	ldr	r2, [pc, #128]	; (8006e6c <xTaskPriorityInherit+0x8c>)
 8006dec:	6812      	ldr	r2, [r2, #0]
 8006dee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d22f      	bcs.n	8006e54 <xTaskPriorityInherit+0x74>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006df4:	6982      	ldr	r2, [r0, #24]
 8006df6:	2a00      	cmp	r2, #0
 8006df8:	db05      	blt.n	8006e06 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dfa:	4a1c      	ldr	r2, [pc, #112]	; (8006e6c <xTaskPriorityInherit+0x8c>)
 8006dfc:	6812      	ldr	r2, [r2, #0]
 8006dfe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006e00:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8006e04:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006e06:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006e0a:	4a19      	ldr	r2, [pc, #100]	; (8006e70 <xTaskPriorityInherit+0x90>)
 8006e0c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006e10:	6962      	ldr	r2, [r4, #20]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d005      	beq.n	8006e22 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006e16:	4b15      	ldr	r3, [pc, #84]	; (8006e6c <xTaskPriorityInherit+0x8c>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1c:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 8006e1e:	2001      	movs	r0, #1
 8006e20:	e020      	b.n	8006e64 <xTaskPriorityInherit+0x84>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e22:	1d25      	adds	r5, r4, #4
 8006e24:	4628      	mov	r0, r5
 8006e26:	f7fe fde3 	bl	80059f0 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006e2a:	4b10      	ldr	r3, [pc, #64]	; (8006e6c <xTaskPriorityInherit+0x8c>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006e30:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006e32:	4b10      	ldr	r3, [pc, #64]	; (8006e74 <xTaskPriorityInherit+0x94>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4298      	cmp	r0, r3
 8006e38:	d809      	bhi.n	8006e4e <xTaskPriorityInherit+0x6e>
 8006e3a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006e3e:	4629      	mov	r1, r5
 8006e40:	4b0b      	ldr	r3, [pc, #44]	; (8006e70 <xTaskPriorityInherit+0x90>)
 8006e42:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006e46:	f7fe fdaf 	bl	80059a8 <vListInsertEnd>
				xReturn = pdTRUE;
 8006e4a:	2001      	movs	r0, #1
 8006e4c:	e00a      	b.n	8006e64 <xTaskPriorityInherit+0x84>
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006e4e:	4b09      	ldr	r3, [pc, #36]	; (8006e74 <xTaskPriorityInherit+0x94>)
 8006e50:	6018      	str	r0, [r3, #0]
 8006e52:	e7f2      	b.n	8006e3a <xTaskPriorityInherit+0x5a>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006e54:	4b05      	ldr	r3, [pc, #20]	; (8006e6c <xTaskPriorityInherit+0x8c>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8006e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5c:	4298      	cmp	r0, r3
 8006e5e:	bf2c      	ite	cs
 8006e60:	2000      	movcs	r0, #0
 8006e62:	2001      	movcc	r0, #1
	}
 8006e64:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8006e66:	2000      	movs	r0, #0
	}
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop
 8006e6c:	20002880 	.word	0x20002880
 8006e70:	2000288c 	.word	0x2000288c
 8006e74:	20002d00 	.word	0x20002d00

08006e78 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8006e78:	2800      	cmp	r0, #0
 8006e7a:	d03b      	beq.n	8006ef4 <xTaskPriorityDisinherit+0x7c>
	{
 8006e7c:	b538      	push	{r3, r4, r5, lr}
 8006e7e:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8006e80:	4b1e      	ldr	r3, [pc, #120]	; (8006efc <xTaskPriorityDisinherit+0x84>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4283      	cmp	r3, r0
 8006e86:	d008      	beq.n	8006e9a <xTaskPriorityDisinherit+0x22>
 8006e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8c:	f383 8811 	msr	BASEPRI, r3
 8006e90:	f3bf 8f6f 	isb	sy
 8006e94:	f3bf 8f4f 	dsb	sy
 8006e98:	e7fe      	b.n	8006e98 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e9a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006e9c:	b943      	cbnz	r3, 8006eb0 <xTaskPriorityDisinherit+0x38>
 8006e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea2:	f383 8811 	msr	BASEPRI, r3
 8006ea6:	f3bf 8f6f 	isb	sy
 8006eaa:	f3bf 8f4f 	dsb	sy
 8006eae:	e7fe      	b.n	8006eae <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006eb4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8006eb6:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8006eb8:	4291      	cmp	r1, r2
 8006eba:	d01d      	beq.n	8006ef8 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006ebc:	b10b      	cbz	r3, 8006ec2 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8006ebe:	2000      	movs	r0, #0
	}
 8006ec0:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ec2:	1d05      	adds	r5, r0, #4
 8006ec4:	4628      	mov	r0, r5
 8006ec6:	f7fe fd93 	bl	80059f0 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006eca:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006ecc:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ece:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 8006ed2:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8006ed4:	4b0a      	ldr	r3, [pc, #40]	; (8006f00 <xTaskPriorityDisinherit+0x88>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4298      	cmp	r0, r3
 8006eda:	bf84      	itt	hi
 8006edc:	4b08      	ldrhi	r3, [pc, #32]	; (8006f00 <xTaskPriorityDisinherit+0x88>)
 8006ede:	6018      	strhi	r0, [r3, #0]
 8006ee0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006ee4:	4629      	mov	r1, r5
 8006ee6:	4b07      	ldr	r3, [pc, #28]	; (8006f04 <xTaskPriorityDisinherit+0x8c>)
 8006ee8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006eec:	f7fe fd5c 	bl	80059a8 <vListInsertEnd>
					xReturn = pdTRUE;
 8006ef0:	2001      	movs	r0, #1
 8006ef2:	e7e5      	b.n	8006ec0 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8006ef4:	2000      	movs	r0, #0
	}
 8006ef6:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8006ef8:	2000      	movs	r0, #0
 8006efa:	e7e1      	b.n	8006ec0 <xTaskPriorityDisinherit+0x48>
 8006efc:	20002880 	.word	0x20002880
 8006f00:	20002d00 	.word	0x20002d00
 8006f04:	2000288c 	.word	0x2000288c

08006f08 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8006f08:	2800      	cmp	r0, #0
 8006f0a:	d046      	beq.n	8006f9a <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 8006f0c:	b538      	push	{r3, r4, r5, lr}
 8006f0e:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8006f10:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006f12:	b943      	cbnz	r3, 8006f26 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8006f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f18:	f383 8811 	msr	BASEPRI, r3
 8006f1c:	f3bf 8f6f 	isb	sy
 8006f20:	f3bf 8f4f 	dsb	sy
 8006f24:	e7fe      	b.n	8006f24 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006f26:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8006f28:	4291      	cmp	r1, r2
 8006f2a:	bf38      	it	cc
 8006f2c:	4611      	movcc	r1, r2
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006f2e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8006f30:	428a      	cmp	r2, r1
 8006f32:	d001      	beq.n	8006f38 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d000      	beq.n	8006f3a <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 8006f38:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 8006f3a:	4b18      	ldr	r3, [pc, #96]	; (8006f9c <vTaskPriorityDisinheritAfterTimeout+0x94>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4283      	cmp	r3, r0
 8006f40:	d022      	beq.n	8006f88 <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 8006f42:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006f44:	6983      	ldr	r3, [r0, #24]
 8006f46:	2b00      	cmp	r3, #0
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f48:	bfa4      	itt	ge
 8006f4a:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
 8006f4e:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006f50:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006f54:	4b12      	ldr	r3, [pc, #72]	; (8006fa0 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8006f56:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8006f5a:	6943      	ldr	r3, [r0, #20]
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d1eb      	bne.n	8006f38 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f60:	1d05      	adds	r5, r0, #4
 8006f62:	4628      	mov	r0, r5
 8006f64:	f7fe fd44 	bl	80059f0 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8006f68:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006f6a:	4b0e      	ldr	r3, [pc, #56]	; (8006fa4 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4298      	cmp	r0, r3
 8006f70:	bf84      	itt	hi
 8006f72:	4b0c      	ldrhi	r3, [pc, #48]	; (8006fa4 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8006f74:	6018      	strhi	r0, [r3, #0]
 8006f76:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006f7a:	4629      	mov	r1, r5
 8006f7c:	4b08      	ldr	r3, [pc, #32]	; (8006fa0 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8006f7e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006f82:	f7fe fd11 	bl	80059a8 <vListInsertEnd>
	}
 8006f86:	e7d7      	b.n	8006f38 <vTaskPriorityDisinheritAfterTimeout+0x30>
 8006f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8c:	f383 8811 	msr	BASEPRI, r3
 8006f90:	f3bf 8f6f 	isb	sy
 8006f94:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 8006f98:	e7fe      	b.n	8006f98 <vTaskPriorityDisinheritAfterTimeout+0x90>
 8006f9a:	4770      	bx	lr
 8006f9c:	20002880 	.word	0x20002880
 8006fa0:	2000288c 	.word	0x2000288c
 8006fa4:	20002d00 	.word	0x20002d00

08006fa8 <uxTaskResetEventItemValue>:
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8006fa8:	4b04      	ldr	r3, [pc, #16]	; (8006fbc <uxTaskResetEventItemValue+0x14>)
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	6990      	ldr	r0, [r2, #24]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fae:	6819      	ldr	r1, [r3, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8006fb4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006fb8:	6193      	str	r3, [r2, #24]
}
 8006fba:	4770      	bx	lr
 8006fbc:	20002880 	.word	0x20002880

08006fc0 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8006fc0:	4b05      	ldr	r3, [pc, #20]	; (8006fd8 <pvTaskIncrementMutexHeldCount+0x18>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	b123      	cbz	r3, 8006fd0 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8006fc6:	4b04      	ldr	r3, [pc, #16]	; (8006fd8 <pvTaskIncrementMutexHeldCount+0x18>)
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006fcc:	3301      	adds	r3, #1
 8006fce:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 8006fd0:	4b01      	ldr	r3, [pc, #4]	; (8006fd8 <pvTaskIncrementMutexHeldCount+0x18>)
 8006fd2:	6818      	ldr	r0, [r3, #0]
	}
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	20002880 	.word	0x20002880

08006fdc <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006fdc:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006fde:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006fe0:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006fe2:	4291      	cmp	r1, r2
 8006fe4:	d80c      	bhi.n	8007000 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fe6:	1ad2      	subs	r2, r2, r3
 8006fe8:	6983      	ldr	r3, [r0, #24]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d301      	bcc.n	8006ff2 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006fee:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8006ff0:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006ff2:	1d01      	adds	r1, r0, #4
 8006ff4:	4b09      	ldr	r3, [pc, #36]	; (800701c <prvInsertTimerInActiveList+0x40>)
 8006ff6:	6818      	ldr	r0, [r3, #0]
 8006ff8:	f7fe fce1 	bl	80059be <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8006ffc:	2000      	movs	r0, #0
 8006ffe:	e7f7      	b.n	8006ff0 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007000:	429a      	cmp	r2, r3
 8007002:	d201      	bcs.n	8007008 <prvInsertTimerInActiveList+0x2c>
 8007004:	4299      	cmp	r1, r3
 8007006:	d206      	bcs.n	8007016 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007008:	1d01      	adds	r1, r0, #4
 800700a:	4b05      	ldr	r3, [pc, #20]	; (8007020 <prvInsertTimerInActiveList+0x44>)
 800700c:	6818      	ldr	r0, [r3, #0]
 800700e:	f7fe fcd6 	bl	80059be <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8007012:	2000      	movs	r0, #0
 8007014:	e7ec      	b.n	8006ff0 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 8007016:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8007018:	e7ea      	b.n	8006ff0 <prvInsertTimerInActiveList+0x14>
 800701a:	bf00      	nop
 800701c:	20002d80 	.word	0x20002d80
 8007020:	20002d7c 	.word	0x20002d7c

08007024 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007024:	b530      	push	{r4, r5, lr}
 8007026:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007028:	f000 fa4c 	bl	80074c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800702c:	4b11      	ldr	r3, [pc, #68]	; (8007074 <prvCheckForValidListAndQueue+0x50>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	b11b      	cbz	r3, 800703a <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007032:	f000 fa69 	bl	8007508 <vPortExitCritical>
}
 8007036:	b003      	add	sp, #12
 8007038:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800703a:	4d0f      	ldr	r5, [pc, #60]	; (8007078 <prvCheckForValidListAndQueue+0x54>)
 800703c:	4628      	mov	r0, r5
 800703e:	f7fe fca5 	bl	800598c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007042:	4c0e      	ldr	r4, [pc, #56]	; (800707c <prvCheckForValidListAndQueue+0x58>)
 8007044:	4620      	mov	r0, r4
 8007046:	f7fe fca1 	bl	800598c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800704a:	4b0d      	ldr	r3, [pc, #52]	; (8007080 <prvCheckForValidListAndQueue+0x5c>)
 800704c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800704e:	4b0d      	ldr	r3, [pc, #52]	; (8007084 <prvCheckForValidListAndQueue+0x60>)
 8007050:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007052:	2300      	movs	r3, #0
 8007054:	9300      	str	r3, [sp, #0]
 8007056:	4b0c      	ldr	r3, [pc, #48]	; (8007088 <prvCheckForValidListAndQueue+0x64>)
 8007058:	4a0c      	ldr	r2, [pc, #48]	; (800708c <prvCheckForValidListAndQueue+0x68>)
 800705a:	2110      	movs	r1, #16
 800705c:	200a      	movs	r0, #10
 800705e:	f7fe fdae 	bl	8005bbe <xQueueGenericCreateStatic>
 8007062:	4b04      	ldr	r3, [pc, #16]	; (8007074 <prvCheckForValidListAndQueue+0x50>)
 8007064:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 8007066:	2800      	cmp	r0, #0
 8007068:	d0e3      	beq.n	8007032 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800706a:	4909      	ldr	r1, [pc, #36]	; (8007090 <prvCheckForValidListAndQueue+0x6c>)
 800706c:	f7ff f91e 	bl	80062ac <vQueueAddToRegistry>
 8007070:	e7df      	b.n	8007032 <prvCheckForValidListAndQueue+0xe>
 8007072:	bf00      	nop
 8007074:	20002ea0 	.word	0x20002ea0
 8007078:	20002e24 	.word	0x20002e24
 800707c:	20002e38 	.word	0x20002e38
 8007080:	20002d7c 	.word	0x20002d7c
 8007084:	20002d80 	.word	0x20002d80
 8007088:	20002e50 	.word	0x20002e50
 800708c:	20002d84 	.word	0x20002d84
 8007090:	08007fec 	.word	0x08007fec

08007094 <xTimerCreateTimerTask>:
{
 8007094:	b510      	push	{r4, lr}
 8007096:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8007098:	f7ff ffc4 	bl	8007024 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800709c:	4b12      	ldr	r3, [pc, #72]	; (80070e8 <xTimerCreateTimerTask+0x54>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	b1cb      	cbz	r3, 80070d6 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80070a2:	2400      	movs	r4, #0
 80070a4:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80070a6:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80070a8:	aa07      	add	r2, sp, #28
 80070aa:	a906      	add	r1, sp, #24
 80070ac:	a805      	add	r0, sp, #20
 80070ae:	f7fe fb4b 	bl	8005748 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80070b2:	9b05      	ldr	r3, [sp, #20]
 80070b4:	9302      	str	r3, [sp, #8]
 80070b6:	9b06      	ldr	r3, [sp, #24]
 80070b8:	9301      	str	r3, [sp, #4]
 80070ba:	2302      	movs	r3, #2
 80070bc:	9300      	str	r3, [sp, #0]
 80070be:	4623      	mov	r3, r4
 80070c0:	9a07      	ldr	r2, [sp, #28]
 80070c2:	490a      	ldr	r1, [pc, #40]	; (80070ec <xTimerCreateTimerTask+0x58>)
 80070c4:	480a      	ldr	r0, [pc, #40]	; (80070f0 <xTimerCreateTimerTask+0x5c>)
 80070c6:	f7ff fadd 	bl	8006684 <xTaskCreateStatic>
 80070ca:	4b0a      	ldr	r3, [pc, #40]	; (80070f4 <xTimerCreateTimerTask+0x60>)
 80070cc:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80070ce:	b110      	cbz	r0, 80070d6 <xTimerCreateTimerTask+0x42>
}
 80070d0:	2001      	movs	r0, #1
 80070d2:	b008      	add	sp, #32
 80070d4:	bd10      	pop	{r4, pc}
 80070d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070da:	f383 8811 	msr	BASEPRI, r3
 80070de:	f3bf 8f6f 	isb	sy
 80070e2:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 80070e6:	e7fe      	b.n	80070e6 <xTimerCreateTimerTask+0x52>
 80070e8:	20002ea0 	.word	0x20002ea0
 80070ec:	08007ff4 	.word	0x08007ff4
 80070f0:	08007205 	.word	0x08007205
 80070f4:	20002ea4 	.word	0x20002ea4

080070f8 <xTimerGenericCommand>:
	configASSERT( xTimer );
 80070f8:	b1d8      	cbz	r0, 8007132 <xTimerGenericCommand+0x3a>
 80070fa:	469c      	mov	ip, r3
 80070fc:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 80070fe:	4815      	ldr	r0, [pc, #84]	; (8007154 <xTimerGenericCommand+0x5c>)
 8007100:	6800      	ldr	r0, [r0, #0]
 8007102:	b328      	cbz	r0, 8007150 <xTimerGenericCommand+0x58>
{
 8007104:	b500      	push	{lr}
 8007106:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8007108:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800710a:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800710c:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800710e:	2905      	cmp	r1, #5
 8007110:	dc18      	bgt.n	8007144 <xTimerGenericCommand+0x4c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007112:	f7ff fe55 	bl	8006dc0 <xTaskGetSchedulerState>
 8007116:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007118:	f04f 0300 	mov.w	r3, #0
 800711c:	bf0c      	ite	eq
 800711e:	9a06      	ldreq	r2, [sp, #24]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007120:	461a      	movne	r2, r3
 8007122:	4669      	mov	r1, sp
 8007124:	480b      	ldr	r0, [pc, #44]	; (8007154 <xTimerGenericCommand+0x5c>)
 8007126:	6800      	ldr	r0, [r0, #0]
 8007128:	f7fe fe08 	bl	8005d3c <xQueueGenericSend>
}
 800712c:	b005      	add	sp, #20
 800712e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007136:	f383 8811 	msr	BASEPRI, r3
 800713a:	f3bf 8f6f 	isb	sy
 800713e:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8007142:	e7fe      	b.n	8007142 <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007144:	2300      	movs	r3, #0
 8007146:	4662      	mov	r2, ip
 8007148:	4669      	mov	r1, sp
 800714a:	f7fe fec3 	bl	8005ed4 <xQueueGenericSendFromISR>
 800714e:	e7ed      	b.n	800712c <xTimerGenericCommand+0x34>
BaseType_t xReturn = pdFAIL;
 8007150:	2000      	movs	r0, #0
}
 8007152:	4770      	bx	lr
 8007154:	20002ea0 	.word	0x20002ea0

08007158 <prvSampleTimeNow>:
{
 8007158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800715c:	b082      	sub	sp, #8
 800715e:	4682      	mov	sl, r0
	xTimeNow = xTaskGetTickCount();
 8007160:	f7ff fb52 	bl	8006808 <xTaskGetTickCount>
 8007164:	4606      	mov	r6, r0
	if( xTimeNow < xLastTime )
 8007166:	4b24      	ldr	r3, [pc, #144]	; (80071f8 <prvSampleTimeNow+0xa0>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4283      	cmp	r3, r0
 800716c:	d808      	bhi.n	8007180 <prvSampleTimeNow+0x28>
		*pxTimerListsWereSwitched = pdFALSE;
 800716e:	2300      	movs	r3, #0
 8007170:	f8ca 3000 	str.w	r3, [sl]
	xLastTime = xTimeNow;
 8007174:	4b20      	ldr	r3, [pc, #128]	; (80071f8 <prvSampleTimeNow+0xa0>)
 8007176:	601e      	str	r6, [r3, #0]
}
 8007178:	4630      	mov	r0, r6
 800717a:	b002      	add	sp, #8
 800717c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007180:	4d1e      	ldr	r5, [pc, #120]	; (80071fc <prvSampleTimeNow+0xa4>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007182:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007186:	682b      	ldr	r3, [r5, #0]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	b35a      	cbz	r2, 80071e4 <prvSampleTimeNow+0x8c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	681f      	ldr	r7, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007190:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007192:	f104 0904 	add.w	r9, r4, #4
 8007196:	4648      	mov	r0, r9
 8007198:	f7fe fc2a 	bl	80059f0 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800719c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800719e:	4620      	mov	r0, r4
 80071a0:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80071a2:	69e3      	ldr	r3, [r4, #28]
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d1ee      	bne.n	8007186 <prvSampleTimeNow+0x2e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80071a8:	69a3      	ldr	r3, [r4, #24]
 80071aa:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 80071ac:	429f      	cmp	r7, r3
 80071ae:	d206      	bcs.n	80071be <prvSampleTimeNow+0x66>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80071b0:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80071b2:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80071b4:	4649      	mov	r1, r9
 80071b6:	6828      	ldr	r0, [r5, #0]
 80071b8:	f7fe fc01 	bl	80059be <vListInsert>
 80071bc:	e7e3      	b.n	8007186 <prvSampleTimeNow+0x2e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80071be:	f8cd 8000 	str.w	r8, [sp]
 80071c2:	4643      	mov	r3, r8
 80071c4:	463a      	mov	r2, r7
 80071c6:	4641      	mov	r1, r8
 80071c8:	4620      	mov	r0, r4
 80071ca:	f7ff ff95 	bl	80070f8 <xTimerGenericCommand>
				configASSERT( xResult );
 80071ce:	2800      	cmp	r0, #0
 80071d0:	d1d9      	bne.n	8007186 <prvSampleTimeNow+0x2e>
 80071d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d6:	f383 8811 	msr	BASEPRI, r3
 80071da:	f3bf 8f6f 	isb	sy
 80071de:	f3bf 8f4f 	dsb	sy
 80071e2:	e7fe      	b.n	80071e2 <prvSampleTimeNow+0x8a>
	pxCurrentTimerList = pxOverflowTimerList;
 80071e4:	4a06      	ldr	r2, [pc, #24]	; (8007200 <prvSampleTimeNow+0xa8>)
 80071e6:	6810      	ldr	r0, [r2, #0]
 80071e8:	4904      	ldr	r1, [pc, #16]	; (80071fc <prvSampleTimeNow+0xa4>)
 80071ea:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 80071ec:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 80071ee:	2301      	movs	r3, #1
 80071f0:	f8ca 3000 	str.w	r3, [sl]
 80071f4:	e7be      	b.n	8007174 <prvSampleTimeNow+0x1c>
 80071f6:	bf00      	nop
 80071f8:	20002e4c 	.word	0x20002e4c
 80071fc:	20002d7c 	.word	0x20002d7c
 8007200:	20002d80 	.word	0x20002d80

08007204 <prvTimerTask>:
{
 8007204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007208:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800720a:	4e74      	ldr	r6, [pc, #464]	; (80073dc <prvTimerTask+0x1d8>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800720c:	4d74      	ldr	r5, [pc, #464]	; (80073e0 <prvTimerTask+0x1dc>)
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800720e:	4f75      	ldr	r7, [pc, #468]	; (80073e4 <prvTimerTask+0x1e0>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007210:	6833      	ldr	r3, [r6, #0]
 8007212:	f8d3 8000 	ldr.w	r8, [r3]
	if( *pxListWasEmpty == pdFALSE )
 8007216:	f1b8 0f00 	cmp.w	r8, #0
 800721a:	d00f      	beq.n	800723c <prvTimerTask+0x38>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 8007222:	f7ff fae9 	bl	80067f8 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007226:	a804      	add	r0, sp, #16
 8007228:	f7ff ff96 	bl	8007158 <prvSampleTimeNow>
 800722c:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800722e:	9b04      	ldr	r3, [sp, #16]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d154      	bne.n	80072de <prvTimerTask+0xda>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007234:	4580      	cmp	r8, r0
 8007236:	d923      	bls.n	8007280 <prvTimerTask+0x7c>
 8007238:	2200      	movs	r2, #0
 800723a:	e00d      	b.n	8007258 <prvTimerTask+0x54>
	vTaskSuspendAll();
 800723c:	f7ff fadc 	bl	80067f8 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007240:	a804      	add	r0, sp, #16
 8007242:	f7ff ff89 	bl	8007158 <prvSampleTimeNow>
 8007246:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8007248:	9b04      	ldr	r3, [sp, #16]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d147      	bne.n	80072de <prvTimerTask+0xda>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	fab2 f282 	clz	r2, r2
 8007256:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007258:	eba8 0104 	sub.w	r1, r8, r4
 800725c:	6828      	ldr	r0, [r5, #0]
 800725e:	f7ff f865 	bl	800632c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007262:	f7ff fb71 	bl	8006948 <xTaskResumeAll>
 8007266:	2800      	cmp	r0, #0
 8007268:	d13b      	bne.n	80072e2 <prvTimerTask+0xde>
					portYIELD_WITHIN_API();
 800726a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800726e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007272:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007276:	f3bf 8f4f 	dsb	sy
 800727a:	f3bf 8f6f 	isb	sy
 800727e:	e030      	b.n	80072e2 <prvTimerTask+0xde>
				( void ) xTaskResumeAll();
 8007280:	f7ff fb62 	bl	8006948 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007284:	6833      	ldr	r3, [r6, #0]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	f8d3 900c 	ldr.w	r9, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800728c:	f109 0004 	add.w	r0, r9, #4
 8007290:	f7fe fbae 	bl	80059f0 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007294:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d004      	beq.n	80072a6 <prvTimerTask+0xa2>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800729c:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 80072a0:	4648      	mov	r0, r9
 80072a2:	4798      	blx	r3
}
 80072a4:	e01d      	b.n	80072e2 <prvTimerTask+0xde>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80072a6:	f8d9 1018 	ldr.w	r1, [r9, #24]
 80072aa:	4643      	mov	r3, r8
 80072ac:	4622      	mov	r2, r4
 80072ae:	4441      	add	r1, r8
 80072b0:	4648      	mov	r0, r9
 80072b2:	f7ff fe93 	bl	8006fdc <prvInsertTimerInActiveList>
 80072b6:	2800      	cmp	r0, #0
 80072b8:	d0f0      	beq.n	800729c <prvTimerTask+0x98>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80072ba:	2100      	movs	r1, #0
 80072bc:	9100      	str	r1, [sp, #0]
 80072be:	460b      	mov	r3, r1
 80072c0:	4642      	mov	r2, r8
 80072c2:	4648      	mov	r0, r9
 80072c4:	f7ff ff18 	bl	80070f8 <xTimerGenericCommand>
			configASSERT( xResult );
 80072c8:	2800      	cmp	r0, #0
 80072ca:	d1e7      	bne.n	800729c <prvTimerTask+0x98>
 80072cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d0:	f383 8811 	msr	BASEPRI, r3
 80072d4:	f3bf 8f6f 	isb	sy
 80072d8:	f3bf 8f4f 	dsb	sy
 80072dc:	e7fe      	b.n	80072dc <prvTimerTask+0xd8>
			( void ) xTaskResumeAll();
 80072de:	f7ff fb33 	bl	8006948 <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80072e2:	2400      	movs	r4, #0
}
 80072e4:	e006      	b.n	80072f4 <prvTimerTask+0xf0>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80072e6:	9907      	ldr	r1, [sp, #28]
 80072e8:	9806      	ldr	r0, [sp, #24]
 80072ea:	9b05      	ldr	r3, [sp, #20]
 80072ec:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80072ee:	9b04      	ldr	r3, [sp, #16]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	da09      	bge.n	8007308 <prvTimerTask+0x104>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80072f4:	4622      	mov	r2, r4
 80072f6:	a904      	add	r1, sp, #16
 80072f8:	6828      	ldr	r0, [r5, #0]
 80072fa:	f7fe fe51 	bl	8005fa0 <xQueueReceive>
 80072fe:	2800      	cmp	r0, #0
 8007300:	d086      	beq.n	8007210 <prvTimerTask+0xc>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007302:	9b04      	ldr	r3, [sp, #16]
 8007304:	2b00      	cmp	r3, #0
 8007306:	dbee      	blt.n	80072e6 <prvTimerTask+0xe2>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007308:	f8dd 8018 	ldr.w	r8, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800730c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8007310:	b11b      	cbz	r3, 800731a <prvTimerTask+0x116>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007312:	f108 0004 	add.w	r0, r8, #4
 8007316:	f7fe fb6b 	bl	80059f0 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800731a:	a803      	add	r0, sp, #12
 800731c:	f7ff ff1c 	bl	8007158 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8007320:	9b04      	ldr	r3, [sp, #16]
 8007322:	2b09      	cmp	r3, #9
 8007324:	d8e6      	bhi.n	80072f4 <prvTimerTask+0xf0>
 8007326:	a201      	add	r2, pc, #4	; (adr r2, 800732c <prvTimerTask+0x128>)
 8007328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800732c:	08007355 	.word	0x08007355
 8007330:	08007355 	.word	0x08007355
 8007334:	08007355 	.word	0x08007355
 8007338:	080072f5 	.word	0x080072f5
 800733c:	080073a3 	.word	0x080073a3
 8007340:	080073cb 	.word	0x080073cb
 8007344:	08007355 	.word	0x08007355
 8007348:	08007355 	.word	0x08007355
 800734c:	080072f5 	.word	0x080072f5
 8007350:	080073a3 	.word	0x080073a3
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007354:	9b05      	ldr	r3, [sp, #20]
 8007356:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800735a:	4602      	mov	r2, r0
 800735c:	4419      	add	r1, r3
 800735e:	4640      	mov	r0, r8
 8007360:	f7ff fe3c 	bl	8006fdc <prvInsertTimerInActiveList>
 8007364:	2800      	cmp	r0, #0
 8007366:	d0c5      	beq.n	80072f4 <prvTimerTask+0xf0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007368:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800736c:	4640      	mov	r0, r8
 800736e:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007370:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8007374:	2b01      	cmp	r3, #1
 8007376:	d1bd      	bne.n	80072f4 <prvTimerTask+0xf0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007378:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800737c:	9400      	str	r4, [sp, #0]
 800737e:	4623      	mov	r3, r4
 8007380:	9905      	ldr	r1, [sp, #20]
 8007382:	440a      	add	r2, r1
 8007384:	4621      	mov	r1, r4
 8007386:	4640      	mov	r0, r8
 8007388:	f7ff feb6 	bl	80070f8 <xTimerGenericCommand>
							configASSERT( xResult );
 800738c:	2800      	cmp	r0, #0
 800738e:	d1b1      	bne.n	80072f4 <prvTimerTask+0xf0>
 8007390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007394:	f383 8811 	msr	BASEPRI, r3
 8007398:	f3bf 8f6f 	isb	sy
 800739c:	f3bf 8f4f 	dsb	sy
 80073a0:	e7fe      	b.n	80073a0 <prvTimerTask+0x19c>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80073a2:	9905      	ldr	r1, [sp, #20]
 80073a4:	f8c8 1018 	str.w	r1, [r8, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80073a8:	b131      	cbz	r1, 80073b8 <prvTimerTask+0x1b4>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80073aa:	4603      	mov	r3, r0
 80073ac:	4602      	mov	r2, r0
 80073ae:	4401      	add	r1, r0
 80073b0:	4640      	mov	r0, r8
 80073b2:	f7ff fe13 	bl	8006fdc <prvInsertTimerInActiveList>
					break;
 80073b6:	e79d      	b.n	80072f4 <prvTimerTask+0xf0>
 80073b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073bc:	f383 8811 	msr	BASEPRI, r3
 80073c0:	f3bf 8f6f 	isb	sy
 80073c4:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80073c8:	e7fe      	b.n	80073c8 <prvTimerTask+0x1c4>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80073ca:	f898 302c 	ldrb.w	r3, [r8, #44]	; 0x2c
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d190      	bne.n	80072f4 <prvTimerTask+0xf0>
							vPortFree( pxTimer );
 80073d2:	4640      	mov	r0, r8
 80073d4:	f000 fa56 	bl	8007884 <vPortFree>
 80073d8:	e78c      	b.n	80072f4 <prvTimerTask+0xf0>
 80073da:	bf00      	nop
 80073dc:	20002d7c 	.word	0x20002d7c
 80073e0:	20002ea0 	.word	0x20002ea0
 80073e4:	20002d80 	.word	0x20002d80

080073e8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80073e8:	b510      	push	{r4, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	4614      	mov	r4, r2
 80073ee:	461a      	mov	r2, r3
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80073f0:	f06f 0301 	mvn.w	r3, #1
 80073f4:	9300      	str	r3, [sp, #0]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80073f6:	9001      	str	r0, [sp, #4]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80073f8:	9102      	str	r1, [sp, #8]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80073fa:	9403      	str	r4, [sp, #12]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80073fc:	2300      	movs	r3, #0
 80073fe:	4669      	mov	r1, sp
 8007400:	4802      	ldr	r0, [pc, #8]	; (800740c <xTimerPendFunctionCallFromISR+0x24>)
 8007402:	6800      	ldr	r0, [r0, #0]
 8007404:	f7fe fd66 	bl	8005ed4 <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
 8007408:	b004      	add	sp, #16
 800740a:	bd10      	pop	{r4, pc}
 800740c:	20002ea0 	.word	0x20002ea0

08007410 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007410:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8007412:	2300      	movs	r3, #0
 8007414:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007416:	4b0d      	ldr	r3, [pc, #52]	; (800744c <prvTaskExitError+0x3c>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800741e:	d008      	beq.n	8007432 <prvTaskExitError+0x22>
 8007420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007424:	f383 8811 	msr	BASEPRI, r3
 8007428:	f3bf 8f6f 	isb	sy
 800742c:	f3bf 8f4f 	dsb	sy
 8007430:	e7fe      	b.n	8007430 <prvTaskExitError+0x20>
 8007432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007436:	f383 8811 	msr	BASEPRI, r3
 800743a:	f3bf 8f6f 	isb	sy
 800743e:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007442:	9b01      	ldr	r3, [sp, #4]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d0fc      	beq.n	8007442 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007448:	b002      	add	sp, #8
 800744a:	4770      	bx	lr
 800744c:	20000018 	.word	0x20000018

08007450 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007450:	4806      	ldr	r0, [pc, #24]	; (800746c <prvPortStartFirstTask+0x1c>)
 8007452:	6800      	ldr	r0, [r0, #0]
 8007454:	6800      	ldr	r0, [r0, #0]
 8007456:	f380 8808 	msr	MSP, r0
 800745a:	b662      	cpsie	i
 800745c:	b661      	cpsie	f
 800745e:	f3bf 8f4f 	dsb	sy
 8007462:	f3bf 8f6f 	isb	sy
 8007466:	df00      	svc	0
 8007468:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800746a:	0000      	.short	0x0000
 800746c:	e000ed08 	.word	0xe000ed08

08007470 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007470:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007474:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007478:	f021 0101 	bic.w	r1, r1, #1
 800747c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007480:	4b03      	ldr	r3, [pc, #12]	; (8007490 <pxPortInitialiseStack+0x20>)
 8007482:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007486:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800748a:	3840      	subs	r0, #64	; 0x40
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	08007411 	.word	0x08007411
	...

080074a0 <SVC_Handler>:
	__asm volatile (
 80074a0:	4b07      	ldr	r3, [pc, #28]	; (80074c0 <pxCurrentTCBConst2>)
 80074a2:	6819      	ldr	r1, [r3, #0]
 80074a4:	6808      	ldr	r0, [r1, #0]
 80074a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80074aa:	f380 8809 	msr	PSP, r0
 80074ae:	f3bf 8f6f 	isb	sy
 80074b2:	f04f 0000 	mov.w	r0, #0
 80074b6:	f380 8811 	msr	BASEPRI, r0
 80074ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80074be:	4770      	bx	lr

080074c0 <pxCurrentTCBConst2>:
 80074c0:	20002880 	.word	0x20002880

080074c4 <vPortEnterCritical>:
 80074c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c8:	f383 8811 	msr	BASEPRI, r3
 80074cc:	f3bf 8f6f 	isb	sy
 80074d0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80074d4:	4a0b      	ldr	r2, [pc, #44]	; (8007504 <vPortEnterCritical+0x40>)
 80074d6:	6813      	ldr	r3, [r2, #0]
 80074d8:	3301      	adds	r3, #1
 80074da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d000      	beq.n	80074e2 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 80074e0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80074e2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80074e6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 80074ea:	f013 0fff 	tst.w	r3, #255	; 0xff
 80074ee:	d0f7      	beq.n	80074e0 <vPortEnterCritical+0x1c>
 80074f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f4:	f383 8811 	msr	BASEPRI, r3
 80074f8:	f3bf 8f6f 	isb	sy
 80074fc:	f3bf 8f4f 	dsb	sy
 8007500:	e7fe      	b.n	8007500 <vPortEnterCritical+0x3c>
 8007502:	bf00      	nop
 8007504:	20000018 	.word	0x20000018

08007508 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8007508:	4b09      	ldr	r3, [pc, #36]	; (8007530 <vPortExitCritical+0x28>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	b943      	cbnz	r3, 8007520 <vPortExitCritical+0x18>
 800750e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007512:	f383 8811 	msr	BASEPRI, r3
 8007516:	f3bf 8f6f 	isb	sy
 800751a:	f3bf 8f4f 	dsb	sy
 800751e:	e7fe      	b.n	800751e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8007520:	3b01      	subs	r3, #1
 8007522:	4a03      	ldr	r2, [pc, #12]	; (8007530 <vPortExitCritical+0x28>)
 8007524:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007526:	b90b      	cbnz	r3, 800752c <vPortExitCritical+0x24>
	__asm volatile
 8007528:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop
 8007530:	20000018 	.word	0x20000018
	...

08007540 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007540:	f3ef 8009 	mrs	r0, PSP
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	4b0d      	ldr	r3, [pc, #52]	; (8007580 <pxCurrentTCBConst>)
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007550:	6010      	str	r0, [r2, #0]
 8007552:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007556:	f04f 0050 	mov.w	r0, #80	; 0x50
 800755a:	f380 8811 	msr	BASEPRI, r0
 800755e:	f7ff fa9b 	bl	8006a98 <vTaskSwitchContext>
 8007562:	f04f 0000 	mov.w	r0, #0
 8007566:	f380 8811 	msr	BASEPRI, r0
 800756a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800756e:	6819      	ldr	r1, [r3, #0]
 8007570:	6808      	ldr	r0, [r1, #0]
 8007572:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007576:	f380 8809 	msr	PSP, r0
 800757a:	f3bf 8f6f 	isb	sy
 800757e:	4770      	bx	lr

08007580 <pxCurrentTCBConst>:
 8007580:	20002880 	.word	0x20002880

08007584 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007584:	b508      	push	{r3, lr}
	__asm volatile
 8007586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758a:	f383 8811 	msr	BASEPRI, r3
 800758e:	f3bf 8f6f 	isb	sy
 8007592:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007596:	f7ff f93d 	bl	8006814 <xTaskIncrementTick>
 800759a:	b128      	cbz	r0, 80075a8 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800759c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80075a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075a4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 80075a8:	2300      	movs	r3, #0
 80075aa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80075ae:	bd08      	pop	{r3, pc}

080075b0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80075b0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80075b4:	2300      	movs	r3, #0
 80075b6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80075b8:	6193      	str	r3, [r2, #24]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80075ba:	4b05      	ldr	r3, [pc, #20]	; (80075d0 <vPortSetupTimerInterrupt+0x20>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4905      	ldr	r1, [pc, #20]	; (80075d4 <vPortSetupTimerInterrupt+0x24>)
 80075c0:	fba1 1303 	umull	r1, r3, r1, r3
 80075c4:	099b      	lsrs	r3, r3, #6
 80075c6:	3b01      	subs	r3, #1
 80075c8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80075ca:	2307      	movs	r3, #7
 80075cc:	6113      	str	r3, [r2, #16]
}
 80075ce:	4770      	bx	lr
 80075d0:	20000004 	.word	0x20000004
 80075d4:	10624dd3 	.word	0x10624dd3

080075d8 <xPortStartScheduler>:
{
 80075d8:	b510      	push	{r4, lr}
 80075da:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80075dc:	4b2b      	ldr	r3, [pc, #172]	; (800768c <xPortStartScheduler+0xb4>)
 80075de:	781a      	ldrb	r2, [r3, #0]
 80075e0:	b2d2      	uxtb	r2, r2
 80075e2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80075e4:	22ff      	movs	r2, #255	; 0xff
 80075e6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80075f0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80075f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80075f8:	4a25      	ldr	r2, [pc, #148]	; (8007690 <xPortStartScheduler+0xb8>)
 80075fa:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80075fc:	4b25      	ldr	r3, [pc, #148]	; (8007694 <xPortStartScheduler+0xbc>)
 80075fe:	2207      	movs	r2, #7
 8007600:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007602:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007606:	f013 0f80 	tst.w	r3, #128	; 0x80
 800760a:	d011      	beq.n	8007630 <xPortStartScheduler+0x58>
 800760c:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800760e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007612:	005b      	lsls	r3, r3, #1
 8007614:	b2db      	uxtb	r3, r3
 8007616:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800761a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800761e:	4611      	mov	r1, r2
 8007620:	3a01      	subs	r2, #1
 8007622:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007626:	d1f2      	bne.n	800760e <xPortStartScheduler+0x36>
 8007628:	4b1a      	ldr	r3, [pc, #104]	; (8007694 <xPortStartScheduler+0xbc>)
 800762a:	6019      	str	r1, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800762c:	2903      	cmp	r1, #3
 800762e:	d008      	beq.n	8007642 <xPortStartScheduler+0x6a>
	__asm volatile
 8007630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007634:	f383 8811 	msr	BASEPRI, r3
 8007638:	f3bf 8f6f 	isb	sy
 800763c:	f3bf 8f4f 	dsb	sy
 8007640:	e7fe      	b.n	8007640 <xPortStartScheduler+0x68>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007642:	4b14      	ldr	r3, [pc, #80]	; (8007694 <xPortStartScheduler+0xbc>)
 8007644:	f44f 7240 	mov.w	r2, #768	; 0x300
 8007648:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800764a:	9b01      	ldr	r3, [sp, #4]
 800764c:	b2db      	uxtb	r3, r3
 800764e:	4a0f      	ldr	r2, [pc, #60]	; (800768c <xPortStartScheduler+0xb4>)
 8007650:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007652:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007656:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 800765a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800765e:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007662:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8007666:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800766a:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800766e:	f7ff ff9f 	bl	80075b0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8007672:	2400      	movs	r4, #0
 8007674:	4b08      	ldr	r3, [pc, #32]	; (8007698 <xPortStartScheduler+0xc0>)
 8007676:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8007678:	f7ff feea 	bl	8007450 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800767c:	f7ff fa0c 	bl	8006a98 <vTaskSwitchContext>
	prvTaskExitError();
 8007680:	f7ff fec6 	bl	8007410 <prvTaskExitError>
}
 8007684:	4620      	mov	r0, r4
 8007686:	b002      	add	sp, #8
 8007688:	bd10      	pop	{r4, pc}
 800768a:	bf00      	nop
 800768c:	e000e400 	.word	0xe000e400
 8007690:	20002ea8 	.word	0x20002ea8
 8007694:	20002eac 	.word	0x20002eac
 8007698:	20000018 	.word	0x20000018

0800769c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800769c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80076a0:	2b0f      	cmp	r3, #15
 80076a2:	d90f      	bls.n	80076c4 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80076a4:	4a11      	ldr	r2, [pc, #68]	; (80076ec <vPortValidateInterruptPriority+0x50>)
 80076a6:	5c9b      	ldrb	r3, [r3, r2]
 80076a8:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80076aa:	4a11      	ldr	r2, [pc, #68]	; (80076f0 <vPortValidateInterruptPriority+0x54>)
 80076ac:	7812      	ldrb	r2, [r2, #0]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d908      	bls.n	80076c4 <vPortValidateInterruptPriority+0x28>
 80076b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b6:	f383 8811 	msr	BASEPRI, r3
 80076ba:	f3bf 8f6f 	isb	sy
 80076be:	f3bf 8f4f 	dsb	sy
 80076c2:	e7fe      	b.n	80076c2 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80076c4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80076c8:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 80076cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80076d0:	4a08      	ldr	r2, [pc, #32]	; (80076f4 <vPortValidateInterruptPriority+0x58>)
 80076d2:	6812      	ldr	r2, [r2, #0]
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d908      	bls.n	80076ea <vPortValidateInterruptPriority+0x4e>
 80076d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076dc:	f383 8811 	msr	BASEPRI, r3
 80076e0:	f3bf 8f6f 	isb	sy
 80076e4:	f3bf 8f4f 	dsb	sy
 80076e8:	e7fe      	b.n	80076e8 <vPortValidateInterruptPriority+0x4c>
	}
 80076ea:	4770      	bx	lr
 80076ec:	e000e3f0 	.word	0xe000e3f0
 80076f0:	20002ea8 	.word	0x20002ea8
 80076f4:	20002eac 	.word	0x20002eac

080076f8 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80076f8:	4b15      	ldr	r3, [pc, #84]	; (8007750 <prvInsertBlockIntoFreeList+0x58>)
 80076fa:	461a      	mov	r2, r3
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4283      	cmp	r3, r0
 8007700:	d3fb      	bcc.n	80076fa <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007702:	6851      	ldr	r1, [r2, #4]
 8007704:	eb02 0c01 	add.w	ip, r2, r1
 8007708:	4560      	cmp	r0, ip
 800770a:	d009      	beq.n	8007720 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800770c:	6841      	ldr	r1, [r0, #4]
 800770e:	eb00 0c01 	add.w	ip, r0, r1
 8007712:	4563      	cmp	r3, ip
 8007714:	d009      	beq.n	800772a <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007716:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007718:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800771a:	bf18      	it	ne
 800771c:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 800771e:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007720:	6840      	ldr	r0, [r0, #4]
 8007722:	4401      	add	r1, r0
 8007724:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8007726:	4610      	mov	r0, r2
 8007728:	e7f0      	b.n	800770c <prvInsertBlockIntoFreeList+0x14>
{
 800772a:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800772c:	4c09      	ldr	r4, [pc, #36]	; (8007754 <prvInsertBlockIntoFreeList+0x5c>)
 800772e:	6824      	ldr	r4, [r4, #0]
 8007730:	42a3      	cmp	r3, r4
 8007732:	d00a      	beq.n	800774a <prvInsertBlockIntoFreeList+0x52>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	4419      	add	r1, r3
 8007738:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800773a:	6813      	ldr	r3, [r2, #0]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8007740:	4290      	cmp	r0, r2
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007742:	bf18      	it	ne
 8007744:	6010      	strne	r0, [r2, #0]
	}
}
 8007746:	bc10      	pop	{r4}
 8007748:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800774a:	6004      	str	r4, [r0, #0]
 800774c:	e7f8      	b.n	8007740 <prvInsertBlockIntoFreeList+0x48>
 800774e:	bf00      	nop
 8007750:	20003ac0 	.word	0x20003ac0
 8007754:	20002eb0 	.word	0x20002eb0

08007758 <pvPortMalloc>:
{
 8007758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800775a:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800775c:	f7ff f84c 	bl	80067f8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8007760:	4b42      	ldr	r3, [pc, #264]	; (800786c <pvPortMalloc+0x114>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	b1b3      	cbz	r3, 8007794 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007766:	4b42      	ldr	r3, [pc, #264]	; (8007870 <pvPortMalloc+0x118>)
 8007768:	681d      	ldr	r5, [r3, #0]
 800776a:	4225      	tst	r5, r4
 800776c:	d179      	bne.n	8007862 <pvPortMalloc+0x10a>
			if( xWantedSize > 0 )
 800776e:	2c00      	cmp	r4, #0
 8007770:	d077      	beq.n	8007862 <pvPortMalloc+0x10a>
				xWantedSize += xHeapStructSize;
 8007772:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007776:	f014 0f07 	tst.w	r4, #7
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800777a:	bf1c      	itt	ne
 800777c:	f022 0207 	bicne.w	r2, r2, #7
 8007780:	3208      	addne	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007782:	2a00      	cmp	r2, #0
 8007784:	d06d      	beq.n	8007862 <pvPortMalloc+0x10a>
 8007786:	4b3b      	ldr	r3, [pc, #236]	; (8007874 <pvPortMalloc+0x11c>)
 8007788:	681e      	ldr	r6, [r3, #0]
 800778a:	4296      	cmp	r6, r2
 800778c:	d369      	bcc.n	8007862 <pvPortMalloc+0x10a>
				pxBlock = xStart.pxNextFreeBlock;
 800778e:	493a      	ldr	r1, [pc, #232]	; (8007878 <pvPortMalloc+0x120>)
 8007790:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007792:	e027      	b.n	80077e4 <pvPortMalloc+0x8c>
	uxAddress = ( size_t ) ucHeap;
 8007794:	4a39      	ldr	r2, [pc, #228]	; (800787c <pvPortMalloc+0x124>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007796:	f012 0f07 	tst.w	r2, #7
 800779a:	d007      	beq.n	80077ac <pvPortMalloc+0x54>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800779c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800779e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80077a2:	f502 6340 	add.w	r3, r2, #3072	; 0xc00
 80077a6:	1a5b      	subs	r3, r3, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80077a8:	460a      	mov	r2, r1
 80077aa:	e001      	b.n	80077b0 <pvPortMalloc+0x58>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80077ac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80077b0:	4831      	ldr	r0, [pc, #196]	; (8007878 <pvPortMalloc+0x120>)
 80077b2:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80077b4:	2100      	movs	r1, #0
 80077b6:	6041      	str	r1, [r0, #4]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80077b8:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80077ba:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80077bc:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 80077c0:	482a      	ldr	r0, [pc, #168]	; (800786c <pvPortMalloc+0x114>)
 80077c2:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80077c4:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80077c6:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80077c8:	1a99      	subs	r1, r3, r2
 80077ca:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80077cc:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077ce:	4b2c      	ldr	r3, [pc, #176]	; (8007880 <pvPortMalloc+0x128>)
 80077d0:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077d2:	4b28      	ldr	r3, [pc, #160]	; (8007874 <pvPortMalloc+0x11c>)
 80077d4:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80077d6:	4b26      	ldr	r3, [pc, #152]	; (8007870 <pvPortMalloc+0x118>)
 80077d8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80077dc:	601a      	str	r2, [r3, #0]
}
 80077de:	e7c2      	b.n	8007766 <pvPortMalloc+0xe>
 80077e0:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 80077e2:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077e4:	6863      	ldr	r3, [r4, #4]
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d202      	bcs.n	80077f0 <pvPortMalloc+0x98>
 80077ea:	6823      	ldr	r3, [r4, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d1f7      	bne.n	80077e0 <pvPortMalloc+0x88>
				if( pxBlock != pxEnd )
 80077f0:	4b1e      	ldr	r3, [pc, #120]	; (800786c <pvPortMalloc+0x114>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	42a3      	cmp	r3, r4
 80077f6:	d034      	beq.n	8007862 <pvPortMalloc+0x10a>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80077f8:	680f      	ldr	r7, [r1, #0]
 80077fa:	3708      	adds	r7, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80077fc:	6823      	ldr	r3, [r4, #0]
 80077fe:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007800:	6863      	ldr	r3, [r4, #4]
 8007802:	1a9b      	subs	r3, r3, r2
 8007804:	2b10      	cmp	r3, #16
 8007806:	d910      	bls.n	800782a <pvPortMalloc+0xd2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007808:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800780a:	f010 0f07 	tst.w	r0, #7
 800780e:	d008      	beq.n	8007822 <pvPortMalloc+0xca>
 8007810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007814:	f383 8811 	msr	BASEPRI, r3
 8007818:	f3bf 8f6f 	isb	sy
 800781c:	f3bf 8f4f 	dsb	sy
 8007820:	e7fe      	b.n	8007820 <pvPortMalloc+0xc8>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007822:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007824:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007826:	f7ff ff67 	bl	80076f8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800782a:	6863      	ldr	r3, [r4, #4]
 800782c:	1af6      	subs	r6, r6, r3
 800782e:	4a11      	ldr	r2, [pc, #68]	; (8007874 <pvPortMalloc+0x11c>)
 8007830:	6016      	str	r6, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007832:	4a13      	ldr	r2, [pc, #76]	; (8007880 <pvPortMalloc+0x128>)
 8007834:	6812      	ldr	r2, [r2, #0]
 8007836:	4296      	cmp	r6, r2
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007838:	bf3c      	itt	cc
 800783a:	4a11      	ldrcc	r2, [pc, #68]	; (8007880 <pvPortMalloc+0x128>)
 800783c:	6016      	strcc	r6, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800783e:	431d      	orrs	r5, r3
 8007840:	6065      	str	r5, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007842:	2300      	movs	r3, #0
 8007844:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 8007846:	f7ff f87f 	bl	8006948 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800784a:	f017 0f07 	tst.w	r7, #7
 800784e:	d00b      	beq.n	8007868 <pvPortMalloc+0x110>
 8007850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007854:	f383 8811 	msr	BASEPRI, r3
 8007858:	f3bf 8f6f 	isb	sy
 800785c:	f3bf 8f4f 	dsb	sy
 8007860:	e7fe      	b.n	8007860 <pvPortMalloc+0x108>
	( void ) xTaskResumeAll();
 8007862:	f7ff f871 	bl	8006948 <xTaskResumeAll>
 8007866:	2700      	movs	r7, #0
}
 8007868:	4638      	mov	r0, r7
 800786a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800786c:	20002eb0 	.word	0x20002eb0
 8007870:	20003ab4 	.word	0x20003ab4
 8007874:	20003ab8 	.word	0x20003ab8
 8007878:	20003ac0 	.word	0x20003ac0
 800787c:	20002eb4 	.word	0x20002eb4
 8007880:	20003abc 	.word	0x20003abc

08007884 <vPortFree>:
	if( pv != NULL )
 8007884:	b378      	cbz	r0, 80078e6 <vPortFree+0x62>
{
 8007886:	b510      	push	{r4, lr}
 8007888:	4604      	mov	r4, r0
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800788a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800788e:	4a16      	ldr	r2, [pc, #88]	; (80078e8 <vPortFree+0x64>)
 8007890:	6812      	ldr	r2, [r2, #0]
 8007892:	4213      	tst	r3, r2
 8007894:	d108      	bne.n	80078a8 <vPortFree+0x24>
 8007896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789a:	f383 8811 	msr	BASEPRI, r3
 800789e:	f3bf 8f6f 	isb	sy
 80078a2:	f3bf 8f4f 	dsb	sy
 80078a6:	e7fe      	b.n	80078a6 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80078a8:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80078ac:	b141      	cbz	r1, 80078c0 <vPortFree+0x3c>
 80078ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b2:	f383 8811 	msr	BASEPRI, r3
 80078b6:	f3bf 8f6f 	isb	sy
 80078ba:	f3bf 8f4f 	dsb	sy
 80078be:	e7fe      	b.n	80078be <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80078c0:	ea23 0302 	bic.w	r3, r3, r2
 80078c4:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80078c8:	f7fe ff96 	bl	80067f8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80078cc:	4a07      	ldr	r2, [pc, #28]	; (80078ec <vPortFree+0x68>)
 80078ce:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80078d2:	6811      	ldr	r1, [r2, #0]
 80078d4:	440b      	add	r3, r1
 80078d6:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80078d8:	f1a4 0008 	sub.w	r0, r4, #8
 80078dc:	f7ff ff0c 	bl	80076f8 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 80078e0:	f7ff f832 	bl	8006948 <xTaskResumeAll>
}
 80078e4:	bd10      	pop	{r4, pc}
 80078e6:	4770      	bx	lr
 80078e8:	20003ab4 	.word	0x20003ab4
 80078ec:	20003ab8 	.word	0x20003ab8

080078f0 <__libc_init_array>:
 80078f0:	b570      	push	{r4, r5, r6, lr}
 80078f2:	2600      	movs	r6, #0
 80078f4:	4d0c      	ldr	r5, [pc, #48]	; (8007928 <__libc_init_array+0x38>)
 80078f6:	4c0d      	ldr	r4, [pc, #52]	; (800792c <__libc_init_array+0x3c>)
 80078f8:	1b64      	subs	r4, r4, r5
 80078fa:	10a4      	asrs	r4, r4, #2
 80078fc:	42a6      	cmp	r6, r4
 80078fe:	d109      	bne.n	8007914 <__libc_init_array+0x24>
 8007900:	f000 f8f0 	bl	8007ae4 <_init>
 8007904:	2600      	movs	r6, #0
 8007906:	4d0a      	ldr	r5, [pc, #40]	; (8007930 <__libc_init_array+0x40>)
 8007908:	4c0a      	ldr	r4, [pc, #40]	; (8007934 <__libc_init_array+0x44>)
 800790a:	1b64      	subs	r4, r4, r5
 800790c:	10a4      	asrs	r4, r4, #2
 800790e:	42a6      	cmp	r6, r4
 8007910:	d105      	bne.n	800791e <__libc_init_array+0x2e>
 8007912:	bd70      	pop	{r4, r5, r6, pc}
 8007914:	f855 3b04 	ldr.w	r3, [r5], #4
 8007918:	4798      	blx	r3
 800791a:	3601      	adds	r6, #1
 800791c:	e7ee      	b.n	80078fc <__libc_init_array+0xc>
 800791e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007922:	4798      	blx	r3
 8007924:	3601      	adds	r6, #1
 8007926:	e7f2      	b.n	800790e <__libc_init_array+0x1e>
 8007928:	0800805c 	.word	0x0800805c
 800792c:	0800805c 	.word	0x0800805c
 8007930:	0800805c 	.word	0x0800805c
 8007934:	08008060 	.word	0x08008060

08007938 <__retarget_lock_acquire_recursive>:
 8007938:	4770      	bx	lr

0800793a <__retarget_lock_release_recursive>:
 800793a:	4770      	bx	lr

0800793c <memcpy>:
 800793c:	440a      	add	r2, r1
 800793e:	4291      	cmp	r1, r2
 8007940:	f100 33ff 	add.w	r3, r0, #4294967295
 8007944:	d100      	bne.n	8007948 <memcpy+0xc>
 8007946:	4770      	bx	lr
 8007948:	b510      	push	{r4, lr}
 800794a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800794e:	4291      	cmp	r1, r2
 8007950:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007954:	d1f9      	bne.n	800794a <memcpy+0xe>
 8007956:	bd10      	pop	{r4, pc}

08007958 <memset>:
 8007958:	4603      	mov	r3, r0
 800795a:	4402      	add	r2, r0
 800795c:	4293      	cmp	r3, r2
 800795e:	d100      	bne.n	8007962 <memset+0xa>
 8007960:	4770      	bx	lr
 8007962:	f803 1b01 	strb.w	r1, [r3], #1
 8007966:	e7f9      	b.n	800795c <memset+0x4>

08007968 <cleanup_glue>:
 8007968:	b538      	push	{r3, r4, r5, lr}
 800796a:	460c      	mov	r4, r1
 800796c:	6809      	ldr	r1, [r1, #0]
 800796e:	4605      	mov	r5, r0
 8007970:	b109      	cbz	r1, 8007976 <cleanup_glue+0xe>
 8007972:	f7ff fff9 	bl	8007968 <cleanup_glue>
 8007976:	4621      	mov	r1, r4
 8007978:	4628      	mov	r0, r5
 800797a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800797e:	f000 b869 	b.w	8007a54 <_free_r>
	...

08007984 <_reclaim_reent>:
 8007984:	4b2c      	ldr	r3, [pc, #176]	; (8007a38 <_reclaim_reent+0xb4>)
 8007986:	b570      	push	{r4, r5, r6, lr}
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4604      	mov	r4, r0
 800798c:	4283      	cmp	r3, r0
 800798e:	d051      	beq.n	8007a34 <_reclaim_reent+0xb0>
 8007990:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007992:	b143      	cbz	r3, 80079a6 <_reclaim_reent+0x22>
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d14a      	bne.n	8007a30 <_reclaim_reent+0xac>
 800799a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800799c:	6819      	ldr	r1, [r3, #0]
 800799e:	b111      	cbz	r1, 80079a6 <_reclaim_reent+0x22>
 80079a0:	4620      	mov	r0, r4
 80079a2:	f000 f857 	bl	8007a54 <_free_r>
 80079a6:	6961      	ldr	r1, [r4, #20]
 80079a8:	b111      	cbz	r1, 80079b0 <_reclaim_reent+0x2c>
 80079aa:	4620      	mov	r0, r4
 80079ac:	f000 f852 	bl	8007a54 <_free_r>
 80079b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80079b2:	b111      	cbz	r1, 80079ba <_reclaim_reent+0x36>
 80079b4:	4620      	mov	r0, r4
 80079b6:	f000 f84d 	bl	8007a54 <_free_r>
 80079ba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80079bc:	b111      	cbz	r1, 80079c4 <_reclaim_reent+0x40>
 80079be:	4620      	mov	r0, r4
 80079c0:	f000 f848 	bl	8007a54 <_free_r>
 80079c4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80079c6:	b111      	cbz	r1, 80079ce <_reclaim_reent+0x4a>
 80079c8:	4620      	mov	r0, r4
 80079ca:	f000 f843 	bl	8007a54 <_free_r>
 80079ce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80079d0:	b111      	cbz	r1, 80079d8 <_reclaim_reent+0x54>
 80079d2:	4620      	mov	r0, r4
 80079d4:	f000 f83e 	bl	8007a54 <_free_r>
 80079d8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80079da:	b111      	cbz	r1, 80079e2 <_reclaim_reent+0x5e>
 80079dc:	4620      	mov	r0, r4
 80079de:	f000 f839 	bl	8007a54 <_free_r>
 80079e2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80079e4:	b111      	cbz	r1, 80079ec <_reclaim_reent+0x68>
 80079e6:	4620      	mov	r0, r4
 80079e8:	f000 f834 	bl	8007a54 <_free_r>
 80079ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079ee:	b111      	cbz	r1, 80079f6 <_reclaim_reent+0x72>
 80079f0:	4620      	mov	r0, r4
 80079f2:	f000 f82f 	bl	8007a54 <_free_r>
 80079f6:	69a3      	ldr	r3, [r4, #24]
 80079f8:	b1e3      	cbz	r3, 8007a34 <_reclaim_reent+0xb0>
 80079fa:	4620      	mov	r0, r4
 80079fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80079fe:	4798      	blx	r3
 8007a00:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007a02:	b1b9      	cbz	r1, 8007a34 <_reclaim_reent+0xb0>
 8007a04:	4620      	mov	r0, r4
 8007a06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007a0a:	f7ff bfad 	b.w	8007968 <cleanup_glue>
 8007a0e:	5949      	ldr	r1, [r1, r5]
 8007a10:	b941      	cbnz	r1, 8007a24 <_reclaim_reent+0xa0>
 8007a12:	3504      	adds	r5, #4
 8007a14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a16:	2d80      	cmp	r5, #128	; 0x80
 8007a18:	68d9      	ldr	r1, [r3, #12]
 8007a1a:	d1f8      	bne.n	8007a0e <_reclaim_reent+0x8a>
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	f000 f819 	bl	8007a54 <_free_r>
 8007a22:	e7ba      	b.n	800799a <_reclaim_reent+0x16>
 8007a24:	680e      	ldr	r6, [r1, #0]
 8007a26:	4620      	mov	r0, r4
 8007a28:	f000 f814 	bl	8007a54 <_free_r>
 8007a2c:	4631      	mov	r1, r6
 8007a2e:	e7ef      	b.n	8007a10 <_reclaim_reent+0x8c>
 8007a30:	2500      	movs	r5, #0
 8007a32:	e7ef      	b.n	8007a14 <_reclaim_reent+0x90>
 8007a34:	bd70      	pop	{r4, r5, r6, pc}
 8007a36:	bf00      	nop
 8007a38:	2000001c 	.word	0x2000001c

08007a3c <__malloc_lock>:
 8007a3c:	4801      	ldr	r0, [pc, #4]	; (8007a44 <__malloc_lock+0x8>)
 8007a3e:	f7ff bf7b 	b.w	8007938 <__retarget_lock_acquire_recursive>
 8007a42:	bf00      	nop
 8007a44:	20003ac8 	.word	0x20003ac8

08007a48 <__malloc_unlock>:
 8007a48:	4801      	ldr	r0, [pc, #4]	; (8007a50 <__malloc_unlock+0x8>)
 8007a4a:	f7ff bf76 	b.w	800793a <__retarget_lock_release_recursive>
 8007a4e:	bf00      	nop
 8007a50:	20003ac8 	.word	0x20003ac8

08007a54 <_free_r>:
 8007a54:	b538      	push	{r3, r4, r5, lr}
 8007a56:	4605      	mov	r5, r0
 8007a58:	2900      	cmp	r1, #0
 8007a5a:	d040      	beq.n	8007ade <_free_r+0x8a>
 8007a5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a60:	1f0c      	subs	r4, r1, #4
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	bfb8      	it	lt
 8007a66:	18e4      	addlt	r4, r4, r3
 8007a68:	f7ff ffe8 	bl	8007a3c <__malloc_lock>
 8007a6c:	4a1c      	ldr	r2, [pc, #112]	; (8007ae0 <_free_r+0x8c>)
 8007a6e:	6813      	ldr	r3, [r2, #0]
 8007a70:	b933      	cbnz	r3, 8007a80 <_free_r+0x2c>
 8007a72:	6063      	str	r3, [r4, #4]
 8007a74:	6014      	str	r4, [r2, #0]
 8007a76:	4628      	mov	r0, r5
 8007a78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a7c:	f7ff bfe4 	b.w	8007a48 <__malloc_unlock>
 8007a80:	42a3      	cmp	r3, r4
 8007a82:	d908      	bls.n	8007a96 <_free_r+0x42>
 8007a84:	6820      	ldr	r0, [r4, #0]
 8007a86:	1821      	adds	r1, r4, r0
 8007a88:	428b      	cmp	r3, r1
 8007a8a:	bf01      	itttt	eq
 8007a8c:	6819      	ldreq	r1, [r3, #0]
 8007a8e:	685b      	ldreq	r3, [r3, #4]
 8007a90:	1809      	addeq	r1, r1, r0
 8007a92:	6021      	streq	r1, [r4, #0]
 8007a94:	e7ed      	b.n	8007a72 <_free_r+0x1e>
 8007a96:	461a      	mov	r2, r3
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	b10b      	cbz	r3, 8007aa0 <_free_r+0x4c>
 8007a9c:	42a3      	cmp	r3, r4
 8007a9e:	d9fa      	bls.n	8007a96 <_free_r+0x42>
 8007aa0:	6811      	ldr	r1, [r2, #0]
 8007aa2:	1850      	adds	r0, r2, r1
 8007aa4:	42a0      	cmp	r0, r4
 8007aa6:	d10b      	bne.n	8007ac0 <_free_r+0x6c>
 8007aa8:	6820      	ldr	r0, [r4, #0]
 8007aaa:	4401      	add	r1, r0
 8007aac:	1850      	adds	r0, r2, r1
 8007aae:	4283      	cmp	r3, r0
 8007ab0:	6011      	str	r1, [r2, #0]
 8007ab2:	d1e0      	bne.n	8007a76 <_free_r+0x22>
 8007ab4:	6818      	ldr	r0, [r3, #0]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	4401      	add	r1, r0
 8007aba:	6011      	str	r1, [r2, #0]
 8007abc:	6053      	str	r3, [r2, #4]
 8007abe:	e7da      	b.n	8007a76 <_free_r+0x22>
 8007ac0:	d902      	bls.n	8007ac8 <_free_r+0x74>
 8007ac2:	230c      	movs	r3, #12
 8007ac4:	602b      	str	r3, [r5, #0]
 8007ac6:	e7d6      	b.n	8007a76 <_free_r+0x22>
 8007ac8:	6820      	ldr	r0, [r4, #0]
 8007aca:	1821      	adds	r1, r4, r0
 8007acc:	428b      	cmp	r3, r1
 8007ace:	bf01      	itttt	eq
 8007ad0:	6819      	ldreq	r1, [r3, #0]
 8007ad2:	685b      	ldreq	r3, [r3, #4]
 8007ad4:	1809      	addeq	r1, r1, r0
 8007ad6:	6021      	streq	r1, [r4, #0]
 8007ad8:	6063      	str	r3, [r4, #4]
 8007ada:	6054      	str	r4, [r2, #4]
 8007adc:	e7cb      	b.n	8007a76 <_free_r+0x22>
 8007ade:	bd38      	pop	{r3, r4, r5, pc}
 8007ae0:	20003acc 	.word	0x20003acc

08007ae4 <_init>:
 8007ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ae6:	bf00      	nop
 8007ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aea:	bc08      	pop	{r3}
 8007aec:	469e      	mov	lr, r3
 8007aee:	4770      	bx	lr

08007af0 <_fini>:
 8007af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007af2:	bf00      	nop
 8007af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007af6:	bc08      	pop	{r3}
 8007af8:	469e      	mov	lr, r3
 8007afa:	4770      	bx	lr
